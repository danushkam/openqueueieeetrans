cscope 15 $HOME/TC/iproute2-4.3.0               0002311012
	@bridge/br_common.h

1 
¥öt_lököfo
(c⁄° 
sockaddr_∆
 *
who
,

2 
∆msghdr
 *
n
,

3 *
¨g
);

4 
¥öt_fdb
(c⁄° 
sockaddr_∆
 *
who
,

5 
∆msghdr
 *
n
, *
¨g
);

6 
¥öt_mdb
(c⁄° 
sockaddr_∆
 *
who
,

7 
∆msghdr
 *
n
, *
¨g
);

9 
do_fdb
(
¨gc
, **
¨gv
);

10 
do_mdb
(
¨gc
, **
¨gv
);

11 
do_m⁄ô‹
(
¨gc
, **
¨gv
);

12 
do_vœn
(
¨gc
, **
¨gv
);

13 
do_lök
(
¨gc
, **
¨gv
);

15 
¥e„ºed_Ámûy
;

16 
show_°©s
;

17 
show_dëaûs
;

18 
time°amp
;

19 
com¥ess_vœns
;

20 
π∆_h™dÀ
 
πh
;

	@bridge/bridge.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<sys/sockë.h
>

11 
	~<°rög.h
>

12 
	~<î∫o.h
>

14 
	~"SNAPSHOT.h
"

15 
	~"utûs.h
"

16 
	~"br_comm⁄.h
"

17 
	~"«me•a˚.h
"

19 
π∆_h™dÀ
 
	gπh
 = { .
fd
 = -1 };

20 
	g¥e„ºed_Ámûy
 = 
AF_UNSPEC
;

21 
	gªsﬁve_ho°s
;

22 
	g⁄ñöe
;

23 
	gshow_°©s
;

24 
	gshow_dëaûs
;

25 
	gcom¥ess_vœns
;

26 
	gtime°amp
;

27 *
	gb©ch_fûe
;

28 
	gf‹˚
;

29 c⁄° *
	g_SL_
;

31 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

33 
	$ußge
()

35 
	`Ârötf
(
°dîr
,

42 
	`exô
(-1);

43 
	}
}

45 
	$do_hñp
(
¨gc
, **
¨gv
)

47 
	`ußge
();

48 
	}
}

51 c⁄° 
	scmd
 {

52 c⁄° *
	mcmd
;

53 (*
	mfunc
)(
	m¨gc
, **
	m¨gv
);

54 } 
	gcmds
[] = {

55 { "lök", 
do_lök
 },

56 { "fdb", 
do_fdb
 },

57 { "mdb", 
do_mdb
 },

58 { "vœn", 
do_vœn
 },

59 { "m⁄ô‹", 
do_m⁄ô‹
 },

60 { "hñp", 
do_hñp
 },

64 
	$do_cmd
(c⁄° *
¨gv0
, 
¨gc
, **
¨gv
)

66 c⁄° 
cmd
 *
c
;

68 
c
 = 
cmds
; c->
cmd
; ++c) {

69 i‡(
	`m©ches
(
¨gv0
, 
c
->
cmd
) == 0)

70  
c
->
	`func
(
¨gc
-1, 
¨gv
+1);

73 
	`Ârötf
(
°dîr
,

74 "Obje˘ \"%s\" i†unknown,Åry \"bridgêhñp\".\n", 
¨gv0
);

76 
	}
}

78 
	$b©ch
(c⁄° *
«me
)

80 *
löe
 = 
NULL
;

81 
size_t
 
Àn
 = 0;

82 
ªt
 = 
EXIT_SUCCESS
;

84 i‡(
«me
 && 
	`°rcmp
(name, "-") != 0) {

85 i‡(
	`‰e›í
(
«me
, "r", 
°dö
Ë=
NULL
) {

86 
	`Ârötf
(
°dîr
,

88 
«me
, 
	`°ªº‹
(
î∫o
));

89  
EXIT_FAILURE
;

93 i‡(
	`π∆_›í
(&
πh
, 0) < 0) {

94 
	`Ârötf
(
°dîr
, "Cannot openÑtnetlink\n");

95  
EXIT_FAILURE
;

98 
cmdlöío
 = 0;

99 
	`gëcmdlöe
(&
löe
, &
Àn
, 
°dö
) != -1) {

100 *
œrgv
[100];

101 
œrgc
;

103 
œrgc
 = 
	`makórgs
(
löe
, 
œrgv
, 100);

104 i‡(
œrgc
 == 0)

107 i‡(
	`do_cmd
(
œrgv
[0], 
œrgc
,Üargv)) {

108 
	`Ârötf
(
°dîr
, "Command failed %s:%d\n",

109 
«me
, 
cmdlöío
);

110 
ªt
 = 
EXIT_FAILURE
;

111 i‡(!
f‹˚
)

115 i‡(
löe
)

116 
	`‰ì
(
löe
);

118 
	`π∆_˛o£
(&
πh
);

119  
ªt
;

120 
	}
}

123 
	$maö
(
¨gc
, **
¨gv
)

125 
¨gc
 > 1) {

126 c⁄° *
›t
 = 
¨gv
[1];

128 i‡(
	`°rcmp
(
›t
, "--") == 0) {

129 
¨gc
--; 
¨gv
++;

132 i‡(
›t
[0] != '-')

134 i‡(
›t
[1] == '-')

135 
›t
++;

137 i‡(
	`m©ches
(
›t
, "-help") == 0) {

138 
	`ußge
();

139 } i‡(
	`m©ches
(
›t
, "-Version") == 0) {

140 
	`¥ötf
("bridge utility, 0.0\n");

141 
	`exô
(0);

142 } i‡(
	`m©ches
(
›t
, "-stats") == 0 ||

143 
	`m©ches
(
›t
, "-statistics") == 0) {

144 ++
show_°©s
;

145 } i‡(
	`m©ches
(
›t
, "-details") == 0) {

146 ++
show_dëaûs
;

147 } i‡(
	`m©ches
(
›t
, "-oneline") == 0) {

148 ++
⁄ñöe
;

149 } i‡(
	`m©ches
(
›t
, "-timestamp") == 0) {

150 ++
time°amp
;

151 } i‡(
	`m©ches
(
›t
, "-family") == 0) {

152 
¨gc
--;

153 
¨gv
++;

154 i‡(
¨gc
 <= 1)

155 
	`ußge
();

156 i‡(
	`°rcmp
(
¨gv
[1], "inet") == 0)

157 
¥e„ºed_Ámûy
 = 
AF_INET
;

158 i‡(
	`°rcmp
(
¨gv
[1], "inet6") == 0)

159 
¥e„ºed_Ámûy
 = 
AF_INET6
;

160 i‡(
	`°rcmp
(
¨gv
[1], "help") == 0)

161 
	`ußge
();

163 
	`öv¨g
("övÆidÖrŸocﬁ famûy", 
¨gv
[1]);

164 } i‡(
	`°rcmp
(
›t
, "-4") == 0) {

165 
¥e„ºed_Ámûy
 = 
AF_INET
;

166 } i‡(
	`°rcmp
(
›t
, "-6") == 0) {

167 
¥e„ºed_Ámûy
 = 
AF_INET6
;

168 } i‡(
	`m©ches
(
›t
, "-netns") == 0) {

169 
	`NEXT_ARG
();

170 i‡(
	`√äs_swôch
(
¨gv
[1]))

171 
	`exô
(-1);

172 } i‡(
	`m©ches
(
›t
, "-compressvlans") == 0) {

173 ++
com¥ess_vœns
;

174 } i‡(
	`m©ches
(
›t
, "-force") == 0) {

175 ++
f‹˚
;

176 } i‡(
	`m©ches
(
›t
, "-batch") == 0) {

177 
¨gc
--;

178 
¨gv
++;

179 i‡(
¨gc
 <= 1)

180 
	`ußge
();

181 
b©ch_fûe
 = 
¨gv
[1];

183 
	`Ârötf
(
°dîr
,

185 
›t
);

186 
	`exô
(-1);

188 
¨gc
--; 
¨gv
++;

191 
_SL_
 = 
⁄ñöe
 ? "\\" : "\n";

193 i‡(
b©ch_fûe
)

194  
	`b©ch
(
b©ch_fûe
);

196 i‡(
	`π∆_›í
(&
πh
, 0) < 0)

197 
	`exô
(1);

199 i‡(
¨gc
 > 1)

200  
	`do_cmd
(
¨gv
[1], 
¨gc
-1,árgv+1);

202 
	`π∆_˛o£
(&
πh
);

203 
	`ußge
();

204 
	}
}

	@bridge/fdb.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<uni°d.h
>

12 
	~<√tdb.h
>

13 
	~<time.h
>

14 
	~<f˙é.h
>

15 
	~<sys/sockë.h
>

16 
	~<sys/time.h
>

17 
	~<√t/if.h
>

18 
	~<√töë/ö.h
>

19 
	~<löux/if_bridge.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/√ighbour.h
>

22 
	~<°rög.h
>

23 
	~<limôs.h
>

25 
	~"lib√éök.h
"

26 
	~"br_comm⁄.h
"

27 
	~"π_«mes.h
"

28 
	~"utûs.h
"

30 
	gfûãr_ödex
;

32 
	$ußge
()

34 
	`Ârötf
(
°dîr
, "Usage: bridge fdb {ádd |áppend | del |Ñeplace } ADDR dev DEV\n"

38 
	`Ârötf
(
°dîr
, " bridge fdb [ show [ br BRDEV ] [ brport DEV ] ]\n");

39 
	`exô
(-1);

40 
	}
}

42 c⁄° *
	$°©e_n2a
(
s
)

44 
buf
[32];

46 i‡(
s
 & 
NUD_PERMANENT
)

49 i‡(
s
 & 
NUD_NOARP
)

52 i‡(
s
 & 
NUD_STALE
)

55 i‡(
s
 & 
NUD_REACHABLE
)

58 
	`•rötf
(
buf
, "°©e=%#x", 
s
);

59  
buf
;

60 
	}
}

62 
	$¥öt_fdb
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

64 
FILE
 *
Â
 = 
¨g
;

65 
ndmsg
 *
r
 = 
	`NLMSG_DATA
(
n
);

66 
Àn
 = 
n
->
∆msg_Àn
;

67 
π©å
 * 
tb
[
NDA_MAX
+1];

69 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWNEIGH
 &&Ç->∆msg_ty≥ !
RTM_DELNEIGH
) {

70 
	`Ârötf
(
°dîr
, "Not RTM_NEWNEIGH: %08x %08x %08x\n",

71 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

76 
Àn
 -
	`NLMSG_LENGTH
((*
r
));

77 i‡(
Àn
 < 0) {

78 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

82 i‡(
r
->
ndm_Ámûy
 !
AF_BRIDGE
)

85 i‡(
fûãr_ödex
 && fûãr_ödex !
r
->
ndm_ifödex
)

88 
	`∑r£_π©å
(
tb
, 
NDA_MAX
, 
	`NDA_RTA
(
r
),

89 
n
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
r
)));

91 i‡(
n
->
∆msg_ty≥
 =
RTM_DELNEIGH
)

92 
	`Ârötf
(
Â
, "Deleted ");

94 i‡(
tb
[
NDA_LLADDR
]) {

95 
	`SPRINT_BUF
(
b1
);

96 
	`Ârötf
(
Â
, "%s ",

97 
	`Œ_addr_n2a
(
	`RTA_DATA
(
tb
[
NDA_LLADDR
]),

98 
	`RTA_PAYLOAD
(
tb
[
NDA_LLADDR
]),

99 
	`Œ_ödex_to_ty≥
(
r
->
ndm_ifödex
),

100 
b1
, (b1)));

103 i‡(!
fûãr_ödex
 && 
r
->
ndm_ifödex
)

104 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
r
->
ndm_ifödex
));

106 i‡(
tb
[
NDA_DST
]) {

107 
	`SPRINT_BUF
(
abuf
);

108 
Ámûy
 = 
AF_INET
;

110 i‡(
	`RTA_PAYLOAD
(
tb
[
NDA_DST
]Ë=(
ö6_addr
))

111 
Ámûy
 = 
AF_INET6
;

113 
	`Ârötf
(
Â
, "dst %s ",

114 
	`f‹m©_ho°
(
Ámûy
,

115 
	`RTA_PAYLOAD
(
tb
[
NDA_DST
]),

116 
	`RTA_DATA
(
tb
[
NDA_DST
]),

117 
abuf
, (abuf)));

120 i‡(
tb
[
NDA_VLAN
]) {

121 
__u16
 
vid
 = 
	`πa_gë©å_u16
(
tb
[
NDA_VLAN
]);

122 
	`Ârötf
(
Â
, "vœ¿%hu ", 
vid
);

125 i‡(
tb
[
NDA_PORT
])

126 
	`Ârötf
(
Â
, "p‹à%d ", 
	`¡ohs
(
	`πa_gë©å_u16
(
tb
[
NDA_PORT
])));

127 i‡(
tb
[
NDA_VNI
])

128 
	`Ârötf
(
Â
, "vnò%d ", 
	`πa_gë©å_u32
(
tb
[
NDA_VNI
]));

129 i‡(
tb
[
NDA_IFINDEX
]) {

130 
ifödex
 = 
	`πa_gë©å_u32
(
tb
[
NDA_IFINDEX
]);

132 i‡(
ifödex
) {

133 
i‚ame
[
IF_NAMESIZE
];

135 i‡(!
tb
[
NDA_LINK_NETNSID
] &&

136 
	`if_ödext⁄ame
(
ifödex
, 
i‚ame
))

137 
	`Ârötf
(
Â
, "vü %†", 
i‚ame
);

139 
	`Ârötf
(
Â
, "vü ifödex %u ", 
ifödex
);

142 i‡(
tb
[
NDA_LINK_NETNSID
])

143 
	`Ârötf
(
Â
, "link-netnsid %d ",

144 
	`πa_gë©å_u32
(
tb
[
NDA_LINK_NETNSID
]));

146 i‡(
show_°©s
 && 
tb
[
NDA_CACHEINFO
]) {

147 
nda_ˇcheöfo
 *
ci
 = 
	`RTA_DATA
(
tb
[
NDA_CACHEINFO
]);

148 
hz
 = 
	`gë_u£r_hz
();

150 
	`Ârötf
(
Â
, "u£d %d/%d ", 
ci
->
ndm_u£d
/
hz
,

151 
ci
->
ndm_upd©ed
/
hz
);

153 i‡(
r
->
ndm_Êags
 & 
NTF_SELF
)

154 
	`Ârötf
(
Â
, "self ");

155 i‡(
tb
[
NDA_MASTER
])

156 
	`Ârötf
(
Â
, "master %s ",

157 
	`Œ_ödex_to_«me
(
	`πa_gë©å_u32
(
tb
[
NDA_MASTER
])));

158 i‡(
r
->
ndm_Êags
 & 
NTF_MASTER
)

159 
	`Ârötf
(
Â
, "master ");

160 i‡(
r
->
ndm_Êags
 & 
NTF_ROUTER
)

161 
	`Ârötf
(
Â
, "router ");

162 i‡(
r
->
ndm_Êags
 & 
NTF_EXT_LEARNED
)

163 
	`Ârötf
(
Â
, "offload ");

165 
	`Ârötf
(
Â
, "%s\n", 
	`°©e_n2a
(
r
->
ndm_°©e
));

166 
	`fÊush
(
Â
);

169 
	}
}

171 
	$fdb_show
(
¨gc
, **
¨gv
)

174 
∆msghdr
 
n
;

175 
iföfomsg
 
ifm
;

176 
buf
[256];

177 } 
ªq
;

179 *
fûãr_dev
 = 
NULL
;

180 *
br
 = 
NULL
;

181 
msg_size
 = (
iföfomsg
);

183 
	`mem£t
(&
ªq
, 0, (req));

184 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iföfomsg
));

185 
ªq
.
ifm
.
ifi_Ámûy
 = 
PF_BRIDGE
;

187 
¨gc
 > 0) {

188 i‡((
	`°rcmp
(*
¨gv
, "brport") == 0) || strcmp(*argv, "dev") == 0) {

189 
	`NEXT_ARG
();

190 
fûãr_dev
 = *
¨gv
;

191 } i‡(
	`°rcmp
(*
¨gv
, "br") == 0) {

192 
	`NEXT_ARG
();

193 
br
 = *
¨gv
;

195 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

196 
	`ußge
();

198 
¨gc
--; 
¨gv
++;

201 i‡(
br
) {

202 
br_ifödex
 = 
	`Œ_«me_to_ödex
(
br
);

203 i‡(
br_ifödex
 == 0) {

204 
	`Ârötf
(
°dîr
, "C™nŸ föd bridgêdevi˚ \"%s\"\n", 
br
);

207 
	`add©å32
(&
ªq
.
n
, ‘eq), 
IFLA_MASTER
, 
br_ifödex
);

208 
msg_size
 +
	`RTA_LENGTH
(4);

212 i‡(
fûãr_dev
) {

213 
fûãr_ödex
 = 
	`if_«mëoödex
(
fûãr_dev
);

214 i‡(
fûãr_ödex
 == 0) {

215 
	`Ârötf
(
°dîr
, "Cannot find device \"%s\"\n",

216 
fûãr_dev
);

219 
ªq
.
ifm
.
ifi_ödex
 = 
fûãr_ödex
;

222 i‡(
	`π∆_dump_ªque°
(&
πh
, 
RTM_GETNEIGH
, &
ªq
.
ifm
, 
msg_size
) < 0) {

223 
	`≥º‹
("Cannot send dumpÑequest");

224 
	`exô
(1);

227 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_fdb
, 
°dout
) < 0) {

228 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

229 
	`exô
(1);

233 
	}
}

235 
	$fdb_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

238 
∆msghdr
 
n
;

239 
ndmsg
 
ndm
;

240 
buf
[256];

241 } 
ªq
;

242 *
addr
 = 
NULL
;

243 *
d
 = 
NULL
;

244 
abuf
[
ETH_ALEN
];

245 
d°_ok
 = 0;

246 
öë_¥efix
 
d°
;

247 
p‹t
 = 0;

248 
vni
 = ~0;

249 
vü
 = 0;

250 *
íd±r
;

251 
vid
 = -1;

253 
	`mem£t
(&
ªq
, 0, (req));

255 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
ndmsg
));

256 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

257 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

258 
ªq
.
ndm
.
ndm_Ámûy
 = 
PF_BRIDGE
;

259 
ªq
.
ndm
.
ndm_°©e
 = 
NUD_NOARP
;

261 
¨gc
 > 0) {

262 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

263 
	`NEXT_ARG
();

264 
d
 = *
¨gv
;

265 } i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

266 
	`NEXT_ARG
();

267 i‡(
d°_ok
)

268 
	`du∑rg2
("d°", *
¨gv
);

269 
	`gë_addr
(&
d°
, *
¨gv
, 
¥e„ºed_Ámûy
);

270 
d°_ok
 = 1;

271 } i‡(
	`°rcmp
(*
¨gv
, "port") == 0) {

273 
	`NEXT_ARG
();

274 
p‹t
 = 
	`°πoul
(*
¨gv
, &
íd±r
, 0);

275 i‡(
íd±r
 && *endptr) {

276 
£rvít
 *
p£
;

278 
p£
 = 
	`gë£rvby«me
(*
¨gv
, "udp");

279 i‡(!
p£
)

280 
	`öv¨g
("övÆidÖ‹t\n", *
¨gv
);

281 
p‹t
 = 
	`¡ohs
(
p£
->
s_p‹t
);

282 } i‡(
p‹t
 > 0xffff)

283 
	`öv¨g
("övÆidÖ‹t\n", *
¨gv
);

284 } i‡(
	`°rcmp
(*
¨gv
, "vni") == 0) {

285 
	`NEXT_ARG
();

286 
vni
 = 
	`°πoul
(*
¨gv
, &
íd±r
, 0);

287 i‡((
íd±r
 && *endptr) ||

288 (
vni
 >> 24Ë|| vnò=
ULONG_MAX
)

289 
	`öv¨g
("övÆid VNI\n", *
¨gv
);

290 } i‡(
	`°rcmp
(*
¨gv
, "via") == 0) {

291 
	`NEXT_ARG
();

292 
vü
 = 
	`if_«mëoödex
(*
¨gv
);

293 i‡(
vü
 == 0)

294 
	`öv¨g
("övÆid devi˚\n", *
¨gv
);

295 } i‡(
	`°rcmp
(*
¨gv
, "self") == 0) {

296 
ªq
.
ndm
.
ndm_Êags
 |
NTF_SELF
;

297 } i‡(
	`m©ches
(*
¨gv
, "master") == 0) {

298 
ªq
.
ndm
.
ndm_Êags
 |
NTF_MASTER
;

299 } i‡(
	`m©ches
(*
¨gv
, "router") == 0) {

300 
ªq
.
ndm
.
ndm_Êags
 |
NTF_ROUTER
;

301 } i‡(
	`m©ches
(*
¨gv
, "local") == 0||

302 
	`m©ches
(*
¨gv
, "permanent") == 0) {

303 
ªq
.
ndm
.
ndm_°©e
 |
NUD_PERMANENT
;

304 } i‡(
	`m©ches
(*
¨gv
, "temp") == 0) {

305 
ªq
.
ndm
.
ndm_°©e
 |
NUD_REACHABLE
;

306 } i‡(
	`m©ches
(*
¨gv
, "vlan") == 0) {

307 i‡(
vid
 >= 0)

308 
	`du∑rg2
("vœn", *
¨gv
);

309 
	`NEXT_ARG
();

310 
vid
 = 
	`©oi
(*
¨gv
);

311 } i‡(
	`m©ches
(*
¨gv
, "use") == 0) {

312 
ªq
.
ndm
.
ndm_Êags
 |
NTF_USE
;

314 i‡(
	`°rcmp
(*
¨gv
, "to") == 0) {

315 
	`NEXT_ARG
();

317 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

318 
	`ußge
();

319 i‡(
addr
)

320 
	`du∑rg2
("to", *
¨gv
);

321 
addr
 = *
¨gv
;

323 
¨gc
--; 
¨gv
++;

326 i‡(
d
 =
NULL
 || 
addr
 == NULL) {

327 
	`Ârötf
(
°dîr
, "DeviceándáddressáreÑequiredárguments.\n");

332 i‡(!(
ªq
.
ndm
.
ndm_Êags
&(
NTF_SELF
|
NTF_MASTER
)))

333 
ªq
.
ndm
.
ndm_Êags
 |
NTF_SELF
;

336 i‡(!(
ªq
.
ndm
.
ndm_°©e
&(
NUD_PERMANENT
|
NUD_REACHABLE
)))

337 
ªq
.
ndm
.
ndm_°©e
 |
NUD_PERMANENT
;

339 i‡(
	`ssˇnf
(
addr
, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",

340 
abuf
,ábuf+1,ábuf+2,

341 
abuf
+3,ábuf+4,ábuf+5) != 6) {

342 
	`Ârötf
(
°dîr
, "InvÆid ma¯addªs†%s\n", 
addr
);

346 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
NDA_LLADDR
, 
abuf
, 
ETH_ALEN
);

347 i‡(
d°_ok
)

348 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
NDA_DST
, &
d°
.
d©a
, d°.
byãÀn
);

350 i‡(
vid
 >= 0)

351 
	`add©å16
(&
ªq
.
n
, ‘eq), 
NDA_VLAN
, 
vid
);

353 i‡(
p‹t
) {

354 
dp‹t
;

356 
dp‹t
 = 
	`ht⁄s
(()
p‹t
);

357 
	`add©å16
(&
ªq
.
n
, ‘eq), 
NDA_PORT
, 
dp‹t
);

359 i‡(
vni
 != ~0)

360 
	`add©å32
(&
ªq
.
n
, ‘eq), 
NDA_VNI
, 
vni
);

361 i‡(
vü
)

362 
	`add©å32
(&
ªq
.
n
, ‘eq), 
NDA_IFINDEX
, 
vü
);

364 
ªq
.
ndm
.
ndm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
);

365 i‡(
ªq
.
ndm
.
ndm_ifödex
 == 0) {

366 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

370 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

374 
	}
}

376 
	$do_fdb
(
¨gc
, **
¨gv
)

378 
	`Œ_öô_m≠
(&
πh
);

380 i‡(
¨gc
 > 0) {

381 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

382  
	`fdb_modify
(
RTM_NEWNEIGH
, 
NLM_F_CREATE
|
NLM_F_EXCL
, 
¨gc
-1, 
¨gv
+1);

383 i‡(
	`m©ches
(*
¨gv
, "append") == 0)

384  
	`fdb_modify
(
RTM_NEWNEIGH
, 
NLM_F_CREATE
|
NLM_F_APPEND
, 
¨gc
-1, 
¨gv
+1);

385 i‡(
	`m©ches
(*
¨gv
, "replace") == 0)

386  
	`fdb_modify
(
RTM_NEWNEIGH
, 
NLM_F_CREATE
|
NLM_F_REPLACE
, 
¨gc
-1, 
¨gv
+1);

387 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

388  
	`fdb_modify
(
RTM_DELNEIGH
, 0, 
¨gc
-1, 
¨gv
+1);

389 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

390 
	`m©ches
(*
¨gv
, "lst") == 0 ||

391 
	`m©ches
(*
¨gv
, "list") == 0)

392  
	`fdb_show
(
¨gc
-1, 
¨gv
+1);

393 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

394 
	`ußge
();

396  
	`fdb_show
(0, 
NULL
);

398 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"bridgêfdb hñp\".\n", *
¨gv
);

399 
	`exô
(-1);

400 
	}
}

	@bridge/link.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

5 
	~<time.h
>

6 
	~<sys/sockë.h
>

7 
	~<sys/time.h
>

8 
	~<√töë/ö.h
>

9 
	~<löux/if.h
>

10 
	~<löux/if_bridge.h
>

11 
	~<°rög.h
>

12 
	~<°dboﬁ.h
>

14 
	~"lib√éök.h
"

15 
	~"utûs.h
"

16 
	~"br_comm⁄.h
"

18 
	gfûãr_ödex
;

20 c⁄° *
	gp‹t_°©es
[] = {

21 [
BR_STATE_DISABLED
] = "disabled",

22 [
BR_STATE_LISTENING
] = "listening",

23 [
BR_STATE_LEARNING
] = "learning",

24 [
BR_STATE_FORWARDING
] = "forwarding",

25 [
BR_STATE_BLOCKING
] = "blocking",

28 *
if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
);

30 
	$¥öt_lök_Êags
(
FILE
 *
Â
, 
Êags
)

32 
	`Ârötf
(
Â
, "<");

33 i‡(
Êags
 & 
IFF_UP
 && !(Êag†& 
IFF_RUNNING
))

34 
	`Ârötf
(
Â
, "NO-CARRIER%s", 
Êags
 ? "," : "");

35 
Êags
 &~
IFF_RUNNING
;

36 
	#_PF
(
f
Ëi‡(
Êags
&
IFF_
##f) { \

37 
Êags
 &~
IFF_
##
f
 ; \

38 
	`Ârötf
(
Â
, #‡"%s", 
Êags
 ? "," : ""); }

	)

39 
	`_PF
(
LOOPBACK
);

40 
	`_PF
(
BROADCAST
);

41 
	`_PF
(
POINTOPOINT
);

42 
	`_PF
(
MULTICAST
);

43 
	`_PF
(
NOARP
);

44 
	`_PF
(
ALLMULTI
);

45 
	`_PF
(
PROMISC
);

46 
	`_PF
(
MASTER
);

47 
	`_PF
(
SLAVE
);

48 
	`_PF
(
DEBUG
);

49 
	`_PF
(
DYNAMIC
);

50 
	`_PF
(
AUTOMEDIA
);

51 
	`_PF
(
PORTSEL
);

52 
	`_PF
(
NOTRAILERS
);

53 
	`_PF
(
UP
);

54 
	`_PF
(
LOWER_UP
);

55 
	`_PF
(
DORMANT
);

56 
	`_PF
(
ECHO
);

57 #unde‡
_PF


58 i‡(
Êags
)

59 
	`Ârötf
(
Â
, "%x", 
Êags
);

60 
	`Ârötf
(
Â
, "> ");

61 
	}
}

63 c⁄° *
	g›î_°©es
[] = {

68 c⁄° *
	ghw_mode
[] = {"VEB", "VEPA"};

70 
	$¥öt_›î°©e
(
FILE
 *
f
, 
__u8
 
°©e
)

72 i‡(
°©e
 >(
›î_°©es
)/(oper_states[0]))

73 
	`Ârötf
(
f
, "°©ê%#x ", 
°©e
);

75 
	`Ârötf
(
f
, "°©ê%†", 
›î_°©es
[
°©e
]);

76 
	}
}

78 
	$¥öt_p‹t°©e
(
FILE
 *
f
, 
__u8
 
°©e
)

80 i‡(
°©e
 <
BR_STATE_BLOCKING
)

81 
	`Ârötf
(
f
, "°©ê%†", 
p‹t_°©es
[
°©e
]);

83 
	`Ârötf
(
f
, "°©ê(%dË", 
°©e
);

84 
	}
}

86 
	$¥öt_⁄off
(
FILE
 *
f
, *
Êag
, 
__u8
 
vÆ
)

88 
	`Ârötf
(
f
, "%†%†", 
Êag
, 
vÆ
 ? "on" : "off");

89 
	}
}

91 
	$¥öt_hwmode
(
FILE
 *
f
, 
__u16
 
mode
)

93 i‡(
mode
 >(
hw_mode
)/(hw_mode[0]))

94 
	`Ârötf
(
f
, "hwmodê%#hx ", 
mode
);

96 
	`Ârötf
(
f
, "hwmodê%†", 
hw_mode
[
mode
]);

97 
	}
}

99 
	$¥öt_lököfo
(c⁄° 
sockaddr_∆
 *
who
,

100 
∆msghdr
 *
n
, *
¨g
)

102 
FILE
 *
Â
 = 
¨g
;

103 
Àn
 = 
n
->
∆msg_Àn
;

104 
iföfomsg
 *
ifi
 = 
	`NLMSG_DATA
(
n
);

105 
π©å
 * 
tb
[
IFLA_MAX
+1];

106 
b1
[
IFNAMSIZ
];

108 
Àn
 -
	`NLMSG_LENGTH
((*
ifi
));

109 i‡(
Àn
 < 0) {

110 
	`Ârötf
(
°dîr
, "MessageÅoo short!\n");

114 i‡(!(
ifi
->
ifi_Ámûy
 =
AF_BRIDGE
 || ifi->ifi_Ámûy =
AF_UNSPEC
))

117 i‡(
fûãr_ödex
 && fûãr_ödex !
ifi
->
ifi_ödex
)

120 
	`∑r£_π©å_Êags
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(
ifi
), 
Àn
, 
NLA_F_NESTED
);

122 i‡(
tb
[
IFLA_IFNAME
] =
NULL
) {

123 
	`Ârötf
(
°dîr
, "BUG:Çil ifname\n");

127 i‡(
n
->
∆msg_ty≥
 =
RTM_DELLINK
)

128 
	`Ârötf
(
Â
, "Deleted ");

130 
	`Ârötf
(
Â
, "%d: %†", 
ifi
->
ifi_ödex
,

131 
tb
[
IFLA_IFNAME
] ? 
	`πa_gë©å_°r
(tb[IFLA_IFNAME]) : "<nil>");

133 i‡(
tb
[
IFLA_OPERSTATE
])

134 
	`¥öt_›î°©e
(
Â
, 
	`πa_gë©å_u8
(
tb
[
IFLA_OPERSTATE
]));

136 i‡(
tb
[
IFLA_LINK
]) {

137 
	`SPRINT_BUF
(
b1
);

138 
iÊök
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_LINK
]);

139 i‡(
iÊök
 == 0)

140 
	`Ârötf
(
Â
, "@NONE: ");

142 
	`Ârötf
(
Â
, "@%s: ",

143 
	`if_ödext⁄ame
(
iÊök
, 
b1
));

145 
	`Ârötf
(
Â
, ": ");

147 
	`¥öt_lök_Êags
(
Â
, 
ifi
->
ifi_Êags
);

149 i‡(
tb
[
IFLA_MTU
])

150 
	`Ârötf
(
Â
, "mtu %u ", 
	`πa_gë©å_u32
(
tb
[
IFLA_MTU
]));

152 i‡(
tb
[
IFLA_MASTER
])

153 
	`Ârötf
(
Â
, "master %s ",

154 
	`if_ödext⁄ame
(
	`πa_gë©å_u32
(
tb
[
IFLA_MASTER
]), 
b1
));

156 i‡(
tb
[
IFLA_PROTINFO
]) {

157 i‡(
tb
[
IFLA_PROTINFO
]->
πa_ty≥
 & 
NLA_F_NESTED
) {

158 
π©å
 *
¥tb
[
IFLA_BRPORT_MAX
+1];

160 
	`∑r£_π©å_√°ed
(
¥tb
, 
IFLA_BRPORT_MAX
,

161 
tb
[
IFLA_PROTINFO
]);

163 i‡(
¥tb
[
IFLA_BRPORT_STATE
])

164 
	`¥öt_p‹t°©e
(
Â
,

165 
	`πa_gë©å_u8
(
¥tb
[
IFLA_BRPORT_STATE
]));

166 i‡(
¥tb
[
IFLA_BRPORT_PRIORITY
])

167 
	`Ârötf
(
Â
, "priority %hu ",

168 
	`πa_gë©å_u16
(
¥tb
[
IFLA_BRPORT_PRIORITY
]));

169 i‡(
¥tb
[
IFLA_BRPORT_COST
])

170 
	`Ârötf
(
Â
, "cost %u ",

171 
	`πa_gë©å_u32
(
¥tb
[
IFLA_BRPORT_COST
]));

173 i‡(
show_dëaûs
) {

174 
	`Ârötf
(
Â
, "%† ", 
_SL_
);

176 i‡(
¥tb
[
IFLA_BRPORT_MODE
])

177 
	`¥öt_⁄off
(
Â
, "hairpin",

178 
	`πa_gë©å_u8
(
¥tb
[
IFLA_BRPORT_MODE
]));

179 i‡(
¥tb
[
IFLA_BRPORT_GUARD
])

180 
	`¥öt_⁄off
(
Â
, "guard",

181 
	`πa_gë©å_u8
(
¥tb
[
IFLA_BRPORT_GUARD
]));

182 i‡(
¥tb
[
IFLA_BRPORT_PROTECT
])

183 
	`¥öt_⁄off
(
Â
, "root_block",

184 
	`πa_gë©å_u8
(
¥tb
[
IFLA_BRPORT_PROTECT
]));

185 i‡(
¥tb
[
IFLA_BRPORT_FAST_LEAVE
])

186 
	`¥öt_⁄off
(
Â
, "fastleave",

187 
	`πa_gë©å_u8
(
¥tb
[
IFLA_BRPORT_FAST_LEAVE
]));

188 i‡(
¥tb
[
IFLA_BRPORT_LEARNING
])

189 
	`¥öt_⁄off
(
Â
, "learning",

190 
	`πa_gë©å_u8
(
¥tb
[
IFLA_BRPORT_LEARNING
]));

191 i‡(
¥tb
[
IFLA_BRPORT_LEARNING_SYNC
])

192 
	`¥öt_⁄off
(
Â
, "learning_sync",

193 
	`πa_gë©å_u8
(
¥tb
[
IFLA_BRPORT_LEARNING_SYNC
]));

194 i‡(
¥tb
[
IFLA_BRPORT_UNICAST_FLOOD
])

195 
	`¥öt_⁄off
(
Â
, "flood",

196 
	`πa_gë©å_u8
(
¥tb
[
IFLA_BRPORT_UNICAST_FLOOD
]));

199 
	`¥öt_p‹t°©e
(
Â
, 
	`πa_gë©å_u8
(
tb
[
IFLA_PROTINFO
]));

202 i‡(
tb
[
IFLA_AF_SPEC
]) {

206 
π©å
 *
a·b
[
IFLA_BRIDGE_MAX
+1];

208 
	`∑r£_π©å_√°ed
(
a·b
, 
IFLA_BRIDGE_MAX
, 
tb
[
IFLA_AF_SPEC
]);

210 i‡(
a·b
[
IFLA_BRIDGE_MODE
])

211 
	`¥öt_hwmode
(
Â
, 
	`πa_gë©å_u16
(
a·b
[
IFLA_BRIDGE_MODE
]));

214 
	`Ârötf
(
Â
, "\n");

215 
	`fÊush
(
Â
);

217 
	}
}

219 
	$ußge
()

221 
	`Ârötf
(
°dîr
, "Usage: bridgeÜink set dev DEV [ cost COST ] [Öriority PRIO ] [ state STATE ]\n");

222 
	`Ârötf
(
°dîr
, " [ guard {on | off} ]\n");

223 
	`Ârötf
(
°dîr
, " [ hairpin {on | off} ] \n");

224 
	`Ârötf
(
°dîr
, " [ fastleave {on | off} ]\n");

225 
	`Ârötf
(
°dîr
, " [Ñoot_block {on | off} ]\n");

226 
	`Ârötf
(
°dîr
, " [Üearning {on | off} ]\n");

227 
	`Ârötf
(
°dîr
, " [Üearning_sync {on | off} ]\n");

228 
	`Ârötf
(
°dîr
, " [ flood {on | off} ]\n");

229 
	`Ârötf
(
°dîr
, " [ hwmode {vepa | veb} ]\n");

230 
	`Ârötf
(
°dîr
, " [ self ] [ master ]\n");

231 
	`Ârötf
(
°dîr
, " bridgeÜink show [dev DEV]\n");

232 
	`exô
(-1);

233 
	}
}

235 
boﬁ
 
	$⁄_off
(*
¨g
, 
__s8
 *
©å
, *
vÆ
)

237 i‡(
	`°rcmp
(
vÆ
, "on") == 0)

238 *
©å
 = 1;

239 i‡(
	`°rcmp
(
vÆ
, "off") == 0)

240 *
©å
 = 0;

242 
	`Ârötf
(
°dîr
,

244 
¨g
);

245  
Ál£
;

248  
åue
;

249 
	}
}

251 
	$bæök_modify
(
¨gc
, **
¨gv
)

254 
∆msghdr
 
n
;

255 
iföfomsg
 
ifm
;

256 
buf
[512];

257 } 
ªq
;

258 *
d
 = 
NULL
;

259 
__s8
 
À¨nög
 = -1;

260 
__s8
 
À¨nög_sync
 = -1;

261 
__s8
 
Êood
 = -1;

262 
__s8
 
haúpö
 = -1;

263 
__s8
 
bpdu_gu¨d
 = -1;

264 
__s8
 
Á°_Àave
 = -1;

265 
__s8
 
roŸ_block
 = -1;

266 
__u32
 
co°
 = 0;

267 
__s16
 
¥i‹ôy
 = -1;

268 
__s8
 
°©e
 = -1;

269 
__s16
 
mode
 = -1;

270 
__u16
 
Êags
 = 0;

271 
π©å
 *
√°
;

273 
	`mem£t
(&
ªq
, 0, (req));

275 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iföfomsg
));

276 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

277 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_SETLINK
;

278 
ªq
.
ifm
.
ifi_Ámûy
 = 
PF_BRIDGE
;

280 
¨gc
 > 0) {

281 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

282 
	`NEXT_ARG
();

283 
d
 = *
¨gv
;

284 } i‡(
	`°rcmp
(*
¨gv
, "guard") == 0) {

285 
	`NEXT_ARG
();

286 i‡(!
	`⁄_off
("gu¨d", &
bpdu_gu¨d
, *
¨gv
))

288 } i‡(
	`°rcmp
(*
¨gv
, "hairpin") == 0) {

289 
	`NEXT_ARG
();

290 i‡(!
	`⁄_off
("haúpög", &
haúpö
, *
¨gv
))

292 } i‡(
	`°rcmp
(*
¨gv
, "fastleave") == 0) {

293 
	`NEXT_ARG
();

294 i‡(!
	`⁄_off
("Á°Àave", &
Á°_Àave
, *
¨gv
))

296 } i‡(
	`°rcmp
(*
¨gv
, "root_block") == 0) {

297 
	`NEXT_ARG
();

298 i‡(!
	`⁄_off
("roŸ_block", &
roŸ_block
, *
¨gv
))

300 } i‡(
	`°rcmp
(*
¨gv
, "learning") == 0) {

301 
	`NEXT_ARG
();

302 i‡(!
	`⁄_off
("À¨nög", &
À¨nög
, *
¨gv
))

304 } i‡(
	`°rcmp
(*
¨gv
, "learning_sync") == 0) {

305 
	`NEXT_ARG
();

306 i‡(!
	`⁄_off
("À¨nög_sync", &
À¨nög_sync
, *
¨gv
))

308 } i‡(
	`°rcmp
(*
¨gv
, "flood") == 0) {

309 
	`NEXT_ARG
();

310 i‡(!
	`⁄_off
("Êood", &
Êood
, *
¨gv
))

312 } i‡(
	`°rcmp
(*
¨gv
, "cost") == 0) {

313 
	`NEXT_ARG
();

314 
co°
 = 
	`©oi
(*
¨gv
);

315 } i‡(
	`°rcmp
(*
¨gv
, "priority") == 0) {

316 
	`NEXT_ARG
();

317 
¥i‹ôy
 = 
	`©oi
(*
¨gv
);

318 } i‡(
	`°rcmp
(*
¨gv
, "state") == 0) {

319 
	`NEXT_ARG
();

320 *
íd±r
;

321 
size_t
 
n°©es
 = (
p‹t_°©es
) / (*port_states);

322 
°©e
 = 
	`°πﬁ
(*
¨gv
, &
íd±r
, 10);

323 i‡(!(**
¨gv
 !'\0' && *
íd±r
 == '\0')) {

324 
°©e
 = 0; sèã < 
n°©es
; state++)

325 i‡(
	`°rcmp
(
p‹t_°©es
[
°©e
], *
¨gv
) == 0)

327 i‡(
°©e
 =
n°©es
) {

328 
	`Ârötf
(
°dîr
,

333 } i‡(
	`°rcmp
(*
¨gv
, "hwmode") == 0) {

334 
	`NEXT_ARG
();

335 
Êags
 = 
BRIDGE_FLAGS_SELF
;

336 i‡(
	`°rcmp
(*
¨gv
, "vepa") == 0)

337 
mode
 = 
BRIDGE_MODE_VEPA
;

338 i‡(
	`°rcmp
(*
¨gv
, "veb") == 0)

339 
mode
 = 
BRIDGE_MODE_VEB
;

341 
	`Ârötf
(
°dîr
,

346 } i‡(
	`°rcmp
(*
¨gv
, "self") == 0) {

347 
Êags
 |
BRIDGE_FLAGS_SELF
;

348 } i‡(
	`°rcmp
(*
¨gv
, "master") == 0) {

349 
Êags
 |
BRIDGE_FLAGS_MASTER
;

351 
	`ußge
();

353 
¨gc
--; 
¨gv
++;

355 i‡(
d
 =
NULL
) {

356 
	`Ârötf
(
°dîr
, "Device isáÑequiredárgument.\n");

361 
ªq
.
ifm
.
ifi_ödex
 = 
	`Œ_«me_to_ödex
(
d
);

362 i‡(
ªq
.
ifm
.
ifi_ödex
 == 0) {

363 
	`Ârötf
(
°dîr
, "C™nŸ föd bridgêdevi˚ \"%s\"\n", 
d
);

370 
√°
 = 
	`add©å_√°
(&
ªq
.
n
, (req),

371 
IFLA_PROTINFO
 | 
NLA_F_NESTED
);

373 i‡(
bpdu_gu¨d
 >= 0)

374 
	`add©å8
(&
ªq
.
n
, ‘eq), 
IFLA_BRPORT_GUARD
, 
bpdu_gu¨d
);

375 i‡(
haúpö
 >= 0)

376 
	`add©å8
(&
ªq
.
n
, ‘eq), 
IFLA_BRPORT_MODE
, 
haúpö
);

377 i‡(
Á°_Àave
 >= 0)

378 
	`add©å8
(&
ªq
.
n
, ‘eq), 
IFLA_BRPORT_FAST_LEAVE
,

379 
Á°_Àave
);

380 i‡(
roŸ_block
 >= 0)

381 
	`add©å8
(&
ªq
.
n
, ‘eq), 
IFLA_BRPORT_PROTECT
, 
roŸ_block
);

382 i‡(
Êood
 >= 0)

383 
	`add©å8
(&
ªq
.
n
, ‘eq), 
IFLA_BRPORT_UNICAST_FLOOD
, 
Êood
);

384 i‡(
À¨nög
 >= 0)

385 
	`add©å8
(&
ªq
.
n
, ‘eq), 
IFLA_BRPORT_LEARNING
, 
À¨nög
);

386 i‡(
À¨nög_sync
 >= 0)

387 
	`add©å8
(&
ªq
.
n
, ‘eq), 
IFLA_BRPORT_LEARNING_SYNC
,

388 
À¨nög_sync
);

390 i‡(
co°
 > 0)

391 
	`add©å32
(&
ªq
.
n
, ‘eq), 
IFLA_BRPORT_COST
, 
co°
);

393 i‡(
¥i‹ôy
 >= 0)

394 
	`add©å16
(&
ªq
.
n
, ‘eq), 
IFLA_BRPORT_PRIORITY
, 
¥i‹ôy
);

396 i‡(
°©e
 >= 0)

397 
	`add©å8
(&
ªq
.
n
, ‘eq), 
IFLA_BRPORT_STATE
, 
°©e
);

399 
	`add©å_√°_íd
(&
ªq
.
n
, 
√°
);

406 i‡(
mode
 >0 || 
Êags
 > 0) {

407 
√°
 = 
	`add©å_√°
(&
ªq
.
n
, ‘eq), 
IFLA_AF_SPEC
);

409 i‡(
Êags
 > 0)

410 
	`add©å16
(&
ªq
.
n
, ‘eq), 
IFLA_BRIDGE_FLAGS
, 
Êags
);

412 i‡(
mode
 >= 0)

413 
	`add©å16
(&
ªq
.
n
, ‘eq), 
IFLA_BRIDGE_MODE
, 
mode
);

415 
	`add©å_√°_íd
(&
ªq
.
n
, 
√°
);

418 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

422 
	}
}

424 
	$bæök_show
(
¨gc
, **
¨gv
)

426 *
fûãr_dev
 = 
NULL
;

428 
¨gc
 > 0) {

429 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

430 
	`NEXT_ARG
();

431 i‡(
fûãr_dev
)

432 
	`du∑rg
("dev", *
¨gv
);

433 
fûãr_dev
 = *
¨gv
;

435 
¨gc
--; 
¨gv
++;

438 i‡(
fûãr_dev
) {

439 i‡((
fûãr_ödex
 = 
	`Œ_«me_to_ödex
(
fûãr_dev
)) == 0) {

440 
	`Ârötf
(
°dîr
, "Cannot find device \"%s\"\n",

441 
fûãr_dev
);

446 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
PF_BRIDGE
, 
RTM_GETLINK
) < 0) {

447 
	`≥º‹
("Cannon send dumpÑequest");

448 
	`exô
(1);

451 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_lököfo
, 
°dout
) < 0) {

452 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

453 
	`exô
(1);

456 
	}
}

458 
	$do_lök
(
¨gc
, **
¨gv
)

460 
	`Œ_öô_m≠
(&
πh
);

461 i‡(
¨gc
 > 0) {

462 i‡(
	`m©ches
(*
¨gv
, "set") == 0 ||

463 
	`m©ches
(*
¨gv
, "change") == 0)

464  
	`bæök_modify
(
¨gc
-1, 
¨gv
+1);

465 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

466 
	`m©ches
(*
¨gv
, "lst") == 0 ||

467 
	`m©ches
(*
¨gv
, "list") == 0)

468  
	`bæök_show
(
¨gc
-1, 
¨gv
+1);

469 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

470 
	`ußge
();

472  
	`bæök_show
(0, 
NULL
);

474 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"bridgêlök hñp\".\n", *
¨gv
);

475 
	`exô
(-1);

476 
	}
}

	@bridge/mdb.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<uni°d.h
>

8 
	~<f˙é.h
>

9 
	~<sys/sockë.h
>

10 
	~<√t/if.h
>

11 
	~<√töë/ö.h
>

12 
	~<löux/if_bridge.h
>

13 
	~<löux/if_ëhî.h
>

14 
	~<°rög.h
>

15 
	~<¨∑/öë.h
>

17 
	~"lib√éök.h
"

18 
	~"br_comm⁄.h
"

19 
	~"π_«mes.h
"

20 
	~"utûs.h
"

22 #i‚de‡
MDBA_RTA


23 
	#MDBA_RTA
(
r
) \

24 ((
π©å
*)(((*)(
r
)Ë+ 
	`NLMSG_ALIGN
((
br_p‹t_msg
))))

	)

27 
	gfûãr_ödex
;

29 
	$ußge
()

31 
	`Ârötf
(
°dîr
, "Usage: bridge mdb {ádd | del } dev DEVÖort PORT grp GROUP [permanent |Åemp] [vid VID]\n");

32 
	`Ârötf
(
°dîr
, " bridge mdb {show} [ dev DEV ]\n");

33 
	`exô
(-1);

34 
	}
}

36 
	$br_¥öt_rouãr_p‹ts
(
FILE
 *
f
, 
π©å
 *
©å
)

38 
uöt32_t
 *
p‹t_ifödex
;

39 
π©å
 *
i
;

40 
ªm
;

42 
ªm
 = 
	`RTA_PAYLOAD
(
©å
);

43 
i
 = 
	`RTA_DATA
(
©å
); 
	`RTA_OK
(i, 
ªm
); i = 
	`RTA_NEXT
(i,Ñem)) {

44 
p‹t_ifödex
 = 
	`RTA_DATA
(
i
);

45 
	`Ârötf
(
f
, "%†", 
	`Œ_ödex_to_«me
(*
p‹t_ifödex
));

48 
	`Ârötf
(
f
, "\n");

49 
	}
}

51 
	$¥öt_mdb_íåy
(
FILE
 *
f
, 
ifödex
, 
br_mdb_íåy
 *
e
,

52 
∆msghdr
 *
n
)

54 
	`SPRINT_BUF
(
abuf
);

55 c⁄° *
§c
;

56 
af
;

58 
af
 = 
e
->
addr
.
¥Ÿo
 =
	`ht⁄s
(
ETH_P_IP
Ë? 
AF_INET
 : 
AF_INET6
;

59 
§c
 = 
af
 =
AF_INET
 ? (c⁄° *)&
e
->
addr
.
u
.
ù4
 :

60 (c⁄° *)&
e
->
addr
.
u
.
ù6
;

61 i‡(
n
->
∆msg_ty≥
 =
RTM_DELMDB
)

62 
	`Ârötf
(
f
, "Deleted ");

63 
	`Ârötf
(
f
, "dev %†p‹à%†gΩ %†%s", 
	`Œ_ödex_to_«me
(
ifödex
),

64 
	`Œ_ödex_to_«me
(
e
->
ifödex
),

65 
	`öë_¡›
(
af
, 
§c
, 
abuf
, (abuf)),

66 (
e
->
°©e
 & 
MDB_PERMANENT
) ? "permanent" : "temp");

67 i‡(
e
->
vid
)

68 
	`Ârötf
(
f
, " vid %hu", 
e
->
vid
);

69 
	`Ârötf
(
f
, "\n");

70 
	}
}

72 
	$br_¥öt_mdb_íåy
(
FILE
 *
f
, 
ifödex
, 
π©å
 *
©å
,

73 
∆msghdr
 *
n
)

75 
π©å
 *
i
;

76 
ªm
;

77 
br_mdb_íåy
 *
e
;

79 
ªm
 = 
	`RTA_PAYLOAD
(
©å
);

80 
i
 = 
	`RTA_DATA
(
©å
); 
	`RTA_OK
(i, 
ªm
); i = 
	`RTA_NEXT
(i,Ñem)) {

81 
e
 = 
	`RTA_DATA
(
i
);

82 
	`¥öt_mdb_íåy
(
f
, 
ifödex
, 
e
, 
n
);

84 
	}
}

86 
	$¥öt_mdb
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

88 
FILE
 *
Â
 = 
¨g
;

89 
br_p‹t_msg
 *
r
 = 
	`NLMSG_DATA
(
n
);

90 
Àn
 = 
n
->
∆msg_Àn
;

91 
π©å
 *
tb
[
MDBA_MAX
+1], *
i
;

93 i‡(
n
->
∆msg_ty≥
 !
RTM_GETMDB
 &&Ç->∆msg_ty≥ !
RTM_NEWMDB
 &&Ç->∆msg_ty≥ !
RTM_DELMDB
) {

94 
	`Ârötf
(
°dîr
, "Not RTM_GETMDB, RTM_NEWMDB or RTM_DELMDB: %08x %08x %08x\n",

95 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

100 
Àn
 -
	`NLMSG_LENGTH
((*
r
));

101 i‡(
Àn
 < 0) {

102 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

106 i‡(
fûãr_ödex
 && fûãr_ödex !
r
->
ifödex
)

109 
	`∑r£_π©å
(
tb
, 
MDBA_MAX
, 
	`MDBA_RTA
(
r
), 
n
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*r)));

111 i‡(
tb
[
MDBA_MDB
]) {

112 
ªm
 = 
	`RTA_PAYLOAD
(
tb
[
MDBA_MDB
]);

114 
i
 = 
	`RTA_DATA
(
tb
[
MDBA_MDB
]); 
	`RTA_OK
(i, 
ªm
); i = 
	`RTA_NEXT
(i,Ñem))

115 
	`br_¥öt_mdb_íåy
(
Â
, 
r
->
ifödex
, 
i
, 
n
);

118 i‡(
tb
[
MDBA_ROUTER
]) {

119 i‡(
n
->
∆msg_ty≥
 =
RTM_GETMDB
) {

120 i‡(
show_dëaûs
) {

121 
	`Ârötf
(
Â
, "routerÖorts on %s: ",

122 
	`Œ_ödex_to_«me
(
r
->
ifödex
));

123 
	`br_¥öt_rouãr_p‹ts
(
Â
, 
tb
[
MDBA_ROUTER
]);

126 
uöt32_t
 *
p‹t_ifödex
;

128 
i
 = 
	`RTA_DATA
(
tb
[
MDBA_ROUTER
]);

129 
p‹t_ifödex
 = 
	`RTA_DATA
(
i
);

130 i‡(
n
->
∆msg_ty≥
 =
RTM_DELMDB
)

131 
	`Ârötf
(
Â
, "Deleted ");

132 
	`Ârötf
(
Â
, "routerÖort dev %s master %s\n",

133 
	`Œ_ödex_to_«me
(*
p‹t_ifödex
),

134 
	`Œ_ödex_to_«me
(
r
->
ifödex
));

138 
	`fÊush
(
Â
);

141 
	}
}

143 
	$mdb_show
(
¨gc
, **
¨gv
)

145 *
fûãr_dev
 = 
NULL
;

147 
¨gc
 > 0) {

148 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

149 
	`NEXT_ARG
();

150 i‡(
fûãr_dev
)

151 
	`du∑rg
("dev", *
¨gv
);

152 
fûãr_dev
 = *
¨gv
;

154 
¨gc
--; 
¨gv
++;

157 i‡(
fûãr_dev
) {

158 
fûãr_ödex
 = 
	`if_«mëoödex
(
fûãr_dev
);

159 i‡(
fûãr_ödex
 == 0) {

160 
	`Ârötf
(
°dîr
, "Cannot find device \"%s\"\n",

161 
fûãr_dev
);

166 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
PF_BRIDGE
, 
RTM_GETMDB
) < 0) {

167 
	`≥º‹
("Cannot send dumpÑequest");

171 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_mdb
, 
°dout
) < 0) {

172 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

177 
	}
}

179 
	$mdb_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

182 
∆msghdr
 
n
;

183 
br_p‹t_msg
 
bpm
;

184 
buf
[1024];

185 } 
ªq
;

186 
br_mdb_íåy
 
íåy
;

187 *
d
 = 
NULL
, *
p
 = NULL, *
gΩ
 = NULL;

188 
vid
 = 0;

190 
	`mem£t
(&
ªq
, 0, (req));

191 
	`mem£t
(&
íåy
, 0, (entry));

193 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
br_p‹t_msg
));

194 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

195 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

196 
ªq
.
bpm
.
Ámûy
 = 
PF_BRIDGE
;

198 
¨gc
 > 0) {

199 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

200 
	`NEXT_ARG
();

201 
d
 = *
¨gv
;

202 } i‡(
	`°rcmp
(*
¨gv
, "grp") == 0) {

203 
	`NEXT_ARG
();

204 
gΩ
 = *
¨gv
;

205 } i‡(
	`°rcmp
(*
¨gv
, "port") == 0) {

206 
	`NEXT_ARG
();

207 
p
 = *
¨gv
;

208 } i‡(
	`°rcmp
(*
¨gv
, "permanent") == 0) {

209 i‡(
cmd
 =
RTM_NEWMDB
)

210 
íåy
.
°©e
 |
MDB_PERMANENT
;

211 } i‡(
	`°rcmp
(*
¨gv
, "temp") == 0) {

213 } i‡(
	`°rcmp
(*
¨gv
, "vid") == 0) {

214 
	`NEXT_ARG
();

215 
vid
 = 
	`©oi
(*
¨gv
);

217 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

218 
	`ußge
();

220 
¨gc
--; 
¨gv
++;

223 i‡(
d
 =
NULL
 || 
gΩ
 =NULL || 
p
 == NULL) {

224 
	`Ârötf
(
°dîr
, "Device, groupáddressándÖortÇameáreÑequiredárguments.\n");

228 
ªq
.
bpm
.
ifödex
 = 
	`Œ_«me_to_ödex
(
d
);

229 i‡(
ªq
.
bpm
.
ifödex
 == 0) {

230 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

234 
íåy
.
ifödex
 = 
	`Œ_«me_to_ödex
(
p
);

235 i‡(
íåy
.
ifödex
 == 0) {

236 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
p
);

240 i‡(!
	`öë_±⁄
(
AF_INET
, 
gΩ
, &
íåy
.
addr
.
u
.
ù4
)) {

241 i‡(!
	`öë_±⁄
(
AF_INET6
, 
gΩ
, &
íåy
.
addr
.
u
.
ù6
)) {

242 
	`Ârötf
(
°dîr
, "InvÆidáddªs†\"%s\"\n", 
gΩ
);

245 
íåy
.
addr
.
¥Ÿo
 = 
	`ht⁄s
(
ETH_P_IPV6
);

247 
íåy
.
addr
.
¥Ÿo
 = 
	`ht⁄s
(
ETH_P_IP
);

249 
íåy
.
vid
 = vid;

250 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
MDBA_SET_ENTRY
, &
íåy
, (entry));

252 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

256 
	}
}

258 
	$do_mdb
(
¨gc
, **
¨gv
)

260 
	`Œ_öô_m≠
(&
πh
);

262 i‡(
¨gc
 > 0) {

263 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

264  
	`mdb_modify
(
RTM_NEWMDB
, 
NLM_F_CREATE
|
NLM_F_EXCL
, 
¨gc
-1, 
¨gv
+1);

265 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

266  
	`mdb_modify
(
RTM_DELMDB
, 0, 
¨gc
-1, 
¨gv
+1);

268 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

269 
	`m©ches
(*
¨gv
, "lst") == 0 ||

270 
	`m©ches
(*
¨gv
, "list") == 0)

271  
	`mdb_show
(
¨gc
-1, 
¨gv
+1);

272 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

273 
	`ußge
();

275  
	`mdb_show
(0, 
NULL
);

277 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"bridgêmdb hñp\".\n", *
¨gv
);

278 
	`exô
(-1);

279 
	}
}

	@bridge/monitor.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<time.h
>

17 
	~<sys/sockë.h
>

18 
	~<sys/time.h
>

19 
	~<√t/if.h
>

20 
	~<√töë/ö.h
>

21 
	~<löux/if_bridge.h
>

22 
	~<löux/√ighbour.h
>

23 
	~<°rög.h
>

25 
	~"utûs.h
"

26 
	~"br_comm⁄.h
"

29 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

30 
¥efix_b™√r
;

32 
	$ußge
()

34 
	`Ârötf
(
°dîr
, "Usage: bridge monitor [file |Üink | fdb | mdb |áll]\n");

35 
	`exô
(-1);

36 
	}
}

38 
	$ac˚±_msg
(c⁄° 
sockaddr_∆
 *
who
,

39 
π∆_˘æ_d©a
 *
˘æ
,

40 
∆msghdr
 *
n
, *
¨g
)

42 
FILE
 *
Â
 = 
¨g
;

44 i‡(
time°amp
)

45 
	`¥öt_time°amp
(
Â
);

47 
n
->
∆msg_ty≥
) {

48 
RTM_NEWLINK
:

49 
RTM_DELLINK
:

50 i‡(
¥efix_b™√r
)

51 
	`Ârötf
(
Â
, "[LINK]");

53  
	`¥öt_lököfo
(
who
, 
n
, 
¨g
);

55 
RTM_NEWNEIGH
:

56 
RTM_DELNEIGH
:

57 i‡(
¥efix_b™√r
)

58 
	`Ârötf
(
Â
, "[NEIGH]");

59  
	`¥öt_fdb
(
who
, 
n
, 
¨g
);

61 
RTM_NEWMDB
:

62 
RTM_DELMDB
:

63 i‡(
¥efix_b™√r
)

64 
	`Ârötf
(
Â
, "[MDB]");

65  
	`¥öt_mdb
(
who
, 
n
, 
¨g
);

67 
NLMSG_TSTAMP
:

68 
	`¥öt_∆msg_time°amp
(
Â
, 
n
);

74 
	}
}

76 
	$do_m⁄ô‹
(
¨gc
, **
¨gv
)

78 *
fûe
 = 
NULL
;

79 
groups
 = ~
RTMGRP_TC
;

80 
Œök
=0;

81 
 eigh
=0;

82 
lmdb
=0;

84 
	`π∆_˛o£
(&
πh
);

86 
¨gc
 > 0) {

87 i‡(
	`m©ches
(*
¨gv
, "file") == 0) {

88 
	`NEXT_ARG
();

89 
fûe
 = *
¨gv
;

90 } i‡(
	`m©ches
(*
¨gv
, "link") == 0) {

91 
Œök
=1;

92 
groups
 = 0;

93 } i‡(
	`m©ches
(*
¨gv
, "fdb") == 0) {

94 
 eigh
 = 1;

95 
groups
 = 0;

96 } i‡(
	`m©ches
(*
¨gv
, "mdb") == 0) {

97 
lmdb
 = 1;

98 
groups
 = 0;

99 } i‡(
	`°rcmp
(*
¨gv
, "all") == 0) {

100 
groups
 = ~
RTMGRP_TC
;

101 
¥efix_b™√r
=1;

102 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

103 
	`ußge
();

105 
	`Ârötf
(
°dîr
, "Argumíà\"%s\" i†unknown,Åry \"bridgêm⁄ô‹ hñp\".\n", *
¨gv
);

106 
	`exô
(-1);

108 
¨gc
--; 
¨gv
++;

111 i‡(
Œök
)

112 
groups
 |
	`∆_mgΩ
(
RTNLGRP_LINK
);

114 i‡(
 eigh
) {

115 
groups
 |
	`∆_mgΩ
(
RTNLGRP_NEIGH
);

118 i‡(
lmdb
) {

119 
groups
 |
	`∆_mgΩ
(
RTNLGRP_MDB
);

122 i‡(
fûe
) {

123 
FILE
 *
Â
;

124 
îr
;

125 
Â
 = 
	`f›í
(
fûe
, "r");

126 i‡(
Â
 =
NULL
) {

127 
	`≥º‹
("Cannot fopen");

128 
	`exô
(-1);

130 
îr
 = 
	`π∆_‰om_fûe
(
Â
, 
ac˚±_msg
, 
°dout
);

131 
	`f˛o£
(
Â
);

132  
îr
;

135 i‡(
	`π∆_›í
(&
πh
, 
groups
) < 0)

136 
	`exô
(1);

137 
	`Œ_öô_m≠
(&
πh
);

139 i‡(
	`π∆_li°í
(&
πh
, 
ac˚±_msg
, 
°dout
) < 0)

140 
	`exô
(2);

143 
	}
}

	@bridge/vlan.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<f˙é.h
>

5 
	~<sys/sockë.h
>

6 
	~<√t/if.h
>

7 
	~<√töë/ö.h
>

8 
	~<löux/if_bridge.h
>

9 
	~<löux/if_ëhî.h
>

10 
	~<°rög.h
>

12 
	~"lib√éök.h
"

13 
	~"br_comm⁄.h
"

14 
	~"utûs.h
"

16 
	gfûãr_ödex
;

18 
	$ußge
()

20 
	`Ârötf
(
°dîr
, "Usage: bridge vlan {ádd | del } vid VLAN_ID dev DEV [Övid] [ untagged ]\n");

21 
	`Ârötf
(
°dîr
, " [ self ] [ master ]\n");

22 
	`Ârötf
(
°dîr
, " bridge vlan { show } [ dev DEV ]\n");

23 
	`exô
(-1);

24 
	}
}

26 
	$vœn_modify
(
cmd
, 
¨gc
, **
¨gv
)

29 
∆msghdr
 
n
;

30 
iföfomsg
 
ifm
;

31 
buf
[1024];

32 } 
ªq
;

33 *
d
 = 
NULL
;

34 
vid
 = -1;

35 
vid_íd
 = -1;

36 
π©å
 *
af•ec
;

37 
bridge_vœn_öfo
 
vöfo
;

38 
Êags
 = 0;

40 
	`mem£t
(&
vöfo
, 0, (vinfo));

41 
	`mem£t
(&
ªq
, 0, (req));

43 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iföfomsg
));

44 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

45 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

46 
ªq
.
ifm
.
ifi_Ámûy
 = 
PF_BRIDGE
;

48 
¨gc
 > 0) {

49 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

50 
	`NEXT_ARG
();

51 
d
 = *
¨gv
;

52 } i‡(
	`°rcmp
(*
¨gv
, "vid") == 0) {

53 *
p
;

54 
	`NEXT_ARG
();

55 
p
 = 
	`°rchr
(*
¨gv
, '-');

56 i‡(
p
) {

57 *
p
 = '\0';

58 
p
++;

59 
vid
 = 
	`©oi
(*
¨gv
);

60 
vid_íd
 = 
	`©oi
(
p
);

61 
vöfo
.
Êags
 |
BRIDGE_VLAN_INFO_RANGE_BEGIN
;

63 
vid
 = 
	`©oi
(*
¨gv
);

65 } i‡(
	`°rcmp
(*
¨gv
, "self") == 0) {

66 
Êags
 |
BRIDGE_FLAGS_SELF
;

67 } i‡(
	`°rcmp
(*
¨gv
, "master") == 0) {

68 
Êags
 |
BRIDGE_FLAGS_MASTER
;

69 } i‡(
	`°rcmp
(*
¨gv
, "pvid") == 0) {

70 
vöfo
.
Êags
 |
BRIDGE_VLAN_INFO_PVID
;

71 } i‡(
	`°rcmp
(*
¨gv
, "untagged") == 0) {

72 
vöfo
.
Êags
 |
BRIDGE_VLAN_INFO_UNTAGGED
;

74 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

75 
	`NEXT_ARG
();

78 
¨gc
--; 
¨gv
++;

81 i‡(
d
 =
NULL
 || 
vid
 == -1) {

82 
	`Ârötf
(
°dîr
, "Deviceánd VLAN IDáreÑequiredárguments.\n");

86 
ªq
.
ifm
.
ifi_ödex
 = 
	`Œ_«me_to_ödex
(
d
);

87 i‡(
ªq
.
ifm
.
ifi_ödex
 == 0) {

88 
	`Ârötf
(
°dîr
, "C™nŸ föd bridgêdevi˚ \"%s\"\n", 
d
);

92 i‡(
vid
 >= 4096) {

93 
	`Ârötf
(
°dîr
, "InvÆid VLAN ID \"%hu\"\n", 
vid
);

97 i‡(
vöfo
.
Êags
 & 
BRIDGE_VLAN_INFO_RANGE_BEGIN
) {

98 i‡(
vid_íd
 =-1 || vid_íd >4096 || 
vid
 >= vid_end) {

99 
	`Ârötf
(
°dîr
, "Invalid VLANÑange \"%hu-%hu\"\n",

100 
vid
, 
vid_íd
);

103 i‡(
vöfo
.
Êags
 & 
BRIDGE_VLAN_INFO_PVID
) {

104 
	`Ârötf
(
°dîr
,

110 
af•ec
 = 
	`add©å_√°
(&
ªq
.
n
, ‘eq), 
IFLA_AF_SPEC
);

112 i‡(
Êags
)

113 
	`add©å16
(&
ªq
.
n
, ‘eq), 
IFLA_BRIDGE_FLAGS
, 
Êags
);

115 
vöfo
.
vid
 = vid;

116 i‡(
vid_íd
 != -1) {

118 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFLA_BRIDGE_VLAN_INFO
, &
vöfo
,

119 (
vöfo
));

120 
vöfo
.
Êags
 &~
BRIDGE_VLAN_INFO_RANGE_BEGIN
;

123 
vöfo
.
Êags
 |
BRIDGE_VLAN_INFO_RANGE_END
;

124 
vöfo
.
vid
 = 
vid_íd
;

125 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFLA_BRIDGE_VLAN_INFO
, &
vöfo
,

126 (
vöfo
));

128 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFLA_BRIDGE_VLAN_INFO
, &
vöfo
,

129 (
vöfo
));

132 
	`add©å_√°_íd
(&
ªq
.
n
, 
af•ec
);

134 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

138 
	}
}

140 
	$¥öt_vœn
(c⁄° 
sockaddr_∆
 *
who
,

141 
∆msghdr
 *
n
,

142 *
¨g
)

144 
FILE
 *
Â
 = 
¨g
;

145 
iföfomsg
 *
ifm
 = 
	`NLMSG_DATA
(
n
);

146 
Àn
 = 
n
->
∆msg_Àn
;

147 
π©å
 * 
tb
[
IFLA_MAX
+1];

149 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWLINK
) {

150 
	`Ârötf
(
°dîr
, "Not RTM_NEWLINK: %08x %08x %08x\n",

151 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

155 
Àn
 -
	`NLMSG_LENGTH
((*
ifm
));

156 i‡(
Àn
 < 0) {

157 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

161 i‡(
ifm
->
ifi_Ámûy
 !
AF_BRIDGE
)

164 i‡(
fûãr_ödex
 && fûãr_ödex !
ifm
->
ifi_ödex
)

167 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(
ifm
), 
Àn
);

170 i‡(!
tb
[
IFLA_AF_SPEC
]) {

171 
	`Ârötf
(
Â
, "%s\tN⁄e\n", 
	`Œ_ödex_to_«me
(
ifm
->
ifi_ödex
));

174 
π©å
 *
i
, *
li°
 = 
tb
[
IFLA_AF_SPEC
];

175 
ªm
 = 
	`RTA_PAYLOAD
(
li°
);

177 
	`Ârötf
(
Â
, "%s", 
	`Œ_ödex_to_«me
(
ifm
->
ifi_ödex
));

178 
i
 = 
	`RTA_DATA
(
li°
); 
	`RTA_OK
(i, 
ªm
); i = 
	`RTA_NEXT
(i,Ñem)) {

179 
bridge_vœn_öfo
 *
vöfo
;

181 i‡(
i
->
πa_ty≥
 !
IFLA_BRIDGE_VLAN_INFO
)

184 
vöfo
 = 
	`RTA_DATA
(
i
);

185 i‡(
vöfo
->
Êags
 & 
BRIDGE_VLAN_INFO_RANGE_END
)

186 
	`Ârötf
(
Â
, "-%hu", 
vöfo
->
vid
);

188 
	`Ârötf
(
Â
, "\à%hu", 
vöfo
->
vid
);

189 i‡(
vöfo
->
Êags
 & 
BRIDGE_VLAN_INFO_RANGE_BEGIN
)

191 i‡(
vöfo
->
Êags
 & 
BRIDGE_VLAN_INFO_PVID
)

192 
	`Ârötf
(
Â
, " PVID");

193 i‡(
vöfo
->
Êags
 & 
BRIDGE_VLAN_INFO_UNTAGGED
)

194 
	`Ârötf
(
Â
, " Egress Untagged");

195 
	`Ârötf
(
Â
, "\n");

198 
	`Ârötf
(
Â
, "\n");

199 
	`fÊush
(
Â
);

201 
	}
}

203 
	$vœn_show
(
¨gc
, **
¨gv
)

205 *
fûãr_dev
 = 
NULL
;

207 
¨gc
 > 0) {

208 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

209 
	`NEXT_ARG
();

210 i‡(
fûãr_dev
)

211 
	`du∑rg
("dev", *
¨gv
);

212 
fûãr_dev
 = *
¨gv
;

214 
¨gc
--; 
¨gv
++;

217 i‡(
fûãr_dev
) {

218 i‡((
fûãr_ödex
 = 
	`if_«mëoödex
(
fûãr_dev
)) == 0) {

219 
	`Ârötf
(
°dîr
, "Cannot find device \"%s\"\n",

220 
fûãr_dev
);

225 i‡(
	`π∆_wûddump_ªq_fûãr
(&
πh
, 
PF_BRIDGE
, 
RTM_GETLINK
,

226 (
com¥ess_vœns
 ?

227 
RTEXT_FILTER_BRVLAN_COMPRESSED
 :

228 
RTEXT_FILTER_BRVLAN
)) < 0) {

229 
	`≥º‹
("Cannont send dumpÑequest");

230 
	`exô
(1);

233 
	`¥ötf
("port\tvlan ids\n");

234 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_vœn
, 
°dout
) < 0) {

235 
	`Ârötf
(
°dîr
, "DumpÅernminated\n");

236 
	`exô
(1);

240 
	}
}

243 
	$do_vœn
(
¨gc
, **
¨gv
)

245 
	`Œ_öô_m≠
(&
πh
);

247 i‡(
¨gc
 > 0) {

248 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

249  
	`vœn_modify
(
RTM_SETLINK
, 
¨gc
-1, 
¨gv
+1);

250 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

251  
	`vœn_modify
(
RTM_DELLINK
, 
¨gc
-1, 
¨gv
+1);

252 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

253 
	`m©ches
(*
¨gv
, "lst") == 0 ||

254 
	`m©ches
(*
¨gv
, "list") == 0)

255  
	`vœn_show
(
¨gc
-1, 
¨gv
+1);

256 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

257 
	`ußge
();

259  
	`vœn_show
(0, 
NULL
);

261 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"bridgêfdb hñp\".\n", *
¨gv
);

262 
	`exô
(-1);

263 
	}
}

	@examples/bpf/bpf_agent.c

27 
	#_GNU_SOURCE


	)

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<î∫o.h
>

33 
	~<uni°d.h
>

34 
	~<°döt.h
>

35 
	~<as£π.h
>

37 
	~<sys/un.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<sys/°©.h
>

40 
	~<sys/sockë.h
>

43 
	~"../../ö˛ude/utûs.h
"

45 
	~"../../ö˛ude/bpf_scm.h
"

47 
	~"bpf_sh¨ed.h
"

49 
	~"bpf_sys.h
"

51 
	$bpf_dump_dr›s
(
fd
)

53 
˝u
, 
max
;

55 
max
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

57 
	`¥ötf
(" `-Çumber of drops:");

58 
˝u
 = 0; cpu < 
max
; cpu++) {

59 
dr›s
;

61 
	`as£π
(
	`bpf_lookup_ñem
(
fd
, &
˝u
, &
dr›s
) == 0);

62 
	`¥ötf
("\t˝u%d: %5ld", 
˝u
, 
dr›s
);

64 
	`¥ötf
("\n");

65 
	}
}

67 
	$bpf_dump_queue
(
fd
)

70 
max_queue
 = 4, 
i
;

72 
	`¥ötf
(" |Çic queues:");

73 
i
 = 0; i < 
max_queue
; i++) {

74 
cou¡_queue
 
cq
;

75 
ªt
;

77 
	`mem£t
(&
cq
, 0, (cq));

78 
ªt
 = 
	`bpf_lookup_ñem
(
fd
, &
i
, &
cq
);

79 
	`as£π
(
ªt
 =0 || (ªà< 0 && 
î∫o
 =
ENOENT
));

81 
	`¥ötf
("\tq%d:[pkts: %ld, mis: %ld]",

82 
i
, 
cq
.
tŸÆ
, cq.
mism©ch
);

84 
	`¥ötf
("\n");

85 
	}
}

87 
	$bpf_dump_¥Ÿo
(
fd
)

89 
uöt8_t
 
¥Ÿos
[] = { 
IPPROTO_TCP
, 
IPPROTO_UDP
, 
IPPROTO_ICMP
 };

90 *
«mes
[] = { "tcp", "udp", "icmp" };

91 
i
;

93 
	`¥ötf
(" `Örotos:");

94 
i
 = 0; i < 
	`ARRAY_SIZE
(
¥Ÿos
); i++) {

95 
cou¡_tu∂e
 
˘
;

96 
ªt
;

98 
	`mem£t
(&
˘
, 0, (ct));

99 
ªt
 = 
	`bpf_lookup_ñem
(
fd
, &
¥Ÿos
[
i
], &
˘
);

100 
	`as£π
(
ªt
 =0 || (ªà< 0 && 
î∫o
 =
ENOENT
));

102 
	`¥ötf
("\t%s:[pkts: %ld, bytes: %ld]",

103 
«mes
[
i
], 
˘
.
∑ckës
, ct.
byãs
);

105 
	`¥ötf
("\n");

106 
	}
}

108 
	$bpf_dump_m≠_d©a
(*
tfd
)

110 
i
;

112 
i
 = 0; i < 30; i++) {

113 c⁄° 
≥riod
 = 5;

115 
	`¥ötf
("d©a,Öîiod: %d£c\n", 
≥riod
);

117 
	`bpf_dump_dr›s
(
tfd
[
BPF_MAP_ID_DROPS
]);

118 
	`bpf_dump_queue
(
tfd
[
BPF_MAP_ID_QUEUE
]);

119 
	`bpf_dump_¥Ÿo
(
tfd
[
BPF_MAP_ID_PROTO
]);

121 
	`¶ìp
(
≥riod
);

123 
	}
}

125 
	$bpf_öfo_lo›
(*
fds
, 
bpf_m≠_aux
 *
aux
)

127 
i
, 
tfd
[
BPF_MAP_ID_MAX
];

129 
	`¥ötf
("ver: %d\nobj: %s\ndev: %lu\nino: %lu\nmaps: %u\n",

130 
aux
->
uds_vî
,áux->
obj_«me
,áux->
obj_°
.
°_dev
,

131 
aux
->
obj_°
.
°_öo
,áux->
num_ít
);

133 
i
 = 0; i < 
aux
->
num_ít
; i++) {

134 
	`¥ötf
("m≠%d:\n", 
i
);

135 
	`¥ötf
(" `- fd: %u\n", 
fds
[
i
]);

136 
	`¥ötf
(" | sîül: %u\n", 
aux
->
ít
[
i
].
id
);

137 
	`¥ötf
(" |Åy≥: %u\n", 
aux
->
ít
[
i
].
ty≥
);

138 
	`¥ötf
(" | maxÉÀm: %u\n", 
aux
->
ít
[
i
].
max_ñem
);

139 
	`¥ötf
(" | sizêkey: %u\n", 
aux
->
ít
[
i
].
size_key
);

140 
	`¥ötf
(" ` sizêvÆ: %u\n", 
aux
->
ít
[
i
].
size_vÆue
);

142 
tfd
[
aux
->
ít
[
i
].
id
] = 
fds
[i];

145 
	`bpf_dump_m≠_d©a
(
tfd
);

146 
	}
}

148 
	$bpf_m≠_gë_‰om_ív
(*
tfd
)

150 
key
[64], *
vÆ
;

151 
i
;

153 
i
 = 0; i < 
BPF_MAP_ID_MAX
; i++) {

154 
	`mem£t
(
key
, 0, (key));

155 
	`¢¥ötf
(
key
, (key), "BPF_MAP%d", 
i
);

157 
vÆ
 = 
	`gëív
(
key
);

158 
	`as£π
(
vÆ
 !
NULL
);

160 
tfd
[
i
] = 
	`©oi
(
vÆ
);

162 
	}
}

164 
	$bpf_m≠_£t_ªcv
(
fd
, *
fds
, 
bpf_m≠_aux
 *
aux
,

165 
íåõs
)

167 
bpf_m≠_£t_msg
 
msg
;

168 *
cmsg_buf
, 
mö_fd
, 
i
;

169 *
amsg_buf
, *
mmsg_buf
;

171 
cmsg_buf
 = 
	`bpf_m≠_£t_öô
(&
msg
, 
NULL
, 0);

172 
amsg_buf
 = (*)
msg
.
aux
.
ít
;

173 
mmsg_buf
 = (*)&
msg
.
aux
;

175 
i
 = 0; i < 
íåõs
; i +
mö_fd
) {

176 
cmsghdr
 *
cmsg
;

177 
ªt
;

179 
mö_fd
 = 
	`mö
(
BPF_SCM_MAX_FDS
 * 1U, 
íåõs
 - 
i
);

181 
	`bpf_m≠_£t_öô_sögÀ
(&
msg
, 
mö_fd
);

183 
ªt
 = 
	`ªcvmsg
(
fd
, &
msg
.
hdr
, 0);

184 i‡(
ªt
 <= 0)

185  
ªt
 ? : -1;

187 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
.
hdr
);

188 i‡(!
cmsg
 || cmsg->
cmsg_ty≥
 !
SCM_RIGHTS
)

189  -
EINVAL
;

190 i‡(
msg
.
hdr
.
msg_Êags
 & 
MSG_CTRUNC
)

191  -
EIO
;

193 
mö_fd
 = (
cmsg
->
cmsg_Àn
 - (*cmsg)Ë/ (
fd
);

194 i‡(
mö_fd
 > 
íåõs
 || min_fd <= 0)

197 
	`mem˝y
(&
fds
[
i
], 
cmsg_buf
, (fds[0]Ë* 
mö_fd
);

198 
	`mem˝y
(&
aux
->
ít
[
i
], 
amsg_buf
, ◊ux->ít[0]Ë* 
mö_fd
);

199 
	`mem˝y
(
aux
, 
mmsg_buf
, 
	`off£tof
(
bpf_m≠_aux
, 
ít
));

201 i‡(
i
 + 
mö_fd
 =
aux
->
num_ít
)

206 
	}
}

208 
	$maö
(
¨gc
, **
¨gv
)

210 
fds
[
BPF_SCM_MAX_FDS
];

211 
bpf_m≠_aux
 
aux
;

212 
sockaddr_un
 
addr
;

213 
fd
, 
ªt
, 
i
;

219 i‡(
¨gc
 == 1) {

220 
tfd
[
BPF_MAP_ID_MAX
];

222 
	`bpf_m≠_gë_‰om_ív
(
tfd
);

223 
	`bpf_dump_m≠_d©a
(
tfd
);

228 
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_DGRAM
, 0);

229 i‡(
fd
 < 0) {

230 
	`Ârötf
(
°dîr
, "Cannot open socket: %s\n",

231 
	`°ªº‹
(
î∫o
));

232 
	`exô
(1);

235 
	`mem£t
(&
addr
, 0, (addr));

236 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

237 
	`°∫˝y
(
addr
.
sun_∑th
, 
¨gv
[
¨gc
 - 1], (addr.sun_path));

239 
ªt
 = 
	`böd
(
fd
, (
sockaddr
 *)&
addr
, (addr));

240 i‡(
ªt
 < 0) {

241 
	`Ârötf
(
°dîr
, "Cannot bindÅo socket: %s\n",

242 
	`°ªº‹
(
î∫o
));

243 
	`exô
(1);

246 
	`mem£t
(
fds
, 0, (fds));

247 
	`mem£t
(&
aux
, 0, (aux));

249 
ªt
 = 
	`bpf_m≠_£t_ªcv
(
fd
, 
fds
, &
aux
, 
BPF_SCM_MAX_FDS
);

250 i‡(
ªt
 >= 0)

251 
	`bpf_öfo_lo›
(
fds
, &
aux
);

253 
i
 = 0; i < 
aux
.
num_ít
; i++)

254 
	`˛o£
(
fds
[
i
]);

256 
	`˛o£
(
fd
);

258 
	}
}

	@examples/bpf/bpf_funcs.h

1 #i‚de‡
__BPF_FUNCS__


2 
	#__BPF_FUNCS__


	)

5 #i‚de‡
__maybe_unu£d


6 
	#__maybe_unu£d
 
	`__©åibuã__
 ((
__unu£d__
))

	)

9 #i‚de‡
__£˘i⁄


10 
	#__£˘i⁄
(
NAME
Ë
	`__©åibuã__
((
	`£˘i⁄
(NAME), 
u£d
))

	)

13 #i‚de‡
off£tof


14 
	#off£tof
 
__buûtö_off£tof


	)

17 #i‚de‡
ht⁄s


18 
	#ht⁄s
(
x
Ë
	`__c⁄°™t_ht⁄s
((x))

	)

21 #i‚de‡
likñy


22 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

25 #i‚de‡
u∆ikñy


26 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

30 *(*
	gbpf_m≠_lookup_ñem
)(*
	gm≠
, *
	gkey
Ë
	g__maybe_unu£d
 =

31 (*Ë
BPF_FUNC_m≠_lookup_ñem
;

33 (*
bpf_m≠_upd©e_ñem
)(*
m≠
, *
key
, *
vÆue
,

34 
Êags
Ë
__maybe_unu£d
 =

35 (*Ë
BPF_FUNC_m≠_upd©e_ñem
;

37 (*
bpf_m≠_dñëe_ñem
)(*
m≠
, *
key
Ë
__maybe_unu£d
 =

38 (*Ë
BPF_FUNC_m≠_dñëe_ñem
;

40 (*
gë_smp_¥o˚ss‹_id
)(Ë
__maybe_unu£d
 =

41 (*Ë
BPF_FUNC_gë_smp_¥o˚ss‹_id
;

43 (*
gë_¥™dom_u32
)(Ë
__maybe_unu£d
 =

44 (*Ë
BPF_FUNC_gë_¥™dom_u32
;

49 
	$lﬂd_byã
(*
skb
, 
off
)

50 
	`asm
 ("llvm.bpf.load.byte");

52 
	$lﬂd_hÆf
(*
skb
, 
off
)

53 
	`asm
 ("llvm.bpf.load.half");

55 
	$lﬂd_w‹d
(*
skb
, 
off
)

56 
	`asm
 ("llvm.bpf.load.word");

	@examples/bpf/bpf_prog.c

155 
	~<°döt.h
>

156 
	~<°dboﬁ.h
>

157 
	~<sys/ty≥s.h
>

158 
	~<sys/sockë.h
>

159 
	~<asm/ty≥s.h
>

160 
	~<löux/ö.h
>

161 
	~<löux/if.h
>

162 
	~<löux/if_ëhî.h
>

163 
	~<löux/ù.h
>

164 
	~<löux/ùv6.h
>

165 
	~<löux/if_tu¬ñ.h
>

166 
	~<löux/fûãr.h
>

167 
	~<löux/bpf.h
>

170 
	~"bpf_sh¨ed.h
"

172 
	~"bpf_funcs.h
"

175 
	#TC_ACT_UNSPEC
 (-1)

	)

176 
	#TC_ACT_OK
 0

	)

177 
	#TC_ACT_RECLASSIFY
 1

	)

178 
	#TC_ACT_SHOT
 2

	)

179 
	#TC_ACT_PIPE
 3

	)

180 
	#TC_ACT_STOLEN
 4

	)

181 
	#TC_ACT_QUEUED
 5

	)

182 
	#TC_ACT_REPEAT
 6

	)

185 
	#IP_MF
 0x2000

	)

186 
	#IP_OFFSET
 0x1FFF

	)

189 
bpf_ñf_m≠
 
__£˘i⁄
("m≠s"Ë
	gm≠_¥Ÿo
 = {

190 .
ty≥
 = 
BPF_MAP_TYPE_HASH
,

191 .
	gid
 = 
BPF_MAP_ID_PROTO
,

192 .
	gsize_key
 = (
uöt8_t
),

193 .
	gsize_vÆue
 = (
cou¡_tu∂e
),

194 .
	gmax_ñem
 = 256,

197 
bpf_ñf_m≠
 
__£˘i⁄
("m≠s"Ë
	gm≠_queue
 = {

198 .
ty≥
 = 
BPF_MAP_TYPE_HASH
,

199 .
	gid
 = 
BPF_MAP_ID_QUEUE
,

200 .
	gsize_key
 = (
uöt32_t
),

201 .
	gsize_vÆue
 = (
cou¡_queue
),

202 .
	gmax_ñem
 = 1024,

205 
bpf_ñf_m≠
 
__£˘i⁄
("m≠s"Ë
	gm≠_dr›s
 = {

206 .
ty≥
 = 
BPF_MAP_TYPE_ARRAY
,

207 .
	gid
 = 
BPF_MAP_ID_DROPS
,

208 .
	gsize_key
 = (
uöt32_t
),

209 .
	gsize_vÆue
 = (),

210 .
	gmax_ñem
 = 64,

218 
	gsockaddr
;

220 
	svœn_hdr
 {

221 
__be16
 
	mh_vœn_TCI
;

222 
__be16
 
	mh_vœn_íˇpsuœãd_¥Ÿo
;

225 
	sÊow_keys
 {

226 
__u32
 
	m§c
;

227 
__u32
 
	md°
;

229 
__u32
 
	mp‹ts
;

230 
__u16
 
	mp‹t16
[2];

232 
__s32
 
	mth_off
;

233 
__u8
 
	mù_¥Ÿo
;

236 
ölöe
 
	$Êow_p‹ts_off£t
(
__u8
 
ù_¥Ÿo
)

238 
ù_¥Ÿo
) {

239 
IPPROTO_TCP
:

240 
IPPROTO_UDP
:

241 
IPPROTO_DCCP
:

242 
IPPROTO_ESP
:

243 
IPPROTO_SCTP
:

244 
IPPROTO_UDPLITE
:

247 
IPPROTO_AH
:

250 
	}
}

252 
ölöe
 
boﬁ
 
	$Êow_is_‰ag
(
__sk_buff
 *
skb
, 
nh_off
)

254  !!(
	`lﬂd_hÆf
(
skb
, 
nh_off
 + 
	`off£tof
(
ùhdr
, 
‰ag_off
)) &

255 (
IP_MF
 | 
IP_OFFSET
));

256 
	}
}

258 
ölöe
 
	$Êow_∑r£_ùv4
(
__sk_buff
 *
skb
, 
nh_off
,

259 
__u8
 *
ù_¥Ÿo
, 
Êow_keys
 *
Êow
)

261 
__u8
 
ù_vî_Àn
;

263 i‡(
	`u∆ikñy
(
	`Êow_is_‰ag
(
skb
, 
nh_off
)))

264 *
ù_¥Ÿo
 = 0;

266 *
ù_¥Ÿo
 = 
	`lﬂd_byã
(
skb
, 
nh_off
 + 
	`off£tof
(
ùhdr
,

267 
¥Ÿocﬁ
));

268 i‡(*
ù_¥Ÿo
 !
IPPROTO_GRE
) {

269 
Êow
->
§c
 = 
	`lﬂd_w‹d
(
skb
, 
nh_off
 + 
	`off£tof
(
ùhdr
, 
ßddr
));

270 
Êow
->
d°
 = 
	`lﬂd_w‹d
(
skb
, 
nh_off
 + 
	`off£tof
(
ùhdr
, 
daddr
));

273 
ù_vî_Àn
 = 
	`lﬂd_byã
(
skb
, 
nh_off
 + 0 );

274 i‡(
	`likñy
(
ù_vî_Àn
 == 0x45))

275 
nh_off
 += 20;

277 
nh_off
 +(
ù_vî_Àn
 & 0xF) << 2;

279  
nh_off
;

280 
	}
}

282 
ölöe
 
__u32
 
	$Êow_addr_hash_ùv6
(
__sk_buff
 *
skb
, 
off
)

284 
__u32
 
w0
 = 
	`lﬂd_w‹d
(
skb
, 
off
);

285 
__u32
 
w1
 = 
	`lﬂd_w‹d
(
skb
, 
off
 + (
w0
));

286 
__u32
 
w2
 = 
	`lﬂd_w‹d
(
skb
, 
off
 + (
w0
) * 2);

287 
__u32
 
w3
 = 
	`lﬂd_w‹d
(
skb
, 
off
 + (
w0
) * 3);

289  
w0
 ^ 
w1
 ^ 
w2
 ^ 
w3
;

290 
	}
}

292 
ölöe
 
	$Êow_∑r£_ùv6
(
__sk_buff
 *
skb
, 
nh_off
,

293 
__u8
 *
ù_¥Ÿo
, 
Êow_keys
 *
Êow
)

295 *
ù_¥Ÿo
 = 
	`lﬂd_byã
(
skb
, 
nh_off
 + 
	`off£tof
(
ùv6hdr
, 
√xthdr
));

297 
Êow
->
§c
 = 
	`Êow_addr_hash_ùv6
(
skb
, 
nh_off
 + 
	`off£tof
(
ùv6hdr
, 
ßddr
));

298 
Êow
->
d°
 = 
	`Êow_addr_hash_ùv6
(
skb
, 
nh_off
 + 
	`off£tof
(
ùv6hdr
, 
daddr
));

300  
nh_off
 + (
ùv6hdr
);

301 
	}
}

303 
ölöe
 
boﬁ
 
	$Êow_dis£˘‹
(
__sk_buff
 *
skb
,

304 
Êow_keys
 *
Êow
)

306 
poff
, 
nh_off
 = 
BPF_LL_OFF
 + 
ETH_HLEN
;

307 
__be16
 
¥Ÿo
 = 
skb
->
¥Ÿocﬁ
;

308 
__u8
 
ù_¥Ÿo
;

311 i‡(
¥Ÿo
 =
	`ht⁄s
(
ETH_P_8021AD
)) {

312 
¥Ÿo
 = 
	`lﬂd_hÆf
(
skb
, 
nh_off
 +

313 
	`off£tof
(
vœn_hdr
, 
h_vœn_íˇpsuœãd_¥Ÿo
));

314 
nh_off
 +(
vœn_hdr
);

316 i‡(
¥Ÿo
 =
	`ht⁄s
(
ETH_P_8021Q
)) {

317 
¥Ÿo
 = 
	`lﬂd_hÆf
(
skb
, 
nh_off
 +

318 
	`off£tof
(
vœn_hdr
, 
h_vœn_íˇpsuœãd_¥Ÿo
));

319 
nh_off
 +(
vœn_hdr
);

322 i‡(
	`likñy
(
¥Ÿo
 =
	`ht⁄s
(
ETH_P_IP
)))

323 
nh_off
 = 
	`Êow_∑r£_ùv4
(
skb
,Çh_off, &
ù_¥Ÿo
, 
Êow
);

324 i‡(
¥Ÿo
 =
	`ht⁄s
(
ETH_P_IPV6
))

325 
nh_off
 = 
	`Êow_∑r£_ùv6
(
skb
,Çh_off, &
ù_¥Ÿo
, 
Êow
);

327  
Ál£
;

329 
ù_¥Ÿo
) {

330 
IPPROTO_GRE
: {

331 
	sgª_hdr
 {

332 
__be16
 
Êags
;

333 
__be16
 
¥Ÿo
;

336 
__u16
 
gª_Êags
 = 
	`lﬂd_hÆf
(
skb
, 
nh_off
 +

337 
	`off£tof
(
gª_hdr
, 
Êags
));

338 
__u16
 
gª_¥Ÿo
 = 
	`lﬂd_hÆf
(
skb
, 
nh_off
 +

339 
	`off£tof
(
gª_hdr
, 
¥Ÿo
));

341 i‡(
gª_Êags
 & (
GRE_VERSION
 | 
GRE_ROUTING
))

344 
nh_off
 += 4;

345 i‡(
gª_Êags
 & 
GRE_CSUM
)

346 
nh_off
 += 4;

347 i‡(
gª_Êags
 & 
GRE_KEY
)

348 
nh_off
 += 4;

349 i‡(
gª_Êags
 & 
GRE_SEQ
)

350 
nh_off
 += 4;

352 i‡(
gª_¥Ÿo
 =
ETH_P_8021Q
) {

353 
gª_¥Ÿo
 = 
	`lﬂd_hÆf
(
skb
, 
nh_off
 +

354 
	`off£tof
(
vœn_hdr
,

355 
h_vœn_íˇpsuœãd_¥Ÿo
));

356 
nh_off
 +(
vœn_hdr
);

358 i‡(
gª_¥Ÿo
 =
ETH_P_IP
)

359 
nh_off
 = 
	`Êow_∑r£_ùv4
(
skb
,Çh_off, &
ù_¥Ÿo
, 
Êow
);

360 i‡(
gª_¥Ÿo
 =
ETH_P_IPV6
)

361 
nh_off
 = 
	`Êow_∑r£_ùv6
(
skb
,Çh_off, &
ù_¥Ÿo
, 
Êow
);

363  
Ál£
;

366 
IPPROTO_IPIP
:

367 
nh_off
 = 
	`Êow_∑r£_ùv4
(
skb
,Çh_off, &
ù_¥Ÿo
, 
Êow
);

369 
IPPROTO_IPV6
:

370 
nh_off
 = 
	`Êow_∑r£_ùv6
(
skb
,Çh_off, &
ù_¥Ÿo
, 
Êow
);

375 
nh_off
 +
	`Êow_p‹ts_off£t
(
ù_¥Ÿo
);

377 
Êow
->
p‹ts
 = 
	`lﬂd_w‹d
(
skb
, 
nh_off
);

378 
Êow
->
th_off
 = 
nh_off
;

379 
Êow
->
ù_¥Ÿo
 = ip_proto;

381  
åue
;

382 
	}
}

384 
ölöe
 
	$˛s_upd©e_¥Ÿo_m≠
(c⁄° 
__sk_buff
 *
skb
,

385 c⁄° 
Êow_keys
 *
Êow
)

387 
uöt8_t
 
¥Ÿo
 = 
Êow
->
ù_¥Ÿo
;

388 
cou¡_tu∂e
 *
˘
, 
_˘
;

390 
˘
 = 
	`bpf_m≠_lookup_ñem
(&
m≠_¥Ÿo
, &
¥Ÿo
);

391 i‡(
	`likñy
(
˘
)) {

392 
	`__sync_„tch_™d_add
(&
˘
->
∑ckës
, 1);

393 
	`__sync_„tch_™d_add
(&
˘
->
byãs
, 
skb
->
Àn
);

398 
_˘
.
∑ckës
 = 1;

399 
_˘
.
byãs
 = 
skb
->
Àn
;

401 
	`bpf_m≠_upd©e_ñem
(&
m≠_¥Ÿo
, &
¥Ÿo
, &
_˘
, 
BPF_ANY
);

402 
	}
}

404 
ölöe
 
	$˛s_upd©e_queue_m≠
(c⁄° 
__sk_buff
 *
skb
)

406 
uöt32_t
 
queue
 = 
skb
->
queue_m≠pög
;

407 
cou¡_queue
 *
cq
, 
_cq
;

408 
boﬁ
 
mism©ch
;

410 
mism©ch
 = 
skb
->
queue_m≠pög
 !
	`gë_smp_¥o˚ss‹_id
();

412 
cq
 = 
	`bpf_m≠_lookup_ñem
(&
m≠_queue
, &
queue
);

413 i‡(
	`likñy
(
cq
)) {

414 
	`__sync_„tch_™d_add
(&
cq
->
tŸÆ
, 1);

415 i‡(
mism©ch
)

416 
	`__sync_„tch_™d_add
(&
cq
->
mism©ch
, 1);

421 
_cq
.
tŸÆ
 = 1;

422 
_cq
.
mism©ch
 = mismatch ? 1 : 0;

424 
	`bpf_m≠_upd©e_ñem
(&
m≠_queue
, &
queue
, &
_cq
, 
BPF_ANY
);

425 
	}
}

442 
__£˘i⁄
("˛assifõr"Ë
	$˛s_maö
(
__sk_buff
 *
skb
)

444 
Êow_keys
 
Êow
;

446 i‡(!
	`Êow_dis£˘‹
(
skb
, &
Êow
))

449 
	`˛s_upd©e_¥Ÿo_m≠
(
skb
, &
Êow
);

450 
	`˛s_upd©e_queue_m≠
(
skb
);

452  
Êow
.
ù_¥Ÿo
;

453 
	}
}

455 
ölöe
 
	$a˘_upd©e_dr›_m≠
()

457 
uöt32_t
 *
cou¡
, 
˝u
 = 
	`gë_smp_¥o˚ss‹_id
();

459 
cou¡
 = 
	`bpf_m≠_lookup_ñem
(&
m≠_dr›s
, &
˝u
);

460 i‡(
cou¡
)

462 (*
cou¡
)++;

463 
	}
}

465 
__£˘i⁄
("a˘i⁄-m¨k"Ë
	$a˘_m¨k_maö
(
__sk_buff
 *
skb
)

473 i‡(
skb
->
m¨k
 == 0xcafe) {

474 
	`a˘_upd©e_dr›_m≠
();

475  
TC_ACT_SHOT
;

479  
TC_ACT_UNSPEC
;

480 
	}
}

482 
__£˘i⁄
("a˘i⁄-ønd"Ë
	$a˘_ønd_maö
(
__sk_buff
 *
skb
)

485 i‡((
	`gë_¥™dom_u32
() & 3) == 0) {

486 
	`a˘_upd©e_dr›_m≠
();

487  
TC_ACT_SHOT
;

490  
TC_ACT_UNSPEC
;

491 
	}
}

496 
	g__li˚n£
[] 
__£˘i⁄
("license") = "GPL";

	@examples/bpf/bpf_shared.h

1 #i‚de‡
__BPF_SHARED__


2 
	#__BPF_SHARED__


	)

4 
	~<°döt.h
>

6 
	~"../../ö˛ude/bpf_ñf.h
"

9 
	mBPF_MAP_ID_PROTO
,

10 
	mBPF_MAP_ID_QUEUE
,

11 
	mBPF_MAP_ID_DROPS
,

12 
	m__BPF_MAP_ID_MAX
,

13 
	#BPF_MAP_ID_MAX
 
__BPF_MAP_ID_MAX


	)

16 
	scou¡_tu∂e
 {

17 
	m∑ckës
;

18 
	mbyãs
;

21 
	scou¡_queue
 {

22 
	mtŸÆ
;

23 
	mmism©ch
;

	@examples/bpf/bpf_sys.h

1 #i‚de‡
__BPF_SYS__


2 
	#__BPF_SYS__


	)

4 
	~<sys/sysˇŒ.h
>

5 
	~<löux/bpf.h
>

7 
ölöe
 
__u64
 
	$bpf_±r_to_u64
(c⁄° *
±r
)

9  (
__u64
Ë(Ë
±r
;

10 
	}
}

12 
ölöe
 
	$bpf_lookup_ñem
(
fd
, *
key
, *
vÆue
)

14 
bpf_©å
 
©å
 = {

15 .
m≠_fd
 = 
fd
,

16 .
key
 = 
	`bpf_±r_to_u64
(key),

17 .
vÆue
 = 
	`bpf_±r_to_u64
(value),

20  
	`sysˇŒ
(
__NR_bpf
, 
BPF_MAP_LOOKUP_ELEM
, &
©å
, (attr));

21 
	}
}

	@genl/ctrl.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"gíl_utûs.h
"

26 
	#GENL_MAX_FAM_OPS
 256

	)

27 
	#GENL_MAX_FAM_GRPS
 256

	)

29 
	$ußge
()

31 
	`Ârötf
(
°dîr
,"Usage: ctrl <CMD>\n" \

40 
	}
}

42 
	$gíl_˘æ_ªsﬁve_Ámûy
(c⁄° *
Ámûy
)

44 
π∆_h™dÀ
 
πh
;

45 
∆msghdr
 *
∆h
;

46 
gílmsghdr
 *
ghdr
;

47 
ªt
 = 0;

49 
∆msghdr
 
n
;

50 
buf
[4096];

51 } 
ªq
;

53 
	`mem£t
(&
ªq
, 0, (req));

55 
∆h
 = &
ªq
.
n
;

56 
∆h
->
∆msg_Àn
 = 
	`NLMSG_LENGTH
(
GENL_HDRLEN
);

57 
∆h
->
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_ACK
;

58 
∆h
->
∆msg_ty≥
 = 
GENL_ID_CTRL
;

60 
ghdr
 = 
	`NLMSG_DATA
(&
ªq
.
n
);

61 
ghdr
->
cmd
 = 
CTRL_CMD_GETFAMILY
;

63 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_GENERIC
) < 0) {

64 
	`Ârötf
(
°dîr
, "Cannot open genericÇetlink socket\n");

65 
	`exô
(1);

68 
	`add©å_l
(
∆h
, 128, 
CTRL_ATTR_FAMILY_NAME
, 
Ámûy
, 
	`°æí
(family) + 1);

70 i‡(
	`π∆_èlk
(&
πh
, 
∆h
,Çlh, (
ªq
)) < 0) {

71 
	`Ârötf
(
°dîr
, "ErrorÅalkingÅoÅhe kernel\n");

72 
îrout
;

76 
π©å
 *
tb
[
CTRL_ATTR_MAX
 + 1];

77 
gílmsghdr
 *
ghdr
 = 
	`NLMSG_DATA
(
∆h
);

78 
Àn
 = 
∆h
->
∆msg_Àn
;

79 
π©å
 *
©ås
;

81 i‡(
∆h
->
∆msg_ty≥
 !
GENL_ID_CTRL
) {

82 
	`Ârötf
(
°dîr
, "Notá controller message,Çlmsg_len=%d "

83 "∆msg_ty≥=0x%x\n", 
∆h
->
∆msg_Àn
,Çlh->
∆msg_ty≥
);

84 
îrout
;

87 i‡(
ghdr
->
cmd
 !
CTRL_CMD_NEWFAMILY
) {

88 
	`Ârötf
(
°dîr
, "Unknow¿c⁄åﬁÀ∏comm™d %d\n", 
ghdr
->
cmd
);

89 
îrout
;

92 
Àn
 -
	`NLMSG_LENGTH
(
GENL_HDRLEN
);

94 i‡(
Àn
 < 0) {

95 
	`Ârötf
(
°dîr
, "wr⁄g c⁄åﬁÀ∏mesßgêÀ¿%d\n", 
Àn
);

99 
©ås
 = (
π©å
 *Ë((*Ë
ghdr
 + 
GENL_HDRLEN
);

100 
	`∑r£_π©å
(
tb
, 
CTRL_ATTR_MAX
, 
©ås
, 
Àn
);

102 i‡(
tb
[
CTRL_ATTR_FAMILY_ID
] =
NULL
) {

103 
	`Ârötf
(
°dîr
, "Missing family id TLV\n");

104 
îrout
;

107 
ªt
 = 
	`πa_gë©å_u16
(
tb
[
CTRL_ATTR_FAMILY_ID
]);

110 
îrout
:

111 
	`π∆_˛o£
(&
πh
);

112  
ªt
;

113 
	}
}

115 
	$¥öt_˘æ_cmd_Êags
(
FILE
 *
Â
, 
__u32
 
Ê
)

117 
	`Ârötf
(
Â
, "\n\t\tC≠abûôõ†(0x%x):\¿", 
Ê
);

118 i‡(!
Ê
) {

119 
	`Ârötf
(
Â
, "\n");

122 
	`Ârötf
(
Â
, "\t\t ");

124 i‡(
Ê
 & 
GENL_ADMIN_PERM
)

125 
	`Ârötf
(
Â
, "ÑequiresádminÖermission;");

126 i‡(
Ê
 & 
GENL_CMD_CAP_DO
)

127 
	`Ârötf
(
Â
, " can doit;");

128 i‡(
Ê
 & 
GENL_CMD_CAP_DUMP
)

129 
	`Ârötf
(
Â
, " can dumpit;");

130 i‡(
Ê
 & 
GENL_CMD_CAP_HASPOL
)

131 
	`Ârötf
(
Â
, " hasÖolicy");

133 
	`Ârötf
(
Â
, "\n");

134 
	}
}

136 
	$¥öt_˘æ_cmds
(
FILE
 *
Â
, 
π©å
 *
¨g
, 
__u32
 
˘æ_vî
)

138 
π©å
 *
tb
[
CTRL_ATTR_OP_MAX
 + 1];

140 i‡(
¨g
 =
NULL
)

143 
	`∑r£_π©å_√°ed
(
tb
, 
CTRL_ATTR_OP_MAX
, 
¨g
);

144 i‡(
tb
[
CTRL_ATTR_OP_ID
]) {

145 
__u32
 *
id
 = 
	`RTA_DATA
(
tb
[
CTRL_ATTR_OP_ID
]);

146 
	`Ârötf
(
Â
, " ID-0x%x ",*
id
);

149 i‡(
tb
[
CTRL_ATTR_OP_FLAGS
] && 
˘æ_vî
 >= 0x2) {

150 
__u32
 *
Ê
 = 
	`RTA_DATA
(
tb
[
CTRL_ATTR_OP_FLAGS
]);

151 
	`¥öt_˘æ_cmd_Êags
(
Â
, *
Ê
);

155 
	}
}

157 
	$¥öt_˘æ_gΩ
(
FILE
 *
Â
, 
π©å
 *
¨g
, 
__u32
 
˘æ_vî
)

159 
π©å
 *
tb
[
CTRL_ATTR_MCAST_GRP_MAX
 + 1];

161 i‡(
¨g
 =
NULL
)

164 
	`∑r£_π©å_√°ed
(
tb
, 
CTRL_ATTR_MCAST_GRP_MAX
, 
¨g
);

165 i‡(
tb
[2]) {

166 
__u32
 *
id
 = 
	`RTA_DATA
(
tb
[
CTRL_ATTR_MCAST_GRP_ID
]);

167 
	`Ârötf
(
Â
, " ID-0x%x ",*
id
);

169 i‡(
tb
[1]) {

170 *
«me
 = 
	`RTA_DATA
(
tb
[
CTRL_ATTR_MCAST_GRP_NAME
]);

171 
	`Ârötf
(
Â
, "Çame: %†", 
«me
);

175 
	}
}

180 
	$¥öt_˘æ
(c⁄° 
sockaddr_∆
 *
who
,

181 
π∆_˘æ_d©a
 *
˘æ
,

182 
∆msghdr
 *
n
, *
¨g
)

184 
π©å
 *
tb
[
CTRL_ATTR_MAX
 + 1];

185 
gílmsghdr
 *
ghdr
 = 
	`NLMSG_DATA
(
n
);

186 
Àn
 = 
n
->
∆msg_Àn
;

187 
π©å
 *
©ås
;

188 
FILE
 *
Â
 = (FILE *Ë
¨g
;

189 
__u32
 
˘æ_v
 = 0x1;

191 i‡(
n
->
∆msg_ty≥
 !
GENL_ID_CTRL
) {

192 
	`Ârötf
(
°dîr
, "Notá controller message,Çlmsg_len=%d "

193 "∆msg_ty≥=0x%x\n", 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
);

197 i‡(
ghdr
->
cmd
 !
CTRL_CMD_GETFAMILY
 &&

198 
ghdr
->
cmd
 !
CTRL_CMD_DELFAMILY
 &&

199 
ghdr
->
cmd
 !
CTRL_CMD_NEWFAMILY
 &&

200 
ghdr
->
cmd
 !
CTRL_CMD_NEWMCAST_GRP
 &&

201 
ghdr
->
cmd
 !
CTRL_CMD_DELMCAST_GRP
) {

202 
	`Ârötf
(
°dîr
, "Unknow¿c⁄åﬁÀ∏comm™d %d\n", 
ghdr
->
cmd
);

206 
Àn
 -
	`NLMSG_LENGTH
(
GENL_HDRLEN
);

208 i‡(
Àn
 < 0) {

209 
	`Ârötf
(
°dîr
, "wr⁄g c⁄åﬁÀ∏mesßgêÀ¿%d\n", 
Àn
);

213 
©ås
 = (
π©å
 *Ë((*Ë
ghdr
 + 
GENL_HDRLEN
);

214 
	`∑r£_π©å
(
tb
, 
CTRL_ATTR_MAX
, 
©ås
, 
Àn
);

216 i‡(
tb
[
CTRL_ATTR_FAMILY_NAME
]) {

217 *
«me
 = 
	`RTA_DATA
(
tb
[
CTRL_ATTR_FAMILY_NAME
]);

218 
	`Ârötf
(
Â
, "\nName: %s\n",
«me
);

220 i‡(
tb
[
CTRL_ATTR_FAMILY_ID
]) {

221 
__u16
 *
id
 = 
	`RTA_DATA
(
tb
[
CTRL_ATTR_FAMILY_ID
]);

222 
	`Ârötf
(
Â
, "\tID: 0x%x ",*
id
);

224 i‡(
tb
[
CTRL_ATTR_VERSION
]) {

225 
__u32
 *
v
 = 
	`RTA_DATA
(
tb
[
CTRL_ATTR_VERSION
]);

226 
	`Ârötf
(
Â
, " Vîsi⁄: 0x%x ",*
v
);

227 
˘æ_v
 = *
v
;

229 i‡(
tb
[
CTRL_ATTR_HDRSIZE
]) {

230 
__u32
 *
h
 = 
	`RTA_DATA
(
tb
[
CTRL_ATTR_HDRSIZE
]);

231 
	`Ârötf
(
Â
, " hódî size: %d ",*
h
);

233 i‡(
tb
[
CTRL_ATTR_MAXATTR
]) {

234 
__u32
 *
ma
 = 
	`RTA_DATA
(
tb
[
CTRL_ATTR_MAXATTR
]);

235 
	`Ârötf
(
Â
, " maxáâribs: %d ",*
ma
);

238 
	`Ârötf
(
Â
,"\n");

239 i‡(
tb
[
CTRL_ATTR_OPS
]) {

240 
π©å
 *
tb2
[
GENL_MAX_FAM_OPS
];

241 
i
=0;

242 
	`∑r£_π©å_√°ed
(
tb2
, 
GENL_MAX_FAM_OPS
, 
tb
[
CTRL_ATTR_OPS
]);

243 
	`Ârötf
(
Â
, "\tcommands supported: \n");

244 
i
 = 0; i < 
GENL_MAX_FAM_OPS
; i++) {

245 i‡(
tb2
[
i
]) {

246 
	`Ârötf
(
Â
, "\t\t#%d: ", 
i
);

247 i‡(0 > 
	`¥öt_˘æ_cmds
(
Â
, 
tb2
[
i
], 
˘æ_v
)) {

248 
	`Ârötf
(
Â
, "ErrorÖrinting command\n");

251 
	`Ârötf
(
Â
,"\n");

256 
	`Ârötf
(
Â
,"\n");

259 i‡(
tb
[
CTRL_ATTR_MCAST_GROUPS
]) {

260 
π©å
 *
tb2
[
GENL_MAX_FAM_GRPS
 + 1];

261 
i
;

263 
	`∑r£_π©å_√°ed
(
tb2
, 
GENL_MAX_FAM_GRPS
,

264 
tb
[
CTRL_ATTR_MCAST_GROUPS
]);

265 
	`Ârötf
(
Â
, "\tmulticast groups:\n");

267 
i
 = 0; i < 
GENL_MAX_FAM_GRPS
; i++) {

268 i‡(
tb2
[
i
]) {

269 
	`Ârötf
(
Â
, "\t\t#%d: ", 
i
);

270 i‡(0 > 
	`¥öt_˘æ_gΩ
(
Â
, 
tb2
[
i
], 
˘æ_v
))

271 
	`Ârötf
(
Â
, "ErrorÖrinting group\n");

273 
	`Ârötf
(
Â
,"\n");

278 
	`Ârötf
(
Â
,"\n");

281 
	`fÊush
(
Â
);

283 
	}
}

285 
	$¥öt_˘æ2
(c⁄° 
sockaddr_∆
 *
who
,

286 
∆msghdr
 *
n
, *
¨g
)

288  
	`¥öt_˘æ
(
who
, 
NULL
, 
n
, 
¨g
);

289 
	}
}

291 
	$˘æ_li°
(
cmd
, 
¨gc
, **
¨gv
)

293 
π∆_h™dÀ
 
πh
;

294 
∆msghdr
 *
∆h
;

295 
gílmsghdr
 *
ghdr
;

296 
ªt
 = -1;

297 
d
[
GENL_NAMSIZ
];

299 
∆msghdr
 
n
;

300 
buf
[4096];

301 } 
ªq
;

303 
	`mem£t
(&
ªq
, 0, (req));

305 
∆h
 = &
ªq
.
n
;

306 
∆h
->
∆msg_Àn
 = 
	`NLMSG_LENGTH
(
GENL_HDRLEN
);

307 
∆h
->
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_ACK
;

308 
∆h
->
∆msg_ty≥
 = 
GENL_ID_CTRL
;

310 
ghdr
 = 
	`NLMSG_DATA
(&
ªq
.
n
);

311 
ghdr
->
cmd
 = 
CTRL_CMD_GETFAMILY
;

313 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_GENERIC
) < 0) {

314 
	`Ârötf
(
°dîr
, "Cannot open genericÇetlink socket\n");

315 
	`exô
(1);

318 i‡(
cmd
 =
CTRL_CMD_GETFAMILY
) {

319 i‡(
¨gc
 != 2) {

320 
	`Ârötf
(
°dîr
, "WrongÇumber ofÖarams\n");

324 i‡(
	`m©ches
(*
¨gv
, "name") == 0) {

325 
	`NEXT_ARG
();

326 
	`°∫˝y
(
d
, *
¨gv
,  (d) - 1);

327 
	`add©å_l
(
∆h
, 128, 
CTRL_ATTR_FAMILY_NAME
,

328 
d
, 
	`°æí
(d) + 1);

329 } i‡(
	`m©ches
(*
¨gv
, "id") == 0) {

330 
__u16
 
id
;

331 
	`NEXT_ARG
();

332 i‡(
	`gë_u16
(&
id
, *
¨gv
, 0)) {

333 
	`Ârötf
(
°dîr
, "Illegal \"id\"\n");

334 
˘æ_d⁄e
;

337 
	`add©å_l
(
∆h
, 128, 
CTRL_ATTR_FAMILY_ID
, &
id
, 2);

340 
	`Ârötf
(
°dîr
, "WrongÖarams\n");

341 
˘æ_d⁄e
;

344 i‡(
	`π∆_èlk
(&
πh
, 
∆h
,Çlh, (
ªq
)) < 0) {

345 
	`Ârötf
(
°dîr
, "ErrorÅalkingÅoÅhe kernel\n");

346 
˘æ_d⁄e
;

349 i‡(
	`¥öt_˘æ2
(
NULL
, 
∆h
, (*Ë
°dout
) < 0) {

350 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

351 
˘æ_d⁄e
;

356 i‡(
cmd
 =
CTRL_CMD_UNSPEC
) {

357 
∆h
->
∆msg_Êags
 = 
NLM_F_ROOT
|
NLM_F_MATCH
|
NLM_F_REQUEST
;

358 
∆h
->
∆msg_£q
 = 
πh
.
dump
 = ++πh.
£q
;

360 i‡(
	`π∆_£nd
(&
πh
, 
∆h
,Çlh->
∆msg_Àn
) < 0) {

361 
	`≥º‹
("FailedÅo send dumpÑequest\n");

362 
˘æ_d⁄e
;

365 
	`π∆_dump_fûãr
(&
πh
, 
¥öt_˘æ2
, 
°dout
);

369 
ªt
 = 0;

370 
˘æ_d⁄e
:

371 
	`π∆_˛o£
(&
πh
);

372  
ªt
;

373 
	}
}

375 
	$˘æ_li°í
(
¨gc
, **
¨gv
)

377 
π∆_h™dÀ
 
πh
;

379 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 
	`∆_mgΩ
(
GENL_ID_CTRL
), 
NETLINK_GENERIC
) < 0) {

380 
	`Ârötf
(
°dîr
, "Canot open genericÇetlink socket\n");

384 i‡(
	`π∆_li°í
(&
πh
, 
¥öt_˘æ
, (*Ë
°dout
) < 0)

388 
	}
}

390 
	$∑r£_˘æ
(
gíl_utû
 *
a
, 
¨gc
, **
¨gv
)

392 
¨gv
++;

393 i‡(--
¨gc
 <= 0) {

394 
	`Ârötf
(
°dîr
, "wrong controllerÖarams\n");

398 i‡(
	`m©ches
(*
¨gv
, "monitor") == 0)

399  
	`˘æ_li°í
(
¨gc
-1, 
¨gv
+1);

400 i‡(
	`m©ches
(*
¨gv
, "get") == 0)

401  
	`˘æ_li°
(
CTRL_CMD_GETFAMILY
, 
¨gc
-1, 
¨gv
+1);

402 i‡(
	`m©ches
(*
¨gv
, "list") == 0 ||

403 
	`m©ches
(*
¨gv
, "show") == 0 ||

404 
	`m©ches
(*
¨gv
, "lst") == 0)

405  
	`˘æ_li°
(
CTRL_CMD_UNSPEC
, 
¨gc
-1, 
¨gv
+1);

406 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

407  
	`ußge
();

409 
	`Ârötf
(
°dîr
, "ctrl command \"%s\" is unknown,Åry \"ctrl help\".\n",

410 *
¨gv
);

413 
	}
}

415 
gíl_utû
 
	g˘æ_gíl_utû
 = {

416 .
«me
 = "ctrl",

417 .
	g∑r£_gíl›t
 = 
∑r£_˘æ
,

418 .
	g¥öt_gíl›t
 = 
¥öt_˘æ2
,

	@genl/genl.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<dlf˙.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

23 
	~<î∫o.h
>

24 
	~<löux/√éök.h
>

25 
	~<löux/π√éök.h
>

26 
	~"SNAPSHOT.h
"

27 
	~"utûs.h
"

28 
	~"gíl_utûs.h
"

30 
	gshow_°©s
 = 0;

31 
	gshow_dëaûs
 = 0;

32 
	gshow_øw
 = 0;

33 
	gªsﬁve_ho°s
 = 0;

35 *
	gBODY
;

36 
gíl_utû
 * 
	ggíl_li°
;

39 
	$¥öt_nof›t
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
,

40 *
¨g
)

42 
	`Ârötf
((
FILE
 *Ë
¨g
, "unknown genlÅype ..\n");

44 
	}
}

46 
	$∑r£_nof›t
(
gíl_utû
 *
f
, 
¨gc
, **
¨gv
)

48 i‡(
¨gc
) {

49 
	`Ârötf
(
°dîr
, "Unknown genl \"%s\", hence option \"%s\" "

50 "i†u≈¨ßbÀ\n", 
f
->
«me
, *
¨gv
);

55 
	}
}

57 
gíl_utû
 *
	$gë_gíl_köd
(*
°r
)

59 *
dlh
;

60 
buf
[256];

61 
gíl_utû
 *
f
;

63 
f
 = 
gíl_li°
; f; f = f->
√xt
)

64 i‡(
	`°rcmp
(
f
->
«me
, 
°r
) == 0)

65  
f
;

67 
	`¢¥ötf
(
buf
, (buf), "%s.so", 
°r
);

68 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

69 i‡(
dlh
 =
NULL
) {

70 
dlh
 = 
BODY
;

71 i‡(
dlh
 =
NULL
) {

72 
dlh
 = 
BODY
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

73 i‡(
dlh
 =
NULL
)

74 
n€xi°
;

78 
	`¢¥ötf
(
buf
, (buf), "%s_gíl_utû", 
°r
);

80 
f
 = 
	`dlsym
(
dlh
, 
buf
);

81 i‡(
f
 =
NULL
)

82 
n€xi°
;

83 
ªg
:

84 
f
->
√xt
 = 
gíl_li°
;

85 
gíl_li°
 = 
f
;

86  
f
;

88 
n€xi°
:

89 
f
 = 
	`mÆloc
((*f));

90 i‡(
f
) {

91 
	`mem£t
(
f
, 0, (*f));

92 
	`°∫˝y
(
f
->
«me
, 
°r
, 15);

93 
f
->
∑r£_gíl›t
 = 
∑r£_nof›t
;

94 
f
->
¥öt_gíl›t
 = 
¥öt_nof›t
;

95 
ªg
;

97  
f
;

98 
	}
}

100 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

102 
	$ußge
()

104 
	`Ârötf
(
°dîr
, "Usage: genl [ OPTIONS ] OBJECT | help }\n"

107 
	`exô
(-1);

108 
	}
}

110 
	$maö
(
¨gc
, **
¨gv
)

112 
¨gc
 > 1) {

113 i‡(
¨gv
[1][0] != '-')

115 i‡(
	`m©ches
(
¨gv
[1], "-stats") == 0 ||

116 
	`m©ches
(
¨gv
[1], "-statistics") == 0) {

117 ++
show_°©s
;

118 } i‡(
	`m©ches
(
¨gv
[1], "-details") == 0) {

119 ++
show_dëaûs
;

120 } i‡(
	`m©ches
(
¨gv
[1], "-raw") == 0) {

121 ++
show_øw
;

122 } i‡(
	`m©ches
(
¨gv
[1], "-Version") == 0) {

123 
	`¥ötf
("gí»utûôy, i¥ouã2-ss%s\n", 
SNAPSHOT
);

124 
	`exô
(0);

125 } i‡(
	`m©ches
(
¨gv
[1], "-help") == 0) {

126 
	`ußge
();

128 
	`Ârötf
(
°dîr
, "Option \"%s\" is unknown,Åry "

129 "\"gí»-hñp\".\n", 
¨gv
[1]);

130 
	`exô
(-1);

132 
¨gc
--; 
¨gv
++;

135 i‡(
¨gc
 > 1) {

136 
ªt
;

137 
gíl_utû
 *
a
 = 
NULL
;

138 
a
 = 
	`gë_gíl_köd
(
¨gv
[1]);

139 i‡(!
a
) {

140 
	`Ârötf
(
°dîr
,"bad gí»%s\n", 
¨gv
[1]);

141 
	`exô
(-1);

144 
ªt
 = 
a
->
	`∑r£_gíl›t
◊, 
¨gc
-1, 
¨gv
+1);

145  
ªt
;

148 
	`ußge
();

149 
	}
}

	@genl/genl_utils.h

1 #i‚de‡
_TC_UTIL_H_


2 
	#_TC_UTIL_H_
 1

	)

4 
	~"utûs.h
"

5 
	~"löux/gíëlök.h
"

7 
	sgíl_utû


9 
gíl_utû
 *
	m√xt
;

10 
	m«me
[16];

11 (*
	m∑r£_gíl›t
)(
gíl_utû
 *
	mfu
, 
	m¨gc
, **
	m¨gv
);

12 (*
	m¥öt_gíl›t
)(c⁄° 
sockaddr_∆
 *
	mwho
, 
∆msghdr
 *
	mn
, *
	m¨g
);

15 
gíl_˘æ_ªsﬁve_Ámûy
(c⁄° *
Ámûy
);

	@genl/static-syms.c

7 
	~<°rög.h
>

8 
	~"dlf˙.h
"

10 *
	$_dlsym
(c⁄° *
sym
)

12 
	~"°©ic-syms.h
"

13  
NULL
;

14 
	}
}

	@include/SNAPSHOT.h

1 c⁄° 
	gSNAPSHOT
[] = "151103";

	@include/bpf_elf.h

1 #i‚de‡
__BPF_ELF__


2 
	#__BPF_ELF__


	)

4 
	~<asm/ty≥s.h
>

16 
	#ELF_SECTION_LICENSE
 "li˚n£"

	)

17 
	#ELF_SECTION_MAPS
 "m≠s"

	)

18 
	#ELF_SECTION_CLASSIFIER
 "˛assifõr"

	)

19 
	#ELF_SECTION_ACTION
 "a˘i⁄"

	)

21 
	#ELF_MAX_MAPS
 64

	)

22 
	#ELF_MAX_LICENSE_LEN
 128

	)

25 
	sbpf_ñf_m≠
 {

26 
__u32
 
	mty≥
;

27 
__u32
 
	msize_key
;

28 
__u32
 
	msize_vÆue
;

29 
__u32
 
	mmax_ñem
;

30 
__u32
 
	mid
;

	@include/bpf_scm.h

1 #i‚de‡
__BPF_SCM__


2 
	#__BPF_SCM__


	)

4 
	~<sys/ty≥s.h
>

5 
	~<sys/sockë.h
>

7 
	~"utûs.h
"

8 
	~"bpf_ñf.h
"

10 
	#BPF_SCM_AUX_VER
 1

	)

11 
	#BPF_SCM_MAX_FDS
 
ELF_MAX_MAPS


	)

12 
	#BPF_SCM_MSG_SIZE
 1024

	)

14 
	sbpf_ñf_°
 {

15 
dev_t
 
	m°_dev
;

16 
öo_t
 
	m°_öo
;

19 
	sbpf_m≠_aux
 {

20 
	muds_vî
;

21 
	mnum_ít
;

22 
	mobj_«me
[64];

23 
bpf_ñf_°
 
	mobj_°
;

24 
bpf_ñf_m≠
 
	mít
[
BPF_SCM_MAX_FDS
];

27 
	sbpf_m≠_£t_msg
 {

28 
msghdr
 
	mhdr
;

29 
iovec
 
	miov
;

30 
	mmsg_buf
[
BPF_SCM_MSG_SIZE
];

31 
bpf_m≠_aux
 
	maux
;

34 
ölöe
 *
	$bpf_m≠_£t_öô
(
bpf_m≠_£t_msg
 *
msg
,

35 
sockaddr_un
 *
addr
,

36 
addr_Àn
)

38 c⁄° 
cmsg_˘l_Àn
 = (Ë* 
BPF_SCM_MAX_FDS
;

39 
cmsghdr
 *
cmsg
;

41 
msg
->
iov
.
iov_ba£
 = &msg->
aux
;

42 
msg
->
iov
.
iov_Àn
 = (msg->
aux
);

44 
msg
->
hdr
.
msg_iov
 = &msg->
iov
;

45 
msg
->
hdr
.
msg_iovÀn
 = 1;

47 
msg
->
hdr
.
msg_«me
 = (
sockaddr
 *)
addr
;

48 
msg
->
hdr
.
msg_«mñí
 = 
addr_Àn
;

50 
	`BUILD_BUG_ON
((
msg
->
msg_buf
Ë< 
cmsg_˘l_Àn
);

51 
msg
->
hdr
.
msg_c⁄åﬁ
 = &msg->
msg_buf
;

52 
msg
->
hdr
.
msg_c⁄åﬁÀn
 = 
cmsg_˘l_Àn
;

54 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
->
hdr
);

55 
cmsg
->
cmsg_Àn
 = 
msg
->
hdr
.
msg_c⁄åﬁÀn
;

56 
cmsg
->
cmsg_Àvñ
 = 
SOL_SOCKET
;

57 
cmsg
->
cmsg_ty≥
 = 
SCM_RIGHTS
;

59  (*)
	`CMSG_DATA
(
cmsg
);

60 
	}
}

62 
ölöe
 
	$bpf_m≠_£t_öô_sögÀ
(
bpf_m≠_£t_msg
 *
msg
,

63 
num
)

65 
cmsghdr
 *
cmsg
;

67 
msg
->
hdr
.
msg_c⁄åﬁÀn
 = 
	`CMSG_LEN
((Ë* 
num
);

68 
msg
->
iov
.
iov_Àn
 = 
	`off£tof
(
bpf_m≠_aux
, 
ít
) +

69 (
bpf_ñf_m≠
Ë* 
num
;

71 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
->
hdr
);

72 
cmsg
->
cmsg_Àn
 = 
msg
->
hdr
.
msg_c⁄åﬁÀn
;

73 
	}
}

	@include/color.h

1 #i‚de‡
__COLOR_H__


2 
	#__COLOR_H__
 1

	)

4 
	ecﬁ‹_©å
 {

5 
	mCOLOR_IFNAME
,

6 
	mCOLOR_MAC
,

7 
	mCOLOR_INET
,

8 
	mCOLOR_INET6
,

9 
	mCOLOR_OPERSTATE_UP
,

10 
	mCOLOR_OPERSTATE_DOWN


13 
íabÀ_cﬁ‹
();

14 
cﬁ‹_Ârötf
(
FILE
 *
Â
, 
cﬁ‹_©å
 
©å
, c⁄° *
fmt
, ...);

	@include/dlfcn.h

6 #i‚de‡
NO_SHARED_LIBS


7 #ö˛ude_√xà<
dlf˙
.
h
>

10 
	#RTLD_LAZY
 0

	)

11 
	#RTLD_GLOBAL
 1

	)

12 
	#_FAKE_DLFCN_HDL
 (*)0xbìfˇ„

	)

14 
ölöe
 *
	$dl›í
(c⁄° *
fûe
, 
Êag
)

16 i‡(
fûe
 =
NULL
)

17  
_FAKE_DLFCN_HDL
;

19  
NULL
;

20 
	}
}

22 *
_dlsym
(c⁄° *
sym
);

23 
ölöe
 *
	$dlsym
(*
h™dÀ
, c⁄° *
sym
)

25 i‡(
h™dÀ
 !
_FAKE_DLFCN_HDL
)

26  
NULL
;

27  
	`_dlsym
(
sym
);

28 
	}
}

30 
ölöe
 *
	$dÀº‹
()

32  
NULL
;

33 
	}
}

35 
ölöe
 
	$dl˛o£
(*
h™dÀ
)

37  (
h™dÀ
 =
_FAKE_DLFCN_HDL
) ? 0 : 1;

38 
	}
}

	@include/hlist.h

1 #i‚de‡
__HLIST_H__


2 
	#__HLIST_H__
 1

	)

5 
	~<°ddef.h
>

7 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

8 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

9 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

11 
	shli°_hód
 {

12 
hli°_node
 *
	mfú°
;

15 
	shli°_node
 {

16 
hli°_node
 *
	m√xt
, **
	mµªv
;

19 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

21 
hli°_node
 *
√xt
 = 
n
->next;

22 
hli°_node
 **
µªv
 = 
n
->pprev;

23 *
µªv
 = 
√xt
;

24 i‡(
√xt
)

25 
√xt
->
µªv
 =Öprev;

26 
	}
}

28 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

30 
hli°_node
 *
fú°
 = 
h
->first;

31 
n
->
√xt
 = 
fú°
;

32 i‡(
fú°
)

33 
fú°
->
µªv
 = &
n
->
√xt
;

34 
h
->
fú°
 = 
n
;

35 
n
->
µªv
 = &
h
->
fú°
;

36 
	}
}

38 
	#hli°_f‹_óch
(
pos
, 
hód
) \

39 
pos
 = (
hód
)->
fú°
;Öo†;Öo†pos->
√xt
)

	)

42 
	#hli°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

43 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
n
 =Öos->
√xt
; 1; }); \

44 
pos
 = 
n
)

	)

46 
	#hli°_íåy_ß„
(
±r
, 
ty≥
, 
membî
) \

47 ({ 
	`ty≥of
(
±r
Ë
____±r
 = (ptr); \

48 
____±r
 ? 
	`hli°_íåy
(____±r, 
ty≥
, 
membî
Ë: 
NULL
; \

49 })

	)

51 
	#hli°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

52 
pos
 = 
	`hli°_íåy_ß„
((
hód
)->
fú°
, 
	`ty≥of
(*’os)), 
membî
);\

53 
pos
; \

54 
pos
 = 
	`hli°_íåy_ß„
(’os)->
membî
.
√xt
, 
	`ty≥of
(*’os)), membî))

	)

	@include/ip6tables.h

1 #i‚de‡
_IP6TABLES_USER_H


2 
	#_IP6TABLES_USER_H


	)

4 
	~"ùèbÀs_comm⁄.h
"

5 
	~"libùtc/libù6tc.h
"

7 
	sù6èbÀs_ruÀ_m©ch


9 
ù6èbÀs_ruÀ_m©ch
 *
	m√xt
;

11 
ù6èbÀs_m©ch
 *
	mm©ch
;

15 
	sù6èbÀs_m©ch


17 
ù6èbÀs_m©ch
 *
	m√xt
;

19 
ù6t_chaöœbñ
 
	m«me
;

21 c⁄° *
	mvîsi⁄
;

24 
size_t
 
	msize
;

27 
size_t
 
	mu£r•a˚size
;

30 (*
	mhñp
)();

33 (*
	möô
)(
ù6t_íåy_m©ch
 *
	mm
, *
	mnfˇche
);

37 (*
	m∑r£
)(
	mc
, **
	m¨gv
, 
	mövît
, *
	mÊags
,

38 c⁄° 
ù6t_íåy
 *
	míåy
,

39 *
	mnfˇche
,

40 
ù6t_íåy_m©ch
 **
	mm©ch
);

43 (*
	mföÆ_check
)(
	mÊags
);

46 (*
	m¥öt
)(c⁄° 
ù6t_ù6
 *
	mù
,

47 c⁄° 
ù6t_íåy_m©ch
 *
	mm©ch
, 
	mnumîic
);

50 (*
	mßve
)(c⁄° 
ù6t_ù6
 *
	mù
,

51 c⁄° 
ù6t_íåy_m©ch
 *
	mm©ch
);

54 c⁄° 
›ti⁄
 *
	mexåa_›ts
;

57 
	m›ti⁄_off£t
;

58 
ù6t_íåy_m©ch
 *
	mm
;

59 
	mmÊags
;

60 #ifde‡
NO_SHARED_LIBS


61 
	mlﬂded
;

65 
	sù6èbÀs_èrgë


67 
ù6èbÀs_èrgë
 *
	m√xt
;

69 
ù6t_chaöœbñ
 
	m«me
;

71 c⁄° *
	mvîsi⁄
;

74 
size_t
 
	msize
;

77 
size_t
 
	mu£r•a˚size
;

80 (*
	mhñp
)();

83 (*
	möô
)(
ù6t_íåy_èrgë
 *
	mt
, *
	mnfˇche
);

87 (*
	m∑r£
)(
	mc
, **
	m¨gv
, 
	mövît
, *
	mÊags
,

88 c⁄° 
ù6t_íåy
 *
	míåy
,

89 
ù6t_íåy_èrgë
 **
	mèrgë
);

92 (*
	mföÆ_check
)(
	mÊags
);

95 (*
	m¥öt
)(c⁄° 
ù6t_ù6
 *
	mù
,

96 c⁄° 
ù6t_íåy_èrgë
 *
	mèrgë
, 
	mnumîic
);

99 (*
	mßve
)(c⁄° 
ù6t_ù6
 *
	mù
,

100 c⁄° 
ù6t_íåy_èrgë
 *
	mèrgë
);

103 
›ti⁄
 *
	mexåa_›ts
;

106 
	m›ti⁄_off£t
;

107 
ù6t_íåy_èrgë
 *
	mt
;

108 
	mtÊags
;

109 
	mu£d
;

110 #ifde‡
NO_SHARED_LIBS


111 
	mlﬂded
;

115 
löe
;

118 
ªgi°î_m©ch6
(
ù6èbÀs_m©ch
 *
me
);

119 
ªgi°î_èrgë6
(
ù6èbÀs_èrgë
 *
me
);

121 
do_comm™d6
(
¨gc
, *
¨gv
[], **
èbÀ
,

122 
ù6tc_h™dÀ_t
 *
h™dÀ
);

124 
ù6èbÀs_m©ch
 *
ù6èbÀs_m©ches
;

125 
ù6èbÀs_èrgë
 *
ù6èbÀs_èrgës
;

127 
	eù6t_åylﬂd
 {

128 
	mDONT_LOAD
,

129 
	mTRY_LOAD
,

130 
	mLOAD_MUST_SUCCEED


133 
ù6èbÀs_èrgë
 *
föd_èrgë
(c⁄° *
«me
, 
ù6t_åylﬂd
);

134 
ù6èbÀs_m©ch
 *
föd_m©ch
(c⁄° *
«me
, 
ù6t_åylﬂd
, 
ù6èbÀs_ruÀ_m©ch
 **
m©ch
);

136 
f‹_óch_chaö
((*
‚
)(c⁄° 
ù6t_chaöœbñ
, , 
ù6tc_h™dÀ_t
 *), 
vîbo£
, 
buûtö°oo
, ip6tc_h™dÀ_à*
h™dÀ
);

137 
	`Êush_íåõs
(c⁄° 
ù6t_chaöœbñ
 
chaö
, 
vîbo£
, 
ù6tc_h™dÀ_t
 *
h™dÀ
);

138 
	`dñëe_chaö
(c⁄° 
ù6t_chaöœbñ
 
chaö
, 
vîbo£
, 
ù6tc_h™dÀ_t
 *
h™dÀ
);

139 
	`ù6èbÀs_ösmod
(c⁄° *
mod«me
, c⁄° *
mod¥obe
);

	@include/iptables.h

1 #i‚de‡
_IPTABLES_USER_H


2 
	#_IPTABLES_USER_H


	)

4 
	~"ùèbÀs_comm⁄.h
"

5 
	~"libùtc/libùtc.h
"

7 #i‚de‡
IPT_LIB_DIR


8 
	#IPT_LIB_DIR
 "/u§/loˇl/lib/ùèbÀs"

	)

11 #i‚de‡
IPPROTO_SCTP


12 
	#IPPROTO_SCTP
 132

	)

15 #i‚de‡
IPT_SO_GET_REVISION_MATCH


16 
	#IPT_SO_GET_REVISION_MATCH
 (
IPT_BASE_CTL
 + 2)

	)

17 
	#IPT_SO_GET_REVISION_TARGET
 (
IPT_BASE_CTL
 + 3)

	)

19 
	sùt_gë_ªvisi⁄


21 
	m«me
[
IPT_FUNCTION_MAXNAMELEN
-1];

23 
u_öt8_t
 
	mªvisi⁄
;

27 
	sùèbÀs_ruÀ_m©ch


29 
ùèbÀs_ruÀ_m©ch
 *
	m√xt
;

31 
ùèbÀs_m©ch
 *
	mm©ch
;

35 
	sùèbÀs_m©ch


37 
ùèbÀs_m©ch
 *
	m√xt
;

39 
ùt_chaöœbñ
 
	m«me
;

42 
u_öt8_t
 
	mªvisi⁄
;

44 c⁄° *
	mvîsi⁄
;

47 
size_t
 
	msize
;

50 
size_t
 
	mu£r•a˚size
;

53 (*
	mhñp
)();

56 (*
	möô
)(
ùt_íåy_m©ch
 *
	mm
, *
	mnfˇche
);

60 (*
	m∑r£
)(
	mc
, **
	m¨gv
, 
	mövît
, *
	mÊags
,

61 c⁄° 
ùt_íåy
 *
	míåy
,

62 *
	mnfˇche
,

63 
ùt_íåy_m©ch
 **
	mm©ch
);

66 (*
	mföÆ_check
)(
	mÊags
);

69 (*
	m¥öt
)(c⁄° 
ùt_ù
 *
	mù
,

70 c⁄° 
ùt_íåy_m©ch
 *
	mm©ch
, 
	mnumîic
);

73 (*
	mßve
)(c⁄° 
ùt_ù
 *
	mù
,

74 c⁄° 
ùt_íåy_m©ch
 *
	mm©ch
);

77 c⁄° 
›ti⁄
 *
	mexåa_›ts
;

80 
	m›ti⁄_off£t
;

81 
ùt_íåy_m©ch
 *
	mm
;

82 
	mmÊags
;

83 #ifde‡
NO_SHARED_LIBS


84 
	mlﬂded
;

88 
	sùèbÀs_èrgë


90 
ùèbÀs_èrgë
 *
	m√xt
;

92 
ùt_chaöœbñ
 
	m«me
;

95 
u_öt8_t
 
	mªvisi⁄
;

97 c⁄° *
	mvîsi⁄
;

100 
size_t
 
	msize
;

103 
size_t
 
	mu£r•a˚size
;

106 (*
	mhñp
)();

109 (*
	möô
)(
ùt_íåy_èrgë
 *
	mt
, *
	mnfˇche
);

113 (*
	m∑r£
)(
	mc
, **
	m¨gv
, 
	mövît
, *
	mÊags
,

114 c⁄° 
ùt_íåy
 *
	míåy
,

115 
ùt_íåy_èrgë
 **
	mèrgë
);

118 (*
	mföÆ_check
)(
	mÊags
);

121 (*
	m¥öt
)(c⁄° 
ùt_ù
 *
	mù
,

122 c⁄° 
ùt_íåy_èrgë
 *
	mèrgë
, 
	mnumîic
);

125 (*
	mßve
)(c⁄° 
ùt_ù
 *
	mù
,

126 c⁄° 
ùt_íåy_èrgë
 *
	mèrgë
);

129 
›ti⁄
 *
	mexåa_›ts
;

132 
	m›ti⁄_off£t
;

133 
ùt_íåy_èrgë
 *
	mt
;

134 
	mtÊags
;

135 
	mu£d
;

136 #ifde‡
NO_SHARED_LIBS


137 
	mlﬂded
;

141 
löe
;

144 
ªgi°î_m©ch
(
ùèbÀs_m©ch
 *
me
);

145 
ªgi°î_èrgë
(
ùèbÀs_èrgë
 *
me
);

146 
xèbÀs_ªgi°î_èrgë
(
ùèbÀs_èrgë
 *
me
);

147 
buûd_°
(
ùèbÀs_èrgë
 *
èrgë
, 
ùt_íåy_èrgë
 *
t
);

149 
ö_addr
 *
dŸãd_to_addr
(c⁄° *
dŸãd
);

150 *
addr_to_dŸãd
(c⁄° 
ö_addr
 *
addΩ
);

151 *
addr_to_™y«me
(c⁄° 
ö_addr
 *
addr
);

152 *
mask_to_dŸãd
(c⁄° 
ö_addr
 *
mask
);

154 
∑r£_ho°√tw‹kmask
(c⁄° *
«me
, 
ö_addr
 **
addΩp
,

155 
ö_addr
 *
maskp
, *
«ddrs
);

156 
u_öt16_t
 
∑r£_¥Ÿocﬁ
(c⁄° *
s
);

158 
do_comm™d
(
¨gc
, *
¨gv
[], **
èbÀ
,

159 
ùtc_h™dÀ_t
 *
h™dÀ
);

161 
ùèbÀs_m©ch
 *
ùèbÀs_m©ches
;

162 
ùèbÀs_èrgë
 *
ùèbÀs_èrgës
;

164 
	eùt_åylﬂd
 {

165 
	mDONT_LOAD
,

166 
	mTRY_LOAD
,

167 
	mLOAD_MUST_SUCCEED


170 
ùèbÀs_èrgë
 *
föd_èrgë
(c⁄° *
«me
, 
ùt_åylﬂd
);

171 
ùèbÀs_m©ch
 *
föd_m©ch
(c⁄° *
«me
, 
ùt_åylﬂd
, 
ùèbÀs_ruÀ_m©ch
 **
m©ch
);

173 
dñëe_chaö
(c⁄° 
ùt_chaöœbñ
 
chaö
, 
vîbo£
,

174 
ùtc_h™dÀ_t
 *
h™dÀ
);

175 
Êush_íåõs
(c⁄° 
ùt_chaöœbñ
 
chaö
, 
vîbo£
,

176 
ùtc_h™dÀ_t
 *
h™dÀ
);

177 
f‹_óch_chaö
((*
‚
)(c⁄° 
ùt_chaöœbñ
, , 
ùtc_h™dÀ_t
 *),

178 
vîbo£
, 
buûtö°oo
, 
ùtc_h™dÀ_t
 *
h™dÀ
);

	@include/iptables_common.h

1 #i‚de‡
_IPTABLES_COMMON_H


2 
	#_IPTABLES_COMMON_H


	)

5 
	eexôty≥
 {

6 
	mOTHER_PROBLEM
 = 1,

7 
	mPARAMETER_PROBLEM
,

8 
	mVERSION_PROBLEM
,

9 
	mRESOURCE_PROBLEM


13 
	#Æig√d_u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

15 
	$exô_¥öthñp
(Ë
	`__©åibuã__
((
n‹ëu∫
));

16 
	$exô_åyhñp
(Ë
	`__©åibuã__
((
n‹ëu∫
));

17 
	`check_övî£
(c⁄° 
›ti⁄
[], *
övît
, *
›töd
, 
¨gc
);

18 
	`°rög_to_numbî
(const *,

22 
	`°rög_to_numbî_l
(const *,

26 
	`°rög_to_numbî_Œ
(const *,

30 
	`ùèbÀs_ösmod
(c⁄° *
mod«me
, c⁄° *
mod¥obe
);

31 
	`lﬂd_ùèbÀs_ko
(c⁄° *
mod¥obe
);

32 
	$exô_îr‹
(
exôty≥
, *, ...)
	`__©åibuã__
((
n‹ëu∫
,

33 
	`f‹m©
(
¥ötf
,2,3)));

34 c⁄° *
¥ogøm_«me
, *
¥ogøm_vîsi⁄
;

35 *
lib_dú
;

37 
	#_öô
 
	`__©åibuã__
((
c⁄°ru˘‹
)Ë
my_öô


	)

38 #ifde‡
NO_SHARED_LIBS


39 #ifde‡
_INIT


40 #unde‡
_öô


41 
	#_öô
 
_INIT


	)

43 
	`öô_exãnsi⁄s
();

46 
	#__be32
 
u_öt32_t


	)

47 
	#__À32
 
u_öt32_t


	)

48 
	#__be16
 
u_öt16_t


	)

49 
	#__À16
 
u_öt16_t


	)

	@include/json_writer.h

15 #i‚de‡
_JSON_WRITER_H_


16 
	#_JSON_WRITER_H_


	)

18 
	~<°dboﬁ.h
>

19 
	~<°döt.h
>

22 
js⁄_wrôî
 
	tjs⁄_wrôî_t
;

25 
js⁄_wrôî_t
 *
js⁄w_√w
(
FILE
 *
f
);

27 
js⁄w_de°roy
(
js⁄_wrôî_t
 **
£lf_p
);

30 
js⁄w_¥ëty
(
js⁄_wrôî_t
 *
£lf
, 
boﬁ
 
⁄
);

33 
js⁄w_«me
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
«me
);

36 
js⁄w_°rög
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
vÆue
);

37 
js⁄w_boﬁ
(
js⁄_wrôî_t
 *
£lf
, 
boﬁ
 
vÆue
);

38 
js⁄w_Êﬂt
(
js⁄_wrôî_t
 *
£lf
, 
numbî
);

39 
js⁄w_uöt
(
js⁄_wrôî_t
 *
£lf
, 
uöt64_t
 
numbî
);

40 
js⁄w_öt
(
js⁄_wrôî_t
 *
£lf
, 
öt64_t
 
numbî
);

41 
js⁄w_nuŒ
(
js⁄_wrôî_t
 *
£lf
);

44 
js⁄w_°rög_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
, c⁄° *
vÆ
);

45 
js⁄w_boﬁ_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
, 
boﬁ
 
vÆue
);

46 
js⁄w_Êﬂt_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
, 
num
);

47 
js⁄w_uöt_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
, 
uöt64_t
 
num
);

48 
js⁄w_öt_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
, 
öt64_t
 
num
);

49 
js⁄w_nuŒ_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
);

52 
js⁄w_°¨t_obje˘
(
js⁄_wrôî_t
 *
£lf
);

53 
js⁄w_íd_obje˘
(
js⁄_wrôî_t
 *
£lf
);

55 
js⁄w_°¨t_¨øy
(
js⁄_wrôî_t
 *
£lf
);

56 
js⁄w_íd_¨øy
(
js⁄_wrôî_t
 *
£lf
);

59 (
	tjs⁄w_îr_h™dÀr_‚
)(const *);

	@include/libgenl.h

1 #i‚de‡
__LIBGENL_H__


2 
	#__LIBGENL_H__


	)

4 
	~"lib√éök.h
"

6 
	#GENL_REQUEST
(
_ªq
, 
_bufsiz
, 
_Ámûy
, 
_hdrsiz
, 
_vî
, 
_cmd
, 
_Êags
) \

8 
∆msghdr
 
n
; \

9 
gílmsghdr
 
g
; \

10 
buf
[
	`NLMSG_ALIGN
(
_hdrsiz
Ë+ (
_bufsiz
)]; \

11 } 
_ªq
 = { \

12 .
n
 = { \

13 .
∆msg_ty≥
 = (
_Ámûy
), \

14 .
∆msg_Êags
 = (
_Êags
), \

15 .
∆msg_Àn
 = 
	`NLMSG_LENGTH
(
GENL_HDRLEN
 + (
_hdrsiz
)), \

17 .
g
 = { \

18 .
cmd
 = (
_cmd
), \

19 .
vîsi⁄
 = (
_vî
), \

21 }

	)

23 
gíl_ªsﬁve_Ámûy
(
π∆_h™dÀ
 *
gπh
, c⁄° *
Ámûy
);

	@include/libiptc/ipt_kernel_headers.h

3 #i‚de‡
_FWCHAINS_KERNEL_HEADERS_H


4 
	#_FWCHAINS_KERNEL_HEADERS_H


	)

6 
	~<limôs.h
>

8 #i‡
deföed
(
__GLIBC__
) && __GLIBC__ == 2

9 
	~<√töë/ù.h
>

10 
	~<√töë/ö.h
>

11 
	~<√töë/ù_icmp.h
>

12 
	~<√töë/t˝.h
>

13 
	~<√töë/udp.h
>

14 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<löux/ù.h
>

18 
	~<löux/ö.h
>

19 
	~<löux/if.h
>

20 
	~<löux/icmp.h
>

21 
	~<löux/t˝.h
>

22 
	~<löux/udp.h
>

23 
	~<löux/ty≥s.h
>

24 
	~<löux/ö6.h
>

	@include/libiptc/libip6tc.h

1 #i‚de‡
_LIBIP6TC_H


2 
	#_LIBIP6TC_H


	)

5 
	~<libùtc/ùt_kî√l_hódîs.h
>

6 
	~<löux/√tfûãr_ùv6/ù6_èbÀs.h
>

8 #i‚de‡
IP6T_MIN_ALIGN


9 
	#IP6T_MIN_ALIGN
 (
	`__Æignof__
(
ù6t_íåy
))

	)

11 
	#IP6T_ALIGN
(
s
Ë(((sË+ (
IP6T_MIN_ALIGN
-1)Ë& ~(IP6T_MIN_ALIGN-1))

	)

13 
	tù6t_chaöœbñ
[32];

15 
	#IP6TC_LABEL_ACCEPT
 "ACCEPT"

	)

16 
	#IP6TC_LABEL_DROP
 "DROP"

	)

17 
	#IP6TC_LABEL_QUEUE
 "QUEUE"

	)

18 
	#IP6TC_LABEL_RETURN
 "RETURN"

	)

21 
ù6tc_h™dÀ
 *
	tù6tc_h™dÀ_t
;

24 
ù6tc_is_chaö
(c⁄° *
chaö
, c⁄° 
ù6tc_h™dÀ_t
 
h™dÀ
);

27 
ù6tc_h™dÀ_t
 
ù6tc_öô
(c⁄° *
èbÀ«me
);

30 
ù6tc_‰ì
(
ù6tc_h™dÀ_t
 *
h
);

33 c⁄° *
ù6tc_fú°_chaö
(
ù6tc_h™dÀ_t
 *
h™dÀ
);

34 c⁄° *
ù6tc_√xt_chaö
(
ù6tc_h™dÀ_t
 *
h™dÀ
);

37 c⁄° 
ù6t_íåy
 *
ù6tc_fú°_ruÀ
(c⁄° *
chaö
,

38 
ù6tc_h™dÀ_t
 *
h™dÀ
);

41 c⁄° 
ù6t_íåy
 *
ù6tc_√xt_ruÀ
(c⁄° ù6t_íåy *
¥ev
,

42 
ù6tc_h™dÀ_t
 *
h™dÀ
);

45 c⁄° *
ù6tc_gë_èrgë
(c⁄° 
ù6t_íåy
 *
e
,

46 
ù6tc_h™dÀ_t
 *
h™dÀ
);

49 
ù6tc_buûtö
(c⁄° *
chaö
, c⁄° 
ù6tc_h™dÀ_t
 
h™dÀ
);

52 c⁄° *
ù6tc_gë_pﬁicy
(c⁄° *
chaö
,

53 
ù6t_cou¡îs
 *
cou¡îs
,

54 
ù6tc_h™dÀ_t
 *
h™dÀ
);

61 
ù6tc_ö£π_íåy
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

62 c⁄° 
ù6t_íåy
 *
e
,

63 
ruÀnum
,

64 
ù6tc_h™dÀ_t
 *
h™dÀ
);

67 
ù6tc_ª∂a˚_íåy
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

68 c⁄° 
ù6t_íåy
 *
e
,

69 
ruÀnum
,

70 
ù6tc_h™dÀ_t
 *
h™dÀ
);

74 
ù6tc_≠≥nd_íåy
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

75 c⁄° 
ù6t_íåy
 *
e
,

76 
ù6tc_h™dÀ_t
 *
h™dÀ
);

79 
ù6tc_dñëe_íåy
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

80 c⁄° 
ù6t_íåy
 *
‹igfw
,

81 *
m©chmask
,

82 
ù6tc_h™dÀ_t
 *
h™dÀ
);

85 
ù6tc_dñëe_num_íåy
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

86 
ruÀnum
,

87 
ù6tc_h™dÀ_t
 *
h™dÀ
);

91 c⁄° *
ù6tc_check_∑ckë
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

92 
ù6t_íåy
 *,

93 
ù6tc_h™dÀ_t
 *
h™dÀ
);

96 
ù6tc_Êush_íåõs
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

97 
ù6tc_h™dÀ_t
 *
h™dÀ
);

100 
ù6tc_zîo_íåõs
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

101 
ù6tc_h™dÀ_t
 *
h™dÀ
);

104 
ù6tc_¸óã_chaö
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

105 
ù6tc_h™dÀ_t
 *
h™dÀ
);

108 
ù6tc_dñëe_chaö
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

109 
ù6tc_h™dÀ_t
 *
h™dÀ
);

112 
ù6tc_ª«me_chaö
(c⁄° 
ù6t_chaöœbñ
 
ﬁd«me
,

113 c⁄° 
ù6t_chaöœbñ
 
√w«me
,

114 
ù6tc_h™dÀ_t
 *
h™dÀ
);

117 
ù6tc_£t_pﬁicy
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

118 c⁄° 
ù6t_chaöœbñ
 
pﬁicy
,

119 
ù6t_cou¡îs
 *
cou¡îs
,

120 
ù6tc_h™dÀ_t
 *
h™dÀ
);

123 
ù6tc_gë_ª„ªn˚s
(*
ªf
, c⁄° 
ù6t_chaöœbñ
 
chaö
,

124 
ù6tc_h™dÀ_t
 *
h™dÀ
);

127 
ù6t_cou¡îs
 *
ù6tc_ªad_cou¡î
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

128 
ruÀnum
,

129 
ù6tc_h™dÀ_t
 *
h™dÀ
);

132 
ù6tc_zîo_cou¡î
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

133 
ruÀnum
,

134 
ù6tc_h™dÀ_t
 *
h™dÀ
);

137 
ù6tc_£t_cou¡î
(c⁄° 
ù6t_chaöœbñ
 
chaö
,

138 
ruÀnum
,

139 
ù6t_cou¡îs
 *
cou¡îs
,

140 
ù6tc_h™dÀ_t
 *
h™dÀ
);

143 
ù6tc_commô
(
ù6tc_h™dÀ_t
 *
h™dÀ
);

146 
ù6tc_gë_øw_sockë
();

149 c⁄° *
ù6tc_°ªº‹
(
îr
);

152 
ùv6_¥efix_Àngth
(c⁄° 
ö6_addr
 *
a
);

	@include/libiptc/libiptc.h

1 #i‚de‡
_LIBIPTC_H


2 
	#_LIBIPTC_H


	)

5 
	~<libùtc/ùt_kî√l_hódîs.h
>

6 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

8 #ifde‡
__˝lu•lus


12 #i‚de‡
IPT_MIN_ALIGN


16 
	#IPT_MIN_ALIGN
 (
	`__Æignof__
(
ùt_íåy
))

	)

19 
	#IPT_ALIGN
(
s
Ë(((sË+ ((
IPT_MIN_ALIGN
)-1)Ë& ~((IPT_MIN_ALIGN)-1))

	)

21 
	tùt_chaöœbñ
[32];

23 
	#IPTC_LABEL_ACCEPT
 "ACCEPT"

	)

24 
	#IPTC_LABEL_DROP
 "DROP"

	)

25 
	#IPTC_LABEL_QUEUE
 "QUEUE"

	)

26 
	#IPTC_LABEL_RETURN
 "RETURN"

	)

29 
ùtc_h™dÀ
 *
	tùtc_h™dÀ_t
;

32 
ùtc_is_chaö
(c⁄° *
chaö
, c⁄° 
ùtc_h™dÀ_t
 
h™dÀ
);

35 
ùtc_h™dÀ_t
 
ùtc_öô
(c⁄° *
èbÀ«me
);

38 
ùtc_‰ì
(
ùtc_h™dÀ_t
 *
h
);

41 c⁄° *
ùtc_fú°_chaö
(
ùtc_h™dÀ_t
 *
h™dÀ
);

42 c⁄° *
ùtc_√xt_chaö
(
ùtc_h™dÀ_t
 *
h™dÀ
);

45 c⁄° 
ùt_íåy
 *
ùtc_fú°_ruÀ
(c⁄° *
chaö
,

46 
ùtc_h™dÀ_t
 *
h™dÀ
);

49 c⁄° 
ùt_íåy
 *
ùtc_√xt_ruÀ
(c⁄° ùt_íåy *
¥ev
,

50 
ùtc_h™dÀ_t
 *
h™dÀ
);

53 c⁄° *
ùtc_gë_èrgë
(c⁄° 
ùt_íåy
 *
e
,

54 
ùtc_h™dÀ_t
 *
h™dÀ
);

57 
ùtc_buûtö
(c⁄° *
chaö
, c⁄° 
ùtc_h™dÀ_t
 
h™dÀ
);

60 c⁄° *
ùtc_gë_pﬁicy
(c⁄° *
chaö
,

61 
ùt_cou¡îs
 *
cou¡î
,

62 
ùtc_h™dÀ_t
 *
h™dÀ
);

69 
ùtc_ö£π_íåy
(c⁄° 
ùt_chaöœbñ
 
chaö
,

70 c⁄° 
ùt_íåy
 *
e
,

71 
ruÀnum
,

72 
ùtc_h™dÀ_t
 *
h™dÀ
);

75 
ùtc_ª∂a˚_íåy
(c⁄° 
ùt_chaöœbñ
 
chaö
,

76 c⁄° 
ùt_íåy
 *
e
,

77 
ruÀnum
,

78 
ùtc_h™dÀ_t
 *
h™dÀ
);

82 
ùtc_≠≥nd_íåy
(c⁄° 
ùt_chaöœbñ
 
chaö
,

83 c⁄° 
ùt_íåy
 *
e
,

84 
ùtc_h™dÀ_t
 *
h™dÀ
);

88 
ùtc_dñëe_íåy
(c⁄° 
ùt_chaöœbñ
 
chaö
,

89 c⁄° 
ùt_íåy
 *
‹igfw
,

90 *
m©chmask
,

91 
ùtc_h™dÀ_t
 *
h™dÀ
);

94 
ùtc_dñëe_num_íåy
(c⁄° 
ùt_chaöœbñ
 
chaö
,

95 
ruÀnum
,

96 
ùtc_h™dÀ_t
 *
h™dÀ
);

100 c⁄° *
ùtc_check_∑ckë
(c⁄° 
ùt_chaöœbñ
 
chaö
,

101 
ùt_íåy
 *
íåy
,

102 
ùtc_h™dÀ_t
 *
h™dÀ
);

105 
ùtc_Êush_íåõs
(c⁄° 
ùt_chaöœbñ
 
chaö
,

106 
ùtc_h™dÀ_t
 *
h™dÀ
);

109 
ùtc_zîo_íåõs
(c⁄° 
ùt_chaöœbñ
 
chaö
,

110 
ùtc_h™dÀ_t
 *
h™dÀ
);

113 
ùtc_¸óã_chaö
(c⁄° 
ùt_chaöœbñ
 
chaö
,

114 
ùtc_h™dÀ_t
 *
h™dÀ
);

117 
ùtc_dñëe_chaö
(c⁄° 
ùt_chaöœbñ
 
chaö
,

118 
ùtc_h™dÀ_t
 *
h™dÀ
);

121 
ùtc_ª«me_chaö
(c⁄° 
ùt_chaöœbñ
 
ﬁd«me
,

122 c⁄° 
ùt_chaöœbñ
 
√w«me
,

123 
ùtc_h™dÀ_t
 *
h™dÀ
);

126 
ùtc_£t_pﬁicy
(c⁄° 
ùt_chaöœbñ
 
chaö
,

127 c⁄° 
ùt_chaöœbñ
 
pﬁicy
,

128 
ùt_cou¡îs
 *
cou¡îs
,

129 
ùtc_h™dÀ_t
 *
h™dÀ
);

132 
ùtc_gë_ª„ªn˚s
(*
ªf
,

133 c⁄° 
ùt_chaöœbñ
 
chaö
,

134 
ùtc_h™dÀ_t
 *
h™dÀ
);

137 
ùt_cou¡îs
 *
ùtc_ªad_cou¡î
(c⁄° 
ùt_chaöœbñ
 
chaö
,

138 
ruÀnum
,

139 
ùtc_h™dÀ_t
 *
h™dÀ
);

142 
ùtc_zîo_cou¡î
(c⁄° 
ùt_chaöœbñ
 
chaö
,

143 
ruÀnum
,

144 
ùtc_h™dÀ_t
 *
h™dÀ
);

147 
ùtc_£t_cou¡î
(c⁄° 
ùt_chaöœbñ
 
chaö
,

148 
ruÀnum
,

149 
ùt_cou¡îs
 *
cou¡îs
,

150 
ùtc_h™dÀ_t
 *
h™dÀ
);

153 
ùtc_commô
(
ùtc_h™dÀ_t
 *
h™dÀ
);

156 
ùtc_gë_øw_sockë
();

159 c⁄° *
ùtc_°ªº‹
(
îr
);

161 #ifde‡
__˝lu•lus


	@include/libnetlink.h

1 #i‚de‡
__LIBNETLINK_H__


2 
	#__LIBNETLINK_H__
 1

	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<asm/ty≥s.h
>

7 
	~<löux/√éök.h
>

8 
	~<löux/π√éök.h
>

9 
	~<löux/if_lök.h
>

10 
	~<löux/if_addr.h
>

11 
	~<löux/√ighbour.h
>

12 
	~<löux/√tc⁄f.h
>

14 
	sπ∆_h™dÀ


16 
	mfd
;

17 
sockaddr_∆
 
	mloˇl
;

18 
sockaddr_∆
 
	m≥î
;

19 
__u32
 
	m£q
;

20 
__u32
 
	mdump
;

21 
	m¥Ÿo
;

22 
FILE
 *
	mdump_Â
;

23 
	#RTNL_HANDLE_F_LISTEN_ALL_NSID
 0x01

	)

24 
	mÊags
;

27 
rcvbuf
;

29 
	$π∆_›í
(
π∆_h™dÀ
 *
πh
, 
subs¸ùti⁄s
)

30 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
));

32 
	$π∆_›í_by¥Ÿo
(
π∆_h™dÀ
 *
πh
, 
subs¸ùti⁄s
,

33 
¥Ÿocﬁ
)

34 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
));

36 
	`π∆_˛o£
(
π∆_h™dÀ
 *
πh
);

37 
	$π∆_wûddump_ªque°
(
π∆_h™dÀ
 *
πh
, 
Ám
, 
ty≥
)

38 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
));

39 
	$π∆_wûddump_ªq_fûãr
(
π∆_h™dÀ
 *
πh
, 
Ám
, 
ty≥
,

40 
__u32
 
fût_mask
)

41 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
));

42 
	$π∆_dump_ªque°
(
π∆_h™dÀ
 *
πh
, 
ty≥
, *
ªq
,

43 
Àn
)

44 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
));

46 
	sπ∆_˘æ_d©a
 {

47 
nsid
;

50 (*
	tπ∆_fûãr_t
)(c⁄° 
	tsockaddr_∆
 *,

51 
	t∆msghdr
 *
	tn
, *);

53 (*
	tπ∆_li°í_fûãr_t
)(c⁄° 
	tsockaddr_∆
 *,

54 
	tπ∆_˘æ_d©a
 *,

55 
	t∆msghdr
 *
	tn
, *);

57 
	sπ∆_dump_fûãr_¨g


59 
π∆_fûãr_t
 
fûãr
;

60 *
¨g1
;

63 
	`π∆_dump_fûãr_l
(
π∆_h™dÀ
 *
πh
,

64 c⁄° 
π∆_dump_fûãr_¨g
 *
¨g
);

65 
	`π∆_dump_fûãr
(
π∆_h™dÀ
 *
πh
, 
π∆_fûãr_t
 
fûãr
, *
¨g
);

66 
	$π∆_èlk
(
π∆_h™dÀ
 *
π∆
, 
∆msghdr
 *
n
,

67 
∆msghdr
 *
™swî
, 
size_t
 
Àn
)

68 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
));

69 
	$π∆_£nd
(
π∆_h™dÀ
 *
πh
, c⁄° *
buf
, )

70 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
));

71 
	$π∆_£nd_check
(
π∆_h™dÀ
 *
πh
, c⁄° *
buf
, )

72 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
));

74 
	`add©å
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
);

75 
	`add©å8
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
, 
__u8
 
d©a
);

76 
	`add©å16
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
, 
__u16
 
d©a
);

77 
	`add©å32
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
, 
__u32
 
d©a
);

78 
	`add©å64
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
, 
__u64
 
d©a
);

79 
	`add©å°rz
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
, c⁄° *
d©a
);

81 
	`add©å_l
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
,

82 c⁄° *
d©a
, 
Æí
);

83 
	`addøw_l
(
∆msghdr
 *
n
, 
maxÀn
, c⁄° *
d©a
, 
Àn
);

84 
π©å
 *
	`add©å_√°
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
);

85 
	`add©å_√°_íd
(
∆msghdr
 *
n
, 
π©å
 *
√°
);

86 
π©å
 *
	`add©å_√°_com∑t
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
,

87 c⁄° *
d©a
, 
Àn
);

88 
	`add©å_√°_com∑t_íd
(
∆msghdr
 *
n
, 
π©å
 *
√°
);

89 
	`πa_add©å8
(
π©å
 *
πa
, 
maxÀn
, 
ty≥
, 
__u8
 
d©a
);

90 
	`πa_add©å16
(
π©å
 *
πa
, 
maxÀn
, 
ty≥
, 
__u16
 
d©a
);

91 
	`πa_add©å32
(
π©å
 *
πa
, 
maxÀn
, 
ty≥
, 
__u32
 
d©a
);

92 
	`πa_add©å64
(
π©å
 *
πa
, 
maxÀn
, 
ty≥
, 
__u64
 
d©a
);

93 
	`πa_add©å_l
(
π©å
 *
πa
, 
maxÀn
, 
ty≥
,

94 c⁄° *
d©a
, 
Æí
);

96 
	`∑r£_π©å
(
π©å
 *
tb
[], 
max
, π©å *
πa
, 
Àn
);

97 
	`∑r£_π©å_Êags
(
π©å
 *
tb
[], 
max
, π©å *
πa
,

98 
Àn
, 
Êags
);

99 
	`∑r£_π©å_byödex
(
π©å
 *
tb
[], 
max
,

100 
π©å
 *
πa
, 
Àn
);

101 
π©å
 *
	`∑r£_π©å_⁄e
(
ty≥
, π©å *
πa
, 
Àn
);

102 
	`__∑r£_π©å_√°ed_com∑t
(
π©å
 *
tb
[], 
max
, π©å *
πa
, 
Àn
);

104 
π©å
 *
	`πa_√°
(π©å *
πa
, 
maxÀn
, 
ty≥
);

105 
	`πa_√°_íd
(
π©å
 *
πa
, π©å *
√°
);

107 
	#RTA_TAIL
(
πa
) \

108 ((
π©å
 *Ë(((*Ë(
πa
)) + \

109 
	`RTA_ALIGN
((
πa
)->
πa_Àn
)))

	)

111 
	#∑r£_π©å_√°ed
(
tb
, 
max
, 
πa
) \

112 (
	`∑r£_π©å
((
tb
), (
max
), 
	`RTA_DATA
(
πa
), 
	`RTA_PAYLOAD
‘è)))

	)

114 
	#∑r£_π©å_⁄e_√°ed
(
ty≥
, 
πa
) \

115 (
	`∑r£_π©å_⁄e
(
ty≥
, 
	`RTA_DATA
(
πa
), 
	`RTA_PAYLOAD
‘è)))

	)

117 
	#∑r£_π©å_√°ed_com∑t
(
tb
, 
max
, 
πa
, 
d©a
, 
Àn
) \

118 ({ 
d©a
 = 
	`RTA_PAYLOAD
(
πa
Ë>
Àn
 ? 
	`RTA_DATA
‘èË: 
NULL
; \

119 
	`__∑r£_π©å_√°ed_com∑t
(
tb
, 
max
, 
πa
, 
Àn
); 
	}
})

	)

121 
ölöe
 
__u8
 
	$πa_gë©å_u8
(c⁄° 
π©å
 *
πa
)

123  *(
__u8
 *)
	`RTA_DATA
(
πa
);

124 
	}
}

125 
ölöe
 
__u16
 
	$πa_gë©å_u16
(c⁄° 
π©å
 *
πa
)

127  *(
__u16
 *)
	`RTA_DATA
(
πa
);

128 
	}
}

129 
ölöe
 
__u32
 
	$πa_gë©å_u32
(c⁄° 
π©å
 *
πa
)

131  *(
__u32
 *)
	`RTA_DATA
(
πa
);

132 
	}
}

133 
ölöe
 
__u64
 
	$πa_gë©å_u64
(c⁄° 
π©å
 *
πa
)

135 
__u64
 
tmp
;

136 
	`mem˝y
(&
tmp
, 
	`RTA_DATA
(
πa
), (
__u64
));

137  
tmp
;

138 
	}
}

139 
ölöe
 c⁄° *
	$πa_gë©å_°r
(c⁄° 
π©å
 *
πa
)

141  (c⁄° *)
	`RTA_DATA
(
πa
);

142 
	}
}

144 
π∆_li°í_Æl_nsid
(
π∆_h™dÀ
 *);

145 
π∆_li°í
(
π∆_h™dÀ
 *, 
π∆_li°í_fûãr_t
 
h™dÀr
,

146 *
j¨g
);

147 
π∆_‰om_fûe
(
FILE
 *, 
π∆_li°í_fûãr_t
 
h™dÀr
,

148 *
j¨g
);

150 
	#NLMSG_TAIL
(
nmsg
) \

151 ((
π©å
 *Ë(((*Ë(
nmsg
)Ë+ 
	`NLMSG_ALIGN
(“msg)->
∆msg_Àn
)))

	)

153 #i‚de‡
IFA_RTA


154 
	#IFA_RTA
(
r
) \

155 ((
π©å
*)(((*)(
r
)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

157 #i‚de‡
IFA_PAYLOAD


158 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

161 #i‚de‡
IFLA_RTA


162 
	#IFLA_RTA
(
r
) \

163 ((
π©å
*)(((*)(
r
)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

165 #i‚de‡
IFLA_PAYLOAD


166 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

169 #i‚de‡
NDA_RTA


170 
	#NDA_RTA
(
r
) \

171 ((
π©å
*)(((*)(
r
)Ë+ 
	`NLMSG_ALIGN
((
ndmsg
))))

	)

173 #i‚de‡
NDA_PAYLOAD


174 
	#NDA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
ndmsg
))

	)

177 #i‚de‡
NDTA_RTA


178 
	#NDTA_RTA
(
r
) \

179 ((
π©å
*)(((*)(
r
)Ë+ 
	`NLMSG_ALIGN
((
ndtmsg
))))

	)

181 #i‚de‡
NDTA_PAYLOAD


182 
	#NDTA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
ndtmsg
))

	)

185 #i‚de‡
NETNS_RTA


186 
	#NETNS_RTA
(
r
) \

187 ((
π©å
*)(((*)(
r
)Ë+ 
	`NLMSG_ALIGN
((
πgímsg
))))

	)

189 #i‚de‡
NETNS_PAYLOAD


190 
	#NETNS_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πgímsg
))

	)

195 
	#NLMSG_TSTAMP
 15

	)

	@include/linux/atm.h

11 #i‚de‡
_LINUX_ATM_H


12 
	#_LINUX_ATM_H


	)

20 
	~<löux/©m≠i.h
>

21 
	~<löux/©mßp.h
>

22 
	~<löux/©mioc.h
>

23 
	~<löux/ty≥s.h
>

27 
	#ATM_CELL_SIZE
 53

	)

28 
	#ATM_CELL_PAYLOAD
 48

	)

29 
	#ATM_AAL0_SDU
 52

	)

30 
	#ATM_MAX_AAL34_PDU
 65535

	)

31 
	#ATM_AAL5_TRAILER
 8

	)

32 
	#ATM_MAX_AAL5_PDU
 65535

	)

33 
	#ATM_MAX_CDV
 9999

	)

34 
	#ATM_NOT_RSV_VCI
 32

	)

36 
	#ATM_MAX_VPI
 255

	)

37 
	#ATM_MAX_VPI_NNI
 4096

	)

38 
	#ATM_MAX_VCI
 65535

	)

42 
	#ATM_NO_AAL
 0

	)

43 
	#ATM_AAL0
 13

	)

44 
	#ATM_AAL1
 1

	)

45 
	#ATM_AAL2
 2

	)

46 
	#ATM_AAL34
 3

	)

47 
	#ATM_AAL5
 5

	)

57 
	#__SO_ENCODE
(
l
,
n
,
t
) ((((l) & 0x1FF) << 22) | ((n) << 16) | \

58 (
t
))

	)

59 
	#__SO_LEVEL_MATCH
(
c
,
m
Ë(((cË>> 22Ë=((mË& 0x1FF))

	)

60 
	#__SO_NUMBER
(
c
Ë(((cË>> 16Ë& 0x3f)

	)

61 
	#__SO_SIZE
(
c
Ë((cË& 0x3fff)

	)

67 
	#SO_SETCLP
 
	`__SO_ENCODE
(
SOL_ATM
,0,)

	)

69 
	#SO_CIRANGE
 
	`__SO_ENCODE
(
SOL_ATM
,1,
©m_cú™ge
)

	)

72 
	#SO_ATMQOS
 
	`__SO_ENCODE
(
SOL_ATM
,2,
©m_qos
)

	)

74 
	#SO_ATMSAP
 
	`__SO_ENCODE
(
SOL_ATM
,3,
©m_ßp
)

	)

76 
	#SO_ATMPVC
 
	`__SO_ENCODE
(
SOL_ATM
,4,
sockaddr_©mpvc
)

	)

78 
	#SO_MULTIPOINT
 
	`__SO_ENCODE
(
SOL_ATM
, 5, )

	)

93 
	#ATM_HDR_GFC_MASK
 0xf0000000

	)

94 
	#ATM_HDR_GFC_SHIFT
 28

	)

95 
	#ATM_HDR_VPI_MASK
 0x0ff00000

	)

96 
	#ATM_HDR_VPI_SHIFT
 20

	)

97 
	#ATM_HDR_VCI_MASK
 0x000ffff0

	)

98 
	#ATM_HDR_VCI_SHIFT
 4

	)

99 
	#ATM_HDR_PTI_MASK
 0x0000000e

	)

100 
	#ATM_HDR_PTI_SHIFT
 1

	)

101 
	#ATM_HDR_CLP
 0x00000001

	)

108 
	#ATM_PTI_US0
 0

	)

109 
	#ATM_PTI_US1
 1

	)

110 
	#ATM_PTI_UCES0
 2

	)

111 
	#ATM_PTI_UCES1
 3

	)

112 
	#ATM_PTI_SEGF5
 4

	)

113 
	#ATM_PTI_E2EF5
 5

	)

114 
	#ATM_PTI_RSV_RM
 6

	)

115 
	#ATM_PTI_RSV
 7

	)

126 
	#ATM_NONE
 0

	)

127 
	#ATM_UBR
 1

	)

128 
	#ATM_CBR
 2

	)

129 
	#ATM_VBR
 3

	)

130 
	#ATM_ABR
 4

	)

131 
	#ATM_ANYCLASS
 5

	)

133 
	#ATM_MAX_PCR
 -1

	)

135 
	s©m_åaÂrm
 {

136 
	måaffic_˛ass
;

137 
	mmax_p¸
;

138 
	mp¸
;

139 
	mmö_p¸
;

140 
	mmax_cdv
;

141 
	mmax_sdu
;

143 
	mi¸
;

144 
	mtbe
;

145 
	m‰â
 : 24;

146 
	mrif
 : 4;

147 
	mrdf
 : 4;

148 
	mƒm_¥es
 :1;

149 
	måm_¥es
 :1;

150 
	madtf_¥es
 :1;

151 
	mcdf_¥es
 :1;

152 
	mƒm
 :3;

153 
	måm
 :3;

154 
	madtf
 :10;

155 
	mcdf
 :3;

156 
	m•¨e
 :9;

159 
	s©m_qos
 {

160 
©m_åaÂrm
 
	mtxç
;

161 
©m_åaÂrm
 
rxç
 
	m__ATM_API_ALIGN
;

163 
Øl
 
	m__ATM_API_ALIGN
;

168 
	#ATM_ITF_ANY
 -1

	)

169 
	#ATM_VPI_ANY
 -1

	)

170 
	#ATM_VCI_ANY
 -1

	)

171 
	#ATM_VPI_UNSPEC
 -2

	)

172 
	#ATM_VCI_UNSPEC
 -2

	)

175 
	ssockaddr_©mpvc
 {

176 
	mßp_Ámûy
;

178 
	môf
;

179 
	mvpi
;

180 
	mvci
;

181 } 
ßp_addr
 
	m__ATM_API_ALIGN
;

186 
	#ATM_ESA_LEN
 20

	)

187 
	#ATM_E164_LEN
 12

	)

189 
	#ATM_AFI_DCC
 0x39

	)

190 
	#ATM_AFI_ICD
 0x47

	)

191 
	#ATM_AFI_E164
 0x45

	)

192 
	#ATM_AFI_LOCAL
 0x49

	)

194 
	#ATM_AFI_DCC_GROUP
 0xBD

	)

195 
	#ATM_AFI_ICD_GROUP
 0xC5

	)

196 
	#ATM_AFI_E164_GROUP
 0xC3

	)

197 
	#ATM_AFI_LOCAL_GROUP
 0xC7

	)

199 
	#ATM_LIJ_NONE
 0

	)

200 
	#ATM_LIJ
 1

	)

201 
	#ATM_LIJ_RPJ
 2

	)

202 
	#ATM_LIJ_NJ
 3

	)

205 
	ssockaddr_©msvc
 {

206 
	mßs_Ámûy
;

208 
	m¥v
[
ATM_ESA_LEN
];

209 
	mpub
[
ATM_E164_LEN
+1];

211 
	mlij_ty≥
;

212 
__u32
 
	mlij_id
;

213 } 
ßs_addr
 
	m__ATM_API_ALIGN
;

217 
__ölöe__
 
	$©msvc_addr_ö_u£
(
sockaddr_©msvc
 
addr
)

219  *
addr
.
ßs_addr
.
¥v
 || *addr.ßs_addr.
pub
;

220 
	}
}

223 
__ölöe__
 
	$©mpvc_addr_ö_u£
(
sockaddr_©mpvc
 
addr
)

225  
addr
.
ßp_addr
.
ôf
 ||áddr.ßp_addr.
vpi
 ||áddr.ßp_addr.
vci
;

226 
	}
}

233 
	s©mif_sioc
 {

234 
	mnumbî
;

235 
	mÀngth
;

236 *
	m¨g
;

240 
	t©m_backíd_t
;

	@include/linux/atmapi.h

6 #i‚de‡
_LINUX_ATMAPI_H


7 
	#_LINUX_ATMAPI_H


	)

9 #i‡
deföed
(
__•¨c__
Ë|| deföed(
__ü64__
)

12 
	#__ATM_API_ALIGN
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

14 
	#__ATM_API_ALIGN


	)

27 °ru˘ { 
	m_
[8]; } 
	t__ATM_API_ALIGN
 
	t©m_k±r_t
;

	@include/linux/atmioc.h

12 #i‚de‡
_LINUX_ATMIOC_H


13 
	#_LINUX_ATMIOC_H


	)

15 
	~<asm/io˘l.h
>

18 
	#ATMIOC_PHYCOM
 0x00

	)

19 
	#ATMIOC_PHYCOM_END
 0x0f

	)

20 
	#ATMIOC_PHYTYP
 0x10

	)

21 
	#ATMIOC_PHYTYP_END
 0x2f

	)

22 
	#ATMIOC_PHYPRV
 0x30

	)

23 
	#ATMIOC_PHYPRV_END
 0x4f

	)

24 
	#ATMIOC_SARCOM
 0x50

	)

25 
	#ATMIOC_SARCOM_END
 0x50

	)

26 
	#ATMIOC_SARPRV
 0x60

	)

27 
	#ATMIOC_SARPRV_END
 0x7f

	)

28 
	#ATMIOC_ITF
 0x80

	)

29 
	#ATMIOC_ITF_END
 0x8f

	)

30 
	#ATMIOC_BACKEND
 0x90

	)

31 
	#ATMIOC_BACKEND_END
 0xaf

	)

33 
	#ATMIOC_AREQUIPA
 0xc0

	)

34 
	#ATMIOC_LANE
 0xd0

	)

35 
	#ATMIOC_MPOA
 0xd8

	)

36 
	#ATMIOC_CLIP
 0xe0

	)

37 
	#ATMIOC_CLIP_END
 0xef

	)

38 
	#ATMIOC_SPECIAL
 0xf0

	)

39 
	#ATMIOC_SPECIAL_END
 0xff

	)

	@include/linux/atmsap.h

6 #i‚de‡
_LINUX_ATMSAP_H


7 
	#_LINUX_ATMSAP_H


	)

9 
	~<löux/©m≠i.h
>

22 
	#ATM_L2_NONE
 0

	)

23 
	#ATM_L2_ISO1745
 0x01

	)

24 
	#ATM_L2_Q291
 0x02

	)

25 
	#ATM_L2_X25_LL
 0x06

	)

26 
	#ATM_L2_X25_ML
 0x07

	)

27 
	#ATM_L2_LAPB
 0x08

	)

28 
	#ATM_L2_HDLC_ARM
 0x09

	)

29 
	#ATM_L2_HDLC_NRM
 0x0®

	)

30 
	#ATM_L2_HDLC_ABM
 0x0b

	)

31 
	#ATM_L2_ISO8802
 0x0¯

	)

32 
	#ATM_L2_X75
 0x0d

	)

33 
	#ATM_L2_Q922
 0x0ê

	)

34 
	#ATM_L2_USER
 0x10

	)

35 
	#ATM_L2_ISO7776
 0x11

	)

44 
	#ATM_L3_NONE
 0

	)

45 
	#ATM_L3_X25
 0x06

	)

46 
	#ATM_L3_ISO8208
 0x07

	)

47 
	#ATM_L3_X223
 0x08

	)

48 
	#ATM_L3_ISO8473
 0x09

	)

49 
	#ATM_L3_T70
 0x0®

	)

50 
	#ATM_L3_TR9577
 0x0b

	)

51 
	#ATM_L3_H310
 0x0¯

	)

52 
	#ATM_L3_H321
 0x0d

	)

53 
	#ATM_L3_USER
 0x10

	)

62 
	#ATM_HL_NONE
 0

	)

63 
	#ATM_HL_ISO
 0x01

	)

64 
	#ATM_HL_USER
 0x02

	)

65 
	#ATM_HL_HLP
 0x03

	)

66 
	#ATM_HL_VENDOR
 0x04

	)

75 
	#ATM_IMD_NONE
 0

	)

76 
	#ATM_IMD_NORMAL
 1

	)

77 
	#ATM_IMD_EXTENDED
 2

	)

84 
	#ATM_TT_NONE
 0

	)

85 
	#ATM_TT_RX
 1

	)

86 
	#ATM_TT_TX
 2

	)

87 
	#ATM_TT_RXTX
 3

	)

89 
	#ATM_MC_NONE
 0

	)

90 
	#ATM_MC_TS
 1

	)

91 
	#ATM_MC_TS_FEC
 2

	)

92 
	#ATM_MC_PS
 3

	)

93 
	#ATM_MC_PS_FEC
 4

	)

94 
	#ATM_MC_H221
 5

	)

100 
	#ATM_MAX_HLI
 8

	)

103 
	s©m_bŒi
 {

104 
	ml2_¥Ÿo
;

107 
	mmode
;

109 
	mwödow
;

110 } 
	môu
;

111 
	mu£r
;

112 } 
	ml2
;

113 
	ml3_¥Ÿo
;

116 
	mmode
;

118 
	mdef_size
;

120 
	mwödow
;

121 } 
	môu
;

122 
	mu£r
;

124 
	mãrm_ty≥
;

125 
	mfw_mpx_ˇp
;

127 
	mbw_mpx_ˇp
;

129 } 
	mh310
;

131 
	mùi
;

132 
	m¢≠
[5];

134 } 
	må9577
;

135 } 
	ml3
;

136 } 
	g__ATM_API_ALIGN
;

139 
	s©m_bhli
 {

140 
	mhl_ty≥
;

141 
	mhl_Àngth
;

143 
	mhl_öfo
[
ATM_MAX_HLI
];

147 
	#ATM_MAX_BLLI
 3

	)

150 
	s©m_ßp
 {

151 
©m_bhli
 
	mbhli
;

152 
©m_bŒi
 
	mbŒi
[
ATM_MAX_BLLI
] 
	m__ATM_API_ALIGN
;

157 
__ölöe__
 
	$bŒi_ö_u£
(
©m_bŒi
 
bŒi
)

159  
bŒi
.
l2_¥Ÿo
 || bŒi.
l3_¥Ÿo
;

160 
	}
}

	@include/linux/bpf.h

7 #i‚de‡
__LINUX_BPF_H__


8 
	#__LINUX_BPF_H__


	)

10 
	~<löux/ty≥s.h
>

11 
	~<löux/bpf_comm⁄.h
>

16 
	#BPF_ALU64
 0x07

	)

19 
	#BPF_DW
 0x18

	)

20 
	#BPF_XADD
 0xc0

	)

23 
	#BPF_MOV
 0xb0

	)

24 
	#BPF_ARSH
 0xc0

	)

27 
	#BPF_END
 0xd0

	)

28 
	#BPF_TO_LE
 0x00

	)

29 
	#BPF_TO_BE
 0x08

	)

30 
	#BPF_FROM_LE
 
BPF_TO_LE


	)

31 
	#BPF_FROM_BE
 
BPF_TO_BE


	)

33 
	#BPF_JNE
 0x50

	)

34 
	#BPF_JSGT
 0x60

	)

35 
	#BPF_JSGE
 0x70

	)

36 
	#BPF_CALL
 0x80

	)

37 
	#BPF_EXIT
 0x90

	)

41 
	mBPF_REG_0
 = 0,

42 
	mBPF_REG_1
,

43 
	mBPF_REG_2
,

44 
	mBPF_REG_3
,

45 
	mBPF_REG_4
,

46 
	mBPF_REG_5
,

47 
	mBPF_REG_6
,

48 
	mBPF_REG_7
,

49 
	mBPF_REG_8
,

50 
	mBPF_REG_9
,

51 
	mBPF_REG_10
,

52 
	m__MAX_BPF_REG
,

56 
	#MAX_BPF_REG
 
__MAX_BPF_REG


	)

58 
	sbpf_ö¢
 {

59 
__u8
 
	mcode
;

60 
__u8
 
	md°_ªg
:4;

61 
__u8
 
	m§c_ªg
:4;

62 
__s16
 
	moff
;

63 
__s32
 
	mimm
;

67 
	ebpf_cmd
 {

73 
	mBPF_MAP_CREATE
,

81 
	mBPF_MAP_LOOKUP_ELEM
,

88 
	mBPF_MAP_UPDATE_ELEM
,

95 
	mBPF_MAP_DELETE_ELEM
,

102 
	mBPF_MAP_GET_NEXT_KEY
,

109 
	mBPF_PROG_LOAD
,

112 
	ebpf_m≠_ty≥
 {

113 
	mBPF_MAP_TYPE_UNSPEC
,

114 
	mBPF_MAP_TYPE_HASH
,

115 
	mBPF_MAP_TYPE_ARRAY
,

116 
	mBPF_MAP_TYPE_PROG_ARRAY
,

117 
	mBPF_MAP_TYPE_PERF_EVENT_ARRAY
,

120 
	ebpf_¥og_ty≥
 {

121 
	mBPF_PROG_TYPE_UNSPEC
,

122 
	mBPF_PROG_TYPE_SOCKET_FILTER
,

123 
	mBPF_PROG_TYPE_KPROBE
,

124 
	mBPF_PROG_TYPE_SCHED_CLS
,

125 
	mBPF_PROG_TYPE_SCHED_ACT
,

128 
	#BPF_PSEUDO_MAP_FD
 1

	)

131 
	#BPF_ANY
 0

	)

132 
	#BPF_NOEXIST
 1

	)

133 
	#BPF_EXIST
 2

	)

135 
	ubpf_©å
 {

137 
__u32
 
	mm≠_ty≥
;

138 
__u32
 
	mkey_size
;

139 
__u32
 
	mvÆue_size
;

140 
__u32
 
	mmax_íåõs
;

144 
__u32
 
	mm≠_fd
;

145 
__Æig√d_u64
 
	mkey
;

147 
__Æig√d_u64
 
	mvÆue
;

148 
__Æig√d_u64
 
	m√xt_key
;

150 
__u64
 
	mÊags
;

154 
__u32
 
	m¥og_ty≥
;

155 
__u32
 
	mö¢_˙t
;

156 
__Æig√d_u64
 
	mö¢s
;

157 
__Æig√d_u64
 
	mli˚n£
;

158 
__u32
 
	mlog_Àvñ
;

159 
__u32
 
	mlog_size
;

160 
__Æig√d_u64
 
	mlog_buf
;

161 
__u32
 
	mkîn_vîsi⁄
;

163 } 
__©åibuã__
((
Æig√d
(8)));

168 
	ebpf_func_id
 {

169 
	mBPF_FUNC_un•ec
,

170 
	mBPF_FUNC_m≠_lookup_ñem
,

171 
	mBPF_FUNC_m≠_upd©e_ñem
,

172 
	mBPF_FUNC_m≠_dñëe_ñem
,

173 
	mBPF_FUNC_¥obe_ªad
,

174 
	mBPF_FUNC_ktime_gë_ns
,

175 
	mBPF_FUNC_åa˚_¥ötk
,

176 
	mBPF_FUNC_gë_¥™dom_u32
,

177 
	mBPF_FUNC_gë_smp_¥o˚ss‹_id
,

189 
	mBPF_FUNC_skb_°‹e_byãs
,

201 
	mBPF_FUNC_l3_csum_ª∂a˚
,

214 
	mBPF_FUNC_l4_csum_ª∂a˚
,

223 
	mBPF_FUNC_èû_ˇŒ
,

233 
	mBPF_FUNC_˛⁄e_ªdúe˘
,

239 
	mBPF_FUNC_gë_cuºít_pid_tgid
,

245 
	mBPF_FUNC_gë_cuºít_uid_gid
,

252 
	mBPF_FUNC_gë_cuºít_comm
,

259 
	mBPF_FUNC_gë_cgroup_˛assid
,

260 
	mBPF_FUNC_skb_vœn_push
,

261 
	mBPF_FUNC_skb_vœn_p›
,

272 
	mBPF_FUNC_skb_gë_tu¬ñ_key
,

273 
	mBPF_FUNC_skb_£t_tu¬ñ_key
,

274 
	mBPF_FUNC_≥rf_evít_ªad
,

275 
	m__BPF_FUNC_MAX_ID
,

281 
	s__sk_buff
 {

282 
__u32
 
	mÀn
;

283 
__u32
 
	mpkt_ty≥
;

284 
__u32
 
	mm¨k
;

285 
__u32
 
	mqueue_m≠pög
;

286 
__u32
 
	m¥Ÿocﬁ
;

287 
__u32
 
	mvœn_¥e£¡
;

288 
__u32
 
	mvœn_tci
;

289 
__u32
 
	mvœn_¥Ÿo
;

290 
__u32
 
	m¥i‹ôy
;

291 
__u32
 
	mögªss_ifödex
;

292 
__u32
 
	mifödex
;

293 
__u32
 
	mtc_ödex
;

294 
__u32
 
	mcb
[5];

295 
__u32
 
	mhash
;

298 
	sbpf_tu¬ñ_key
 {

299 
__u32
 
	mtu¬ñ_id
;

300 
__u32
 
	mªmŸe_ùv4
;

	@include/linux/bpf_common.h

1 #i‚de‡
__LINUX_BPF_COMMON_H__


2 
	#__LINUX_BPF_COMMON_H__


	)

5 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

6 
	#BPF_LD
 0x00

	)

7 
	#BPF_LDX
 0x01

	)

8 
	#BPF_ST
 0x02

	)

9 
	#BPF_STX
 0x03

	)

10 
	#BPF_ALU
 0x04

	)

11 
	#BPF_JMP
 0x05

	)

12 
	#BPF_RET
 0x06

	)

13 
	#BPF_MISC
 0x07

	)

16 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

17 
	#BPF_W
 0x00

	)

18 
	#BPF_H
 0x08

	)

19 
	#BPF_B
 0x10

	)

20 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

21 
	#BPF_IMM
 0x00

	)

22 
	#BPF_ABS
 0x20

	)

23 
	#BPF_IND
 0x40

	)

24 
	#BPF_MEM
 0x60

	)

25 
	#BPF_LEN
 0x80

	)

26 
	#BPF_MSH
 0xa0

	)

29 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

30 
	#BPF_ADD
 0x00

	)

31 
	#BPF_SUB
 0x10

	)

32 
	#BPF_MUL
 0x20

	)

33 
	#BPF_DIV
 0x30

	)

34 
	#BPF_OR
 0x40

	)

35 
	#BPF_AND
 0x50

	)

36 
	#BPF_LSH
 0x60

	)

37 
	#BPF_RSH
 0x70

	)

38 
	#BPF_NEG
 0x80

	)

39 
	#BPF_MOD
 0x90

	)

40 
	#BPF_XOR
 0xa0

	)

42 
	#BPF_JA
 0x00

	)

43 
	#BPF_JEQ
 0x10

	)

44 
	#BPF_JGT
 0x20

	)

45 
	#BPF_JGE
 0x30

	)

46 
	#BPF_JSET
 0x40

	)

47 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

48 
	#BPF_K
 0x00

	)

49 
	#BPF_X
 0x08

	)

51 #i‚de‡
BPF_MAXINSNS


52 
	#BPF_MAXINSNS
 4096

	)

	@include/linux/can.h

45 #i‚de‡
_CAN_H


46 
	#_CAN_H


	)

48 
	~<löux/ty≥s.h
>

49 
	~<löux/sockë.h
>

54 
	#CAN_EFF_FLAG
 0x80000000U

	)

55 
	#CAN_RTR_FLAG
 0x40000000U

	)

56 
	#CAN_ERR_FLAG
 0x20000000U

	)

59 
	#CAN_SFF_MASK
 0x000007FFU

	)

60 
	#CAN_EFF_MASK
 0x1FFFFFFFU

	)

61 
	#CAN_ERR_MASK
 0x1FFFFFFFU

	)

71 
__u32
 
	tˇnid_t
;

73 
	#CAN_SFF_ID_BITS
 11

	)

74 
	#CAN_EFF_ID_BITS
 29

	)

82 
__u32
 
	tˇn_îr_mask_t
;

85 
	#CAN_MAX_DLC
 8

	)

86 
	#CAN_MAX_DLEN
 8

	)

89 
	#CANFD_MAX_DLC
 15

	)

90 
	#CANFD_MAX_DLEN
 64

	)

103 
	sˇn_‰ame
 {

104 
ˇnid_t
 
	mˇn_id
;

105 
__u8
 
	mˇn_dlc
;

106 
__u8
 
	m__∑d
;

107 
__u8
 
	m__ªs0
;

108 
__u8
 
	m__ªs1
;

109 
__u8
 
	md©a
[
CAN_MAX_DLEN
] 
__©åibuã__
((
Æig√d
(8)));

128 
	#CANFD_BRS
 0x01

	)

129 
	#CANFD_ESI
 0x02

	)

140 
	sˇnfd_‰ame
 {

141 
ˇnid_t
 
	mˇn_id
;

142 
__u8
 
	mÀn
;

143 
__u8
 
	mÊags
;

144 
__u8
 
	m__ªs0
;

145 
__u8
 
	m__ªs1
;

146 
__u8
 
	md©a
[
CANFD_MAX_DLEN
] 
__©åibuã__
((
Æig√d
(8)));

149 
	#CAN_MTU
 ((
ˇn_‰ame
))

	)

150 
	#CANFD_MTU
 ((
ˇnfd_‰ame
))

	)

153 
	#CAN_RAW
 1

	)

154 
	#CAN_BCM
 2

	)

155 
	#CAN_TP16
 3

	)

156 
	#CAN_TP20
 4

	)

157 
	#CAN_MCNET
 5

	)

158 
	#CAN_ISOTP
 6

	)

159 
	#CAN_NPROTO
 7

	)

161 
	#SOL_CAN_BASE
 100

	)

169 
	ssockaddr_ˇn
 {

170 
__kî√l_ß_Ámûy_t
 
	mˇn_Ámûy
;

171 
	mˇn_ifödex
;

174 °ru˘ { 
ˇnid_t
 
	mrx_id
, 
	mtx_id
; } 
	mç
;

177 } 
	mˇn_addr
;

193 
	sˇn_fûãr
 {

194 
ˇnid_t
 
	mˇn_id
;

195 
ˇnid_t
 
	mˇn_mask
;

198 
	#CAN_INV_FILTER
 0x20000000U

	)

	@include/linux/can/netlink.h

18 #i‚de‡
_CAN_NETLINK_H


19 
	#_CAN_NETLINK_H


	)

21 
	~<löux/ty≥s.h
>

30 
	sˇn_bôtimög
 {

31 
__u32
 
	mbôøã
;

32 
__u32
 
	mßm∂e_poöt
;

33 
__u32
 
	mtq
;

34 
__u32
 
	m¥›_£g
;

35 
__u32
 
	mpha£_£g1
;

36 
__u32
 
	mpha£_£g2
;

37 
__u32
 
	msjw
;

38 
__u32
 
	mbΩ
;

46 
	sˇn_bôtimög_c⁄°
 {

47 
	m«me
[16];

48 
__u32
 
	mt£g1_mö
;

49 
__u32
 
	mt£g1_max
;

50 
__u32
 
	mt£g2_mö
;

51 
__u32
 
	mt£g2_max
;

52 
__u32
 
	msjw_max
;

53 
__u32
 
	mbΩ_mö
;

54 
__u32
 
	mbΩ_max
;

55 
__u32
 
	mbΩ_öc
;

61 
	sˇn_˛ock
 {

62 
__u32
 
	m‰eq
;

68 
	eˇn_°©e
 {

69 
	mCAN_STATE_ERROR_ACTIVE
 = 0,

70 
	mCAN_STATE_ERROR_WARNING
,

71 
	mCAN_STATE_ERROR_PASSIVE
,

72 
	mCAN_STATE_BUS_OFF
,

73 
	mCAN_STATE_STOPPED
,

74 
	mCAN_STATE_SLEEPING
,

75 
	mCAN_STATE_MAX


81 
	sˇn_bîr_cou¡î
 {

82 
__u16
 
	mtxîr
;

83 
__u16
 
	mrxîr
;

89 
	sˇn_˘æmode
 {

90 
__u32
 
	mmask
;

91 
__u32
 
	mÊags
;

94 
	#CAN_CTRLMODE_LOOPBACK
 0x01

	)

95 
	#CAN_CTRLMODE_LISTENONLY
 0x02

	)

96 
	#CAN_CTRLMODE_3_SAMPLES
 0x04

	)

97 
	#CAN_CTRLMODE_ONE_SHOT
 0x08

	)

98 
	#CAN_CTRLMODE_BERR_REPORTING
 0x10

	)

99 
	#CAN_CTRLMODE_FD
 0x20

	)

100 
	#CAN_CTRLMODE_PRESUME_ACK
 0x40

	)

101 
	#CAN_CTRLMODE_FD_NON_ISO
 0x80

	)

106 
	sˇn_devi˚_°©s
 {

107 
__u32
 
	mbus_îr‹
;

108 
__u32
 
	mîr‹_w¨nög
;

109 
__u32
 
	mîr‹_∑ssive
;

110 
__u32
 
	mbus_off
;

111 
__u32
 
	m¨bôøti⁄_lo°
;

112 
__u32
 
	mª°¨ts
;

119 
	mIFLA_CAN_UNSPEC
,

120 
	mIFLA_CAN_BITTIMING
,

121 
	mIFLA_CAN_BITTIMING_CONST
,

122 
	mIFLA_CAN_CLOCK
,

123 
	mIFLA_CAN_STATE
,

124 
	mIFLA_CAN_CTRLMODE
,

125 
	mIFLA_CAN_RESTART_MS
,

126 
	mIFLA_CAN_RESTART
,

127 
	mIFLA_CAN_BERR_COUNTER
,

128 
	mIFLA_CAN_DATA_BITTIMING
,

129 
	mIFLA_CAN_DATA_BITTIMING_CONST
,

130 
	m__IFLA_CAN_MAX


133 
	#IFLA_CAN_MAX
 (
__IFLA_CAN_MAX
 - 1)

	)

	@include/linux/fib_rules.h

1 #i‚de‡
__LINUX_FIB_RULES_H


2 
	#__LINUX_FIB_RULES_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/π√éök.h
>

8 
	#FIB_RULE_PERMANENT
 0x00000001

	)

9 
	#FIB_RULE_INVERT
 0x00000002

	)

10 
	#FIB_RULE_UNRESOLVED
 0x00000004

	)

11 
	#FIB_RULE_IIF_DETACHED
 0x00000008

	)

12 
	#FIB_RULE_DEV_DETACHED
 
FIB_RULE_IIF_DETACHED


	)

13 
	#FIB_RULE_OIF_DETACHED
 0x00000010

	)

16 
	#FIB_RULE_FIND_SADDR
 0x00010000

	)

18 
	sfib_ruÀ_hdr
 {

19 
__u8
 
	mÁmûy
;

20 
__u8
 
	md°_Àn
;

21 
__u8
 
	m§c_Àn
;

22 
__u8
 
	mtos
;

24 
__u8
 
	mèbÀ
;

25 
__u8
 
	mªs1
;

26 
__u8
 
	mªs2
;

27 
__u8
 
	ma˘i⁄
;

29 
__u32
 
	mÊags
;

33 
	mFRA_UNSPEC
,

34 
	mFRA_DST
,

35 
	mFRA_SRC
,

36 
	mFRA_IIFNAME
,

37 
	#FRA_IFNAME
 
FRA_IIFNAME


	)

38 
	mFRA_GOTO
,

39 
	mFRA_UNUSED2
,

40 
	mFRA_PRIORITY
,

41 
	mFRA_UNUSED3
,

42 
	mFRA_UNUSED4
,

43 
	mFRA_UNUSED5
,

44 
	mFRA_FWMARK
,

45 
	mFRA_FLOW
,

46 
	mFRA_TUN_ID
,

47 
	mFRA_SUPPRESS_IFGROUP
,

48 
	mFRA_SUPPRESS_PREFIXLEN
,

49 
	mFRA_TABLE
,

50 
	mFRA_FWMASK
,

51 
	mFRA_OIFNAME
,

52 
	m__FRA_MAX


55 
	#FRA_MAX
 (
__FRA_MAX
 - 1)

	)

58 
	mFR_ACT_UNSPEC
,

59 
	mFR_ACT_TO_TBL
,

60 
	mFR_ACT_GOTO
,

61 
	mFR_ACT_NOP
,

62 
	mFR_ACT_RES3
,

63 
	mFR_ACT_RES4
,

64 
	mFR_ACT_BLACKHOLE
,

65 
	mFR_ACT_UNREACHABLE
,

66 
	mFR_ACT_PROHIBIT
,

67 
	m__FR_ACT_MAX
,

70 
	#FR_ACT_MAX
 (
__FR_ACT_MAX
 - 1)

	)

	@include/linux/filter.h

5 #i‚de‡
__LINUX_FILTER_H__


6 
	#__LINUX_FILTER_H__


	)

9 
	~<löux/ty≥s.h
>

10 
	~<löux/bpf_comm⁄.h
>

15 
	#BPF_MAJOR_VERSION
 1

	)

16 
	#BPF_MINOR_VERSION
 1

	)

23 
	ssock_fûãr
 {

24 
__u16
 
	mcode
;

25 
__u8
 
	mjt
;

26 
__u8
 
	mjf
;

27 
__u32
 
	mk
;

30 
	ssock_Ârog
 {

31 
	mÀn
;

32 
sock_fûãr
 *
	mfûãr
;

36 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

37 
	#BPF_A
 0x10

	)

40 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

41 
	#BPF_TAX
 0x00

	)

42 
	#BPF_TXA
 0x80

	)

47 #i‚de‡
BPF_STMT


48 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

50 #i‚de‡
BPF_JUMP


51 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

57 
	#BPF_MEMWORDS
 16

	)

64 
	#SKF_AD_OFF
 (-0x1000)

	)

65 
	#SKF_AD_PROTOCOL
 0

	)

66 
	#SKF_AD_PKTTYPE
 4

	)

67 
	#SKF_AD_IFINDEX
 8

	)

68 
	#SKF_AD_NLATTR
 12

	)

69 
	#SKF_AD_NLATTR_NEST
 16

	)

70 
	#SKF_AD_MARK
 20

	)

71 
	#SKF_AD_QUEUE
 24

	)

72 
	#SKF_AD_HATYPE
 28

	)

73 
	#SKF_AD_RXHASH
 32

	)

74 
	#SKF_AD_CPU
 36

	)

75 
	#SKF_AD_ALU_XOR_X
 40

	)

76 
	#SKF_AD_VLAN_TAG
 44

	)

77 
	#SKF_AD_VLAN_TAG_PRESENT
 48

	)

78 
	#SKF_AD_PAY_OFFSET
 52

	)

79 
	#SKF_AD_RANDOM
 56

	)

80 
	#SKF_AD_VLAN_TPID
 60

	)

81 
	#SKF_AD_MAX
 64

	)

83 
	#SKF_NET_OFF
 (-0x100000)

	)

84 
	#SKF_LL_OFF
 (-0x200000)

	)

86 
	#BPF_NET_OFF
 
SKF_NET_OFF


	)

87 
	#BPF_LL_OFF
 
SKF_LL_OFF


	)

	@include/linux/fou.h

3 #i‚de‡
_LINUX_FOU_H


4 
	#_LINUX_FOU_H


	)

8 
	#FOU_GENL_NAME
 "fou"

	)

9 
	#FOU_GENL_VERSION
 0x1

	)

12 
	mFOU_ATTR_UNSPEC
,

13 
	mFOU_ATTR_PORT
,

14 
	mFOU_ATTR_AF
,

15 
	mFOU_ATTR_IPPROTO
,

16 
	mFOU_ATTR_TYPE
,

17 
	mFOU_ATTR_REMCSUM_NOPARTIAL
,

19 
	m__FOU_ATTR_MAX
,

22 
	#FOU_ATTR_MAX
 (
__FOU_ATTR_MAX
 - 1)

	)

25 
	mFOU_CMD_UNSPEC
,

26 
	mFOU_CMD_ADD
,

27 
	mFOU_CMD_DEL
,

28 
	mFOU_CMD_GET
,

30 
	m__FOU_CMD_MAX
,

34 
	mFOU_ENCAP_UNSPEC
,

35 
	mFOU_ENCAP_DIRECT
,

36 
	mFOU_ENCAP_GUE
,

39 
	#FOU_CMD_MAX
 (
__FOU_CMD_MAX
 - 1)

	)

	@include/linux/gen_stats.h

1 #i‚de‡
__LINUX_GEN_STATS_H


2 
	#__LINUX_GEN_STATS_H


	)

4 
	~<löux/ty≥s.h
>

7 
	mTCA_STATS_UNSPEC
,

8 
	mTCA_STATS_BASIC
,

9 
	mTCA_STATS_RATE_EST
,

10 
	mTCA_STATS_QUEUE
,

11 
	mTCA_STATS_APP
,

12 
	mTCA_STATS_RATE_EST64
,

13 
	m__TCA_STATS_MAX
,

15 
	#TCA_STATS_MAX
 (
__TCA_STATS_MAX
 - 1)

	)

22 
	sg√t_°©s_basic
 {

23 
__u64
 
	mbyãs
;

24 
__u32
 
	m∑ckës
;

26 
	sg√t_°©s_basic_∑cked
 {

27 
__u64
 
	mbyãs
;

28 
__u32
 
	m∑ckës
;

29 } 
__©åibuã__
 ((
∑cked
));

36 
	sg√t_°©s_øã_e°
 {

37 
__u32
 
	mbps
;

38 
__u32
 
	mµs
;

46 
	sg√t_°©s_øã_e°64
 {

47 
__u64
 
	mbps
;

48 
__u64
 
	mµs
;

59 
	sg√t_°©s_queue
 {

60 
__u32
 
	mqÀn
;

61 
__u32
 
	mbacklog
;

62 
__u32
 
	mdr›s
;

63 
__u32
 
	mªqueues
;

64 
__u32
 
	movîlimôs
;

72 
	sg√t_e°im©‹
 {

73 sig√d 
	möãrvÆ
;

74 
	mewma_log
;

	@include/linux/genetlink.h

1 #i‚de‡
__LINUX_GENERIC_NETLINK_H


2 
	#__LINUX_GENERIC_NETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	#GENL_NAMSIZ
 16

	)

9 
	#GENL_MIN_ID
 
NLMSG_MIN_TYPE


	)

10 
	#GENL_MAX_ID
 1023

	)

12 
	sgílmsghdr
 {

13 
__u8
 
	mcmd
;

14 
__u8
 
	mvîsi⁄
;

15 
__u16
 
	mª£rved
;

18 
	#GENL_HDRLEN
 
	`NLMSG_ALIGN
((
gílmsghdr
))

	)

20 
	#GENL_ADMIN_PERM
 0x01

	)

21 
	#GENL_CMD_CAP_DO
 0x02

	)

22 
	#GENL_CMD_CAP_DUMP
 0x04

	)

23 
	#GENL_CMD_CAP_HASPOL
 0x08

	)

28 
	#GENL_ID_GENERATE
 0

	)

29 
	#GENL_ID_CTRL
 
NLMSG_MIN_TYPE


	)

30 
	#GENL_ID_VFS_DQUOT
 (
NLMSG_MIN_TYPE
 + 1)

	)

31 
	#GENL_ID_PMCRAID
 (
NLMSG_MIN_TYPE
 + 2)

	)

38 
	mCTRL_CMD_UNSPEC
,

39 
	mCTRL_CMD_NEWFAMILY
,

40 
	mCTRL_CMD_DELFAMILY
,

41 
	mCTRL_CMD_GETFAMILY
,

42 
	mCTRL_CMD_NEWOPS
,

43 
	mCTRL_CMD_DELOPS
,

44 
	mCTRL_CMD_GETOPS
,

45 
	mCTRL_CMD_NEWMCAST_GRP
,

46 
	mCTRL_CMD_DELMCAST_GRP
,

47 
	mCTRL_CMD_GETMCAST_GRP
,

48 
	m__CTRL_CMD_MAX
,

51 
	#CTRL_CMD_MAX
 (
__CTRL_CMD_MAX
 - 1)

	)

54 
	mCTRL_ATTR_UNSPEC
,

55 
	mCTRL_ATTR_FAMILY_ID
,

56 
	mCTRL_ATTR_FAMILY_NAME
,

57 
	mCTRL_ATTR_VERSION
,

58 
	mCTRL_ATTR_HDRSIZE
,

59 
	mCTRL_ATTR_MAXATTR
,

60 
	mCTRL_ATTR_OPS
,

61 
	mCTRL_ATTR_MCAST_GROUPS
,

62 
	m__CTRL_ATTR_MAX
,

65 
	#CTRL_ATTR_MAX
 (
__CTRL_ATTR_MAX
 - 1)

	)

68 
	mCTRL_ATTR_OP_UNSPEC
,

69 
	mCTRL_ATTR_OP_ID
,

70 
	mCTRL_ATTR_OP_FLAGS
,

71 
	m__CTRL_ATTR_OP_MAX
,

74 
	#CTRL_ATTR_OP_MAX
 (
__CTRL_ATTR_OP_MAX
 - 1)

	)

77 
	mCTRL_ATTR_MCAST_GRP_UNSPEC
,

78 
	mCTRL_ATTR_MCAST_GRP_NAME
,

79 
	mCTRL_ATTR_MCAST_GRP_ID
,

80 
	m__CTRL_ATTR_MCAST_GRP_MAX
,

83 
	#CTRL_ATTR_MCAST_GRP_MAX
 (
__CTRL_ATTR_MCAST_GRP_MAX
 - 1)

	)

	@include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

37 #i‚de‡
__ASSEMBLY__


40 
	m˛ock_øã
;

41 
	m˛ock_ty≥
;

42 
	mlo›back
;

43 } 
	tsync_£rül_£âögs
;

46 
	m˛ock_øã
;

47 
	m˛ock_ty≥
;

48 
	mlo›back
;

49 
	m¶Ÿ_m≠
;

50 } 
	tã1_£âögs
;

53 
	mícodög
;

54 
	m∑rôy
;

55 } 
	tøw_hdlc_¥Ÿo
;

58 
	mt391
;

59 
	mt392
;

60 
	mn391
;

61 
	mn392
;

62 
	mn393
;

63 
	mlmi
;

64 
	md˚
;

65 } 
	t‰_¥Ÿo
;

68 
	mdlci
;

69 } 
	t‰_¥Ÿo_pvc
;

72 
	mdlci
;

73 
	mma°î
[
IFNAMSIZ
];

74 }
	t‰_¥Ÿo_pvc_öfo
;

77 
	möãrvÆ
;

78 
	mtimeout
;

79 } 
	tcisco_¥Ÿo
;

	@include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

70 
	e√t_devi˚_Êags
 {

71 
	mIFF_UP
 = 1<<0,

72 
	mIFF_BROADCAST
 = 1<<1,

73 
	mIFF_DEBUG
 = 1<<2,

74 
	mIFF_LOOPBACK
 = 1<<3,

75 
	mIFF_POINTOPOINT
 = 1<<4,

76 
	mIFF_NOTRAILERS
 = 1<<5,

77 
	mIFF_RUNNING
 = 1<<6,

78 
	mIFF_NOARP
 = 1<<7,

79 
	mIFF_PROMISC
 = 1<<8,

80 
	mIFF_ALLMULTI
 = 1<<9,

81 
	mIFF_MASTER
 = 1<<10,

82 
	mIFF_SLAVE
 = 1<<11,

83 
	mIFF_MULTICAST
 = 1<<12,

84 
	mIFF_PORTSEL
 = 1<<13,

85 
	mIFF_AUTOMEDIA
 = 1<<14,

86 
	mIFF_DYNAMIC
 = 1<<15,

87 
	mIFF_LOWER_UP
 = 1<<16,

88 
	mIFF_DORMANT
 = 1<<17,

89 
	mIFF_ECHO
 = 1<<18,

92 
	#IFF_UP
 
IFF_UP


	)

93 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

94 
	#IFF_DEBUG
 
IFF_DEBUG


	)

95 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

96 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

97 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

98 
	#IFF_RUNNING
 
IFF_RUNNING


	)

99 
	#IFF_NOARP
 
IFF_NOARP


	)

100 
	#IFF_PROMISC
 
IFF_PROMISC


	)

101 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

102 
	#IFF_MASTER
 
IFF_MASTER


	)

103 
	#IFF_SLAVE
 
IFF_SLAVE


	)

104 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

105 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

106 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

107 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

108 
	#IFF_LOWER_UP
 
IFF_LOWER_UP


	)

109 
	#IFF_DORMANT
 
IFF_DORMANT


	)

110 
	#IFF_ECHO
 
IFF_ECHO


	)

112 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

113 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

115 
	#IF_GET_IFACE
 0x0001

	)

116 
	#IF_GET_PROTO
 0x0002

	)

119 
	#IF_IFACE_V35
 0x1000

	)

120 
	#IF_IFACE_V24
 0x1001

	)

121 
	#IF_IFACE_X21
 0x1002

	)

122 
	#IF_IFACE_T1
 0x1003

	)

123 
	#IF_IFACE_E1
 0x1004

	)

124 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

125 
	#IF_IFACE_X21D
 0x1006

	)

128 
	#IF_PROTO_HDLC
 0x2000

	)

129 
	#IF_PROTO_PPP
 0x2001

	)

130 
	#IF_PROTO_CISCO
 0x2002

	)

131 
	#IF_PROTO_FR
 0x2003

	)

132 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

133 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

134 
	#IF_PROTO_X25
 0x2006

	)

135 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

136 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

137 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

138 
	#IF_PROTO_FR_PVC
 0x200A

	)

139 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

140 
	#IF_PROTO_RAW
 0x200C

	)

144 
	mIF_OPER_UNKNOWN
,

145 
	mIF_OPER_NOTPRESENT
,

146 
	mIF_OPER_DOWN
,

147 
	mIF_OPER_LOWERLAYERDOWN
,

148 
	mIF_OPER_TESTING
,

149 
	mIF_OPER_DORMANT
,

150 
	mIF_OPER_UP
,

155 
	mIF_LINK_MODE_DEFAULT
,

156 
	mIF_LINK_MODE_DORMANT
,

169 
	sifm≠
 {

170 
	mmem_°¨t
;

171 
	mmem_íd
;

172 
	mba£_addr
;

173 
	múq
;

174 
	mdma
;

175 
	mp‹t
;

179 
	sif_£âögs
 {

180 
	mty≥
;

181 
	msize
;

184 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

185 
cisco_¥Ÿo
 *
	mcisco
;

186 
‰_¥Ÿo
 *
	m‰
;

187 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

188 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

191 
sync_£rül_£âögs
 *
	msync
;

192 
ã1_£âögs
 *
	mã1
;

193 } 
	mifs_ifsu
;

203 
	si‰eq
 {

204 
	#IFHWADDRLEN
 6

	)

207 
	mi‰n_«me
[
IFNAMSIZ
];

208 } 
	mi‰_i‰n
;

211 
sockaddr
 
	mi‰u_addr
;

212 
sockaddr
 
	mi‰u_d°addr
;

213 
sockaddr
 
	mi‰u_brﬂdaddr
;

214 
sockaddr
 
	mi‰u_√tmask
;

215 
sockaddr
 
	mi‰u_hwaddr
;

216 
	mi‰u_Êags
;

217 
	mi‰u_ivÆue
;

218 
	mi‰u_mtu
;

219 
ifm≠
 
	mi‰u_m≠
;

220 
	mi‰u_¶ave
[
IFNAMSIZ
];

221 
	mi‰u_√w«me
[
IFNAMSIZ
];

222 * 
	mi‰u_d©a
;

223 
if_£âögs
 
	mi‰u_£âögs
;

224 } 
	mi‰_i‰u
;

227 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

228 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

229 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

230 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

231 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

232 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

233 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

234 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

235 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

236 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

237 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

238 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

239 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

240 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

241 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

242 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

243 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

252 
	sifc⁄f
 {

253 
	mifc_Àn
;

255 *
	mifcu_buf
;

256 
i‰eq
 *
	mifcu_ªq
;

257 } 
	mifc_ifcu
;

259 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

260 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

26 
	mIFA_UNSPEC
,

27 
	mIFA_ADDRESS
,

28 
	mIFA_LOCAL
,

29 
	mIFA_LABEL
,

30 
	mIFA_BROADCAST
,

31 
	mIFA_ANYCAST
,

32 
	mIFA_CACHEINFO
,

33 
	mIFA_MULTICAST
,

34 
	mIFA_FLAGS
,

35 
	m__IFA_MAX
,

38 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

41 
	#IFA_F_SECONDARY
 0x01

	)

42 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

44 
	#IFA_F_NODAD
 0x02

	)

45 
	#IFA_F_OPTIMISTIC
 0x04

	)

46 
	#IFA_F_DADFAILED
 0x08

	)

47 
	#IFA_F_HOMEADDRESS
 0x10

	)

48 
	#IFA_F_DEPRECATED
 0x20

	)

49 
	#IFA_F_TENTATIVE
 0x40

	)

50 
	#IFA_F_PERMANENT
 0x80

	)

51 
	#IFA_F_MANAGETEMPADDR
 0x100

	)

52 
	#IFA_F_NOPREFIXROUTE
 0x200

	)

53 
	#IFA_F_MCAUTOJOIN
 0x400

	)

54 
	#IFA_F_STABLE_PRIVACY
 0x800

	)

56 
	siÁ_ˇcheöfo
 {

57 
__u32
 
	miÁ_¥e„ªd
;

58 
__u32
 
	miÁ_vÆid
;

59 
__u32
 
	mc°amp
;

60 
__u32
 
	mt°amp
;

64 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

65 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@include/linux/if_addrlabel.h

10 #i‚de‡
__LINUX_IF_ADDRLABEL_H


11 
	#__LINUX_IF_ADDRLABEL_H


	)

13 
	~<löux/ty≥s.h
>

15 
	siÁddæblmsg
 {

16 
__u8
 
	miÁl_Ámûy
;

17 
__u8
 
	m__iÁl_ª£rved
;

18 
__u8
 
	miÁl_¥efixÀn
;

19 
__u8
 
	miÁl_Êags
;

20 
__u32
 
	miÁl_ödex
;

21 
__u32
 
	miÁl_£q
;

25 
	mIFAL_ADDRESS
 = 1,

26 
	mIFAL_LABEL
 = 2,

27 
	m__IFAL_MAX


30 
	#IFAL_MAX
 (
__IFAL_MAX
 - 1)

	)

	@include/linux/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

26 
	~<löux/√tdevi˚.h
>

29 
	#ARPHRD_NETROM
 0

	)

30 
	#ARPHRD_ETHER
 1

	)

31 
	#ARPHRD_EETHER
 2

	)

32 
	#ARPHRD_AX25
 3

	)

33 
	#ARPHRD_PRONET
 4

	)

34 
	#ARPHRD_CHAOS
 5

	)

35 
	#ARPHRD_IEEE802
 6

	)

36 
	#ARPHRD_ARCNET
 7

	)

37 
	#ARPHRD_APPLETLK
 8

	)

38 
	#ARPHRD_DLCI
 15

	)

39 
	#ARPHRD_ATM
 19

	)

40 
	#ARPHRD_METRICOM
 23

	)

41 
	#ARPHRD_IEEE1394
 24

	)

42 
	#ARPHRD_EUI64
 27

	)

43 
	#ARPHRD_INFINIBAND
 32

	)

46 
	#ARPHRD_SLIP
 256

	)

47 
	#ARPHRD_CSLIP
 257

	)

48 
	#ARPHRD_SLIP6
 258

	)

49 
	#ARPHRD_CSLIP6
 259

	)

50 
	#ARPHRD_RSRVD
 260

	)

51 
	#ARPHRD_ADAPT
 264

	)

52 
	#ARPHRD_ROSE
 270

	)

53 
	#ARPHRD_X25
 271

	)

54 
	#ARPHRD_HWX25
 272

	)

55 
	#ARPHRD_CAN
 280

	)

56 
	#ARPHRD_PPP
 512

	)

57 
	#ARPHRD_CISCO
 513

	)

58 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

59 
	#ARPHRD_LAPB
 516

	)

60 
	#ARPHRD_DDCMP
 517

	)

61 
	#ARPHRD_RAWHDLC
 518

	)

63 
	#ARPHRD_TUNNEL
 768

	)

64 
	#ARPHRD_TUNNEL6
 769

	)

65 
	#ARPHRD_FRAD
 770

	)

66 
	#ARPHRD_SKIP
 771

	)

67 
	#ARPHRD_LOOPBACK
 772

	)

68 
	#ARPHRD_LOCALTLK
 773

	)

69 
	#ARPHRD_FDDI
 774

	)

70 
	#ARPHRD_BIF
 775

	)

71 
	#ARPHRD_SIT
 776

	)

72 
	#ARPHRD_IPDDP
 777

	)

73 
	#ARPHRD_IPGRE
 778

	)

74 
	#ARPHRD_PIMREG
 779

	)

75 
	#ARPHRD_HIPPI
 780

	)

76 
	#ARPHRD_ASH
 781

	)

77 
	#ARPHRD_ECONET
 782

	)

78 
	#ARPHRD_IRDA
 783

	)

80 
	#ARPHRD_FCPP
 784

	)

81 
	#ARPHRD_FCAL
 785

	)

82 
	#ARPHRD_FCPL
 786

	)

83 
	#ARPHRD_FCFABRIC
 787

	)

85 
	#ARPHRD_IEEE802_TR
 800

	)

86 
	#ARPHRD_IEEE80211
 801

	)

87 
	#ARPHRD_IEEE80211_PRISM
 802

	)

88 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

89 
	#ARPHRD_IEEE802154
 804

	)

90 
	#ARPHRD_IEEE802154_MONITOR
 805

	)

92 
	#ARPHRD_PHONET
 820

	)

93 
	#ARPHRD_PHONET_PIPE
 821

	)

94 
	#ARPHRD_CAIF
 822

	)

95 
	#ARPHRD_IP6GRE
 823

	)

96 
	#ARPHRD_NETLINK
 824

	)

97 
	#ARPHRD_6LOWPAN
 825

	)

99 
	#ARPHRD_VOID
 0xFFFF

	)

100 
	#ARPHRD_NONE
 0xFFFE

	)

103 
	#ARPOP_REQUEST
 1

	)

104 
	#ARPOP_REPLY
 2

	)

105 
	#ARPOP_RREQUEST
 3

	)

106 
	#ARPOP_RREPLY
 4

	)

107 
	#ARPOP_InREQUEST
 8

	)

108 
	#ARPOP_InREPLY
 9

	)

109 
	#ARPOP_NAK
 10

	)

113 
	s¨¥eq
 {

114 
sockaddr
 
	m¨p_∑
;

115 
sockaddr
 
	m¨p_ha
;

116 
	m¨p_Êags
;

117 
sockaddr
 
	m¨p_√tmask
;

118 
	m¨p_dev
[16];

121 
	s¨¥eq_ﬁd
 {

122 
sockaddr
 
	m¨p_∑
;

123 
sockaddr
 
	m¨p_ha
;

124 
	m¨p_Êags
;

125 
sockaddr
 
	m¨p_√tmask
;

129 
	#ATF_COM
 0x02

	)

130 
	#ATF_PERM
 0x04

	)

131 
	#ATF_PUBL
 0x08

	)

132 
	#ATF_USETRAILERS
 0x10

	)

133 
	#ATF_NETMASK
 0x20

	)

135 
	#ATF_DONTPUB
 0x40

	)

141 
	s¨phdr
 {

142 
__be16
 
	m¨_hrd
;

143 
__be16
 
	m¨_¥o
;

144 
	m¨_h 
;

145 
	m¨_∂n
;

146 
__be16
 
	m¨_›
;

152 
	m¨_sha
[
ETH_ALEN
];

153 
	m¨_sù
[4];

154 
	m¨_tha
[
ETH_ALEN
];

155 
	m¨_tù
[4];

	@include/linux/if_bridge.h

13 #i‚de‡
_LINUX_IF_BRIDGE_H


14 
	#_LINUX_IF_BRIDGE_H


	)

16 
	~<löux/ty≥s.h
>

17 
	~<löux/if_ëhî.h
>

18 
	~<löux/ö6.h
>

20 
	#SYSFS_BRIDGE_ATTR
 "bridge"

	)

21 
	#SYSFS_BRIDGE_FDB
 "brf‹w¨d"

	)

22 
	#SYSFS_BRIDGE_PORT_SUBDIR
 "brif"

	)

23 
	#SYSFS_BRIDGE_PORT_ATTR
 "bΩ‹t"

	)

24 
	#SYSFS_BRIDGE_PORT_LINK
 "bridge"

	)

26 
	#BRCTL_VERSION
 1

	)

28 
	#BRCTL_GET_VERSION
 0

	)

29 
	#BRCTL_GET_BRIDGES
 1

	)

30 
	#BRCTL_ADD_BRIDGE
 2

	)

31 
	#BRCTL_DEL_BRIDGE
 3

	)

32 
	#BRCTL_ADD_IF
 4

	)

33 
	#BRCTL_DEL_IF
 5

	)

34 
	#BRCTL_GET_BRIDGE_INFO
 6

	)

35 
	#BRCTL_GET_PORT_LIST
 7

	)

36 
	#BRCTL_SET_BRIDGE_FORWARD_DELAY
 8

	)

37 
	#BRCTL_SET_BRIDGE_HELLO_TIME
 9

	)

38 
	#BRCTL_SET_BRIDGE_MAX_AGE
 10

	)

39 
	#BRCTL_SET_AGEING_TIME
 11

	)

40 
	#BRCTL_SET_GC_INTERVAL
 12

	)

41 
	#BRCTL_GET_PORT_INFO
 13

	)

42 
	#BRCTL_SET_BRIDGE_STP_STATE
 14

	)

43 
	#BRCTL_SET_BRIDGE_PRIORITY
 15

	)

44 
	#BRCTL_SET_PORT_PRIORITY
 16

	)

45 
	#BRCTL_SET_PATH_COST
 17

	)

46 
	#BRCTL_GET_FDB_ENTRIES
 18

	)

48 
	#BR_STATE_DISABLED
 0

	)

49 
	#BR_STATE_LISTENING
 1

	)

50 
	#BR_STATE_LEARNING
 2

	)

51 
	#BR_STATE_FORWARDING
 3

	)

52 
	#BR_STATE_BLOCKING
 4

	)

54 
	s__bridge_öfo
 {

55 
__u64
 
	mdesig«ãd_roŸ
;

56 
__u64
 
	mbridge_id
;

57 
__u32
 
	mroŸ_∑th_co°
;

58 
__u32
 
	mmax_age
;

59 
__u32
 
	mhñlo_time
;

60 
__u32
 
	mf‹w¨d_dñay
;

61 
__u32
 
	mbridge_max_age
;

62 
__u32
 
	mbridge_hñlo_time
;

63 
__u32
 
	mbridge_f‹w¨d_dñay
;

64 
__u8
 
	mt›ﬁogy_ch™ge
;

65 
__u8
 
	mt›ﬁogy_ch™ge_dëe˘ed
;

66 
__u8
 
	mroŸ_p‹t
;

67 
__u8
 
	m°p_íabÀd
;

68 
__u32
 
	mageög_time
;

69 
__u32
 
	mgc_öãrvÆ
;

70 
__u32
 
	mhñlo_timî_vÆue
;

71 
__u32
 
	mt˙_timî_vÆue
;

72 
__u32
 
	mt›ﬁogy_ch™ge_timî_vÆue
;

73 
__u32
 
	mgc_timî_vÆue
;

76 
	s__p‹t_öfo
 {

77 
__u64
 
	mdesig«ãd_roŸ
;

78 
__u64
 
	mdesig«ãd_bridge
;

79 
__u16
 
	mp‹t_id
;

80 
__u16
 
	mdesig«ãd_p‹t
;

81 
__u32
 
	m∑th_co°
;

82 
__u32
 
	mdesig«ãd_co°
;

83 
__u8
 
	m°©e
;

84 
__u8
 
	mt›_ch™ge_ack
;

85 
__u8
 
	mc⁄fig_≥ndög
;

86 
__u8
 
	munu£d0
;

87 
__u32
 
	mmesßge_age_timî_vÆue
;

88 
__u32
 
	mf‹w¨d_dñay_timî_vÆue
;

89 
__u32
 
	mhﬁd_timî_vÆue
;

92 
	s__fdb_íåy
 {

93 
__u8
 
	mmac_addr
[
ETH_ALEN
];

94 
__u8
 
	mp‹t_no
;

95 
__u8
 
	mis_loˇl
;

96 
__u32
 
	mageög_timî_vÆue
;

97 
__u8
 
	mp‹t_hi
;

98 
__u8
 
	m∑d0
;

99 
__u16
 
	munu£d
;

103 
	#BRIDGE_FLAGS_MASTER
 1

	)

104 
	#BRIDGE_FLAGS_SELF
 2

	)

106 
	#BRIDGE_MODE_VEB
 0

	)

107 
	#BRIDGE_MODE_VEPA
 1

	)

108 
	#BRIDGE_MODE_UNDEF
 0xFFFF

	)

118 
	mIFLA_BRIDGE_FLAGS
,

119 
	mIFLA_BRIDGE_MODE
,

120 
	mIFLA_BRIDGE_VLAN_INFO
,

121 
	m__IFLA_BRIDGE_MAX
,

123 
	#IFLA_BRIDGE_MAX
 (
__IFLA_BRIDGE_MAX
 - 1)

	)

125 
	#BRIDGE_VLAN_INFO_MASTER
 (1<<0Ë

	)

126 
	#BRIDGE_VLAN_INFO_PVID
 (1<<1Ë

	)

127 
	#BRIDGE_VLAN_INFO_UNTAGGED
 (1<<2Ë

	)

128 
	#BRIDGE_VLAN_INFO_RANGE_BEGIN
 (1<<3Ë

	)

129 
	#BRIDGE_VLAN_INFO_RANGE_END
 (1<<4Ë

	)

131 
	sbridge_vœn_öfo
 {

132 
__u16
 
	mÊags
;

133 
__u16
 
	mvid
;

147 
	mMDBA_UNSPEC
,

148 
	mMDBA_MDB
,

149 
	mMDBA_ROUTER
,

150 
	m__MDBA_MAX
,

152 
	#MDBA_MAX
 (
__MDBA_MAX
 - 1)

	)

155 
	mMDBA_MDB_UNSPEC
,

156 
	mMDBA_MDB_ENTRY
,

157 
	m__MDBA_MDB_MAX
,

159 
	#MDBA_MDB_MAX
 (
__MDBA_MDB_MAX
 - 1)

	)

162 
	mMDBA_MDB_ENTRY_UNSPEC
,

163 
	mMDBA_MDB_ENTRY_INFO
,

164 
	m__MDBA_MDB_ENTRY_MAX
,

166 
	#MDBA_MDB_ENTRY_MAX
 (
__MDBA_MDB_ENTRY_MAX
 - 1)

	)

169 
	mMDBA_ROUTER_UNSPEC
,

170 
	mMDBA_ROUTER_PORT
,

171 
	m__MDBA_ROUTER_MAX
,

173 
	#MDBA_ROUTER_MAX
 (
__MDBA_ROUTER_MAX
 - 1)

	)

175 
	sbr_p‹t_msg
 {

176 
__u8
 
	mÁmûy
;

177 
__u32
 
	mifödex
;

180 
	sbr_mdb_íåy
 {

181 
__u32
 
	mifödex
;

182 
	#MDB_TEMPORARY
 0

	)

183 
	#MDB_PERMANENT
 1

	)

184 
__u8
 
	m°©e
;

185 
__u16
 
	mvid
;

188 
__be32
 
	mù4
;

189 
ö6_addr
 
	mù6
;

190 } 
	mu
;

191 
__be16
 
	m¥Ÿo
;

192 } 
	maddr
;

196 
	mMDBA_SET_ENTRY_UNSPEC
,

197 
	mMDBA_SET_ENTRY
,

198 
	m__MDBA_SET_ENTRY_MAX
,

200 
	#MDBA_SET_ENTRY_MAX
 (
__MDBA_SET_ENTRY_MAX
 - 1)

	)

	@include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_TSN
 0x22F0

	)

46 
	#ETH_P_IP
 0x0800

	)

47 
	#ETH_P_X25
 0x0805

	)

48 
	#ETH_P_ARP
 0x0806

	)

49 
	#ETH_P_BPQ
 0x08FF

	)

50 
	#ETH_P_IEEEPUP
 0x0a00

	)

51 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

52 
	#ETH_P_BATMAN
 0x4305

	)

53 
	#ETH_P_DEC
 0x6000

	)

54 
	#ETH_P_DNA_DL
 0x6001

	)

55 
	#ETH_P_DNA_RC
 0x6002

	)

56 
	#ETH_P_DNA_RT
 0x6003

	)

57 
	#ETH_P_LAT
 0x6004

	)

58 
	#ETH_P_DIAG
 0x6005

	)

59 
	#ETH_P_CUST
 0x6006

	)

60 
	#ETH_P_SCA
 0x6007

	)

61 
	#ETH_P_TEB
 0x6558

	)

62 
	#ETH_P_RARP
 0x8035

	)

63 
	#ETH_P_ATALK
 0x809B

	)

64 
	#ETH_P_AARP
 0x80F3

	)

65 
	#ETH_P_8021Q
 0x8100

	)

66 
	#ETH_P_IPX
 0x8137

	)

67 
	#ETH_P_IPV6
 0x86DD

	)

68 
	#ETH_P_PAUSE
 0x8808

	)

69 
	#ETH_P_SLOW
 0x8809

	)

70 
	#ETH_P_WCCP
 0x883E

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_PPP_DISC
 0x8863

	)

76 
	#ETH_P_PPP_SES
 0x8864

	)

77 
	#ETH_P_LINK_CTL
 0x886¯

	)

78 
	#ETH_P_ATMFATE
 0x8884

	)

81 
	#ETH_P_PAE
 0x888E

	)

82 
	#ETH_P_AOE
 0x88A2

	)

83 
	#ETH_P_8021AD
 0x88A8

	)

84 
	#ETH_P_802_EX1
 0x88B5

	)

85 
	#ETH_P_TIPC
 0x88CA

	)

86 
	#ETH_P_8021AH
 0x88E7

	)

87 
	#ETH_P_MVRP
 0x88F5

	)

88 
	#ETH_P_1588
 0x88F7

	)

89 
	#ETH_P_PRP
 0x88FB

	)

90 
	#ETH_P_FCOE
 0x8906

	)

91 
	#ETH_P_TDLS
 0x890D

	)

92 
	#ETH_P_FIP
 0x8914

	)

93 
	#ETH_P_80221
 0x8917

	)

94 
	#ETH_P_LOOPBACK
 0x9000

	)

95 
	#ETH_P_QINQ1
 0x9100

	)

96 
	#ETH_P_QINQ2
 0x9200

	)

97 
	#ETH_P_QINQ3
 0x9300

	)

98 
	#ETH_P_EDSA
 0xDADA

	)

99 
	#ETH_P_AF_IUCV
 0xFBFB

	)

101 
	#ETH_P_802_3_MIN
 0x0600

	)

108 
	#ETH_P_802_3
 0x0001

	)

109 
	#ETH_P_AX25
 0x0002

	)

110 
	#ETH_P_ALL
 0x0003

	)

111 
	#ETH_P_802_2
 0x0004

	)

112 
	#ETH_P_SNAP
 0x0005

	)

113 
	#ETH_P_DDCMP
 0x0006

	)

114 
	#ETH_P_WAN_PPP
 0x0007

	)

115 
	#ETH_P_PPP_MP
 0x0008

	)

116 
	#ETH_P_LOCALTALK
 0x0009

	)

117 
	#ETH_P_CAN
 0x000C

	)

118 
	#ETH_P_CANFD
 0x000D

	)

119 
	#ETH_P_PPPTALK
 0x0010

	)

120 
	#ETH_P_TR_802_2
 0x0011

	)

121 
	#ETH_P_MOBITEX
 0x0015

	)

122 
	#ETH_P_CONTROL
 0x0016

	)

123 
	#ETH_P_IRDA
 0x0017

	)

124 
	#ETH_P_ECONET
 0x0018

	)

125 
	#ETH_P_HDLC
 0x0019

	)

126 
	#ETH_P_ARCNET
 0x001A

	)

127 
	#ETH_P_DSA
 0x001B

	)

128 
	#ETH_P_TRAILER
 0x001C

	)

129 
	#ETH_P_PHONET
 0x00F5

	)

130 
	#ETH_P_IEEE802154
 0x00F6

	)

131 
	#ETH_P_CAIF
 0x00F7

	)

132 
	#ETH_P_XDSA
 0x00F8

	)

138 
	sëhhdr
 {

139 
	mh_de°
[
ETH_ALEN
];

140 
	mh_sour˚
[
ETH_ALEN
];

141 
__be16
 
	mh_¥Ÿo
;

142 } 
__©åibuã__
((
∑cked
));

	@include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	mIFLA_PROMISCUITY
,

142 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

143 
	mIFLA_NUM_TX_QUEUES
,

144 
	mIFLA_NUM_RX_QUEUES
,

145 
	mIFLA_CARRIER
,

146 
	mIFLA_PHYS_PORT_ID
,

147 
	mIFLA_CARRIER_CHANGES
,

148 
	mIFLA_PHYS_SWITCH_ID
,

149 
	mIFLA_LINK_NETNSID
,

150 
	mIFLA_PHYS_PORT_NAME
,

151 
	mIFLA_PROTO_DOWN
,

152 
	m__IFLA_MAX


156 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

159 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

160 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

163 
	mIFLA_INET_UNSPEC
,

164 
	mIFLA_INET_CONF
,

165 
	m__IFLA_INET_MAX
,

168 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

201 
	mIFLA_INET6_UNSPEC
,

202 
	mIFLA_INET6_FLAGS
,

203 
	mIFLA_INET6_CONF
,

204 
	mIFLA_INET6_STATS
,

205 
	mIFLA_INET6_MCAST
,

206 
	mIFLA_INET6_CACHEINFO
,

207 
	mIFLA_INET6_ICMP6STATS
,

208 
	mIFLA_INET6_TOKEN
,

209 
	mIFLA_INET6_ADDR_GEN_MODE
,

210 
	m__IFLA_INET6_MAX


213 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

215 
	eö6_addr_gí_mode
 {

216 
	mIN6_ADDR_GEN_MODE_EUI64
,

217 
	mIN6_ADDR_GEN_MODE_NONE
,

218 
	mIN6_ADDR_GEN_MODE_STABLE_PRIVACY
,

224 
	mIFLA_BR_UNSPEC
,

225 
	mIFLA_BR_FORWARD_DELAY
,

226 
	mIFLA_BR_HELLO_TIME
,

227 
	mIFLA_BR_MAX_AGE
,

228 
	mIFLA_BR_AGEING_TIME
,

229 
	mIFLA_BR_STP_STATE
,

230 
	mIFLA_BR_PRIORITY
,

231 
	mIFLA_BR_VLAN_FILTERING
,

232 
	mIFLA_BR_VLAN_PROTOCOL
,

233 
	m__IFLA_BR_MAX
,

236 
	#IFLA_BR_MAX
 (
__IFLA_BR_MAX
 - 1)

	)

239 
	mBRIDGE_MODE_UNSPEC
,

240 
	mBRIDGE_MODE_HAIRPIN
,

244 
	mIFLA_BRPORT_UNSPEC
,

245 
	mIFLA_BRPORT_STATE
,

246 
	mIFLA_BRPORT_PRIORITY
,

247 
	mIFLA_BRPORT_COST
,

248 
	mIFLA_BRPORT_MODE
,

249 
	mIFLA_BRPORT_GUARD
,

250 
	mIFLA_BRPORT_PROTECT
,

251 
	mIFLA_BRPORT_FAST_LEAVE
,

252 
	mIFLA_BRPORT_LEARNING
,

253 
	mIFLA_BRPORT_UNICAST_FLOOD
,

254 
	mIFLA_BRPORT_PROXYARP
,

255 
	mIFLA_BRPORT_LEARNING_SYNC
,

256 
	mIFLA_BRPORT_PROXYARP_WIFI
,

257 
	m__IFLA_BRPORT_MAX


259 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

261 
	siÊa_ˇcheöfo
 {

262 
__u32
 
	mmax_ªasm_Àn
;

263 
__u32
 
	mt°amp
;

264 
__u32
 
	mªachabÀ_time
;

265 
__u32
 
	mªå™s_time
;

269 
	mIFLA_INFO_UNSPEC
,

270 
	mIFLA_INFO_KIND
,

271 
	mIFLA_INFO_DATA
,

272 
	mIFLA_INFO_XSTATS
,

273 
	mIFLA_INFO_SLAVE_KIND
,

274 
	mIFLA_INFO_SLAVE_DATA
,

275 
	m__IFLA_INFO_MAX
,

278 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

283 
	mIFLA_VLAN_UNSPEC
,

284 
	mIFLA_VLAN_ID
,

285 
	mIFLA_VLAN_FLAGS
,

286 
	mIFLA_VLAN_EGRESS_QOS
,

287 
	mIFLA_VLAN_INGRESS_QOS
,

288 
	mIFLA_VLAN_PROTOCOL
,

289 
	m__IFLA_VLAN_MAX
,

292 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

294 
	siÊa_vœn_Êags
 {

295 
__u32
 
	mÊags
;

296 
__u32
 
	mmask
;

300 
	mIFLA_VLAN_QOS_UNSPEC
,

301 
	mIFLA_VLAN_QOS_MAPPING
,

302 
	m__IFLA_VLAN_QOS_MAX


305 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

307 
	siÊa_vœn_qos_m≠pög
 {

308 
__u32
 
	m‰om
;

309 
__u32
 
	mto
;

314 
	mIFLA_MACVLAN_UNSPEC
,

315 
	mIFLA_MACVLAN_MODE
,

316 
	mIFLA_MACVLAN_FLAGS
,

317 
	mIFLA_MACVLAN_MACADDR_MODE
,

318 
	mIFLA_MACVLAN_MACADDR
,

319 
	mIFLA_MACVLAN_MACADDR_DATA
,

320 
	mIFLA_MACVLAN_MACADDR_COUNT
,

321 
	m__IFLA_MACVLAN_MAX
,

324 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

326 
	emacvœn_mode
 {

327 
	mMACVLAN_MODE_PRIVATE
 = 1,

328 
	mMACVLAN_MODE_VEPA
 = 2,

329 
	mMACVLAN_MODE_BRIDGE
 = 4,

330 
	mMACVLAN_MODE_PASSTHRU
 = 8,

331 
	mMACVLAN_MODE_SOURCE
 = 16,

334 
	emacvœn_maˇddr_mode
 {

335 
	mMACVLAN_MACADDR_ADD
,

336 
	mMACVLAN_MACADDR_DEL
,

337 
	mMACVLAN_MACADDR_FLUSH
,

338 
	mMACVLAN_MACADDR_SET
,

341 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

345 
	mIFLA_VRF_UNSPEC
,

346 
	mIFLA_VRF_TABLE
,

347 
	m__IFLA_VRF_MAX


350 
	#IFLA_VRF_MAX
 (
__IFLA_VRF_MAX
 - 1)

	)

354 
	mIFLA_IPVLAN_UNSPEC
,

355 
	mIFLA_IPVLAN_MODE
,

356 
	m__IFLA_IPVLAN_MAX


359 
	#IFLA_IPVLAN_MAX
 (
__IFLA_IPVLAN_MAX
 - 1)

	)

361 
	eùvœn_mode
 {

362 
	mIPVLAN_MODE_L2
 = 0,

363 
	mIPVLAN_MODE_L3
,

364 
	mIPVLAN_MODE_MAX


369 
	mIFLA_VXLAN_UNSPEC
,

370 
	mIFLA_VXLAN_ID
,

371 
	mIFLA_VXLAN_GROUP
,

372 
	mIFLA_VXLAN_LINK
,

373 
	mIFLA_VXLAN_LOCAL
,

374 
	mIFLA_VXLAN_TTL
,

375 
	mIFLA_VXLAN_TOS
,

376 
	mIFLA_VXLAN_LEARNING
,

377 
	mIFLA_VXLAN_AGEING
,

378 
	mIFLA_VXLAN_LIMIT
,

379 
	mIFLA_VXLAN_PORT_RANGE
,

380 
	mIFLA_VXLAN_PROXY
,

381 
	mIFLA_VXLAN_RSC
,

382 
	mIFLA_VXLAN_L2MISS
,

383 
	mIFLA_VXLAN_L3MISS
,

384 
	mIFLA_VXLAN_PORT
,

385 
	mIFLA_VXLAN_GROUP6
,

386 
	mIFLA_VXLAN_LOCAL6
,

387 
	mIFLA_VXLAN_UDP_CSUM
,

388 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_TX
,

389 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_RX
,

390 
	mIFLA_VXLAN_REMCSUM_TX
,

391 
	mIFLA_VXLAN_REMCSUM_RX
,

392 
	mIFLA_VXLAN_GBP
,

393 
	mIFLA_VXLAN_REMCSUM_NOPARTIAL
,

394 
	mIFLA_VXLAN_COLLECT_METADATA
,

395 
	m__IFLA_VXLAN_MAX


397 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

399 
	siÊa_vxœn_p‹t_ønge
 {

400 
__be16
 
	mlow
;

401 
__be16
 
	mhigh
;

406 
	mIFLA_GENEVE_UNSPEC
,

407 
	mIFLA_GENEVE_ID
,

408 
	mIFLA_GENEVE_REMOTE
,

409 
	mIFLA_GENEVE_TTL
,

410 
	mIFLA_GENEVE_TOS
,

411 
	mIFLA_GENEVE_PORT
,

412 
	mIFLA_GENEVE_COLLECT_METADATA
,

413 
	m__IFLA_GENEVE_MAX


415 
	#IFLA_GENEVE_MAX
 (
__IFLA_GENEVE_MAX
 - 1)

	)

420 
	mIFLA_BOND_UNSPEC
,

421 
	mIFLA_BOND_MODE
,

422 
	mIFLA_BOND_ACTIVE_SLAVE
,

423 
	mIFLA_BOND_MIIMON
,

424 
	mIFLA_BOND_UPDELAY
,

425 
	mIFLA_BOND_DOWNDELAY
,

426 
	mIFLA_BOND_USE_CARRIER
,

427 
	mIFLA_BOND_ARP_INTERVAL
,

428 
	mIFLA_BOND_ARP_IP_TARGET
,

429 
	mIFLA_BOND_ARP_VALIDATE
,

430 
	mIFLA_BOND_ARP_ALL_TARGETS
,

431 
	mIFLA_BOND_PRIMARY
,

432 
	mIFLA_BOND_PRIMARY_RESELECT
,

433 
	mIFLA_BOND_FAIL_OVER_MAC
,

434 
	mIFLA_BOND_XMIT_HASH_POLICY
,

435 
	mIFLA_BOND_RESEND_IGMP
,

436 
	mIFLA_BOND_NUM_PEER_NOTIF
,

437 
	mIFLA_BOND_ALL_SLAVES_ACTIVE
,

438 
	mIFLA_BOND_MIN_LINKS
,

439 
	mIFLA_BOND_LP_INTERVAL
,

440 
	mIFLA_BOND_PACKETS_PER_SLAVE
,

441 
	mIFLA_BOND_AD_LACP_RATE
,

442 
	mIFLA_BOND_AD_SELECT
,

443 
	mIFLA_BOND_AD_INFO
,

444 
	mIFLA_BOND_AD_ACTOR_SYS_PRIO
,

445 
	mIFLA_BOND_AD_USER_PORT_KEY
,

446 
	mIFLA_BOND_AD_ACTOR_SYSTEM
,

447 
	mIFLA_BOND_TLB_DYNAMIC_LB
,

448 
	m__IFLA_BOND_MAX
,

451 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

454 
	mIFLA_BOND_AD_INFO_UNSPEC
,

455 
	mIFLA_BOND_AD_INFO_AGGREGATOR
,

456 
	mIFLA_BOND_AD_INFO_NUM_PORTS
,

457 
	mIFLA_BOND_AD_INFO_ACTOR_KEY
,

458 
	mIFLA_BOND_AD_INFO_PARTNER_KEY
,

459 
	mIFLA_BOND_AD_INFO_PARTNER_MAC
,

460 
	m__IFLA_BOND_AD_INFO_MAX
,

463 
	#IFLA_BOND_AD_INFO_MAX
 (
__IFLA_BOND_AD_INFO_MAX
 - 1)

	)

466 
	mIFLA_BOND_SLAVE_UNSPEC
,

467 
	mIFLA_BOND_SLAVE_STATE
,

468 
	mIFLA_BOND_SLAVE_MII_STATUS
,

469 
	mIFLA_BOND_SLAVE_LINK_FAILURE_COUNT
,

470 
	mIFLA_BOND_SLAVE_PERM_HWADDR
,

471 
	mIFLA_BOND_SLAVE_QUEUE_ID
,

472 
	mIFLA_BOND_SLAVE_AD_AGGREGATOR_ID
,

473 
	mIFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
,

474 
	mIFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
,

475 
	m__IFLA_BOND_SLAVE_MAX
,

478 
	#IFLA_BOND_SLAVE_MAX
 (
__IFLA_BOND_SLAVE_MAX
 - 1)

	)

483 
	mIFLA_VF_INFO_UNSPEC
,

484 
	mIFLA_VF_INFO
,

485 
	m__IFLA_VF_INFO_MAX
,

488 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

491 
	mIFLA_VF_UNSPEC
,

492 
	mIFLA_VF_MAC
,

493 
	mIFLA_VF_VLAN
,

494 
	mIFLA_VF_TX_RATE
,

495 
	mIFLA_VF_SPOOFCHK
,

496 
	mIFLA_VF_LINK_STATE
,

497 
	mIFLA_VF_RATE
,

498 
	mIFLA_VF_RSS_QUERY_EN
,

501 
	mIFLA_VF_STATS
,

502 
	m__IFLA_VF_MAX
,

505 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

507 
	siÊa_vf_mac
 {

508 
__u32
 
	mvf
;

509 
__u8
 
	mmac
[32];

512 
	siÊa_vf_vœn
 {

513 
__u32
 
	mvf
;

514 
__u32
 
	mvœn
;

515 
__u32
 
	mqos
;

518 
	siÊa_vf_tx_øã
 {

519 
__u32
 
	mvf
;

520 
__u32
 
	møã
;

523 
	siÊa_vf_øã
 {

524 
__u32
 
	mvf
;

525 
__u32
 
	mmö_tx_øã
;

526 
__u32
 
	mmax_tx_øã
;

529 
	siÊa_vf_•oofchk
 {

530 
__u32
 
	mvf
;

531 
__u32
 
	m£âög
;

535 
	mIFLA_VF_LINK_STATE_AUTO
,

536 
	mIFLA_VF_LINK_STATE_ENABLE
,

537 
	mIFLA_VF_LINK_STATE_DISABLE
,

538 
	m__IFLA_VF_LINK_STATE_MAX
,

541 
	siÊa_vf_lök_°©e
 {

542 
__u32
 
	mvf
;

543 
__u32
 
	mlök_°©e
;

546 
	siÊa_vf_rss_quîy_í
 {

547 
__u32
 
	mvf
;

548 
__u32
 
	m£âög
;

552 
	mIFLA_VF_STATS_RX_PACKETS
,

553 
	mIFLA_VF_STATS_TX_PACKETS
,

554 
	mIFLA_VF_STATS_RX_BYTES
,

555 
	mIFLA_VF_STATS_TX_BYTES
,

556 
	mIFLA_VF_STATS_BROADCAST
,

557 
	mIFLA_VF_STATS_MULTICAST
,

558 
	m__IFLA_VF_STATS_MAX
,

561 
	#IFLA_VF_STATS_MAX
 (
__IFLA_VF_STATS_MAX
 - 1)

	)

579 
	mIFLA_VF_PORT_UNSPEC
,

580 
	mIFLA_VF_PORT
,

581 
	m__IFLA_VF_PORT_MAX
,

584 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

587 
	mIFLA_PORT_UNSPEC
,

588 
	mIFLA_PORT_VF
,

589 
	mIFLA_PORT_PROFILE
,

590 
	mIFLA_PORT_VSI_TYPE
,

591 
	mIFLA_PORT_INSTANCE_UUID
,

592 
	mIFLA_PORT_HOST_UUID
,

593 
	mIFLA_PORT_REQUEST
,

594 
	mIFLA_PORT_RESPONSE
,

595 
	m__IFLA_PORT_MAX
,

598 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

600 
	#PORT_PROFILE_MAX
 40

	)

601 
	#PORT_UUID_MAX
 16

	)

602 
	#PORT_SELF_VF
 -1

	)

605 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

606 
	mPORT_REQUEST_PREASSOCIATE_RR
,

607 
	mPORT_REQUEST_ASSOCIATE
,

608 
	mPORT_REQUEST_DISASSOCIATE
,

612 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

613 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

614 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

615 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

616 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

617 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

618 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

620 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

621 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

622 
	mPORT_PROFILE_RESPONSE_INVALID
,

623 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

624 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

625 
	mPORT_PROFILE_RESPONSE_ERROR
,

628 
	siÊa_p‹t_vsi
 {

629 
__u8
 
	mvsi_mgr_id
;

630 
__u8
 
	mvsi_ty≥_id
[3];

631 
__u8
 
	mvsi_ty≥_vîsi⁄
;

632 
__u8
 
	m∑d
[3];

639 
	mIFLA_IPOIB_UNSPEC
,

640 
	mIFLA_IPOIB_PKEY
,

641 
	mIFLA_IPOIB_MODE
,

642 
	mIFLA_IPOIB_UMCAST
,

643 
	m__IFLA_IPOIB_MAX


647 
	mIPOIB_MODE_DATAGRAM
 = 0,

648 
	mIPOIB_MODE_CONNECTED
 = 1,

651 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

657 
	mIFLA_HSR_UNSPEC
,

658 
	mIFLA_HSR_SLAVE1
,

659 
	mIFLA_HSR_SLAVE2
,

660 
	mIFLA_HSR_MULTICAST_SPEC
,

661 
	mIFLA_HSR_SUPERVISION_ADDR
,

662 
	mIFLA_HSR_SEQ_NR
,

663 
	m__IFLA_HSR_MAX
,

666 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

	@include/linux/if_tun.h

16 #i‚de‡
__IF_TUN_H


17 
	#__IF_TUN_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/fûãr.h
>

24 
	#TUN_READQ_SIZE
 500

	)

26 
	#TUN_TUN_DEV
 
IFF_TUN


	)

27 
	#TUN_TAP_DEV
 
IFF_TAP


	)

28 
	#TUN_TYPE_MASK
 0x000f

	)

31 
	#TUNSETNOCSUM
 
	`_IOW
('T', 200, )

	)

32 
	#TUNSETDEBUG
 
	`_IOW
('T', 201, )

	)

33 
	#TUNSETIFF
 
	`_IOW
('T', 202, )

	)

34 
	#TUNSETPERSIST
 
	`_IOW
('T', 203, )

	)

35 
	#TUNSETOWNER
 
	`_IOW
('T', 204, )

	)

36 
	#TUNSETLINK
 
	`_IOW
('T', 205, )

	)

37 
	#TUNSETGROUP
 
	`_IOW
('T', 206, )

	)

38 
	#TUNGETFEATURES
 
	`_IOR
('T', 207, )

	)

39 
	#TUNSETOFFLOAD
 
	`_IOW
('T', 208, )

	)

40 
	#TUNSETTXFILTER
 
	`_IOW
('T', 209, )

	)

41 
	#TUNGETIFF
 
	`_IOR
('T', 210, )

	)

42 
	#TUNGETSNDBUF
 
	`_IOR
('T', 211, )

	)

43 
	#TUNSETSNDBUF
 
	`_IOW
('T', 212, )

	)

44 
	#TUNATTACHFILTER
 
	`_IOW
('T', 213, 
sock_Ârog
)

	)

45 
	#TUNDETACHFILTER
 
	`_IOW
('T', 214, 
sock_Ârog
)

	)

46 
	#TUNGETVNETHDRSZ
 
	`_IOR
('T', 215, )

	)

47 
	#TUNSETVNETHDRSZ
 
	`_IOW
('T', 216, )

	)

48 
	#TUNSETQUEUE
 
	`_IOW
('T', 217, )

	)

49 
	#TUNSETIFINDEX
 
	`_IOW
('T', 218, )

	)

50 
	#TUNGETFILTER
 
	`_IOR
('T', 219, 
sock_Ârog
)

	)

51 
	#TUNSETVNETLE
 
	`_IOW
('T', 220, )

	)

52 
	#TUNGETVNETLE
 
	`_IOR
('T', 221, )

	)

57 
	#TUNSETVNETBE
 
	`_IOW
('T', 222, )

	)

58 
	#TUNGETVNETBE
 
	`_IOR
('T', 223, )

	)

61 
	#IFF_TUN
 0x0001

	)

62 
	#IFF_TAP
 0x0002

	)

63 
	#IFF_NO_PI
 0x1000

	)

65 
	#IFF_ONE_QUEUE
 0x2000

	)

66 
	#IFF_VNET_HDR
 0x4000

	)

67 
	#IFF_TUN_EXCL
 0x8000

	)

68 
	#IFF_MULTI_QUEUE
 0x0100

	)

69 
	#IFF_ATTACH_QUEUE
 0x0200

	)

70 
	#IFF_DETACH_QUEUE
 0x0400

	)

72 
	#IFF_PERSIST
 0x0800

	)

73 
	#IFF_NOFILTER
 0x1000

	)

76 
	#TUN_TX_TIMESTAMP
 1

	)

79 
	#TUN_F_CSUM
 0x01

	)

80 
	#TUN_F_TSO4
 0x02

	)

81 
	#TUN_F_TSO6
 0x04

	)

82 
	#TUN_F_TSO_ECN
 0x08

	)

83 
	#TUN_F_UFO
 0x10

	)

86 
	#TUN_PKT_STRIP
 0x0001

	)

87 
	stun_pi
 {

88 
__u16
 
	mÊags
;

89 
__be16
 
	m¥Ÿo
;

100 
	#TUN_FLT_ALLMULTI
 0x0001

	)

101 
	stun_fûãr
 {

102 
__u16
 
	mÊags
;

103 
__u16
 
	mcou¡
;

104 
__u8
 
	maddr
[0][
ETH_ALEN
];

	@include/linux/if_tunnel.h

1 #i‚de‡
_IF_TUNNEL_H_


2 
	#_IF_TUNNEL_H_


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

8 
	#SIOCGETTUNNEL
 (
SIOCDEVPRIVATE
 + 0)

	)

9 
	#SIOCADDTUNNEL
 (
SIOCDEVPRIVATE
 + 1)

	)

10 
	#SIOCDELTUNNEL
 (
SIOCDEVPRIVATE
 + 2)

	)

11 
	#SIOCCHGTUNNEL
 (
SIOCDEVPRIVATE
 + 3)

	)

12 
	#SIOCGETPRL
 (
SIOCDEVPRIVATE
 + 4)

	)

13 
	#SIOCADDPRL
 (
SIOCDEVPRIVATE
 + 5)

	)

14 
	#SIOCDELPRL
 (
SIOCDEVPRIVATE
 + 6)

	)

15 
	#SIOCCHGPRL
 (
SIOCDEVPRIVATE
 + 7)

	)

16 
	#SIOCGET6RD
 (
SIOCDEVPRIVATE
 + 8)

	)

17 
	#SIOCADD6RD
 (
SIOCDEVPRIVATE
 + 9)

	)

18 
	#SIOCDEL6RD
 (
SIOCDEVPRIVATE
 + 10)

	)

19 
	#SIOCCHG6RD
 (
SIOCDEVPRIVATE
 + 11)

	)

21 
	#GRE_CSUM
 
	`__˝u_to_be16
(0x8000)

	)

22 
	#GRE_ROUTING
 
	`__˝u_to_be16
(0x4000)

	)

23 
	#GRE_KEY
 
	`__˝u_to_be16
(0x2000)

	)

24 
	#GRE_SEQ
 
	`__˝u_to_be16
(0x1000)

	)

25 
	#GRE_STRICT
 
	`__˝u_to_be16
(0x0800)

	)

26 
	#GRE_REC
 
	`__˝u_to_be16
(0x0700)

	)

27 
	#GRE_FLAGS
 
	`__˝u_to_be16
(0x00F8)

	)

28 
	#GRE_VERSION
 
	`__˝u_to_be16
(0x0007)

	)

30 
	sù_tu¬ñ_∑rm
 {

31 
	m«me
[
IFNAMSIZ
];

32 
	mlök
;

33 
__be16
 
	mi_Êags
;

34 
__be16
 
	mo_Êags
;

35 
__be32
 
	mi_key
;

36 
__be32
 
	mo_key
;

37 
ùhdr
 
	mùh
;

41 
	mIFLA_IPTUN_UNSPEC
,

42 
	mIFLA_IPTUN_LINK
,

43 
	mIFLA_IPTUN_LOCAL
,

44 
	mIFLA_IPTUN_REMOTE
,

45 
	mIFLA_IPTUN_TTL
,

46 
	mIFLA_IPTUN_TOS
,

47 
	mIFLA_IPTUN_ENCAP_LIMIT
,

48 
	mIFLA_IPTUN_FLOWINFO
,

49 
	mIFLA_IPTUN_FLAGS
,

50 
	mIFLA_IPTUN_PROTO
,

51 
	mIFLA_IPTUN_PMTUDISC
,

52 
	mIFLA_IPTUN_6RD_PREFIX
,

53 
	mIFLA_IPTUN_6RD_RELAY_PREFIX
,

54 
	mIFLA_IPTUN_6RD_PREFIXLEN
,

55 
	mIFLA_IPTUN_6RD_RELAY_PREFIXLEN
,

56 
	mIFLA_IPTUN_ENCAP_TYPE
,

57 
	mIFLA_IPTUN_ENCAP_FLAGS
,

58 
	mIFLA_IPTUN_ENCAP_SPORT
,

59 
	mIFLA_IPTUN_ENCAP_DPORT
,

60 
	m__IFLA_IPTUN_MAX
,

62 
	#IFLA_IPTUN_MAX
 (
__IFLA_IPTUN_MAX
 - 1)

	)

64 
	etu¬ñ_íˇp_ty≥s
 {

65 
	mTUNNEL_ENCAP_NONE
,

66 
	mTUNNEL_ENCAP_FOU
,

67 
	mTUNNEL_ENCAP_GUE
,

70 
	#TUNNEL_ENCAP_FLAG_CSUM
 (1<<0)

	)

71 
	#TUNNEL_ENCAP_FLAG_CSUM6
 (1<<1)

	)

72 
	#TUNNEL_ENCAP_FLAG_REMCSUM
 (1<<2)

	)

75 
	#SIT_ISATAP
 0x0001

	)

77 
	sù_tu¬ñ_¥l
 {

78 
__be32
 
	maddr
;

79 
__u16
 
	mÊags
;

80 
__u16
 
	m__ª£rved
;

81 
__u32
 
	md©Æí
;

82 
__u32
 
	m__ª£rved2
;

87 
	#PRL_DEFAULT
 0x0001

	)

89 
	sù_tu¬ñ_6rd
 {

90 
ö6_addr
 
	m¥efix
;

91 
__be32
 
	mªœy_¥efix
;

92 
__u16
 
	m¥efixÀn
;

93 
__u16
 
	mªœy_¥efixÀn
;

97 
	mIFLA_GRE_UNSPEC
,

98 
	mIFLA_GRE_LINK
,

99 
	mIFLA_GRE_IFLAGS
,

100 
	mIFLA_GRE_OFLAGS
,

101 
	mIFLA_GRE_IKEY
,

102 
	mIFLA_GRE_OKEY
,

103 
	mIFLA_GRE_LOCAL
,

104 
	mIFLA_GRE_REMOTE
,

105 
	mIFLA_GRE_TTL
,

106 
	mIFLA_GRE_TOS
,

107 
	mIFLA_GRE_PMTUDISC
,

108 
	mIFLA_GRE_ENCAP_LIMIT
,

109 
	mIFLA_GRE_FLOWINFO
,

110 
	mIFLA_GRE_FLAGS
,

111 
	mIFLA_GRE_ENCAP_TYPE
,

112 
	mIFLA_GRE_ENCAP_FLAGS
,

113 
	mIFLA_GRE_ENCAP_SPORT
,

114 
	mIFLA_GRE_ENCAP_DPORT
,

115 
	mIFLA_GRE_COLLECT_METADATA
,

116 
	m__IFLA_GRE_MAX
,

119 
	#IFLA_GRE_MAX
 (
__IFLA_GRE_MAX
 - 1)

	)

122 
	#VTI_ISVTI
 ((
__be16
)0x0001)

	)

125 
	mIFLA_VTI_UNSPEC
,

126 
	mIFLA_VTI_LINK
,

127 
	mIFLA_VTI_IKEY
,

128 
	mIFLA_VTI_OKEY
,

129 
	mIFLA_VTI_LOCAL
,

130 
	mIFLA_VTI_REMOTE
,

131 
	m__IFLA_VTI_MAX
,

134 
	#IFLA_VTI_MAX
 (
__IFLA_VTI_MAX
 - 1)

	)

	@include/linux/if_vlan.h

13 #i‚de‡
_LINUX_IF_VLAN_H_


14 
	#_LINUX_IF_VLAN_H_


	)

20 
	evœn_io˘l_cmds
 {

21 
	mADD_VLAN_CMD
,

22 
	mDEL_VLAN_CMD
,

23 
	mSET_VLAN_INGRESS_PRIORITY_CMD
,

24 
	mSET_VLAN_EGRESS_PRIORITY_CMD
,

25 
	mGET_VLAN_INGRESS_PRIORITY_CMD
,

26 
	mGET_VLAN_EGRESS_PRIORITY_CMD
,

27 
	mSET_VLAN_NAME_TYPE_CMD
,

28 
	mSET_VLAN_FLAG_CMD
,

29 
	mGET_VLAN_REALDEV_NAME_CMD
,

30 
	mGET_VLAN_VID_CMD


33 
	evœn_Êags
 {

34 
	mVLAN_FLAG_REORDER_HDR
 = 0x1,

35 
	mVLAN_FLAG_GVRP
 = 0x2,

36 
	mVLAN_FLAG_LOOSE_BINDING
 = 0x4,

37 
	mVLAN_FLAG_MVRP
 = 0x8,

40 
	evœn_«me_ty≥s
 {

41 
	mVLAN_NAME_TYPE_PLUS_VID
,

42 
	mVLAN_NAME_TYPE_RAW_PLUS_VID
,

43 
	mVLAN_NAME_TYPE_PLUS_VID_NO_PAD
,

44 
	mVLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
,

45 
	mVLAN_NAME_TYPE_HIGHEST


48 
	svœn_io˘l_¨gs
 {

49 
	mcmd
;

50 
	mdevi˚1
[24];

53 
	mdevi˚2
[24];

54 
	mVID
;

55 
	mskb_¥i‹ôy
;

56 
	m«me_ty≥
;

57 
	mböd_ty≥
;

58 
	mÊag
;

59 } 
	mu
;

61 
	mvœn_qos
;

	@include/linux/in.h

18 #i‚de‡
_LINUX_IN_H


19 
	#_LINUX_IN_H


	)

21 
	~<löux/ty≥s.h
>

22 
	~<löux/libc-com∑t.h
>

23 
	~<löux/sockë.h
>

25 #i‡
__UAPI_DEF_IN_IPPROTO


28 
	mIPPROTO_IP
 = 0,

29 
	#IPPROTO_IP
 
IPPROTO_IP


	)

30 
	mIPPROTO_ICMP
 = 1,

31 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

32 
	mIPPROTO_IGMP
 = 2,

33 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

34 
	mIPPROTO_IPIP
 = 4,

35 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

36 
	mIPPROTO_TCP
 = 6,

37 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

38 
	mIPPROTO_EGP
 = 8,

39 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

40 
	mIPPROTO_PUP
 = 12,

41 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

42 
	mIPPROTO_UDP
 = 17,

43 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

44 
	mIPPROTO_IDP
 = 22,

45 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

46 
	mIPPROTO_TP
 = 29,

47 
	#IPPROTO_TP
 
IPPROTO_TP


	)

48 
	mIPPROTO_DCCP
 = 33,

49 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

50 
	mIPPROTO_IPV6
 = 41,

51 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

52 
	mIPPROTO_RSVP
 = 46,

53 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

54 
	mIPPROTO_GRE
 = 47,

55 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

56 
	mIPPROTO_ESP
 = 50,

57 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

58 
	mIPPROTO_AH
 = 51,

59 
	#IPPROTO_AH
 
IPPROTO_AH


	)

60 
	mIPPROTO_MTP
 = 92,

61 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

62 
	mIPPROTO_BEETPH
 = 94,

63 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

64 
	mIPPROTO_ENCAP
 = 98,

65 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

66 
	mIPPROTO_PIM
 = 103,

67 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

68 
	mIPPROTO_COMP
 = 108,

69 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

70 
	mIPPROTO_SCTP
 = 132,

71 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

72 
	mIPPROTO_UDPLITE
 = 136,

73 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

74 
	mIPPROTO_MPLS
 = 137,

75 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

76 
	mIPPROTO_RAW
 = 255,

77 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

78 
	mIPPROTO_MAX


82 #i‡
__UAPI_DEF_IN_ADDR


84 
	sö_addr
 {

85 
__be32
 
	ms_addr
;

89 
	#IP_TOS
 1

	)

90 
	#IP_TTL
 2

	)

91 
	#IP_HDRINCL
 3

	)

92 
	#IP_OPTIONS
 4

	)

93 
	#IP_ROUTER_ALERT
 5

	)

94 
	#IP_RECVOPTS
 6

	)

95 
	#IP_RETOPTS
 7

	)

96 
	#IP_PKTINFO
 8

	)

97 
	#IP_PKTOPTIONS
 9

	)

98 
	#IP_MTU_DISCOVER
 10

	)

99 
	#IP_RECVERR
 11

	)

100 
	#IP_RECVTTL
 12

	)

101 
	#IP_RECVTOS
 13

	)

102 
	#IP_MTU
 14

	)

103 
	#IP_FREEBIND
 15

	)

104 
	#IP_IPSEC_POLICY
 16

	)

105 
	#IP_XFRM_POLICY
 17

	)

106 
	#IP_PASSSEC
 18

	)

107 
	#IP_TRANSPARENT
 19

	)

110 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

113 
	#IP_ORIGDSTADDR
 20

	)

114 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

116 
	#IP_MINTTL
 21

	)

117 
	#IP_NODEFRAG
 22

	)

118 
	#IP_CHECKSUM
 23

	)

119 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

122 
	#IP_PMTUDISC_DONT
 0

	)

123 
	#IP_PMTUDISC_WANT
 1

	)

124 
	#IP_PMTUDISC_DO
 2

	)

125 
	#IP_PMTUDISC_PROBE
 3

	)

130 
	#IP_PMTUDISC_INTERFACE
 4

	)

134 
	#IP_PMTUDISC_OMIT
 5

	)

136 
	#IP_MULTICAST_IF
 32

	)

137 
	#IP_MULTICAST_TTL
 33

	)

138 
	#IP_MULTICAST_LOOP
 34

	)

139 
	#IP_ADD_MEMBERSHIP
 35

	)

140 
	#IP_DROP_MEMBERSHIP
 36

	)

141 
	#IP_UNBLOCK_SOURCE
 37

	)

142 
	#IP_BLOCK_SOURCE
 38

	)

143 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

144 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

145 
	#IP_MSFILTER
 41

	)

146 
	#MCAST_JOIN_GROUP
 42

	)

147 
	#MCAST_BLOCK_SOURCE
 43

	)

148 
	#MCAST_UNBLOCK_SOURCE
 44

	)

149 
	#MCAST_LEAVE_GROUP
 45

	)

150 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

151 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

152 
	#MCAST_MSFILTER
 48

	)

153 
	#IP_MULTICAST_ALL
 49

	)

154 
	#IP_UNICAST_IF
 50

	)

156 
	#MCAST_EXCLUDE
 0

	)

157 
	#MCAST_INCLUDE
 1

	)

160 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

161 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

165 #i‡
__UAPI_DEF_IP_MREQ


166 
	sù_mªq
 {

167 
ö_addr
 
	mimr_mu…üddr
;

168 
ö_addr
 
	mimr_öãrÁ˚
;

171 
	sù_mªqn
 {

172 
ö_addr
 
	mimr_mu…üddr
;

173 
ö_addr
 
	mimr_addªss
;

174 
	mimr_ifödex
;

177 
	sù_mªq_sour˚
 {

178 
__be32
 
	mimr_mu…üddr
;

179 
__be32
 
	mimr_öãrÁ˚
;

180 
__be32
 
	mimr_sour˚addr
;

183 
	sù_msfûãr
 {

184 
__be32
 
	mimsf_mu…üddr
;

185 
__be32
 
	mimsf_öãrÁ˚
;

186 
__u32
 
	mimsf_fmode
;

187 
__u32
 
	mimsf_num§c
;

188 
__be32
 
	mimsf_¶i°
[1];

191 
	#IP_MSFILTER_SIZE
(
num§c
) \

192 ((
ù_msfûãr
Ë- (
__u32
) \

193 + (
num§c
Ë* (
__u32
))

	)

195 
	sgroup_ªq
 {

196 
__u32
 
	mgr_öãrÁ˚
;

197 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

200 
	sgroup_sour˚_ªq
 {

201 
__u32
 
	mg§_öãrÁ˚
;

202 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

203 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

206 
	sgroup_fûãr
 {

207 
__u32
 
	mgf_öãrÁ˚
;

208 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

209 
__u32
 
	mgf_fmode
;

210 
__u32
 
	mgf_num§c
;

211 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

214 
	#GROUP_FILTER_SIZE
(
num§c
) \

215 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

216 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

219 #i‡
__UAPI_DEF_IN_PKTINFO


220 
	sö_pktöfo
 {

221 
	mùi_ifödex
;

222 
ö_addr
 
	mùi_•ec_d°
;

223 
ö_addr
 
	mùi_addr
;

228 #i‡ 
__UAPI_DEF_SOCKADDR_IN


229 
	#__SOCK_SIZE__
 16

	)

230 
	ssockaddr_ö
 {

231 
__kî√l_ß_Ámûy_t
 
	msö_Ámûy
;

232 
__be16
 
	msö_p‹t
;

233 
ö_addr
 
	msö_addr
;

236 
	m__∑d
[
__SOCK_SIZE__
 - () -

237 (Ë- (
ö_addr
)];

239 
	#sö_zîo
 
__∑d


	)

242 #i‡
__UAPI_DEF_IN_CLASS


248 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

249 
	#IN_CLASSA_NET
 0xff000000

	)

250 
	#IN_CLASSA_NSHIFT
 24

	)

251 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

252 
	#IN_CLASSA_MAX
 128

	)

254 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

255 
	#IN_CLASSB_NET
 0xffff0000

	)

256 
	#IN_CLASSB_NSHIFT
 16

	)

257 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

258 
	#IN_CLASSB_MAX
 65536

	)

260 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

261 
	#IN_CLASSC_NET
 0xffffff00

	)

262 
	#IN_CLASSC_NSHIFT
 8

	)

263 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

265 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

266 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

267 
	#IN_MULTICAST_NET
 0xF0000000

	)

269 
	#IN_EXPERIMENTAL
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

270 
	#IN_BADCLASS
(
a
Ë
	`IN_EXPERIMENTAL
(◊))

	)

273 
	#INADDR_ANY
 ((Ë0x00000000)

	)

276 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

279 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

282 
	#IN_LOOPBACKNET
 127

	)

285 
	#INADDR_LOOPBACK
 0x7f000001

	)

286 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

289 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

290 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

291 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

292 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

296 
	~<asm/byã‹dî.h
>

	@include/linux/in6.h

21 #i‚de‡
_LINUX_IN6_H


22 
	#_LINUX_IN6_H


	)

24 
	~<löux/ty≥s.h
>

25 
	~<löux/libc-com∑t.h
>

31 #i‡
__UAPI_DEF_IN6_ADDR


32 
	sö6_addr
 {

34 
__u8
 
	mu6_addr8
[16];

35 #i‡
__UAPI_DEF_IN6_ADDR_ALT


36 
__be16
 
	mu6_addr16
[8];

37 
__be32
 
	mu6_addr32
[4];

39 } 
	mö6_u
;

40 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

41 #i‡
__UAPI_DEF_IN6_ADDR_ALT


42 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

43 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

48 #i‡
__UAPI_DEF_SOCKADDR_IN6


49 
	ssockaddr_ö6
 {

50 
	msö6_Ámûy
;

51 
__be16
 
	msö6_p‹t
;

52 
__be32
 
	msö6_Êowöfo
;

53 
ö6_addr
 
	msö6_addr
;

54 
__u32
 
	msö6_sc›e_id
;

58 #i‡
__UAPI_DEF_IPV6_MREQ


59 
	sùv6_mªq
 {

61 
ö6_addr
 
	mùv6mr_mu…üddr
;

64 
	mùv6mr_ifödex
;

68 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

70 
	sö6_Êowœbñ_ªq
 {

71 
ö6_addr
 
	mÊr_d°
;

72 
__be32
 
	mÊr_œbñ
;

73 
__u8
 
	mÊr_a˘i⁄
;

74 
__u8
 
	mÊr_sh¨e
;

75 
__u16
 
	mÊr_Êags
;

76 
__u16
 
	mÊr_expúes
;

77 
__u16
 
	mÊr_lögî
;

78 
__u32
 
	m__Êr_∑d
;

82 
	#IPV6_FL_A_GET
 0

	)

83 
	#IPV6_FL_A_PUT
 1

	)

84 
	#IPV6_FL_A_RENEW
 2

	)

86 
	#IPV6_FL_F_CREATE
 1

	)

87 
	#IPV6_FL_F_EXCL
 2

	)

88 
	#IPV6_FL_F_REFLECT
 4

	)

89 
	#IPV6_FL_F_REMOTE
 8

	)

91 
	#IPV6_FL_S_NONE
 0

	)

92 
	#IPV6_FL_S_EXCL
 1

	)

93 
	#IPV6_FL_S_PROCESS
 2

	)

94 
	#IPV6_FL_S_USER
 3

	)

95 
	#IPV6_FL_S_ANY
 255

	)

106 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

107 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

110 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

111 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

112 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

113 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

114 
	#IPV6_PRIORITY_BULK
 0x0400

	)

115 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

116 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

117 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

118 
	#IPV6_PRIORITY_8
 0x0800

	)

119 
	#IPV6_PRIORITY_9
 0x0900

	)

120 
	#IPV6_PRIORITY_10
 0x0a00

	)

121 
	#IPV6_PRIORITY_11
 0x0b00

	)

122 
	#IPV6_PRIORITY_12
 0x0c00

	)

123 
	#IPV6_PRIORITY_13
 0x0d00

	)

124 
	#IPV6_PRIORITY_14
 0x0e00

	)

125 
	#IPV6_PRIORITY_15
 0x0f00

	)

130 #i‡
__UAPI_DEF_IPPROTO_V6


131 
	#IPPROTO_HOPOPTS
 0

	)

132 
	#IPPROTO_ROUTING
 43

	)

133 
	#IPPROTO_FRAGMENT
 44

	)

134 
	#IPPROTO_ICMPV6
 58

	)

135 
	#IPPROTO_NONE
 59

	)

136 
	#IPPROTO_DSTOPTS
 60

	)

137 
	#IPPROTO_MH
 135

	)

143 
	#IPV6_TLV_PAD1
 0

	)

144 
	#IPV6_TLV_PADN
 1

	)

145 
	#IPV6_TLV_ROUTERALERT
 5

	)

146 
	#IPV6_TLV_JUMBO
 194

	)

147 
	#IPV6_TLV_HAO
 201

	)

152 #i‡
__UAPI_DEF_IPV6_OPTIONS


153 
	#IPV6_ADDRFORM
 1

	)

154 
	#IPV6_2292PKTINFO
 2

	)

155 
	#IPV6_2292HOPOPTS
 3

	)

156 
	#IPV6_2292DSTOPTS
 4

	)

157 
	#IPV6_2292RTHDR
 5

	)

158 
	#IPV6_2292PKTOPTIONS
 6

	)

159 
	#IPV6_CHECKSUM
 7

	)

160 
	#IPV6_2292HOPLIMIT
 8

	)

161 
	#IPV6_NEXTHOP
 9

	)

162 
	#IPV6_AUTHHDR
 10

	)

163 
	#IPV6_FLOWINFO
 11

	)

165 
	#IPV6_UNICAST_HOPS
 16

	)

166 
	#IPV6_MULTICAST_IF
 17

	)

167 
	#IPV6_MULTICAST_HOPS
 18

	)

168 
	#IPV6_MULTICAST_LOOP
 19

	)

169 
	#IPV6_ADD_MEMBERSHIP
 20

	)

170 
	#IPV6_DROP_MEMBERSHIP
 21

	)

171 
	#IPV6_ROUTER_ALERT
 22

	)

172 
	#IPV6_MTU_DISCOVER
 23

	)

173 
	#IPV6_MTU
 24

	)

174 
	#IPV6_RECVERR
 25

	)

175 
	#IPV6_V6ONLY
 26

	)

176 
	#IPV6_JOIN_ANYCAST
 27

	)

177 
	#IPV6_LEAVE_ANYCAST
 28

	)

180 
	#IPV6_PMTUDISC_DONT
 0

	)

181 
	#IPV6_PMTUDISC_WANT
 1

	)

182 
	#IPV6_PMTUDISC_DO
 2

	)

183 
	#IPV6_PMTUDISC_PROBE
 3

	)

187 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

191 
	#IPV6_PMTUDISC_OMIT
 5

	)

194 
	#IPV6_FLOWLABEL_MGR
 32

	)

195 
	#IPV6_FLOWINFO_SEND
 33

	)

197 
	#IPV6_IPSEC_POLICY
 34

	)

198 
	#IPV6_XFRM_POLICY
 35

	)

220 
	#IPV6_RECVPKTINFO
 49

	)

221 
	#IPV6_PKTINFO
 50

	)

222 
	#IPV6_RECVHOPLIMIT
 51

	)

223 
	#IPV6_HOPLIMIT
 52

	)

224 
	#IPV6_RECVHOPOPTS
 53

	)

225 
	#IPV6_HOPOPTS
 54

	)

226 
	#IPV6_RTHDRDSTOPTS
 55

	)

227 
	#IPV6_RECVRTHDR
 56

	)

228 
	#IPV6_RTHDR
 57

	)

229 
	#IPV6_RECVDSTOPTS
 58

	)

230 
	#IPV6_DSTOPTS
 59

	)

231 
	#IPV6_RECVPATHMTU
 60

	)

232 
	#IPV6_PATHMTU
 61

	)

233 
	#IPV6_DONTFRAG
 62

	)

235 
	#IPV6_USE_MIN_MTU
 63

	)

251 
	#IPV6_RECVTCLASS
 66

	)

252 
	#IPV6_TCLASS
 67

	)

265 
	#IPV6_AUTOFLOWLABEL
 70

	)

267 
	#IPV6_ADDR_PREFERENCES
 72

	)

269 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

270 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

271 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

272 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

273 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

274 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

275 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

278 
	#IPV6_MINHOPCOUNT
 73

	)

280 
	#IPV6_ORIGDSTADDR
 74

	)

281 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

282 
	#IPV6_TRANSPARENT
 75

	)

283 
	#IPV6_UNICAST_IF
 76

	)

	@include/linux/inet_diag.h

1 #i‚de‡
_INET_DIAG_H_


2 
	#_INET_DIAG_H_


	)

4 
	~<löux/ty≥s.h
>

7 
	#TCPDIAG_GETSOCK
 18

	)

8 
	#DCCPDIAG_GETSOCK
 19

	)

10 
	#INET_DIAG_GETSOCK_MAX
 24

	)

13 
	söë_düg_sockid
 {

14 
__be16
 
	midüg_•‹t
;

15 
__be16
 
	midüg_dp‹t
;

16 
__be32
 
	midüg_§c
[4];

17 
__be32
 
	midüg_d°
[4];

18 
__u32
 
	midüg_if
;

19 
__u32
 
	midüg_cookõ
[2];

20 
	#INET_DIAG_NOCOOKIE
 (~0U)

	)

25 
	söë_düg_ªq
 {

26 
__u8
 
	midüg_Ámûy
;

27 
__u8
 
	midüg_§c_Àn
;

28 
__u8
 
	midüg_d°_Àn
;

29 
__u8
 
	midüg_ext
;

31 
öë_düg_sockid
 
	mid
;

33 
__u32
 
	midüg_°©es
;

34 
__u32
 
	midüg_dbs
;

37 
	söë_düg_ªq_v2
 {

38 
__u8
 
	msdüg_Ámûy
;

39 
__u8
 
	msdüg_¥Ÿocﬁ
;

40 
__u8
 
	midüg_ext
;

41 
__u8
 
	m∑d
;

42 
__u32
 
	midüg_°©es
;

43 
öë_düg_sockid
 
	mid
;

47 
	mINET_DIAG_REQ_NONE
,

48 
	mINET_DIAG_REQ_BYTECODE
,

51 
	#INET_DIAG_REQ_MAX
 
INET_DIAG_REQ_BYTECODE


	)

59 
	söë_düg_bc_›
 {

60 
	mcode
;

61 
	myes
;

62 
	mno
;

66 
	mINET_DIAG_BC_NOP
,

67 
	mINET_DIAG_BC_JMP
,

68 
	mINET_DIAG_BC_S_GE
,

69 
	mINET_DIAG_BC_S_LE
,

70 
	mINET_DIAG_BC_D_GE
,

71 
	mINET_DIAG_BC_D_LE
,

72 
	mINET_DIAG_BC_AUTO
,

73 
	mINET_DIAG_BC_S_COND
,

74 
	mINET_DIAG_BC_D_COND
,

77 
	söë_düg_ho°c⁄d
 {

78 
__u8
 
	mÁmûy
;

79 
__u8
 
	m¥efix_Àn
;

80 
	mp‹t
;

81 
__be32
 
	maddr
[0];

86 
	söë_düg_msg
 {

87 
__u8
 
	midüg_Ámûy
;

88 
__u8
 
	midüg_°©e
;

89 
__u8
 
	midüg_timî
;

90 
__u8
 
	midüg_ªå™s
;

92 
öë_düg_sockid
 
	mid
;

94 
__u32
 
	midüg_expúes
;

95 
__u32
 
	midüg_rqueue
;

96 
__u32
 
	midüg_wqueue
;

97 
__u32
 
	midüg_uid
;

98 
__u32
 
	midüg_öode
;

104 
	mINET_DIAG_NONE
,

105 
	mINET_DIAG_MEMINFO
,

106 
	mINET_DIAG_INFO
,

107 
	mINET_DIAG_VEGASINFO
,

108 
	mINET_DIAG_CONG
,

109 
	mINET_DIAG_TOS
,

110 
	mINET_DIAG_TCLASS
,

111 
	mINET_DIAG_SKMEMINFO
,

112 
	mINET_DIAG_SHUTDOWN
,

113 
	mINET_DIAG_DCTCPINFO
,

114 
	mINET_DIAG_PROTOCOL
,

115 
	mINET_DIAG_SKV6ONLY
,

118 
	#INET_DIAG_MAX
 
INET_DIAG_SKV6ONLY


	)

122 
	söë_düg_memöfo
 {

123 
__u32
 
	midüg_rmem
;

124 
__u32
 
	midüg_wmem
;

125 
__u32
 
	midüg_fmem
;

126 
__u32
 
	midüg_tmem
;

131 
	st˝vegas_öfo
 {

132 
__u32
 
	mt˝v_íabÀd
;

133 
__u32
 
	mt˝v_πt˙t
;

134 
__u32
 
	mt˝v_πt
;

135 
__u32
 
	mt˝v_möπt
;

140 
	st˝_d˘˝_öfo
 {

141 
__u16
 
	md˘˝_íabÀd
;

142 
__u16
 
	md˘˝_˚_°©e
;

143 
__u32
 
	md˘˝_Æpha
;

144 
__u32
 
	md˘˝_ab_e˙
;

145 
__u32
 
	md˘˝_ab_tŸ
;

148 
	ut˝_cc_öfo
 {

149 
t˝vegas_öfo
 
	mvegas
;

150 
t˝_d˘˝_öfo
 
	md˘˝
;

	@include/linux/ip6_tunnel.h

1 #i‚de‡
_IP6_TUNNEL_H


2 
	#_IP6_TUNNEL_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#IPV6_TLV_TNL_ENCAP_LIMIT
 4

	)

7 
	#IPV6_DEFAULT_TNL_ENCAP_LIMIT
 4

	)

10 
	#IP6_TNL_F_IGN_ENCAP_LIMIT
 0x1

	)

12 
	#IP6_TNL_F_USE_ORIG_TCLASS
 0x2

	)

14 
	#IP6_TNL_F_USE_ORIG_FLOWLABEL
 0x4

	)

16 
	#IP6_TNL_F_MIP6_DEV
 0x8

	)

18 
	#IP6_TNL_F_RCV_DSCP_COPY
 0x10

	)

20 
	#IP6_TNL_F_USE_ORIG_FWMARK
 0x20

	)

22 
	sù6_äl_∑rm
 {

23 
	m«me
[
IFNAMSIZ
];

24 
	mlök
;

25 
__u8
 
	m¥Ÿo
;

26 
__u8
 
	míˇp_limô
;

27 
__u8
 
	mh›_limô
;

28 
__be32
 
	mÊowöfo
;

29 
__u32
 
	mÊags
;

30 
ö6_addr
 
	mœddr
;

31 
ö6_addr
 
	møddr
;

34 
	sù6_äl_∑rm2
 {

35 
	m«me
[
IFNAMSIZ
];

36 
	mlök
;

37 
__u8
 
	m¥Ÿo
;

38 
__u8
 
	míˇp_limô
;

39 
__u8
 
	mh›_limô
;

40 
__be32
 
	mÊowöfo
;

41 
__u32
 
	mÊags
;

42 
ö6_addr
 
	mœddr
;

43 
ö6_addr
 
	møddr
;

45 
__be16
 
	mi_Êags
;

46 
__be16
 
	mo_Êags
;

47 
__be32
 
	mi_key
;

48 
__be32
 
	mo_key
;

	@include/linux/l2tp.h

7 #i‚de‡
_LINUX_L2TP_H_


8 
	#_LINUX_L2TP_H_


	)

10 
	~<löux/ty≥s.h
>

11 
	~<löux/sockë.h
>

12 
	~<√töë/ö.h
>

14 
	#IPPROTO_L2TP
 115

	)

22 
	#__SOCK_SIZE__
 16

	)

23 
	ssockaddr_l2çù
 {

25 
__kî√l_ß_Ámûy_t
 
	ml2ç_Ámûy
;

26 
__be16
 
	ml2ç_unu£d
;

27 
ö_addr
 
	ml2ç_addr
;

29 
__u32
 
	ml2ç_c⁄n_id
;

32 
	m__∑d
[(
sockaddr
) -

33 (
__kî√l_ß_Ámûy_t
) -

34 (
__be16
Ë- (
ö_addr
) -

35 (
__u32
)];

44 
	ssockaddr_l2çù6
 {

46 
__kî√l_ß_Ámûy_t
 
	ml2ç_Ámûy
;

47 
__be16
 
	ml2ç_unu£d
;

48 
__be32
 
	ml2ç_Êowöfo
;

49 
ö6_addr
 
	ml2ç_addr
;

50 
__u32
 
	ml2ç_sc›e_id
;

51 
__u32
 
	ml2ç_c⁄n_id
;

74 
	mL2TP_CMD_NOOP
,

75 
	mL2TP_CMD_TUNNEL_CREATE
,

76 
	mL2TP_CMD_TUNNEL_DELETE
,

77 
	mL2TP_CMD_TUNNEL_MODIFY
,

78 
	mL2TP_CMD_TUNNEL_GET
,

79 
	mL2TP_CMD_SESSION_CREATE
,

80 
	mL2TP_CMD_SESSION_DELETE
,

81 
	mL2TP_CMD_SESSION_MODIFY
,

82 
	mL2TP_CMD_SESSION_GET
,

83 
	m__L2TP_CMD_MAX
,

86 
	#L2TP_CMD_MAX
 (
__L2TP_CMD_MAX
 - 1)

	)

92 
	mL2TP_ATTR_NONE
,

93 
	mL2TP_ATTR_PW_TYPE
,

94 
	mL2TP_ATTR_ENCAP_TYPE
,

95 
	mL2TP_ATTR_OFFSET
,

96 
	mL2TP_ATTR_DATA_SEQ
,

97 
	mL2TP_ATTR_L2SPEC_TYPE
,

98 
	mL2TP_ATTR_L2SPEC_LEN
,

99 
	mL2TP_ATTR_PROTO_VERSION
,

100 
	mL2TP_ATTR_IFNAME
,

101 
	mL2TP_ATTR_CONN_ID
,

102 
	mL2TP_ATTR_PEER_CONN_ID
,

103 
	mL2TP_ATTR_SESSION_ID
,

104 
	mL2TP_ATTR_PEER_SESSION_ID
,

105 
	mL2TP_ATTR_UDP_CSUM
,

106 
	mL2TP_ATTR_VLAN_ID
,

107 
	mL2TP_ATTR_COOKIE
,

108 
	mL2TP_ATTR_PEER_COOKIE
,

109 
	mL2TP_ATTR_DEBUG
,

110 
	mL2TP_ATTR_RECV_SEQ
,

111 
	mL2TP_ATTR_SEND_SEQ
,

112 
	mL2TP_ATTR_LNS_MODE
,

113 
	mL2TP_ATTR_USING_IPSEC
,

114 
	mL2TP_ATTR_RECV_TIMEOUT
,

115 
	mL2TP_ATTR_FD
,

116 
	mL2TP_ATTR_IP_SADDR
,

117 
	mL2TP_ATTR_IP_DADDR
,

118 
	mL2TP_ATTR_UDP_SPORT
,

119 
	mL2TP_ATTR_UDP_DPORT
,

120 
	mL2TP_ATTR_MTU
,

121 
	mL2TP_ATTR_MRU
,

122 
	mL2TP_ATTR_STATS
,

123 
	mL2TP_ATTR_IP6_SADDR
,

124 
	mL2TP_ATTR_IP6_DADDR
,

125 
	mL2TP_ATTR_UDP_ZERO_CSUM6_TX
,

126 
	mL2TP_ATTR_UDP_ZERO_CSUM6_RX
,

127 
	m__L2TP_ATTR_MAX
,

130 
	#L2TP_ATTR_MAX
 (
__L2TP_ATTR_MAX
 - 1)

	)

134 
	mL2TP_ATTR_STATS_NONE
,

135 
	mL2TP_ATTR_TX_PACKETS
,

136 
	mL2TP_ATTR_TX_BYTES
,

137 
	mL2TP_ATTR_TX_ERRORS
,

138 
	mL2TP_ATTR_RX_PACKETS
,

139 
	mL2TP_ATTR_RX_BYTES
,

140 
	mL2TP_ATTR_RX_SEQ_DISCARDS
,

141 
	mL2TP_ATTR_RX_OOS_PACKETS
,

142 
	mL2TP_ATTR_RX_ERRORS
,

143 
	m__L2TP_ATTR_STATS_MAX
,

146 
	#L2TP_ATTR_STATS_MAX
 (
__L2TP_ATTR_STATS_MAX
 - 1)

	)

148 
	el2ç_pwty≥
 {

149 
	mL2TP_PWTYPE_NONE
 = 0x0000,

150 
	mL2TP_PWTYPE_ETH_VLAN
 = 0x0004,

151 
	mL2TP_PWTYPE_ETH
 = 0x0005,

152 
	mL2TP_PWTYPE_PPP
 = 0x0007,

153 
	mL2TP_PWTYPE_PPP_AC
 = 0x0008,

154 
	mL2TP_PWTYPE_IP
 = 0x000b,

155 
	m__L2TP_PWTYPE_MAX


158 
	el2ç_l2•ec_ty≥
 {

159 
	mL2TP_L2SPECTYPE_NONE
,

160 
	mL2TP_L2SPECTYPE_DEFAULT
,

163 
	el2ç_íˇp_ty≥
 {

164 
	mL2TP_ENCAPTYPE_UDP
,

165 
	mL2TP_ENCAPTYPE_IP
,

168 
	el2ç_£qmode
 {

169 
	mL2TP_SEQ_NONE
 = 0,

170 
	mL2TP_SEQ_IP
 = 1,

171 
	mL2TP_SEQ_ALL
 = 2,

177 
	#L2TP_GENL_NAME
 "l2ç"

	)

178 
	#L2TP_GENL_VERSION
 0x1

	)

179 
	#L2TP_GENL_MCGROUP
 "l2ç"

	)

	@include/linux/libc-compat.h

48 #i‚de‡
_LIBC_COMPAT_H


49 
	#_LIBC_COMPAT_H


	)

52 #i‡
deföed
(
__GLIBC__
)

55 #i‡
deföed
(
_NETINET_IN_H
)

59 
	#__UAPI_DEF_IN_ADDR
 0

	)

60 
	#__UAPI_DEF_IN_IPPROTO
 0

	)

61 
	#__UAPI_DEF_IN_PKTINFO
 0

	)

62 
	#__UAPI_DEF_IP_MREQ
 0

	)

63 
	#__UAPI_DEF_SOCKADDR_IN
 0

	)

64 
	#__UAPI_DEF_IN_CLASS
 0

	)

66 
	#__UAPI_DEF_IN6_ADDR
 0

	)

71 #i‡
deföed
(
__USE_MISC
Ë|| deföed (
__USE_GNU
)

72 
	#__UAPI_DEF_IN6_ADDR_ALT
 0

	)

74 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

76 
	#__UAPI_DEF_SOCKADDR_IN6
 0

	)

77 
	#__UAPI_DEF_IPV6_MREQ
 0

	)

78 
	#__UAPI_DEF_IPPROTO_V6
 0

	)

79 
	#__UAPI_DEF_IPV6_OPTIONS
 0

	)

80 
	#__UAPI_DEF_IN6_PKTINFO
 0

	)

81 
	#__UAPI_DEF_IP6_MTUINFO
 0

	)

88 
	#__UAPI_DEF_IN_ADDR
 1

	)

89 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

90 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

91 
	#__UAPI_DEF_IP_MREQ
 1

	)

92 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

93 
	#__UAPI_DEF_IN_CLASS
 1

	)

95 
	#__UAPI_DEF_IN6_ADDR
 1

	)

98 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

99 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

100 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

101 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

102 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

103 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

104 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

109 #i‡
deföed
(
_SYS_XATTR_H
)

110 
	#__UAPI_DEF_XATTR
 0

	)

112 
	#__UAPI_DEF_XATTR
 1

	)

121 
	#__UAPI_DEF_IN_ADDR
 1

	)

122 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

123 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

124 
	#__UAPI_DEF_IP_MREQ
 1

	)

125 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

126 
	#__UAPI_DEF_IN_CLASS
 1

	)

129 
	#__UAPI_DEF_IN6_ADDR
 1

	)

130 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

131 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

132 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

133 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

134 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

135 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

136 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

139 
	#__UAPI_DEF_XATTR
 1

	)

	@include/linux/mpls.h

1 #i‚de‡
_MPLS_H


2 
	#_MPLS_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

21 
	sm∂s_œbñ
 {

22 
__be32
 
	míåy
;

25 
	#MPLS_LS_LABEL_MASK
 0xFFFFF000

	)

26 
	#MPLS_LS_LABEL_SHIFT
 12

	)

27 
	#MPLS_LS_TC_MASK
 0x00000E00

	)

28 
	#MPLS_LS_TC_SHIFT
 9

	)

29 
	#MPLS_LS_S_MASK
 0x00000100

	)

30 
	#MPLS_LS_S_SHIFT
 8

	)

31 
	#MPLS_LS_TTL_MASK
 0x000000FF

	)

32 
	#MPLS_LS_TTL_SHIFT
 0

	)

35 
	#MPLS_LABEL_IPV4NULL
 0

	)

36 
	#MPLS_LABEL_RTALERT
 1

	)

37 
	#MPLS_LABEL_IPV6NULL
 2

	)

38 
	#MPLS_LABEL_IMPLNULL
 3

	)

39 
	#MPLS_LABEL_ENTROPY
 7

	)

40 
	#MPLS_LABEL_GAL
 13

	)

41 
	#MPLS_LABEL_OAMALERT
 14

	)

42 
	#MPLS_LABEL_EXTENSION
 15

	)

44 
	#MPLS_LABEL_FIRST_UNRESERVED
 16

	)

	@include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	mNDA_VLAN
,

24 
	mNDA_PORT
,

25 
	mNDA_VNI
,

26 
	mNDA_IFINDEX
,

27 
	mNDA_MASTER
,

28 
	mNDA_LINK_NETNSID
,

29 
	m__NDA_MAX


32 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

38 
	#NTF_USE
 0x01

	)

39 
	#NTF_SELF
 0x02

	)

40 
	#NTF_MASTER
 0x04

	)

41 
	#NTF_PROXY
 0x08

	)

42 
	#NTF_EXT_LEARNED
 0x10

	)

43 
	#NTF_ROUTER
 0x80

	)

49 
	#NUD_INCOMPLETE
 0x01

	)

50 
	#NUD_REACHABLE
 0x02

	)

51 
	#NUD_STALE
 0x04

	)

52 
	#NUD_DELAY
 0x08

	)

53 
	#NUD_PROBE
 0x10

	)

54 
	#NUD_FAILED
 0x20

	)

57 
	#NUD_NOARP
 0x40

	)

58 
	#NUD_PERMANENT
 0x80

	)

59 
	#NUD_NONE
 0x00

	)

66 
	snda_ˇcheöfo
 {

67 
__u32
 
	mndm_c⁄fúmed
;

68 
__u32
 
	mndm_u£d
;

69 
__u32
 
	mndm_upd©ed
;

70 
__u32
 
	mndm_ªf˙t
;

98 
	sndt_°©s
 {

99 
__u64
 
	mndts_Ælocs
;

100 
__u64
 
	mndts_de°roys
;

101 
__u64
 
	mndts_hash_grows
;

102 
__u64
 
	mndts_ªs_Áûed
;

103 
__u64
 
	mndts_lookups
;

104 
__u64
 
	mndts_hôs
;

105 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

106 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

107 
__u64
 
	mndts_≥riodic_gc_runs
;

108 
__u64
 
	mndts_f‹˚d_gc_runs
;

109 
__u64
 
	mndts_èbÀ_fuŒs
;

113 
	mNDTPA_UNSPEC
,

114 
	mNDTPA_IFINDEX
,

115 
	mNDTPA_REFCNT
,

116 
	mNDTPA_REACHABLE_TIME
,

117 
	mNDTPA_BASE_REACHABLE_TIME
,

118 
	mNDTPA_RETRANS_TIME
,

119 
	mNDTPA_GC_STALETIME
,

120 
	mNDTPA_DELAY_PROBE_TIME
,

121 
	mNDTPA_QUEUE_LEN
,

122 
	mNDTPA_APP_PROBES
,

123 
	mNDTPA_UCAST_PROBES
,

124 
	mNDTPA_MCAST_PROBES
,

125 
	mNDTPA_ANYCAST_DELAY
,

126 
	mNDTPA_PROXY_DELAY
,

127 
	mNDTPA_PROXY_QLEN
,

128 
	mNDTPA_LOCKTIME
,

129 
	mNDTPA_QUEUE_LENBYTES
,

130 
	mNDTPA_MCAST_REPROBES
,

131 
	m__NDTPA_MAX


133 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

135 
	sndtmsg
 {

136 
__u8
 
	mndtm_Ámûy
;

137 
__u8
 
	mndtm_∑d1
;

138 
__u16
 
	mndtm_∑d2
;

141 
	sndt_c⁄fig
 {

142 
__u16
 
	mndtc_key_Àn
;

143 
__u16
 
	mndtc_íåy_size
;

144 
__u32
 
	mndtc_íåõs
;

145 
__u32
 
	mndtc_œ°_Êush
;

146 
__u32
 
	mndtc_œ°_ønd
;

147 
__u32
 
	mndtc_hash_∫d
;

148 
__u32
 
	mndtc_hash_mask
;

149 
__u32
 
	mndtc_hash_chaö_gc
;

150 
__u32
 
	mndtc_¥oxy_qÀn
;

154 
	mNDTA_UNSPEC
,

155 
	mNDTA_NAME
,

156 
	mNDTA_THRESH1
,

157 
	mNDTA_THRESH2
,

158 
	mNDTA_THRESH3
,

159 
	mNDTA_CONFIG
,

160 
	mNDTA_PARMS
,

161 
	mNDTA_STATS
,

162 
	mNDTA_GC_INTERVAL
,

163 
	m__NDTA_MAX


165 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@include/linux/net_namespace.h

8 #i‚de‡
_LINUX_NET_NAMESPACE_H_


9 
	#_LINUX_NET_NAMESPACE_H_


	)

13 
	mNETNSA_NONE
,

14 
	#NETNSA_NSID_NOT_ASSIGNED
 -1

	)

15 
	mNETNSA_NSID
,

16 
	mNETNSA_PID
,

17 
	mNETNSA_FD
,

18 
	m__NETNSA_MAX
,

21 
	#NETNSA_MAX
 (
__NETNSA_MAX
 - 1)

	)

	@include/linux/netconf.h

1 #i‚de‡
_LINUX_NETCONF_H_


2 
	#_LINUX_NETCONF_H_


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	s√tc⁄fmsg
 {

8 
__u8
 
	mncm_Ámûy
;

12 
	mNETCONFA_UNSPEC
,

13 
	mNETCONFA_IFINDEX
,

14 
	mNETCONFA_FORWARDING
,

15 
	mNETCONFA_RP_FILTER
,

16 
	mNETCONFA_MC_FORWARDING
,

17 
	mNETCONFA_PROXY_NEIGH
,

18 
	mNETCONFA_IGNORE_ROUTES_WITH_LINKDOWN
,

19 
	m__NETCONFA_MAX


21 
	#NETCONFA_MAX
 (
__NETCONFA_MAX
 - 1)

	)

23 
	#NETCONFA_IFINDEX_ALL
 -1

	)

24 
	#NETCONFA_IFINDEX_DEFAULT
 -2

	)

	@include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

37 
	#INIT_NETDEV_GROUP
 0

	)

41 
	#NET_NAME_UNKNOWN
 0

	)

42 
	#NET_NAME_ENUM
 1

	)

43 
	#NET_NAME_PREDICTABLE
 2

	)

44 
	#NET_NAME_USER
 3

	)

45 
	#NET_NAME_RENAMED
 4

	)

49 
	mIF_PORT_UNKNOWN
 = 0,

50 
	mIF_PORT_10BASE2
,

51 
	mIF_PORT_10BASET
,

52 
	mIF_PORT_AUI
,

53 
	mIF_PORT_100BASET
,

54 
	mIF_PORT_100BASETX
,

55 
	mIF_PORT_100BASEFX


59 
	#NET_ADDR_PERM
 0

	)

60 
	#NET_ADDR_RANDOM
 1

	)

61 
	#NET_ADDR_STOLEN
 2

	)

62 
	#NET_ADDR_SET
 3

	)

	@include/linux/netfilter.h

1 #i‚de‡
__LINUX_NETFILTER_H


2 
	#__LINUX_NETFILTER_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<löux/sys˘l.h
>

7 
	~<löux/ö.h
>

8 
	~<löux/ö6.h
>

11 
	#NF_DROP
 0

	)

12 
	#NF_ACCEPT
 1

	)

13 
	#NF_STOLEN
 2

	)

14 
	#NF_QUEUE
 3

	)

15 
	#NF_REPEAT
 4

	)

16 
	#NF_STOP
 5

	)

17 
	#NF_MAX_VERDICT
 
NF_STOP


	)

22 
	#NF_VERDICT_MASK
 0x000000ff

	)

25 
	#NF_VERDICT_FLAG_QUEUE_BYPASS
 0x00008000

	)

28 
	#NF_VERDICT_QMASK
 0xffff0000

	)

29 
	#NF_VERDICT_QBITS
 16

	)

31 
	#NF_QUEUE_NR
(
x
Ë((((xË<< 16Ë& 
NF_VERDICT_QMASK
Ë| 
NF_QUEUE
)

	)

33 
	#NF_DROP_ERR
(
x
Ë(((-xË<< 16Ë| 
NF_DROP
)

	)

38 
	#NFC_UNKNOWN
 0x4000

	)

39 
	#NFC_ALTERED
 0x8000

	)

42 
	#NF_VERDICT_BITS
 16

	)

44 
	enf_öë_hooks
 {

45 
	mNF_INET_PRE_ROUTING
,

46 
	mNF_INET_LOCAL_IN
,

47 
	mNF_INET_FORWARD
,

48 
	mNF_INET_LOCAL_OUT
,

49 
	mNF_INET_POST_ROUTING
,

50 
	mNF_INET_NUMHOOKS


53 
	enf_dev_hooks
 {

54 
	mNF_NETDEV_INGRESS
,

55 
	mNF_NETDEV_NUMHOOKS


59 
	mNFPROTO_UNSPEC
 = 0,

60 
	mNFPROTO_INET
 = 1,

61 
	mNFPROTO_IPV4
 = 2,

62 
	mNFPROTO_ARP
 = 3,

63 
	mNFPROTO_NETDEV
 = 5,

64 
	mNFPROTO_BRIDGE
 = 7,

65 
	mNFPROTO_IPV6
 = 10,

66 
	mNFPROTO_DECNET
 = 12,

67 
	mNFPROTO_NUMPROTO
,

70 
	unf_öë_addr
 {

71 
__u32
 
	mÆl
[4];

72 
__be32
 
	mù
;

73 
__be32
 
	mù6
[4];

74 
ö_addr
 
	mö
;

75 
ö6_addr
 
	mö6
;

	@include/linux/netfilter/x_tables.h

1 #i‚de‡
_X_TABLES_H


2 
	#_X_TABLES_H


	)

3 
	~<löux/kî√l.h
>

4 
	~<löux/ty≥s.h
>

6 
	#XT_FUNCTION_MAXNAMELEN
 30

	)

7 
	#XT_EXTENSION_MAXNAMELEN
 29

	)

8 
	#XT_TABLE_MAXNAMELEN
 32

	)

10 
	sxt_íåy_m©ch
 {

13 
__u16
 
	mm©ch_size
;

16 
	m«me
[
XT_EXTENSION_MAXNAMELEN
];

17 
__u8
 
	mªvisi⁄
;

18 } 
	mu£r
;

20 
__u16
 
	mm©ch_size
;

23 
xt_m©ch
 *
	mm©ch
;

24 } 
	mkî√l
;

27 
__u16
 
	mm©ch_size
;

28 } 
	mu
;

30 
	md©a
[0];

33 
	sxt_íåy_èrgë
 {

36 
__u16
 
	mèrgë_size
;

39 
	m«me
[
XT_EXTENSION_MAXNAMELEN
];

40 
__u8
 
	mªvisi⁄
;

41 } 
	mu£r
;

43 
__u16
 
	mèrgë_size
;

46 
xt_èrgë
 *
	mèrgë
;

47 } 
	mkî√l
;

50 
__u16
 
	mèrgë_size
;

51 } 
	mu
;

53 
	md©a
[0];

56 
	#XT_TARGET_INIT
(
__«me
, 
__size
) \

58 .
èrgë
.
u
.
u£r
 = { \

59 .
èrgë_size
 = 
	`XT_ALIGN
(
__size
), \

60 .
«me
 = 
__«me
, \

62 }

	)

64 
	sxt_°™d¨d_èrgë
 {

65 
xt_íåy_èrgë
 
	mèrgë
;

66 
	mvîdi˘
;

69 
	sxt_îr‹_èrgë
 {

70 
xt_íåy_èrgë
 
	mèrgë
;

71 
	mîr‹«me
[
XT_FUNCTION_MAXNAMELEN
];

76 
	sxt_gë_ªvisi⁄
 {

77 
	m«me
[
XT_EXTENSION_MAXNAMELEN
];

78 
__u8
 
	mªvisi⁄
;

82 
	#XT_CONTINUE
 0xFFFFFFFF

	)

85 
	#XT_RETURN
 (-
NF_REPEAT
 - 1)

	)

92 
	s_xt_Æign
 {

93 
__u8
 
	mu8
;

94 
__u16
 
	mu16
;

95 
__u32
 
	mu32
;

96 
__u64
 
	mu64
;

99 
	#XT_ALIGN
(
s
Ë
	`__ALIGN_KERNEL
((s), 
	`__Æignof__
(
_xt_Æign
))

	)

102 
	#XT_STANDARD_TARGET
 ""

	)

104 
	#XT_ERROR_TARGET
 "ERROR"

	)

106 
	#SET_COUNTER
(
c
,
b
,
p
Ëdÿ{ (c).
b˙t
 = (b); (c).
p˙t
 = (p); } 0)

	)

107 
	#ADD_COUNTER
(
c
,
b
,
p
Ëdÿ{ (c).
b˙t
 +(b); (c).
p˙t
 +’); } 0)

	)

109 
	sxt_cou¡îs
 {

110 
__u64
 
	mp˙t
, 
	mb˙t
;

114 
	sxt_cou¡îs_öfo
 {

116 
	m«me
[
XT_TABLE_MAXNAMELEN
];

118 
	mnum_cou¡îs
;

121 
xt_cou¡îs
 
	mcou¡îs
[0];

124 
	#XT_INV_PROTO
 0x40

	)

127 
	#XT_MATCH_ITERATE
(
ty≥
, 
e
, 
‚
, 
¨gs
...) \

129 
__i
; \

130 
__ªt
 = 0; \

131 
xt_íåy_m©ch
 *
__m
; \

133 
__i
 = (
ty≥
); \

134 
__i
 < (
e
)->
èrgë_off£t
; \

135 
__i
 +
__m
->
u
.
m©ch_size
) { \

136 
__m
 = (*)
e
 + 
__i
; \

138 
__ªt
 = 
	`‚
(
__m
 , ## 
¨gs
); \

139 i‡(
__ªt
 != 0) \

142 
__ªt
; \

143 })

	)

146 
	#XT_ENTRY_ITERATE_CONTINUE
(
ty≥
, 
íåõs
, 
size
, 
n
, 
‚
, 
¨gs
...) \

148 
__i
, 
__n
; \

149 
__ªt
 = 0; \

150 
ty≥
 *
__íåy
; \

152 
__i
 = 0, 
__n
 = 0; __ò< (
size
); \

153 
__i
 +
__íåy
->
√xt_off£t
, 
__n
++) { \

154 
__íåy
 = (*)(
íåõs
Ë+ 
__i
; \

155 i‡(
__n
 < 
n
) \

158 
__ªt
 = 
	`‚
(
__íåy
 , ## 
¨gs
); \

159 i‡(
__ªt
 != 0) \

162 
__ªt
; \

163 })

	)

166 
	#XT_ENTRY_ITERATE
(
ty≥
, 
íåõs
, 
size
, 
‚
, 
¨gs
...) \

167 
	`XT_ENTRY_ITERATE_CONTINUE
(
ty≥
, 
íåõs
, 
size
, 0, 
‚
, 
¨gs
)

	)

171 
	#xt_íåy_f‹óch
(
pos
, 
ehód
, 
esize
) \

172 (
pos
Ë(
	`ty≥of
’os))(
ehód
); \

173 (
pos
Ë< (
	`ty≥of
’os))((*)(
ehód
Ë+ (
esize
)); \

174 (
pos
Ë(
	`ty≥of
’os))((*)’osË+ (pos)->
√xt_off£t
))

	)

177 
	#xt_em©ch_f‹óch
(
pos
, 
íåy
) \

178 (
pos
Ë(
xt_íåy_m©ch
 *)
íåy
->
ñems
; \

179 (
pos
Ë< (
xt_íåy_m©ch
 *)((*)(
íåy
) + \

180 (
íåy
)->
èrgë_off£t
); \

181 (
pos
Ë(
xt_íåy_m©ch
 *)((*)(pos) + \

182 (
pos
)->
u
.
m©ch_size
))

	)

	@include/linux/netfilter/xt_tcpudp.h

1 #i‚de‡
_XT_TCPUDP_H


2 
	#_XT_TCPUDP_H


	)

4 
	~<löux/ty≥s.h
>

7 
	sxt_t˝
 {

8 
__u16
 
	m•ts
[2];

9 
__u16
 
	md±s
[2];

10 
__u8
 
	m›ti⁄
;

11 
__u8
 
	mÊg_mask
;

12 
__u8
 
	mÊg_cmp
;

13 
__u8
 
	mövÊags
;

17 
	#XT_TCP_INV_SRCPT
 0x01

	)

18 
	#XT_TCP_INV_DSTPT
 0x02

	)

19 
	#XT_TCP_INV_FLAGS
 0x04

	)

20 
	#XT_TCP_INV_OPTION
 0x08

	)

21 
	#XT_TCP_INV_MASK
 0x0F

	)

24 
	sxt_udp
 {

25 
__u16
 
	m•ts
[2];

26 
__u16
 
	md±s
[2];

27 
__u8
 
	mövÊags
;

31 
	#XT_UDP_INV_SRCPT
 0x01

	)

32 
	#XT_UDP_INV_DSTPT
 0x02

	)

33 
	#XT_UDP_INV_MASK
 0x03

	)

	@include/linux/netfilter_ipv4.h

4 #i‚de‡
__LINUX_IP_NETFILTER_H


5 
	#__LINUX_IP_NETFILTER_H


	)

8 
	~<löux/√tfûãr.h
>

12 
	~<limôs.h
>

16 
	#NFC_IP_SRC
 0x0001

	)

18 
	#NFC_IP_DST
 0x0002

	)

20 
	#NFC_IP_IF_IN
 0x0004

	)

22 
	#NFC_IP_IF_OUT
 0x0008

	)

24 
	#NFC_IP_TOS
 0x0010

	)

26 
	#NFC_IP_PROTO
 0x0020

	)

28 
	#NFC_IP_OPTIONS
 0x0040

	)

30 
	#NFC_IP_FRAG
 0x0080

	)

34 
	#NFC_IP_TCPFLAGS
 0x0100

	)

36 
	#NFC_IP_SRC_PT
 0x0200

	)

38 
	#NFC_IP_DST_PT
 0x0400

	)

40 
	#NFC_IP_PROTO_UNKNOWN
 0x2000

	)

44 
	#NF_IP_PRE_ROUTING
 0

	)

46 
	#NF_IP_LOCAL_IN
 1

	)

48 
	#NF_IP_FORWARD
 2

	)

50 
	#NF_IP_LOCAL_OUT
 3

	)

52 
	#NF_IP_POST_ROUTING
 4

	)

53 
	#NF_IP_NUMHOOKS
 5

	)

55 
	enf_ù_hook_¥i‹ôõs
 {

56 
	mNF_IP_PRI_FIRST
 = 
INT_MIN
,

57 
	mNF_IP_PRI_CONNTRACK_DEFRAG
 = -400,

58 
	mNF_IP_PRI_RAW
 = -300,

59 
	mNF_IP_PRI_SELINUX_FIRST
 = -225,

60 
	mNF_IP_PRI_CONNTRACK
 = -200,

61 
	mNF_IP_PRI_MANGLE
 = -150,

62 
	mNF_IP_PRI_NAT_DST
 = -100,

63 
	mNF_IP_PRI_FILTER
 = 0,

64 
	mNF_IP_PRI_SECURITY
 = 50,

65 
	mNF_IP_PRI_NAT_SRC
 = 100,

66 
	mNF_IP_PRI_SELINUX_LAST
 = 225,

67 
	mNF_IP_PRI_CONNTRACK_HELPER
 = 300,

68 
	mNF_IP_PRI_CONNTRACK_CONFIRM
 = 
INT_MAX
,

69 
	mNF_IP_PRI_LAST
 = 
INT_MAX
,

76 
	#SO_ORIGINAL_DST
 80

	)

	@include/linux/netfilter_ipv4/ip_tables.h

15 #i‚de‡
_IPTABLES_H


16 
	#_IPTABLES_H


	)

18 
	~<löux/ty≥s.h
>

20 
	~<löux/√tfûãr_ùv4.h
>

22 
	~<löux/√tfûãr/x_èbÀs.h
>

24 
	#IPT_FUNCTION_MAXNAMELEN
 
XT_FUNCTION_MAXNAMELEN


	)

25 
	#IPT_TABLE_MAXNAMELEN
 
XT_TABLE_MAXNAMELEN


	)

26 
	#ùt_m©ch
 
xt_m©ch


	)

27 
	#ùt_èrgë
 
xt_èrgë


	)

28 
	#ùt_èbÀ
 
xt_èbÀ


	)

29 
	#ùt_gë_ªvisi⁄
 
xt_gë_ªvisi⁄


	)

30 
	#ùt_íåy_m©ch
 
xt_íåy_m©ch


	)

31 
	#ùt_íåy_èrgë
 
xt_íåy_èrgë


	)

32 
	#ùt_°™d¨d_èrgë
 
xt_°™d¨d_èrgë


	)

33 
	#ùt_îr‹_èrgë
 
xt_îr‹_èrgë


	)

34 
	#ùt_cou¡îs
 
xt_cou¡îs


	)

35 
	#IPT_CONTINUE
 
XT_CONTINUE


	)

36 
	#IPT_RETURN
 
XT_RETURN


	)

39 
	~<löux/√tfûãr/xt_t˝udp.h
>

40 
	#ùt_udp
 
xt_udp


	)

41 
	#ùt_t˝
 
xt_t˝


	)

42 
	#IPT_TCP_INV_SRCPT
 
XT_TCP_INV_SRCPT


	)

43 
	#IPT_TCP_INV_DSTPT
 
XT_TCP_INV_DSTPT


	)

44 
	#IPT_TCP_INV_FLAGS
 
XT_TCP_INV_FLAGS


	)

45 
	#IPT_TCP_INV_OPTION
 
XT_TCP_INV_OPTION


	)

46 
	#IPT_TCP_INV_MASK
 
XT_TCP_INV_MASK


	)

47 
	#IPT_UDP_INV_SRCPT
 
XT_UDP_INV_SRCPT


	)

48 
	#IPT_UDP_INV_DSTPT
 
XT_UDP_INV_DSTPT


	)

49 
	#IPT_UDP_INV_MASK
 
XT_UDP_INV_MASK


	)

52 
	#ùt_cou¡îs_öfo
 
xt_cou¡îs_öfo


	)

54 
	#IPT_STANDARD_TARGET
 
XT_STANDARD_TARGET


	)

56 
	#IPT_ERROR_TARGET
 
XT_ERROR_TARGET


	)

59 
	#IPT_MATCH_ITERATE
(
e
, 
‚
, 
¨gs
...) \

60 
	`XT_MATCH_ITERATE
(
ùt_íåy
, 
e
, 
‚
, ## 
¨gs
)

	)

63 
	#IPT_ENTRY_ITERATE
(
íåõs
, 
size
, 
‚
, 
¨gs
...) \

64 
	`XT_ENTRY_ITERATE
(
ùt_íåy
, 
íåõs
, 
size
, 
‚
, ## 
¨gs
)

	)

67 
	sùt_ù
 {

69 
ö_addr
 
	m§c
, 
	md°
;

71 
ö_addr
 
	msmsk
, 
	mdmsk
;

72 
	möiÁ˚
[
IFNAMSIZ
], 
	moutiÁ˚
[IFNAMSIZ];

73 
	möiÁ˚_mask
[
IFNAMSIZ
], 
	moutiÁ˚_mask
[IFNAMSIZ];

76 
__u16
 
	m¥Ÿo
;

79 
__u8
 
	mÊags
;

81 
__u8
 
	mövÊags
;

85 
	#IPT_F_FRAG
 0x01

	)

86 
	#IPT_F_GOTO
 0x02

	)

87 
	#IPT_F_MASK
 0x03

	)

90 
	#IPT_INV_VIA_IN
 0x01

	)

91 
	#IPT_INV_VIA_OUT
 0x02

	)

92 
	#IPT_INV_TOS
 0x04

	)

93 
	#IPT_INV_SRCIP
 0x08

	)

94 
	#IPT_INV_DSTIP
 0x10

	)

95 
	#IPT_INV_FRAG
 0x20

	)

96 
	#IPT_INV_PROTO
 
XT_INV_PROTO


	)

97 
	#IPT_INV_MASK
 0x7F

	)

102 
	sùt_íåy
 {

103 
ùt_ù
 
	mù
;

106 
	mnfˇche
;

109 
__u16
 
	mèrgë_off£t
;

111 
__u16
 
	m√xt_off£t
;

114 
	mcome‰om
;

117 
xt_cou¡îs
 
	mcou¡îs
;

120 
	mñems
[0];

130 
	#IPT_BASE_CTL
 64

	)

132 
	#IPT_SO_SET_REPLACE
 (
IPT_BASE_CTL
)

	)

133 
	#IPT_SO_SET_ADD_COUNTERS
 (
IPT_BASE_CTL
 + 1)

	)

134 
	#IPT_SO_SET_MAX
 
IPT_SO_SET_ADD_COUNTERS


	)

136 
	#IPT_SO_GET_INFO
 (
IPT_BASE_CTL
)

	)

137 
	#IPT_SO_GET_ENTRIES
 (
IPT_BASE_CTL
 + 1)

	)

138 
	#IPT_SO_GET_REVISION_MATCH
 (
IPT_BASE_CTL
 + 2)

	)

139 
	#IPT_SO_GET_REVISION_TARGET
 (
IPT_BASE_CTL
 + 3)

	)

140 
	#IPT_SO_GET_MAX
 
IPT_SO_GET_REVISION_TARGET


	)

143 
	sùt_icmp
 {

144 
__u8
 
	mty≥
;

145 
__u8
 
	mcode
[2];

146 
__u8
 
	mövÊags
;

150 
	#IPT_ICMP_INV
 0x01

	)

153 
	sùt_gëöfo
 {

155 
	m«me
[
XT_TABLE_MAXNAMELEN
];

159 
	mvÆid_hooks
;

162 
	mhook_íåy
[
NF_INET_NUMHOOKS
];

165 
	mundîÊow
[
NF_INET_NUMHOOKS
];

168 
	mnum_íåõs
;

171 
	msize
;

175 
	sùt_ª∂a˚
 {

177 
	m«me
[
XT_TABLE_MAXNAMELEN
];

181 
	mvÆid_hooks
;

184 
	mnum_íåõs
;

187 
	msize
;

190 
	mhook_íåy
[
NF_INET_NUMHOOKS
];

193 
	mundîÊow
[
NF_INET_NUMHOOKS
];

197 
	mnum_cou¡îs
;

199 
xt_cou¡îs
 *
	mcou¡îs
;

202 
ùt_íåy
 
	míåõs
[0];

206 
	sùt_gë_íåõs
 {

208 
	m«me
[
XT_TABLE_MAXNAMELEN
];

211 
	msize
;

214 
ùt_íåy
 
	míåyèbÀ
[0];

218 
__ölöe__
 
xt_íåy_èrgë
 *

219 
	$ùt_gë_èrgë
(
ùt_íåy
 *
e
)

221  (*)
e
 +É->
èrgë_off£t
;

222 
	}
}

	@include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

59 
	#NLM_F_ROOT
 0x100

	)

60 
	#NLM_F_MATCH
 0x200

	)

61 
	#NLM_F_ATOMIC
 0x400

	)

62 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

65 
	#NLM_F_REPLACE
 0x100

	)

66 
	#NLM_F_EXCL
 0x200

	)

67 
	#NLM_F_CREATE
 0x400

	)

68 
	#NLM_F_APPEND
 0x800

	)

79 
	#NLMSG_ALIGNTO
 4U

	)

80 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

81 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

82 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

83 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

84 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

85 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

86 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

87 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

88 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

90 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

92 
	#NLMSG_NOOP
 0x1

	)

93 
	#NLMSG_ERROR
 0x2

	)

94 
	#NLMSG_DONE
 0x3

	)

95 
	#NLMSG_OVERRUN
 0x4

	)

97 
	#NLMSG_MIN_TYPE
 0x10

	)

99 
	s∆msgîr
 {

100 
	mîr‹
;

101 
∆msghdr
 
	mmsg
;

104 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

105 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

106 
	#NETLINK_PKTINFO
 3

	)

107 
	#NETLINK_BROADCAST_ERROR
 4

	)

108 
	#NETLINK_NO_ENOBUFS
 5

	)

109 
	#NETLINK_RX_RING
 6

	)

110 
	#NETLINK_TX_RING
 7

	)

111 
	#NETLINK_LISTEN_ALL_NSID
 8

	)

112 
	#NETLINK_LIST_MEMBERSHIPS
 9

	)

113 
	#NETLINK_CAP_ACK
 10

	)

115 
	s∆_pktöfo
 {

116 
__u32
 
	mgroup
;

119 
	s∆_mm≠_ªq
 {

120 
	mnm_block_size
;

121 
	mnm_block_ƒ
;

122 
	mnm_‰ame_size
;

123 
	mnm_‰ame_ƒ
;

126 
	s∆_mm≠_hdr
 {

127 
	mnm_°©us
;

128 
	mnm_Àn
;

129 
__u32
 
	mnm_group
;

131 
__u32
 
	mnm_pid
;

132 
__u32
 
	mnm_uid
;

133 
__u32
 
	mnm_gid
;

136 
	e∆_mm≠_°©us
 {

137 
	mNL_MMAP_STATUS_UNUSED
,

138 
	mNL_MMAP_STATUS_RESERVED
,

139 
	mNL_MMAP_STATUS_VALID
,

140 
	mNL_MMAP_STATUS_COPY
,

141 
	mNL_MMAP_STATUS_SKIP
,

144 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

145 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

146 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

148 
	#NET_MAJOR
 36

	)

151 
	mNETLINK_UNCONNECTED
 = 0,

152 
	mNETLINK_CONNECTED
,

164 
	s∆©å
 {

165 
__u16
 
	m∆a_Àn
;

166 
__u16
 
	m∆a_ty≥
;

179 
	#NLA_F_NESTED
 (1 << 15)

	)

180 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

181 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

183 
	#NLA_ALIGNTO
 4

	)

184 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

185 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@include/linux/netlink_diag.h

1 #i‚de‡
__NETLINK_DIAG_H__


2 
	#__NETLINK_DIAG_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	s√éök_düg_ªq
 {

7 
__u8
 
	msdüg_Ámûy
;

8 
__u8
 
	msdüg_¥Ÿocﬁ
;

9 
__u16
 
	m∑d
;

10 
__u32
 
	mndüg_öo
;

11 
__u32
 
	mndüg_show
;

12 
__u32
 
	mndüg_cookõ
[2];

15 
	s√éök_düg_msg
 {

16 
__u8
 
	mndüg_Ámûy
;

17 
__u8
 
	mndüg_ty≥
;

18 
__u8
 
	mndüg_¥Ÿocﬁ
;

19 
__u8
 
	mndüg_°©e
;

21 
__u32
 
	mndüg_p‹tid
;

22 
__u32
 
	mndüg_d°_p‹tid
;

23 
__u32
 
	mndüg_d°_group
;

24 
__u32
 
	mndüg_öo
;

25 
__u32
 
	mndüg_cookõ
[2];

28 
	s√éök_düg_rög
 {

29 
__u32
 
	mndr_block_size
;

30 
__u32
 
	mndr_block_ƒ
;

31 
__u32
 
	mndr_‰ame_size
;

32 
__u32
 
	mndr_‰ame_ƒ
;

37 
	mNETLINK_DIAG_MEMINFO
,

38 
	mNETLINK_DIAG_GROUPS
,

39 
	mNETLINK_DIAG_RX_RING
,

40 
	mNETLINK_DIAG_TX_RING
,

42 
	m__NETLINK_DIAG_MAX
,

45 
	#NETLINK_DIAG_MAX
 (
__NETLINK_DIAG_MAX
 - 1)

	)

47 
	#NDIAG_PROTO_ALL
 ((
__u8
Ë~0)

	)

49 
	#NDIAG_SHOW_MEMINFO
 0x00000001

	)

50 
	#NDIAG_SHOW_GROUPS
 0x00000002

	)

51 
	#NDIAG_SHOW_RING_CFG
 0x00000004

	)

	@include/linux/packet_diag.h

1 #i‚de‡
__PACKET_DIAG_H__


2 
	#__PACKET_DIAG_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	s∑ckë_düg_ªq
 {

7 
__u8
 
	msdüg_Ámûy
;

8 
__u8
 
	msdüg_¥Ÿocﬁ
;

9 
__u16
 
	m∑d
;

10 
__u32
 
	mpdüg_öo
;

11 
__u32
 
	mpdüg_show
;

12 
__u32
 
	mpdüg_cookõ
[2];

15 
	#PACKET_SHOW_INFO
 0x00000001

	)

16 
	#PACKET_SHOW_MCLIST
 0x00000002

	)

17 
	#PACKET_SHOW_RING_CFG
 0x00000004

	)

18 
	#PACKET_SHOW_FANOUT
 0x00000008

	)

19 
	#PACKET_SHOW_MEMINFO
 0x00000010

	)

20 
	#PACKET_SHOW_FILTER
 0x00000020

	)

22 
	s∑ckë_düg_msg
 {

23 
__u8
 
	mpdüg_Ámûy
;

24 
__u8
 
	mpdüg_ty≥
;

25 
__u16
 
	mpdüg_num
;

27 
__u32
 
	mpdüg_öo
;

28 
__u32
 
	mpdüg_cookõ
[2];

33 
	mPACKET_DIAG_INFO
,

34 
	mPACKET_DIAG_MCLIST
,

35 
	mPACKET_DIAG_RX_RING
,

36 
	mPACKET_DIAG_TX_RING
,

37 
	mPACKET_DIAG_FANOUT
,

38 
	mPACKET_DIAG_UID
,

39 
	mPACKET_DIAG_MEMINFO
,

40 
	mPACKET_DIAG_FILTER
,

42 
	m__PACKET_DIAG_MAX
,

45 
	#PACKET_DIAG_MAX
 (
__PACKET_DIAG_MAX
 - 1)

	)

47 
	s∑ckë_düg_öfo
 {

48 
__u32
 
	mpdi_ödex
;

49 
__u32
 
	mpdi_vîsi⁄
;

50 
__u32
 
	mpdi_ª£rve
;

51 
__u32
 
	mpdi_c›y_thªsh
;

52 
__u32
 
	mpdi_t°amp
;

53 
__u32
 
	mpdi_Êags
;

55 
	#PDI_RUNNING
 0x1

	)

56 
	#PDI_AUXDATA
 0x2

	)

57 
	#PDI_ORIGDEV
 0x4

	)

58 
	#PDI_VNETHDR
 0x8

	)

59 
	#PDI_LOSS
 0x10

	)

62 
	s∑ckë_düg_m˛i°
 {

63 
__u32
 
	mpdmc_ödex
;

64 
__u32
 
	mpdmc_cou¡
;

65 
__u16
 
	mpdmc_ty≥
;

66 
__u16
 
	mpdmc_Æí
;

67 
__u8
 
	mpdmc_addr
[
MAX_ADDR_LEN
];

70 
	s∑ckë_düg_rög
 {

71 
__u32
 
	mpdr_block_size
;

72 
__u32
 
	mpdr_block_ƒ
;

73 
__u32
 
	mpdr_‰ame_size
;

74 
__u32
 
	mpdr_‰ame_ƒ
;

75 
__u32
 
	mpdr_ªtúe_tmo
;

76 
__u32
 
	mpdr_sizeof_¥iv
;

77 
__u32
 
	mpdr_„©uªs
;

	@include/linux/pkt_cls.h

1 #i‚de‡
__LINUX_PKT_CLS_H


2 
	#__LINUX_PKT_CLS_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_sched.h
>

10 
	mTCA_ACT_UNSPEC
,

11 
	mTCA_ACT_KIND
,

12 
	mTCA_ACT_OPTIONS
,

13 
	mTCA_ACT_INDEX
,

14 
	mTCA_ACT_STATS
,

15 
	m__TCA_ACT_MAX


18 
	#TCA_ACT_MAX
 
__TCA_ACT_MAX


	)

19 
	#TCA_OLD_COMPAT
 (
TCA_ACT_MAX
+1)

	)

20 
	#TCA_ACT_MAX_PRIO
 32

	)

21 
	#TCA_ACT_BIND
 1

	)

22 
	#TCA_ACT_NOBIND
 0

	)

23 
	#TCA_ACT_UNBIND
 1

	)

24 
	#TCA_ACT_NOUNBIND
 0

	)

25 
	#TCA_ACT_REPLACE
 1

	)

26 
	#TCA_ACT_NOREPLACE
 0

	)

28 
	#TC_ACT_UNSPEC
 (-1)

	)

29 
	#TC_ACT_OK
 0

	)

30 
	#TC_ACT_RECLASSIFY
 1

	)

31 
	#TC_ACT_SHOT
 2

	)

32 
	#TC_ACT_PIPE
 3

	)

33 
	#TC_ACT_STOLEN
 4

	)

34 
	#TC_ACT_QUEUED
 5

	)

35 
	#TC_ACT_REPEAT
 6

	)

36 
	#TC_ACT_JUMP
 0x10000000

	)

40 
	mTCA_ID_UNSPEC
=0,

41 
	mTCA_ID_POLICE
=1,

43 
	m__TCA_ID_MAX
=255

46 
	#TCA_ID_MAX
 
__TCA_ID_MAX


	)

48 
	stc_pﬁi˚
 {

49 
__u32
 
	mödex
;

50 
	ma˘i⁄
;

51 
	#TC_POLICE_UNSPEC
 
TC_ACT_UNSPEC


	)

52 
	#TC_POLICE_OK
 
TC_ACT_OK


	)

53 
	#TC_POLICE_RECLASSIFY
 
TC_ACT_RECLASSIFY


	)

54 
	#TC_POLICE_SHOT
 
TC_ACT_SHOT


	)

55 
	#TC_POLICE_PIPE
 
TC_ACT_PIPE


	)

57 
__u32
 
	mlimô
;

58 
__u32
 
	mbur°
;

59 
__u32
 
	mmtu
;

60 
tc_øã•ec
 
	møã
;

61 
tc_øã•ec
 
	m≥akøã
;

62 
	mªf˙t
;

63 
	mböd˙t
;

64 
__u32
 
	mˇ∑b
;

67 
	stcf_t
 {

68 
__u64
 
	mö°Æl
;

69 
__u64
 
	mœ°u£
;

70 
__u64
 
	mexpúes
;

73 
	stc_˙t
 {

74 
	mªf˙t
;

75 
	mböd˙t
;

78 
	#tc_gí
 \

79 
__u32
 
ödex
; \

80 
__u32
 
ˇ∑b
; \

81 
a˘i⁄
; \

82 
ªf˙t
; \

83 
böd˙t


	)

86 
	mTCA_POLICE_UNSPEC
,

87 
	mTCA_POLICE_TBF
,

88 
	mTCA_POLICE_RATE
,

89 
	mTCA_POLICE_PEAKRATE
,

90 
	mTCA_POLICE_AVRATE
,

91 
	mTCA_POLICE_RESULT
,

92 
	m__TCA_POLICE_MAX


93 
	#TCA_POLICE_RESULT
 
TCA_POLICE_RESULT


	)

96 
	#TCA_POLICE_MAX
 (
__TCA_POLICE_MAX
 - 1)

	)

100 
	#TC_U32_HTID
(
h
Ë((h)&0xFFF00000)

	)

101 
	#TC_U32_USERHTID
(
h
Ë(
	`TC_U32_HTID
(h)>>20)

	)

102 
	#TC_U32_HASH
(
h
Ë(((h)>>12)&0xFF)

	)

103 
	#TC_U32_NODE
(
h
Ë((h)&0xFFF)

	)

104 
	#TC_U32_KEY
(
h
Ë((h)&0xFFFFF)

	)

105 
	#TC_U32_UNSPEC
 0

	)

106 
	#TC_U32_ROOT
 (0xFFF00000)

	)

109 
	mTCA_U32_UNSPEC
,

110 
	mTCA_U32_CLASSID
,

111 
	mTCA_U32_HASH
,

112 
	mTCA_U32_LINK
,

113 
	mTCA_U32_DIVISOR
,

114 
	mTCA_U32_SEL
,

115 
	mTCA_U32_POLICE
,

116 
	mTCA_U32_ACT
,

117 
	mTCA_U32_INDEV
,

118 
	mTCA_U32_PCNT
,

119 
	mTCA_U32_MARK
,

120 
	m__TCA_U32_MAX


123 
	#TCA_U32_MAX
 (
__TCA_U32_MAX
 - 1)

	)

125 
	stc_u32_key
 {

126 
__be32
 
	mmask
;

127 
__be32
 
	mvÆ
;

128 
	moff
;

129 
	moffmask
;

132 
	stc_u32_£l
 {

133 
	mÊags
;

134 
	moffshi·
;

135 
	mnkeys
;

137 
__be16
 
	moffmask
;

138 
__u16
 
	moff
;

139 
	moffoff
;

141 
	mhoff
;

142 
__be32
 
	mhmask
;

143 
tc_u32_key
 
	mkeys
[0];

146 
	stc_u32_m¨k
 {

147 
__u32
 
	mvÆ
;

148 
__u32
 
	mmask
;

149 
__u32
 
	msuc˚ss
;

152 
	stc_u32_p˙t
 {

153 
__u64
 
	mr˙t
;

154 
__u64
 
	mrhô
;

155 
__u64
 
	mk˙ts
[0];

160 
	#TC_U32_TERMINAL
 1

	)

161 
	#TC_U32_OFFSET
 2

	)

162 
	#TC_U32_VAROFFSET
 4

	)

163 
	#TC_U32_EAT
 8

	)

165 
	#TC_U32_MAXDEPTH
 8

	)

171 
	mTCA_RSVP_UNSPEC
,

172 
	mTCA_RSVP_CLASSID
,

173 
	mTCA_RSVP_DST
,

174 
	mTCA_RSVP_SRC
,

175 
	mTCA_RSVP_PINFO
,

176 
	mTCA_RSVP_POLICE
,

177 
	mTCA_RSVP_ACT
,

178 
	m__TCA_RSVP_MAX


181 
	#TCA_RSVP_MAX
 (
__TCA_RSVP_MAX
 - 1 )

	)

183 
	stc_rsvp_gpi
 {

184 
__u32
 
	mkey
;

185 
__u32
 
	mmask
;

186 
	moff£t
;

189 
	stc_rsvp_pöfo
 {

190 
tc_rsvp_gpi
 
	mdpi
;

191 
tc_rsvp_gpi
 
	m•i
;

192 
__u8
 
	m¥Ÿocﬁ
;

193 
__u8
 
	mtu¬ñid
;

194 
__u8
 
	mtu¬ñhdr
;

195 
__u8
 
	m∑d
;

201 
	mTCA_ROUTE4_UNSPEC
,

202 
	mTCA_ROUTE4_CLASSID
,

203 
	mTCA_ROUTE4_TO
,

204 
	mTCA_ROUTE4_FROM
,

205 
	mTCA_ROUTE4_IIF
,

206 
	mTCA_ROUTE4_POLICE
,

207 
	mTCA_ROUTE4_ACT
,

208 
	m__TCA_ROUTE4_MAX


211 
	#TCA_ROUTE4_MAX
 (
__TCA_ROUTE4_MAX
 - 1)

	)

217 
	mTCA_FW_UNSPEC
,

218 
	mTCA_FW_CLASSID
,

219 
	mTCA_FW_POLICE
,

220 
	mTCA_FW_INDEV
,

221 
	mTCA_FW_ACT
,

222 
	mTCA_FW_MASK
,

223 
	m__TCA_FW_MAX


226 
	#TCA_FW_MAX
 (
__TCA_FW_MAX
 - 1)

	)

231 
	mTCA_TCINDEX_UNSPEC
,

232 
	mTCA_TCINDEX_HASH
,

233 
	mTCA_TCINDEX_MASK
,

234 
	mTCA_TCINDEX_SHIFT
,

235 
	mTCA_TCINDEX_FALL_THROUGH
,

236 
	mTCA_TCINDEX_CLASSID
,

237 
	mTCA_TCINDEX_POLICE
,

238 
	mTCA_TCINDEX_ACT
,

239 
	m__TCA_TCINDEX_MAX


242 
	#TCA_TCINDEX_MAX
 (
__TCA_TCINDEX_MAX
 - 1)

	)

247 
	mFLOW_KEY_SRC
,

248 
	mFLOW_KEY_DST
,

249 
	mFLOW_KEY_PROTO
,

250 
	mFLOW_KEY_PROTO_SRC
,

251 
	mFLOW_KEY_PROTO_DST
,

252 
	mFLOW_KEY_IIF
,

253 
	mFLOW_KEY_PRIORITY
,

254 
	mFLOW_KEY_MARK
,

255 
	mFLOW_KEY_NFCT
,

256 
	mFLOW_KEY_NFCT_SRC
,

257 
	mFLOW_KEY_NFCT_DST
,

258 
	mFLOW_KEY_NFCT_PROTO_SRC
,

259 
	mFLOW_KEY_NFCT_PROTO_DST
,

260 
	mFLOW_KEY_RTCLASSID
,

261 
	mFLOW_KEY_SKUID
,

262 
	mFLOW_KEY_SKGID
,

263 
	mFLOW_KEY_VLAN_TAG
,

264 
	mFLOW_KEY_RXHASH
,

265 
	m__FLOW_KEY_MAX
,

268 
	#FLOW_KEY_MAX
 (
__FLOW_KEY_MAX
 - 1)

	)

271 
	mFLOW_MODE_MAP
,

272 
	mFLOW_MODE_HASH
,

276 
	mTCA_FLOW_UNSPEC
,

277 
	mTCA_FLOW_KEYS
,

278 
	mTCA_FLOW_MODE
,

279 
	mTCA_FLOW_BASECLASS
,

280 
	mTCA_FLOW_RSHIFT
,

281 
	mTCA_FLOW_ADDEND
,

282 
	mTCA_FLOW_MASK
,

283 
	mTCA_FLOW_XOR
,

284 
	mTCA_FLOW_DIVISOR
,

285 
	mTCA_FLOW_ACT
,

286 
	mTCA_FLOW_POLICE
,

287 
	mTCA_FLOW_EMATCHES
,

288 
	mTCA_FLOW_PERTURB
,

289 
	m__TCA_FLOW_MAX


292 
	#TCA_FLOW_MAX
 (
__TCA_FLOW_MAX
 - 1)

	)

297 
	mTCA_BASIC_UNSPEC
,

298 
	mTCA_BASIC_CLASSID
,

299 
	mTCA_BASIC_EMATCHES
,

300 
	mTCA_BASIC_ACT
,

301 
	mTCA_BASIC_POLICE
,

302 
	m__TCA_BASIC_MAX


305 
	#TCA_BASIC_MAX
 (
__TCA_BASIC_MAX
 - 1)

	)

311 
	mTCA_CGROUP_UNSPEC
,

312 
	mTCA_CGROUP_ACT
,

313 
	mTCA_CGROUP_POLICE
,

314 
	mTCA_CGROUP_EMATCHES
,

315 
	m__TCA_CGROUP_MAX
,

318 
	#TCA_CGROUP_MAX
 (
__TCA_CGROUP_MAX
 - 1)

	)

323 
	mTCA_BPF_UNSPEC
,

324 
	mTCA_BPF_ACT
,

325 
	mTCA_BPF_POLICE
,

326 
	mTCA_BPF_CLASSID
,

327 
	mTCA_BPF_OPS_LEN
,

328 
	mTCA_BPF_OPS
,

329 
	mTCA_BPF_FD
,

330 
	mTCA_BPF_NAME
,

331 
	m__TCA_BPF_MAX
,

334 
	#TCA_BPF_MAX
 (
__TCA_BPF_MAX
 - 1)

	)

339 
	mTCA_FLOWER_UNSPEC
,

340 
	mTCA_FLOWER_CLASSID
,

341 
	mTCA_FLOWER_INDEV
,

342 
	mTCA_FLOWER_ACT
,

343 
	mTCA_FLOWER_KEY_ETH_DST
,

344 
	mTCA_FLOWER_KEY_ETH_DST_MASK
,

345 
	mTCA_FLOWER_KEY_ETH_SRC
,

346 
	mTCA_FLOWER_KEY_ETH_SRC_MASK
,

347 
	mTCA_FLOWER_KEY_ETH_TYPE
,

348 
	mTCA_FLOWER_KEY_IP_PROTO
,

349 
	mTCA_FLOWER_KEY_IPV4_SRC
,

350 
	mTCA_FLOWER_KEY_IPV4_SRC_MASK
,

351 
	mTCA_FLOWER_KEY_IPV4_DST
,

352 
	mTCA_FLOWER_KEY_IPV4_DST_MASK
,

353 
	mTCA_FLOWER_KEY_IPV6_SRC
,

354 
	mTCA_FLOWER_KEY_IPV6_SRC_MASK
,

355 
	mTCA_FLOWER_KEY_IPV6_DST
,

356 
	mTCA_FLOWER_KEY_IPV6_DST_MASK
,

357 
	mTCA_FLOWER_KEY_TCP_SRC
,

358 
	mTCA_FLOWER_KEY_TCP_DST
,

359 
	mTCA_FLOWER_KEY_UDP_SRC
,

360 
	mTCA_FLOWER_KEY_UDP_DST
,

361 
	m__TCA_FLOWER_MAX
,

364 
	#TCA_FLOWER_MAX
 (
__TCA_FLOWER_MAX
 - 1)

	)

368 
	stcf_em©ch_åì_hdr
 {

369 
__u16
 
	mnm©ches
;

370 
__u16
 
	m¥ogid
;

374 
	mTCA_EMATCH_TREE_UNSPEC
,

375 
	mTCA_EMATCH_TREE_HDR
,

376 
	mTCA_EMATCH_TREE_LIST
,

377 
	m__TCA_EMATCH_TREE_MAX


379 
	#TCA_EMATCH_TREE_MAX
 (
__TCA_EMATCH_TREE_MAX
 - 1)

	)

381 
	stcf_em©ch_hdr
 {

382 
__u16
 
	mm©chid
;

383 
__u16
 
	mköd
;

384 
__u16
 
	mÊags
;

385 
__u16
 
	m∑d
;

402 
	#TCF_EM_REL_END
 0

	)

403 
	#TCF_EM_REL_AND
 (1<<0)

	)

404 
	#TCF_EM_REL_OR
 (1<<1)

	)

405 
	#TCF_EM_INVERT
 (1<<2)

	)

406 
	#TCF_EM_SIMPLE
 (1<<3)

	)

408 
	#TCF_EM_REL_MASK
 3

	)

409 
	#TCF_EM_REL_VALID
(
v
Ë(((vË& 
TCF_EM_REL_MASK
Ë!TCF_EM_REL_MASK)

	)

412 
	mTCF_LAYER_LINK
,

413 
	mTCF_LAYER_NETWORK
,

414 
	mTCF_LAYER_TRANSPORT
,

415 
	m__TCF_LAYER_MAX


417 
	#TCF_LAYER_MAX
 (
__TCF_LAYER_MAX
 - 1)

	)

423 
	#TCF_EM_CONTAINER
 0

	)

424 
	#TCF_EM_CMP
 1

	)

425 
	#TCF_EM_NBYTE
 2

	)

426 
	#TCF_EM_U32
 3

	)

427 
	#TCF_EM_META
 4

	)

428 
	#TCF_EM_TEXT
 5

	)

429 
	#TCF_EM_VLAN
 6

	)

430 
	#TCF_EM_CANID
 7

	)

431 
	#TCF_EM_IPSET
 8

	)

432 
	#TCF_EM_MAX
 8

	)

435 
	mTCF_EM_PROG_TC


439 
	mTCF_EM_OPND_EQ
,

440 
	mTCF_EM_OPND_GT
,

441 
	mTCF_EM_OPND_LT


	@include/linux/pkt_sched.h

1 #i‚de‡
__LINUX_PKT_SCHED_H


2 
	#__LINUX_PKT_SCHED_H


	)

4 
	~<löux/ty≥s.h
>

19 
	#TC_PRIO_BESTEFFORT
 0

	)

20 
	#TC_PRIO_FILLER
 1

	)

21 
	#TC_PRIO_BULK
 2

	)

22 
	#TC_PRIO_INTERACTIVE_BULK
 4

	)

23 
	#TC_PRIO_INTERACTIVE
 6

	)

24 
	#TC_PRIO_CONTROL
 7

	)

26 
	#TC_PRIO_MAX
 15

	)

32 
	stc_°©s
 {

33 
__u64
 
	mbyãs
;

34 
__u32
 
	m∑ckës
;

35 
__u32
 
	mdr›s
;

36 
__u32
 
	movîlimôs
;

38 
__u32
 
	mbps
;

39 
__u32
 
	mµs
;

40 
__u32
 
	mqÀn
;

41 
__u32
 
	mbacklog
;

44 
	stc_e°im©‹
 {

45 sig√d 
	möãrvÆ
;

46 
	mewma_log
;

66 
	#TC_H_MAJ_MASK
 (0xFFFF0000U)

	)

67 
	#TC_H_MIN_MASK
 (0x0000FFFFU)

	)

68 
	#TC_H_MAJ
(
h
Ë((h)&
TC_H_MAJ_MASK
)

	)

69 
	#TC_H_MIN
(
h
Ë((h)&
TC_H_MIN_MASK
)

	)

70 
	#TC_H_MAKE
(
maj
,
mö
Ë(((maj)&
TC_H_MAJ_MASK
)|((mö)&
TC_H_MIN_MASK
))

	)

72 
	#TC_H_UNSPEC
 (0U)

	)

73 
	#TC_H_ROOT
 (0xFFFFFFFFU)

	)

74 
	#TC_H_INGRESS
 (0xFFFFFFF1U)

	)

77 
	etc_lök_œyî
 {

78 
	mTC_LINKLAYER_UNAWARE
,

79 
	mTC_LINKLAYER_ETHERNET
,

80 
	mTC_LINKLAYER_ATM
,

82 
	#TC_LINKLAYER_MASK
 0x0F

	)

84 
	stc_øã•ec
 {

85 
	m˚Œ_log
;

86 
__u8
 
	mlökœyî
;

87 
	movîhód
;

88 
	m˚Œ_Æign
;

89 
	mmpu
;

90 
__u32
 
	møã
;

93 
	#TC_RTAB_SIZE
 1024

	)

95 
	stc_size•ec
 {

96 
	m˚Œ_log
;

97 
	msize_log
;

98 
	m˚Œ_Æign
;

99 
	movîhód
;

100 
	mlökœyî
;

101 
	mmpu
;

102 
	mmtu
;

103 
	mtsize
;

107 
	mTCA_STAB_UNSPEC
,

108 
	mTCA_STAB_BASE
,

109 
	mTCA_STAB_DATA
,

110 
	m__TCA_STAB_MAX


113 
	#TCA_STAB_MAX
 (
__TCA_STAB_MAX
 - 1)

	)

117 
	stc_fifo_q›t
 {

118 
__u32
 
	mlimô
;

123 
	#TCQ_PRIO_BANDS
 16

	)

124 
	#TCQ_MIN_PRIO_BANDS
 2

	)

126 
	stc_¥io_q›t
 {

127 
	mb™ds
;

128 
__u8
 
	m¥iom≠
[
TC_PRIO_MAX
+1];

133 
	stc_mu…iq_q›t
 {

134 
__u16
 
	mb™ds
;

135 
__u16
 
	mmax_b™ds
;

140 
	#TCQ_PLUG_BUFFER
 0

	)

141 
	#TCQ_PLUG_RELEASE_ONE
 1

	)

142 
	#TCQ_PLUG_RELEASE_INDEFINITE
 2

	)

143 
	#TCQ_PLUG_LIMIT
 3

	)

145 
	stc_∂ug_q›t
 {

155 
	ma˘i⁄
;

156 
__u32
 
	mlimô
;

161 
	stc_tbf_q›t
 {

162 
tc_øã•ec
 
	møã
;

163 
tc_øã•ec
 
	m≥akøã
;

164 
__u32
 
	mlimô
;

165 
__u32
 
	mbuf„r
;

166 
__u32
 
	mmtu
;

170 
	mTCA_TBF_UNSPEC
,

171 
	mTCA_TBF_PARMS
,

172 
	mTCA_TBF_RTAB
,

173 
	mTCA_TBF_PTAB
,

174 
	mTCA_TBF_RATE64
,

175 
	mTCA_TBF_PRATE64
,

176 
	mTCA_TBF_BURST
,

177 
	mTCA_TBF_PBURST
,

178 
	m__TCA_TBF_MAX
,

181 
	#TCA_TBF_MAX
 (
__TCA_TBF_MAX
 - 1)

	)

190 
	stc_sfq_q›t
 {

191 
	mqu™tum
;

192 
	m≥πurb_≥riod
;

193 
__u32
 
	mlimô
;

194 
	mdivis‹
;

195 
	mÊows
;

198 
	stc_sfqªd_°©s
 {

199 
__u32
 
	m¥ob_dr›
;

200 
__u32
 
	mf‹˚d_dr›
;

201 
__u32
 
	m¥ob_m¨k
;

202 
__u32
 
	mf‹˚d_m¨k
;

203 
__u32
 
	m¥ob_m¨k_hód
;

204 
__u32
 
	mf‹˚d_m¨k_hód
;

207 
	stc_sfq_q›t_v1
 {

208 
tc_sfq_q›t
 
	mv0
;

209 
	mdïth
;

210 
	mhóddr›
;

212 
__u32
 
	mlimô
;

213 
__u32
 
	mqth_mö
;

214 
__u32
 
	mqth_max
;

215 
	mWlog
;

216 
	mPlog
;

217 
	mS˚Œ_log
;

218 
	mÊags
;

219 
__u32
 
	mmax_P
;

221 
tc_sfqªd_°©s
 
	m°©s
;

225 
	stc_sfq_x°©s
 {

226 
__s32
 
	mÆlŸ
;

232 
	mTCA_RED_UNSPEC
,

233 
	mTCA_RED_PARMS
,

234 
	mTCA_RED_STAB
,

235 
	mTCA_RED_MAX_P
,

236 
	m__TCA_RED_MAX
,

239 
	#TCA_RED_MAX
 (
__TCA_RED_MAX
 - 1)

	)

241 
	stc_ªd_q›t
 {

242 
__u32
 
	mlimô
;

243 
__u32
 
	mqth_mö
;

244 
__u32
 
	mqth_max
;

245 
	mWlog
;

246 
	mPlog
;

247 
	mS˚Œ_log
;

248 
	mÊags
;

249 
	#TC_RED_ECN
 1

	)

250 
	#TC_RED_HARDDROP
 2

	)

251 
	#TC_RED_ADAPTATIVE
 4

	)

254 
	stc_ªd_x°©s
 {

255 
__u32
 
	móæy
;

256 
__u32
 
	mpdr›
;

257 
__u32
 
	mŸhî
;

258 
__u32
 
	mm¨ked
;

263 
	#MAX_DPs
 16

	)

266 
	mTCA_GRED_UNSPEC
,

267 
	mTCA_GRED_PARMS
,

268 
	mTCA_GRED_STAB
,

269 
	mTCA_GRED_DPS
,

270 
	mTCA_GRED_MAX_P
,

271 
	mTCA_GRED_LIMIT
,

272 
	m__TCA_GRED_MAX
,

275 
	#TCA_GRED_MAX
 (
__TCA_GRED_MAX
 - 1)

	)

277 
	stc_gªd_q›t
 {

278 
__u32
 
	mlimô
;

279 
__u32
 
	mqth_mö
;

280 
__u32
 
	mqth_max
;

281 
__u32
 
	mDP
;

282 
__u32
 
	mbacklog
;

283 
__u32
 
	mqave
;

284 
__u32
 
	mf‹˚d
;

285 
__u32
 
	móæy
;

286 
__u32
 
	mŸhî
;

287 
__u32
 
	mpdr›
;

288 
__u8
 
	mWlog
;

289 
__u8
 
	mPlog
;

290 
__u8
 
	mS˚Œ_log
;

291 
__u8
 
	m¥io
;

292 
__u32
 
	m∑ckës
;

293 
__u32
 
	mbyãsö
;

297 
	stc_gªd_s›t
 {

298 
__u32
 
	mDPs
;

299 
__u32
 
	mdef_DP
;

300 
__u8
 
	mgrio
;

301 
__u8
 
	mÊags
;

302 
__u16
 
	m∑d1
;

308 
	mTCA_CHOKE_UNSPEC
,

309 
	mTCA_CHOKE_PARMS
,

310 
	mTCA_CHOKE_STAB
,

311 
	mTCA_CHOKE_MAX_P
,

312 
	m__TCA_CHOKE_MAX
,

315 
	#TCA_CHOKE_MAX
 (
__TCA_CHOKE_MAX
 - 1)

	)

317 
	stc_choke_q›t
 {

318 
__u32
 
	mlimô
;

319 
__u32
 
	mqth_mö
;

320 
__u32
 
	mqth_max
;

321 
	mWlog
;

322 
	mPlog
;

323 
	mS˚Œ_log
;

324 
	mÊags
;

327 
	stc_choke_x°©s
 {

328 
__u32
 
	móæy
;

329 
__u32
 
	mpdr›
;

330 
__u32
 
	mŸhî
;

331 
__u32
 
	mm¨ked
;

332 
__u32
 
	mm©ched
;

336 
	#TC_HTB_NUMPRIO
 8

	)

337 
	#TC_HTB_MAXDEPTH
 8

	)

338 
	#TC_HTB_PROTOVER
 3

	)

340 
	stc_htb_›t
 {

341 
tc_øã•ec
 
	møã
;

342 
tc_øã•ec
 
	m˚û
;

343 
__u32
 
	mbuf„r
;

344 
__u32
 
	mcbuf„r
;

345 
__u32
 
	mqu™tum
;

346 
__u32
 
	mÀvñ
;

347 
__u32
 
	m¥io
;

349 
	stc_htb_glob
 {

350 
__u32
 
	mvîsi⁄
;

351 
__u32
 
	møã2qu™tum
;

352 
__u32
 
	mdef˛s
;

353 
__u32
 
	mdebug
;

356 
__u32
 
	mdúe˘_pkts
;

359 
	mTCA_HTB_UNSPEC
,

360 
	mTCA_HTB_PARMS
,

361 
	mTCA_HTB_INIT
,

362 
	mTCA_HTB_CTAB
,

363 
	mTCA_HTB_RTAB
,

364 
	mTCA_HTB_DIRECT_QLEN
,

365 
	mTCA_HTB_RATE64
,

366 
	mTCA_HTB_CEIL64
,

367 
	m__TCA_HTB_MAX
,

370 
	#TCA_HTB_MAX
 (
__TCA_HTB_MAX
 - 1)

	)

372 
	stc_htb_x°©s
 {

373 
__u32
 
	mÀnds
;

374 
__u32
 
	mb‹rows
;

375 
__u32
 
	mgü¡s
;

376 
__u32
 
	mtokís
;

377 
__u32
 
	m˘okís
;

382 
	stc_hfsc_q›t
 {

383 
__u16
 
	mdef˛s
;

386 
	stc_£rvi˚_curve
 {

387 
__u32
 
	mm1
;

388 
__u32
 
	md
;

389 
__u32
 
	mm2
;

392 
	stc_hfsc_°©s
 {

393 
__u64
 
	mw‹k
;

394 
__u64
 
	mπw‹k
;

395 
__u32
 
	m≥riod
;

396 
__u32
 
	mÀvñ
;

400 
	mTCA_HFSC_UNSPEC
,

401 
	mTCA_HFSC_RSC
,

402 
	mTCA_HFSC_FSC
,

403 
	mTCA_HFSC_USC
,

404 
	m__TCA_HFSC_MAX
,

407 
	#TCA_HFSC_MAX
 (
__TCA_HFSC_MAX
 - 1)

	)

412 
	#TC_CBQ_MAXPRIO
 8

	)

413 
	#TC_CBQ_MAXLEVEL
 8

	)

414 
	#TC_CBQ_DEF_EWMA
 5

	)

416 
	stc_cbq_lss›t
 {

417 
	mch™ge
;

418 
	mÊags
;

419 
	#TCF_CBQ_LSS_BOUNDED
 1

	)

420 
	#TCF_CBQ_LSS_ISOLATED
 2

	)

421 
	mewma_log
;

422 
	mÀvñ
;

423 
	#TCF_CBQ_LSS_FLAGS
 1

	)

424 
	#TCF_CBQ_LSS_EWMA
 2

	)

425 
	#TCF_CBQ_LSS_MAXIDLE
 4

	)

426 
	#TCF_CBQ_LSS_MINIDLE
 8

	)

427 
	#TCF_CBQ_LSS_OFFTIME
 0x10

	)

428 
	#TCF_CBQ_LSS_AVPKT
 0x20

	)

429 
__u32
 
	mmaxidÀ
;

430 
__u32
 
	mmöidÀ
;

431 
__u32
 
	mof·ime
;

432 
__u32
 
	mavpkt
;

435 
	stc_cbq_wº›t
 {

436 
	mÊags
;

437 
	m¥i‹ôy
;

438 
	m˝ri‹ôy
;

439 
	m__ª£rved
;

440 
__u32
 
	mÆlŸ
;

441 
__u32
 
	mweight
;

444 
	stc_cbq_ovl
 {

445 
	m°øãgy
;

446 
	#TC_CBQ_OVL_CLASSIC
 0

	)

447 
	#TC_CBQ_OVL_DELAY
 1

	)

448 
	#TC_CBQ_OVL_LOWPRIO
 2

	)

449 
	#TC_CBQ_OVL_DROP
 3

	)

450 
	#TC_CBQ_OVL_RCLASSIC
 4

	)

451 
	m¥i‹ôy2
;

452 
__u16
 
	m∑d
;

453 
__u32
 
	m≥«…y
;

456 
	stc_cbq_pﬁi˚
 {

457 
	mpﬁi˚
;

458 
	m__ªs1
;

459 
	m__ªs2
;

462 
	stc_cbq_f›t
 {

463 
__u32
 
	m•lô
;

464 
__u32
 
	mdefm≠
;

465 
__u32
 
	mdefch™ge
;

468 
	stc_cbq_x°©s
 {

469 
__u32
 
	mb‹rows
;

470 
__u32
 
	movîa˘i⁄s
;

471 
__s32
 
	mavgidÀ
;

472 
__s32
 
	mundîtime
;

476 
	mTCA_CBQ_UNSPEC
,

477 
	mTCA_CBQ_LSSOPT
,

478 
	mTCA_CBQ_WRROPT
,

479 
	mTCA_CBQ_FOPT
,

480 
	mTCA_CBQ_OVL_STRATEGY
,

481 
	mTCA_CBQ_RATE
,

482 
	mTCA_CBQ_RTAB
,

483 
	mTCA_CBQ_POLICE
,

484 
	m__TCA_CBQ_MAX
,

487 
	#TCA_CBQ_MAX
 (
__TCA_CBQ_MAX
 - 1)

	)

492 
	mTCA_DSMARK_UNSPEC
,

493 
	mTCA_DSMARK_INDICES
,

494 
	mTCA_DSMARK_DEFAULT_INDEX
,

495 
	mTCA_DSMARK_SET_TC_INDEX
,

496 
	mTCA_DSMARK_MASK
,

497 
	mTCA_DSMARK_VALUE
,

498 
	m__TCA_DSMARK_MAX
,

501 
	#TCA_DSMARK_MAX
 (
__TCA_DSMARK_MAX
 - 1)

	)

506 
	mTCA_ATM_UNSPEC
,

507 
	mTCA_ATM_FD
,

508 
	mTCA_ATM_PTR
,

509 
	mTCA_ATM_HDR
,

510 
	mTCA_ATM_EXCESS
,

511 
	mTCA_ATM_ADDR
,

512 
	mTCA_ATM_STATE
,

513 
	m__TCA_ATM_MAX
,

516 
	#TCA_ATM_MAX
 (
__TCA_ATM_MAX
 - 1)

	)

521 
	mTCA_NETEM_UNSPEC
,

522 
	mTCA_NETEM_CORR
,

523 
	mTCA_NETEM_DELAY_DIST
,

524 
	mTCA_NETEM_REORDER
,

525 
	mTCA_NETEM_CORRUPT
,

526 
	mTCA_NETEM_LOSS
,

527 
	mTCA_NETEM_RATE
,

528 
	mTCA_NETEM_ECN
,

529 
	mTCA_NETEM_RATE64
,

530 
	m__TCA_NETEM_MAX
,

533 
	#TCA_NETEM_MAX
 (
__TCA_NETEM_MAX
 - 1)

	)

535 
	stc_√ãm_q›t
 {

536 
__u32
 
	mœãncy
;

537 
__u32
 
	mlimô
;

538 
__u32
 
	mloss
;

539 
__u32
 
	mg≠
;

540 
__u32
 
	mdu∂iˇã
;

541 
__u32
 
	mjôãr
;

544 
	stc_√ãm_c‹r
 {

545 
__u32
 
	mdñay_c‹r
;

546 
__u32
 
	mloss_c‹r
;

547 
__u32
 
	mdup_c‹r
;

550 
	stc_√ãm_ª‹dî
 {

551 
__u32
 
	m¥obabûôy
;

552 
__u32
 
	mc‹ªœti⁄
;

555 
	stc_√ãm_c‹ru±
 {

556 
__u32
 
	m¥obabûôy
;

557 
__u32
 
	mc‹ªœti⁄
;

560 
	stc_√ãm_øã
 {

561 
__u32
 
	møã
;

562 
__s32
 
	m∑ckë_ovîhód
;

563 
__u32
 
	m˚Œ_size
;

564 
__s32
 
	m˚Œ_ovîhód
;

568 
	mNETEM_LOSS_UNSPEC
,

569 
	mNETEM_LOSS_GI
,

570 
	mNETEM_LOSS_GE
,

571 
	m__NETEM_LOSS_MAX


573 
	#NETEM_LOSS_MAX
 (
__NETEM_LOSS_MAX
 - 1)

	)

576 
	stc_√ãm_gimodñ
 {

577 
__u32
 
	mp13
;

578 
__u32
 
	mp31
;

579 
__u32
 
	mp32
;

580 
__u32
 
	mp14
;

581 
__u32
 
	mp23
;

585 
	stc_√ãm_gemodñ
 {

586 
__u32
 
	mp
;

587 
__u32
 
	mr
;

588 
__u32
 
	mh
;

589 
__u32
 
	mk1
;

592 
	#NETEM_DIST_SCALE
 8192

	)

593 
	#NETEM_DIST_MAX
 16384

	)

598 
	mTCA_DRR_UNSPEC
,

599 
	mTCA_DRR_QUANTUM
,

600 
	m__TCA_DRR_MAX


603 
	#TCA_DRR_MAX
 (
__TCA_DRR_MAX
 - 1)

	)

605 
	stc_dº_°©s
 {

606 
__u32
 
	mdeficô
;

610 
	#TC_QOPT_BITMASK
 15

	)

611 
	#TC_QOPT_MAX_QUEUE
 16

	)

613 
	stc_mq¥io_q›t
 {

614 
__u8
 
	mnum_tc
;

615 
__u8
 
	m¥io_tc_m≠
[
TC_QOPT_BITMASK
 + 1];

616 
__u8
 
	mhw
;

617 
__u16
 
	mcou¡
[
TC_QOPT_MAX_QUEUE
];

618 
__u16
 
	moff£t
[
TC_QOPT_MAX_QUEUE
];

624 
	mTCA_SFB_UNSPEC
,

625 
	mTCA_SFB_PARMS
,

626 
	m__TCA_SFB_MAX
,

629 
	#TCA_SFB_MAX
 (
__TCA_SFB_MAX
 - 1)

	)

634 
	stc_sfb_q›t
 {

635 
__u32
 
	mªhash_öãrvÆ
;

636 
__u32
 
	mw¨mup_time
;

637 
__u32
 
	mmax
;

638 
__u32
 
	mbö_size
;

639 
__u32
 
	mö¸emít
;

640 
__u32
 
	mde¸emít
;

641 
__u32
 
	mlimô
;

642 
__u32
 
	m≥«…y_øã
;

643 
__u32
 
	m≥«…y_bur°
;

646 
	stc_sfb_x°©s
 {

647 
__u32
 
	móæydr›
;

648 
__u32
 
	m≥«…ydr›
;

649 
__u32
 
	mbuckëdr›
;

650 
__u32
 
	mqueuedr›
;

651 
__u32
 
	mchûddr›
;

652 
__u32
 
	mm¨ked
;

653 
__u32
 
	mmaxqÀn
;

654 
__u32
 
	mmax¥ob
;

655 
__u32
 
	mavg¥ob
;

658 
	#SFB_MAX_PROB
 0xFFFF

	)

662 
	mTCA_QFQ_UNSPEC
,

663 
	mTCA_QFQ_WEIGHT
,

664 
	mTCA_QFQ_LMAX
,

665 
	m__TCA_QFQ_MAX


668 
	#TCA_QFQ_MAX
 (
__TCA_QFQ_MAX
 - 1)

	)

670 
	stc_qfq_°©s
 {

671 
__u32
 
	mweight
;

672 
__u32
 
	mlmax
;

678 
	mTCA_CODEL_UNSPEC
,

679 
	mTCA_CODEL_TARGET
,

680 
	mTCA_CODEL_LIMIT
,

681 
	mTCA_CODEL_INTERVAL
,

682 
	mTCA_CODEL_ECN
,

683 
	mTCA_CODEL_CE_THRESHOLD
,

684 
	m__TCA_CODEL_MAX


687 
	#TCA_CODEL_MAX
 (
__TCA_CODEL_MAX
 - 1)

	)

689 
	stc_codñ_x°©s
 {

690 
__u32
 
	mmax∑ckë
;

691 
__u32
 
	mcou¡
;

694 
__u32
 
	mœ°cou¡
;

695 
__u32
 
	mldñay
;

696 
__s32
 
	mdr›_√xt
;

697 
__u32
 
	mdr›_ovîlimô
;

698 
__u32
 
	me˙_m¨k
;

699 
__u32
 
	mdr›pög
;

700 
__u32
 
	m˚_m¨k
;

706 
	mTCA_FQ_CODEL_UNSPEC
,

707 
	mTCA_FQ_CODEL_TARGET
,

708 
	mTCA_FQ_CODEL_LIMIT
,

709 
	mTCA_FQ_CODEL_INTERVAL
,

710 
	mTCA_FQ_CODEL_ECN
,

711 
	mTCA_FQ_CODEL_FLOWS
,

712 
	mTCA_FQ_CODEL_QUANTUM
,

713 
	mTCA_FQ_CODEL_CE_THRESHOLD
,

714 
	m__TCA_FQ_CODEL_MAX


717 
	#TCA_FQ_CODEL_MAX
 (
__TCA_FQ_CODEL_MAX
 - 1)

	)

720 
	mTCA_FQ_CODEL_XSTATS_QDISC
,

721 
	mTCA_FQ_CODEL_XSTATS_CLASS
,

724 
	stc_fq_codñ_qd_°©s
 {

725 
__u32
 
	mmax∑ckë
;

726 
__u32
 
	mdr›_ovîlimô
;

729 
__u32
 
	me˙_m¨k
;

732 
__u32
 
	m√w_Êow_cou¡
;

735 
__u32
 
	m√w_Êows_Àn
;

736 
__u32
 
	mﬁd_Êows_Àn
;

737 
__u32
 
	m˚_m¨k
;

740 
	stc_fq_codñ_˛_°©s
 {

741 
__s32
 
	mdeficô
;

742 
__u32
 
	mldñay
;

745 
__u32
 
	mcou¡
;

746 
__u32
 
	mœ°cou¡
;

747 
__u32
 
	mdr›pög
;

748 
__s32
 
	mdr›_√xt
;

751 
	stc_fq_codñ_x°©s
 {

752 
__u32
 
	mty≥
;

754 
tc_fq_codñ_qd_°©s
 
	mqdisc_°©s
;

755 
tc_fq_codñ_˛_°©s
 
	m˛ass_°©s
;

762 
	mTCA_FQ_UNSPEC
,

764 
	mTCA_FQ_PLIMIT
,

766 
	mTCA_FQ_FLOW_PLIMIT
,

768 
	mTCA_FQ_QUANTUM
,

770 
	mTCA_FQ_INITIAL_QUANTUM
,

772 
	mTCA_FQ_RATE_ENABLE
,

774 
	mTCA_FQ_FLOW_DEFAULT_RATE
,

776 
	mTCA_FQ_FLOW_MAX_RATE
,

778 
	mTCA_FQ_BUCKETS_LOG
,

780 
	mTCA_FQ_FLOW_REFILL_DELAY
,

782 
	mTCA_FQ_ORPHAN_MASK
,

784 
	m__TCA_FQ_MAX


787 
	#TCA_FQ_MAX
 (
__TCA_FQ_MAX
 - 1)

	)

789 
	stc_fq_qd_°©s
 {

790 
__u64
 
	mgc_Êows
;

791 
__u64
 
	mhigh¥io_∑ckës
;

792 
__u64
 
	mt˝_ªå™s
;

793 
__u64
 
	mthrŸéed
;

794 
__u64
 
	mÊows_∂imô
;

795 
__u64
 
	mpkts_too_l⁄g
;

796 
__u64
 
	mÆloˇti⁄_îr‹s
;

797 
__s64
 
	mtime_√xt_dñayed_Êow
;

798 
__u32
 
	mÊows
;

799 
__u32
 
	möa˘ive_Êows
;

800 
__u32
 
	mthrŸéed_Êows
;

801 
__u32
 
	m∑d
;

807 
	mTCA_HHF_UNSPEC
,

808 
	mTCA_HHF_BACKLOG_LIMIT
,

809 
	mTCA_HHF_QUANTUM
,

810 
	mTCA_HHF_HH_FLOWS_LIMIT
,

811 
	mTCA_HHF_RESET_TIMEOUT
,

812 
	mTCA_HHF_ADMIT_BYTES
,

813 
	mTCA_HHF_EVICT_TIMEOUT
,

814 
	mTCA_HHF_NON_HH_WEIGHT
,

815 
	m__TCA_HHF_MAX


818 
	#TCA_HHF_MAX
 (
__TCA_HHF_MAX
 - 1)

	)

820 
	stc_hhf_x°©s
 {

821 
__u32
 
	mdr›_ovîlimô
;

824 
__u32
 
	mhh_ovîlimô
;

825 
__u32
 
	mhh_tŸ_cou¡
;

826 
__u32
 
	mhh_cur_cou¡
;

831 
	mTCA_PIE_UNSPEC
,

832 
	mTCA_PIE_TARGET
,

833 
	mTCA_PIE_LIMIT
,

834 
	mTCA_PIE_TUPDATE
,

835 
	mTCA_PIE_ALPHA
,

836 
	mTCA_PIE_BETA
,

837 
	mTCA_PIE_ECN
,

838 
	mTCA_PIE_BYTEMODE
,

839 
	m__TCA_PIE_MAX


841 
	#TCA_PIE_MAX
 (
__TCA_PIE_MAX
 - 1)

	)

843 
	stc_põ_x°©s
 {

844 
__u32
 
	m¥ob
;

845 
__u32
 
	mdñay
;

846 
__u32
 
	mavg_dq_øã
;

847 
__u32
 
	m∑ckës_ö
;

848 
__u32
 
	mdr›≥d
;

849 
__u32
 
	movîlimô
;

850 
__u32
 
	mmaxq
;

851 
__u32
 
	me˙_m¨k
;

	@include/linux/q_openqueue.h

1 #i‚de‡
__LINUX_SCH_OPEN_QUEUE_H


2 
	#__LINUX_SCH_OPEN_QUEUE_H


	)

4 
	#TCQ_OQ_NAME_LEN
 32

	)

5 
	#TCQ_OQ_MAX_QUEUE
 16

	)

7 
	stc_oq_q
 {

8 
	m«me
[
TCQ_OQ_NAME_LEN
 + 1];

9 
	mmax_Àn
;

10 
	mÀn
;

11 
	mdr›≥d
;

12 
	mtŸÆ
;

15 
	stc_oq_q›t
 {

16 
	mp‹t_«me
[
TCQ_OQ_NAME_LEN
 + 1];

17 
tc_oq_q
 
	mqueues
[
TCQ_OQ_MAX_QUEUE
];

18 
	mnum_q
;

	@include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	mRTM_NEWNETCONF
 = 80,

124 
	#RTM_NEWNETCONF
 
RTM_NEWNETCONF


	)

125 
	mRTM_GETNETCONF
 = 82,

126 
	#RTM_GETNETCONF
 
RTM_GETNETCONF


	)

128 
	mRTM_NEWMDB
 = 84,

129 
	#RTM_NEWMDB
 
RTM_NEWMDB


	)

130 
	mRTM_DELMDB
 = 85,

131 
	#RTM_DELMDB
 
RTM_DELMDB


	)

132 
	mRTM_GETMDB
 = 86,

133 
	#RTM_GETMDB
 
RTM_GETMDB


	)

135 
	mRTM_NEWNSID
 = 88,

136 
	#RTM_NEWNSID
 
RTM_NEWNSID


	)

137 
	mRTM_DELNSID
 = 89,

138 
	#RTM_DELNSID
 
RTM_DELNSID


	)

139 
	mRTM_GETNSID
 = 90,

140 
	#RTM_GETNSID
 
RTM_GETNSID


	)

142 
	m__RTM_MAX
,

143 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

146 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

147 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

148 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

156 
	sπ©å
 {

157 
	mπa_Àn
;

158 
	mπa_ty≥
;

163 
	#RTA_ALIGNTO
 4U

	)

164 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

165 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

166 (
πa
)->
πa_Àn
 >(
π©å
) && \

167 (
πa
)->
πa_Àn
 <(
Àn
))

	)

168 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

169 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

170 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

171 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

172 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

173 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

182 
	sπmsg
 {

183 
	mπm_Ámûy
;

184 
	mπm_d°_Àn
;

185 
	mπm_§c_Àn
;

186 
	mπm_tos
;

188 
	mπm_èbÀ
;

189 
	mπm_¥Ÿocﬁ
;

190 
	mπm_sc›e
;

191 
	mπm_ty≥
;

193 
	mπm_Êags
;

199 
	mRTN_UNSPEC
,

200 
	mRTN_UNICAST
,

201 
	mRTN_LOCAL
,

202 
	mRTN_BROADCAST
,

204 
	mRTN_ANYCAST
,

206 
	mRTN_MULTICAST
,

207 
	mRTN_BLACKHOLE
,

208 
	mRTN_UNREACHABLE
,

209 
	mRTN_PROHIBIT
,

210 
	mRTN_THROW
,

211 
	mRTN_NAT
,

212 
	mRTN_XRESOLVE
,

213 
	m__RTN_MAX


216 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

221 
	#RTPROT_UNSPEC
 0

	)

222 
	#RTPROT_REDIRECT
 1

	)

224 
	#RTPROT_KERNEL
 2

	)

225 
	#RTPROT_BOOT
 3

	)

226 
	#RTPROT_STATIC
 4

	)

235 
	#RTPROT_GATED
 8

	)

236 
	#RTPROT_RA
 9

	)

237 
	#RTPROT_MRT
 10

	)

238 
	#RTPROT_ZEBRA
 11

	)

239 
	#RTPROT_BIRD
 12

	)

240 
	#RTPROT_DNROUTED
 13

	)

241 
	#RTPROT_XORP
 14

	)

242 
	#RTPROT_NTK
 15

	)

243 
	#RTPROT_DHCP
 16

	)

244 
	#RTPROT_MROUTED
 17

	)

245 
	#RTPROT_BABEL
 42

	)

258 
	eπ_sc›e_t
 {

259 
	mRT_SCOPE_UNIVERSE
=0,

261 
	mRT_SCOPE_SITE
=200,

262 
	mRT_SCOPE_LINK
=253,

263 
	mRT_SCOPE_HOST
=254,

264 
	mRT_SCOPE_NOWHERE
=255

269 
	#RTM_F_NOTIFY
 0x100

	)

270 
	#RTM_F_CLONED
 0x200

	)

271 
	#RTM_F_EQUALIZE
 0x400

	)

272 
	#RTM_F_PREFIX
 0x800

	)

276 
	eπ_˛ass_t
 {

277 
	mRT_TABLE_UNSPEC
=0,

279 
	mRT_TABLE_COMPAT
=252,

280 
	mRT_TABLE_DEFAULT
=253,

281 
	mRT_TABLE_MAIN
=254,

282 
	mRT_TABLE_LOCAL
=255,

283 
	mRT_TABLE_MAX
=0xFFFFFFFF

289 
	eπ©å_ty≥_t
 {

290 
	mRTA_UNSPEC
,

291 
	mRTA_DST
,

292 
	mRTA_SRC
,

293 
	mRTA_IIF
,

294 
	mRTA_OIF
,

295 
	mRTA_GATEWAY
,

296 
	mRTA_PRIORITY
,

297 
	mRTA_PREFSRC
,

298 
	mRTA_METRICS
,

299 
	mRTA_MULTIPATH
,

300 
	mRTA_PROTOINFO
,

301 
	mRTA_FLOW
,

302 
	mRTA_CACHEINFO
,

303 
	mRTA_SESSION
,

304 
	mRTA_MP_ALGO
,

305 
	mRTA_TABLE
,

306 
	mRTA_MARK
,

307 
	mRTA_MFC_STATS
,

308 
	mRTA_VIA
,

309 
	mRTA_NEWDST
,

310 
	mRTA_PREF
,

311 
	mRTA_ENCAP_TYPE
,

312 
	mRTA_ENCAP
,

313 
	m__RTA_MAX


316 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

318 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

319 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

330 
	sπ√xth›
 {

331 
	mπnh_Àn
;

332 
	mπnh_Êags
;

333 
	mπnh_h›s
;

334 
	mπnh_ifödex
;

339 
	#RTNH_F_DEAD
 1

	)

340 
	#RTNH_F_PERVASIVE
 2

	)

341 
	#RTNH_F_ONLINK
 4

	)

342 
	#RTNH_F_OFFLOAD
 8

	)

343 
	#RTNH_F_LINKDOWN
 16

	)

345 
	#RTNH_COMPARE_MASK
 (
RTNH_F_DEAD
 | 
RTNH_F_LINKDOWN
)

	)

349 
	#RTNH_ALIGNTO
 4

	)

350 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

351 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

352 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

353 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

354 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

355 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

356 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

359 
	sπvü
 {

360 
__kî√l_ß_Ámûy_t
 
	mπvü_Ámûy
;

361 
__u8
 
	mπvü_addr
[0];

366 
	sπa_ˇcheöfo
 {

367 
__u32
 
	mπa_˛¡ªf
;

368 
__u32
 
	mπa_œ°u£
;

369 
__s32
 
	mπa_expúes
;

370 
__u32
 
	mπa_îr‹
;

371 
__u32
 
	mπa_u£d
;

373 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

374 
__u32
 
	mπa_id
;

375 
__u32
 
	mπa_ts
;

376 
__u32
 
	mπa_tßge
;

382 
	mRTAX_UNSPEC
,

383 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

384 
	mRTAX_LOCK
,

385 
	#RTAX_LOCK
 
RTAX_LOCK


	)

386 
	mRTAX_MTU
,

387 
	#RTAX_MTU
 
RTAX_MTU


	)

388 
	mRTAX_WINDOW
,

389 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

390 
	mRTAX_RTT
,

391 
	#RTAX_RTT
 
RTAX_RTT


	)

392 
	mRTAX_RTTVAR
,

393 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

394 
	mRTAX_SSTHRESH
,

395 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

396 
	mRTAX_CWND
,

397 
	#RTAX_CWND
 
RTAX_CWND


	)

398 
	mRTAX_ADVMSS
,

399 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

400 
	mRTAX_REORDERING
,

401 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

402 
	mRTAX_HOPLIMIT
,

403 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

404 
	mRTAX_INITCWND
,

405 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

406 
	mRTAX_FEATURES
,

407 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

408 
	mRTAX_RTO_MIN
,

409 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

410 
	mRTAX_INITRWND
,

411 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

412 
	mRTAX_QUICKACK
,

413 
	#RTAX_QUICKACK
 
RTAX_QUICKACK


	)

414 
	mRTAX_CC_ALGO
,

415 
	#RTAX_CC_ALGO
 
RTAX_CC_ALGO


	)

416 
	m__RTAX_MAX


419 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

421 
	#RTAX_FEATURE_ECN
 (1 << 0)

	)

422 
	#RTAX_FEATURE_SACK
 (1 << 1)

	)

423 
	#RTAX_FEATURE_TIMESTAMP
 (1 << 2)

	)

424 
	#RTAX_FEATURE_ALLFRAG
 (1 << 3)

	)

426 
	#RTAX_FEATURE_MASK
 (
RTAX_FEATURE_ECN
 | 
RTAX_FEATURE_SACK
 | \

427 
RTAX_FEATURE_TIMESTAMP
 | 
RTAX_FEATURE_ALLFRAG
)

	)

429 
	sπa_£ssi⁄
 {

430 
__u8
 
	m¥Ÿo
;

431 
__u8
 
	m∑d1
;

432 
__u16
 
	m∑d2
;

436 
__u16
 
	m•‹t
;

437 
__u16
 
	mdp‹t
;

438 } 
	mp‹ts
;

441 
__u8
 
	mty≥
;

442 
__u8
 
	mcode
;

443 
__u16
 
	midít
;

444 } 
	micm±
;

446 
__u32
 
	m•i
;

447 } 
	mu
;

450 
	sπa_mfc_°©s
 {

451 
__u64
 
	mmfcs_∑ckës
;

452 
__u64
 
	mmfcs_byãs
;

453 
__u64
 
	mmfcs_wr⁄g_if
;

460 
	sπgímsg
 {

461 
	mπgí_Ámûy
;

473 
	siföfomsg
 {

474 
	mifi_Ámûy
;

475 
	m__ifi_∑d
;

476 
	mifi_ty≥
;

477 
	mifi_ödex
;

478 
	mifi_Êags
;

479 
	mifi_ch™ge
;

486 
	s¥efixmsg
 {

487 
	m¥efix_Ámûy
;

488 
	m¥efix_∑d1
;

489 
	m¥efix_∑d2
;

490 
	m¥efix_ifödex
;

491 
	m¥efix_ty≥
;

492 
	m¥efix_Àn
;

493 
	m¥efix_Êags
;

494 
	m¥efix_∑d3
;

499 
	mPREFIX_UNSPEC
,

500 
	mPREFIX_ADDRESS
,

501 
	mPREFIX_CACHEINFO
,

502 
	m__PREFIX_MAX


505 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

507 
	s¥efix_ˇcheöfo
 {

508 
__u32
 
	m¥e„ºed_time
;

509 
__u32
 
	mvÆid_time
;

517 
	stcmsg
 {

518 
	mtcm_Ámûy
;

519 
	mtcm__∑d1
;

520 
	mtcm__∑d2
;

521 
	mtcm_ifödex
;

522 
__u32
 
	mtcm_h™dÀ
;

523 
__u32
 
	mtcm_∑ª¡
;

524 
__u32
 
	mtcm_öfo
;

528 
	mTCA_UNSPEC
,

529 
	mTCA_KIND
,

530 
	mTCA_OPTIONS
,

531 
	mTCA_STATS
,

532 
	mTCA_XSTATS
,

533 
	mTCA_RATE
,

534 
	mTCA_FCNT
,

535 
	mTCA_STATS2
,

536 
	mTCA_STAB
,

537 
	m__TCA_MAX


540 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

542 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

543 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

549 
	sndu£r›tmsg
 {

550 
	mndu£r›t_Ámûy
;

551 
	mndu£r›t_∑d1
;

552 
	mndu£r›t_›ts_Àn
;

553 
	mndu£r›t_ifödex
;

554 
__u8
 
	mndu£r›t_icmp_ty≥
;

555 
__u8
 
	mndu£r›t_icmp_code
;

556 
	mndu£r›t_∑d2
;

557 
	mndu£r›t_∑d3
;

562 
	mNDUSEROPT_UNSPEC
,

563 
	mNDUSEROPT_SRCADDR
,

564 
	m__NDUSEROPT_MAX


567 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

570 
	#RTMGRP_LINK
 1

	)

571 
	#RTMGRP_NOTIFY
 2

	)

572 
	#RTMGRP_NEIGH
 4

	)

573 
	#RTMGRP_TC
 8

	)

575 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

576 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

577 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

578 
	#RTMGRP_IPV4_RULE
 0x80

	)

580 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

581 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

582 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

583 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

585 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

586 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

588 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

591 
	eπ√éök_groups
 {

592 
	mRTNLGRP_NONE
,

593 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

594 
	mRTNLGRP_LINK
,

595 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

596 
	mRTNLGRP_NOTIFY
,

597 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

598 
	mRTNLGRP_NEIGH
,

599 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

600 
	mRTNLGRP_TC
,

601 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

602 
	mRTNLGRP_IPV4_IFADDR
,

603 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

604 
	mRTNLGRP_IPV4_MROUTE
,

605 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

606 
	mRTNLGRP_IPV4_ROUTE
,

607 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

608 
	mRTNLGRP_IPV4_RULE
,

609 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

610 
	mRTNLGRP_IPV6_IFADDR
,

611 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

612 
	mRTNLGRP_IPV6_MROUTE
,

613 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

614 
	mRTNLGRP_IPV6_ROUTE
,

615 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

616 
	mRTNLGRP_IPV6_IFINFO
,

617 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

618 
	mRTNLGRP_DEC√t_IFADDR
,

619 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

620 
	mRTNLGRP_NOP2
,

621 
	mRTNLGRP_DEC√t_ROUTE
,

622 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

623 
	mRTNLGRP_DEC√t_RULE
,

624 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

625 
	mRTNLGRP_NOP4
,

626 
	mRTNLGRP_IPV6_PREFIX
,

627 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

628 
	mRTNLGRP_IPV6_RULE
,

629 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

630 
	mRTNLGRP_ND_USEROPT
,

631 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

632 
	mRTNLGRP_PHONET_IFADDR
,

633 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

634 
	mRTNLGRP_PHONET_ROUTE
,

635 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

636 
	mRTNLGRP_DCB
,

637 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

638 
	mRTNLGRP_IPV4_NETCONF
,

639 
	#RTNLGRP_IPV4_NETCONF
 
RTNLGRP_IPV4_NETCONF


	)

640 
	mRTNLGRP_IPV6_NETCONF
,

641 
	#RTNLGRP_IPV6_NETCONF
 
RTNLGRP_IPV6_NETCONF


	)

642 
	mRTNLGRP_MDB
,

643 
	#RTNLGRP_MDB
 
RTNLGRP_MDB


	)

644 
	mRTNLGRP_MPLS_ROUTE
,

645 
	#RTNLGRP_MPLS_ROUTE
 
RTNLGRP_MPLS_ROUTE


	)

646 
	mRTNLGRP_NSID
,

647 
	#RTNLGRP_NSID
 
RTNLGRP_NSID


	)

648 
	m__RTNLGRP_MAX


650 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

653 
	stˇmsg
 {

654 
	mtˇ_Ámûy
;

655 
	mtˇ__∑d1
;

656 
	mtˇ__∑d2
;

658 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

659 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

660 
	#TCA_ACT_TAB
 1

	)

661 
	#TCAA_MAX
 1

	)

664 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

665 
	#RTEXT_FILTER_BRVLAN
 (1 << 1)

	)

666 
	#RTEXT_FILTER_BRVLAN_COMPRESSED
 (1 << 2)

	)

	@include/linux/sock_diag.h

1 #i‚de‡
__SOCK_DIAG_H__


2 
	#__SOCK_DIAG_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	#SOCK_DIAG_BY_FAMILY
 20

	)

8 
	ssock_düg_ªq
 {

9 
__u8
 
	msdüg_Ámûy
;

10 
__u8
 
	msdüg_¥Ÿocﬁ
;

14 
	mSK_MEMINFO_RMEM_ALLOC
,

15 
	mSK_MEMINFO_RCVBUF
,

16 
	mSK_MEMINFO_WMEM_ALLOC
,

17 
	mSK_MEMINFO_SNDBUF
,

18 
	mSK_MEMINFO_FWD_ALLOC
,

19 
	mSK_MEMINFO_WMEM_QUEUED
,

20 
	mSK_MEMINFO_OPTMEM
,

21 
	mSK_MEMINFO_BACKLOG
,

23 
	mSK_MEMINFO_VARS
,

26 
	esk√éök_groups
 {

27 
	mSKNLGRP_NONE
,

28 
	mSKNLGRP_INET_TCP_DESTROY
,

29 
	mSKNLGRP_INET_UDP_DESTROY
,

30 
	mSKNLGRP_INET6_TCP_DESTROY
,

31 
	mSKNLGRP_INET6_UDP_DESTROY
,

32 
	m__SKNLGRP_MAX
,

34 
	#SKNLGRP_MAX
 (
__SKNLGRP_MAX
 - 1)

	)

	@include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@include/linux/tc_act/tc_bpf.h

10 #i‚de‡
__LINUX_TC_BPF_H


11 
	#__LINUX_TC_BPF_H


	)

13 
	~<löux/pkt_˛s.h
>

15 
	#TCA_ACT_BPF
 13

	)

17 
	stc_a˘_bpf
 {

18 
	mtc_gí
;

22 
	mTCA_ACT_BPF_UNSPEC
,

23 
	mTCA_ACT_BPF_TM
,

24 
	mTCA_ACT_BPF_PARMS
,

25 
	mTCA_ACT_BPF_OPS_LEN
,

26 
	mTCA_ACT_BPF_OPS
,

27 
	mTCA_ACT_BPF_FD
,

28 
	mTCA_ACT_BPF_NAME
,

29 
	m__TCA_ACT_BPF_MAX
,

31 
	#TCA_ACT_BPF_MAX
 (
__TCA_ACT_BPF_MAX
 - 1)

	)

	@include/linux/tc_act/tc_connmark.h

1 #i‚de‡
__UAPI_TC_CONNMARK_H


2 
	#__UAPI_TC_CONNMARK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TCA_ACT_CONNMARK
 14

	)

9 
	stc_c⁄nm¨k
 {

10 
	mtc_gí
;

11 
__u16
 
	mz⁄e
;

15 
	mTCA_CONNMARK_UNSPEC
,

16 
	mTCA_CONNMARK_PARMS
,

17 
	mTCA_CONNMARK_TM
,

18 
	m__TCA_CONNMARK_MAX


20 
	#TCA_CONNMARK_MAX
 (
__TCA_CONNMARK_MAX
 - 1)

	)

	@include/linux/tc_act/tc_csum.h

1 #i‚de‡
__LINUX_TC_CSUM_H


2 
	#__LINUX_TC_CSUM_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TCA_ACT_CSUM
 16

	)

10 
	mTCA_CSUM_UNSPEC
,

11 
	mTCA_CSUM_PARMS
,

12 
	mTCA_CSUM_TM
,

13 
	m__TCA_CSUM_MAX


15 
	#TCA_CSUM_MAX
 (
__TCA_CSUM_MAX
 - 1)

	)

18 
	mTCA_CSUM_UPDATE_FLAG_IPV4HDR
 = 1,

19 
	mTCA_CSUM_UPDATE_FLAG_ICMP
 = 2,

20 
	mTCA_CSUM_UPDATE_FLAG_IGMP
 = 4,

21 
	mTCA_CSUM_UPDATE_FLAG_TCP
 = 8,

22 
	mTCA_CSUM_UPDATE_FLAG_UDP
 = 16,

23 
	mTCA_CSUM_UPDATE_FLAG_UDPLITE
 = 32

26 
	stc_csum
 {

27 
	mtc_gí
;

29 
__u32
 
	mupd©e_Êags
;

	@include/linux/tc_act/tc_defact.h

1 #i‚de‡
__LINUX_TC_DEF_H


2 
	#__LINUX_TC_DEF_H


	)

4 
	~<löux/pkt_˛s.h
>

6 
	stc_deÁ˘
 {

7 
	mtc_gí
;

11 
	mTCA_DEF_UNSPEC
,

12 
	mTCA_DEF_TM
,

13 
	mTCA_DEF_PARMS
,

14 
	mTCA_DEF_DATA
,

15 
	m__TCA_DEF_MAX


17 
	#TCA_DEF_MAX
 (
__TCA_DEF_MAX
 - 1)

	)

	@include/linux/tc_act/tc_gact.h

1 #i‚de‡
__LINUX_TC_GACT_H


2 
	#__LINUX_TC_GACT_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TCA_ACT_GACT
 5

	)

8 
	stc_ga˘
 {

9 
	mtc_gí
;

13 
	stc_ga˘_p
 {

14 
	#PGACT_NONE
 0

	)

15 
	#PGACT_NETRAND
 1

	)

16 
	#PGACT_DETERM
 2

	)

17 
	#MAX_RAND
 (
PGACT_DETERM
 + 1 )

	)

18 
__u16
 
	m±y≥
;

19 
__u16
 
	mpvÆ
;

20 
	m∑˘i⁄
;

24 
	mTCA_GACT_UNSPEC
,

25 
	mTCA_GACT_TM
,

26 
	mTCA_GACT_PARMS
,

27 
	mTCA_GACT_PROB
,

28 
	m__TCA_GACT_MAX


30 
	#TCA_GACT_MAX
 (
__TCA_GACT_MAX
 - 1)

	)

	@include/linux/tc_act/tc_ipt.h

1 #i‚de‡
__LINUX_TC_IPT_H


2 
	#__LINUX_TC_IPT_H


	)

4 
	~<löux/pkt_˛s.h
>

6 
	#TCA_ACT_IPT
 6

	)

7 
	#TCA_ACT_XT
 10

	)

10 
	mTCA_IPT_UNSPEC
,

11 
	mTCA_IPT_TABLE
,

12 
	mTCA_IPT_HOOK
,

13 
	mTCA_IPT_INDEX
,

14 
	mTCA_IPT_CNT
,

15 
	mTCA_IPT_TM
,

16 
	mTCA_IPT_TARG
,

17 
	m__TCA_IPT_MAX


19 
	#TCA_IPT_MAX
 (
__TCA_IPT_MAX
 - 1)

	)

	@include/linux/tc_act/tc_mirred.h

1 #i‚de‡
__LINUX_TC_MIR_H


2 
	#__LINUX_TC_MIR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TCA_ACT_MIRRED
 8

	)

8 
	#TCA_EGRESS_REDIR
 1

	)

9 
	#TCA_EGRESS_MIRROR
 2

	)

10 
	#TCA_INGRESS_REDIR
 3

	)

11 
	#TCA_INGRESS_MIRROR
 4

	)

13 
	stc_múªd
 {

14 
	mtc_gí
;

15 
	mó˘i⁄
;

16 
__u32
 
	mifödex
;

20 
	mTCA_MIRRED_UNSPEC
,

21 
	mTCA_MIRRED_TM
,

22 
	mTCA_MIRRED_PARMS
,

23 
	m__TCA_MIRRED_MAX


25 
	#TCA_MIRRED_MAX
 (
__TCA_MIRRED_MAX
 - 1)

	)

	@include/linux/tc_act/tc_nat.h

1 #i‚de‡
__LINUX_TC_NAT_H


2 
	#__LINUX_TC_NAT_H


	)

4 
	~<löux/pkt_˛s.h
>

5 
	~<löux/ty≥s.h
>

7 
	#TCA_ACT_NAT
 9

	)

10 
	mTCA_NAT_UNSPEC
,

11 
	mTCA_NAT_PARMS
,

12 
	mTCA_NAT_TM
,

13 
	m__TCA_NAT_MAX


15 
	#TCA_NAT_MAX
 (
__TCA_NAT_MAX
 - 1)

	)

17 
	#TCA_NAT_FLAG_EGRESS
 1

	)

19 
	stc_«t
 {

20 
	mtc_gí
;

21 
__be32
 
	mﬁd_addr
;

22 
__be32
 
	m√w_addr
;

23 
__be32
 
	mmask
;

24 
__u32
 
	mÊags
;

	@include/linux/tc_act/tc_pedit.h

1 #i‚de‡
__LINUX_TC_PED_H


2 
	#__LINUX_TC_PED_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TCA_ACT_PEDIT
 7

	)

10 
	mTCA_PEDIT_UNSPEC
,

11 
	mTCA_PEDIT_TM
,

12 
	mTCA_PEDIT_PARMS
,

13 
	m__TCA_PEDIT_MAX


15 
	#TCA_PEDIT_MAX
 (
__TCA_PEDIT_MAX
 - 1)

	)

17 
	stc_≥dô_key
 {

18 
__u32
 
	mmask
;

19 
__u32
 
	mvÆ
;

20 
__u32
 
	moff
;

21 
__u32
 
	m©
;

22 
__u32
 
	moffmask
;

23 
__u32
 
	mshi·
;

26 
	stc_≥dô_£l
 {

27 
	mtc_gí
;

28 
	mnkeys
;

29 
	mÊags
;

30 
tc_≥dô_key
 
	mkeys
[0];

32 
	#tc_≥dô
 
tc_≥dô_£l


	)

	@include/linux/tc_act/tc_skbedit.h

20 #i‚de‡
__LINUX_TC_SKBEDIT_H


21 
	#__LINUX_TC_SKBEDIT_H


	)

23 
	~<löux/pkt_˛s.h
>

25 
	#TCA_ACT_SKBEDIT
 11

	)

27 
	#SKBEDIT_F_PRIORITY
 0x1

	)

28 
	#SKBEDIT_F_QUEUE_MAPPING
 0x2

	)

29 
	#SKBEDIT_F_MARK
 0x4

	)

31 
	stc_skbedô
 {

32 
	mtc_gí
;

36 
	mTCA_SKBEDIT_UNSPEC
,

37 
	mTCA_SKBEDIT_TM
,

38 
	mTCA_SKBEDIT_PARMS
,

39 
	mTCA_SKBEDIT_PRIORITY
,

40 
	mTCA_SKBEDIT_QUEUE_MAPPING
,

41 
	mTCA_SKBEDIT_MARK
,

42 
	m__TCA_SKBEDIT_MAX


44 
	#TCA_SKBEDIT_MAX
 (
__TCA_SKBEDIT_MAX
 - 1)

	)

	@include/linux/tc_act/tc_vlan.h

10 #i‚de‡
__LINUX_TC_VLAN_H


11 
	#__LINUX_TC_VLAN_H


	)

13 
	~<löux/pkt_˛s.h
>

15 
	#TCA_ACT_VLAN
 12

	)

17 
	#TCA_VLAN_ACT_POP
 1

	)

18 
	#TCA_VLAN_ACT_PUSH
 2

	)

20 
	stc_vœn
 {

21 
	mtc_gí
;

22 
	mv_a˘i⁄
;

26 
	mTCA_VLAN_UNSPEC
,

27 
	mTCA_VLAN_TM
,

28 
	mTCA_VLAN_PARMS
,

29 
	mTCA_VLAN_PUSH_VLAN_ID
,

30 
	mTCA_VLAN_PUSH_VLAN_PROTOCOL
,

31 
	m__TCA_VLAN_MAX
,

33 
	#TCA_VLAN_MAX
 (
__TCA_VLAN_MAX
 - 1)

	)

	@include/linux/tc_ematch/tc_em_cmp.h

1 #i‚de‡
__LINUX_TC_EM_CMP_H


2 
	#__LINUX_TC_EM_CMP_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	stcf_em_cmp
 {

8 
__u32
 
	mvÆ
;

9 
__u32
 
	mmask
;

10 
__u16
 
	moff
;

11 
__u8
 
	mÆign
:4;

12 
__u8
 
	mÊags
:4;

13 
__u8
 
	mœyî
:4;

14 
__u8
 
	m›nd
:4;

18 
	mTCF_EM_ALIGN_U8
 = 1,

19 
	mTCF_EM_ALIGN_U16
 = 2,

20 
	mTCF_EM_ALIGN_U32
 = 4

23 
	#TCF_EM_CMP_TRANS
 1

	)

	@include/linux/tc_ematch/tc_em_meta.h

1 #i‚de‡
__LINUX_TC_EM_META_H


2 
	#__LINUX_TC_EM_META_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

8 
	mTCA_EM_META_UNSPEC
,

9 
	mTCA_EM_META_HDR
,

10 
	mTCA_EM_META_LVALUE
,

11 
	mTCA_EM_META_RVALUE
,

12 
	m__TCA_EM_META_MAX


14 
	#TCA_EM_META_MAX
 (
__TCA_EM_META_MAX
 - 1)

	)

16 
	stcf_mëa_vÆ
 {

17 
__u16
 
	mköd
;

18 
__u8
 
	mshi·
;

19 
__u8
 
	m›
;

22 
	#TCF_META_TYPE_MASK
 (0x‡<< 12)

	)

23 
	#TCF_META_TYPE
(
köd
Ë(((ködË& 
TCF_META_TYPE_MASK
Ë>> 12)

	)

24 
	#TCF_META_ID_MASK
 0x7ff

	)

25 
	#TCF_META_ID
(
köd
Ë((ködË& 
TCF_META_ID_MASK
)

	)

28 
	mTCF_META_TYPE_VAR
,

29 
	mTCF_META_TYPE_INT
,

30 
	m__TCF_META_TYPE_MAX


32 
	#TCF_META_TYPE_MAX
 (
__TCF_META_TYPE_MAX
 - 1)

	)

35 
	mTCF_META_ID_VALUE
,

36 
	mTCF_META_ID_RANDOM
,

37 
	mTCF_META_ID_LOADAVG_0
,

38 
	mTCF_META_ID_LOADAVG_1
,

39 
	mTCF_META_ID_LOADAVG_2
,

40 
	mTCF_META_ID_DEV
,

41 
	mTCF_META_ID_PRIORITY
,

42 
	mTCF_META_ID_PROTOCOL
,

43 
	mTCF_META_ID_PKTTYPE
,

44 
	mTCF_META_ID_PKTLEN
,

45 
	mTCF_META_ID_DATALEN
,

46 
	mTCF_META_ID_MACLEN
,

47 
	mTCF_META_ID_NFMARK
,

48 
	mTCF_META_ID_TCINDEX
,

49 
	mTCF_META_ID_RTCLASSID
,

50 
	mTCF_META_ID_RTIIF
,

51 
	mTCF_META_ID_SK_FAMILY
,

52 
	mTCF_META_ID_SK_STATE
,

53 
	mTCF_META_ID_SK_REUSE
,

54 
	mTCF_META_ID_SK_BOUND_IF
,

55 
	mTCF_META_ID_SK_REFCNT
,

56 
	mTCF_META_ID_SK_SHUTDOWN
,

57 
	mTCF_META_ID_SK_PROTO
,

58 
	mTCF_META_ID_SK_TYPE
,

59 
	mTCF_META_ID_SK_RCVBUF
,

60 
	mTCF_META_ID_SK_RMEM_ALLOC
,

61 
	mTCF_META_ID_SK_WMEM_ALLOC
,

62 
	mTCF_META_ID_SK_OMEM_ALLOC
,

63 
	mTCF_META_ID_SK_WMEM_QUEUED
,

64 
	mTCF_META_ID_SK_RCV_QLEN
,

65 
	mTCF_META_ID_SK_SND_QLEN
,

66 
	mTCF_META_ID_SK_ERR_QLEN
,

67 
	mTCF_META_ID_SK_FORWARD_ALLOCS
,

68 
	mTCF_META_ID_SK_SNDBUF
,

69 
	mTCF_META_ID_SK_ALLOCS
,

70 
	m__TCF_META_ID_SK_ROUTE_CAPS
,

71 
	mTCF_META_ID_SK_HASH
,

72 
	mTCF_META_ID_SK_LINGERTIME
,

73 
	mTCF_META_ID_SK_ACK_BACKLOG
,

74 
	mTCF_META_ID_SK_MAX_ACK_BACKLOG
,

75 
	mTCF_META_ID_SK_PRIO
,

76 
	mTCF_META_ID_SK_RCVLOWAT
,

77 
	mTCF_META_ID_SK_RCVTIMEO
,

78 
	mTCF_META_ID_SK_SNDTIMEO
,

79 
	mTCF_META_ID_SK_SENDMSG_OFF
,

80 
	mTCF_META_ID_SK_WRITE_PENDING
,

81 
	mTCF_META_ID_VLAN_TAG
,

82 
	mTCF_META_ID_RXHASH
,

83 
	m__TCF_META_ID_MAX


85 
	#TCF_META_ID_MAX
 (
__TCF_META_ID_MAX
 - 1)

	)

87 
	stcf_mëa_hdr
 {

88 
tcf_mëa_vÆ
 
	mÀ·
;

89 
tcf_mëa_vÆ
 
	mright
;

	@include/linux/tc_ematch/tc_em_nbyte.h

1 #i‚de‡
__LINUX_TC_EM_NBYTE_H


2 
	#__LINUX_TC_EM_NBYTE_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	stcf_em_nbyã
 {

8 
__u16
 
	moff
;

9 
__u16
 
	mÀn
:12;

10 
__u8
 
	mœyî
:4;

	@include/linux/tc_ematch/tc_em_text.h

1 #i‚de‡
__LINUX_TC_EM_TEXT_H


2 
	#__LINUX_TC_EM_TEXT_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TC_EM_TEXT_ALGOSIZ
 16

	)

9 
	stcf_em_ãxt
 {

10 
	mÆgo
[
TC_EM_TEXT_ALGOSIZ
];

11 
__u16
 
	m‰om_off£t
;

12 
__u16
 
	mto_off£t
;

13 
__u16
 
	m∑âîn_Àn
;

14 
__u8
 
	m‰om_œyî
:4;

15 
__u8
 
	mto_œyî
:4;

16 
__u8
 
	m∑d
;

	@include/linux/tcp.h

17 #i‚de‡
_LINUX_TCP_H


18 
	#_LINUX_TCP_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<asm/byã‹dî.h
>

22 
	~<löux/sockë.h
>

24 
	st˝hdr
 {

25 
__be16
 
	msour˚
;

26 
__be16
 
	mde°
;

27 
__be32
 
	m£q
;

28 
__be32
 
	mack_£q
;

29 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

30 
__u16
 
	mªs1
:4,

31 
	mdoff
:4,

32 
	mfö
:1,

33 
	msyn
:1,

34 
	mr°
:1,

35 
	mpsh
:1,

36 
	mack
:1,

37 
	murg
:1,

38 
	me˚
:1,

39 
	mcwr
:1;

40 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

41 
__u16
 
	mdoff
:4,

42 
	mªs1
:4,

43 
	mcwr
:1,

44 
	me˚
:1,

45 
	murg
:1,

46 
	mack
:1,

47 
	mpsh
:1,

48 
	mr°
:1,

49 
	msyn
:1,

50 
	mfö
:1;

54 
__be16
 
	mwödow
;

55 
__sum16
 
	mcheck
;

56 
__be16
 
	murg_±r
;

64 
	ut˝_w‹d_hdr
 {

65 
t˝hdr
 
	mhdr
;

66 
__be32
 
	mw‹ds
[5];

69 
	#t˝_Êag_w‹d
(
ç
Ë–((
t˝_w‹d_hdr
 *)—p))->
w‹ds
 [3])

	)

72 
	mTCP_FLAG_CWR
 = 
__c⁄°™t_˝u_to_be32
(0x00800000),

73 
	mTCP_FLAG_ECE
 = 
__c⁄°™t_˝u_to_be32
(0x00400000),

74 
	mTCP_FLAG_URG
 = 
__c⁄°™t_˝u_to_be32
(0x00200000),

75 
	mTCP_FLAG_ACK
 = 
__c⁄°™t_˝u_to_be32
(0x00100000),

76 
	mTCP_FLAG_PSH
 = 
__c⁄°™t_˝u_to_be32
(0x00080000),

77 
	mTCP_FLAG_RST
 = 
__c⁄°™t_˝u_to_be32
(0x00040000),

78 
	mTCP_FLAG_SYN
 = 
__c⁄°™t_˝u_to_be32
(0x00020000),

79 
	mTCP_FLAG_FIN
 = 
__c⁄°™t_˝u_to_be32
(0x00010000),

80 
	mTCP_RESERVED_BITS
 = 
__c⁄°™t_˝u_to_be32
(0x0F000000),

81 
	mTCP_DATA_OFFSET
 = 
__c⁄°™t_˝u_to_be32
(0xF0000000)

87 
	#TCP_MSS_DEFAULT
 536U

	)

88 
	#TCP_MSS_DESIRED
 1220U

	)

91 
	#TCP_NODELAY
 1

	)

92 
	#TCP_MAXSEG
 2

	)

93 
	#TCP_CORK
 3

	)

94 
	#TCP_KEEPIDLE
 4

	)

95 
	#TCP_KEEPINTVL
 5

	)

96 
	#TCP_KEEPCNT
 6

	)

97 
	#TCP_SYNCNT
 7

	)

98 
	#TCP_LINGER2
 8

	)

99 
	#TCP_DEFER_ACCEPT
 9

	)

100 
	#TCP_WINDOW_CLAMP
 10

	)

101 
	#TCP_INFO
 11

	)

102 
	#TCP_QUICKACK
 12

	)

103 
	#TCP_CONGESTION
 13

	)

104 
	#TCP_MD5SIG
 14

	)

105 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

106 
	#TCP_THIN_DUPACK
 17

	)

107 
	#TCP_USER_TIMEOUT
 18

	)

108 
	#TCP_REPAIR
 19

	)

109 
	#TCP_REPAIR_QUEUE
 20

	)

110 
	#TCP_QUEUE_SEQ
 21

	)

111 
	#TCP_REPAIR_OPTIONS
 22

	)

112 
	#TCP_FASTOPEN
 23

	)

113 
	#TCP_TIMESTAMP
 24

	)

114 
	#TCP_NOTSENT_LOWAT
 25

	)

115 
	#TCP_CC_INFO
 26

	)

116 
	#TCP_SAVE_SYN
 27

	)

117 
	#TCP_SAVED_SYN
 28

	)

119 
	st˝_ª∑ú_›t
 {

120 
__u32
 
	m›t_code
;

121 
__u32
 
	m›t_vÆ
;

125 
	mTCP_NO_QUEUE
,

126 
	mTCP_RECV_QUEUE
,

127 
	mTCP_SEND_QUEUE
,

128 
	mTCP_QUEUES_NR
,

132 
	#TCPI_OPT_TIMESTAMPS
 1

	)

133 
	#TCPI_OPT_SACK
 2

	)

134 
	#TCPI_OPT_WSCALE
 4

	)

135 
	#TCPI_OPT_ECN
 8

	)

136 
	#TCPI_OPT_ECN_SEEN
 16

	)

137 
	#TCPI_OPT_SYN_DATA
 32

	)

139 
	et˝_ˇ_°©e
 {

140 
	mTCP_CA_O≥n
 = 0,

141 
	#TCPF_CA_O≥n
 (1<<
TCP_CA_O≥n
)

	)

142 
	mTCP_CA_Dis‹dî
 = 1,

143 
	#TCPF_CA_Dis‹dî
 (1<<
TCP_CA_Dis‹dî
)

	)

144 
	mTCP_CA_CWR
 = 2,

145 
	#TCPF_CA_CWR
 (1<<
TCP_CA_CWR
)

	)

146 
	mTCP_CA_Recovîy
 = 3,

147 
	#TCPF_CA_Recovîy
 (1<<
TCP_CA_Recovîy
)

	)

148 
	mTCP_CA_Loss
 = 4

149 
	#TCPF_CA_Loss
 (1<<
TCP_CA_Loss
)

	)

152 
	st˝_öfo
 {

153 
__u8
 
	mt˝i_°©e
;

154 
__u8
 
	mt˝i_ˇ_°©e
;

155 
__u8
 
	mt˝i_ªå™smôs
;

156 
__u8
 
	mt˝i_¥obes
;

157 
__u8
 
	mt˝i_backoff
;

158 
__u8
 
	mt˝i_›ti⁄s
;

159 
__u8
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

161 
__u32
 
	mt˝i_πo
;

162 
__u32
 
	mt˝i_©o
;

163 
__u32
 
	mt˝i_¢d_mss
;

164 
__u32
 
	mt˝i_rcv_mss
;

166 
__u32
 
	mt˝i_u«cked
;

167 
__u32
 
	mt˝i_ßcked
;

168 
__u32
 
	mt˝i_lo°
;

169 
__u32
 
	mt˝i_ªå™s
;

170 
__u32
 
	mt˝i_Áckës
;

173 
__u32
 
	mt˝i_œ°_d©a_£¡
;

174 
__u32
 
	mt˝i_œ°_ack_£¡
;

175 
__u32
 
	mt˝i_œ°_d©a_ªcv
;

176 
__u32
 
	mt˝i_œ°_ack_ªcv
;

179 
__u32
 
	mt˝i_pmtu
;

180 
__u32
 
	mt˝i_rcv_s°hªsh
;

181 
__u32
 
	mt˝i_πt
;

182 
__u32
 
	mt˝i_πtv¨
;

183 
__u32
 
	mt˝i_¢d_s°hªsh
;

184 
__u32
 
	mt˝i_¢d_cwnd
;

185 
__u32
 
	mt˝i_advmss
;

186 
__u32
 
	mt˝i_ª‹dîög
;

188 
__u32
 
	mt˝i_rcv_πt
;

189 
__u32
 
	mt˝i_rcv_•a˚
;

191 
__u32
 
	mt˝i_tŸÆ_ªå™s
;

193 
__u64
 
	mt˝i_∑cög_øã
;

194 
__u64
 
	mt˝i_max_∑cög_øã
;

195 
__u64
 
	mt˝i_byãs_acked
;

196 
__u64
 
	mt˝i_byãs_ª˚ived
;

197 
__u32
 
	mt˝i_£gs_out
;

198 
__u32
 
	mt˝i_£gs_ö
;

202 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

204 
	st˝_md5sig
 {

205 
__kî√l_sockaddr_°‹age
 
	mt˝m_addr
;

206 
__u16
 
	m__t˝m_∑d1
;

207 
__u16
 
	mt˝m_keyÀn
;

208 
__u32
 
	m__t˝m_∑d2
;

209 
__u8
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@include/linux/tcp_metrics.h

3 #i‚de‡
_LINUX_TCP_METRICS_H


4 
	#_LINUX_TCP_METRICS_H


	)

6 
	~<löux/ty≥s.h
>

10 
	#TCP_METRICS_GENL_NAME
 "t˝_mërics"

	)

11 
	#TCP_METRICS_GENL_VERSION
 0x1

	)

13 
	et˝_mëric_ödex
 {

14 
	mTCP_METRIC_RTT
,

15 
	mTCP_METRIC_RTTVAR
,

16 
	mTCP_METRIC_SSTHRESH
,

17 
	mTCP_METRIC_CWND
,

18 
	mTCP_METRIC_REORDERING
,

20 
	mTCP_METRIC_RTT_US
,

21 
	mTCP_METRIC_RTTVAR_US
,

24 
	m__TCP_METRIC_MAX
,

27 
	#TCP_METRIC_MAX
 (
__TCP_METRIC_MAX
 - 1)

	)

30 
	mTCP_METRICS_ATTR_UNSPEC
,

31 
	mTCP_METRICS_ATTR_ADDR_IPV4
,

32 
	mTCP_METRICS_ATTR_ADDR_IPV6
,

33 
	mTCP_METRICS_ATTR_AGE
,

34 
	mTCP_METRICS_ATTR_TW_TSVAL
,

35 
	mTCP_METRICS_ATTR_TW_TS_STAMP
,

36 
	mTCP_METRICS_ATTR_VALS
,

37 
	mTCP_METRICS_ATTR_FOPEN_MSS
,

38 
	mTCP_METRICS_ATTR_FOPEN_SYN_DROPS
,

39 
	mTCP_METRICS_ATTR_FOPEN_SYN_DROP_TS
,

40 
	mTCP_METRICS_ATTR_FOPEN_COOKIE
,

41 
	mTCP_METRICS_ATTR_SADDR_IPV4
,

42 
	mTCP_METRICS_ATTR_SADDR_IPV6
,

44 
	m__TCP_METRICS_ATTR_MAX
,

47 
	#TCP_METRICS_ATTR_MAX
 (
__TCP_METRICS_ATTR_MAX
 - 1)

	)

50 
	mTCP_METRICS_CMD_UNSPEC
,

51 
	mTCP_METRICS_CMD_GET
,

52 
	mTCP_METRICS_CMD_DEL
,

54 
	m__TCP_METRICS_CMD_MAX
,

57 
	#TCP_METRICS_CMD_MAX
 (
__TCP_METRICS_CMD_MAX
 - 1)

	)

	@include/linux/tipc.h

37 #i‚de‡
_LINUX_TIPC_H_


38 
	#_LINUX_TIPC_H_


	)

40 
	~<löux/ty≥s.h
>

41 
	~<löux/sockios.h
>

47 
	stùc_p‹tid
 {

48 
__u32
 
	mªf
;

49 
__u32
 
	mnode
;

52 
	stùc_«me
 {

53 
__u32
 
	mty≥
;

54 
__u32
 
	mö°™˚
;

57 
	stùc_«me_£q
 {

58 
__u32
 
	mty≥
;

59 
__u32
 
	mlowî
;

60 
__u32
 
	muµî
;

63 
__ölöe__
 
__u32
 
	$tùc_addr
(
z⁄e
,

64 
˛u°î
,

65 
node
)

67  (
z⁄e
 << 24Ë| (
˛u°î
 << 12Ë| 
node
;

68 
	}
}

70 
__ölöe__
 
	$tùc_z⁄e
(
__u32
 
addr
)

72  
addr
 >> 24;

73 
	}
}

75 
__ölöe__
 
	$tùc_˛u°î
(
__u32
 
addr
)

77  (
addr
 >> 12) & 0xfff;

78 
	}
}

80 
__ölöe__
 
	$tùc_node
(
__u32
 
addr
)

82  
addr
 & 0xfff;

83 
	}
}

89 
	#TIPC_CFG_SRV
 0

	)

90 
	#TIPC_TOP_SRV
 1

	)

91 
	#TIPC_LINK_STATE
 2

	)

92 
	#TIPC_RESERVED_TYPES
 64

	)

98 
	#TIPC_ZONE_SCOPE
 1

	)

99 
	#TIPC_CLUSTER_SCOPE
 2

	)

100 
	#TIPC_NODE_SCOPE
 3

	)

106 
	#TIPC_MAX_USER_MSG_SIZE
 66000U

	)

112 
	#TIPC_LOW_IMPORTANCE
 0

	)

113 
	#TIPC_MEDIUM_IMPORTANCE
 1

	)

114 
	#TIPC_HIGH_IMPORTANCE
 2

	)

115 
	#TIPC_CRITICAL_IMPORTANCE
 3

	)

121 
	#TIPC_OK
 0

	)

122 
	#TIPC_ERR_NO_NAME
 1

	)

123 
	#TIPC_ERR_NO_PORT
 2

	)

124 
	#TIPC_ERR_NO_NODE
 3

	)

125 
	#TIPC_ERR_OVERLOAD
 4

	)

126 
	#TIPC_CONN_SHUTDOWN
 5

	)

132 
	#TIPC_SUB_PORTS
 0x01

	)

133 
	#TIPC_SUB_SERVICE
 0x02

	)

134 
	#TIPC_SUB_CANCEL
 0x04

	)

136 
	#TIPC_WAIT_FOREVER
 (~0Ë

	)

138 
	stùc_subs¸
 {

139 
tùc_«me_£q
 
	m£q
;

140 
__u32
 
	mtimeout
;

141 
__u32
 
	mfûãr
;

142 
	mu§_h™dÀ
[8];

145 
	#TIPC_PUBLISHED
 1

	)

146 
	#TIPC_WITHDRAWN
 2

	)

147 
	#TIPC_SUBSCR_TIMEOUT
 3

	)

149 
	stùc_evít
 {

150 
__u32
 
	mevít
;

151 
__u32
 
	mfound_lowî
;

152 
__u32
 
	mfound_uµî
;

153 
tùc_p‹tid
 
	mp‹t
;

154 
tùc_subs¸
 
	ms
;

161 #i‚de‡
AF_TIPC


162 
	#AF_TIPC
 30

	)

165 #i‚de‡
PF_TIPC


166 
	#PF_TIPC
 
AF_TIPC


	)

169 #i‚de‡
SOL_TIPC


170 
	#SOL_TIPC
 271

	)

173 
	#TIPC_ADDR_NAMESEQ
 1

	)

174 
	#TIPC_ADDR_MCAST
 1

	)

175 
	#TIPC_ADDR_NAME
 2

	)

176 
	#TIPC_ADDR_ID
 3

	)

178 
	ssockaddr_tùc
 {

179 
	mÁmûy
;

180 
	maddπy≥
;

181 sig√d 
	msc›e
;

183 
tùc_p‹tid
 
	mid
;

184 
tùc_«me_£q
 
	m«me£q
;

186 
tùc_«me
 
	m«me
;

187 
__u32
 
	mdomaö
;

188 } 
	m«me
;

189 } 
	maddr
;

196 
	#TIPC_ERRINFO
 1

	)

197 
	#TIPC_RETDATA
 2

	)

198 
	#TIPC_DESTNAME
 3

	)

204 
	#TIPC_IMPORTANCE
 127

	)

205 
	#TIPC_SRC_DROPPABLE
 128

	)

206 
	#TIPC_DEST_DROPPABLE
 129

	)

207 
	#TIPC_CONN_TIMEOUT
 130

	)

208 
	#TIPC_NODE_RECVQ_DEPTH
 131

	)

209 
	#TIPC_SOCK_RECVQ_DEPTH
 132

	)

220 
	#TIPC_MAX_MEDIA_NAME
 16

	)

221 
	#TIPC_MAX_IF_NAME
 16

	)

222 
	#TIPC_MAX_BEARER_NAME
 32

	)

223 
	#TIPC_MAX_LINK_NAME
 60

	)

225 
	#SIOCGETLINKNAME
 
SIOCPROTOPRIVATE


	)

227 
	stùc_sioc_ _ªq
 {

228 
__u32
 
	m≥î
;

229 
__u32
 
	mbóªr_id
;

230 
	mlök«me
[
TIPC_MAX_LINK_NAME
];

	@include/linux/tipc_netlink.h

34 #i‚de‡
_LINUX_TIPC_NETLINK_H_


35 
	#_LINUX_TIPC_NETLINK_H_


	)

37 
	#TIPC_GENL_V2_NAME
 "TIPCv2"

	)

38 
	#TIPC_GENL_V2_VERSION
 0x1

	)

42 
	mTIPC_NL_UNSPEC
,

43 
	mTIPC_NL_LEGACY
,

44 
	mTIPC_NL_BEARER_DISABLE
,

45 
	mTIPC_NL_BEARER_ENABLE
,

46 
	mTIPC_NL_BEARER_GET
,

47 
	mTIPC_NL_BEARER_SET
,

48 
	mTIPC_NL_SOCK_GET
,

49 
	mTIPC_NL_PUBL_GET
,

50 
	mTIPC_NL_LINK_GET
,

51 
	mTIPC_NL_LINK_SET
,

52 
	mTIPC_NL_LINK_RESET_STATS
,

53 
	mTIPC_NL_MEDIA_GET
,

54 
	mTIPC_NL_MEDIA_SET
,

55 
	mTIPC_NL_NODE_GET
,

56 
	mTIPC_NL_NET_GET
,

57 
	mTIPC_NL_NET_SET
,

58 
	mTIPC_NL_NAME_TABLE_GET
,

60 
	m__TIPC_NL_CMD_MAX
,

61 
	mTIPC_NL_CMD_MAX
 = 
__TIPC_NL_CMD_MAX
 - 1

66 
	mTIPC_NLA_UNSPEC
,

67 
	mTIPC_NLA_BEARER
,

68 
	mTIPC_NLA_SOCK
,

69 
	mTIPC_NLA_PUBL
,

70 
	mTIPC_NLA_LINK
,

71 
	mTIPC_NLA_MEDIA
,

72 
	mTIPC_NLA_NODE
,

73 
	mTIPC_NLA_NET
,

74 
	mTIPC_NLA_NAME_TABLE
,

76 
	m__TIPC_NLA_MAX
,

77 
	mTIPC_NLA_MAX
 = 
__TIPC_NLA_MAX
 - 1

82 
	mTIPC_NLA_BEARER_UNSPEC
,

83 
	mTIPC_NLA_BEARER_NAME
,

84 
	mTIPC_NLA_BEARER_PROP
,

85 
	mTIPC_NLA_BEARER_DOMAIN
,

86 
	mTIPC_NLA_BEARER_UDP_OPTS
,

88 
	m__TIPC_NLA_BEARER_MAX
,

89 
	mTIPC_NLA_BEARER_MAX
 = 
__TIPC_NLA_BEARER_MAX
 - 1

93 
	mTIPC_NLA_UDP_UNSPEC
,

94 
	mTIPC_NLA_UDP_LOCAL
,

95 
	mTIPC_NLA_UDP_REMOTE
,

97 
	m__TIPC_NLA_UDP_MAX
,

98 
	mTIPC_NLA_UDP_MAX
 = 
__TIPC_NLA_UDP_MAX
 - 1

102 
	mTIPC_NLA_SOCK_UNSPEC
,

103 
	mTIPC_NLA_SOCK_ADDR
,

104 
	mTIPC_NLA_SOCK_REF
,

105 
	mTIPC_NLA_SOCK_CON
,

106 
	mTIPC_NLA_SOCK_HAS_PUBL
,

108 
	m__TIPC_NLA_SOCK_MAX
,

109 
	mTIPC_NLA_SOCK_MAX
 = 
__TIPC_NLA_SOCK_MAX
 - 1

114 
	mTIPC_NLA_LINK_UNSPEC
,

115 
	mTIPC_NLA_LINK_NAME
,

116 
	mTIPC_NLA_LINK_DEST
,

117 
	mTIPC_NLA_LINK_MTU
,

118 
	mTIPC_NLA_LINK_BROADCAST
,

119 
	mTIPC_NLA_LINK_UP
,

120 
	mTIPC_NLA_LINK_ACTIVE
,

121 
	mTIPC_NLA_LINK_PROP
,

122 
	mTIPC_NLA_LINK_STATS
,

123 
	mTIPC_NLA_LINK_RX
,

124 
	mTIPC_NLA_LINK_TX
,

126 
	m__TIPC_NLA_LINK_MAX
,

127 
	mTIPC_NLA_LINK_MAX
 = 
__TIPC_NLA_LINK_MAX
 - 1

132 
	mTIPC_NLA_MEDIA_UNSPEC
,

133 
	mTIPC_NLA_MEDIA_NAME
,

134 
	mTIPC_NLA_MEDIA_PROP
,

136 
	m__TIPC_NLA_MEDIA_MAX
,

137 
	mTIPC_NLA_MEDIA_MAX
 = 
__TIPC_NLA_MEDIA_MAX
 - 1

142 
	mTIPC_NLA_NODE_UNSPEC
,

143 
	mTIPC_NLA_NODE_ADDR
,

144 
	mTIPC_NLA_NODE_UP
,

146 
	m__TIPC_NLA_NODE_MAX
,

147 
	mTIPC_NLA_NODE_MAX
 = 
__TIPC_NLA_NODE_MAX
 - 1

152 
	mTIPC_NLA_NET_UNSPEC
,

153 
	mTIPC_NLA_NET_ID
,

154 
	mTIPC_NLA_NET_ADDR
,

156 
	m__TIPC_NLA_NET_MAX
,

157 
	mTIPC_NLA_NET_MAX
 = 
__TIPC_NLA_NET_MAX
 - 1

162 
	mTIPC_NLA_NAME_TABLE_UNSPEC
,

163 
	mTIPC_NLA_NAME_TABLE_PUBL
,

165 
	m__TIPC_NLA_NAME_TABLE_MAX
,

166 
	mTIPC_NLA_NAME_TABLE_MAX
 = 
__TIPC_NLA_NAME_TABLE_MAX
 - 1

171 
	mTIPC_NLA_PUBL_UNSPEC
,

173 
	mTIPC_NLA_PUBL_TYPE
,

174 
	mTIPC_NLA_PUBL_LOWER
,

175 
	mTIPC_NLA_PUBL_UPPER
,

176 
	mTIPC_NLA_PUBL_SCOPE
,

177 
	mTIPC_NLA_PUBL_NODE
,

178 
	mTIPC_NLA_PUBL_REF
,

179 
	mTIPC_NLA_PUBL_KEY
,

181 
	m__TIPC_NLA_PUBL_MAX
,

182 
	mTIPC_NLA_PUBL_MAX
 = 
__TIPC_NLA_PUBL_MAX
 - 1

187 
	mTIPC_NLA_CON_UNSPEC
,

189 
	mTIPC_NLA_CON_FLAG
,

190 
	mTIPC_NLA_CON_NODE
,

191 
	mTIPC_NLA_CON_SOCK
,

192 
	mTIPC_NLA_CON_TYPE
,

193 
	mTIPC_NLA_CON_INST
,

195 
	m__TIPC_NLA_CON_MAX
,

196 
	mTIPC_NLA_CON_MAX
 = 
__TIPC_NLA_CON_MAX
 - 1

201 
	mTIPC_NLA_PROP_UNSPEC
,

203 
	mTIPC_NLA_PROP_PRIO
,

204 
	mTIPC_NLA_PROP_TOL
,

205 
	mTIPC_NLA_PROP_WIN
,

207 
	m__TIPC_NLA_PROP_MAX
,

208 
	mTIPC_NLA_PROP_MAX
 = 
__TIPC_NLA_PROP_MAX
 - 1

213 
	mTIPC_NLA_STATS_UNSPEC
,

215 
	mTIPC_NLA_STATS_RX_INFO
,

216 
	mTIPC_NLA_STATS_RX_FRAGMENTS
,

217 
	mTIPC_NLA_STATS_RX_FRAGMENTED
,

218 
	mTIPC_NLA_STATS_RX_BUNDLES
,

219 
	mTIPC_NLA_STATS_RX_BUNDLED
,

220 
	mTIPC_NLA_STATS_TX_INFO
,

221 
	mTIPC_NLA_STATS_TX_FRAGMENTS
,

222 
	mTIPC_NLA_STATS_TX_FRAGMENTED
,

223 
	mTIPC_NLA_STATS_TX_BUNDLES
,

224 
	mTIPC_NLA_STATS_TX_BUNDLED
,

225 
	mTIPC_NLA_STATS_MSG_PROF_TOT
,

226 
	mTIPC_NLA_STATS_MSG_LEN_CNT
,

227 
	mTIPC_NLA_STATS_MSG_LEN_TOT
,

228 
	mTIPC_NLA_STATS_MSG_LEN_P0
,

229 
	mTIPC_NLA_STATS_MSG_LEN_P1
,

230 
	mTIPC_NLA_STATS_MSG_LEN_P2
,

231 
	mTIPC_NLA_STATS_MSG_LEN_P3
,

232 
	mTIPC_NLA_STATS_MSG_LEN_P4
,

233 
	mTIPC_NLA_STATS_MSG_LEN_P5
,

234 
	mTIPC_NLA_STATS_MSG_LEN_P6
,

235 
	mTIPC_NLA_STATS_RX_STATES
,

236 
	mTIPC_NLA_STATS_RX_PROBES
,

237 
	mTIPC_NLA_STATS_RX_NACKS
,

238 
	mTIPC_NLA_STATS_RX_DEFERRED
,

239 
	mTIPC_NLA_STATS_TX_STATES
,

240 
	mTIPC_NLA_STATS_TX_PROBES
,

241 
	mTIPC_NLA_STATS_TX_NACKS
,

242 
	mTIPC_NLA_STATS_TX_ACKS
,

243 
	mTIPC_NLA_STATS_RETRANSMITTED
,

244 
	mTIPC_NLA_STATS_DUPLICATES
,

245 
	mTIPC_NLA_STATS_LINK_CONGS
,

246 
	mTIPC_NLA_STATS_MAX_QUEUE
,

247 
	mTIPC_NLA_STATS_AVG_QUEUE
,

249 
	m__TIPC_NLA_STATS_MAX
,

250 
	mTIPC_NLA_STATS_MAX
 = 
__TIPC_NLA_STATS_MAX
 - 1

	@include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@include/linux/unix_diag.h

1 #i‚de‡
__UNIX_DIAG_H__


2 
	#__UNIX_DIAG_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	sunix_düg_ªq
 {

7 
__u8
 
	msdüg_Ámûy
;

8 
__u8
 
	msdüg_¥Ÿocﬁ
;

9 
__u16
 
	m∑d
;

10 
__u32
 
	mudüg_°©es
;

11 
__u32
 
	mudüg_öo
;

12 
__u32
 
	mudüg_show
;

13 
__u32
 
	mudüg_cookõ
[2];

16 
	#UDIAG_SHOW_NAME
 0x00000001

	)

17 
	#UDIAG_SHOW_VFS
 0x00000002

	)

18 
	#UDIAG_SHOW_PEER
 0x00000004

	)

19 
	#UDIAG_SHOW_ICONS
 0x00000008

	)

20 
	#UDIAG_SHOW_RQLEN
 0x00000010

	)

21 
	#UDIAG_SHOW_MEMINFO
 0x00000020

	)

23 
	sunix_düg_msg
 {

24 
__u8
 
	mudüg_Ámûy
;

25 
__u8
 
	mudüg_ty≥
;

26 
__u8
 
	mudüg_°©e
;

27 
__u8
 
	m∑d
;

29 
__u32
 
	mudüg_öo
;

30 
__u32
 
	mudüg_cookõ
[2];

35 
	mUNIX_DIAG_NAME
,

36 
	mUNIX_DIAG_VFS
,

37 
	mUNIX_DIAG_PEER
,

38 
	mUNIX_DIAG_ICONS
,

39 
	mUNIX_DIAG_RQLEN
,

40 
	mUNIX_DIAG_MEMINFO
,

41 
	mUNIX_DIAG_SHUTDOWN
,

43 
	m__UNIX_DIAG_MAX
,

46 
	#UNIX_DIAG_MAX
 (
__UNIX_DIAG_MAX
 - 1)

	)

48 
	sunix_düg_vfs
 {

49 
__u32
 
	mudüg_vfs_öo
;

50 
__u32
 
	mudüg_vfs_dev
;

53 
	sunix_düg_rqÀn
 {

54 
__u32
 
	mudüg_rqueue
;

55 
__u32
 
	mudüg_wqueue
;

	@include/linux/veth.h

1 #i‚de‡
__NET_VETH_H_


2 
	#__NET_VETH_H_


	)

5 
	mVETH_INFO_UNSPEC
,

6 
	mVETH_INFO_PEER
,

8 
	m__VETH_INFO_MAX


9 
	#VETH_INFO_MAX
 (
__VETH_INFO_MAX
 - 1)

	)

	@include/linux/xfrm.h

1 #i‚de‡
_LINUX_XFRM_H


2 
	#_LINUX_XFRM_H


	)

4 
	~<löux/ö6.h
>

5 
	~<löux/ty≥s.h
>

15 
__be32
 
	ma4
;

16 
__be32
 
	ma6
[4];

17 
ö6_addr
 
	mö6
;

18 } 
	tx‰m_addªss_t
;

24 
	sx‰m_id
 {

25 
x‰m_addªss_t
 
	mdaddr
;

26 
__be32
 
	m•i
;

27 
__u8
 
	m¥Ÿo
;

30 
	sx‰m_£c_˘x
 {

31 
__u8
 
	m˘x_doi
;

32 
__u8
 
	m˘x_Æg
;

33 
__u16
 
	m˘x_Àn
;

34 
__u32
 
	m˘x_sid
;

35 
	m˘x_°r
[0];

39 
	#XFRM_SC_DOI_RESERVED
 0

	)

40 
	#XFRM_SC_DOI_LSM
 1

	)

43 
	#XFRM_SC_ALG_RESERVED
 0

	)

44 
	#XFRM_SC_ALG_SELINUX
 1

	)

48 
	sx‰m_£À˘‹
 {

49 
x‰m_addªss_t
 
	mdaddr
;

50 
x‰m_addªss_t
 
	mßddr
;

51 
__be16
 
	mdp‹t
;

52 
__be16
 
	mdp‹t_mask
;

53 
__be16
 
	m•‹t
;

54 
__be16
 
	m•‹t_mask
;

55 
__u16
 
	mÁmûy
;

56 
__u8
 
	m¥efixÀn_d
;

57 
__u8
 
	m¥efixÀn_s
;

58 
__u8
 
	m¥Ÿo
;

59 
	mifödex
;

60 
__kî√l_uid32_t
 
	mu£r
;

63 
	#XFRM_INF
 (~(
__u64
)0)

	)

65 
	sx‰m_li„time_cfg
 {

66 
__u64
 
	mso·_byã_limô
;

67 
__u64
 
	mh¨d_byã_limô
;

68 
__u64
 
	mso·_∑ckë_limô
;

69 
__u64
 
	mh¨d_∑ckë_limô
;

70 
__u64
 
	mso·_add_expúes_£c⁄ds
;

71 
__u64
 
	mh¨d_add_expúes_£c⁄ds
;

72 
__u64
 
	mso·_u£_expúes_£c⁄ds
;

73 
__u64
 
	mh¨d_u£_expúes_£c⁄ds
;

76 
	sx‰m_li„time_cur
 {

77 
__u64
 
	mbyãs
;

78 
__u64
 
	m∑ckës
;

79 
__u64
 
	madd_time
;

80 
__u64
 
	mu£_time
;

83 
	sx‰m_ª∂ay_°©e
 {

84 
__u32
 
	mo£q
;

85 
__u32
 
	m£q
;

86 
__u32
 
	mbôm≠
;

89 
	#XFRMA_REPLAY_ESN_MAX
 4096

	)

91 
	sx‰m_ª∂ay_°©e_e¢
 {

92 
	mbmp_Àn
;

93 
__u32
 
	mo£q
;

94 
__u32
 
	m£q
;

95 
__u32
 
	mo£q_hi
;

96 
__u32
 
	m£q_hi
;

97 
__u32
 
	mª∂ay_wödow
;

98 
__u32
 
	mbmp
[0];

101 
	sx‰m_Ægo
 {

102 
	mÆg_«me
[64];

103 
	mÆg_key_Àn
;

104 
	mÆg_key
[0];

107 
	sx‰m_Ægo_auth
 {

108 
	mÆg_«me
[64];

109 
	mÆg_key_Àn
;

110 
	mÆg_åunc_Àn
;

111 
	mÆg_key
[0];

114 
	sx‰m_Ægo_´ad
 {

115 
	mÆg_«me
[64];

116 
	mÆg_key_Àn
;

117 
	mÆg_icv_Àn
;

118 
	mÆg_key
[0];

121 
	sx‰m_°©s
 {

122 
__u32
 
	mª∂ay_wödow
;

123 
__u32
 
	mª∂ay
;

124 
__u32
 
	möãgrôy_Áûed
;

128 
	mXFRM_POLICY_TYPE_MAIN
 = 0,

129 
	mXFRM_POLICY_TYPE_SUB
 = 1,

130 
	mXFRM_POLICY_TYPE_MAX
 = 2,

131 
	mXFRM_POLICY_TYPE_ANY
 = 255

135 
	mXFRM_POLICY_IN
 = 0,

136 
	mXFRM_POLICY_OUT
 = 1,

137 
	mXFRM_POLICY_FWD
 = 2,

138 
	mXFRM_POLICY_MASK
 = 3,

139 
	mXFRM_POLICY_MAX
 = 3

143 
	mXFRM_SHARE_ANY
,

144 
	mXFRM_SHARE_SESSION
,

145 
	mXFRM_SHARE_USER
,

146 
	mXFRM_SHARE_UNIQUE


149 
	#XFRM_MODE_TRANSPORT
 0

	)

150 
	#XFRM_MODE_TUNNEL
 1

	)

151 
	#XFRM_MODE_ROUTEOPTIMIZATION
 2

	)

152 
	#XFRM_MODE_IN_TRIGGER
 3

	)

153 
	#XFRM_MODE_BEET
 4

	)

154 
	#XFRM_MODE_MAX
 5

	)

158 
	mXFRM_MSG_BASE
 = 0x10,

160 
	mXFRM_MSG_NEWSA
 = 0x10,

161 
	#XFRM_MSG_NEWSA
 
XFRM_MSG_NEWSA


	)

162 
	mXFRM_MSG_DELSA
,

163 
	#XFRM_MSG_DELSA
 
XFRM_MSG_DELSA


	)

164 
	mXFRM_MSG_GETSA
,

165 
	#XFRM_MSG_GETSA
 
XFRM_MSG_GETSA


	)

167 
	mXFRM_MSG_NEWPOLICY
,

168 
	#XFRM_MSG_NEWPOLICY
 
XFRM_MSG_NEWPOLICY


	)

169 
	mXFRM_MSG_DELPOLICY
,

170 
	#XFRM_MSG_DELPOLICY
 
XFRM_MSG_DELPOLICY


	)

171 
	mXFRM_MSG_GETPOLICY
,

172 
	#XFRM_MSG_GETPOLICY
 
XFRM_MSG_GETPOLICY


	)

174 
	mXFRM_MSG_ALLOCSPI
,

175 
	#XFRM_MSG_ALLOCSPI
 
XFRM_MSG_ALLOCSPI


	)

176 
	mXFRM_MSG_ACQUIRE
,

177 
	#XFRM_MSG_ACQUIRE
 
XFRM_MSG_ACQUIRE


	)

178 
	mXFRM_MSG_EXPIRE
,

179 
	#XFRM_MSG_EXPIRE
 
XFRM_MSG_EXPIRE


	)

181 
	mXFRM_MSG_UPDPOLICY
,

182 
	#XFRM_MSG_UPDPOLICY
 
XFRM_MSG_UPDPOLICY


	)

183 
	mXFRM_MSG_UPDSA
,

184 
	#XFRM_MSG_UPDSA
 
XFRM_MSG_UPDSA


	)

186 
	mXFRM_MSG_POLEXPIRE
,

187 
	#XFRM_MSG_POLEXPIRE
 
XFRM_MSG_POLEXPIRE


	)

189 
	mXFRM_MSG_FLUSHSA
,

190 
	#XFRM_MSG_FLUSHSA
 
XFRM_MSG_FLUSHSA


	)

191 
	mXFRM_MSG_FLUSHPOLICY
,

192 
	#XFRM_MSG_FLUSHPOLICY
 
XFRM_MSG_FLUSHPOLICY


	)

194 
	mXFRM_MSG_NEWAE
,

195 
	#XFRM_MSG_NEWAE
 
XFRM_MSG_NEWAE


	)

196 
	mXFRM_MSG_GETAE
,

197 
	#XFRM_MSG_GETAE
 
XFRM_MSG_GETAE


	)

199 
	mXFRM_MSG_REPORT
,

200 
	#XFRM_MSG_REPORT
 
XFRM_MSG_REPORT


	)

202 
	mXFRM_MSG_MIGRATE
,

203 
	#XFRM_MSG_MIGRATE
 
XFRM_MSG_MIGRATE


	)

205 
	mXFRM_MSG_NEWSADINFO
,

206 
	#XFRM_MSG_NEWSADINFO
 
XFRM_MSG_NEWSADINFO


	)

207 
	mXFRM_MSG_GETSADINFO
,

208 
	#XFRM_MSG_GETSADINFO
 
XFRM_MSG_GETSADINFO


	)

210 
	mXFRM_MSG_NEWSPDINFO
,

211 
	#XFRM_MSG_NEWSPDINFO
 
XFRM_MSG_NEWSPDINFO


	)

212 
	mXFRM_MSG_GETSPDINFO
,

213 
	#XFRM_MSG_GETSPDINFO
 
XFRM_MSG_GETSPDINFO


	)

215 
	mXFRM_MSG_MAPPING
,

216 
	#XFRM_MSG_MAPPING
 
XFRM_MSG_MAPPING


	)

217 
	m__XFRM_MSG_MAX


219 
	#XFRM_MSG_MAX
 (
__XFRM_MSG_MAX
 - 1)

	)

221 
	#XFRM_NR_MSGTYPES
 (
XFRM_MSG_MAX
 + 1 - 
XFRM_MSG_BASE
)

	)

227 
	sx‰m_u£r_£c_˘x
 {

228 
__u16
 
	mÀn
;

229 
__u16
 
	mexây≥
;

230 
__u8
 
	m˘x_Æg
;

231 
__u8
 
	m˘x_doi
;

232 
__u16
 
	m˘x_Àn
;

235 
	sx‰m_u£r_tm∂
 {

236 
x‰m_id
 
	mid
;

237 
__u16
 
	mÁmûy
;

238 
x‰m_addªss_t
 
	mßddr
;

239 
__u32
 
	mªqid
;

240 
__u8
 
	mmode
;

241 
__u8
 
	msh¨e
;

242 
__u8
 
	m›ti⁄Æ
;

243 
__u32
 
	mØlgos
;

244 
__u32
 
	mólgos
;

245 
__u32
 
	mˇlgos
;

248 
	sx‰m_íˇp_tm∂
 {

249 
__u16
 
	míˇp_ty≥
;

250 
__be16
 
	míˇp_•‹t
;

251 
__be16
 
	míˇp_dp‹t
;

252 
x‰m_addªss_t
 
	míˇp_ﬂ
;

256 
	ex‰m_´_·y≥_t
 {

257 
	mXFRM_AE_UNSPEC
,

258 
	mXFRM_AE_RTHR
=1,

259 
	mXFRM_AE_RVAL
=2,

260 
	mXFRM_AE_LVAL
=4,

261 
	mXFRM_AE_ETHR
=8,

262 
	mXFRM_AE_CR
=16,

263 
	mXFRM_AE_CE
=32,

264 
	mXFRM_AE_CU
=64,

265 
	m__XFRM_AE_MAX


267 
	#XFRM_AE_MAX
 (
__XFRM_AE_MAX
 - 1)

	)

270 
	sx‰m_u£Ωﬁicy_ty≥
 {

271 
__u8
 
	mty≥
;

272 
__u16
 
	mª£rved1
;

273 
__u8
 
	mª£rved2
;

277 
	ex‰m_©å_ty≥_t
 {

278 
	mXFRMA_UNSPEC
,

279 
	mXFRMA_ALG_AUTH
,

280 
	mXFRMA_ALG_CRYPT
,

281 
	mXFRMA_ALG_COMP
,

282 
	mXFRMA_ENCAP
,

283 
	mXFRMA_TMPL
,

284 
	mXFRMA_SA
,

285 
	mXFRMA_POLICY
,

286 
	mXFRMA_SEC_CTX
,

287 
	mXFRMA_LTIME_VAL
,

288 
	mXFRMA_REPLAY_VAL
,

289 
	mXFRMA_REPLAY_THRESH
,

290 
	mXFRMA_ETIMER_THRESH
,

291 
	mXFRMA_SRCADDR
,

292 
	mXFRMA_COADDR
,

293 
	mXFRMA_LASTUSED
,

294 
	mXFRMA_POLICY_TYPE
,

295 
	mXFRMA_MIGRATE
,

296 
	mXFRMA_ALG_AEAD
,

297 
	mXFRMA_KMADDRESS
,

298 
	mXFRMA_ALG_AUTH_TRUNC
,

299 
	mXFRMA_MARK
,

300 
	mXFRMA_TFCPAD
,

301 
	mXFRMA_REPLAY_ESN_VAL
,

302 
	mXFRMA_SA_EXTRA_FLAGS
,

303 
	mXFRMA_PROTO
,

304 
	mXFRMA_ADDRESS_FILTER
,

305 
	m__XFRMA_MAX


307 
	#XFRMA_MAX
 (
__XFRMA_MAX
 - 1)

	)

310 
	sx‰m_m¨k
 {

311 
__u32
 
	mv
;

312 
__u32
 
	mm
;

315 
	ex‰m_ßd©å_ty≥_t
 {

316 
	mXFRMA_SAD_UNSPEC
,

317 
	mXFRMA_SAD_CNT
,

318 
	mXFRMA_SAD_HINFO
,

319 
	m__XFRMA_SAD_MAX


321 
	#XFRMA_SAD_MAX
 (
__XFRMA_SAD_MAX
 - 1)

	)

324 
	sx‰mu_ßdhöfo
 {

325 
__u32
 
	mßdh˙t
;

326 
__u32
 
	mßdhm˙t
;

329 
	ex‰m_•d©å_ty≥_t
 {

330 
	mXFRMA_SPD_UNSPEC
,

331 
	mXFRMA_SPD_INFO
,

332 
	mXFRMA_SPD_HINFO
,

333 
	mXFRMA_SPD_IPV4_HTHRESH
,

334 
	mXFRMA_SPD_IPV6_HTHRESH
,

335 
	m__XFRMA_SPD_MAX


337 
	#XFRMA_SPD_MAX
 (
__XFRMA_SPD_MAX
 - 1)

	)

340 
	sx‰mu_•döfo
 {

341 
__u32
 
	mö˙t
;

342 
__u32
 
	mout˙t
;

343 
__u32
 
	mfwd˙t
;

344 
__u32
 
	mös˙t
;

345 
__u32
 
	mouts˙t
;

346 
__u32
 
	mfwds˙t
;

349 
	sx‰mu_•dhöfo
 {

350 
__u32
 
	m•dh˙t
;

351 
__u32
 
	m•dhm˙t
;

354 
	sx‰mu_•dhthªsh
 {

355 
__u8
 
	mlbôs
;

356 
__u8
 
	mrbôs
;

359 
	sx‰m_u£rß_öfo
 {

360 
x‰m_£À˘‹
 
	m£l
;

361 
x‰m_id
 
	mid
;

362 
x‰m_addªss_t
 
	mßddr
;

363 
x‰m_li„time_cfg
 
	ml·
;

364 
x‰m_li„time_cur
 
	mcuæ·
;

365 
x‰m_°©s
 
	m°©s
;

366 
__u32
 
	m£q
;

367 
__u32
 
	mªqid
;

368 
__u16
 
	mÁmûy
;

369 
__u8
 
	mmode
;

370 
__u8
 
	mª∂ay_wödow
;

371 
__u8
 
	mÊags
;

372 
	#XFRM_STATE_NOECN
 1

	)

373 
	#XFRM_STATE_DECAP_DSCP
 2

	)

374 
	#XFRM_STATE_NOPMTUDISC
 4

	)

375 
	#XFRM_STATE_WILDRECV
 8

	)

376 
	#XFRM_STATE_ICMP
 16

	)

377 
	#XFRM_STATE_AF_UNSPEC
 32

	)

378 
	#XFRM_STATE_ALIGN4
 64

	)

379 
	#XFRM_STATE_ESN
 128

	)

382 
	#XFRM_SA_XFLAG_DONT_ENCAP_DSCP
 1

	)

384 
	sx‰m_u£rß_id
 {

385 
x‰m_addªss_t
 
	mdaddr
;

386 
__be32
 
	m•i
;

387 
__u16
 
	mÁmûy
;

388 
__u8
 
	m¥Ÿo
;

391 
	sx‰m_´vít_id
 {

392 
x‰m_u£rß_id
 
	mß_id
;

393 
x‰m_addªss_t
 
	mßddr
;

394 
__u32
 
	mÊags
;

395 
__u32
 
	mªqid
;

398 
	sx‰m_u£r•i_öfo
 {

399 
x‰m_u£rß_öfo
 
	möfo
;

400 
__u32
 
	mmö
;

401 
__u32
 
	mmax
;

404 
	sx‰m_u£Ωﬁicy_öfo
 {

405 
x‰m_£À˘‹
 
	m£l
;

406 
x‰m_li„time_cfg
 
	ml·
;

407 
x‰m_li„time_cur
 
	mcuæ·
;

408 
__u32
 
	m¥i‹ôy
;

409 
__u32
 
	mödex
;

410 
__u8
 
	mdú
;

411 
__u8
 
	ma˘i⁄
;

412 
	#XFRM_POLICY_ALLOW
 0

	)

413 
	#XFRM_POLICY_BLOCK
 1

	)

414 
__u8
 
	mÊags
;

415 
	#XFRM_POLICY_LOCALOK
 1

	)

417 
	#XFRM_POLICY_ICMP
 2

	)

418 
__u8
 
	msh¨e
;

421 
	sx‰m_u£Ωﬁicy_id
 {

422 
x‰m_£À˘‹
 
	m£l
;

423 
__u32
 
	mödex
;

424 
__u8
 
	mdú
;

427 
	sx‰m_u£r_acquúe
 {

428 
x‰m_id
 
	mid
;

429 
x‰m_addªss_t
 
	mßddr
;

430 
x‰m_£À˘‹
 
	m£l
;

431 
x‰m_u£Ωﬁicy_öfo
 
	mpﬁicy
;

432 
__u32
 
	mØlgos
;

433 
__u32
 
	mólgos
;

434 
__u32
 
	mˇlgos
;

435 
__u32
 
	m£q
;

438 
	sx‰m_u£r_expúe
 {

439 
x‰m_u£rß_öfo
 
	m°©e
;

440 
__u8
 
	mh¨d
;

443 
	sx‰m_u£r_pﬁexpúe
 {

444 
x‰m_u£Ωﬁicy_öfo
 
	mpﬁ
;

445 
__u8
 
	mh¨d
;

448 
	sx‰m_u£rß_Êush
 {

449 
__u8
 
	m¥Ÿo
;

452 
	sx‰m_u£r_ªp‹t
 {

453 
__u8
 
	m¥Ÿo
;

454 
x‰m_£À˘‹
 
	m£l
;

459 
	sx‰m_u£r_kmaddªss
 {

460 
x‰m_addªss_t
 
	mloˇl
;

461 
x‰m_addªss_t
 
	mªmŸe
;

462 
__u32
 
	mª£rved
;

463 
__u16
 
	mÁmûy
;

466 
	sx‰m_u£r_migøã
 {

467 
x‰m_addªss_t
 
	mﬁd_daddr
;

468 
x‰m_addªss_t
 
	mﬁd_ßddr
;

469 
x‰m_addªss_t
 
	m√w_daddr
;

470 
x‰m_addªss_t
 
	m√w_ßddr
;

471 
__u8
 
	m¥Ÿo
;

472 
__u8
 
	mmode
;

473 
__u16
 
	mª£rved
;

474 
__u32
 
	mªqid
;

475 
__u16
 
	mﬁd_Ámûy
;

476 
__u16
 
	m√w_Ámûy
;

479 
	sx‰m_u£r_m≠pög
 {

480 
x‰m_u£rß_id
 
	mid
;

481 
__u32
 
	mªqid
;

482 
x‰m_addªss_t
 
	mﬁd_ßddr
;

483 
x‰m_addªss_t
 
	m√w_ßddr
;

484 
__be16
 
	mﬁd_•‹t
;

485 
__be16
 
	m√w_•‹t
;

488 
	sx‰m_addªss_fûãr
 {

489 
x‰m_addªss_t
 
	mßddr
;

490 
x‰m_addªss_t
 
	mdaddr
;

491 
__u16
 
	mÁmûy
;

492 
__u8
 
	m•Àn
;

493 
__u8
 
	md∂í
;

497 
	#XFRMGRP_ACQUIRE
 1

	)

498 
	#XFRMGRP_EXPIRE
 2

	)

499 
	#XFRMGRP_SA
 4

	)

500 
	#XFRMGRP_POLICY
 8

	)

501 
	#XFRMGRP_REPORT
 0x20

	)

503 
	ex‰m_∆groups
 {

504 
	mXFRMNLGRP_NONE
,

505 
	#XFRMNLGRP_NONE
 
XFRMNLGRP_NONE


	)

506 
	mXFRMNLGRP_ACQUIRE
,

507 
	#XFRMNLGRP_ACQUIRE
 
XFRMNLGRP_ACQUIRE


	)

508 
	mXFRMNLGRP_EXPIRE
,

509 
	#XFRMNLGRP_EXPIRE
 
XFRMNLGRP_EXPIRE


	)

510 
	mXFRMNLGRP_SA
,

511 
	#XFRMNLGRP_SA
 
XFRMNLGRP_SA


	)

512 
	mXFRMNLGRP_POLICY
,

513 
	#XFRMNLGRP_POLICY
 
XFRMNLGRP_POLICY


	)

514 
	mXFRMNLGRP_AEVENTS
,

515 
	#XFRMNLGRP_AEVENTS
 
XFRMNLGRP_AEVENTS


	)

516 
	mXFRMNLGRP_REPORT
,

517 
	#XFRMNLGRP_REPORT
 
XFRMNLGRP_REPORT


	)

518 
	mXFRMNLGRP_MIGRATE
,

519 
	#XFRMNLGRP_MIGRATE
 
XFRMNLGRP_MIGRATE


	)

520 
	mXFRMNLGRP_MAPPING
,

521 
	#XFRMNLGRP_MAPPING
 
XFRMNLGRP_MAPPING


	)

522 
	m__XFRMNLGRP_MAX


524 
	#XFRMNLGRP_MAX
 (
__XFRMNLGRP_MAX
 - 1)

	)

	@include/ll_map.h

1 #i‚de‡
__LL_MAP_H__


2 
	#__LL_MAP_H__
 1

	)

4 
Œ_ªmembî_ödex
(c⁄° 
sockaddr_∆
 *
who
,

5 
∆msghdr
 *
n
, *
¨g
);

7 
Œ_öô_m≠
(
π∆_h™dÀ
 *
πh
);

8 
Œ_«me_to_ödex
(c⁄° *
«me
);

9 c⁄° *
Œ_ödex_to_«me
(
idx
);

10 c⁄° *
Œ_idx_n2a
(
idx
, *
buf
);

11 
Œ_ödex_to_ty≥
(
idx
);

12 
Œ_ödex_to_Êags
(
idx
);

13 
«mehash
(c⁄° *
°r
);

	@include/names.h

1 #i‚de‡
DB_NAMES_H_


2 
	#DB_NAMES_H_
 1

	)

4 
	#IDNAME_MAX
 256

	)

6 
	sdb_íåy
 {

7 
db_íåy
 *
	m√xt
;

8 
	mid
;

9 *
	m«me
;

12 
	sdb_«mes
 {

13 
	msize
;

14 
db_íåy
 *
	mˇched
;

15 
db_íåy
 **
	mhash
;

16 
	mmax
;

19 
db_«mes
 *
db_«mes_Æloc
();

20 
db_«mes_lﬂd
(
db_«mes
 *
db
, c⁄° *
∑th
);

21 
db_«mes_‰ì
(
db_«mes
 *
db
);

23 *
id_to_«me
(
db_«mes
 *
db
, 
id
, *
«me
);

24 
«me_to_id
(
db_«mes
 *
db
, *
id
, c⁄° *
«me
);

	@include/namespace.h

1 #i‚de‡
__NAMESPACE_H__


2 
	#__NAMESPACE_H__
 1

	)

4 
	~<sched.h
>

5 
	~<sys/mou¡.h
>

6 
	~<uni°d.h
>

7 
	~<sys/sysˇŒ.h
>

8 
	~<î∫o.h
>

10 
	#NETNS_RUN_DIR
 "/v¨/run/√äs"

	)

11 
	#NETNS_ETC_DIR
 "/ëc/√äs"

	)

13 #i‚de‡
CLONE_NEWNET


14 
	#CLONE_NEWNET
 0x40000000

	)

17 #i‚de‡
MNT_DETACH


18 
	#MNT_DETACH
 0x00000002

	)

22 #i‚de‡
MS_REC


23 
	#MS_REC
 16384

	)

26 #i‚de‡
MS_SLAVE


27 
	#MS_SLAVE
 (1 << 19)

	)

30 #i‚de‡
MS_SHARED


31 
	#MS_SHARED
 (1 << 20)

	)

34 #i‚de‡
HAVE_SETNS


35 
ölöe
 
	$£äs
(
fd
, 
n°y≥
)

37 #ifde‡
__NR_£äs


38  
	`sysˇŒ
(
__NR_£äs
, 
fd
, 
n°y≥
);

40 
î∫o
 = 
ENOSYS
;

43 
	}
}

46 
√äs_swôch
(*
√äs
);

47 
√äs_gë_fd
(c⁄° *
√äs
);

48 
√äs_f‹óch
((*
func
)(*
n¢ame
, *
¨g
), *arg);

50 
	s√äs_func
 {

51 (*
func
)(*
n¢ame
, *
¨g
);

52 *
¨g
;

	@include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

54 #ifde‡
__USE_MISC


55 
	~<sys/ty≥s.h
>

57 #ifde‡
__FAVOR_BSD


58 
u_öt32_t
 
	tt˝_£q
;

63 
	st˝hdr


65 
u_öt16_t
 
	mth_•‹t
;

66 
u_öt16_t
 
	mth_dp‹t
;

67 
t˝_£q
 
	mth_£q
;

68 
t˝_£q
 
	mth_ack
;

69 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


70 
u_öt8_t
 
	mth_x2
:4;

71 
u_öt8_t
 
	mth_off
:4;

73 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


74 
u_öt8_t
 
	mth_off
:4;

75 
u_öt8_t
 
	mth_x2
:4;

77 
u_öt8_t
 
	mth_Êags
;

78 
	#TH_FIN
 0x01

	)

79 
	#TH_SYN
 0x02

	)

80 
	#TH_RST
 0x04

	)

81 
	#TH_PUSH
 0x08

	)

82 
	#TH_ACK
 0x10

	)

83 
	#TH_URG
 0x20

	)

84 
u_öt16_t
 
	mth_wö
;

85 
u_öt16_t
 
	mth_sum
;

86 
u_öt16_t
 
	mth_uΩ
;

90 
	st˝hdr


92 
u_öt16_t
 
	msour˚
;

93 
u_öt16_t
 
	mde°
;

94 
u_öt32_t
 
	m£q
;

95 
u_öt32_t
 
	mack_£q
;

96 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


97 
u_öt16_t
 
	mªs1
:4;

98 
u_öt16_t
 
	mdoff
:4;

99 
u_öt16_t
 
	mfö
:1;

100 
u_öt16_t
 
	msyn
:1;

101 
u_öt16_t
 
	mr°
:1;

102 
u_öt16_t
 
	mpsh
:1;

103 
u_öt16_t
 
	mack
:1;

104 
u_öt16_t
 
	murg
:1;

105 
u_öt16_t
 
	mªs2
:2;

106 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


107 
u_öt16_t
 
	mdoff
:4;

108 
u_öt16_t
 
	mªs1
:4;

109 
u_öt16_t
 
	mªs2
:2;

110 
u_öt16_t
 
	murg
:1;

111 
u_öt16_t
 
	mack
:1;

112 
u_öt16_t
 
	mpsh
:1;

113 
u_öt16_t
 
	mr°
:1;

114 
u_öt16_t
 
	msyn
:1;

115 
u_öt16_t
 
	mfö
:1;

119 
u_öt16_t
 
	mwödow
;

120 
u_öt16_t
 
	mcheck
;

121 
u_öt16_t
 
	murg_±r
;

127 
	mTCP_ESTABLISHED
 = 1,

128 
	mTCP_SYN_SENT
,

129 
	mTCP_SYN_RECV
,

130 
	mTCP_FIN_WAIT1
,

131 
	mTCP_FIN_WAIT2
,

132 
	mTCP_TIME_WAIT
,

133 
	mTCP_CLOSE
,

134 
	mTCP_CLOSE_WAIT
,

135 
	mTCP_LAST_ACK
,

136 
	mTCP_LISTEN
,

137 
	mTCP_CLOSING


140 
	#TCPOPT_EOL
 0

	)

141 
	#TCPOPT_NOP
 1

	)

142 
	#TCPOPT_MAXSEG
 2

	)

143 
	#TCPOLEN_MAXSEG
 4

	)

144 
	#TCPOPT_WINDOW
 3

	)

145 
	#TCPOLEN_WINDOW
 3

	)

146 
	#TCPOPT_SACK_PERMITTED
 4

	)

147 
	#TCPOLEN_SACK_PERMITTED
 2

	)

148 
	#TCPOPT_SACK
 5

	)

149 
	#TCPOPT_TIMESTAMP
 8

	)

150 
	#TCPOLEN_TIMESTAMP
 10

	)

151 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

153 
	#TCPOPT_TSTAMP_HDR
 \

154 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

162 
	#TCP_MSS
 512

	)

164 
	#TCP_MAXWIN
 65535

	)

166 
	#TCP_MAX_WINSHIFT
 14

	)

168 
	#SOL_TCP
 6

	)

171 
	#TCPI_OPT_TIMESTAMPS
 1

	)

172 
	#TCPI_OPT_SACK
 2

	)

173 
	#TCPI_OPT_WSCALE
 4

	)

174 
	#TCPI_OPT_ECN
 8

	)

175 
	#TCPI_OPT_ECN_SEEN
 16

	)

178 
	et˝_ˇ_°©e


180 
	mTCP_CA_O≥n
 = 0,

181 
	mTCP_CA_Dis‹dî
 = 1,

182 
	mTCP_CA_CWR
 = 2,

183 
	mTCP_CA_Recovîy
 = 3,

184 
	mTCP_CA_Loss
 = 4

187 
	st˝_öfo


189 
u_öt8_t
 
	mt˝i_°©e
;

190 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

191 
u_öt8_t
 
	mt˝i_ªå™smôs
;

192 
u_öt8_t
 
	mt˝i_¥obes
;

193 
u_öt8_t
 
	mt˝i_backoff
;

194 
u_öt8_t
 
	mt˝i_›ti⁄s
;

195 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

197 
u_öt32_t
 
	mt˝i_πo
;

198 
u_öt32_t
 
	mt˝i_©o
;

199 
u_öt32_t
 
	mt˝i_¢d_mss
;

200 
u_öt32_t
 
	mt˝i_rcv_mss
;

202 
u_öt32_t
 
	mt˝i_u«cked
;

203 
u_öt32_t
 
	mt˝i_ßcked
;

204 
u_öt32_t
 
	mt˝i_lo°
;

205 
u_öt32_t
 
	mt˝i_ªå™s
;

206 
u_öt32_t
 
	mt˝i_Áckës
;

209 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

210 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

211 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

212 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

215 
u_öt32_t
 
	mt˝i_pmtu
;

216 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

217 
u_öt32_t
 
	mt˝i_πt
;

218 
u_öt32_t
 
	mt˝i_πtv¨
;

219 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

220 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

221 
u_öt32_t
 
	mt˝i_advmss
;

222 
u_öt32_t
 
	mt˝i_ª‹dîög
;

223 
u_öt32_t
 
	mt˝i_rcv_πt
;

224 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

225 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

	@include/rt_names.h

1 #i‚de‡
RT_NAMES_H_


2 
	#RT_NAMES_H_
 1

	)

4 
	~<asm/ty≥s.h
>

6 c⁄° *
π∆_π¥Ÿ_n2a
(
id
, *
buf
, 
Àn
);

7 c⁄° *
π∆_πsc›e_n2a
(
id
, *
buf
, 
Àn
);

8 c⁄° *
π∆_πèbÀ_n2a
(
__u32
 
id
, *
buf
, 
Àn
);

9 c⁄° *
π∆_πªÆm_n2a
(
id
, *
buf
, 
Àn
);

10 c⁄° *
π∆_dsfõld_n2a
(
id
, *
buf
, 
Àn
);

11 c⁄° *
π∆_group_n2a
(
id
, *
buf
, 
Àn
);

13 
π∆_π¥Ÿ_a2n
(
__u32
 *
id
, c⁄° *
¨g
);

14 
π∆_πsc›e_a2n
(
__u32
 *
id
, c⁄° *
¨g
);

15 
π∆_πèbÀ_a2n
(
__u32
 *
id
, c⁄° *
¨g
);

16 
π∆_πªÆm_a2n
(
__u32
 *
id
, c⁄° *
¨g
);

17 
π∆_dsfõld_a2n
(
__u32
 *
id
, c⁄° *
¨g
);

18 
π∆_group_a2n
(*
id
, c⁄° *
¨g
);

20 c⁄° *
öë_¥Ÿo_n2a
(
¥Ÿo
, *
buf
, 
Àn
);

21 
öë_¥Ÿo_a2n
(c⁄° *
buf
);

24 c⁄° * 
Œ_ty≥_n2a
(
ty≥
, *
buf
, 
Àn
);

25 c⁄° *
Œ_addr_n2a
(c⁄° *
addr
, 
Æí
,

26 
ty≥
, *
buf
, 
bÀn
);

27 
Œ_addr_a2n
(*
Œaddr
, 
Àn
, c⁄° *
¨g
);

29 c⁄° * 
Œ_¥Ÿo_n2a
(
id
, *
buf
, 
Àn
);

30 
Œ_¥Ÿo_a2n
(*
id
, c⁄° *
buf
);

32 c⁄° *
∆_¥Ÿo_n2a
(
id
, *
buf
, 
Àn
);

33 
∆_¥Ÿo_a2n
(
__u32
 *
id
, c⁄° *
¨g
);

	@include/rtm_map.h

1 #i‚de‡
__RTM_MAP_H__


2 
	#__RTM_MAP_H__
 1

	)

4 *
π∆_π¡y≥_n2a
(
id
, *
buf
, 
Àn
);

5 
π∆_π¡y≥_a2n
(*
id
, *
¨g
);

7 
gë_π_ªÆms_‹_øw
(
__u32
 *
ªÆms
, *
¨g
);

	@include/utils.h

1 #i‚de‡
__UTILS_H__


2 
	#__UTILS_H__
 1

	)

4 
	~<sys/ty≥s.h
>

5 
	~<asm/ty≥s.h
>

6 
	~<ªsﬁv.h
>

7 
	~<°dlib.h
>

8 
	~<°dboﬁ.h
>

10 
	~"lib√éök.h
"

11 
	~"Œ_m≠.h
"

12 
	~"πm_m≠.h
"

14 
¥e„ºed_Ámûy
;

15 
hum™_ªadabÀ
;

16 
u£_õc
;

17 
show_°©s
;

18 
show_dëaûs
;

19 
show_øw
;

20 
ªsﬁve_ho°s
;

21 
⁄ñöe
;

22 
brõf
;

23 
time°amp
;

24 
time°amp_sh‹t
;

25 c⁄° * 
_SL_
;

26 
max_Êush_lo›s
;

27 
b©ch_mode
;

28 
boﬁ
 
do_Æl
;

30 #i‚de‡
IPPROTO_ESP


31 
	#IPPROTO_ESP
 50

	)

33 #i‚de‡
IPPROTO_AH


34 
	#IPPROTO_AH
 51

	)

36 #i‚de‡
IPPROTO_COMP


37 
	#IPPROTO_COMP
 108

	)

39 #i‚de‡
IPSEC_PROTO_ANY


40 
	#IPSEC_PROTO_ANY
 255

	)

43 
	#SPRINT_BSIZE
 64

	)

44 
	#SPRINT_BUF
(
x
Ëx[
SPRINT_BSIZE
]

	)

46 
	$öcom∂ëe_comm™d
(Ë
	`__©åibuã__
((
n‹ëu∫
));

48 
	#NEXT_ARG
(Ëdÿ{ 
¨gv
++; i‡(--
¨gc
 <0Ë
	`öcom∂ëe_comm™d
(); 
	}
} 0)

	)

49 
	#NEXT_ARG_OK
(Ë(
¨gc
 - 1 > 0)

	)

50 
	#PREV_ARG
(Ëdÿ{ 
¨gv
--; 
¨gc
++; } 0)

	)

54 
__u16
 
	mÊags
;

55 
__u16
 
	mbyãÀn
;

56 
__s16
 
	mbôÀn
;

58 
__u16
 
	mÁmûy
;

59 
__u32
 
	md©a
[8];

60 } 
	töë_¥efix
;

62 
	#PREFIXLEN_SPECIFIED
 1

	)

64 
	#DN_MAXADDL
 20

	)

65 #i‚de‡
AF_DEC√t


66 
	#AF_DEC√t
 12

	)

69 
	sdn_«ddr


71 
	ma_Àn
;

72 
	ma_addr
[
DN_MAXADDL
];

75 
	#IPX_NODE_LEN
 6

	)

77 
	sùx_addr
 {

78 
u_öt32_t
 
	mùx_√t
;

79 
u_öt8_t
 
	mùx_node
[
IPX_NODE_LEN
];

82 #i‚de‡
AF_MPLS


83 
	#AF_MPLS
 28

	)

87 
	#MPLS_MAX_LABELS
 8

	)

89 
__u32
 
gë_addr32
(c⁄° *
«me
);

90 
gë_addr_1
(
öë_¥efix
 *
d°
, c⁄° *
¨g
, 
Ámûy
);

91 
gë_¥efix_1
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
);

92 
gë_addr
(
öë_¥efix
 *
d°
, c⁄° *
¨g
, 
Ámûy
);

93 
gë_¥efix
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
);

94 
mask2bôs
(
__u32
 
√tmask
);

96 
gë_öãgî
(*
vÆ
, c⁄° *
¨g
, 
ba£
);

97 
gë_unsig√d
(*
vÆ
, c⁄° *
¨g
, 
ba£
);

98 
gë_time_πt
(*
vÆ
, c⁄° *
¨g
, *
øw
);

99 
	#gë_byã
 
gë_u8


	)

100 
	#gë_ush‹t
 
gë_u16


	)

101 
	#gë_sh‹t
 
gë_s16


	)

102 
gë_u64
(
__u64
 *
vÆ
, c⁄° *
¨g
, 
ba£
);

103 
gë_u32
(
__u32
 *
vÆ
, c⁄° *
¨g
, 
ba£
);

104 
gë_s32
(
__s32
 *
vÆ
, c⁄° *
¨g
, 
ba£
);

105 
gë_u16
(
__u16
 *
vÆ
, c⁄° *
¨g
, 
ba£
);

106 
gë_s16
(
__s16
 *
vÆ
, c⁄° *
¨g
, 
ba£
);

107 
gë_u8
(
__u8
 *
vÆ
, c⁄° *
¨g
, 
ba£
);

108 
gë_s8
(
__s8
 *
vÆ
, c⁄° *
¨g
, 
ba£
);

110 * 
hex°rög_n2a
(c⁄° 
__u8
 *
°r
, 
Àn
, *
buf
, 
bÀn
);

111 
__u8
* 
hex°rög_a2n
(c⁄° *
°r
, __u8 *
buf
, 
bÀn
);

113 
af_bô_Àn
(
af
);

114 
af_byã_Àn
(
af
);

116 c⁄° *
f‹m©_ho°
(
af
, 
Àn
, c⁄° *
addr
,

117 *
buf
, 
buÊí
);

118 c⁄° *
π_addr_n2a
(
af
, 
Àn
, c⁄° *
addr
,

119 *
buf
, 
buÊí
);

121 
ªad_Ámûy
(c⁄° *
«me
);

122 c⁄° *
Ámûy_«me
(
Ámûy
);

124 
	$misßrg
(c⁄° *Ë
	`__©åibuã__
((
n‹ëu∫
));

125 
	$öv¨g
(c⁄° *, c⁄° *Ë
	`__©åibuã__
((
n‹ëu∫
));

126 
	$du∑rg
(c⁄° *, c⁄° *Ë
	`__©åibuã__
((
n‹ëu∫
));

127 
	$du∑rg2
(c⁄° *, c⁄° *Ë
	`__©åibuã__
((
n‹ëu∫
));

128 
	`m©ches
(c⁄° *
¨g
, c⁄° *
∑âîn
);

129 
	`öë_addr_m©ch
(c⁄° 
öë_¥efix
 *
a
, c⁄° i√t_¥efix *
b
, 
bôs
);

131 c⁄° *
	`d√t_¡›
(
af
, c⁄° *
addr
, *
°r
, 
size_t
 
Àn
);

132 
	`d√t_±⁄
(
af
, c⁄° *
§c
, *
addr
);

134 c⁄° *
	`ùx_¡›
(
af
, c⁄° *
addr
, *
°r
, 
size_t
 
Àn
);

135 
	`ùx_±⁄
(
af
, c⁄° *
§c
, *
addr
);

137 c⁄° *
	`m∂s_¡›
(
af
, c⁄° *
addr
, *
°r
, 
size_t
 
Àn
);

138 
	`m∂s_±⁄
(
af
, c⁄° *
§c
, *
addr
);

140 
__ùrouã2_hz_öã∫Æ
;

141 
	`__gë_hz
();

143 
__ölöe__
 
	$gë_hz
()

145 i‡(
__ùrouã2_hz_öã∫Æ
 == 0)

146 
__ùrouã2_hz_öã∫Æ
 = 
	`__gë_hz
();

147  
__ùrouã2_hz_öã∫Æ
;

148 
	}
}

150 
__ùrouã2_u£r_hz_öã∫Æ
;

151 
__gë_u£r_hz
();

153 
__ölöe__
 
	$gë_u£r_hz
()

155 i‡(
__ùrouã2_u£r_hz_öã∫Æ
 == 0)

156 
__ùrouã2_u£r_hz_öã∫Æ
 = 
	`__gë_u£r_hz
();

157  
__ùrouã2_u£r_hz_öã∫Æ
;

158 
	}
}

160 
ölöe
 
__u32
 
	$∆_mgΩ
(
__u32
 
group
)

162 i‡(
group
 > 31 ) {

163 
	`Ârötf
(
°dîr
, "U£ sësock›àf‹Åhi†grou∞%d\n", 
group
);

164 
	`exô
(-1);

166  
group
 ? (1 << (group - 1)) : 0;

167 
	}
}

170 
¥öt_time°amp
(
FILE
 *
Â
);

171 
¥öt_∆msg_time°amp
(
FILE
 *
Â
, c⁄° 
∆msghdr
 *
n
);

173 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

175 
	#BUILD_BUG_ON
(
c⁄d
Ë(()([1 - 2 * !!(c⁄d)]))

	)

177 #i‚de‡
off£tof


178 
	#off£tof
(
ty≥
, 
membî
Ë((
size_t
Ë&(—y≥ *)0)->membî)

	)

181 #i‚de‡
mö


182 
	#mö
(
x
, 
y
) ({ \

183 
	`ty≥of
(
x
Ë
_mö1
 = (x); \

184 
	`ty≥of
(
y
Ë
_mö2
 = (y); \

185 (Ë(&
_mö1
 =&
_mö2
); \

186 
_mö1
 < 
_mö2
 ? _mö1 : _mö2; })

	)

189 #i‚de‡
__check_f‹m©_°rög


190 
	#__check_f‹m©_°rög
(
pos_°r
, 
pos_¨gs
) \

191 
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
, (
pos_°r
), (
pos_¨gs
))))

	)

194 
cmdlöío
;

195 
ssize_t
 
gëcmdlöe
(**
löe
, 
size_t
 *
Àn
, 
FILE
 *
ö
);

196 
makórgs
(*
löe
, *
¨gv
[], 
max¨gs
);

197 
öë_gë_addr
(c⁄° *
§c
, 
__u32
 *
d°
, 
ö6_addr
 *
d°6
);

199 
	gùlök_ªq
;

200 
ùlök_∑r£
(
¨gc
, **
¨gv
, 
ùlök_ªq
 *
ªq
,

201 **
«me
, **
ty≥
, **
lök
, **
dev
,

202 *
group
, *
ödex
);

204 
do_óch_√äs
((*
func
)(*
n¢ame
, *
¨g
), *arg,

205 
boﬁ
 
show_œbñ
);

207 *
	`öt_to_°r
(
vÆ
, *
buf
);

	@include/xt-internal.h

1 #i‚de‡
_XTABLES_INTERNAL_H


2 
	#_XTABLES_INTERNAL_H
 1

	)

4 #i‚de‡
XT_LIB_DIR


5 
	#XT_LIB_DIR
 "/lib/xèbÀs"

	)

9 
	saföfo
 {

11 
	mÁmûy
;

14 *
	mlib¥efix
;

17 
	mù¥Ÿo
;

20 *
	mkmod
;

23 
	mso_ªv_m©ch
;

26 
	mso_ªv_èrgë
;

29 
	ext_åylﬂd
 {

30 
	mDONT_LOAD
,

31 
	mDURING_LOAD
,

32 
	mTRY_LOAD
,

33 
	mLOAD_MUST_SUCCEED


36 
	sxèbÀs_ruÀ_m©ch
 {

37 
xèbÀs_ruÀ_m©ch
 *
	m√xt
;

38 
xèbÀs_m©ch
 *
	mm©ch
;

41 
	mcom∂ëed
;

44 *
lib_dú
;

46 *
fw_ˇŒoc
(
size_t
 
cou¡
, size_à
size
);

47 *
fw_mÆloc
(
size_t
 
size
);

49 c⁄° *
mod¥obe_¥ogøm
;

50 
xèbÀs_ösmod
(c⁄° *
mod«me
, c⁄° *
mod¥obe
, 
quõt
);

51 
lﬂd_xèbÀs_ko
(c⁄° *
mod¥obe
, 
quõt
);

54 
aföfo
áfinfo;

57 
xèbÀs_m©ch
 *
xèbÀs_m©ches
;

58 
xèbÀs_èrgë
 *
xèbÀs_èrgës
;

60 
xèbÀs_m©ch
 *
föd_m©ch
(c⁄° *
«me
, 
xt_åylﬂd
,

61 
xèbÀs_ruÀ_m©ch
 **
m©ch
);

62 
xèbÀs_èrgë
 *
föd_èrgë
(c⁄° *
«me
, 
xt_åylﬂd
);

64 
_öô
();

	@ip/ip.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<°rög.h
>

20 
	~<î∫o.h
>

22 
	~"SNAPSHOT.h
"

23 
	~"utûs.h
"

24 
	~"ù_comm⁄.h
"

25 
	~"«me•a˚.h
"

26 
	~"cﬁ‹.h
"

28 
	g¥e„ºed_Ámûy
 = 
AF_UNSPEC
;

29 
	ghum™_ªadabÀ
;

30 
	gu£_õc
;

31 
	gshow_°©s
;

32 
	gshow_dëaûs
;

33 
	gªsﬁve_ho°s
;

34 
	g⁄ñöe
;

35 
	gbrõf
;

36 
	gtime°amp
;

37 c⁄° *
	g_SL_
;

38 
	gf‹˚
;

39 
	gmax_Êush_lo›s
 = 10;

40 
	gb©ch_mode
;

41 
boﬁ
 
	gdo_Æl
;

43 
π∆_h™dÀ
 
	gπh
 = { .
fd
 = -1 };

45 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

47 
	$ußge
()

49 
	`Ârötf
(
°dîr
,

62 
	`exô
(-1);

63 
	}
}

65 
	$do_hñp
(
¨gc
, **
¨gv
)

67 
	`ußge
();

69 
	}
}

71 c⁄° 
	scmd
 {

72 c⁄° *
	mcmd
;

73 (*
	mfunc
)(
	m¨gc
, **
	m¨gv
);

74 } 
	gcmds
[] = {

75 { "addªss", 
do_ùaddr
 },

76 { "addæabñ", 
do_ùaddæabñ
 },

77 { "maddªss", 
do_mu…üddr
 },

78 { "rouã", 
do_ùrouã
 },

79 { "ruÀ", 
do_ùruÀ
 },

80 { "√ighb‹", 
do_ù√igh
 },

81 { "√ighbour", 
do_ù√igh
 },

82 { "¡abÀ", 
do_ù¡abÀ
 },

83 { "¡bl", 
do_ù¡abÀ
 },

84 { "lök", 
do_ùlök
 },

85 { "l2ç", 
do_ùl2ç
 },

86 { "fou", 
do_ùfou
 },

87 { "tu¬ñ", 
do_ùtu¬ñ
 },

88 { "tu∆", 
do_ùtu¬ñ
 },

89 { "tu¡≠", 
do_ùtu¡≠
 },

90 { "èp", 
do_ùtu¡≠
 },

91 { "tokí", 
do_ùtokí
 },

92 { "t˝mërics", 
do_t˝_mërics
 },

93 { "t˝_mërics", 
do_t˝_mërics
 },

94 { "m⁄ô‹", 
do_ùm⁄ô‹
 },

95 { "x‰m", 
do_x‰m
 },

96 { "mrouã", 
do_mu…úouã
 },

97 { "mruÀ", 
do_mu…úuÀ
 },

98 { "√äs", 
do_√äs
 },

99 { "√tc⁄f", 
do_ù√tc⁄f
 },

100 { "hñp", 
do_hñp
 },

104 
	$do_cmd
(c⁄° *
¨gv0
, 
¨gc
, **
¨gv
)

106 c⁄° 
cmd
 *
c
;

108 
c
 = 
cmds
; c->
cmd
; ++c) {

109 i‡(
	`m©ches
(
¨gv0
, 
c
->
cmd
) == 0)

110  -(
c
->
	`func
(
¨gc
-1, 
¨gv
+1));

113 
	`Ârötf
(
°dîr
, "Obje˘ \"%s\" i†unknown,Åry \"ù hñp\".\n", 
¨gv0
);

114  
EXIT_FAILURE
;

115 
	}
}

117 
	$b©ch
(c⁄° *
«me
)

119 *
löe
 = 
NULL
;

120 
size_t
 
Àn
 = 0;

121 
ªt
 = 
EXIT_SUCCESS
;

122 
‹ig_Ámûy
 = 
¥e„ºed_Ámûy
;

124 
b©ch_mode
 = 1;

126 i‡(
«me
 && 
	`°rcmp
(name, "-") != 0) {

127 i‡(
	`‰e›í
(
«me
, "r", 
°dö
Ë=
NULL
) {

128 
	`Ârötf
(
°dîr
,

130 
«me
, 
	`°ªº‹
(
î∫o
));

131  
EXIT_FAILURE
;

135 i‡(
	`π∆_›í
(&
πh
, 0) < 0) {

136 
	`Ârötf
(
°dîr
, "Cannot openÑtnetlink\n");

137  
EXIT_FAILURE
;

140 
cmdlöío
 = 0;

141 
	`gëcmdlöe
(&
löe
, &
Àn
, 
°dö
) != -1) {

142 *
œrgv
[100];

143 
œrgc
;

145 
¥e„ºed_Ámûy
 = 
‹ig_Ámûy
;

147 
œrgc
 = 
	`makórgs
(
löe
, 
œrgv
, 100);

148 i‡(
œrgc
 == 0)

151 i‡(
	`do_cmd
(
œrgv
[0], 
œrgc
,Üargv)) {

152 
	`Ârötf
(
°dîr
, "Command failed %s:%d\n",

153 
«me
, 
cmdlöío
);

154 
ªt
 = 
EXIT_FAILURE
;

155 i‡(!
f‹˚
)

159 i‡(
löe
)

160 
	`‰ì
(
löe
);

162 
	`π∆_˛o£
(&
πh
);

163  
ªt
;

164 
	}
}

167 
	$maö
(
¨gc
, **
¨gv
)

169 *
ba£«me
;

170 *
b©ch_fûe
 = 
NULL
;

172 
ba£«me
 = 
	`°ºchr
(
¨gv
[0], '/');

173 i‡(
ba£«me
 =
NULL
)

174 
ba£«me
 = 
¨gv
[0];

176 
ba£«me
++;

178 
¨gc
 > 1) {

179 *
›t
 = 
¨gv
[1];

181 i‡(
	`°rcmp
(
›t
, "--") == 0) {

182 
¨gc
--; 
¨gv
++;

185 i‡(
›t
[0] != '-')

187 i‡(
›t
[1] == '-')

188 
›t
++;

189 i‡(
	`m©ches
(
›t
, "-loops") == 0) {

190 
¨gc
--;

191 
¨gv
++;

192 i‡(
¨gc
 <= 1)

193 
	`ußge
();

194 
max_Êush_lo›s
 = 
	`©oi
(
¨gv
[1]);

195 } i‡(
	`m©ches
(
›t
, "-family") == 0) {

196 
¨gc
--;

197 
¨gv
++;

198 i‡(
¨gc
 <= 1)

199 
	`ußge
();

200 i‡(
	`°rcmp
(
¨gv
[1], "help") == 0)

201 
	`ußge
();

203 
¥e„ºed_Ámûy
 = 
	`ªad_Ámûy
(
¨gv
[1]);

204 i‡(
¥e„ºed_Ámûy
 =
AF_UNSPEC
)

205 
	`öv¨g
("övÆidÖrŸocﬁ famûy", 
¨gv
[1]);

206 } i‡(
	`°rcmp
(
›t
, "-4") == 0) {

207 
¥e„ºed_Ámûy
 = 
AF_INET
;

208 } i‡(
	`°rcmp
(
›t
, "-6") == 0) {

209 
¥e„ºed_Ámûy
 = 
AF_INET6
;

210 } i‡(
	`°rcmp
(
›t
, "-0") == 0) {

211 
¥e„ºed_Ámûy
 = 
AF_PACKET
;

212 } i‡(
	`°rcmp
(
›t
, "-I") == 0) {

213 
¥e„ºed_Ámûy
 = 
AF_IPX
;

214 } i‡(
	`°rcmp
(
›t
, "-D") == 0) {

215 
¥e„ºed_Ámûy
 = 
AF_DEC√t
;

216 } i‡(
	`°rcmp
(
›t
, "-M") == 0) {

217 
¥e„ºed_Ámûy
 = 
AF_MPLS
;

218 } i‡(
	`°rcmp
(
›t
, "-B") == 0) {

219 
¥e„ºed_Ámûy
 = 
AF_BRIDGE
;

220 } i‡(
	`m©ches
(
›t
, "-human") == 0 ||

221 
	`m©ches
(
›t
, "-human-readable") == 0) {

222 ++
hum™_ªadabÀ
;

223 } i‡(
	`m©ches
(
›t
, "-iec") == 0) {

224 ++
u£_õc
;

225 } i‡(
	`m©ches
(
›t
, "-stats") == 0 ||

226 
	`m©ches
(
›t
, "-statistics") == 0) {

227 ++
show_°©s
;

228 } i‡(
	`m©ches
(
›t
, "-details") == 0) {

229 ++
show_dëaûs
;

230 } i‡(
	`m©ches
(
›t
, "-resolve") == 0) {

231 ++
ªsﬁve_ho°s
;

232 } i‡(
	`m©ches
(
›t
, "-oneline") == 0) {

233 ++
⁄ñöe
;

234 } i‡(
	`m©ches
(
›t
, "-timestamp") == 0) {

235 ++
time°amp
;

236 } i‡(
	`m©ches
(
›t
, "-tshort") == 0) {

237 ++
time°amp
;

238 ++
time°amp_sh‹t
;

240 } i‡(
	`m©ches
(
›t
, "-numeric") == 0) {

241 
π∆_«mes_numîic
++;

243 } i‡(
	`m©ches
(
›t
, "-Version") == 0) {

244 
	`¥ötf
("ù utûôy, i¥ouã2-ss%s\n", 
SNAPSHOT
);

245 
	`exô
(0);

246 } i‡(
	`m©ches
(
›t
, "-force") == 0) {

247 ++
f‹˚
;

248 } i‡(
	`m©ches
(
›t
, "-batch") == 0) {

249 
¨gc
--;

250 
¨gv
++;

251 i‡(
¨gc
 <= 1)

252 
	`ußge
();

253 
b©ch_fûe
 = 
¨gv
[1];

254 } i‡(
	`m©ches
(
›t
, "-brief") == 0) {

255 ++
brõf
;

256 } i‡(
	`m©ches
(
›t
, "-rcvbuf") == 0) {

257 
size
;

259 
¨gc
--;

260 
¨gv
++;

261 i‡(
¨gc
 <= 1)

262 
	`ußge
();

263 i‡(
	`gë_unsig√d
(&
size
, 
¨gv
[1], 0)) {

264 
	`Ârötf
(
°dîr
, "InvalidÑcvbuf size '%s'\n",

265 
¨gv
[1]);

266 
	`exô
(-1);

268 
rcvbuf
 = 
size
;

269 } i‡(
	`m©ches
(
›t
, "-color") == 0) {

270 
	`íabÀ_cﬁ‹
();

271 } i‡(
	`m©ches
(
›t
, "-help") == 0) {

272 
	`ußge
();

273 } i‡(
	`m©ches
(
›t
, "-netns") == 0) {

274 
	`NEXT_ARG
();

275 i‡(
	`√äs_swôch
(
¨gv
[1]))

276 
	`exô
(-1);

277 } i‡(
	`m©ches
(
›t
, "-all") == 0) {

278 
do_Æl
 = 
åue
;

280 
	`Ârötf
(
°dîr
,

282 
›t
);

283 
	`exô
(-1);

285 
¨gc
--; 
¨gv
++;

288 
_SL_
 = 
⁄ñöe
 ? "\\" : "\n";

290 i‡(
b©ch_fûe
)

291  
	`b©ch
(
b©ch_fûe
);

293 i‡(
	`π∆_›í
(&
πh
, 0) < 0)

294 
	`exô
(1);

296 i‡(
	`°æí
(
ba£«me
) > 2)

297  
	`do_cmd
(
ba£«me
+2, 
¨gc
, 
¨gv
);

299 i‡(
¨gc
 > 1)

300  
	`do_cmd
(
¨gv
[1], 
¨gc
-1,árgv+1);

302 
	`π∆_˛o£
(&
πh
);

303 
	`ußge
();

304 
	}
}

	@ip/ip6tunnel.c

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

28 
	~<¨∑/öë.h
>

29 
	~<sys/io˘l.h
>

30 
	~<löux/ù.h
>

31 
	~<löux/if.h
>

32 
	~<löux/if_¨p.h
>

33 
	~<löux/if_tu¬ñ.h
>

34 
	~<löux/ù6_tu¬ñ.h
>

36 
	~"utûs.h
"

37 
	~"tu¬ñ.h
"

38 
	~"ù_comm⁄.h
"

40 
	#IP6_FLOWINFO_TCLASS
 
	`ht⁄l
(0x0FF00000)

	)

41 
	#IP6_FLOWINFO_FLOWLABEL
 
	`ht⁄l
(0x000FFFFF)

	)

43 
	#DEFAULT_TNL_HOP_LIMIT
 (64)

	)

45 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

47 
	$ußge
()

49 
	`Ârötf
(
°dîr
, "Usage: ip -f inet6Åunnel {ádd | change | del | show } [ NAME ]\n");

50 
	`Ârötf
(
°dîr
, " [ mode { ip6ip6 | ipip6 | ip6gre | vti6 |ány } ]\n");

51 
	`Ârötf
(
°dîr
, " [Ñemote ADDRÜocal ADDR ] [ dev PHYS_DEV ]\n");

52 
	`Ârötf
(
°dîr
, " [Éncaplimit ELIM ]\n");

53 
	`Ârötf
(
°dîr
 ," [ hoplimit TTL ] [Åclass TCLASS ] [ flowlabel FLOWLABEL ]\n");

54 
	`Ârötf
(
°dîr
, " [ dscp inherit ]\n");

55 
	`Ârötf
(
°dîr
, " [ [i|o]seq ] [ [i|o]key KEY ] [ [i|o]csum ]\n");

56 
	`Ârötf
(
°dîr
, "\n");

57 
	`Ârötf
(
°dîr
, "Where: NAME := STRING\n");

58 
	`Ârötf
(
°dîr
, " ADDR := IPV6_ADDRESS\n");

59 
	`Ârötf
(
°dîr
, " ELIM := {Çone | 0..255 }(default=%d)\n",

60 
IPV6_DEFAULT_TNL_ENCAP_LIMIT
);

61 
	`Ârötf
(
°dîr
, " TTL := 0..255 (default=%d)\n",

62 
DEFAULT_TNL_HOP_LIMIT
);

63 
	`Ârötf
(
°dîr
, " TCLASS := { 0x0..0xff | inherit }\n");

64 
	`Ârötf
(
°dîr
, " FLOWLABEL := { 0x0..0xfffff | inherit }\n");

65 
	`Ârötf
(
°dîr
, " KEY := { DOTTED_QUAD | NUMBER }\n");

66 
	`exô
(-1);

67 
	}
}

69 
	$¥öt_tu¬ñ
(
ù6_äl_∑rm2
 *
p
)

71 
ªmŸe
[64];

72 
loˇl
[64];

74 
	`öë_¡›
(
AF_INET6
, &
p
->
øddr
, 
ªmŸe
, (remote));

75 
	`öë_¡›
(
AF_INET6
, &
p
->
œddr
, 
loˇl
, (local));

77 
	`¥ötf
("%s: %s/ipv6Ñemote %sÜocal %s",

78 
p
->
«me
, 
	`äl_°ΩrŸo
’->
¥Ÿo
), 
ªmŸe
, 
loˇl
);

79 i‡(
p
->
lök
) {

80 c⁄° *
n
 = 
	`Œ_ödex_to_«me
(
p
->
lök
);

81 i‡(
n
)

82 
	`¥ötf
(" dev %s", 
n
);

85 i‡(
p
->
Êags
 & 
IP6_TNL_F_IGN_ENCAP_LIMIT
)

86 
	`¥ötf
("ÉncaplimitÇone");

88 
	`¥ötf
("Énˇ∂imô %u", 
p
->
íˇp_limô
);

90 
	`¥ötf
(" h›limô %u", 
p
->
h›_limô
);

92 i‡(
p
->
Êags
 & 
IP6_TNL_F_USE_ORIG_TCLASS
)

93 
	`¥ötf
("Åclass inherit");

95 
__u32
 
vÆ
 = 
	`¡ohl
(
p
->
Êowöfo
 & 
IP6_FLOWINFO_TCLASS
);

96 
	`¥ötf
("Å˛as†0x%02x", (
__u8
)(
vÆ
 >> 20));

99 i‡(
p
->
Êags
 & 
IP6_TNL_F_USE_ORIG_FLOWLABEL
)

100 
	`¥ötf
(" flowlabel inherit");

102 
	`¥ötf
(" flowœbñ 0x%05x", 
	`¡ohl
(
p
->
Êowöfo
 & 
IP6_FLOWINFO_FLOWLABEL
));

104 
	`¥ötf
(" (Êowöfÿ0x%08x)", 
	`¡ohl
(
p
->
Êowöfo
));

106 i‡(
p
->
Êags
 & 
IP6_TNL_F_RCV_DSCP_COPY
)

107 
	`¥ötf
(" dscp inherit");

109 i‡(
p
->
¥Ÿo
 =
IPPROTO_GRE
) {

110 i‡((
p
->
i_Êags
&
GRE_KEY
Ë&& (p->
o_Êags
&GRE_KEYË&&Ö->
o_key
 =p->
i_key
)

111 
	`¥ötf
(" key %u", 
	`¡ohl
(
p
->
i_key
));

112 i‡((
p
->
i_Êags
|p->
o_Êags
)&
GRE_KEY
) {

113 i‡(
p
->
i_Êags
&
GRE_KEY
)

114 
	`¥ötf
(" ikey %u ", 
	`¡ohl
(
p
->
i_key
));

115 i‡(
p
->
o_Êags
&
GRE_KEY
)

116 
	`¥ötf
(" okey %u ", 
	`¡ohl
(
p
->
o_key
));

119 i‡(
p
->
i_Êags
&
GRE_SEQ
)

120 
	`¥ötf
("%† Dr›Öackë†ouào‡£quí˚.", 
_SL_
);

121 i‡(
p
->
i_Êags
&
GRE_CSUM
)

122 
	`¥ötf
("%† Checksum i¿ª˚ivedÖackë i†ªquúed.", 
_SL_
);

123 i‡(
p
->
o_Êags
&
GRE_SEQ
)

124 
	`¥ötf
("%† Sequí˚Öackë†⁄ ouçut.", 
_SL_
);

125 i‡(
p
->
o_Êags
&
GRE_CSUM
)

126 
	`¥ötf
("%† Checksum ouçuà∑ckës.", 
_SL_
);

128 
	}
}

130 
	$∑r£_¨gs
(
¨gc
, **
¨gv
, 
cmd
, 
ù6_äl_∑rm2
 *
p
)

132 
cou¡
 = 0;

133 
medium
[
IFNAMSIZ
];

135 
	`mem£t
(
medium
, 0, (medium));

137 
¨gc
 > 0) {

138 i‡(
	`°rcmp
(*
¨gv
, "mode") == 0) {

139 
	`NEXT_ARG
();

140 i‡(
	`°rcmp
(*
¨gv
, "ipv6/ipv6") == 0 ||

141 
	`°rcmp
(*
¨gv
, "ip6ip6") == 0)

142 
p
->
¥Ÿo
 = 
IPPROTO_IPV6
;

143 i‡(
	`°rcmp
(*
¨gv
, "vti6") == 0) {

144 
p
->
¥Ÿo
 = 
IPPROTO_IPV6
;

145 
p
->
i_Êags
 |
VTI_ISVTI
;

146 } i‡(
	`°rcmp
(*
¨gv
, "ip/ipv6") == 0 ||

147 
	`°rcmp
(*
¨gv
, "ipv4/ipv6") == 0 ||

148 
	`°rcmp
(*
¨gv
, "ipip6") == 0 ||

149 
	`°rcmp
(*
¨gv
, "ip4ip6") == 0)

150 
p
->
¥Ÿo
 = 
IPPROTO_IPIP
;

151 i‡(
	`°rcmp
(*
¨gv
, "ip6gre") == 0 ||

152 
	`°rcmp
(*
¨gv
, "gre/ipv6") == 0)

153 
p
->
¥Ÿo
 = 
IPPROTO_GRE
;

154 i‡(
	`°rcmp
(*
¨gv
, "any/ipv6") == 0 ||

155 
	`°rcmp
(*
¨gv
, "any") == 0)

156 
p
->
¥Ÿo
 = 0;

158 
	`Ârötf
(
°dîr
,"Unknow¿tu¬ñ modê\"%s\"\n", *
¨gv
);

159 
	`exô
(-1);

161 } i‡(
	`°rcmp
(*
¨gv
, "remote") == 0) {

162 
öë_¥efix
 
øddr
;

163 
	`NEXT_ARG
();

164 
	`gë_¥efix
(&
øddr
, *
¨gv
, 
¥e„ºed_Ámûy
);

165 i‡(
øddr
.
Ámûy
 =
AF_UNSPEC
)

166 
	`öv¨g
("\"ªmŸe\"áddªs†Ámûy i†AF_UNSPEC", *
¨gv
);

167 
	`mem˝y
(&
p
->
øddr
, &øddr.
d©a
, (p->raddr));

168 } i‡(
	`°rcmp
(*
¨gv
, "local") == 0) {

169 
öë_¥efix
 
œddr
;

170 
	`NEXT_ARG
();

171 
	`gë_¥efix
(&
œddr
, *
¨gv
, 
¥e„ºed_Ámûy
);

172 i‡(
œddr
.
Ámûy
 =
AF_UNSPEC
)

173 
	`öv¨g
("\"loˇl\"áddªs†Ámûy i†AF_UNSPEC", *
¨gv
);

174 
	`mem˝y
(&
p
->
œddr
, &œddr.
d©a
, (p->laddr));

175 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

176 
	`NEXT_ARG
();

177 
	`°∫˝y
(
medium
, *
¨gv
, 
IFNAMSIZ
 - 1);

178 } i‡(
	`°rcmp
(*
¨gv
, "encaplimit") == 0) {

179 
	`NEXT_ARG
();

180 i‡(
	`°rcmp
(*
¨gv
, "none") == 0) {

181 
p
->
Êags
 |
IP6_TNL_F_IGN_ENCAP_LIMIT
;

183 
__u8
 
uvÆ
;

184 i‡(
	`gë_u8
(&
uvÆ
, *
¨gv
, 0) < -1)

185 
	`öv¨g
("övÆid ELIM", *
¨gv
);

186 
p
->
íˇp_limô
 = 
uvÆ
;

187 
p
->
Êags
 &~
IP6_TNL_F_IGN_ENCAP_LIMIT
;

189 } i‡(
	`°rcmp
(*
¨gv
, "hoplimit") == 0 ||

190 
	`°rcmp
(*
¨gv
, "ttl") == 0 ||

191 
	`°rcmp
(*
¨gv
, "hlim") == 0) {

192 
__u8
 
uvÆ
;

193 
	`NEXT_ARG
();

194 i‡(
	`gë_u8
(&
uvÆ
, *
¨gv
, 0))

195 
	`öv¨g
("övÆid TTL", *
¨gv
);

196 
p
->
h›_limô
 = 
uvÆ
;

197 } i‡(
	`°rcmp
(*
¨gv
, "tclass") == 0 ||

198 
	`°rcmp
(*
¨gv
, "tc") == 0 ||

199 
	`°rcmp
(*
¨gv
, "tos") == 0 ||

200 
	`m©ches
(*
¨gv
, "dsfield") == 0) {

201 
__u8
 
uvÆ
;

202 
	`NEXT_ARG
();

203 
p
->
Êowöfo
 &~
IP6_FLOWINFO_TCLASS
;

204 i‡(
	`°rcmp
(*
¨gv
, "inherit") == 0)

205 
p
->
Êags
 |
IP6_TNL_F_USE_ORIG_TCLASS
;

207 i‡(
	`gë_u8
(&
uvÆ
, *
¨gv
, 16))

208 
	`öv¨g
("övÆid TCœss", *
¨gv
);

209 
p
->
Êowöfo
 |
	`ht⁄l
((
__u32
)
uvÆ
 << 20Ë& 
IP6_FLOWINFO_TCLASS
;

210 
p
->
Êags
 &~
IP6_TNL_F_USE_ORIG_TCLASS
;

212 } i‡(
	`°rcmp
(*
¨gv
, "flowlabel") == 0 ||

213 
	`°rcmp
(*
¨gv
, "fl") == 0) {

214 
__u32
 
uvÆ
;

215 
	`NEXT_ARG
();

216 
p
->
Êowöfo
 &~
IP6_FLOWINFO_FLOWLABEL
;

217 i‡(
	`°rcmp
(*
¨gv
, "inherit") == 0)

218 
p
->
Êags
 |
IP6_TNL_F_USE_ORIG_FLOWLABEL
;

220 i‡(
	`gë_u32
(&
uvÆ
, *
¨gv
, 16))

221 
	`öv¨g
("övÆid Flowœbñ", *
¨gv
);

222 i‡(
uvÆ
 > 0xFFFFF)

223 
	`öv¨g
("övÆid Flowœbñ", *
¨gv
);

224 
p
->
Êowöfo
 |
	`ht⁄l
(
uvÆ
Ë& 
IP6_FLOWINFO_FLOWLABEL
;

225 
p
->
Êags
 &~
IP6_TNL_F_USE_ORIG_FLOWLABEL
;

227 } i‡(
	`°rcmp
(*
¨gv
, "dscp") == 0) {

228 
	`NEXT_ARG
();

229 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0)

230 
	`öv¨g
("nŸ inhîô", *
¨gv
);

231 
p
->
Êags
 |
IP6_TNL_F_RCV_DSCP_COPY
;

232 } i‡(
	`°rcmp
(*
¨gv
, "key") == 0) {

233 
uvÆ
;

234 
	`NEXT_ARG
();

235 
p
->
i_Êags
 |
GRE_KEY
;

236 
p
->
o_Êags
 |
GRE_KEY
;

237 i‡(
	`°rchr
(*
¨gv
, '.'))

238 
p
->
i_key
 =Ö->
o_key
 = 
	`gë_addr32
(*
¨gv
);

240 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0) < 0) {

241 
	`Ârötf
(
°dîr
, "invalid value of \"key\"\n");

242 
	`exô
(-1);

244 
p
->
i_key
 =Ö->
o_key
 = 
	`ht⁄l
(
uvÆ
);

246 } i‡(
	`°rcmp
(*
¨gv
, "ikey") == 0) {

247 
uvÆ
;

248 
	`NEXT_ARG
();

249 
p
->
i_Êags
 |
GRE_KEY
;

250 i‡(
	`°rchr
(*
¨gv
, '.'))

251 
p
->
i_key
 = 
	`gë_addr32
(*
¨gv
);

253 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0)<0) {

254 
	`Ârötf
(
°dîr
, "invalid value of \"ikey\"\n");

255 
	`exô
(-1);

257 
p
->
i_key
 = 
	`ht⁄l
(
uvÆ
);

259 } i‡(
	`°rcmp
(*
¨gv
, "okey") == 0) {

260 
uvÆ
;

261 
	`NEXT_ARG
();

262 
p
->
o_Êags
 |
GRE_KEY
;

263 i‡(
	`°rchr
(*
¨gv
, '.'))

264 
p
->
o_key
 = 
	`gë_addr32
(*
¨gv
);

266 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0)<0) {

267 
	`Ârötf
(
°dîr
, "invalid value of \"okey\"\n");

268 
	`exô
(-1);

270 
p
->
o_key
 = 
	`ht⁄l
(
uvÆ
);

272 } i‡(
	`°rcmp
(*
¨gv
, "seq") == 0) {

273 
p
->
i_Êags
 |
GRE_SEQ
;

274 
p
->
o_Êags
 |
GRE_SEQ
;

275 } i‡(
	`°rcmp
(*
¨gv
, "iseq") == 0) {

276 
p
->
i_Êags
 |
GRE_SEQ
;

277 } i‡(
	`°rcmp
(*
¨gv
, "oseq") == 0) {

278 
p
->
o_Êags
 |
GRE_SEQ
;

279 } i‡(
	`°rcmp
(*
¨gv
, "csum") == 0) {

280 
p
->
i_Êags
 |
GRE_CSUM
;

281 
p
->
o_Êags
 |
GRE_CSUM
;

282 } i‡(
	`°rcmp
(*
¨gv
, "icsum") == 0) {

283 
p
->
i_Êags
 |
GRE_CSUM
;

284 } i‡(
	`°rcmp
(*
¨gv
, "ocsum") == 0) {

285 
p
->
o_Êags
 |
GRE_CSUM
;

287 i‡(
	`°rcmp
(*
¨gv
, "name") == 0) {

288 
	`NEXT_ARG
();

290 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

291 
	`ußge
();

292 i‡(
p
->
«me
[0])

293 
	`du∑rg2
("«me", *
¨gv
);

294 
	`°∫˝y
(
p
->
«me
, *
¨gv
, 
IFNAMSIZ
 - 1);

295 i‡(
cmd
 =
SIOCCHGTUNNEL
 && 
cou¡
 == 0) {

296 
ù6_äl_∑rm2
 
ﬁd_p
;

297 
	`mem£t
(&
ﬁd_p
, 0, (old_p));

298 i‡(
	`äl_gë_io˘l
(*
¨gv
, &
ﬁd_p
))

300 *
p
 = 
ﬁd_p
;

303 
cou¡
++;

304 
¨gc
--; 
¨gv
++;

306 i‡(
medium
[0]) {

307 
p
->
lök
 = 
	`Œ_«me_to_ödex
(
medium
);

308 i‡(
p
->
lök
 == 0)

312 
	}
}

314 
	$ù6_äl_∑rm_öô
(
ù6_äl_∑rm2
 *
p
, 
≠∂y_deÁu…
)

316 
	`mem£t
(
p
, 0, (*p));

317 
p
->
¥Ÿo
 = 
IPPROTO_IPV6
;

318 i‡(
≠∂y_deÁu…
) {

319 
p
->
h›_limô
 = 
DEFAULT_TNL_HOP_LIMIT
;

320 
p
->
íˇp_limô
 = 
IPV6_DEFAULT_TNL_ENCAP_LIMIT
;

322 
	}
}

328 
	$ù6_äl_∑rm_m©ch
(c⁄° 
ù6_äl_∑rm2
 *
p1
,

329 c⁄° 
ù6_äl_∑rm2
 *
p2
)

331  ((!
p1
->
lök
 ||Ö1->lök =
p2
->link) &&

332 (!
p1
->
«me
[0] || 
	`°rcmp
’1->«me, 
p2
->name) == 0) &&

333 (
	`memcmp
(&
p1
->
œddr
, &
ö6addr_™y
, (p1->laddr)) == 0 ||

334 
	`memcmp
(&
p1
->
œddr
, &
p2
->laddr, (p1->laddr)) == 0) &&

335 (
	`memcmp
(&
p1
->
øddr
, &
ö6addr_™y
, (p1->raddr)) == 0 ||

336 
	`memcmp
(&
p1
->
øddr
, &
p2
->raddr, (p1->raddr)) == 0) &&

337 (!
p1
->
¥Ÿo
 || !
p2
->proto ||Ö1->proto ==Ö2->proto) &&

338 (!
p1
->
íˇp_limô
 ||Ö1->íˇp_limô =
p2
->encap_limit) &&

339 (!
p1
->
h›_limô
 ||Ö1->h›_limô =
p2
->hop_limit) &&

340 (!(
p1
->
Êowöfo
 & 
IP6_FLOWINFO_TCLASS
) ||

341 !((
p1
->
Êowöfo
 ^ 
p2
->ÊowöfoË& 
IP6_FLOWINFO_TCLASS
)) &&

342 (!(
p1
->
Êowöfo
 & 
IP6_FLOWINFO_FLOWLABEL
) ||

343 !((
p1
->
Êowöfo
 ^ 
p2
->ÊowöfoË& 
IP6_FLOWINFO_FLOWLABEL
)) &&

344 (!
p1
->
Êags
 || (p1->Êag†& 
p2
->flags)));

345 
	}
}

347 
	$do_tu¬ñs_li°
(
ù6_äl_∑rm2
 *
p
)

349 
buf
[512];

350 
îr
 = -1;

351 
FILE
 *
Â
 = 
	`f›í
("/proc/net/dev", "r");

352 i‡(
Â
 =
NULL
) {

353 
	`≥º‹
("fopen");

354 
íd
;

358 i‡(!
	`fgës
(
buf
, (buf), 
Â
) ||

359 !
	`fgës
(
buf
, (buf), 
Â
)) {

360 
	`Ârötf
(
°dîr
, "/proc/net/devÑeadÉrror\n");

364 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

365 
«me
[
IFNAMSIZ
];

366 
ödex
, 
ty≥
;

367 
rx_byãs
, 
rx_∑ckës
, 
rx_îrs
, 
rx_dr›s
,

368 
rx_fifo
, 
rx_‰ame
,

369 
tx_byãs
, 
tx_∑ckës
, 
tx_îrs
, 
tx_dr›s
,

370 
tx_fifo
, 
tx_cﬁls
, 
tx_ˇºõr
, 
rx_mu…i
;

371 
ù6_äl_∑rm2
 
p1
;

372 *
±r
;

374 
buf
[(buf) - 1] = '\0';

375 i‡((
±r
 = 
	`°rchr
(
buf
, ':')Ë=
NULL
 ||

376 (*
±r
++ = 0, 
	`ssˇnf
(
buf
, "%s", 
«me
) != 1)) {

377 
	`Ârötf
(
°dîr
, "Wrong format for /proc/net/dev. Giving up.\n");

378 
íd
;

380 i‡(
	`ssˇnf
(
±r
, "%ld%ld%ld%ld%ld%ld%ld%*d%ld%ld%ld%ld%ld%ld%ld",

381 &
rx_byãs
, &
rx_∑ckës
, &
rx_îrs
, &
rx_dr›s
,

382 &
rx_fifo
, &
rx_‰ame
, &
rx_mu…i
,

383 &
tx_byãs
, &
tx_∑ckës
, &
tx_îrs
, &
tx_dr›s
,

384 &
tx_fifo
, &
tx_cﬁls
, &
tx_ˇºõr
) != 14)

386 i‡(
p
->
«me
[0] && 
	`°rcmp
(p->name,Çame))

388 
ödex
 = 
	`Œ_«me_to_ödex
(
«me
);

389 i‡(
ödex
 == 0)

391 
ty≥
 = 
	`Œ_ödex_to_ty≥
(
ödex
);

392 i‡(
ty≥
 == -1) {

393 
	`Ârötf
(
°dîr
, "FaûedÅÿgëÅy≥ o‡\"%s\"\n", 
«me
);

396 i‡(
ty≥
 !
ARPHRD_TUNNEL6
 &&Åy≥ !
ARPHRD_IP6GRE
)

398 
	`mem£t
(&
p1
, 0, (p1));

399 
	`ù6_äl_∑rm_öô
(&
p1
, 0);

400 i‡(
ty≥
 =
ARPHRD_IP6GRE
)

401 
p1
.
¥Ÿo
 = 
IPPROTO_GRE
;

402 
	`°r˝y
(
p1
.
«me
,Çame);

403 
p1
.
lök
 = 
	`Œ_«me_to_ödex
’1.
«me
);

404 i‡(
p1
.
lök
 == 0)

406 i‡(
	`äl_gë_io˘l
(
p1
.
«me
, &p1))

408 i‡(!
	`ù6_äl_∑rm_m©ch
(
p
, &
p1
))

410 
	`¥öt_tu¬ñ
(&
p1
);

411 i‡(
show_°©s
) {

412 
	`¥ötf
("%s", 
_SL_
);

413 
	`¥ötf
("RX: Packë† Byã† Eº‹†CsumEº†OutOfSeq Mˇ°s%s", 
_SL_
);

414 
	`¥ötf
(" %-10ld %-12ld %-6ld %-8ld %-8ld %-8ld%s",

415 
rx_∑ckës
, 
rx_byãs
, 
rx_îrs
, 
rx_‰ame
, 
rx_fifo
, 
rx_mu…i
, 
_SL_
);

416 
	`¥ötf
("TX: Packë† Byã† Eº‹†DódLo› NoRouã NoBufs%s", 
_SL_
);

417 
	`¥ötf
(" %-10ld %-12ld %-6ld %-8ld %-8ld %-6ld",

418 
tx_∑ckës
, 
tx_byãs
, 
tx_îrs
, 
tx_cﬁls
, 
tx_ˇºõr
, 
tx_dr›s
);

420 
	`¥ötf
("\n");

422 
îr
 = 0;

424 
íd
:

425 i‡(
Â
)

426 
	`f˛o£
(
Â
);

427  
îr
;

428 
	}
}

430 
	$do_show
(
¨gc
, **
¨gv
)

432 
ù6_äl_∑rm2
 
p
;

434 
	`Œ_öô_m≠
(&
πh
);

435 
	`ù6_äl_∑rm_öô
(&
p
, 0);

436 
p
.
¥Ÿo
 = 0;

438 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, 
SIOCGETTUNNEL
, &
p
) < 0)

441 i‡(!
p
.
«me
[0] || 
show_°©s
)

442 
	`do_tu¬ñs_li°
(&
p
);

444 i‡(
	`äl_gë_io˘l
(
p
.
«me
, &p))

446 
	`¥öt_tu¬ñ
(&
p
);

447 
	`¥ötf
("\n");

451 
	}
}

453 
	$do_add
(
cmd
, 
¨gc
, **
¨gv
)

455 
ù6_äl_∑rm2
 
p
;

456 c⁄° *
ba£dev
 = "ip6tnl0";

458 
	`ù6_äl_∑rm_öô
(&
p
, 1);

460 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, 
cmd
, &
p
) < 0)

463 i‡(
p
.
¥Ÿo
 =
IPPROTO_GRE
)

464 
ba£dev
 = "ip6gre0";

465 i‡(
p
.
i_Êags
 & 
VTI_ISVTI
)

466 
ba£dev
 = "ip6_vti0";

468  
	`äl_add_io˘l
(
cmd
, 
ba£dev
, 
p
.
«me
, &p);

469 
	}
}

471 
	$do_dñ
(
¨gc
, **
¨gv
)

473 
ù6_äl_∑rm2
 
p
;

474 c⁄° *
ba£dev
 = "ip6tnl0";

476 
	`ù6_äl_∑rm_öô
(&
p
, 1);

478 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, 
SIOCDELTUNNEL
, &
p
) < 0)

481 i‡(
p
.
¥Ÿo
 =
IPPROTO_GRE
)

482 
ba£dev
 = "ip6gre0";

483 i‡(
p
.
i_Êags
 & 
VTI_ISVTI
)

484 
ba£dev
 = "ip6_vti0";

486  
	`äl_dñ_io˘l
(
ba£dev
, 
p
.
«me
, &p);

487 
	}
}

489 
	$do_ù6tu¬ñ
(
¨gc
, **
¨gv
)

491 
¥e„ºed_Ámûy
) {

492 
AF_UNSPEC
:

493 
¥e„ºed_Ámûy
 = 
AF_INET6
;

495 
AF_INET6
:

498 
	`Ârötf
(
°dîr
, "Unsuµ‹ãdÖrŸocﬁ famûy: %d\n", 
¥e„ºed_Ámûy
);

499 
	`exô
(-1);

502 i‡(
¨gc
 > 0) {

503 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

504  
	`do_add
(
SIOCADDTUNNEL
, 
¨gc
 - 1, 
¨gv
 + 1);

505 i‡(
	`m©ches
(*
¨gv
, "change") == 0)

506  
	`do_add
(
SIOCCHGTUNNEL
, 
¨gc
 - 1, 
¨gv
 + 1);

507 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

508  
	`do_dñ
(
¨gc
 - 1, 
¨gv
 + 1);

509 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

510 
	`m©ches
(*
¨gv
, "lst") == 0 ||

511 
	`m©ches
(*
¨gv
, "list") == 0)

512  
	`do_show
(
¨gc
 - 1, 
¨gv
 + 1);

513 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

514 
	`ußge
();

516  
	`do_show
(0, 
NULL
);

518 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ù -‡öë6Åu¬ñ hñp\".\n", *
¨gv
);

519 
	`exô
(-1);

520 
	}
}

	@ip/ip_common.h

1 
gë_›î°©e
(c⁄° *
«me
);

2 
¥öt_lököfo
(c⁄° 
sockaddr_∆
 *
who
,

3 
∆msghdr
 *
n
,

4 *
¨g
);

5 
¥öt_lököfo_brõf
(c⁄° 
sockaddr_∆
 *
who
,

6 
∆msghdr
 *
n
,

7 *
¨g
);

8 
¥öt_addröfo
(c⁄° 
sockaddr_∆
 *
who
,

9 
∆msghdr
 *
n
,

10 *
¨g
);

11 
¥öt_addæabñ
(c⁄° 
sockaddr_∆
 *
who
,

12 
∆msghdr
 *
n
, *
¨g
);

13 
¥öt_√igh
(c⁄° 
sockaddr_∆
 *
who
,

14 
∆msghdr
 *
n
, *
¨g
);

15 
¥öt_¡abÀ
(c⁄° 
sockaddr_∆
 *
who
,

16 
∆msghdr
 *
n
, *
¨g
);

17 
ùaddr_li°
(
¨gc
, **
¨gv
);

18 
ùaddr_li°_lök
(
¨gc
, **
¨gv
);

19 
ùaddr_gë_vf_øã
(, *, *, );

20 
ùrouã_m⁄ô‹
(
¨gc
, **
¨gv
);

21 
	$ùlök_ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

23 
	`ùrouã_ª£t_fûãr
(
ifödex
);

24 
	`ùmrouã_ª£t_fûãr
(
ifödex
);

25 
	`ùaddr_ª£t_fûãr
(
⁄ñöe
, 
ifödex
);

26 
	`ù√igh_ª£t_fûãr
(
ifödex
);

27 
	`ù¡abÀ_ª£t_fûãr
();

28 
	`ù√tc⁄f_ª£t_fûãr
(
ifödex
);

30 
	`¥öt_rouã
(c⁄° 
sockaddr_∆
 *
who
,

31 
∆msghdr
 *
n
, *
¨g
);

32 
	`¥öt_mrouã
(c⁄° 
sockaddr_∆
 *
who
,

33 
∆msghdr
 *
n
, *
¨g
);

34 
	`¥öt_¥efix
(c⁄° 
sockaddr_∆
 *
who
,

35 
∆msghdr
 *
n
, *
¨g
);

36 
	`¥öt_ruÀ
(c⁄° 
sockaddr_∆
 *
who
,

37 
∆msghdr
 *
n
, *
¨g
);

38 
	`¥öt_√tc⁄f
(c⁄° 
sockaddr_∆
 *
who
,

39 
π∆_˘æ_d©a
 *
˘æ
,

40 
∆msghdr
 *
n
, *
¨g
);

41 
	`√äs_m≠_öô
();

42 
	`¥öt_nsid
(c⁄° 
sockaddr_∆
 *
who
,

43 
∆msghdr
 *
n
, *
¨g
);

44 
	`do_ùaddr
(
¨gc
, **
¨gv
);

45 
	`do_ùaddæabñ
(
¨gc
, **
¨gv
);

46 
	`do_ùrouã
(
¨gc
, **
¨gv
);

47 
	`do_ùruÀ
(
¨gc
, **
¨gv
);

48 
	`do_ù√igh
(
¨gc
, **
¨gv
);

49 
	`do_ù¡abÀ
(
¨gc
, **
¨gv
);

50 
	`do_ùtu¬ñ
(
¨gc
, **
¨gv
);

51 
	`do_ù6tu¬ñ
(
¨gc
, **
¨gv
);

52 
	`do_ùtu¡≠
(
¨gc
, **
¨gv
);

53 
	`do_ùlök
(
¨gc
, **
¨gv
);

54 
	`do_ùm⁄ô‹
(
¨gc
, **
¨gv
);

55 
	`do_mu…üddr
(
¨gc
, **
¨gv
);

56 
	`do_mu…úouã
(
¨gc
, **
¨gv
);

57 
	`do_mu…úuÀ
(
¨gc
, **
¨gv
);

58 
	`do_√äs
(
¨gc
, **
¨gv
);

59 
	`do_x‰m
(
¨gc
, **
¨gv
);

60 
	`do_ùl2ç
(
¨gc
, **
¨gv
);

61 
	`do_ùfou
(
¨gc
, **
¨gv
);

62 
	`do_t˝_mërics
(
¨gc
, **
¨gv
);

63 
	`do_ù√tc⁄f
(
¨gc
, **
¨gv
);

64 
	`do_ùtokí
(
¨gc
, **
¨gv
);

65 
	`ùlök_gë
(
Êags
, *
«me
, 
__u32
 
fût_mask
);

67 
ölöe
 
	$πm_gë_èbÀ
(
πmsg
 *
r
, 
π©å
 **
tb
)

69 
__u32
 
èbÀ
 = 
r
->
πm_èbÀ
;

70 i‡(
tb
[
RTA_TABLE
])

71 
èbÀ
 = 
	`πa_gë©å_u32
(
tb
[
RTA_TABLE
]);

72  
èbÀ
;

73 
	}
}

75 
π∆_h™dÀ
 
πh
;

77 
	~<°dboﬁ.h
>

79 
	slök_utû


81 
lök_utû
 *
	m√xt
;

82 c⁄° *
	mid
;

83 
	mmax©å
;

84 (*
	m∑r£_›t
)(
	mlök_utû
 *, , **,

85 
	m∆msghdr
 *);

86 (*
	m¥öt_›t
)(
	mlök_utû
 *, 
	mFILE
 *,

87 
	mπ©å
 *[]);

88 (*
	m¥öt_x°©s
)(
	mlök_utû
 *, 
	mFILE
 *,

89 
	mπ©å
 *);

90 (*
	m¥öt_hñp
)(
	mlök_utû
 *, , **,

91 
	mFILE
 *);

92 
boﬁ
 
	m¶ave
;

95 
lök_utû
 *
gë_lök_köd
(c⁄° *
köd
);

96 
lök_utû
 *
gë_lök_¶ave_köd
(c⁄° *
¶ave_köd
);

98 #i‚def 
INFINITY_LIFE_TIME


99 
	#INFINITY_LIFE_TIME
 0xFFFFFFFFU

	)

	@ip/ipaddress.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<öây≥s.h
>

18 
	~<f˙é.h
>

19 
	~<sys/io˘l.h
>

20 
	~<sys/sockë.h
>

21 
	~<sys/io˘l.h
>

22 
	~<î∫o.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<°rög.h
>

26 
	~<‚m©ch.h
>

28 
	~<löux/√tdevi˚.h
>

29 
	~<löux/if_¨p.h
>

30 
	~<löux/sockios.h
>

31 
	~<löux/√t_«me•a˚.h
>

33 
	~"π_«mes.h
"

34 
	~"utûs.h
"

35 
	~"Œ_m≠.h
"

36 
	~"ù_comm⁄.h
"

37 
	~"cﬁ‹.h
"

40 
	mIPADD_LIST
,

41 
	mIPADD_FLUSH
,

42 
	mIPADD_SAVE
,

47 
	mifödex
;

48 
	mÁmûy
;

49 
	m⁄ñöe
;

50 
	mshowqueue
;

51 
öë_¥efix
 
	mpfx
;

52 
	msc›e
, 
	msc›emask
;

53 
	mÊags
, 
	mÊagmask
;

54 
	mup
;

55 *
	mœbñ
;

56 
	mÊushed
;

57 *
	mÊushb
;

58 
	mÊushp
;

59 
	mÊushe
;

60 
	mgroup
;

61 
	mma°î
;

62 *
	mköd
;

63 } 
	gfûãr
;

65 
	gdo_lök
;

67 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

69 
	$ußge
()

71 i‡(
do_lök
) {

72 
	`ùlök_ußge
();

74 
	`Ârötf
(
°dîr
, "Usage: ipáddress {add|change|replace} IFADDR dev IFNAME [ LIFETIME ]\n");

75 
	`Ârötf
(
°dîr
, " [ CONFFLAG-LIST ]\n");

76 
	`Ârötf
(
°dîr
, " ipáddress del IFADDR dev IFNAME [mngtmpaddr]\n");

77 
	`Ârötf
(
°dîr
, " ipáddress {show|save|flush} [ dev IFNAME ] [ scope SCOPE-ID ]\n");

78 
	`Ârötf
(
°dîr
, " [Åo PREFIX ] [ FLAG-LIST ] [Üabel LABEL ] [up]\n");

79 
	`Ârötf
(
°dîr
, " ipáddress {showdump|restore}\n");

80 
	`Ârötf
(
°dîr
, "IFADDR := PREFIX | ADDRÖeer PREFIX\n");

81 
	`Ârötf
(
°dîr
, " [ broadcast ADDR ] [ánycast ADDR ]\n");

82 
	`Ârötf
(
°dîr
, " [Üabel IFNAME ] [ scope SCOPE-ID ]\n");

83 
	`Ârötf
(
°dîr
, "SCOPE-ID := [ host |Üink | global | NUMBER ]\n");

84 
	`Ârötf
(
°dîr
, "FLAG-LIST := [ FLAG-LIST ] FLAG\n");

85 
	`Ârötf
(
°dîr
, "FLAG := [Öermanent | dynamic | secondary |Örimary |\n");

86 
	`Ârötf
(
°dîr
, " [-]tentative | [-]deprecated | [-]dadfailed |Åemporary |\n");

87 
	`Ârötf
(
°dîr
, " CONFFLAG-LIST ]\n");

88 
	`Ârötf
(
°dîr
, "CONFFLAG-LIST := [ CONFFLAG-LIST ] CONFFLAG\n");

89 
	`Ârötf
(
°dîr
, "CONFFLAG := [ home |Çodad | mngtmpaddr |Çoprefixroute |áutojoin ]\n");

90 
	`Ârötf
(
°dîr
, "LIFETIME := [ valid_lft LFT ] [Öreferred_lft LFT ]\n");

91 
	`Ârötf
(
°dîr
, "LFT := forever | SECONDS\n");

93 
	`exô
(-1);

94 
	}
}

96 
	$¥öt_lök_Êags
(
FILE
 *
Â
, 
Êags
, 
mdown
)

98 
	`Ârötf
(
Â
, "<");

99 i‡(
Êags
 & 
IFF_UP
 && !(Êag†& 
IFF_RUNNING
))

100 
	`Ârötf
(
Â
, "NO-CARRIER%s", 
Êags
 ? "," : "");

101 
Êags
 &~
IFF_RUNNING
;

102 
	#_PF
(
f
Ëi‡(
Êags
&
IFF_
##f) { \

103 
Êags
 &~
IFF_
##
f
 ; \

104 
	`Ârötf
(
Â
, #‡"%s", 
Êags
 ? "," : ""); }

	)

105 
	`_PF
(
LOOPBACK
);

106 
	`_PF
(
BROADCAST
);

107 
	`_PF
(
POINTOPOINT
);

108 
	`_PF
(
MULTICAST
);

109 
	`_PF
(
NOARP
);

110 
	`_PF
(
ALLMULTI
);

111 
	`_PF
(
PROMISC
);

112 
	`_PF
(
MASTER
);

113 
	`_PF
(
SLAVE
);

114 
	`_PF
(
DEBUG
);

115 
	`_PF
(
DYNAMIC
);

116 
	`_PF
(
AUTOMEDIA
);

117 
	`_PF
(
PORTSEL
);

118 
	`_PF
(
NOTRAILERS
);

119 
	`_PF
(
UP
);

120 
	`_PF
(
LOWER_UP
);

121 
	`_PF
(
DORMANT
);

122 
	`_PF
(
ECHO
);

123 #unde‡
_PF


124 i‡(
Êags
)

125 
	`Ârötf
(
Â
, "%x", 
Êags
);

126 i‡(
mdown
)

127 
	`Ârötf
(
Â
, ",M-DOWN");

128 
	`Ârötf
(
Â
, "> ");

129 
	}
}

131 c⁄° *
	g›î_°©es
[] = {

136 
	$¥öt_›î°©e
(
FILE
 *
f
, 
__u8
 
°©e
)

138 i‡(
°©e
 >(
›î_°©es
)/(oper_states[0]))

139 
	`Ârötf
(
f
, "°©ê%#x ", 
°©e
);

141 i‡(
brõf
) {

142 i‡(
	`°rcmp
(
›î_°©es
[
°©e
], "UP") == 0)

143 
	`cﬁ‹_Ârötf
(
f
, 
COLOR_OPERSTATE_UP
, "%-14†", 
›î_°©es
[
°©e
]);

144 i‡(
	`°rcmp
(
›î_°©es
[
°©e
], "DOWN") == 0)

145 
	`cﬁ‹_Ârötf
(
f
, 
COLOR_OPERSTATE_DOWN
, "%-14†", 
›î_°©es
[
°©e
]);

147 
	`Ârötf
(
f
, "%-14†", 
›î_°©es
[
°©e
]);

149 
	`Ârötf
(
f
, "state ");

150 i‡(
	`°rcmp
(
›î_°©es
[
°©e
], "UP") == 0)

151 
	`cﬁ‹_Ârötf
(
f
, 
COLOR_OPERSTATE_UP
, "%†", 
›î_°©es
[
°©e
]);

152 i‡(
	`°rcmp
(
›î_°©es
[
°©e
], "DOWN") == 0)

153 
	`cﬁ‹_Ârötf
(
f
, 
COLOR_OPERSTATE_DOWN
, "%†", 
›î_°©es
[
°©e
]);

155 
	`Ârötf
(
f
, "%†", 
›î_°©es
[
°©e
]);

158 
	}
}

160 
	$gë_›î°©e
(c⁄° *
«me
)

162 
i
;

164 
i
 = 0; i < (
›î_°©es
)/(oper_states[0]); i++)

165 i‡(
	`°rˇ£cmp
(
«me
, 
›î_°©es
[
i
]) == 0)

166  
i
;

168 
	}
}

170 
¥öt_queuñí
(
FILE
 *
f
, 
π©å
 *
tb
[
IFLA_MAX
 + 1])

172 
	gqÀn
;

174 i‡(
	gtb
[
IFLA_TXQLEN
])

175 
	gqÀn
 = *(*)
RTA_DATA
(
tb
[
IFLA_TXQLEN
]);

177 
i‰eq
 
	gi‰
;

178 
	gs
 = 
sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

180 i‡(
	gs
 < 0)

183 
mem£t
(&
i‰
, 0, (ifr));

184 
°r˝y
(
i‰
.
i‰_«me
, 
πa_gë©å_°r
(
tb
[
IFLA_IFNAME
]));

185 i‡(
io˘l
(
s
, 
SIOCGIFTXQLEN
, &
i‰
) < 0) {

186 
Ârötf
(
f
, "io˘l(SIOCGIFTXQLENËÁûed: %s\n", 
°ªº‹
(
î∫o
));

187 
˛o£
(
s
);

190 
˛o£
(
s
);

191 
	gqÀn
 = 
i‰
.
i‰_qÀn
;

193 i‡(
	gqÀn
)

194 
Ârötf
(
f
, "qÀ¿%d", 
qÀn
);

197 c⁄° *
	glök_modes
[] = {

201 
	$¥öt_lökmode
(
FILE
 *
f
, 
π©å
 *
tb
)

203 
mode
 = 
	`πa_gë©å_u8
(
tb
);

205 i‡(
mode
 >(
lök_modes
) / (link_modes[0]))

206 
	`Ârötf
(
f
, "modê%d ", 
mode
);

208 
	`Ârötf
(
f
, "modê%†", 
lök_modes
[
mode
]);

209 
	}
}

211 *
	$∑r£_lök_köd
(
π©å
 *
tb
)

213 
π©å
 *
lököfo
[
IFLA_INFO_MAX
+1];

215 
	`∑r£_π©å_√°ed
(
lököfo
, 
IFLA_INFO_MAX
, 
tb
);

217 i‡(
lököfo
[
IFLA_INFO_KIND
])

218  
	`RTA_DATA
(
lököfo
[
IFLA_INFO_KIND
]);

221 
	}
}

223 
	$¥öt_lökty≥
(
FILE
 *
Â
, 
π©å
 *
tb
)

225 
π©å
 *
lököfo
[
IFLA_INFO_MAX
+1];

226 
lök_utû
 *
lu
;

227 
lök_utû
 *
¶ave_lu
;

228 *
köd
;

229 *
¶ave_köd
;

231 
	`∑r£_π©å_√°ed
(
lököfo
, 
IFLA_INFO_MAX
, 
tb
);

233 i‡(
lököfo
[
IFLA_INFO_KIND
]) {

234 
köd
 = 
	`RTA_DATA
(
lököfo
[
IFLA_INFO_KIND
]);

236 
	`Ârötf
(
Â
, "%s", 
_SL_
);

237 
	`Ârötf
(
Â
, " %†", 
köd
);

239 
lu
 = 
	`gë_lök_köd
(
köd
);

240 i‡(
lu
 &&Üu->
¥öt_›t
) {

241 
π©å
 *
©å
[
lu
->
max©å
+1], **
d©a
 = 
NULL
;

243 i‡(
lököfo
[
IFLA_INFO_DATA
]) {

244 
	`∑r£_π©å_√°ed
(
©å
, 
lu
->
max©å
,

245 
lököfo
[
IFLA_INFO_DATA
]);

246 
d©a
 = 
©å
;

248 
lu
->
	`¥öt_›t
÷u, 
Â
, 
d©a
);

250 i‡(
lököfo
[
IFLA_INFO_XSTATS
] && 
show_°©s
 &&

251 
lu
->
¥öt_x°©s
)

252 
lu
->
	`¥öt_x°©s
÷u, 
Â
, 
lököfo
[
IFLA_INFO_XSTATS
]);

256 i‡(
lököfo
[
IFLA_INFO_SLAVE_KIND
]) {

257 
¶ave_köd
 = 
	`RTA_DATA
(
lököfo
[
IFLA_INFO_SLAVE_KIND
]);

259 
	`Ârötf
(
Â
, "%s", 
_SL_
);

260 
	`Ârötf
(
Â
, " %s_¶avê", 
¶ave_köd
);

262 
¶ave_lu
 = 
	`gë_lök_¶ave_köd
(
¶ave_köd
);

263 i‡(
¶ave_lu
 && sœve_lu->
¥öt_›t
) {

264 
π©å
 *
©å
[
¶ave_lu
->
max©å
+1], **
d©a
 = 
NULL
;

266 i‡(
lököfo
[
IFLA_INFO_SLAVE_DATA
]) {

267 
	`∑r£_π©å_√°ed
(
©å
, 
¶ave_lu
->
max©å
,

268 
lököfo
[
IFLA_INFO_SLAVE_DATA
]);

269 
d©a
 = 
©å
;

271 
¶ave_lu
->
	`¥öt_›t
(¶ave_lu, 
Â
, 
d©a
);

274 
	}
}

276 
	$¥öt_af_•ec
(
FILE
 *
Â
, 
π©å
 *
af_•ec_©å
)

278 
π©å
 *
öë6_©å
;

279 
π©å
 *
tb
[
IFLA_INET6_MAX
 + 1];

281 
öë6_©å
 = 
	`∑r£_π©å_⁄e_√°ed
(
AF_INET6
, 
af_•ec_©å
);

282 i‡(!
öë6_©å
)

285 
	`∑r£_π©å_√°ed
(
tb
, 
IFLA_INET6_MAX
, 
öë6_©å
);

287 i‡(
tb
[
IFLA_INET6_ADDR_GEN_MODE
]) {

288 
	`πa_gë©å_u8
(
tb
[
IFLA_INET6_ADDR_GEN_MODE
])) {

289 
IN6_ADDR_GEN_MODE_EUI64
:

290 
	`Ârötf
(
Â
, "addrgenmodeÉui64 ");

292 
IN6_ADDR_GEN_MODE_NONE
:

293 
	`Ârötf
(
Â
, "addrgenmodeÇone ");

297 
	}
}

299 
¥öt_vf_°©s64
(
FILE
 *
Â
, 
π©å
 *
vf°©s
);

301 
	$¥öt_vföfo
(
FILE
 *
Â
, 
π©å
 *
vföfo
)

303 
iÊa_vf_mac
 *
vf_mac
;

304 
iÊa_vf_vœn
 *
vf_vœn
;

305 
iÊa_vf_tx_øã
 *
vf_tx_øã
;

306 
iÊa_vf_•oofchk
 *
vf_•oofchk
;

307 
iÊa_vf_lök_°©e
 *
vf_lök°©e
;

308 
π©å
 *
vf
[
IFLA_VF_MAX
 + 1] = {};

309 
π©å
 *
tmp
;

310 
	`SPRINT_BUF
(
b1
);

312 i‡(
vföfo
->
πa_ty≥
 !
IFLA_VF_INFO
) {

313 
	`Ârötf
(
°dîr
, "BUG:ÑèÅy≥ i†%d\n", 
vföfo
->
πa_ty≥
);

317 
	`∑r£_π©å_√°ed
(
vf
, 
IFLA_VF_MAX
, 
vföfo
);

319 
vf_mac
 = 
	`RTA_DATA
(
vf
[
IFLA_VF_MAC
]);

320 
vf_vœn
 = 
	`RTA_DATA
(
vf
[
IFLA_VF_VLAN
]);

321 
vf_tx_øã
 = 
	`RTA_DATA
(
vf
[
IFLA_VF_TX_RATE
]);

326 
tmp
 = (
π©å
 *)((*)
vf
[
IFLA_VF_TX_RATE
] +

327 
vf
[
IFLA_VF_TX_RATE
]->
πa_Àn
);

329 i‡(
tmp
->
πa_ty≥
 !
IFLA_VF_SPOOFCHK
)

330 
vf_•oofchk
 = 
NULL
;

332 
vf_•oofchk
 = 
	`RTA_DATA
(
vf
[
IFLA_VF_SPOOFCHK
]);

334 i‡(
vf_•oofchk
) {

338 
tmp
 = (
π©å
 *)((*)
vf
[
IFLA_VF_SPOOFCHK
] +

339 
vf
[
IFLA_VF_SPOOFCHK
]->
πa_Àn
);

341 i‡(
tmp
->
πa_ty≥
 !
IFLA_VF_LINK_STATE
)

342 
vf_lök°©e
 = 
NULL
;

344 
vf_lök°©e
 = 
	`RTA_DATA
(
vf
[
IFLA_VF_LINK_STATE
]);

346 
vf_lök°©e
 = 
NULL
;

348 
	`Ârötf
(
Â
, "%† v‡%d MAC %s", 
_SL_
, 
vf_mac
->
vf
,

349 
	`Œ_addr_n2a
((*)&
vf_mac
->
mac
,

350 
ETH_ALEN
, 0, 
b1
, (b1)));

351 i‡(
vf_vœn
->
vœn
)

352 
	`Ârötf
(
Â
, ", vœ¿%d", 
vf_vœn
->
vœn
);

353 i‡(
vf_vœn
->
qos
)

354 
	`Ârötf
(
Â
, ", qo†%d", 
vf_vœn
->
qos
);

355 i‡(
vf_tx_øã
->
øã
)

356 
	`Ârötf
(
Â
, ",ÅxÑ©ê%d (Mbps)", 
vf_tx_øã
->
øã
);

358 i‡(
vf
[
IFLA_VF_RATE
]) {

359 
iÊa_vf_øã
 *
vf_øã
 = 
	`RTA_DATA
(
vf
[
IFLA_VF_RATE
]);

361 i‡(
vf_øã
->
max_tx_øã
)

362 
	`Ârötf
(
Â
, ", max_tx_øã %dMbps", 
vf_øã
->
max_tx_øã
);

363 i‡(
vf_øã
->
mö_tx_øã
)

364 
	`Ârötf
(
Â
, ", mö_tx_øã %dMbps", 
vf_øã
->
mö_tx_øã
);

367 i‡(
vf_•oofchk
 && vf_•oofchk->
£âög
 != -1) {

368 i‡(
vf_•oofchk
->
£âög
)

369 
	`Ârötf
(
Â
, ", spoof checking on");

371 
	`Ârötf
(
Â
, ", spoof checking off");

373 i‡(
vf_lök°©e
) {

374 i‡(
vf_lök°©e
->
lök_°©e
 =
IFLA_VF_LINK_STATE_AUTO
)

375 
	`Ârötf
(
Â
, ",Üink-stateáuto");

376 i‡(
vf_lök°©e
->
lök_°©e
 =
IFLA_VF_LINK_STATE_ENABLE
)

377 
	`Ârötf
(
Â
, ",Üink-stateÉnable");

379 
	`Ârötf
(
Â
, ",Üink-state disable");

381 i‡(
vf
[
IFLA_VF_STATS
] && 
show_°©s
)

382 
	`¥öt_vf_°©s64
(
Â
, 
vf
[
IFLA_VF_STATS
]);

383 
	}
}

385 
	$¥öt_num
(
FILE
 *
Â
, 
width
, 
uöt64_t
 
cou¡
)

387 c⁄° *
¥efix
 = "kMGTPE";

388 c⁄° 
ba£
 = 
u£_õc
 ? 1024 : 1000;

389 
uöt64_t
 
powi
 = 1;

390 
uöt16_t
 
powj
 = 1;

391 
uöt8_t
 
¥ecisi⁄
 = 2;

392 
buf
[64];

394 i‡(!
hum™_ªadabÀ
 || 
cou¡
 < 
ba£
) {

395 
	`Ârötf
(
Â
, "%-*"
PRIu64
" ", 
width
, 
cou¡
);

402 
powi
 *
ba£
;

403 i‡(
cou¡
 / 
ba£
 < 
powi
)

406 i‡(!
¥efix
[1])

408 ++
¥efix
;

412 ; 
¥ecisi⁄
 > 0;Örecision--) {

413 
powj
 *= 10;

414 i‡(
cou¡
 / 
powi
 < 
powj
)

418 
	`¢¥ötf
(
buf
, (buf), "%.*f%c%s", 
¥ecisi⁄
,

419 (Ë
cou¡
 / 
powi
, *
¥efix
, 
u£_õc
 ? "i" : "");

421 
	`Ârötf
(
Â
, "%-*†", 
width
, 
buf
);

422 
	}
}

424 
	$¥öt_vf_°©s64
(
FILE
 *
Â
, 
π©å
 *
vf°©s
)

426 
π©å
 *
vf
[
IFLA_VF_STATS_MAX
 + 1] = {};

428 i‡(
vf°©s
->
πa_ty≥
 !
IFLA_VF_STATS
) {

429 
	`Ârötf
(
°dîr
, "BUG:ÑèÅy≥ i†%d\n", 
vf°©s
->
πa_ty≥
);

433 
	`∑r£_π©å_√°ed
(
vf
, 
IFLA_VF_MAX
, 
vf°©s
);

436 
	`Ârötf
(
Â
, "%s", 
_SL_
);

437 
	`Ârötf
(
Â
, " RX: byã†Öackë† mˇ° bˇ° %s", 
_SL_
);

438 
	`Ârötf
(
Â
, " ");

440 
	`¥öt_num
(
Â
, 10, *(
__u64
 *)
	`RTA_DATA
(
vf
[
IFLA_VF_STATS_RX_BYTES
]));

441 
	`¥öt_num
(
Â
, 8, *(
__u64
 *)
	`RTA_DATA
(
vf
[
IFLA_VF_STATS_RX_PACKETS
]));

442 
	`¥öt_num
(
Â
, 7, *(
__u64
 *)
	`RTA_DATA
(
vf
[
IFLA_VF_STATS_MULTICAST
]));

443 
	`¥öt_num
(
Â
, 7, *(
__u64
 *)
	`RTA_DATA
(
vf
[
IFLA_VF_STATS_BROADCAST
]));

446 
	`Ârötf
(
Â
, "%s", 
_SL_
);

447 
	`Ârötf
(
Â
, " TX: byã†Öackë†%s", 
_SL_
);

448 
	`Ârötf
(
Â
, " ");

450 
	`¥öt_num
(
Â
, 10, *(
__u64
 *)
	`RTA_DATA
(
vf
[
IFLA_VF_STATS_TX_BYTES
]));

451 
	`¥öt_num
(
Â
, 8, *(
__u64
 *)
	`RTA_DATA
(
vf
[
IFLA_VF_STATS_TX_PACKETS
]));

452 
	}
}

454 
	$¥öt_lök_°©s64
(
FILE
 *
Â
, c⁄° 
π∆_lök_°©s64
 *
s
,

455 c⁄° 
π©å
 *
ˇºõr_ch™ges
)

458 
	`Ârötf
(
Â
, " RX: bytesÖacketsÉrrors dropped overrun mcast %s%s",

459 
s
->
rx_com¥es£d
 ? "com¥es£d" : "", 
_SL_
);

461 
	`Ârötf
(
Â
, " ");

462 
	`¥öt_num
(
Â
, 10, 
s
->
rx_byãs
);

463 
	`¥öt_num
(
Â
, 8, 
s
->
rx_∑ckës
);

464 
	`¥öt_num
(
Â
, 7, 
s
->
rx_îr‹s
);

465 
	`¥öt_num
(
Â
, 7, 
s
->
rx_dr›≥d
);

466 
	`¥öt_num
(
Â
, 7, 
s
->
rx_ovî_îr‹s
);

467 
	`¥öt_num
(
Â
, 7, 
s
->
mu…iˇ°
);

468 i‡(
s
->
rx_com¥es£d
)

469 
	`¥öt_num
(
Â
, 7, 
s
->
rx_com¥es£d
);

472 i‡(
show_°©s
 > 1) {

473 
	`Ârötf
(
Â
, "%s", 
_SL_
);

474 
	`Ârötf
(
Â
, " RXÉº‹s:Üígth cr¯ fømê fifÿ mis£d%s", 
_SL_
);

476 
	`Ârötf
(
Â
, " ");

477 
	`¥öt_num
(
Â
, 8, 
s
->
rx_Àngth_îr‹s
);

478 
	`¥öt_num
(
Â
, 7, 
s
->
rx_¸c_îr‹s
);

479 
	`¥öt_num
(
Â
, 7, 
s
->
rx_‰ame_îr‹s
);

480 
	`¥öt_num
(
Â
, 7, 
s
->
rx_fifo_îr‹s
);

481 
	`¥öt_num
(
Â
, 7, 
s
->
rx_mis£d_îr‹s
);

483 
	`Ârötf
(
Â
, "%s", 
_SL_
);

486 
	`Ârötf
(
Â
, " TX: bytesÖacketsÉrrors dropped carrier collsns %s%s",

487 
s
->
tx_com¥es£d
 ? "com¥es£d" : "", 
_SL_
);

490 
	`Ârötf
(
Â
, " ");

491 
	`¥öt_num
(
Â
, 10, 
s
->
tx_byãs
);

492 
	`¥öt_num
(
Â
, 8, 
s
->
tx_∑ckës
);

493 
	`¥öt_num
(
Â
, 7, 
s
->
tx_îr‹s
);

494 
	`¥öt_num
(
Â
, 7, 
s
->
tx_dr›≥d
);

495 
	`¥öt_num
(
Â
, 7, 
s
->
tx_ˇºõr_îr‹s
);

496 
	`¥öt_num
(
Â
, 7, 
s
->
cﬁlisi⁄s
);

497 i‡(
s
->
tx_com¥es£d
)

498 
	`¥öt_num
(
Â
, 7, 
s
->
tx_com¥es£d
);

501 i‡(
show_°©s
 > 1) {

502 
	`Ârötf
(
Â
, "%s", 
_SL_
);

503 
	`Ârötf
(
Â
, " TXÉrrors:áborted fifo window heartbeat");

504 i‡(
ˇºõr_ch™ges
)

505 
	`Ârötf
(
Â
, "Åransns");

506 
	`Ârötf
(
Â
, "%s", 
_SL_
);

508 
	`Ârötf
(
Â
, " ");

509 
	`¥öt_num
(
Â
, 8, 
s
->
tx_ab‹ãd_îr‹s
);

510 
	`¥öt_num
(
Â
, 7, 
s
->
tx_fifo_îr‹s
);

511 
	`¥öt_num
(
Â
, 7, 
s
->
tx_wödow_îr‹s
);

512 
	`¥öt_num
(
Â
, 7, 
s
->
tx_hóπbót_îr‹s
);

513 i‡(
ˇºõr_ch™ges
)

514 
	`¥öt_num
(
Â
, 7, *(
uöt32_t
*)
	`RTA_DATA
(
ˇºõr_ch™ges
));

516 
	}
}

518 
	$¥öt_lök_°©s32
(
FILE
 *
Â
, c⁄° 
π∆_lök_°©s
 *
s
,

519 c⁄° 
π©å
 *
ˇºõr_ch™ges
)

522 
	`Ârötf
(
Â
, " RX: bytesÖacketsÉrrors dropped overrun mcast %s%s",

523 
s
->
rx_com¥es£d
 ? "com¥es£d" : "", 
_SL_
);

526 
	`Ârötf
(
Â
, " ");

527 
	`¥öt_num
(
Â
, 10, 
s
->
rx_byãs
);

528 
	`¥öt_num
(
Â
, 8, 
s
->
rx_∑ckës
);

529 
	`¥öt_num
(
Â
, 7, 
s
->
rx_îr‹s
);

530 
	`¥öt_num
(
Â
, 7, 
s
->
rx_dr›≥d
);

531 
	`¥öt_num
(
Â
, 7, 
s
->
rx_ovî_îr‹s
);

532 
	`¥öt_num
(
Â
, 7, 
s
->
mu…iˇ°
);

533 i‡(
s
->
rx_com¥es£d
)

534 
	`¥öt_num
(
Â
, 7, 
s
->
rx_com¥es£d
);

537 i‡(
show_°©s
 > 1) {

538 
	`Ârötf
(
Â
, "%s", 
_SL_
);

539 
	`Ârötf
(
Â
, " RXÉº‹s:Üígth cr¯ fømê fifÿ mis£d%s", 
_SL_
);

540 
	`Ârötf
(
Â
, " ");

541 
	`¥öt_num
(
Â
, 8, 
s
->
rx_Àngth_îr‹s
);

542 
	`¥öt_num
(
Â
, 7, 
s
->
rx_¸c_îr‹s
);

543 
	`¥öt_num
(
Â
, 7, 
s
->
rx_‰ame_îr‹s
);

544 
	`¥öt_num
(
Â
, 7, 
s
->
rx_fifo_îr‹s
);

545 
	`¥öt_num
(
Â
, 7, 
s
->
rx_mis£d_îr‹s
);

547 
	`Ârötf
(
Â
, "%s", 
_SL_
);

550 
	`Ârötf
(
Â
, " TX: bytesÖacketsÉrrors dropped carrier collsns %s%s",

551 
s
->
tx_com¥es£d
 ? "com¥es£d" : "", 
_SL_
);

553 
	`Ârötf
(
Â
, " ");

554 
	`¥öt_num
(
Â
, 10, 
s
->
tx_byãs
);

555 
	`¥öt_num
(
Â
, 8, 
s
->
tx_∑ckës
);

556 
	`¥öt_num
(
Â
, 7, 
s
->
tx_îr‹s
);

557 
	`¥öt_num
(
Â
, 7, 
s
->
tx_dr›≥d
);

558 
	`¥öt_num
(
Â
, 7, 
s
->
tx_ˇºõr_îr‹s
);

559 
	`¥öt_num
(
Â
, 7, 
s
->
cﬁlisi⁄s
);

560 i‡(
s
->
tx_com¥es£d
)

561 
	`¥öt_num
(
Â
, 7, 
s
->
tx_com¥es£d
);

564 i‡(
show_°©s
 > 1) {

565 
	`Ârötf
(
Â
, "%s", 
_SL_
);

566 
	`Ârötf
(
Â
, " TXÉrrors:áborted fifo window heartbeat");

567 i‡(
ˇºõr_ch™ges
)

568 
	`Ârötf
(
Â
, "Åransns");

569 
	`Ârötf
(
Â
, "%s", 
_SL_
);

571 
	`Ârötf
(
Â
, " ");

572 
	`¥öt_num
(
Â
, 8, 
s
->
tx_ab‹ãd_îr‹s
);

573 
	`¥öt_num
(
Â
, 7, 
s
->
tx_fifo_îr‹s
);

574 
	`¥öt_num
(
Â
, 7, 
s
->
tx_wödow_îr‹s
);

575 
	`¥öt_num
(
Â
, 7, 
s
->
tx_hóπbót_îr‹s
);

576 i‡(
ˇºõr_ch™ges
)

577 
	`¥öt_num
(
Â
, 7, *(
uöt32_t
*)
	`RTA_DATA
(
ˇºõr_ch™ges
));

579 
	}
}

581 
	$__¥öt_lök_°©s
(
FILE
 *
Â
, 
π©å
 **
tb
)

583 i‡(
tb
[
IFLA_STATS64
])

584 
	`¥öt_lök_°©s64
(
Â
, 
	`RTA_DATA
(
tb
[
IFLA_STATS64
]),

585 
tb
[
IFLA_CARRIER_CHANGES
]);

586 i‡(
tb
[
IFLA_STATS
])

587 
	`¥öt_lök_°©s32
(
Â
, 
	`RTA_DATA
(
tb
[
IFLA_STATS
]),

588 
tb
[
IFLA_CARRIER_CHANGES
]);

589 
	}
}

591 
	$¥öt_lök_°©s
(
FILE
 *
Â
, 
∆msghdr
 *
n
)

593 
iföfomsg
 *
ifi
 = 
	`NLMSG_DATA
(
n
);

594 
π©å
 * 
tb
[
IFLA_MAX
+1];

596 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(
ifi
),

597 
n
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
ifi
)));

598 
	`__¥öt_lök_°©s
(
Â
, 
tb
);

599 
	`Ârötf
(
Â
, "%s", 
_SL_
);

600 
	}
}

602 
	$¥öt_lököfo_brõf
(c⁄° 
sockaddr_∆
 *
who
,

603 
∆msghdr
 *
n
, *
¨g
)

605 
FILE
 *
Â
 = (FILE*)
¨g
;

606 
iföfomsg
 *
ifi
 = 
	`NLMSG_DATA
(
n
);

607 
π©å
 * 
tb
[
IFLA_MAX
+1];

608 
Àn
 = 
n
->
∆msg_Àn
;

609 *
«me
;

610 
buf
[32] = { 0, };

611 
m_Êag
 = 0;

613 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWLINK
 &&Ç->∆msg_ty≥ !
RTM_DELLINK
)

616 
Àn
 -
	`NLMSG_LENGTH
((*
ifi
));

617 i‡(
Àn
 < 0)

620 i‡(
fûãr
.
ifödex
 && 
ifi
->
ifi_ödex
 != filter.ifindex)

622 i‡(
fûãr
.
up
 && !(
ifi
->
ifi_Êags
&
IFF_UP
))

625 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(
ifi
), 
Àn
);

626 i‡(
tb
[
IFLA_IFNAME
] =
NULL
) {

627 
	`Ârötf
(
°dîr
, "BUG: devi˚ wôh ifödex %d ha†nû i‚ame\n", 
ifi
->
ifi_ödex
);

629 i‡(
fûãr
.
œbñ
 &&

630 (!
fûãr
.
Ámûy
 || fûãr.Ámûy =
AF_PACKET
) &&

631 
	`‚m©ch
(
fûãr
.
œbñ
, 
	`RTA_DATA
(
tb
[
IFLA_IFNAME
]), 0))

634 i‡(
tb
[
IFLA_GROUP
]) {

635 
group
 = *(*)
	`RTA_DATA
(
tb
[
IFLA_GROUP
]);

636 i‡(
fûãr
.
group
 != -1 && group != filter.group)

640 i‡(
tb
[
IFLA_MASTER
]) {

641 
ma°î
 = *(*)
	`RTA_DATA
(
tb
[
IFLA_MASTER
]);

642 i‡(
fûãr
.
ma°î
 > 0 && master != filter.master)

645 i‡(
fûãr
.
ma°î
 > 0)

648 i‡(
fûãr
.
köd
) {

649 i‡(
tb
[
IFLA_LINKINFO
]) {

650 *
köd
 = 
	`∑r£_lök_köd
(
tb
[
IFLA_LINKINFO
]);

652 i‡(
	`°rcmp
(
köd
, 
fûãr
.kind))

659 i‡(
n
->
∆msg_ty≥
 =
RTM_DELLINK
)

660 
	`Ârötf
(
Â
, "Deleted ");

662 
«me
 = (*)(
tb
[
IFLA_IFNAME
] ? 
	`πa_gë©å_°r
(tb[IFLA_IFNAME]) : "<nil>");

664 i‡(
tb
[
IFLA_LINK
]) {

665 
	`SPRINT_BUF
(
b1
);

666 
iÊök
 = *(*)
	`RTA_DATA
(
tb
[
IFLA_LINK
]);

667 i‡(
iÊök
 == 0)

668 
	`¢¥ötf
(
buf
, (buf), "%s@NONE", 
«me
);

670 
	`¢¥ötf
(
buf
, (buf),

671 "%s@%s", 
«me
, 
	`Œ_idx_n2a
(
iÊök
, 
b1
));

672 
m_Êag
 = 
	`Œ_ödex_to_Êags
(
iÊök
);

673 
m_Êag
 = !(m_Êag & 
IFF_UP
);

676 
	`¢¥ötf
(
buf
, (buf), "%s", 
«me
);

678 
	`Ârötf
(
Â
, "%-16†", 
buf
);

680 i‡(
tb
[
IFLA_OPERSTATE
])

681 
	`¥öt_›î°©e
(
Â
, 
	`πa_gë©å_u8
(
tb
[
IFLA_OPERSTATE
]));

683 i‡(
fûãr
.
Ámûy
 =
AF_PACKET
) {

684 
	`SPRINT_BUF
(
b1
);

685 i‡(
tb
[
IFLA_ADDRESS
]) {

686 
	`cﬁ‹_Ârötf
(
Â
, 
COLOR_MAC
, "%s ",

687 
	`Œ_addr_n2a
(
	`RTA_DATA
(
tb
[
IFLA_ADDRESS
]),

688 
	`RTA_PAYLOAD
(
tb
[
IFLA_ADDRESS
]),

689 
ifi
->
ifi_ty≥
,

690 
b1
, (b1)));

694 i‡(
fûãr
.
Ámûy
 =
AF_PACKET
)

695 
	`¥öt_lök_Êags
(
Â
, 
ifi
->
ifi_Êags
, 
m_Êag
);

697 i‡(
fûãr
.
Ámûy
 =
AF_PACKET
)

698 
	`Ârötf
(
Â
, "\n");

699 
	`fÊush
(
Â
);

701 
	}
}

703 
	$¥öt_lököfo
(c⁄° 
sockaddr_∆
 *
who
,

704 
∆msghdr
 *
n
, *
¨g
)

706 
FILE
 *
Â
 = (FILE*)
¨g
;

707 
iföfomsg
 *
ifi
 = 
	`NLMSG_DATA
(
n
);

708 
π©å
 * 
tb
[
IFLA_MAX
+1];

709 
Àn
 = 
n
->
∆msg_Àn
;

710 
m_Êag
 = 0;

712 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWLINK
 &&Ç->∆msg_ty≥ !
RTM_DELLINK
)

715 
Àn
 -
	`NLMSG_LENGTH
((*
ifi
));

716 i‡(
Àn
 < 0)

719 i‡(
fûãr
.
ifödex
 && 
ifi
->
ifi_ödex
 != filter.ifindex)

721 i‡(
fûãr
.
up
 && !(
ifi
->
ifi_Êags
&
IFF_UP
))

724 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(
ifi
), 
Àn
);

725 i‡(
tb
[
IFLA_IFNAME
] =
NULL
) {

726 
	`Ârötf
(
°dîr
, "BUG: devi˚ wôh ifödex %d ha†nû i‚ame\n", 
ifi
->
ifi_ödex
);

728 i‡(
fûãr
.
œbñ
 &&

729 (!
fûãr
.
Ámûy
 || fûãr.Ámûy =
AF_PACKET
) &&

730 
	`‚m©ch
(
fûãr
.
œbñ
, 
	`RTA_DATA
(
tb
[
IFLA_IFNAME
]), 0))

733 i‡(
tb
[
IFLA_GROUP
]) {

734 
group
 = *(*)
	`RTA_DATA
(
tb
[
IFLA_GROUP
]);

735 i‡(
fûãr
.
group
 != -1 && group != filter.group)

739 i‡(
tb
[
IFLA_MASTER
]) {

740 
ma°î
 = *(*)
	`RTA_DATA
(
tb
[
IFLA_MASTER
]);

741 i‡(
fûãr
.
ma°î
 > 0 && master != filter.master)

744 i‡(
fûãr
.
ma°î
 > 0)

747 i‡(
fûãr
.
köd
) {

748 i‡(
tb
[
IFLA_LINKINFO
]) {

749 *
köd
 = 
	`∑r£_lök_köd
(
tb
[
IFLA_LINKINFO
]);

751 i‡(
	`°rcmp
(
köd
, 
fûãr
.kind))

758 i‡(
n
->
∆msg_ty≥
 =
RTM_DELLINK
)

759 
	`Ârötf
(
Â
, "Deleted ");

761 
	`Ârötf
(
Â
, "%d: ", 
ifi
->
ifi_ödex
);

762 
	`cﬁ‹_Ârötf
(
Â
, 
COLOR_IFNAME
, "%s",

763 
tb
[
IFLA_IFNAME
] ? 
	`πa_gë©å_°r
(tb[IFLA_IFNAME]) : "<nil>");

765 i‡(
tb
[
IFLA_LINK
]) {

766 
	`SPRINT_BUF
(
b1
);

767 
iÊök
 = *(*)
	`RTA_DATA
(
tb
[
IFLA_LINK
]);

768 i‡(
iÊök
 == 0)

769 
	`Ârötf
(
Â
, "@NONE: ");

771 i‡(
tb
[
IFLA_LINK_NETNSID
])

772 
	`Ârötf
(
Â
, "@if%d: ", 
iÊök
);

774 
	`Ârötf
(
Â
, "@%s: ", 
	`Œ_idx_n2a
(
iÊök
, 
b1
));

775 
m_Êag
 = 
	`Œ_ödex_to_Êags
(
iÊök
);

776 
m_Êag
 = !(m_Êag & 
IFF_UP
);

780 
	`Ârötf
(
Â
, ": ");

782 
	`¥öt_lök_Êags
(
Â
, 
ifi
->
ifi_Êags
, 
m_Êag
);

784 i‡(
tb
[
IFLA_MTU
])

785 
	`Ârötf
(
Â
, "mtu %u ", *(*)
	`RTA_DATA
(
tb
[
IFLA_MTU
]));

786 i‡(
tb
[
IFLA_QDISC
])

787 
	`Ârötf
(
Â
, "qdis¯%†", 
	`πa_gë©å_°r
(
tb
[
IFLA_QDISC
]));

788 i‡(
tb
[
IFLA_MASTER
]) {

789 
	`SPRINT_BUF
(
b1
);

790 
	`Ârötf
(
Â
, "ma°î %†", 
	`Œ_idx_n2a
(*(*)
	`RTA_DATA
(
tb
[
IFLA_MASTER
]), 
b1
));

793 i‡(
tb
[
IFLA_PHYS_PORT_ID
]) {

794 
	`SPRINT_BUF
(
b1
);

795 
	`Ârötf
(
Â
, "portid %s ",

796 
	`hex°rög_n2a
(
	`RTA_DATA
(
tb
[
IFLA_PHYS_PORT_ID
]),

797 
	`RTA_PAYLOAD
(
tb
[
IFLA_PHYS_PORT_ID
]),

798 
b1
, (b1)));

801 i‡(
tb
[
IFLA_PHYS_SWITCH_ID
]) {

802 
	`SPRINT_BUF
(
b1
);

803 
	`Ârötf
(
Â
, "switchid %s ",

804 
	`hex°rög_n2a
(
	`RTA_DATA
(
tb
[
IFLA_PHYS_SWITCH_ID
]),

805 
	`RTA_PAYLOAD
(
tb
[
IFLA_PHYS_SWITCH_ID
]),

806 
b1
, (b1)));

809 i‡(
tb
[
IFLA_OPERSTATE
])

810 
	`¥öt_›î°©e
(
Â
, 
	`πa_gë©å_u8
(
tb
[
IFLA_OPERSTATE
]));

812 i‡(
do_lök
 && 
tb
[
IFLA_LINKMODE
])

813 
	`¥öt_lökmode
(
Â
, 
tb
[
IFLA_LINKMODE
]);

815 i‡(
tb
[
IFLA_GROUP
]) {

816 
	`SPRINT_BUF
(
b1
);

817 
group
 = *(*)
	`RTA_DATA
(
tb
[
IFLA_GROUP
]);

818 
	`Ârötf
(
Â
, "grou∞%†", 
	`π∆_group_n2a
(
group
, 
b1
, (b1)));

821 i‡(
fûãr
.
showqueue
)

822 
	`¥öt_queuñí
(
Â
, 
tb
);

824 i‡(!
fûãr
.
Ámûy
 || fûãr.Ámûy =
AF_PACKET
 || 
show_dëaûs
) {

825 
	`SPRINT_BUF
(
b1
);

826 
	`Ârötf
(
Â
, "%s", 
_SL_
);

827 
	`Ârötf
(
Â
, "Üök/%†", 
	`Œ_ty≥_n2a
(
ifi
->
ifi_ty≥
, 
b1
, (b1)));

829 i‡(
tb
[
IFLA_ADDRESS
]) {

830 
	`cﬁ‹_Ârötf
(
Â
, 
COLOR_MAC
, "%s",

831 
	`Œ_addr_n2a
(
	`RTA_DATA
(
tb
[
IFLA_ADDRESS
]),

832 
	`RTA_PAYLOAD
(
tb
[
IFLA_ADDRESS
]),

833 
ifi
->
ifi_ty≥
,

834 
b1
, (b1)));

836 i‡(
tb
[
IFLA_BROADCAST
]) {

837 i‡(
ifi
->
ifi_Êags
&
IFF_POINTOPOINT
)

838 
	`Ârötf
(
Â
, "Öeer ");

840 
	`Ârötf
(
Â
, " brd ");

841 
	`Ârötf
(
Â
, "%s", 
	`Œ_addr_n2a
(
	`RTA_DATA
(
tb
[
IFLA_BROADCAST
]),

842 
	`RTA_PAYLOAD
(
tb
[
IFLA_BROADCAST
]),

843 
ifi
->
ifi_ty≥
,

844 
b1
, (b1)));

848 i‡(
tb
[
IFLA_LINK_NETNSID
]) {

849 
id
 = *(*)
	`RTA_DATA
(
tb
[
IFLA_LINK_NETNSID
]);

851 i‡(
id
 >= 0)

852 
	`Ârötf
(
Â
, "Üök-√äsid %d", 
id
);

854 
	`Ârötf
(
Â
, "Üink-netnsid unknown");

857 i‡(
tb
[
IFLA_PROTO_DOWN
]) {

858 i‡(
	`πa_gë©å_u8
(
tb
[
IFLA_PROTO_DOWN
]))

859 
	`Ârötf
(
Â
, "Örotodown on ");

862 i‡(
tb
[
IFLA_PROMISCUITY
] && 
show_dëaûs
)

863 
	`Ârötf
(
Â
, "Öromiscuity %u ",

864 *(*)
	`RTA_DATA
(
tb
[
IFLA_PROMISCUITY
]));

866 i‡(
tb
[
IFLA_LINKINFO
] && 
show_dëaûs
)

867 
	`¥öt_lökty≥
(
Â
, 
tb
[
IFLA_LINKINFO
]);

869 i‡(
do_lök
 && 
tb
[
IFLA_AF_SPEC
] && 
show_dëaûs
)

870 
	`¥öt_af_•ec
(
Â
, 
tb
[
IFLA_AF_SPEC
]);

872 i‡((
do_lök
 || 
show_dëaûs
Ë&& 
tb
[
IFLA_IFALIAS
]) {

873 
	`Ârötf
(
Â
, "%†álü†%s", 
_SL_
,

874 
	`πa_gë©å_°r
(
tb
[
IFLA_IFALIAS
]));

877 i‡(
do_lök
 && 
show_°©s
) {

878 
	`Ârötf
(
Â
, "%s", 
_SL_
);

879 
	`__¥öt_lök_°©s
(
Â
, 
tb
);

882 i‡((
do_lök
 || 
show_dëaûs
Ë&& 
tb
[
IFLA_VFINFO_LIST
] &&Åb[
IFLA_NUM_VF
]) {

883 
π©å
 *
i
, *
vÊi°
 = 
tb
[
IFLA_VFINFO_LIST
];

884 
ªm
 = 
	`RTA_PAYLOAD
(
vÊi°
);

885 
i
 = 
	`RTA_DATA
(
vÊi°
); 
	`RTA_OK
(i, 
ªm
); i = 
	`RTA_NEXT
(i,Ñem))

886 
	`¥öt_vföfo
(
Â
, 
i
);

889 
	`Ârötf
(
Â
, "\n");

890 
	`fÊush
(
Â
);

892 
	}
}

894 
	$Êush_upd©e
()

896 i‡(
	`π∆_£nd_check
(&
πh
, 
fûãr
.
Êushb
, fûãr.
Êushp
) < 0) {

897 
	`≥º‹
("FailedÅo send flushÑequest");

900 
fûãr
.
Êushp
 = 0;

902 
	}
}

904 
	$£t_li„time
(*
li„time
, *
¨gv
)

906 i‡(
	`°rcmp
(
¨gv
, "forever") == 0)

907 *
li„time
 = 
INFINITY_LIFE_TIME
;

908 i‡(
	`gë_u32
(
li„time
, 
¨gv
, 0))

912 
	}
}

914 
	$gë_iÁ_Êags
(
iÁddrmsg
 *
iÁ
,

915 
π©å
 *
iÁ_Êags_©å
)

917  
iÁ_Êags_©å
 ? 
	`πa_gë©å_u32
(ifa_flags_attr) :

918 
iÁ
->
iÁ_Êags
;

919 
	}
}

921 
	$¥öt_addröfo
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
,

922 *
¨g
)

924 
FILE
 *
Â
 = 
¨g
;

925 
iÁddrmsg
 *
iÁ
 = 
	`NLMSG_DATA
(
n
);

926 
Àn
 = 
n
->
∆msg_Àn
;

927 
dïªˇãd
 = 0;

929 
iÁ_Êags
;

930 
π©å
 * 
πa_tb
[
IFA_MAX
+1];

931 
abuf
[256];

932 
	`SPRINT_BUF
(
b1
);

934 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWADDR
 &&Ç->∆msg_ty≥ !
RTM_DELADDR
)

936 
Àn
 -
	`NLMSG_LENGTH
((*
iÁ
));

937 i‡(
Àn
 < 0) {

938 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

942 i‡(
fûãr
.
Êushb
 && 
n
->
∆msg_ty≥
 !
RTM_NEWADDR
)

945 
	`∑r£_π©å
(
πa_tb
, 
IFA_MAX
, 
	`IFA_RTA
(
iÁ
),

946 
n
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
iÁ
)));

948 
iÁ_Êags
 = 
	`gë_iÁ_Êags
(
iÁ
, 
πa_tb
[
IFA_FLAGS
]);

950 i‡(!
πa_tb
[
IFA_LOCAL
])

951 
πa_tb
[
IFA_LOCAL
] =Ñè_tb[
IFA_ADDRESS
];

952 i‡(!
πa_tb
[
IFA_ADDRESS
])

953 
πa_tb
[
IFA_ADDRESS
] =Ñè_tb[
IFA_LOCAL
];

955 i‡(
fûãr
.
ifödex
 && fûãr.ifödex !
iÁ
->
iÁ_ödex
)

957 i‡((
fûãr
.
sc›e
^
iÁ
->
iÁ_sc›e
)&fûãr.
sc›emask
)

959 i‡((
fûãr
.
Êags
 ^ 
iÁ_Êags
Ë& fûãr.
Êagmask
)

961 i‡(
fûãr
.
œbñ
) {

962 
	`SPRINT_BUF
(
b1
);

963 c⁄° *
œbñ
;

964 i‡(
πa_tb
[
IFA_LABEL
])

965 
œbñ
 = 
	`RTA_DATA
(
πa_tb
[
IFA_LABEL
]);

967 
œbñ
 = 
	`Œ_idx_n2a
(
iÁ
->
iÁ_ödex
, 
b1
);

968 i‡(
	`‚m©ch
(
fûãr
.
œbñ
,Üabel, 0) != 0)

971 i‡(
fûãr
.
pfx
.
Ámûy
) {

972 i‡(
πa_tb
[
IFA_LOCAL
]) {

973 
öë_¥efix
 
d°
;

974 
	`mem£t
(&
d°
, 0, (dst));

975 
d°
.
Ámûy
 = 
iÁ
->
iÁ_Ámûy
;

976 
	`mem˝y
(&
d°
.
d©a
, 
	`RTA_DATA
(
πa_tb
[
IFA_LOCAL
]), 
	`RTA_PAYLOAD
(rta_tb[IFA_LOCAL]));

977 i‡(
	`öë_addr_m©ch
(&
d°
, &
fûãr
.
pfx
, fûãr.pfx.
bôÀn
))

982 i‡(
fûãr
.
Ámûy
 && fûãr.Ámûy !
iÁ
->
iÁ_Ámûy
)

985 i‡(
fûãr
.
Êushb
) {

986 
∆msghdr
 *
‚
;

987 i‡(
	`NLMSG_ALIGN
(
fûãr
.
Êushp
Ë+ 
n
->
∆msg_Àn
 > fûãr.
Êushe
) {

988 i‡(
	`Êush_upd©e
())

991 
‚
 = (
∆msghdr
*)(
fûãr
.
Êushb
 + 
	`NLMSG_ALIGN
(fûãr.
Êushp
));

992 
	`mem˝y
(
‚
, 
n
,Ç->
∆msg_Àn
);

993 
‚
->
∆msg_ty≥
 = 
RTM_DELADDR
;

994 
‚
->
∆msg_Êags
 = 
NLM_F_REQUEST
;

995 
‚
->
∆msg_£q
 = ++
πh
.
£q
;

996 
fûãr
.
Êushp
 = (((*)
‚
Ë+ 
n
->
∆msg_Àn
Ë- fûãr.
Êushb
;

997 
fûãr
.
Êushed
++;

998 i‡(
show_°©s
 < 2)

1002 i‡(
n
->
∆msg_ty≥
 =
RTM_DELADDR
)

1003 
	`Ârötf
(
Â
, "Deleted ");

1005 i‡(!
brõf
) {

1006 i‡(
fûãr
.
⁄ñöe
 || fûãr.
Êushb
)

1007 
	`Ârötf
(
Â
, "%u: %s", 
iÁ
->
iÁ_ödex
, 
	`Œ_ödex_to_«me
(ifa->ifa_index));

1008 i‡(
iÁ
->
iÁ_Ámûy
 =
AF_INET
)

1009 
	`Ârötf
(
Â
, " inet ");

1010 i‡(
iÁ
->
iÁ_Ámûy
 =
AF_INET6
)

1011 
	`Ârötf
(
Â
, " inet6 ");

1012 i‡(
iÁ
->
iÁ_Ámûy
 =
AF_DEC√t
)

1013 
	`Ârötf
(
Â
, " dnet ");

1014 i‡(
iÁ
->
iÁ_Ámûy
 =
AF_IPX
)

1015 
	`Ârötf
(
Â
, " ipx ");

1017 
	`Ârötf
(
Â
, " famûy %d ", 
iÁ
->
iÁ_Ámûy
);

1020 i‡(
πa_tb
[
IFA_LOCAL
]) {

1021 i‡(
iÁ
->
iÁ_Ámûy
 =
AF_INET
)

1022 
	`cﬁ‹_Ârötf
(
Â
, 
COLOR_INET
, "%s", 
	`f‹m©_ho°
(
iÁ
->
iÁ_Ámûy
,

1023 
	`RTA_PAYLOAD
(
πa_tb
[
IFA_LOCAL
]),

1024 
	`RTA_DATA
(
πa_tb
[
IFA_LOCAL
]),

1025 
abuf
, (abuf)));

1026 i‡(
iÁ
->
iÁ_Ámûy
 =
AF_INET6
)

1027 
	`cﬁ‹_Ârötf
(
Â
, 
COLOR_INET6
, "%s", 
	`f‹m©_ho°
(
iÁ
->
iÁ_Ámûy
,

1028 
	`RTA_PAYLOAD
(
πa_tb
[
IFA_LOCAL
]),

1029 
	`RTA_DATA
(
πa_tb
[
IFA_LOCAL
]),

1030 
abuf
, (abuf)));

1032 
	`Ârötf
(
Â
, "%s", 
	`f‹m©_ho°
(
iÁ
->
iÁ_Ámûy
,

1033 
	`RTA_PAYLOAD
(
πa_tb
[
IFA_LOCAL
]),

1034 
	`RTA_DATA
(
πa_tb
[
IFA_LOCAL
]),

1035 
abuf
, (abuf)));

1037 i‡(
πa_tb
[
IFA_ADDRESS
] =
NULL
 ||

1038 
	`memcmp
(
	`RTA_DATA
(
πa_tb
[
IFA_ADDRESS
]), RTA_DATA‘è_tb[
IFA_LOCAL
]),

1039 
iÁ
->
iÁ_Ámûy
 =
AF_INET
 ? 4 : 16) == 0) {

1040 
	`Ârötf
(
Â
, "/%d ", 
iÁ
->
iÁ_¥efixÀn
);

1042 
	`Ârötf
(
Â
, "Öeer %s/%d ",

1043 
	`f‹m©_ho°
(
iÁ
->
iÁ_Ámûy
,

1044 
	`RTA_PAYLOAD
(
πa_tb
[
IFA_ADDRESS
]),

1045 
	`RTA_DATA
(
πa_tb
[
IFA_ADDRESS
]),

1046 
abuf
, (abuf)),

1047 
iÁ
->
iÁ_¥efixÀn
);

1051 i‡(
brõf
)

1052 
brõf_exô
;

1054 i‡(
πa_tb
[
IFA_BROADCAST
]) {

1055 
	`Ârötf
(
Â
, "brd %s ",

1056 
	`f‹m©_ho°
(
iÁ
->
iÁ_Ámûy
,

1057 
	`RTA_PAYLOAD
(
πa_tb
[
IFA_BROADCAST
]),

1058 
	`RTA_DATA
(
πa_tb
[
IFA_BROADCAST
]),

1059 
abuf
, (abuf)));

1061 i‡(
πa_tb
[
IFA_ANYCAST
]) {

1062 
	`Ârötf
(
Â
, "any %s ",

1063 
	`f‹m©_ho°
(
iÁ
->
iÁ_Ámûy
,

1064 
	`RTA_PAYLOAD
(
πa_tb
[
IFA_ANYCAST
]),

1065 
	`RTA_DATA
(
πa_tb
[
IFA_ANYCAST
]),

1066 
abuf
, (abuf)));

1068 
	`Ârötf
(
Â
, "sc›ê%†", 
	`π∆_πsc›e_n2a
(
iÁ
->
iÁ_sc›e
, 
b1
, (b1)));

1069 i‡(
iÁ_Êags
 & 
IFA_F_SECONDARY
) {

1070 
iÁ_Êags
 &~
IFA_F_SECONDARY
;

1071 i‡(
iÁ
->
iÁ_Ámûy
 =
AF_INET6
)

1072 
	`Ârötf
(
Â
, "temporary ");

1074 
	`Ârötf
(
Â
, "secondary ");

1076 i‡(
iÁ_Êags
 & 
IFA_F_TENTATIVE
) {

1077 
iÁ_Êags
 &~
IFA_F_TENTATIVE
;

1078 
	`Ârötf
(
Â
, "tentative ");

1080 i‡(
iÁ_Êags
 & 
IFA_F_DEPRECATED
) {

1081 
iÁ_Êags
 &~
IFA_F_DEPRECATED
;

1082 
dïªˇãd
 = 1;

1083 
	`Ârötf
(
Â
, "deprecated ");

1085 i‡(
iÁ_Êags
 & 
IFA_F_HOMEADDRESS
) {

1086 
iÁ_Êags
 &~
IFA_F_HOMEADDRESS
;

1087 
	`Ârötf
(
Â
, "home ");

1089 i‡(
iÁ_Êags
 & 
IFA_F_NODAD
) {

1090 
iÁ_Êags
 &~
IFA_F_NODAD
;

1091 
	`Ârötf
(
Â
, "nodad ");

1093 i‡(
iÁ_Êags
 & 
IFA_F_MANAGETEMPADDR
) {

1094 
iÁ_Êags
 &~
IFA_F_MANAGETEMPADDR
;

1095 
	`Ârötf
(
Â
, "mngtmpaddr ");

1097 i‡(
iÁ_Êags
 & 
IFA_F_NOPREFIXROUTE
) {

1098 
iÁ_Êags
 &~
IFA_F_NOPREFIXROUTE
;

1099 
	`Ârötf
(
Â
, "noprefixroute ");

1101 i‡(
iÁ_Êags
 & 
IFA_F_MCAUTOJOIN
) {

1102 
iÁ_Êags
 &~
IFA_F_MCAUTOJOIN
;

1103 
	`Ârötf
(
Â
, "autojoin ");

1105 i‡(!(
iÁ_Êags
 & 
IFA_F_PERMANENT
)) {

1106 
	`Ârötf
(
Â
, "dynamic ");

1108 
iÁ_Êags
 &~
IFA_F_PERMANENT
;

1109 i‡(
iÁ_Êags
 & 
IFA_F_DADFAILED
) {

1110 
iÁ_Êags
 &~
IFA_F_DADFAILED
;

1111 
	`Ârötf
(
Â
, "dadfailed ");

1113 i‡(
iÁ_Êags
)

1114 
	`Ârötf
(
Â
, "Êag†%02x ", 
iÁ_Êags
);

1115 i‡(
πa_tb
[
IFA_LABEL
])

1116 
	`Ârötf
(
Â
, "%s", 
	`πa_gë©å_°r
(
πa_tb
[
IFA_LABEL
]));

1117 i‡(
πa_tb
[
IFA_CACHEINFO
]) {

1118 
iÁ_ˇcheöfo
 *
ci
 = 
	`RTA_DATA
(
πa_tb
[
IFA_CACHEINFO
]);

1119 
	`Ârötf
(
Â
, "%s", 
_SL_
);

1120 
	`Ârötf
(
Â
, " valid_lft ");

1121 i‡(
ci
->
iÁ_vÆid
 =
INFINITY_LIFE_TIME
)

1122 
	`Ârötf
(
Â
, "forever");

1124 
	`Ârötf
(
Â
, "%u£c", 
ci
->
iÁ_vÆid
);

1125 
	`Ârötf
(
Â
, "Öreferred_lft ");

1126 i‡(
ci
->
iÁ_¥e„ªd
 =
INFINITY_LIFE_TIME
)

1127 
	`Ârötf
(
Â
, "forever");

1129 i‡(
dïªˇãd
)

1130 
	`Ârötf
(
Â
, "%d£c", 
ci
->
iÁ_¥e„ªd
);

1132 
	`Ârötf
(
Â
, "%u£c", 
ci
->
iÁ_¥e„ªd
);

1135 
	`Ârötf
(
Â
, "\n");

1136 
brõf_exô
:

1137 
	`fÊush
(
Â
);

1139 
	}
}

1141 
	$¥öt_addröfo_¥im¨y
(c⁄° 
sockaddr_∆
 *
who
,

1142 
∆msghdr
 *
n
, *
¨g
)

1144 
iÁddrmsg
 *
iÁ
 = 
	`NLMSG_DATA
(
n
);

1146 i‡(
iÁ
->
iÁ_Êags
 & 
IFA_F_SECONDARY
)

1149  
	`¥öt_addröfo
(
who
, 
n
, 
¨g
);

1150 
	}
}

1152 
	$¥öt_addröfo_£c⁄d¨y
(c⁄° 
sockaddr_∆
 *
who
,

1153 
∆msghdr
 *
n
, *
¨g
)

1155 
iÁddrmsg
 *
iÁ
 = 
	`NLMSG_DATA
(
n
);

1157 i‡(!(
iÁ
->
iÁ_Êags
 & 
IFA_F_SECONDARY
))

1160  
	`¥öt_addröfo
(
who
, 
n
, 
¨g
);

1161 
	}
}

1163 
	s∆msg_li°


1165 
∆msg_li°
 *
	m√xt
;

1166 
∆msghdr
 
	mh
;

1169 
	s∆msg_chaö


1171 
∆msg_li°
 *
	mhód
;

1172 
∆msg_li°
 *
	mèû
;

1175 
	$¥öt_£À˘ed_addröfo
(
iföfomsg
 *
ifi
,

1176 
∆msg_li°
 *
aöfo
, 
FILE
 *
Â
)

1178  ;
aöfo
 ;áöfÿaöfo->
√xt
) {

1179 
∆msghdr
 *
n
 = &
aöfo
->
h
;

1180 
iÁddrmsg
 *
iÁ
 = 
	`NLMSG_DATA
(
n
);

1182 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWADDR
)

1185 i‡(
n
->
∆msg_Àn
 < 
	`NLMSG_LENGTH
((
iÁ
)))

1188 i‡(
iÁ
->
iÁ_ödex
 !
ifi
->
ifi_ödex
 ||

1189 (
fûãr
.
Ámûy
 && fûãr.Ámûy !
iÁ
->
iÁ_Ámûy
))

1192 i‡(
fûãr
.
up
 && !(
ifi
->
ifi_Êags
&
IFF_UP
))

1195 
	`¥öt_addröfo
(
NULL
, 
n
, 
Â
);

1197 i‡(
brõf
) {

1198 
	`Ârötf
(
Â
, "\n");

1199 
	`fÊush
(
Â
);

1202 
	}
}

1205 
	$°‹e_∆msg
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
,

1206 *
¨g
)

1208 
∆msg_chaö
 *
lchaö
 = (∆msg_chaö *)
¨g
;

1209 
∆msg_li°
 *
h
;

1211 
h
 = 
	`mÆloc
(
n
->
∆msg_Àn
+(*));

1212 i‡(
h
 =
NULL
)

1215 
	`mem˝y
(&
h
->h, 
n
,Ç->
∆msg_Àn
);

1216 
h
->
√xt
 = 
NULL
;

1218 i‡(
lchaö
->
èû
)

1219 
lchaö
->
èû
->
√xt
 = 
h
;

1221 
lchaö
->
hód
 = 
h
;

1222 
lchaö
->
èû
 = 
h
;

1224 
	`Œ_ªmembî_ödex
(
who
, 
n
, 
NULL
);

1226 
	}
}

1228 
__u32
 
	gùadd_dump_magic
 = 0x47361222;

1230 
	$ùadd_ßve_¥ï
()

1232 
ªt
;

1234 i‡(
	`ißây
(
STDOUT_FILENO
)) {

1235 
	`Ârötf
(
°dîr
, "Not sendingá binary streamÅo stdout\n");

1239 
ªt
 = 
	`wrôe
(
STDOUT_FILENO
, &
ùadd_dump_magic
, (ipadd_dump_magic));

1240 i‡(
ªt
 !(
ùadd_dump_magic
)) {

1241 
	`Ârötf
(
°dîr
, "Can't write magicÅo dump file\n");

1246 
	}
}

1248 
	$ùadd_dump_check_magic
()

1250 
ªt
;

1251 
__u32
 
magic
 = 0;

1253 i‡(
	`ißây
(
STDIN_FILENO
)) {

1254 
	`Ârötf
(
°dîr
, "Can'tÑestoreáddress dump fromáÅerminal\n");

1258 
ªt
 = 
	`‰ód
(&
magic
, (magic), 1, 
°dö
);

1259 i‡(
magic
 !
ùadd_dump_magic
) {

1260 
	`Ârötf
(
°dîr
, "Magi¯mism©ch (%dÉÀms, %x magic)\n", 
ªt
, 
magic
);

1265 
	}
}

1267 
	$ßve_∆msg
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
,

1268 *
¨g
)

1270 
ªt
;

1272 
ªt
 = 
	`wrôe
(
STDOUT_FILENO
, 
n
,Ç->
∆msg_Àn
);

1273 i‡((
ªt
 > 0Ë&& (ªà!
n
->
∆msg_Àn
)) {

1274 
	`Ârötf
(
°dîr
, "Short write while savingÇlmsg\n");

1275 
ªt
 = -
EIO
;

1278  
ªt
 =
n
->
∆msg_Àn
 ? 0 :Ñet;

1279 
	}
}

1281 
	$show_h™dÀr
(c⁄° 
sockaddr_∆
 *
∆
,

1282 
π∆_˘æ_d©a
 *
˘æ
,

1283 
∆msghdr
 *
n
, *
¨g
)

1285 
iÁddrmsg
 *
iÁ
 = 
	`NLMSG_DATA
(
n
);

1287 
	`¥ötf
("if%d:\n", 
iÁ
->
iÁ_ödex
);

1288 
	`¥öt_addröfo
(
NULL
, 
n
, 
°dout
);

1290 
	}
}

1292 
	$ùaddr_showdump
()

1294 i‡(
	`ùadd_dump_check_magic
())

1295 
	`exô
(-1);

1297 
	`exô
(
	`π∆_‰om_fûe
(
°dö
, &
show_h™dÀr
, 
NULL
));

1298 
	}
}

1300 
	$ª°‹e_h™dÀr
(c⁄° 
sockaddr_∆
 *
∆
,

1301 
π∆_˘æ_d©a
 *
˘æ
,

1302 
∆msghdr
 *
n
, *
¨g
)

1304 
ªt
;

1306 
n
->
∆msg_Êags
 |
NLM_F_REQUEST
 | 
NLM_F_CREATE
 | 
NLM_F_ACK
;

1308 
	`Œ_öô_m≠
(&
πh
);

1310 
ªt
 = 
	`π∆_èlk
(&
πh
, 
n
,Ç, (*n));

1311 i‡((
ªt
 < 0Ë&& (
î∫o
 =
EEXIST
))

1312 
ªt
 = 0;

1314  
ªt
;

1315 
	}
}

1317 
	$ùaddr_ª°‹e
()

1319 i‡(
	`ùadd_dump_check_magic
())

1320 
	`exô
(-1);

1322 
	`exô
(
	`π∆_‰om_fûe
(
°dö
, &
ª°‹e_h™dÀr
, 
NULL
));

1323 
	}
}

1325 
	$‰ì_∆msg_chaö
(
∆msg_chaö
 *
öfo
)

1327 
∆msg_li°
 *
l
, *
n
;

1329 
l
 = 
öfo
->
hód
;Ü;Ü = 
n
) {

1330 
n
 = 
l
->
√xt
;

1331 
	`‰ì
(
l
);

1333 
	}
}

1335 
	$ùaddr_fûãr
(
∆msg_chaö
 *
löfo
, ∆msg_chaö *
aöfo
)

1337 
∆msg_li°
 *
l
, **
Õ
;

1339 
Õ
 = &
löfo
->
hód
;

1340  (
l
 = *
Õ
Ë!
NULL
) {

1341 
ok
 = 0;

1342 
missög_√t_addªss
 = 1;

1343 
iföfomsg
 *
ifi
 = 
	`NLMSG_DATA
(&
l
->
h
);

1344 
∆msg_li°
 *
a
;

1346 
a
 = 
aöfo
->
hód
;á;á =á->
√xt
) {

1347 
∆msghdr
 *
n
 = &
a
->
h
;

1348 
iÁddrmsg
 *
iÁ
 = 
	`NLMSG_DATA
(
n
);

1349 
π©å
 *
tb
[
IFA_MAX
 + 1];

1350 
iÁ_Êags
;

1352 i‡(
iÁ
->
iÁ_ödex
 !
ifi
->
ifi_ödex
)

1354 
missög_√t_addªss
 = 0;

1355 i‡(
fûãr
.
Ámûy
 && fûãr.Ámûy !
iÁ
->
iÁ_Ámûy
)

1357 i‡((
fûãr
.
sc›e
^
iÁ
->
iÁ_sc›e
)&fûãr.
sc›emask
)

1360 
	`∑r£_π©å
(
tb
, 
IFA_MAX
, 
	`IFA_RTA
(
iÁ
), 
	`IFA_PAYLOAD
(
n
));

1361 
iÁ_Êags
 = 
	`gë_iÁ_Êags
(
iÁ
, 
tb
[
IFA_FLAGS
]);

1363 i‡((
fûãr
.
Êags
 ^ 
iÁ_Êags
Ë& fûãr.
Êagmask
)

1365 i‡(
fûãr
.
pfx
.
Ámûy
 || fûãr.
œbñ
) {

1366 i‡(!
tb
[
IFA_LOCAL
])

1367 
tb
[
IFA_LOCAL
] =Åb[
IFA_ADDRESS
];

1369 i‡(
fûãr
.
pfx
.
Ámûy
 && 
tb
[
IFA_LOCAL
]) {

1370 
öë_¥efix
 
d°
;

1371 
	`mem£t
(&
d°
, 0, (dst));

1372 
d°
.
Ámûy
 = 
iÁ
->
iÁ_Ámûy
;

1373 
	`mem˝y
(&
d°
.
d©a
, 
	`RTA_DATA
(
tb
[
IFA_LOCAL
]), 
	`RTA_PAYLOAD
(tb[IFA_LOCAL]));

1374 i‡(
	`öë_addr_m©ch
(&
d°
, &
fûãr
.
pfx
, fûãr.pfx.
bôÀn
))

1377 i‡(
fûãr
.
œbñ
) {

1378 
	`SPRINT_BUF
(
b1
);

1379 c⁄° *
œbñ
;

1380 i‡(
tb
[
IFA_LABEL
])

1381 
œbñ
 = 
	`RTA_DATA
(
tb
[
IFA_LABEL
]);

1383 
œbñ
 = 
	`Œ_idx_n2a
(
iÁ
->
iÁ_ödex
, 
b1
);

1384 i‡(
	`‚m©ch
(
fûãr
.
œbñ
,Üabel, 0) != 0)

1389 
ok
 = 1;

1392 i‡(
missög_√t_addªss
 &&

1393 (
fûãr
.
Ámûy
 =
AF_UNSPEC
 || fûãr.Ámûy =
AF_PACKET
))

1394 
ok
 = 1;

1395 i‡(!
ok
) {

1396 *
Õ
 = 
l
->
√xt
;

1397 
	`‰ì
(
l
);

1399 
Õ
 = &
l
->
√xt
;

1401 
	}
}

1403 
	$ùaddr_Êush
()

1405 
round
 = 0;

1406 
Êushb
[4096-512];

1408 
fûãr
.
Êushb
 = flushb;

1409 
fûãr
.
Êushp
 = 0;

1410 
fûãr
.
Êushe
 = (
Êushb
);

1412 (
max_Êush_lo›s
 =0Ë|| (
round
 < max_flush_loops)) {

1413 c⁄° 
π∆_dump_fûãr_¨g
 
a
[3] = {

1415 .
fûãr
 = 
¥öt_addröfo_£c⁄d¨y
,

1416 .
¨g1
 = 
°dout
,

1419 .
fûãr
 = 
¥öt_addröfo_¥im¨y
,

1420 .
¨g1
 = 
°dout
,

1423 .
fûãr
 = 
NULL
,

1424 .
¨g1
 = 
NULL
,

1427 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
fûãr
.
Ámûy
, 
RTM_GETADDR
) < 0) {

1428 
	`≥º‹
("Cannot send dumpÑequest");

1429 
	`exô
(1);

1431 
fûãr
.
Êushed
 = 0;

1432 i‡(
	`π∆_dump_fûãr_l
(&
πh
, 
a
) < 0) {

1433 
	`Ârötf
(
°dîr
, "FlushÅerminated\n");

1434 
	`exô
(1);

1436 i‡(
fûãr
.
Êushed
 == 0) {

1437 
Êush_d⁄e
:

1438 i‡(
show_°©s
) {

1439 i‡(
round
 == 0)

1440 
	`¥ötf
("NothingÅo flush.\n");

1442 
	`¥ötf
("*** Flush i†com∂ëêa·î %dÑound%†***\n", 
round
,Ñound>1?"s":"");

1444 
	`fÊush
(
°dout
);

1447 
round
++;

1448 i‡(
	`Êush_upd©e
() < 0)

1451 i‡(
show_°©s
) {

1452 
	`¥ötf
("\n*** Round %d, dñëög %dáddªs£†***\n", 
round
, 
fûãr
.
Êushed
);

1453 
	`fÊush
(
°dout
);

1461 i‡(!(
fûãr
.
Êags
 & 
IFA_F_SECONDARY
Ë&& (fûãr.
Êagmask
 & IFA_F_SECONDARY))

1462 
Êush_d⁄e
;

1464 
	`Ârötf
(
°dîr
, "*** FlushÑemaö†öcom∂ëêa·î %dÑounds. ***\n", 
max_Êush_lo›s
);

1465 
	`fÊush
(
°dîr
);

1467 
	}
}

1469 
	$ùaddr_li°_Êush_‹_ßve
(
¨gc
, **
¨gv
, 
a˘i⁄
)

1471 
∆msg_chaö
 
löfo
 = { 
NULL
, NULL};

1472 
∆msg_chaö
 
aöfo
 = { 
NULL
, NULL};

1473 
∆msg_li°
 *
l
;

1474 *
fûãr_dev
 = 
NULL
;

1475 
no_lök
 = 0;

1477 
	`ùaddr_ª£t_fûãr
(
⁄ñöe
, 0);

1478 
fûãr
.
showqueue
 = 1;

1480 i‡(
fûãr
.
Ámûy
 =
AF_UNSPEC
)

1481 
fûãr
.
Ámûy
 = 
¥e„ºed_Ámûy
;

1483 
fûãr
.
group
 = -1;

1485 i‡(
a˘i⁄
 =
IPADD_FLUSH
) {

1486 i‡(
¨gc
 <= 0) {

1487 
	`Ârötf
(
°dîr
, "FlushÑequiresárguments.\n");

1491 i‡(
fûãr
.
Ámûy
 =
AF_PACKET
) {

1492 
	`Ârötf
(
°dîr
, "Cannot flushÜinkáddresses.\n");

1497 
¨gc
 > 0) {

1498 i‡(
	`°rcmp
(*
¨gv
, "to") == 0) {

1499 
	`NEXT_ARG
();

1500 
	`gë_¥efix
(&
fûãr
.
pfx
, *
¨gv
, fûãr.
Ámûy
);

1501 i‡(
fûãr
.
Ámûy
 =
AF_UNSPEC
)

1502 
fûãr
.
Ámûy
 = fûãr.
pfx
.family;

1503 } i‡(
	`°rcmp
(*
¨gv
, "scope") == 0) {

1504 
sc›e
 = 0;

1505 
	`NEXT_ARG
();

1506 
fûãr
.
sc›emask
 = -1;

1507 i‡(
	`π∆_πsc›e_a2n
(&
sc›e
, *
¨gv
)) {

1508 i‡(
	`°rcmp
(*
¨gv
, "all") != 0)

1509 
	`öv¨g
("övÆid \"sc›e\"\n", *
¨gv
);

1510 
sc›e
 = 
RT_SCOPE_NOWHERE
;

1511 
fûãr
.
sc›emask
 = 0;

1513 
fûãr
.
sc›e
 = scope;

1514 } i‡(
	`°rcmp
(*
¨gv
, "up") == 0) {

1515 
fûãr
.
up
 = 1;

1516 } i‡(
	`°rcmp
(*
¨gv
, "dynamic") == 0) {

1517 
fûãr
.
Êags
 &~
IFA_F_PERMANENT
;

1518 
fûãr
.
Êagmask
 |
IFA_F_PERMANENT
;

1519 } i‡(
	`°rcmp
(*
¨gv
, "permanent") == 0) {

1520 
fûãr
.
Êags
 |
IFA_F_PERMANENT
;

1521 
fûãr
.
Êagmask
 |
IFA_F_PERMANENT
;

1522 } i‡(
	`°rcmp
(*
¨gv
, "secondary") == 0 ||

1523 
	`°rcmp
(*
¨gv
, "temporary") == 0) {

1524 
fûãr
.
Êags
 |
IFA_F_SECONDARY
;

1525 
fûãr
.
Êagmask
 |
IFA_F_SECONDARY
;

1526 } i‡(
	`°rcmp
(*
¨gv
, "primary") == 0) {

1527 
fûãr
.
Êags
 &~
IFA_F_SECONDARY
;

1528 
fûãr
.
Êagmask
 |
IFA_F_SECONDARY
;

1529 } i‡(
	`°rcmp
(*
¨gv
, "tentative") == 0) {

1530 
fûãr
.
Êags
 |
IFA_F_TENTATIVE
;

1531 
fûãr
.
Êagmask
 |
IFA_F_TENTATIVE
;

1532 } i‡(
	`°rcmp
(*
¨gv
, "-tentative") == 0) {

1533 
fûãr
.
Êags
 &~
IFA_F_TENTATIVE
;

1534 
fûãr
.
Êagmask
 |
IFA_F_TENTATIVE
;

1535 } i‡(
	`°rcmp
(*
¨gv
, "deprecated") == 0) {

1536 
fûãr
.
Êags
 |
IFA_F_DEPRECATED
;

1537 
fûãr
.
Êagmask
 |
IFA_F_DEPRECATED
;

1538 } i‡(
	`°rcmp
(*
¨gv
, "-deprecated") == 0) {

1539 
fûãr
.
Êags
 &~
IFA_F_DEPRECATED
;

1540 
fûãr
.
Êagmask
 |
IFA_F_DEPRECATED
;

1541 } i‡(
	`°rcmp
(*
¨gv
, "home") == 0) {

1542 
fûãr
.
Êags
 |
IFA_F_HOMEADDRESS
;

1543 
fûãr
.
Êagmask
 |
IFA_F_HOMEADDRESS
;

1544 } i‡(
	`°rcmp
(*
¨gv
, "nodad") == 0) {

1545 
fûãr
.
Êags
 |
IFA_F_NODAD
;

1546 
fûãr
.
Êagmask
 |
IFA_F_NODAD
;

1547 } i‡(
	`°rcmp
(*
¨gv
, "mngtmpaddr") == 0) {

1548 
fûãr
.
Êags
 |
IFA_F_MANAGETEMPADDR
;

1549 
fûãr
.
Êagmask
 |
IFA_F_MANAGETEMPADDR
;

1550 } i‡(
	`°rcmp
(*
¨gv
, "noprefixroute") == 0) {

1551 
fûãr
.
Êags
 |
IFA_F_NOPREFIXROUTE
;

1552 
fûãr
.
Êagmask
 |
IFA_F_NOPREFIXROUTE
;

1553 } i‡(
	`°rcmp
(*
¨gv
, "autojoin") == 0) {

1554 
fûãr
.
Êags
 |
IFA_F_MCAUTOJOIN
;

1555 
fûãr
.
Êagmask
 |
IFA_F_MCAUTOJOIN
;

1556 } i‡(
	`°rcmp
(*
¨gv
, "dadfailed") == 0) {

1557 
fûãr
.
Êags
 |
IFA_F_DADFAILED
;

1558 
fûãr
.
Êagmask
 |
IFA_F_DADFAILED
;

1559 } i‡(
	`°rcmp
(*
¨gv
, "-dadfailed") == 0) {

1560 
fûãr
.
Êags
 &~
IFA_F_DADFAILED
;

1561 
fûãr
.
Êagmask
 |
IFA_F_DADFAILED
;

1562 } i‡(
	`°rcmp
(*
¨gv
, "label") == 0) {

1563 
	`NEXT_ARG
();

1564 
fûãr
.
œbñ
 = *
¨gv
;

1565 } i‡(
	`°rcmp
(*
¨gv
, "group") == 0) {

1566 
	`NEXT_ARG
();

1567 i‡(
	`π∆_group_a2n
(&
fûãr
.
group
, *
¨gv
))

1568 
	`öv¨g
("InvÆid \"group\" vÆue\n", *
¨gv
);

1569 } i‡(
	`°rcmp
(*
¨gv
, "master") == 0) {

1570 
ifödex
;

1571 
	`NEXT_ARG
();

1572 
ifödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
);

1573 i‡(!
ifödex
)

1574 
	`öv¨g
("Devi˚ d€†nŸÉxi°\n", *
¨gv
);

1575 
fûãr
.
ma°î
 = 
ifödex
;

1576 } i‡(
do_lök
 && 
	`°rcmp
(*
¨gv
, "type") == 0) {

1577 
	`NEXT_ARG
();

1578 
fûãr
.
köd
 = *
¨gv
;

1580 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

1581 
	`NEXT_ARG
();

1583 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

1584 
	`ußge
();

1585 i‡(
fûãr_dev
)

1586 
	`du∑rg2
("dev", *
¨gv
);

1587 
fûãr_dev
 = *
¨gv
;

1589 
¨gv
++; 
¨gc
--;

1592 i‡(
fûãr_dev
) {

1593 
fûãr
.
ifödex
 = 
	`Œ_«me_to_ödex
(
fûãr_dev
);

1594 i‡(
fûãr
.
ifödex
 <= 0) {

1595 
	`Ârötf
(
°dîr
, "Devi˚ \"%s\" d€†nŸÉxi°.\n", 
fûãr_dev
);

1600 i‡(
a˘i⁄
 =
IPADD_FLUSH
)

1601  
	`ùaddr_Êush
();

1603 i‡(
a˘i⁄
 =
IPADD_SAVE
) {

1604 i‡(
	`ùadd_ßve_¥ï
())

1605 
	`exô
(1);

1607 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
¥e„ºed_Ámûy
, 
RTM_GETADDR
) < 0) {

1608 
	`≥º‹
("Cannot send dumpÑequest");

1609 
	`exô
(1);

1612 i‡(
	`π∆_dump_fûãr
(&
πh
, 
ßve_∆msg
, 
°dout
) < 0) {

1613 
	`Ârötf
(
°dîr
, "SaveÅerminated\n");

1614 
	`exô
(1);

1617 
	`exô
(0);

1625 i‡(
fûãr_dev
 && 
fûãr
.
group
 =-1 && 
do_lök
 == 1) {

1626 i‡(
	`ùlök_gë
(0, 
fûãr_dev
, 
RTEXT_FILTER_VF
) < 0) {

1627 
	`≥º‹
("Cannot sendÜink getÑequest");

1628 
	`exô
(1);

1630 
	`exô
(0);

1633 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
¥e„ºed_Ámûy
, 
RTM_GETLINK
) < 0) {

1634 
	`≥º‹
("Cannot send dumpÑequest");

1635 
	`exô
(1);

1638 i‡(
	`π∆_dump_fûãr
(&
πh
, 
°‹e_∆msg
, &
löfo
) < 0) {

1639 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

1640 
	`exô
(1);

1643 i‡(
fûãr
.
Ámûy
 !
AF_PACKET
) {

1644 i‡(
fûãr
.
⁄ñöe
)

1645 
no_lök
 = 1;

1647 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
fûãr
.
Ámûy
, 
RTM_GETADDR
) < 0) {

1648 
	`≥º‹
("Cannot send dumpÑequest");

1649 
	`exô
(1);

1652 i‡(
	`π∆_dump_fûãr
(&
πh
, 
°‹e_∆msg
, &
aöfo
) < 0) {

1653 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

1654 
	`exô
(1);

1657 
	`ùaddr_fûãr
(&
löfo
, &
aöfo
);

1660 
l
 = 
löfo
.
hód
;Ü;Ü =Ü->
√xt
) {

1661 
ªs
 = 0;

1662 
iföfomsg
 *
ifi
 = 
	`NLMSG_DATA
(&
l
->
h
);

1664 i‡(
brõf
) {

1665 i‡(
	`¥öt_lököfo_brõf
(
NULL
, &
l
->
h
, 
°dout
) == 0)

1666 i‡(
fûãr
.
Ámûy
 !
AF_PACKET
)

1667 
	`¥öt_£À˘ed_addröfo
(
ifi
,

1668 
aöfo
.
hód
,

1669 
°dout
);

1670 } i‡(
no_lök
 ||

1671 (
ªs
 = 
	`¥öt_lököfo
(
NULL
, &
l
->
h
, 
°dout
)) >= 0) {

1672 i‡(
fûãr
.
Ámûy
 !
AF_PACKET
)

1673 
	`¥öt_£À˘ed_addröfo
(
ifi
,

1674 
aöfo
.
hód
, 
°dout
);

1675 i‡(
ªs
 > 0 && !
do_lök
 && 
show_°©s
)

1676 
	`¥öt_lök_°©s
(
°dout
, &
l
->
h
);

1679 
	`fÊush
(
°dout
);

1681 
	`‰ì_∆msg_chaö
(&
aöfo
);

1682 
	`‰ì_∆msg_chaö
(&
löfo
);

1685 
	}
}

1688 
	$ùaddr_lo›_óch_vf
(
π©å
 *
tb
[], 
v‚um
, *
mö
, *
max
)

1690 
π©å
 *
vÊi°
 = 
tb
[
IFLA_VFINFO_LIST
];

1691 
π©å
 *
i
, *
vf
[
IFLA_VF_MAX
+1];

1692 
iÊa_vf_øã
 *
vf_øã
;

1693 
ªm
;

1695 
ªm
 = 
	`RTA_PAYLOAD
(
vÊi°
);

1697 
i
 = 
	`RTA_DATA
(
vÊi°
); 
	`RTA_OK
(i, 
ªm
); i = 
	`RTA_NEXT
(i,Ñem)) {

1698 
	`∑r£_π©å_√°ed
(
vf
, 
IFLA_VF_MAX
, 
i
);

1699 
vf_øã
 = 
	`RTA_DATA
(
vf
[
IFLA_VF_RATE
]);

1700 i‡(
vf_øã
->
vf
 =
v‚um
) {

1701 *
mö
 = 
vf_øã
->
mö_tx_øã
;

1702 *
max
 = 
vf_øã
->
max_tx_øã
;

1706 
	`Ârötf
(
°dîr
, "C™nŸ föd VF %d\n", 
v‚um
);

1707 
	`exô
(1);

1708 
	}
}

1710 
	$ùaddr_gë_vf_øã
(
v‚um
, *
mö
, *
max
, 
idx
)

1712 
∆msg_chaö
 
löfo
 = { 
NULL
, NULL};

1713 
π©å
 *
tb
[
IFLA_MAX
+1];

1714 
iföfomsg
 *
ifi
;

1715 
∆msg_li°
 *
l
;

1716 
∆msghdr
 *
n
;

1717 
Àn
;

1719 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
AF_UNSPEC
, 
RTM_GETLINK
) < 0) {

1720 
	`≥º‹
("Cannot send dumpÑequest");

1721 
	`exô
(1);

1723 i‡(
	`π∆_dump_fûãr
(&
πh
, 
°‹e_∆msg
, &
löfo
) < 0) {

1724 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

1725 
	`exô
(1);

1727 
l
 = 
löfo
.
hód
;Ü;Ü =Ü->
√xt
) {

1728 
n
 = &
l
->
h
;

1729 
ifi
 = 
	`NLMSG_DATA
(
n
);

1731 
Àn
 = 
n
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
ifi
));

1732 i‡(
Àn
 < 0 || (
idx
 && idx !
ifi
->
ifi_ödex
))

1735 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(
ifi
), 
Àn
);

1737 i‡((
tb
[
IFLA_VFINFO_LIST
] &&Åb[
IFLA_NUM_VF
])) {

1738 
	`ùaddr_lo›_óch_vf
(
tb
, 
v‚um
, 
mö
, 
max
);

1742 
	}
}

1744 
	$ùaddr_li°_lök
(
¨gc
, **
¨gv
)

1746 
¥e„ºed_Ámûy
 = 
AF_PACKET
;

1747 
do_lök
 = 1;

1748  
	`ùaddr_li°_Êush_‹_ßve
(
¨gc
, 
¨gv
, 
IPADD_LIST
);

1749 
	}
}

1751 
	$ùaddr_ª£t_fûãr
(
⁄ñöe
, 
ifödex
)

1753 
	`mem£t
(&
fûãr
, 0, (filter));

1754 
fûãr
.
⁄ñöe
 = oneline;

1755 
fûãr
.
ifödex
 = ifindex;

1756 
	}
}

1758 
	$deÁu…_sc›e
(
öë_¥efix
 *
l˛
)

1760 i‡(
l˛
->
Ámûy
 =
AF_INET
) {

1761 i‡(
l˛
->
byãÀn
 >1 && *(
__u8
*)&l˛->
d©a
 == 127)

1762  
RT_SCOPE_HOST
;

1765 
	}
}

1767 
boﬁ
 
	$ùaddr_is_mu…iˇ°
(
öë_¥efix
 *
a
)

1769 i‡(
a
->
Ámûy
 =
AF_INET
)

1770  
	`IN_MULTICAST
(
	`¡ohl
(
a
->
d©a
[0]));

1771 i‡(
a
->
Ámûy
 =
AF_INET6
)

1772  
	`IN6_IS_ADDR_MULTICAST
(
a
->
d©a
);

1774  
Ál£
;

1775 
	}
}

1777 
	$ùaddr_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

1780 
∆msghdr
 
n
;

1781 
iÁddrmsg
 
iÁ
;

1782 
buf
[256];

1783 } 
ªq
;

1784 *
d
 = 
NULL
;

1785 *
l
 = 
NULL
;

1786 *
l˛_¨g
 = 
NULL
;

1787 *
vÆid_l·p
 = 
NULL
;

1788 *
¥e„ºed_l·p
 = 
NULL
;

1789 
öë_¥efix
 
l˛
;

1790 
öë_¥efix
 
≥î
;

1791 
loˇl_Àn
 = 0;

1792 
≥î_Àn
 = 0;

1793 
brd_Àn
 = 0;

1794 
™y_Àn
 = 0;

1795 
sc›ed
 = 0;

1796 
__u32
 
¥e„ºed_l·
 = 
INFINITY_LIFE_TIME
;

1797 
__u32
 
vÆid_l·
 = 
INFINITY_LIFE_TIME
;

1798 
iÁ_ˇcheöfo
 
cöfo
;

1799 
iÁ_Êags
 = 0;

1801 
	`mem£t
(&
ªq
, 0, (req));

1803 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iÁddrmsg
));

1804 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
Êags
;

1805 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

1806 
ªq
.
iÁ
.
iÁ_Ámûy
 = 
¥e„ºed_Ámûy
;

1808 
¨gc
 > 0) {

1809 i‡(
	`°rcmp
(*
¨gv
, "peer") == 0 ||

1810 
	`°rcmp
(*
¨gv
, "remote") == 0) {

1811 
	`NEXT_ARG
();

1813 i‡(
≥î_Àn
)

1814 
	`du∑rg
("≥î", *
¨gv
);

1815 
	`gë_¥efix
(&
≥î
, *
¨gv
, 
ªq
.
iÁ
.
iÁ_Ámûy
);

1816 
≥î_Àn
 = 
≥î
.
byãÀn
;

1817 i‡(
ªq
.
iÁ
.
iÁ_Ámûy
 =
AF_UNSPEC
)

1818 
ªq
.
iÁ
.
iÁ_Ámûy
 = 
≥î
.
Ámûy
;

1819 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFA_ADDRESS
, &
≥î
.
d©a
,Öìr.
byãÀn
);

1820 
ªq
.
iÁ
.
iÁ_¥efixÀn
 = 
≥î
.
bôÀn
;

1821 } i‡(
	`m©ches
(*
¨gv
, "broadcast") == 0 ||

1822 
	`°rcmp
(*
¨gv
, "brd") == 0) {

1823 
öë_¥efix
 
addr
;

1824 
	`NEXT_ARG
();

1825 i‡(
brd_Àn
)

1826 
	`du∑rg
("brﬂdˇ°", *
¨gv
);

1827 i‡(
	`°rcmp
(*
¨gv
, "+") == 0)

1828 
brd_Àn
 = -1;

1829 i‡(
	`°rcmp
(*
¨gv
, "-") == 0)

1830 
brd_Àn
 = -2;

1832 
	`gë_addr
(&
addr
, *
¨gv
, 
ªq
.
iÁ
.
iÁ_Ámûy
);

1833 i‡(
ªq
.
iÁ
.
iÁ_Ámûy
 =
AF_UNSPEC
)

1834 
ªq
.
iÁ
.
iÁ_Ámûy
 = 
addr
.
Ámûy
;

1835 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFA_BROADCAST
, &
addr
.
d©a
,áddr.
byãÀn
);

1836 
brd_Àn
 = 
addr
.
byãÀn
;

1838 } i‡(
	`°rcmp
(*
¨gv
, "anycast") == 0) {

1839 
öë_¥efix
 
addr
;

1840 
	`NEXT_ARG
();

1841 i‡(
™y_Àn
)

1842 
	`du∑rg
("™yˇ°", *
¨gv
);

1843 
	`gë_addr
(&
addr
, *
¨gv
, 
ªq
.
iÁ
.
iÁ_Ámûy
);

1844 i‡(
ªq
.
iÁ
.
iÁ_Ámûy
 =
AF_UNSPEC
)

1845 
ªq
.
iÁ
.
iÁ_Ámûy
 = 
addr
.
Ámûy
;

1846 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFA_ANYCAST
, &
addr
.
d©a
,áddr.
byãÀn
);

1847 
™y_Àn
 = 
addr
.
byãÀn
;

1848 } i‡(
	`°rcmp
(*
¨gv
, "scope") == 0) {

1849 
sc›e
 = 0;

1850 
	`NEXT_ARG
();

1851 i‡(
	`π∆_πsc›e_a2n
(&
sc›e
, *
¨gv
))

1852 
	`öv¨g
("övÆid sc›êvÆue.", *
¨gv
);

1853 
ªq
.
iÁ
.
iÁ_sc›e
 = 
sc›e
;

1854 
sc›ed
 = 1;

1855 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

1856 
	`NEXT_ARG
();

1857 
d
 = *
¨gv
;

1858 } i‡(
	`°rcmp
(*
¨gv
, "label") == 0) {

1859 
	`NEXT_ARG
();

1860 
l
 = *
¨gv
;

1861 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFA_LABEL
, 
l
, 
	`°æí
(l)+1);

1862 } i‡(
	`m©ches
(*
¨gv
, "valid_lft") == 0) {

1863 i‡(
vÆid_l·p
)

1864 
	`du∑rg
("vÆid_l·", *
¨gv
);

1865 
	`NEXT_ARG
();

1866 
vÆid_l·p
 = *
¨gv
;

1867 i‡(
	`£t_li„time
(&
vÆid_l·
, *
¨gv
))

1868 
	`öv¨g
("vÆid_l· vÆue", *
¨gv
);

1869 } i‡(
	`m©ches
(*
¨gv
, "preferred_lft") == 0) {

1870 i‡(
¥e„ºed_l·p
)

1871 
	`du∑rg
("¥e„ºed_l·", *
¨gv
);

1872 
	`NEXT_ARG
();

1873 
¥e„ºed_l·p
 = *
¨gv
;

1874 i‡(
	`£t_li„time
(&
¥e„ºed_l·
, *
¨gv
))

1875 
	`öv¨g
("¥e„ºed_l· vÆue", *
¨gv
);

1876 } i‡(
	`°rcmp
(*
¨gv
, "home") == 0) {

1877 
iÁ_Êags
 |
IFA_F_HOMEADDRESS
;

1878 } i‡(
	`°rcmp
(*
¨gv
, "nodad") == 0) {

1879 
iÁ_Êags
 |
IFA_F_NODAD
;

1880 } i‡(
	`°rcmp
(*
¨gv
, "mngtmpaddr") == 0) {

1881 
iÁ_Êags
 |
IFA_F_MANAGETEMPADDR
;

1882 } i‡(
	`°rcmp
(*
¨gv
, "noprefixroute") == 0) {

1883 
iÁ_Êags
 |
IFA_F_NOPREFIXROUTE
;

1884 } i‡(
	`°rcmp
(*
¨gv
, "autojoin") == 0) {

1885 
iÁ_Êags
 |
IFA_F_MCAUTOJOIN
;

1887 i‡(
	`°rcmp
(*
¨gv
, "local") == 0) {

1888 
	`NEXT_ARG
();

1890 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

1891 
	`ußge
();

1892 i‡(
loˇl_Àn
)

1893 
	`du∑rg2
("loˇl", *
¨gv
);

1894 
l˛_¨g
 = *
¨gv
;

1895 
	`gë_¥efix
(&
l˛
, *
¨gv
, 
ªq
.
iÁ
.
iÁ_Ámûy
);

1896 i‡(
ªq
.
iÁ
.
iÁ_Ámûy
 =
AF_UNSPEC
)

1897 
ªq
.
iÁ
.
iÁ_Ámûy
 = 
l˛
.
Ámûy
;

1898 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFA_LOCAL
, &
l˛
.
d©a
,Ü˛.
byãÀn
);

1899 
loˇl_Àn
 = 
l˛
.
byãÀn
;

1901 
¨gc
--; 
¨gv
++;

1903 i‡(
iÁ_Êags
 <= 0xff)

1904 
ªq
.
iÁ
.
iÁ_Êags
 = ifa_flags;

1906 
	`add©å32
(&
ªq
.
n
, ‘eq), 
IFA_FLAGS
, 
iÁ_Êags
);

1908 i‡(
d
 =
NULL
) {

1909 
	`Ârötf
(
°dîr
, "NotÉnough information: \"dev\"árgument isÑequired.\n");

1912 i‡(
l
 && 
	`m©ches
(
d
,Ü) != 0) {

1913 
	`Ârötf
(
°dîr
, "\"dev\" (%sËmu° m©ch \"œbñ\" (%s).\n", 
d
, 
l
);

1917 i‡(
≥î_Àn
 =0 && 
loˇl_Àn
) {

1918 i‡(
cmd
 =
RTM_DELADDR
 && 
l˛
.
Ámûy
 =
AF_INET
 && !÷˛.
Êags
 & 
PREFIXLEN_SPECIFIED
)) {

1919 
	`Ârötf
(
°dîr
,

1923 " fix you∏s¸ùts!\n", 
l˛_¨g
, 
loˇl_Àn
*8);

1925 
≥î
 = 
l˛
;

1926 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFA_ADDRESS
, &
l˛
.
d©a
,Ü˛.
byãÀn
);

1929 i‡(
ªq
.
iÁ
.
iÁ_¥efixÀn
 == 0)

1930 
ªq
.
iÁ
.
iÁ_¥efixÀn
 = 
l˛
.
bôÀn
;

1932 i‡(
brd_Àn
 < 0 && 
cmd
 !
RTM_DELADDR
) {

1933 
öë_¥efix
 
brd
;

1934 
i
;

1935 i‡(
ªq
.
iÁ
.
iÁ_Ámûy
 !
AF_INET
) {

1936 
	`Ârötf
(
°dîr
, "Broadcast can be set only for IPv4áddresses\n");

1939 
brd
 = 
≥î
;

1940 i‡(
brd
.
bôÀn
 <= 30) {

1941 
i
 = 31; i >
brd
.
bôÀn
; i--) {

1942 i‡(
brd_Àn
 == -1)

1943 
brd
.
d©a
[0] |
	`ht⁄l
(1<<(31-
i
));

1945 
brd
.
d©a
[0] &~
	`ht⁄l
(1<<(31-
i
));

1947 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFA_BROADCAST
, &
brd
.
d©a
, brd.
byãÀn
);

1948 
brd_Àn
 = 
brd
.
byãÀn
;

1951 i‡(!
sc›ed
 && 
cmd
 !
RTM_DELADDR
)

1952 
ªq
.
iÁ
.
iÁ_sc›e
 = 
	`deÁu…_sc›e
(&
l˛
);

1954 i‡((
ªq
.
iÁ
.
iÁ_ödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

1955 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

1959 i‡(
vÆid_l·p
 || 
¥e„ºed_l·p
) {

1960 i‡(!
vÆid_l·
) {

1961 
	`Ârötf
(
°dîr
, "valid_lft is zero\n");

1964 i‡(
vÆid_l·
 < 
¥e„ºed_l·
) {

1965 
	`Ârötf
(
°dîr
, "preferred_lft is greaterÅhan valid_lft\n");

1969 
	`mem£t
(&
cöfo
, 0, (cinfo));

1970 
cöfo
.
iÁ_¥e„ªd
 = 
¥e„ºed_l·
;

1971 
cöfo
.
iÁ_vÆid
 = 
vÆid_l·
;

1972 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFA_CACHEINFO
, &
cöfo
,

1973 (
cöfo
));

1976 i‡((
iÁ_Êags
 & 
IFA_F_MCAUTOJOIN
Ë&& !
	`ùaddr_is_mu…iˇ°
(&
l˛
)) {

1977 
	`Ârötf
(
°dîr
, "autojoinÇeeds multicastáddress\n");

1981 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

1985 
	}
}

1987 
	$do_ùaddr
(
¨gc
, **
¨gv
)

1989 i‡(
¨gc
 < 1)

1990  
	`ùaddr_li°_Êush_‹_ßve
(0, 
NULL
, 
IPADD_LIST
);

1991 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

1992  
	`ùaddr_modify
(
RTM_NEWADDR
, 
NLM_F_CREATE
|
NLM_F_EXCL
, 
¨gc
-1, 
¨gv
+1);

1993 i‡(
	`m©ches
(*
¨gv
, "change") == 0 ||

1994 
	`°rcmp
(*
¨gv
, "chg") == 0)

1995  
	`ùaddr_modify
(
RTM_NEWADDR
, 
NLM_F_REPLACE
, 
¨gc
-1, 
¨gv
+1);

1996 i‡(
	`m©ches
(*
¨gv
, "replace") == 0)

1997  
	`ùaddr_modify
(
RTM_NEWADDR
, 
NLM_F_CREATE
|
NLM_F_REPLACE
, 
¨gc
-1, 
¨gv
+1);

1998 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

1999  
	`ùaddr_modify
(
RTM_DELADDR
, 0, 
¨gc
-1, 
¨gv
+1);

2000 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

2001 || 
	`m©ches
(*
¨gv
, "lst") == 0)

2002  
	`ùaddr_li°_Êush_‹_ßve
(
¨gc
-1, 
¨gv
+1, 
IPADD_LIST
);

2003 i‡(
	`m©ches
(*
¨gv
, "flush") == 0)

2004  
	`ùaddr_li°_Êush_‹_ßve
(
¨gc
-1, 
¨gv
+1, 
IPADD_FLUSH
);

2005 i‡(
	`m©ches
(*
¨gv
, "save") == 0)

2006  
	`ùaddr_li°_Êush_‹_ßve
(
¨gc
-1, 
¨gv
+1, 
IPADD_SAVE
);

2007 i‡(
	`m©ches
(*
¨gv
, "showdump") == 0)

2008  
	`ùaddr_showdump
();

2009 i‡(
	`m©ches
(*
¨gv
, "restore") == 0)

2010  
	`ùaddr_ª°‹e
();

2011 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

2012 
	`ußge
();

2013 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ùáddªs†hñp\".\n", *
¨gv
);

2014 
	`exô
(-1);

2015 
	}
}

	@ip/ipaddrlabel.c

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<uni°d.h
>

29 
	~<sy¶og.h
>

30 
	~<f˙é.h
>

31 
	~<sys/sockë.h
>

32 
	~<√töë/ö.h
>

33 
	~<√töë/ù.h
>

34 
	~<¨∑/öë.h
>

35 
	~<°rög.h
>

36 
	~<löux/ty≥s.h
>

37 
	~<löux/if_addæabñ.h
>

39 
	~"π_«mes.h
"

40 
	~"utûs.h
"

41 
	~"ù_comm⁄.h
"

43 
	#IFAL_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddæblmsg
))))

	)

44 
	#IFAL_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddæblmsg
))

	)

46 
π∆_h™dÀ
 
πh
;

48 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

50 
	$ußge
()

52 
	`Ârötf
(
°dîr
, "Usage: ipáddrlabel [Üist |ádd | del | flush ]Örefix PREFIX [ dev DEV ] [Üabel LABEL ]\n");

53 
	`exô
(-1);

54 
	}
}

56 
	$¥öt_addæabñ
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

58 
FILE
 *
Â
 = (FILE*)
¨g
;

59 
iÁddæblmsg
 *
iÁl
 = 
	`NLMSG_DATA
(
n
);

60 
Àn
 = 
n
->
∆msg_Àn
;

61 
π©å
 *
tb
[
IFAL_MAX
+1];

62 
abuf
[256];

64 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWADDRLABEL
 &&Ç->∆msg_ty≥ !
RTM_DELADDRLABEL
)

67 
Àn
 -
	`NLMSG_LENGTH
((*
iÁl
));

68 i‡(
Àn
 < 0)

71 
	`∑r£_π©å
(
tb
, 
IFAL_MAX
, 
	`IFAL_RTA
(
iÁl
), 
Àn
);

73 i‡(
n
->
∆msg_ty≥
 =
RTM_DELADDRLABEL
)

74 
	`Ârötf
(
Â
, "Deleted ");

76 i‡(
tb
[
IFAL_ADDRESS
]) {

77 
	`Ârötf
(
Â
, "prefix %s/%u ",

78 
	`f‹m©_ho°
(
iÁl
->
iÁl_Ámûy
,

79 
	`RTA_PAYLOAD
(
tb
[
IFAL_ADDRESS
]),

80 
	`RTA_DATA
(
tb
[
IFAL_ADDRESS
]),

81 
abuf
, (abuf)),

82 
iÁl
->
iÁl_¥efixÀn
);

85 i‡(
iÁl
->
iÁl_ödex
)

86 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
iÁl
->
iÁl_ödex
));

88 i‡(
tb
[
IFAL_LABEL
] && 
	`RTA_PAYLOAD
—b[IFAL_LABEL]Ë=(
uöt32_t
)) {

89 
uöt32_t
 
œbñ
;

90 
	`mem˝y
(&
œbñ
, 
	`RTA_DATA
(
tb
[
IFAL_LABEL
]), (label));

91 
	`Ârötf
(
Â
, "œbñ %u ", 
œbñ
);

94 
	`Ârötf
(
Â
, "\n");

95 
	`fÊush
(
Â
);

97 
	}
}

99 
	$ùaddæabñ_li°
(
¨gc
, **
¨gv
)

101 
af
 = 
¥e„ºed_Ámûy
;

103 i‡(
af
 =
AF_UNSPEC
)

104 
af
 = 
AF_INET6
;

106 i‡(
¨gc
 > 0) {

107 
	`Ârötf
(
°dîr
, "\"ipáddrlabel show\" doesÇotÅakeányárguments.\n");

111 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
af
, 
RTM_GETADDRLABEL
) < 0) {

112 
	`≥º‹
("Cannot send dumpÑequest");

116 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_addæabñ
, 
°dout
) < 0) {

117 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

122 
	}
}

125 
	$ùaddæabñ_modify
(
cmd
, 
¨gc
, **
¨gv
)

128 
∆msghdr
 
n
;

129 
iÁddæblmsg
 
iÁl
;

130 
buf
[1024];

131 } 
ªq
;

133 
öë_¥efix
 
¥efix
;

134 
uöt32_t
 
œbñ
 = 0xffffffffUL;

135 *
p
 = 
NULL
;

136 *
l
 = 
NULL
;

138 
	`mem£t
(&
ªq
, 0, (req));

139 
	`mem£t
(&
¥efix
, 0, (prefix));

141 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

142 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iÁddæblmsg
));

143 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

144 
ªq
.
iÁl
.
iÁl_Ámûy
 = 
¥e„ºed_Ámûy
;

145 
ªq
.
iÁl
.
iÁl_¥efixÀn
 = 0;

146 
ªq
.
iÁl
.
iÁl_ödex
 = 0;

148 i‡(
cmd
 =
RTM_NEWADDRLABEL
) {

149 
ªq
.
n
.
∆msg_Êags
 |
NLM_F_CREATE
|
NLM_F_EXCL
;

152 
¨gc
 > 0) {

153 i‡(
	`°rcmp
(*
¨gv
, "prefix") == 0) {

154 
	`NEXT_ARG
();

155 
p
 = *
¨gv
;

156 
	`gë_¥efix
(&
¥efix
, *
¨gv
, 
¥e„ºed_Ámûy
);

157 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

158 
	`NEXT_ARG
();

159 i‡((
ªq
.
iÁl
.
iÁl_ödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
)) == 0)

160 
	`öv¨g
("dev i†övÆid\n", *
¨gv
);

161 } i‡(
	`°rcmp
(*
¨gv
, "label") == 0) {

162 
	`NEXT_ARG
();

163 
l
 = *
¨gv
;

164 i‡(
	`gë_u32
(&
œbñ
, *
¨gv
, 0) ||Üabel == 0xffffffffUL)

165 
	`öv¨g
("œbñ i†övÆid\n", *
¨gv
);

167 
¨gc
--;

168 
¨gv
++;

170 i‡(
p
 =
NULL
) {

171 
	`Ârötf
(
°dîr
, "NotÉnough information: \"prefix\"árgument isÑequired.\n");

174 i‡(
l
 =
NULL
) {

175 
	`Ârötf
(
°dîr
, "NotÉnough information: \"label\"árgument isÑequired.\n");

178 
	`add©å32
(&
ªq
.
n
, ‘eq), 
IFAL_LABEL
, 
œbñ
);

179 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFAL_ADDRESS
, &
¥efix
.
d©a
,Öªfix.
byãÀn
);

180 
ªq
.
iÁl
.
iÁl_¥efixÀn
 = 
¥efix
.
bôÀn
;

182 i‡(
ªq
.
iÁl
.
iÁl_Ámûy
 =
AF_UNSPEC
)

183 
ªq
.
iÁl
.
iÁl_Ámûy
 = 
AF_INET6
;

185 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

189 
	}
}

192 
	$Êush_addæabñ
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

194 
π∆_h™dÀ
 
πh2
;

195 
πmsg
 *
r
 = 
	`NLMSG_DATA
(
n
);

196 
Àn
 = 
n
->
∆msg_Àn
;

197 
π©å
 * 
tb
[
IFAL_MAX
+1];

199 
Àn
 -
	`NLMSG_LENGTH
((*
r
));

200 i‡(
Àn
 < 0)

203 
	`∑r£_π©å
(
tb
, 
IFAL_MAX
, 
	`RTM_RTA
(
r
), 
Àn
);

205 i‡(
tb
[
IFAL_ADDRESS
]) {

206 
n
->
∆msg_ty≥
 = 
RTM_DELADDRLABEL
;

207 
n
->
∆msg_Êags
 = 
NLM_F_REQUEST
;

209 i‡(
	`π∆_›í
(&
πh2
, 0) < 0)

212 i‡(
	`π∆_èlk
(&
πh2
, 
n
, 
NULL
, 0) < 0)

215 
	`π∆_˛o£
(&
πh2
);

219 
	}
}

221 
	$ùaddæabñ_Êush
(
¨gc
, **
¨gv
)

223 
af
 = 
¥e„ºed_Ámûy
;

225 i‡(
af
 =
AF_UNSPEC
)

226 
af
 = 
AF_INET6
;

228 i‡(
¨gc
 > 0) {

229 
	`Ârötf
(
°dîr
, "\"ipáddrlabel flush\" doesÇotállowÉxtraárguments\n");

233 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
af
, 
RTM_GETADDRLABEL
) < 0) {

234 
	`≥º‹
("Cannot send dumpÑequest");

238 i‡(
	`π∆_dump_fûãr
(&
πh
, 
Êush_addæabñ
, 
NULL
) < 0) {

239 
	`Ârötf
(
°dîr
, "FlushÅerminated\n");

244 
	}
}

246 
	$do_ùaddæabñ
(
¨gc
, **
¨gv
)

248 i‡(
¨gc
 < 1) {

249  
	`ùaddæabñ_li°
(0, 
NULL
);

250 } i‡(
	`m©ches
(
¨gv
[0], "list") == 0 ||

251 
	`m©ches
(
¨gv
[0], "lst") == 0 ||

252 
	`m©ches
(
¨gv
[0], "show") == 0) {

253  
	`ùaddæabñ_li°
(
¨gc
-1, 
¨gv
+1);

254 } i‡(
	`m©ches
(
¨gv
[0], "add") == 0) {

255  
	`ùaddæabñ_modify
(
RTM_NEWADDRLABEL
, 
¨gc
-1, 
¨gv
+1);

256 } i‡(
	`m©ches
(
¨gv
[0], "delete") == 0) {

257  
	`ùaddæabñ_modify
(
RTM_DELADDRLABEL
, 
¨gc
-1, 
¨gv
+1);

258 } i‡(
	`m©ches
(
¨gv
[0], "flush") == 0) {

259  
	`ùaddæabñ_Êush
(
¨gc
-1, 
¨gv
+1);

260 } i‡(
	`m©ches
(
¨gv
[0], "help") == 0)

261 
	`ußge
();

263 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ùáddæabñ hñp\".\n", *
¨gv
);

264 
	`exô
(-1);

265 
	}
}

	@ip/ipfou.c

12 
	~<√tdb.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<√t/if.h
>

17 
	~<löux/fou.h
>

18 
	~<löux/gíëlök.h
>

19 
	~<löux/ù.h
>

20 
	~<¨∑/öë.h
>

22 
	~"libgíl.h
"

23 
	~"utûs.h
"

24 
	~"ù_comm⁄.h
"

26 
	$ußge
()

28 
	`Ârötf
(
°dîr
, "Usage: ip fouáddÖort PORT { ipproto PROTO | gue }\n");

29 
	`Ârötf
(
°dîr
, " ip fou delÖort PORT\n");

30 
	`Ârötf
(
°dîr
, "\n");

31 
	`Ârötf
(
°dîr
, "Where: PROTO { ipproto-name | 1..255 }\n");

32 
	`Ârötf
(
°dîr
, " PORT { 1..65535 }\n");

34 
	`exô
(-1);

35 
	}
}

38 
π∆_h™dÀ
 
	ggíl_πh
 = { .
fd
 = -1 };

39 
	ggíl_Ámûy
 = -1;

41 
	#FOU_REQUEST
(
_ªq
, 
_bufsiz
, 
_cmd
, 
_Êags
) \

42 
	`GENL_REQUEST
(
_ªq
, 
_bufsiz
, 
gíl_Ámûy
, 0, \

43 
FOU_GENL_VERSION
, 
_cmd
, 
_Êags
)

	)

45 
	$fou_∑r£_›t
(
¨gc
, **
¨gv
, 
∆msghdr
 *
n
,

46 
boﬁ
 
addög
)

48 
__u16
 
p‹t
;

49 
p‹t_£t
 = 0;

50 
__u8
 
ù¥Ÿo
, 
ty≥
;

51 
boﬁ
 
gue_£t
 = 
Ál£
;

52 
ù¥Ÿo_£t
 = 0;

54 
¨gc
 > 0) {

55 i‡(!
	`m©ches
(*
¨gv
, "port")) {

56 
	`NEXT_ARG
();

58 i‡(
	`gë_u16
(&
p‹t
, *
¨gv
, 0) ||Öort == 0)

59 
	`öv¨g
("övÆidÖ‹t", *
¨gv
);

60 
p‹t
 = 
	`ht⁄s
(port);

61 
p‹t_£t
 = 1;

62 } i‡(!
	`m©ches
(*
¨gv
, "ipproto")) {

63 
¥Ÿ€¡
 *
£rv±r
;

65 
	`NEXT_ARG
();

67 
£rv±r
 = 
	`gë¥Ÿoby«me
(*
¨gv
);

68 i‡(
£rv±r
)

69 
ù¥Ÿo
 = 
£rv±r
->
p_¥Ÿo
;

70 i‡(
	`gë_u8
(&
ù¥Ÿo
, *
¨gv
, 0) || ipproto == 0)

71 
	`öv¨g
("övÆid iµrŸo", *
¨gv
);

72 
ù¥Ÿo_£t
 = 1;

73 } i‡(!
	`m©ches
(*
¨gv
, "gue")) {

74 
gue_£t
 = 
åue
;

76 
	`Ârötf
(
°dîr
, "fou: unknow¿comm™d \"%s\"?\n", *
¨gv
);

77 
	`ußge
();

80 
¨gc
--, 
¨gv
++;

83 i‡(!
p‹t_£t
) {

84 
	`Ârötf
(
°dîr
, "fou: missingÖort\n");

88 i‡(!
ù¥Ÿo_£t
 && !
gue_£t
 && 
addög
) {

89 
	`Ârötf
(
°dîr
, "fou: must set ipproto or gue\n");

93 i‡(
ù¥Ÿo_£t
 && 
gue_£t
) {

94 
	`Ârötf
(
°dîr
, "fou: cannot set ipprotoánd gue\n");

98 
ty≥
 = 
gue_£t
 ? 
FOU_ENCAP_GUE
 : 
FOU_ENCAP_DIRECT
;

100 
	`add©å16
(
n
, 1024, 
FOU_ATTR_PORT
, 
p‹t
);

101 
	`add©å8
(
n
, 1024, 
FOU_ATTR_TYPE
, 
ty≥
);

103 i‡(
ù¥Ÿo_£t
)

104 
	`add©å8
(
n
, 1024, 
FOU_ATTR_IPPROTO
, 
ù¥Ÿo
);

107 
	}
}

109 
	$do_add
(
¨gc
, **
¨gv
)

111 
	`FOU_REQUEST
(
ªq
, 1024, 
FOU_CMD_ADD
, 
NLM_F_REQUEST
);

113 
	`fou_∑r£_›t
(
¨gc
, 
¨gv
, &
ªq
.
n
, 
åue
);

115 i‡(
	`π∆_èlk
(&
gíl_πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

119 
	}
}

121 
	$do_dñ
(
¨gc
, **
¨gv
)

123 
	`FOU_REQUEST
(
ªq
, 1024, 
FOU_CMD_DEL
, 
NLM_F_REQUEST
);

125 
	`fou_∑r£_›t
(
¨gc
, 
¨gv
, &
ªq
.
n
, 
Ál£
);

127 i‡(
	`π∆_èlk
(&
gíl_πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

131 
	}
}

133 
	$do_ùfou
(
¨gc
, **
¨gv
)

135 i‡(
gíl_Ámûy
 < 0) {

136 i‡(
	`π∆_›í_by¥Ÿo
(&
gíl_πh
, 0, 
NETLINK_GENERIC
) < 0) {

137 
	`Ârötf
(
°dîr
, "Cannot open genericÇetlink socket\n");

138 
	`exô
(1);

141 
gíl_Ámûy
 = 
	`gíl_ªsﬁve_Ámûy
(&
gíl_πh
, 
FOU_GENL_NAME
);

142 i‡(
gíl_Ámûy
 < 0)

143 
	`exô
(1);

146 i‡(
¨gc
 < 1)

147 
	`ußge
();

149 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

150  
	`do_add
(
¨gc
-1, 
¨gv
+1);

151 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

152  
	`do_dñ
(
¨gc
-1, 
¨gv
+1);

153 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

154 
	`ußge
();

156 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ù fou hñp\".\n", *
¨gv
);

157 
	`exô
(-1);

158 
	}
}

	@ip/ipl2tp.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<uni°d.h
>

17 
	~<î∫o.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/sockë.h
>

20 
	~<¨∑/öë.h
>

21 
	~<sys/io˘l.h
>

22 
	~<löux/if.h
>

23 
	~<löux/if_¨p.h
>

24 
	~<löux/ù.h
>

26 
	~<löux/gíëlök.h
>

27 
	~<löux/l2ç.h
>

28 
	~"libgíl.h
"

30 
	~"utûs.h
"

31 
	~"ù_comm⁄.h
"

34 
	mL2TP_ADD
,

35 
	mL2TP_CHG
,

36 
	mL2TP_DEL
,

37 
	mL2TP_GET


40 
	sl2ç_∑rm
 {

41 
uöt32_t
 
	mtu¬ñ_id
;

42 
uöt32_t
 
	m≥î_tu¬ñ_id
;

43 
uöt32_t
 
	m£ssi⁄_id
;

44 
uöt32_t
 
	m≥î_£ssi⁄_id
;

45 
uöt32_t
 
	moff£t
;

46 
uöt32_t
 
	m≥î_off£t
;

47 
l2ç_íˇp_ty≥
 
	míˇp
;

48 
uöt16_t
 
	mloˇl_udp_p‹t
;

49 
uöt16_t
 
	m≥î_udp_p‹t
;

50 
	mcookõ_Àn
;

51 
uöt8_t
 
	mcookõ
[8];

52 
	m≥î_cookõ_Àn
;

53 
uöt8_t
 
	m≥î_cookõ
[8];

54 
öë_¥efix
 
	mloˇl_ù
;

55 
öë_¥efix
 
	m≥î_ù
;

57 
uöt16_t
 
	mpw_ty≥
;

58 
uöt16_t
 
	mmtu
;

59 
	mudp_csum
:1;

60 
	mªcv_£q
:1;

61 
	m£nd_£q
:1;

62 
	m s_mode
:1;

63 
	md©a_£q
:2;

64 
	mtu¬ñ
:1;

65 
	m£ssi⁄
:1;

66 
	mª‹dî_timeout
;

67 c⁄° *
	mi‚ame
;

68 
uöt8_t
 
	ml2•ec_ty≥
;

69 
uöt8_t
 
	ml2•ec_Àn
;

72 
	sl2ç_°©s
 {

73 
uöt64_t
 
	md©a_rx_∑ckës
;

74 
uöt64_t
 
	md©a_rx_byãs
;

75 
uöt64_t
 
	md©a_rx_îr‹s
;

76 
uöt64_t
 
	md©a_rx_oos_∑ckës
;

77 
uöt64_t
 
	md©a_rx_oos_disˇrds
;

78 
uöt64_t
 
	md©a_tx_∑ckës
;

79 
uöt64_t
 
	md©a_tx_byãs
;

80 
uöt64_t
 
	md©a_tx_îr‹s
;

83 
	sl2ç_d©a
 {

84 
l2ç_∑rm
 
	mc⁄fig
;

85 
l2ç_°©s
 
	m°©s
;

89 
π∆_h™dÀ
 
	ggíl_πh
;

90 
	ggíl_Ámûy
 = -1;

96 
	$¸óã_tu¬ñ
(
l2ç_∑rm
 *
p
)

98 
uöt32_t
 
loˇl_©å
 = 
L2TP_ATTR_IP_SADDR
;

99 
uöt32_t
 
≥î_©å
 = 
L2TP_ATTR_IP_DADDR
;

101 
	`GENL_REQUEST
(
ªq
, 1024, 
gíl_Ámûy
, 0, 
L2TP_GENL_VERSION
,

102 
L2TP_CMD_TUNNEL_CREATE
, 
NLM_F_REQUEST
 | 
NLM_F_ACK
);

104 
	`add©å32
(&
ªq
.
n
, 1024, 
L2TP_ATTR_CONN_ID
, 
p
->
tu¬ñ_id
);

105 
	`add©å32
(&
ªq
.
n
, 1024, 
L2TP_ATTR_PEER_CONN_ID
, 
p
->
≥î_tu¬ñ_id
);

106 
	`add©å8
(&
ªq
.
n
, 1024, 
L2TP_ATTR_PROTO_VERSION
, 3);

107 
	`add©å16
(&
ªq
.
n
, 1024, 
L2TP_ATTR_ENCAP_TYPE
, 
p
->
íˇp
);

109 i‡(
p
->
loˇl_ù
.
Ámûy
 =
AF_INET6
)

110 
loˇl_©å
 = 
L2TP_ATTR_IP6_SADDR
;

111 
	`add©å_l
(&
ªq
.
n
, 1024, 
loˇl_©å
, &
p
->
loˇl_ù
.
d©a
,Ö->loˇl_ù.
byãÀn
);

113 i‡(
p
->
≥î_ù
.
Ámûy
 =
AF_INET6
)

114 
≥î_©å
 = 
L2TP_ATTR_IP6_DADDR
;

115 
	`add©å_l
(&
ªq
.
n
, 1024, 
≥î_©å
, &
p
->
≥î_ù
.
d©a
,Ö->≥î_ù.
byãÀn
);

117 i‡(
p
->
íˇp
 =
L2TP_ENCAPTYPE_UDP
) {

118 
	`add©å16
(&
ªq
.
n
, 1024, 
L2TP_ATTR_UDP_SPORT
, 
p
->
loˇl_udp_p‹t
);

119 
	`add©å16
(&
ªq
.
n
, 1024, 
L2TP_ATTR_UDP_DPORT
, 
p
->
≥î_udp_p‹t
);

122 i‡(
	`π∆_èlk
(&
gíl_πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

126 
	}
}

128 
	$dñëe_tu¬ñ
(
l2ç_∑rm
 *
p
)

130 
	`GENL_REQUEST
(
ªq
, 128, 
gíl_Ámûy
, 0, 
L2TP_GENL_VERSION
,

131 
L2TP_CMD_TUNNEL_DELETE
, 
NLM_F_REQUEST
 | 
NLM_F_ACK
);

133 
	`add©å32
(&
ªq
.
n
, 128, 
L2TP_ATTR_CONN_ID
, 
p
->
tu¬ñ_id
);

135 i‡(
	`π∆_èlk
(&
gíl_πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

139 
	}
}

141 
	$¸óã_£ssi⁄
(
l2ç_∑rm
 *
p
)

143 
	`GENL_REQUEST
(
ªq
, 1024, 
gíl_Ámûy
, 0, 
L2TP_GENL_VERSION
,

144 
L2TP_CMD_SESSION_CREATE
, 
NLM_F_REQUEST
 | 
NLM_F_ACK
);

146 
	`add©å32
(&
ªq
.
n
, 1024, 
L2TP_ATTR_CONN_ID
, 
p
->
tu¬ñ_id
);

147 
	`add©å32
(&
ªq
.
n
, 1024, 
L2TP_ATTR_PEER_CONN_ID
, 
p
->
≥î_tu¬ñ_id
);

148 
	`add©å32
(&
ªq
.
n
, 1024, 
L2TP_ATTR_SESSION_ID
, 
p
->
£ssi⁄_id
);

149 
	`add©å32
(&
ªq
.
n
, 1024, 
L2TP_ATTR_PEER_SESSION_ID
, 
p
->
≥î_£ssi⁄_id
);

150 
	`add©å16
(&
ªq
.
n
, 1024, 
L2TP_ATTR_PW_TYPE
, 
p
->
pw_ty≥
);

151 
	`add©å8
(&
ªq
.
n
, 1024, 
L2TP_ATTR_L2SPEC_TYPE
, 
p
->
l2•ec_ty≥
);

152 
	`add©å8
(&
ªq
.
n
, 1024, 
L2TP_ATTR_L2SPEC_LEN
, 
p
->
l2•ec_Àn
);

154 i‡(
p
->
mtu
Ë
	`add©å16
(&
ªq
.
n
, 1024, 
L2TP_ATTR_MTU
,Ö->mtu);

155 i‡(
p
->
ªcv_£q
Ë
	`add©å
(&
ªq
.
n
, 1024, 
L2TP_ATTR_RECV_SEQ
);

156 i‡(
p
->
£nd_£q
Ë
	`add©å
(&
ªq
.
n
, 1024, 
L2TP_ATTR_SEND_SEQ
);

157 i‡(
p
->
 s_mode
Ë
	`add©å
(&
ªq
.
n
, 1024, 
L2TP_ATTR_LNS_MODE
);

158 i‡(
p
->
d©a_£q
Ë
	`add©å8
(&
ªq
.
n
, 1024, 
L2TP_ATTR_DATA_SEQ
,Ö->data_seq);

159 i‡(
p
->
ª‹dî_timeout
Ë
	`add©å64
(&
ªq
.
n
, 1024, 
L2TP_ATTR_RECV_TIMEOUT
,

160 
p
->
ª‹dî_timeout
);

161 i‡(
p
->
off£t
Ë
	`add©å16
(&
ªq
.
n
, 1024, 
L2TP_ATTR_OFFSET
,Ö->offset);

162 i‡(
p
->
cookõ_Àn
Ë
	`add©å_l
(&
ªq
.
n
, 1024, 
L2TP_ATTR_COOKIE
,

163 
p
->
cookõ
,Ö->
cookõ_Àn
);

164 i‡(
p
->
≥î_cookõ_Àn
Ë
	`add©å_l
(&
ªq
.
n
, 1024, 
L2TP_ATTR_PEER_COOKIE
,

165 
p
->
≥î_cookõ
,Ö->
≥î_cookõ_Àn
);

166 i‡(
p
->
i‚ame
 &&Ö->ifname[0])

167 
	`add©å°rz
(&
ªq
.
n
, 1024, 
L2TP_ATTR_IFNAME
, 
p
->
i‚ame
);

169 i‡(
	`π∆_èlk
(&
gíl_πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

173 
	}
}

175 
	$dñëe_£ssi⁄
(
l2ç_∑rm
 *
p
)

177 
	`GENL_REQUEST
(
ªq
, 1024, 
gíl_Ámûy
, 0, 
L2TP_GENL_VERSION
,

178 
L2TP_CMD_SESSION_DELETE
, 
NLM_F_REQUEST
 | 
NLM_F_ACK
);

180 
	`add©å32
(&
ªq
.
n
, 1024, 
L2TP_ATTR_CONN_ID
, 
p
->
tu¬ñ_id
);

181 
	`add©å32
(&
ªq
.
n
, 1024, 
L2TP_ATTR_SESSION_ID
, 
p
->
£ssi⁄_id
);

182 i‡(
	`π∆_èlk
(&
gíl_πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

186 
	}
}

188 
	$¥öt_cookõ
(*
«me
, c⁄° 
uöt8_t
 *
cookõ
, 
Àn
)

190 
	`¥ötf
(" %†%02x%02x%02x%02x", 
«me
,

191 
cookõ
[0], cookie[1],

192 
cookõ
[2], cookie[3]);

193 i‡(
Àn
 == 8)

194 
	`¥ötf
("%02x%02x%02x%02x",

195 
cookõ
[4], cookie[5],

196 
cookõ
[6], cookie[7]);

197 
	}
}

199 
	$¥öt_tu¬ñ
(c⁄° 
l2ç_d©a
 *
d©a
)

201 c⁄° 
l2ç_∑rm
 *
p
 = &
d©a
->
c⁄fig
;

202 
buf
[
INET6_ADDRSTRLEN
];

204 
	`¥ötf
("Tunnel %u,Éncap %s\n",

205 
p
->
tu¬ñ_id
,

206 
p
->
íˇp
 =
L2TP_ENCAPTYPE_UDP
 ? "UDP" :

207 
p
->
íˇp
 =
L2TP_ENCAPTYPE_IP
 ? "IP" : "??");

208 
	`¥ötf
(" From %†", 
	`öë_¡›
(
p
->
loˇl_ù
.
Ámûy
,Ö->loˇl_ù.
d©a
, 
buf
, (buf)));

209 
	`¥ötf
("tÿ%s\n", 
	`öë_¡›
(
p
->
≥î_ù
.
Ámûy
,Ö->≥î_ù.
d©a
, 
buf
, (buf)));

210 
	`¥ötf
(" PeerÅunnel %u\n",

211 
p
->
≥î_tu¬ñ_id
);

213 i‡(
p
->
íˇp
 =
L2TP_ENCAPTYPE_UDP
)

214 
	`¥ötf
(" UDP source / destÖorts: %hu/%hu\n",

215 
p
->
loˇl_udp_p‹t
,Ö->
≥î_udp_p‹t
);

216 
	}
}

218 
	$¥öt_£ssi⁄
(
l2ç_d©a
 *
d©a
)

220 
l2ç_∑rm
 *
p
 = &
d©a
->
c⁄fig
;

222 
	`¥ötf
("Session %u inÅunnel %u\n",

223 
p
->
£ssi⁄_id
,Ö->
tu¬ñ_id
);

224 
	`¥ötf
(" Peer session %u,Åunnel %u\n",

225 
p
->
≥î_£ssi⁄_id
,Ö->
≥î_tu¬ñ_id
);

227 i‡(
p
->
i‚ame
 !
NULL
) {

228 
	`¥ötf
(" i¡îÁ˚Çame: %s\n", 
p
->
i‚ame
);

230 
	`¥ötf
(" offset %u,Öeer offset %u\n",

231 
p
->
off£t
,Ö->
≥î_off£t
);

232 i‡(
p
->
cookõ_Àn
 > 0)

233 
	`¥öt_cookõ
("cookõ", 
p
->
cookõ
,Ö->
cookõ_Àn
);

234 i‡(
p
->
≥î_cookõ_Àn
 > 0)

235 
	`¥öt_cookõ
("≥î cookõ", 
p
->
≥î_cookõ
,Ö->
≥î_cookõ_Àn
);

237 i‡(
p
->
ª‹dî_timeout
 != 0)

238 
	`¥ötf
("Ñe‹dîÅimeout: %u\n", 
p
->
ª‹dî_timeout
);

240 
	`¥ötf
("\n");

241 
	}
}

243 
	$gë_ª•⁄£
(
∆msghdr
 *
n
, *
¨g
)

245 
gílmsghdr
 *
ghdr
;

246 
l2ç_d©a
 *
d©a
 = 
¨g
;

247 
l2ç_∑rm
 *
p
 = &
d©a
->
c⁄fig
;

248 
π©å
 *
©ås
[
L2TP_ATTR_MAX
 + 1];

249 
π©å
 *
∆a_°©s
;

250 
Àn
;

253 i‡(
n
->
∆msg_ty≥
 =
NLMSG_ERROR
)

254  -
EBADMSG
;

256 
ghdr
 = 
	`NLMSG_DATA
(
n
);

257 
Àn
 = 
n
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
ghdr
));

258 i‡(
Àn
 < 0)

261 
	`∑r£_π©å
(
©ås
, 
L2TP_ATTR_MAX
, (*)
ghdr
 + 
GENL_HDRLEN
, 
Àn
);

263 i‡(
©ås
[
L2TP_ATTR_PW_TYPE
])

264 
p
->
pw_ty≥
 = 
	`πa_gë©å_u16
(
©ås
[
L2TP_ATTR_PW_TYPE
]);

265 i‡(
©ås
[
L2TP_ATTR_ENCAP_TYPE
])

266 
p
->
íˇp
 = 
	`πa_gë©å_u16
(
©ås
[
L2TP_ATTR_ENCAP_TYPE
]);

267 i‡(
©ås
[
L2TP_ATTR_OFFSET
])

268 
p
->
off£t
 = 
	`πa_gë©å_u16
(
©ås
[
L2TP_ATTR_OFFSET
]);

269 i‡(
©ås
[
L2TP_ATTR_DATA_SEQ
])

270 
p
->
d©a_£q
 = 
	`πa_gë©å_u16
(
©ås
[
L2TP_ATTR_DATA_SEQ
]);

271 i‡(
©ås
[
L2TP_ATTR_CONN_ID
])

272 
p
->
tu¬ñ_id
 = 
	`πa_gë©å_u32
(
©ås
[
L2TP_ATTR_CONN_ID
]);

273 i‡(
©ås
[
L2TP_ATTR_PEER_CONN_ID
])

274 
p
->
≥î_tu¬ñ_id
 = 
	`πa_gë©å_u32
(
©ås
[
L2TP_ATTR_PEER_CONN_ID
]);

275 i‡(
©ås
[
L2TP_ATTR_SESSION_ID
])

276 
p
->
£ssi⁄_id
 = 
	`πa_gë©å_u32
(
©ås
[
L2TP_ATTR_SESSION_ID
]);

277 i‡(
©ås
[
L2TP_ATTR_PEER_SESSION_ID
])

278 
p
->
≥î_£ssi⁄_id
 = 
	`πa_gë©å_u32
(
©ås
[
L2TP_ATTR_PEER_SESSION_ID
]);

279 i‡(
©ås
[
L2TP_ATTR_L2SPEC_TYPE
])

280 
p
->
l2•ec_ty≥
 = 
	`πa_gë©å_u8
(
©ås
[
L2TP_ATTR_L2SPEC_TYPE
]);

281 i‡(
©ås
[
L2TP_ATTR_L2SPEC_LEN
])

282 
p
->
l2•ec_Àn
 = 
	`πa_gë©å_u8
(
©ås
[
L2TP_ATTR_L2SPEC_LEN
]);

284 
p
->
udp_csum
 = !!
©ås
[
L2TP_ATTR_UDP_CSUM
];

285 i‡(
©ås
[
L2TP_ATTR_COOKIE
])

286 
	`mem˝y
(
p
->
cookõ
, 
	`RTA_DATA
(
©ås
[
L2TP_ATTR_COOKIE
]),

287 
p
->
cookõ_Àn
 = 
	`RTA_PAYLOAD
(
©ås
[
L2TP_ATTR_COOKIE
]));

289 i‡(
©ås
[
L2TP_ATTR_PEER_COOKIE
])

290 
	`mem˝y
(
p
->
≥î_cookõ
, 
	`RTA_DATA
(
©ås
[
L2TP_ATTR_PEER_COOKIE
]),

291 
p
->
≥î_cookõ_Àn
 = 
	`RTA_PAYLOAD
(
©ås
[
L2TP_ATTR_PEER_COOKIE
]));

293 
p
->
ªcv_£q
 = !!
©ås
[
L2TP_ATTR_RECV_SEQ
];

294 
p
->
£nd_£q
 = !!
©ås
[
L2TP_ATTR_SEND_SEQ
];

296 i‡(
©ås
[
L2TP_ATTR_RECV_TIMEOUT
])

297 
p
->
ª‹dî_timeout
 = 
	`πa_gë©å_u64
(
©ås
[
L2TP_ATTR_RECV_TIMEOUT
]);

298 i‡(
©ås
[
L2TP_ATTR_IP_SADDR
]) {

299 
p
->
loˇl_ù
.
Ámûy
 = 
AF_INET
;

300 
p
->
loˇl_ù
.
d©a
[0] = 
	`πa_gë©å_u32
(
©ås
[
L2TP_ATTR_IP_SADDR
]);

301 
p
->
loˇl_ù
.
byãÀn
 = 4;

302 
p
->
loˇl_ù
.
bôÀn
 = -1;

304 i‡(
©ås
[
L2TP_ATTR_IP_DADDR
]) {

305 
p
->
≥î_ù
.
Ámûy
 = 
AF_INET
;

306 
p
->
≥î_ù
.
d©a
[0] = 
	`πa_gë©å_u32
(
©ås
[
L2TP_ATTR_IP_DADDR
]);

307 
p
->
≥î_ù
.
byãÀn
 = 4;

308 
p
->
≥î_ù
.
bôÀn
 = -1;

310 i‡(
©ås
[
L2TP_ATTR_IP6_SADDR
]) {

311 
p
->
loˇl_ù
.
Ámûy
 = 
AF_INET6
;

312 
	`mem˝y
(&
p
->
loˇl_ù
.
d©a
, 
	`RTA_DATA
(
©ås
[
L2TP_ATTR_IP6_SADDR
]),

313 
p
->
loˇl_ù
.
byãÀn
 = 16);

314 
p
->
loˇl_ù
.
bôÀn
 = -1;

316 i‡(
©ås
[
L2TP_ATTR_IP6_DADDR
]) {

317 
p
->
≥î_ù
.
Ámûy
 = 
AF_INET6
;

318 
	`mem˝y
(&
p
->
≥î_ù
.
d©a
, 
	`RTA_DATA
(
©ås
[
L2TP_ATTR_IP6_DADDR
]),

319 
p
->
≥î_ù
.
byãÀn
 = 16);

320 
p
->
≥î_ù
.
bôÀn
 = -1;

322 i‡(
©ås
[
L2TP_ATTR_UDP_SPORT
])

323 
p
->
loˇl_udp_p‹t
 = 
	`πa_gë©å_u16
(
©ås
[
L2TP_ATTR_UDP_SPORT
]);

324 i‡(
©ås
[
L2TP_ATTR_UDP_DPORT
])

325 
p
->
≥î_udp_p‹t
 = 
	`πa_gë©å_u16
(
©ås
[
L2TP_ATTR_UDP_DPORT
]);

326 i‡(
©ås
[
L2TP_ATTR_MTU
])

327 
p
->
mtu
 = 
	`πa_gë©å_u16
(
©ås
[
L2TP_ATTR_MTU
]);

328 i‡(
©ås
[
L2TP_ATTR_IFNAME
])

329 
p
->
i‚ame
 = 
	`πa_gë©å_°r
(
©ås
[
L2TP_ATTR_IFNAME
]);

331 
∆a_°©s
 = 
©ås
[
L2TP_ATTR_STATS
];

332 i‡(
∆a_°©s
) {

333 
π©å
 *
tb
[
L2TP_ATTR_STATS_MAX
 + 1];

335 
	`∑r£_π©å_√°ed
(
tb
, 
L2TP_ATTR_STATS_MAX
, 
∆a_°©s
);

337 i‡(
tb
[
L2TP_ATTR_TX_PACKETS
])

338 
d©a
->
°©s
.
d©a_tx_∑ckës
 = 
	`πa_gë©å_u64
(
tb
[
L2TP_ATTR_TX_PACKETS
]);

339 i‡(
tb
[
L2TP_ATTR_TX_BYTES
])

340 
d©a
->
°©s
.
d©a_tx_byãs
 = 
	`πa_gë©å_u64
(
tb
[
L2TP_ATTR_TX_BYTES
]);

341 i‡(
tb
[
L2TP_ATTR_TX_ERRORS
])

342 
d©a
->
°©s
.
d©a_tx_îr‹s
 = 
	`πa_gë©å_u64
(
tb
[
L2TP_ATTR_TX_ERRORS
]);

343 i‡(
tb
[
L2TP_ATTR_RX_PACKETS
])

344 
d©a
->
°©s
.
d©a_rx_∑ckës
 = 
	`πa_gë©å_u64
(
tb
[
L2TP_ATTR_RX_PACKETS
]);

345 i‡(
tb
[
L2TP_ATTR_RX_BYTES
])

346 
d©a
->
°©s
.
d©a_rx_byãs
 = 
	`πa_gë©å_u64
(
tb
[
L2TP_ATTR_RX_BYTES
]);

347 i‡(
tb
[
L2TP_ATTR_RX_ERRORS
])

348 
d©a
->
°©s
.
d©a_rx_îr‹s
 = 
	`πa_gë©å_u64
(
tb
[
L2TP_ATTR_RX_ERRORS
]);

349 i‡(
tb
[
L2TP_ATTR_RX_SEQ_DISCARDS
])

350 
d©a
->
°©s
.
d©a_rx_oos_disˇrds
 = 
	`πa_gë©å_u64
(
tb
[
L2TP_ATTR_RX_SEQ_DISCARDS
]);

351 i‡(
tb
[
L2TP_ATTR_RX_OOS_PACKETS
])

352 
d©a
->
°©s
.
d©a_rx_oos_∑ckës
 = 
	`πa_gë©å_u64
(
tb
[
L2TP_ATTR_RX_OOS_PACKETS
]);

356 
	}
}

358 
	$£ssi⁄_∆msg
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

360 
ªt
 = 
	`gë_ª•⁄£
(
n
, 
¨g
);

362 i‡(
ªt
 == 0)

363 
	`¥öt_£ssi⁄
(
¨g
);

365  
ªt
;

366 
	}
}

368 
	$gë_£ssi⁄
(
l2ç_d©a
 *
p
)

370 
	`GENL_REQUEST
(
ªq
, 128, 
gíl_Ámûy
, 0, 
L2TP_GENL_VERSION
,

371 
L2TP_CMD_SESSION_GET
,

372 
NLM_F_ROOT
 | 
NLM_F_MATCH
 | 
NLM_F_REQUEST
);

374 
ªq
.
n
.
∆msg_£q
 = 
gíl_πh
.
dump
 = ++gíl_πh.
£q
;

376 i‡(
p
->
c⁄fig
.
tu¬ñ_id
 &&Ö->c⁄fig.
£ssi⁄_id
) {

377 
	`add©å32
(&
ªq
.
n
, 128, 
L2TP_ATTR_CONN_ID
, 
p
->
c⁄fig
.
tu¬ñ_id
);

378 
	`add©å32
(&
ªq
.
n
, 128, 
L2TP_ATTR_SESSION_ID
, 
p
->
c⁄fig
.
£ssi⁄_id
);

381 i‡(
	`π∆_£nd
(&
gíl_πh
, &
ªq
,Ñeq.
n
.
∆msg_Àn
) < 0)

384 i‡(
	`π∆_dump_fûãr
(&
gíl_πh
, 
£ssi⁄_∆msg
, 
p
) < 0) {

385 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

386 
	`exô
(1);

390 
	}
}

392 
	$tu¬ñ_∆msg
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

394 
ªt
 = 
	`gë_ª•⁄£
(
n
, 
¨g
);

396 i‡(
ªt
 == 0)

397 
	`¥öt_tu¬ñ
(
¨g
);

399  
ªt
;

400 
	}
}

402 
	$gë_tu¬ñ
(
l2ç_d©a
 *
p
)

404 
	`GENL_REQUEST
(
ªq
, 1024, 
gíl_Ámûy
, 0, 
L2TP_GENL_VERSION
,

405 
L2TP_CMD_TUNNEL_GET
,

406 
NLM_F_ROOT
 | 
NLM_F_MATCH
 | 
NLM_F_REQUEST
);

408 
ªq
.
n
.
∆msg_£q
 = 
gíl_πh
.
dump
 = ++gíl_πh.
£q
;

410 i‡(
p
->
c⁄fig
.
tu¬ñ_id
)

411 
	`add©å32
(&
ªq
.
n
, 1024, 
L2TP_ATTR_CONN_ID
, 
p
->
c⁄fig
.
tu¬ñ_id
);

413 i‡(
	`π∆_£nd
(&
gíl_πh
, &
ªq
,Ñeq.
n
.
∆msg_Àn
) < 0)

416 i‡(
	`π∆_dump_fûãr
(&
gíl_πh
, 
tu¬ñ_∆msg
, 
p
) < 0) {

417 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

418 
	`exô
(1);

422 
	}
}

428 
	$hex
(
ch
)

430 i‡((
ch
 >= 'a') && (ch <= 'f'))

431  
ch
 - 'a' + 10;

432 i‡((
ch
 >= '0') && (ch <= '9'))

433  
ch
 - '0';

434 i‡((
ch
 >= 'A') && (ch <= 'F'))

435  
ch
 - 'A' + 10;

437 
	}
}

439 
	$hex2mem
(c⁄° *
buf
, 
uöt8_t
 *
mem
, 
cou¡
)

441 
i
, 
j
;

442 
c
;

444 
i
 = 0, 
j
 = 0; i < 
cou¡
; i++, j += 2) {

445 
c
 = 
	`hex
(
buf
[
j
]);

446 i‡(
c
 < 0)

447 
îr
;

449 
mem
[
i
] = 
c
 << 4;

451 
c
 = 
	`hex
(
buf
[
j
 + 1]);

452 i‡(
c
 < 0)

453 
îr
;

455 
mem
[
i
] |
c
;

460 
îr
:

462 
	}
}

464 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

466 
	$ußge
()

468 
	`Ârötf
(
°dîr
, "Usage: ipÜ2tpáddÅunnel\n");

469 
	`Ârötf
(
°dîr
, "Ñemote ADDRÜocal ADDR\n");

470 
	`Ârötf
(
°dîr
, "Åunnel_id IDÖeer_tunnel_id ID\n");

471 
	`Ârötf
(
°dîr
, " [Éncap { ip | udp } ]\n");

472 
	`Ârötf
(
°dîr
, " [ udp_sport PORT ] [ udp_dport PORT ]\n");

473 
	`Ârötf
(
°dîr
, "Usage: ipÜ2tpádd session [Çame NAME ]\n");

474 
	`Ârötf
(
°dîr
, "Åunnel_id ID\n");

475 
	`Ârötf
(
°dîr
, " session_id IDÖeer_session_id ID\n");

476 
	`Ârötf
(
°dîr
, " [ cookie HEXSTR ] [Öeer_cookie HEXSTR ]\n");

477 
	`Ârötf
(
°dîr
, " [ offset OFFSET ] [Öeer_offset OFFSET ]\n");

478 
	`Ârötf
(
°dîr
, " [Ü2spec_type L2SPEC ]\n");

479 
	`Ârötf
(
°dîr
, " ipÜ2tp delÅunnelÅunnel_id ID\n");

480 
	`Ârötf
(
°dîr
, " ipÜ2tp del sessionÅunnel_id ID session_id ID\n");

481 
	`Ârötf
(
°dîr
, " ipÜ2tp showÅunnel [Åunnel_id ID ]\n");

482 
	`Ârötf
(
°dîr
, " ipÜ2tp show session [Åunnel_id ID ] [ session_id ID ]\n");

483 
	`Ârötf
(
°dîr
, "\n");

484 
	`Ârötf
(
°dîr
, "Where: NAME := STRING\n");

485 
	`Ârötf
(
°dîr
, " ADDR := { IP_ADDRESS |ány }\n");

486 
	`Ârötf
(
°dîr
, " PORT := { 0..65535 }\n");

487 
	`Ârötf
(
°dîr
, " ID := { 1..4294967295 }\n");

488 
	`Ârötf
(
°dîr
, " HEXSTR := { 8 or 16 hex digits (4 / 8 bytes) }\n");

489 
	`Ârötf
(
°dîr
, " L2SPEC := {Çone | default }\n");

490 
	`exô
(-1);

491 
	}
}

493 
	$∑r£_¨gs
(
¨gc
, **
¨gv
, 
cmd
, 
l2ç_∑rm
 *
p
)

495 
	`mem£t
(
p
, 0, (*p));

497 i‡(
¨gc
 == 0)

498 
	`ußge
();

501 
p
->
l2•ec_ty≥
 = 
L2TP_L2SPECTYPE_DEFAULT
;

502 
p
->
l2•ec_Àn
 = 4;

504 
¨gc
 > 0) {

505 i‡(
	`°rcmp
(*
¨gv
, "encap") == 0) {

506 
	`NEXT_ARG
();

507 i‡(
	`°rcmp
(*
¨gv
, "ip") == 0) {

508 
p
->
íˇp
 = 
L2TP_ENCAPTYPE_IP
;

509 } i‡(
	`°rcmp
(*
¨gv
, "udp") == 0) {

510 
p
->
íˇp
 = 
L2TP_ENCAPTYPE_UDP
;

512 
	`Ârötf
(
°dîr
, "Unknow¿tu¬ñÉnˇpsuœti⁄ \"%s\"\n", *
¨gv
);

513 
	`exô
(-1);

515 } i‡(
	`°rcmp
(*
¨gv
, "name") == 0) {

516 
	`NEXT_ARG
();

517 
p
->
i‚ame
 = *
¨gv
;

518 } i‡(
	`°rcmp
(*
¨gv
, "remote") == 0) {

519 
	`NEXT_ARG
();

520 i‡(
	`gë_addr
(&
p
->
≥î_ù
, *
¨gv
, 
AF_UNSPEC
))

521 
	`öv¨g
("övÆidÑemŸêaddªss\n", *
¨gv
);

522 } i‡(
	`°rcmp
(*
¨gv
, "local") == 0) {

523 
	`NEXT_ARG
();

524 i‡(
	`gë_addr
(&
p
->
loˇl_ù
, *
¨gv
, 
AF_UNSPEC
))

525 
	`öv¨g
("övÆidÜoˇ»addªss\n", *
¨gv
);

526 } i‡((
	`°rcmp
(*
¨gv
, "tunnel_id") == 0) ||

527 (
	`°rcmp
(*
¨gv
, "tid") == 0)) {

528 
__u32
 
uvÆ
;

529 
	`NEXT_ARG
();

530 i‡(
	`gë_u32
(&
uvÆ
, *
¨gv
, 0))

531 
	`öv¨g
("övÆid ID\n", *
¨gv
);

532 
p
->
tu¬ñ_id
 = 
uvÆ
;

533 } i‡((
	`°rcmp
(*
¨gv
, "peer_tunnel_id") == 0) ||

534 (
	`°rcmp
(*
¨gv
, "ptid") == 0)) {

535 
__u32
 
uvÆ
;

536 
	`NEXT_ARG
();

537 i‡(
	`gë_u32
(&
uvÆ
, *
¨gv
, 0))

538 
	`öv¨g
("övÆid ID\n", *
¨gv
);

539 
p
->
≥î_tu¬ñ_id
 = 
uvÆ
;

540 } i‡((
	`°rcmp
(*
¨gv
, "session_id") == 0) ||

541 (
	`°rcmp
(*
¨gv
, "sid") == 0)) {

542 
__u32
 
uvÆ
;

543 
	`NEXT_ARG
();

544 i‡(
	`gë_u32
(&
uvÆ
, *
¨gv
, 0))

545 
	`öv¨g
("övÆid ID\n", *
¨gv
);

546 
p
->
£ssi⁄_id
 = 
uvÆ
;

547 } i‡((
	`°rcmp
(*
¨gv
, "peer_session_id") == 0) ||

548 (
	`°rcmp
(*
¨gv
, "psid") == 0)) {

549 
__u32
 
uvÆ
;

550 
	`NEXT_ARG
();

551 i‡(
	`gë_u32
(&
uvÆ
, *
¨gv
, 0))

552 
	`öv¨g
("övÆid ID\n", *
¨gv
);

553 
p
->
≥î_£ssi⁄_id
 = 
uvÆ
;

554 } i‡(
	`°rcmp
(*
¨gv
, "udp_sport") == 0) {

555 
__u16
 
uvÆ
;

556 
	`NEXT_ARG
();

557 i‡(
	`gë_u16
(&
uvÆ
, *
¨gv
, 0))

558 
	`öv¨g
("övÆidÖ‹t\n", *
¨gv
);

559 
p
->
loˇl_udp_p‹t
 = 
uvÆ
;

560 } i‡(
	`°rcmp
(*
¨gv
, "udp_dport") == 0) {

561 
__u16
 
uvÆ
;

562 
	`NEXT_ARG
();

563 i‡(
	`gë_u16
(&
uvÆ
, *
¨gv
, 0))

564 
	`öv¨g
("övÆidÖ‹t\n", *
¨gv
);

565 
p
->
≥î_udp_p‹t
 = 
uvÆ
;

566 } i‡(
	`°rcmp
(*
¨gv
, "offset") == 0) {

567 
__u8
 
uvÆ
;

568 
	`NEXT_ARG
();

569 i‡(
	`gë_u8
(&
uvÆ
, *
¨gv
, 0))

570 
	`öv¨g
("övÆid off£t\n", *
¨gv
);

571 
p
->
off£t
 = 
uvÆ
;

572 } i‡(
	`°rcmp
(*
¨gv
, "peer_offset") == 0) {

573 
__u8
 
uvÆ
;

574 
	`NEXT_ARG
();

575 i‡(
	`gë_u8
(&
uvÆ
, *
¨gv
, 0))

576 
	`öv¨g
("övÆid off£t\n", *
¨gv
);

577 
p
->
≥î_off£t
 = 
uvÆ
;

578 } i‡(
	`°rcmp
(*
¨gv
, "cookie") == 0) {

579 
¶í
;

580 
	`NEXT_ARG
();

581 
¶í
 = 
	`°æí
(*
¨gv
);

582 i‡((
¶í
 != 8) && (slen != 16))

583 
	`öv¨g
("cookõ mu° bêeôhî 8 o∏16 hex digôs\n", *
¨gv
);

585 
p
->
cookõ_Àn
 = 
¶í
 / 2;

586 i‡(
	`hex2mem
(*
¨gv
, 
p
->
cookõ
,Ö->
cookõ_Àn
) < 0)

587 
	`öv¨g
("cookõ mu° bê®hex såög\n", *
¨gv
);

588 } i‡(
	`°rcmp
(*
¨gv
, "peer_cookie") == 0) {

589 
¶í
;

590 
	`NEXT_ARG
();

591 
¶í
 = 
	`°æí
(*
¨gv
);

592 i‡((
¶í
 != 8) && (slen != 16))

593 
	`öv¨g
("cookõ mu° bêeôhî 8 o∏16 hex digôs\n", *
¨gv
);

595 
p
->
≥î_cookõ_Àn
 = 
¶í
 / 2;

596 i‡(
	`hex2mem
(*
¨gv
, 
p
->
≥î_cookõ
,Ö->
≥î_cookõ_Àn
) < 0)

597 
	`öv¨g
("cookõ mu° bê®hex såög\n", *
¨gv
);

598 } i‡(
	`°rcmp
(*
¨gv
, "l2spec_type") == 0) {

599 
	`NEXT_ARG
();

600 i‡(
	`°rˇ£cmp
(*
¨gv
, "default") == 0) {

601 
p
->
l2•ec_ty≥
 = 
L2TP_L2SPECTYPE_DEFAULT
;

602 
p
->
l2•ec_Àn
 = 4;

603 } i‡(
	`°rˇ£cmp
(*
¨gv
, "none") == 0) {

604 
p
->
l2•ec_ty≥
 = 
L2TP_L2SPECTYPE_NONE
;

605 
p
->
l2•ec_Àn
 = 0;

607 
	`Ârötf
(
°dîr
, "Unknow¿œyî2•ecifi¯hódîÅy≥ \"%s\"\n", *
¨gv
);

608 
	`exô
(-1);

610 } i‡(
	`°rcmp
(*
¨gv
, "tunnel") == 0) {

611 
p
->
tu¬ñ
 = 1;

612 } i‡(
	`°rcmp
(*
¨gv
, "session") == 0) {

613 
p
->
£ssi⁄
 = 1;

614 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

615 
	`ußge
();

617 
	`Ârötf
(
°dîr
, "Unknow¿comm™d: %s\n", *
¨gv
);

618 
	`ußge
();

621 
¨gc
--; 
¨gv
++;

625 
	}
}

628 
	$do_add
(
¨gc
, **
¨gv
)

630 
l2ç_∑rm
 
p
;

631 
ªt
 = 0;

633 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, 
L2TP_ADD
, &
p
) < 0)

636 i‡(!
p
.
tu¬ñ
 && !p.
£ssi⁄
)

637 
	`misßrg
("tunnel or session");

639 i‡(
p
.
tu¬ñ_id
 == 0)

640 
	`misßrg
("tunnel_id");

643 i‡((
p
.
£ssi⁄
Ë&& (p.
≥î_£ssi⁄_id
 == 0))

644 
	`misßrg
("peer_session_id");

645 i‡((
p
.
£ssi⁄
Ë&& (p.
£ssi⁄_id
 == 0))

646 
	`misßrg
("session_id");

649 i‡((
p
.
tu¬ñ
Ë&& (p.
≥î_tu¬ñ_id
 == 0))

650 
	`misßrg
("peer_tunnel_id");

652 i‡(
p
.
tu¬ñ
) {

653 i‡(
p
.
loˇl_ù
.
Ámûy
 =
AF_UNSPEC
)

654 
	`misßrg
("local");

656 i‡(
p
.
≥î_ù
.
Ámûy
 =
AF_UNSPEC
)

657 
	`misßrg
("remote");

659 i‡(
p
.
íˇp
 =
L2TP_ENCAPTYPE_UDP
) {

660 i‡(
p
.
loˇl_udp_p‹t
 == 0)

661 
	`misßrg
("udp_sport");

662 i‡(
p
.
≥î_udp_p‹t
 == 0)

663 
	`misßrg
("udp_dport");

666 
ªt
 = 
	`¸óã_tu¬ñ
(&
p
);

669 i‡(
p
.
£ssi⁄
) {

671 
p
.
pw_ty≥
 = 
L2TP_PWTYPE_ETH
;

673 
ªt
 = 
	`¸óã_£ssi⁄
(&
p
);

676  
ªt
;

677 
	}
}

679 
	$do_dñ
(
¨gc
, **
¨gv
)

681 
l2ç_∑rm
 
p
;

683 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, 
L2TP_DEL
, &
p
) < 0)

686 i‡(!
p
.
tu¬ñ
 && !p.
£ssi⁄
)

687 
	`misßrg
("tunnel or session");

689 i‡((
p
.
tu¬ñ
Ë&& (p.
tu¬ñ_id
 == 0))

690 
	`misßrg
("tunnel_id");

691 i‡((
p
.
£ssi⁄
Ë&& (p.
£ssi⁄_id
 == 0))

692 
	`misßrg
("session_id");

694 i‡(
p
.
£ssi⁄_id
)

695  
	`dñëe_£ssi⁄
(&
p
);

697  
	`dñëe_tu¬ñ
(&
p
);

700 
	}
}

702 
	$do_show
(
¨gc
, **
¨gv
)

704 
l2ç_d©a
 
d©a
;

705 
l2ç_∑rm
 *
p
 = &
d©a
.
c⁄fig
;

707 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, 
L2TP_GET
, 
p
) < 0)

710 i‡(!
p
->
tu¬ñ
 && !p->
£ssi⁄
)

711 
	`misßrg
("tunnel or session");

713 i‡(
p
->
£ssi⁄
)

714 
	`gë_£ssi⁄
(&
d©a
);

716 
	`gë_tu¬ñ
(&
d©a
);

719 
	}
}

721 
	$do_ùl2ç
(
¨gc
, **
¨gv
)

723 i‡(
gíl_Ámûy
 < 0) {

724 i‡(
	`π∆_›í_by¥Ÿo
(&
gíl_πh
, 0, 
NETLINK_GENERIC
) < 0) {

725 
	`Ârötf
(
°dîr
, "Cannot open genericÇetlink socket\n");

726 
	`exô
(1);

729 
gíl_Ámûy
 = 
	`gíl_ªsﬁve_Ámûy
(&
gíl_πh
, 
L2TP_GENL_NAME
);

730 i‡(
gíl_Ámûy
 < 0)

731 
	`exô
(1);

734 i‡(
¨gc
 < 1)

735 
	`ußge
();

737 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

738  
	`do_add
(
¨gc
-1, 
¨gv
+1);

739 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

740  
	`do_dñ
(
¨gc
-1, 
¨gv
+1);

741 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

742 
	`m©ches
(*
¨gv
, "lst") == 0 ||

743 
	`m©ches
(*
¨gv
, "list") == 0)

744  
	`do_show
(
¨gc
-1, 
¨gv
+1);

745 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

746 
	`ußge
();

748 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ùÜ2ç hñp\".\n", *
¨gv
);

749 
	`exô
(-1);

750 
	}
}

	@ip/iplink.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<dlf˙.h
>

19 
	~<î∫o.h
>

20 
	~<sys/sockë.h
>

21 
	~<löux/if.h
>

22 
	~<löux/if_∑ckë.h
>

23 
	~<löux/if_ëhî.h
>

24 
	~<löux/sockios.h
>

25 
	~<√töë/ö.h
>

26 
	~<¨∑/öë.h
>

27 
	~<°rög.h
>

28 
	~<sys/io˘l.h
>

29 
	~<löux/sockios.h
>

30 
	~<°dboﬁ.h
>

32 
	~"π_«mes.h
"

33 
	~"utûs.h
"

34 
	~"ù_comm⁄.h
"

35 
	~"«me•a˚.h
"

37 
	#IPLINK_IOCTL_COMPAT
 1

	)

38 #i‚de‡
LIBDIR


39 
	#LIBDIR
 "/u§/lib"

	)

42 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

43 
	`ùlök_have_√wlök
();

45 
	$ùlök_ußge
()

47 i‡(
	`ùlök_have_√wlök
()) {

48 
	`Ârötf
(
°dîr
, "Usage: ipÜinkádd [link DEV] [Çame ] NAME\n");

49 
	`Ârötf
(
°dîr
, " [Åxqueuelen PACKETS ]\n");

50 
	`Ârötf
(
°dîr
, " [áddress LLADDR ]\n");

51 
	`Ârötf
(
°dîr
, " [ broadcast LLADDR ]\n");

52 
	`Ârötf
(
°dîr
, " [ mtu MTU ] [index IDX ]\n");

53 
	`Ârötf
(
°dîr
, " [Çumtxqueues QUEUE_COUNT ]\n");

54 
	`Ârötf
(
°dîr
, " [Çumrxqueues QUEUE_COUNT ]\n");

55 
	`Ârötf
(
°dîr
, "Åype TYPE [ ARGS ]\n");

56 
	`Ârötf
(
°dîr
, " ipÜink delete { DEVICE | dev DEVICE | group DEVGROUP }Åype TYPE [ ARGS ]\n");

57 
	`Ârötf
(
°dîr
, "\n");

58 
	`Ârötf
(
°dîr
, " ipÜink set { DEVICE | dev DEVICE | group DEVGROUP } [ { up | down } ]\n");

60 
	`Ârötf
(
°dîr
, "Usage: ipÜink set DEVICE [ { up | down } ]\n");

62 
	`Ârötf
(
°dîr
, " [árp { on | off } ]\n");

63 
	`Ârötf
(
°dîr
, " [ dynamic { on | off } ]\n");

64 
	`Ârötf
(
°dîr
, " [ multicast { on | off } ]\n");

65 
	`Ârötf
(
°dîr
, " [állmulticast { on | off } ]\n");

66 
	`Ârötf
(
°dîr
, " [Öromisc { on | off } ]\n");

67 
	`Ârötf
(
°dîr
, " [Årailers { on | off } ]\n");

68 
	`Ârötf
(
°dîr
, " [Åxqueuelen PACKETS ]\n");

69 
	`Ârötf
(
°dîr
, " [Çame NEWNAME ]\n");

70 
	`Ârötf
(
°dîr
, " [áddress LLADDR ]\n");

71 
	`Ârötf
(
°dîr
, " [ broadcast LLADDR ]\n");

72 
	`Ârötf
(
°dîr
, " [ mtu MTU ]\n");

73 
	`Ârötf
(
°dîr
, " [Çetns PID ]\n");

74 
	`Ârötf
(
°dîr
, " [Çetns NAME ]\n");

75 
	`Ârötf
(
°dîr
, " [Üink-netnsid ID ]\n");

76 
	`Ârötf
(
°dîr
, " [álias NAME ]\n");

77 
	`Ârötf
(
°dîr
, " [ vf NUM [ mac LLADDR ]\n");

78 
	`Ârötf
(
°dîr
, " [ vlan VLANID [ qos VLAN-QOS ] ]\n");

80 
	`Ârötf
(
°dîr
, " [Ñate TXRATE ] ]\n");

82 
	`Ârötf
(
°dîr
, " [ spoofchk { on | off} ] ]\n");

83 
	`Ârötf
(
°dîr
, " [ query_rss { on | off} ] ]\n");

84 
	`Ârötf
(
°dîr
, " [ state {áuto |Énable | disable} ] ]\n");

85 
	`Ârötf
(
°dîr
, " [ master DEVICE ]\n");

86 
	`Ârötf
(
°dîr
, " [Çomaster ]\n");

87 
	`Ârötf
(
°dîr
, " [áddrgenmode {Éui64 |Çone } ]\n");

88 
	`Ârötf
(
°dîr
, " [Örotodown { on | off } ]\n");

89 
	`Ârötf
(
°dîr
, " ipÜink show [ DEVICE | group GROUP ] [up] [master DEV] [type TYPE]\n");

91 i‡(
	`ùlök_have_√wlök
()) {

92 
	`Ârötf
(
°dîr
, " ipÜink help [ TYPE ]\n");

93 
	`Ârötf
(
°dîr
, "\n");

94 
	`Ârötf
(
°dîr
, "TYPE := { vlan | veth | vcan | dummy | ifb | macvlan | macvtap |\n");

95 
	`Ârötf
(
°dîr
, " bridge | bond | ipoib | ip6tnl | ipip | sit | vxlan |\n");

96 
	`Ârötf
(
°dîr
, " gre | gretap | ip6gre | ip6gretap | vti |Çlmon |\n");

97 
	`Ârötf
(
°dîr
, " bond_slave | ipvlan | geneve | bridge_slave | vrf }\n");

99 
	`exô
(-1);

100 
	}
}

102 
	$ußge
()

104 
	`ùlök_ußge
();

105 
	}
}

107 
	$⁄_off
(c⁄° *
msg
, c⁄° *
ªÆvÆ
)

109 
	`Ârötf
(
°dîr
,

111 
msg
, 
ªÆvÆ
);

113 
	}
}

115 *
	gBODY
;

116 
lök_utû
 *
	glökutû_li°
;

118 
lök_utû
 *
	$__gë_lök_köd
(c⁄° *
id
, 
boﬁ
 
¶ave
)

120 *
dlh
;

121 
buf
[256];

122 
lök_utû
 *
l
;

124 
l
 = 
lökutû_li°
;Ü;Ü =Ü->
√xt
)

125 i‡(
	`°rcmp
(
l
->
id
, id) == 0 &&

126 
l
->
¶ave
 == slave)

127  
l
;

129 
	`¢¥ötf
(
buf
, (buf), 
LIBDIR
 "/ù/lök_%s.so", 
id
);

130 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

131 i‡(
dlh
 =
NULL
) {

133 
dlh
 = 
BODY
;

134 i‡(
dlh
 =
NULL
) {

135 
dlh
 = 
BODY
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

136 i‡(
dlh
 =
NULL
)

137  
NULL
;

141 i‡(
¶ave
)

142 
	`¢¥ötf
(
buf
, (buf), "%s_¶ave_lök_utû", 
id
);

144 
	`¢¥ötf
(
buf
, (buf), "%s_lök_utû", 
id
);

145 
l
 = 
	`dlsym
(
dlh
, 
buf
);

146 i‡(
l
 =
NULL
)

147  
NULL
;

149 
l
->
√xt
 = 
lökutû_li°
;

150 
lökutû_li°
 = 
l
;

151  
l
;

152 
	}
}

154 
lök_utû
 *
	$gë_lök_köd
(c⁄° *
id
)

156  
	`__gë_lök_köd
(
id
, 
Ál£
);

157 
	}
}

159 
lök_utû
 *
	$gë_lök_¶ave_köd
(c⁄° *
id
)

161  
	`__gë_lök_köd
(
id
, 
åue
);

162 
	}
}

164 
	$gë_lök_mode
(c⁄° *
mode
)

166 i‡(
	`°rˇ£cmp
(
mode
, "default") == 0)

167  
IF_LINK_MODE_DEFAULT
;

168 i‡(
	`°rˇ£cmp
(
mode
, "dormant") == 0)

169  
IF_LINK_MODE_DORMANT
;

171 
	}
}

173 
	$gë_addr_gí_mode
(c⁄° *
mode
)

175 i‡(
	`°rˇ£cmp
(
mode
, "eui64") == 0)

176  
IN6_ADDR_GEN_MODE_EUI64
;

177 i‡(
	`°rˇ£cmp
(
mode
, "none") == 0)

178  
IN6_ADDR_GEN_MODE_NONE
;

180 
	}
}

182 #i‡
IPLINK_IOCTL_COMPAT


183 
	ghave_π∆_√wlök
 = -1;

185 
	$ac˚±_msg
(c⁄° 
sockaddr_∆
 *
who
,

186 
π∆_˘æ_d©a
 *
˘æ
,

187 
∆msghdr
 *
n
, *
¨g
)

189 
∆msgîr
 *
îr
 = (∆msgî∏*)
	`NLMSG_DATA
(
n
);

191 i‡(
n
->
∆msg_ty≥
 =
NLMSG_ERROR
 &&

192 (
îr
->
îr‹
 =-
EOPNOTSUPP
 ||Éº->îr‹ =-
EINVAL
))

193 
have_π∆_√wlök
 = 0;

195 
have_π∆_√wlök
 = 1;

197 
	}
}

199 
	$ùlök_have_√wlök
()

202 
∆msghdr
 
n
;

203 
iföfomsg
 
i
;

204 
buf
[1024];

205 } 
ªq
;

207 i‡(
have_π∆_√wlök
 < 0) {

208 
	`mem£t
(&
ªq
, 0, (req));

210 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iföfomsg
));

211 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
NLM_F_ACK
;

212 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_NEWLINK
;

213 
ªq
.
i
.
ifi_Ámûy
 = 
AF_UNSPEC
;

215 i‡(
	`π∆_£nd
(&
πh
, &
ªq
.
n
,Ñeq.n.
∆msg_Àn
) < 0) {

216 
	`≥º‹
("request send failed");

217 
	`exô
(1);

219 
	`π∆_li°í
(&
πh
, 
ac˚±_msg
, 
NULL
);

221  
have_π∆_√wlök
;

222 
	}
}

224 
	$ùlök_have_√wlök
()

227 
	}
}

230 
	sùlök_ªq
 {

231 
∆msghdr
 
	mn
;

232 
iföfomsg
 
	mi
;

233 
	mbuf
[1024];

236 
	$ùlök_∑r£_vf
(
vf
, *
¨g˝
, ***
¨gvp
,

237 
ùlök_ªq
 *
ªq
, 
dev_ödex
)

239 
√w_øã_≠i
 = 0, 
cou¡
 = 0, 
ovîride_Àgacy_øã
 = 0;

240 
iÊa_vf_øã
 
tivt
;

241 
Àn
, 
¨gc
 = *
¨g˝
;

242 **
¨gv
 = *
¨gvp
;

243 
π©å
 *
vföfo
;

245 
tivt
.
mö_tx_øã
 = -1;

246 
tivt
.
max_tx_øã
 = -1;

248 
vföfo
 = 
	`add©å_√°
(&
ªq
->
n
, (*ªq), 
IFLA_VF_INFO
);

250 
	`NEXT_ARG_OK
()) {

251 
	`NEXT_ARG
();

252 
cou¡
++;

253 i‡(!
	`m©ches
(*
¨gv
, "max_tx_rate")) {

255 
√w_øã_≠i
 = 1;

257 
ovîride_Àgacy_øã
 = 1;

258 } i‡(!
	`m©ches
(*
¨gv
, "min_tx_rate")) {

260 
√w_øã_≠i
 = 1;

264 
cou¡
--) {

266 
	`PREV_ARG
();

269 
	`NEXT_ARG_OK
()) {

270 
	`NEXT_ARG
();

271 i‡(
	`m©ches
(*
¨gv
, "mac") == 0) {

272 
iÊa_vf_mac
 
ivm
;

274 
	`NEXT_ARG
();

275 
ivm
.
vf
 = vf;

276 
Àn
 = 
	`Œ_addr_a2n
((*)
ivm
.
mac
, 32, *
¨gv
);

277 i‡(
Àn
 < 0)

279 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_VF_MAC
, &
ivm
, (ivm));

280 } i‡(
	`m©ches
(*
¨gv
, "vlan") == 0) {

281 
iÊa_vf_vœn
 
ivv
;

283 
	`NEXT_ARG
();

284 i‡(
	`gë_unsig√d
(&
ivv
.
vœn
, *
¨gv
, 0))

285 
	`öv¨g
("InvÆid \"vœn\" vÆue\n", *
¨gv
);

287 
ivv
.
vf
 = vf;

288 
ivv
.
qos
 = 0;

289 i‡(
	`NEXT_ARG_OK
()) {

290 
	`NEXT_ARG
();

291 i‡(
	`m©ches
(*
¨gv
, "qos") == 0) {

292 
	`NEXT_ARG
();

293 i‡(
	`gë_unsig√d
(&
ivv
.
qos
, *
¨gv
, 0))

294 
	`öv¨g
("InvÆid \"qos\" vÆue\n", *
¨gv
);

297 
	`PREV_ARG
();

300 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_VF_VLAN
, &
ivv
, (ivv));

301 } i‡(
	`m©ches
(*
¨gv
, "rate") == 0) {

302 
iÊa_vf_tx_øã
 
ivt
;

304 
	`NEXT_ARG
();

305 i‡(
	`gë_unsig√d
(&
ivt
.
øã
, *
¨gv
, 0))

306 
	`öv¨g
("InvÆid \"øã\" vÆue\n", *
¨gv
);

308 
ivt
.
vf
 = vf;

309 i‡(!
√w_øã_≠i
)

310 
	`add©å_l
(&
ªq
->
n
, (*req),

311 
IFLA_VF_TX_RATE
, &
ivt
, (ivt));

312 i‡(!
ovîride_Àgacy_øã
)

313 
tivt
.
max_tx_øã
 = 
ivt
.
øã
;

315 } i‡(
	`m©ches
(*
¨gv
, "max_tx_rate") == 0) {

316 
	`NEXT_ARG
();

317 i‡(
	`gë_unsig√d
(&
tivt
.
max_tx_øã
, *
¨gv
, 0))

318 
	`öv¨g
("Invalid \"maxÅxÑate\" value\n",

319 *
¨gv
);

320 
tivt
.
vf
 = vf;

322 } i‡(
	`m©ches
(*
¨gv
, "min_tx_rate") == 0) {

323 
	`NEXT_ARG
();

324 i‡(
	`gë_unsig√d
(&
tivt
.
mö_tx_øã
, *
¨gv
, 0))

325 
	`öv¨g
("Invalid \"minÅxÑate\" value\n",

326 *
¨gv
);

327 
tivt
.
vf
 = vf;

329 } i‡(
	`m©ches
(*
¨gv
, "spoofchk") == 0) {

330 
iÊa_vf_•oofchk
 
ivs
;

332 
	`NEXT_ARG
();

333 i‡(
	`m©ches
(*
¨gv
, "on") == 0)

334 
ivs
.
£âög
 = 1;

335 i‡(
	`m©ches
(*
¨gv
, "off") == 0)

336 
ivs
.
£âög
 = 0;

338  
	`⁄_off
("•oofchk", *
¨gv
);

339 
ivs
.
vf
 = vf;

340 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_VF_SPOOFCHK
, &
ivs
, (ivs));

342 } i‡(
	`m©ches
(*
¨gv
, "query_rss") == 0) {

343 
iÊa_vf_rss_quîy_í
 
ivs
;

345 
	`NEXT_ARG
();

346 i‡(
	`m©ches
(*
¨gv
, "on") == 0)

347 
ivs
.
£âög
 = 1;

348 i‡(
	`m©ches
(*
¨gv
, "off") == 0)

349 
ivs
.
£âög
 = 0;

351  
	`⁄_off
("quîy_rss", *
¨gv
);

352 
ivs
.
vf
 = vf;

353 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_VF_RSS_QUERY_EN
, &
ivs
, (ivs));

355 } i‡(
	`m©ches
(*
¨gv
, "state") == 0) {

356 
iÊa_vf_lök_°©e
 
ivl
;

358 
	`NEXT_ARG
();

359 i‡(
	`m©ches
(*
¨gv
, "auto") == 0)

360 
ivl
.
lök_°©e
 = 
IFLA_VF_LINK_STATE_AUTO
;

361 i‡(
	`m©ches
(*
¨gv
, "enable") == 0)

362 
ivl
.
lök_°©e
 = 
IFLA_VF_LINK_STATE_ENABLE
;

363 i‡(
	`m©ches
(*
¨gv
, "disable") == 0)

364 
ivl
.
lök_°©e
 = 
IFLA_VF_LINK_STATE_DISABLE
;

366 
	`öv¨g
("InvÆid \"°©e\" vÆue\n", *
¨gv
);

367 
ivl
.
vf
 = vf;

368 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_VF_LINK_STATE
, &
ivl
, (ivl));

371 
	`PREV_ARG
();

376 i‡(
√w_øã_≠i
) {

377 
tmö
, 
tmax
;

379 i‡(
tivt
.
mö_tx_øã
 =-1 ||Åivt.
max_tx_øã
 == -1) {

380 
	`ùaddr_gë_vf_øã
(
tivt
.
vf
, &
tmö
, &
tmax
, 
dev_ödex
);

381 i‡(
tivt
.
mö_tx_øã
 == -1)

382 
tivt
.
mö_tx_øã
 = 
tmö
;

383 i‡(
tivt
.
max_tx_øã
 == -1)

384 
tivt
.
max_tx_øã
 = 
tmax
;

386 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_VF_RATE
, &
tivt
,

387 (
tivt
));

390 i‡(
¨gc
 =*
¨g˝
)

391 
	`öcom∂ëe_comm™d
();

393 
	`add©å_√°_íd
(&
ªq
->
n
, 
vföfo
);

395 *
¨g˝
 = 
¨gc
;

396 *
¨gvp
 = 
¨gv
;

398 
	}
}

400 
	$ùlök_∑r£
(
¨gc
, **
¨gv
, 
ùlök_ªq
 *
ªq
,

401 **
«me
, **
ty≥
, **
lök
, **
dev
,

402 *
group
, *
ödex
)

404 
ªt
, 
Àn
;

405 
abuf
[32];

406 
qÀn
 = -1;

407 
mtu
 = -1;

408 
√äs
 = -1;

409 
vf
 = -1;

410 
numtxqueues
 = -1;

411 
numrxqueues
 = -1;

412 
dev_ödex
 = 0;

413 
lök_√äsid
 = -1;

415 *
group
 = -1;

416 
ªt
 = 
¨gc
;

418 
¨gc
 > 0) {

419 i‡(
	`°rcmp
(*
¨gv
, "up") == 0) {

420 
ªq
->
i
.
ifi_ch™ge
 |
IFF_UP
;

421 
ªq
->
i
.
ifi_Êags
 |
IFF_UP
;

422 } i‡(
	`°rcmp
(*
¨gv
, "down") == 0) {

423 
ªq
->
i
.
ifi_ch™ge
 |
IFF_UP
;

424 
ªq
->
i
.
ifi_Êags
 &~
IFF_UP
;

425 } i‡(
	`°rcmp
(*
¨gv
, "name") == 0) {

426 
	`NEXT_ARG
();

427 *
«me
 = *
¨gv
;

428 } i‡(
	`°rcmp
(*
¨gv
, "index") == 0) {

429 
	`NEXT_ARG
();

430 *
ödex
 = 
	`©oi
(*
¨gv
);

431 i‡(*
ödex
 < 0)

432 
	`öv¨g
("InvÆid \"ödex\" vÆue", *
¨gv
);

433 } i‡(
	`m©ches
(*
¨gv
, "link") == 0) {

434 
	`NEXT_ARG
();

435 *
lök
 = *
¨gv
;

436 } i‡(
	`m©ches
(*
¨gv
, "address") == 0) {

437 
	`NEXT_ARG
();

438 
Àn
 = 
	`Œ_addr_a2n
(
abuf
, ◊buf), *
¨gv
);

439 i‡(
Àn
 < 0)

441 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_ADDRESS
, 
abuf
, 
Àn
);

442 } i‡(
	`m©ches
(*
¨gv
, "broadcast") == 0 ||

443 
	`°rcmp
(*
¨gv
, "brd") == 0) {

444 
	`NEXT_ARG
();

445 
Àn
 = 
	`Œ_addr_a2n
(
abuf
, ◊buf), *
¨gv
);

446 i‡(
Àn
 < 0)

448 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_BROADCAST
, 
abuf
, 
Àn
);

449 } i‡(
	`m©ches
(*
¨gv
, "txqueuelen") == 0 ||

450 
	`°rcmp
(*
¨gv
, "qlen") == 0 ||

451 
	`m©ches
(*
¨gv
, "txqlen") == 0) {

452 
	`NEXT_ARG
();

453 i‡(
qÀn
 != -1)

454 
	`du∑rg
("txqueuñí", *
¨gv
);

455 i‡(
	`gë_öãgî
(&
qÀn
, *
¨gv
, 0))

456 
	`öv¨g
("InvÆid \"txqueuñí\" vÆue\n", *
¨gv
);

457 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_TXQLEN
, &
qÀn
, 4);

458 } i‡(
	`°rcmp
(*
¨gv
, "mtu") == 0) {

459 
	`NEXT_ARG
();

460 i‡(
mtu
 != -1)

461 
	`du∑rg
("mtu", *
¨gv
);

462 i‡(
	`gë_öãgî
(&
mtu
, *
¨gv
, 0))

463 
	`öv¨g
("InvÆid \"mtu\" vÆue\n", *
¨gv
);

464 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_MTU
, &
mtu
, 4);

465 } i‡(
	`°rcmp
(*
¨gv
, "netns") == 0) {

466 
	`NEXT_ARG
();

467 i‡(
√äs
 != -1)

468 
	`du∑rg
("√äs", *
¨gv
);

469 
√äs
 = 
	`√äs_gë_fd
(*
¨gv
);

470 i‡(
√äs
 >= 0)

471 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_NET_NS_FD
, &
√äs
, 4);

472 i‡(
	`gë_öãgî
(&
√äs
, *
¨gv
, 0) == 0)

473 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_NET_NS_PID
, &
√äs
, 4);

475 
	`öv¨g
("InvÆid \"√äs\" vÆue\n", *
¨gv
);

476 } i‡(
	`°rcmp
(*
¨gv
, "multicast") == 0) {

477 
	`NEXT_ARG
();

478 
ªq
->
i
.
ifi_ch™ge
 |
IFF_MULTICAST
;

480 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

481 
ªq
->
i
.
ifi_Êags
 |
IFF_MULTICAST
;

482 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

483 
ªq
->
i
.
ifi_Êags
 &~
IFF_MULTICAST
;

485  
	`⁄_off
("mu…iˇ°", *
¨gv
);

486 } i‡(
	`°rcmp
(*
¨gv
, "allmulticast") == 0) {

487 
	`NEXT_ARG
();

488 
ªq
->
i
.
ifi_ch™ge
 |
IFF_ALLMULTI
;

490 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

491 
ªq
->
i
.
ifi_Êags
 |
IFF_ALLMULTI
;

492 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

493 
ªq
->
i
.
ifi_Êags
 &~
IFF_ALLMULTI
;

495  
	`⁄_off
("Ælmu…iˇ°", *
¨gv
);

496 } i‡(
	`°rcmp
(*
¨gv
, "promisc") == 0) {

497 
	`NEXT_ARG
();

498 
ªq
->
i
.
ifi_ch™ge
 |
IFF_PROMISC
;

500 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

501 
ªq
->
i
.
ifi_Êags
 |
IFF_PROMISC
;

502 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

503 
ªq
->
i
.
ifi_Êags
 &~
IFF_PROMISC
;

505  
	`⁄_off
("¥omisc", *
¨gv
);

506 } i‡(
	`°rcmp
(*
¨gv
, "trailers") == 0) {

507 
	`NEXT_ARG
();

508 
ªq
->
i
.
ifi_ch™ge
 |
IFF_NOTRAILERS
;

510 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

511 
ªq
->
i
.
ifi_Êags
 |
IFF_NOTRAILERS
;

512 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

513 
ªq
->
i
.
ifi_Êags
 &~
IFF_NOTRAILERS
;

515  
	`⁄_off
("åaûîs", *
¨gv
);

516 } i‡(
	`°rcmp
(*
¨gv
, "arp") == 0) {

517 
	`NEXT_ARG
();

518 
ªq
->
i
.
ifi_ch™ge
 |
IFF_NOARP
;

520 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

521 
ªq
->
i
.
ifi_Êags
 &~
IFF_NOARP
;

522 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

523 
ªq
->
i
.
ifi_Êags
 |
IFF_NOARP
;

525  
	`⁄_off
("¨p", *
¨gv
);

526 } i‡(
	`°rcmp
(*
¨gv
, "vf") == 0) {

527 
π©å
 *
vÊi°
;

529 
	`NEXT_ARG
();

530 i‡(
	`gë_öãgî
(&
vf
, *
¨gv
, 0))

531 
	`öv¨g
("InvÆid \"vf\" vÆue\n", *
¨gv
);

533 
vÊi°
 = 
	`add©å_√°
(&
ªq
->
n
, (*req),

534 
IFLA_VFINFO_LIST
);

535 i‡(
dev_ödex
 == 0)

536 
	`misßrg
("dev");

538 
Àn
 = 
	`ùlök_∑r£_vf
(
vf
, &
¨gc
, &
¨gv
, 
ªq
, 
dev_ödex
);

539 i‡(
Àn
 < 0)

541 
	`add©å_√°_íd
(&
ªq
->
n
, 
vÊi°
);

542 } i‡(
	`m©ches
(*
¨gv
, "master") == 0) {

543 
ifödex
;

545 
	`NEXT_ARG
();

546 
ifödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
);

547 i‡(!
ifödex
)

548 
	`öv¨g
("Devi˚ d€†nŸÉxi°\n", *
¨gv
);

549 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_MASTER
,

550 &
ifödex
, 4);

551 } i‡(
	`m©ches
(*
¨gv
, "nomaster") == 0) {

552 
ifödex
 = 0;

554 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_MASTER
,

555 &
ifödex
, 4);

556 } i‡(
	`m©ches
(*
¨gv
, "dynamic") == 0) {

557 
	`NEXT_ARG
();

558 
ªq
->
i
.
ifi_ch™ge
 |
IFF_DYNAMIC
;

560 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

561 
ªq
->
i
.
ifi_Êags
 |
IFF_DYNAMIC
;

562 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

563 
ªq
->
i
.
ifi_Êags
 &~
IFF_DYNAMIC
;

565  
	`⁄_off
("dy«mic", *
¨gv
);

566 } i‡(
	`m©ches
(*
¨gv
, "type") == 0) {

567 
	`NEXT_ARG
();

568 *
ty≥
 = *
¨gv
;

569 
¨gc
--; 
¨gv
++;

571 } i‡(
	`m©ches
(*
¨gv
, "alias") == 0) {

572 
	`NEXT_ARG
();

573 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_IFALIAS
,

574 *
¨gv
, 
	`°æí
(*argv));

575 
¨gc
--; 
¨gv
++;

577 } i‡(
	`°rcmp
(*
¨gv
, "group") == 0) {

578 
	`NEXT_ARG
();

579 i‡(*
group
 != -1)

580 
	`du∑rg
("group", *
¨gv
);

581 i‡(
	`π∆_group_a2n
(
group
, *
¨gv
))

582 
	`öv¨g
("InvÆid \"group\" vÆue\n", *
¨gv
);

583 } i‡(
	`°rcmp
(*
¨gv
, "mode") == 0) {

584 
mode
;

586 
	`NEXT_ARG
();

587 
mode
 = 
	`gë_lök_mode
(*
¨gv
);

588 i‡(
mode
 < 0)

589 
	`öv¨g
("InvÆidÜök mode\n", *
¨gv
);

590 
	`add©å8
(&
ªq
->
n
, (*ªq), 
IFLA_LINKMODE
, 
mode
);

591 } i‡(
	`°rcmp
(*
¨gv
, "state") == 0) {

592 
°©e
;

594 
	`NEXT_ARG
();

595 
°©e
 = 
	`gë_›î°©e
(*
¨gv
);

596 i‡(
°©e
 < 0)

597 
	`öv¨g
("InvÆid o≥r°©e\n", *
¨gv
);

599 
	`add©å8
(&
ªq
->
n
, (*ªq), 
IFLA_OPERSTATE
, 
°©e
);

600 } i‡(
	`m©ches
(*
¨gv
, "numtxqueues") == 0) {

601 
	`NEXT_ARG
();

602 i‡(
numtxqueues
 != -1)

603 
	`du∑rg
("numtxqueues", *
¨gv
);

604 i‡(
	`gë_öãgî
(&
numtxqueues
, *
¨gv
, 0))

605 
	`öv¨g
("InvÆid \"numtxqueues\" vÆue\n", *
¨gv
);

606 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_NUM_TX_QUEUES
,

607 &
numtxqueues
, 4);

608 } i‡(
	`m©ches
(*
¨gv
, "numrxqueues") == 0) {

609 
	`NEXT_ARG
();

610 i‡(
numrxqueues
 != -1)

611 
	`du∑rg
("numrxqueues", *
¨gv
);

612 i‡(
	`gë_öãgî
(&
numrxqueues
, *
¨gv
, 0))

613 
	`öv¨g
("InvÆid \"numrxqueues\" vÆue\n", *
¨gv
);

614 
	`add©å_l
(&
ªq
->
n
, (*ªq), 
IFLA_NUM_RX_QUEUES
,

615 &
numrxqueues
, 4);

616 } i‡(
	`m©ches
(*
¨gv
, "addrgenmode") == 0) {

617 
π©å
 *
afs
, *
afs6
;

618 
mode
;

620 
	`NEXT_ARG
();

621 
mode
 = 
	`gë_addr_gí_mode
(*
¨gv
);

622 i‡(
mode
 < 0)

623 
	`öv¨g
("InvÆidáddªs†gíî©i⁄ mode\n", *
¨gv
);

624 
afs
 = 
	`add©å_√°
(&
ªq
->
n
, (*ªq), 
IFLA_AF_SPEC
);

625 
afs6
 = 
	`add©å_√°
(&
ªq
->
n
, (*ªq), 
AF_INET6
);

626 
	`add©å8
(&
ªq
->
n
, (*ªq), 
IFLA_INET6_ADDR_GEN_MODE
, 
mode
);

627 
	`add©å_√°_íd
(&
ªq
->
n
, 
afs6
);

628 
	`add©å_√°_íd
(&
ªq
->
n
, 
afs
);

629 } i‡(
	`m©ches
(*
¨gv
, "link-netnsid") == 0) {

630 
	`NEXT_ARG
();

631 i‡(
lök_√äsid
 != -1)

632 
	`du∑rg
("lök-√äsid", *
¨gv
);

633 i‡(
	`gë_öãgî
(&
lök_√äsid
, *
¨gv
, 0))

634 
	`öv¨g
("InvÆid \"lök-√äsid\" vÆue\n", *
¨gv
);

635 
	`add©å32
(&
ªq
->
n
, (*ªq), 
IFLA_LINK_NETNSID
,

636 
lök_√äsid
);

637 } i‡(
	`°rcmp
(*
¨gv
, "protodown") == 0) {

638 
¥Ÿo_down
;

640 
	`NEXT_ARG
();

641 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

642 
¥Ÿo_down
 = 1;

643 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

644 
¥Ÿo_down
 = 0;

646  
	`⁄_off
("¥Ÿodown", *
¨gv
);

647 
	`add©å8
(&
ªq
->
n
, (*ªq), 
IFLA_PROTO_DOWN
,

648 
¥Ÿo_down
);

650 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

651 
	`ußge
();

653 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0)

654 
	`NEXT_ARG
();

655 i‡(*
dev
)

656 
	`du∑rg2
("dev", *
¨gv
);

657 *
dev
 = *
¨gv
;

658 
dev_ödex
 = 
	`Œ_«me_to_ödex
(*
dev
);

660 
¨gc
--; 
¨gv
++;

663  
ªt
 - 
¨gc
;

664 
	}
}

666 
	$ùlök_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

668 
Àn
;

669 *
dev
 = 
NULL
;

670 *
«me
 = 
NULL
;

671 *
lök
 = 
NULL
;

672 *
ty≥
 = 
NULL
;

673 
ödex
 = -1;

674 
group
;

675 
lök_utû
 *
lu
 = 
NULL
;

676 
ùlök_ªq
 
ªq
;

677 
ªt
;

679 
	`mem£t
(&
ªq
, 0, (req));

681 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iföfomsg
));

682 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

683 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

684 
ªq
.
i
.
ifi_Ámûy
 = 
¥e„ºed_Ámûy
;

686 
ªt
 = 
	`ùlök_∑r£
(
¨gc
, 
¨gv
, &
ªq
, &
«me
, &
ty≥
, &
lök
, &
dev
, &
group
, &
ödex
);

687 i‡(
ªt
 < 0)

688  
ªt
;

690 
¨gc
 -
ªt
;

691 
¨gv
 +
ªt
;

693 i‡(
group
 != -1) {

694 i‡(
dev
)

695 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFLA_GROUP
,

696 &
group
, (group));

698 i‡(
¨gc
) {

699 
	`Ârötf
(
°dîr
, "Garbage instead ofárguments "

701 "hñp\".\n", *
¨gv
);

704 i‡(
Êags
 & 
NLM_F_CREATE
) {

705 
	`Ârötf
(
°dîr
, "group cannot be used when "

710 
ªq
.
i
.
ifi_ödex
 = 0;

711 
	`add©å32
(&
ªq
.
n
, ‘eq), 
IFLA_GROUP
, 
group
);

712 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

713 
	`exô
(2);

718 i‡(!(
Êags
 & 
NLM_F_CREATE
)) {

719 i‡(!
dev
) {

720 
	`Ârötf
(
°dîr
, "NotÉnough information: \"dev\" "

722 
	`exô
(-1);

724 i‡(
cmd
 =
RTM_NEWLINK
 && 
ödex
 != -1) {

725 
	`Ârötf
(
°dîr
, "index can be used only when "

727 
	`exô
(-1);

730 
ªq
.
i
.
ifi_ödex
 = 
	`Œ_«me_to_ödex
(
dev
);

731 i‡(
ªq
.
i
.
ifi_ödex
 == 0) {

732 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
dev
);

737 i‡(!
«me
)

738 
«me
 = 
dev
;

740 i‡(
lök
) {

741 
ifödex
;

743 
ifödex
 = 
	`Œ_«me_to_ödex
(
lök
);

744 i‡(
ifödex
 == 0) {

745 
	`Ârötf
(
°dîr
, "Cannot find device \"%s\"\n",

746 
lök
);

749 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFLA_LINK
, &
ifödex
, 4);

752 i‡(
ödex
 == -1)

753 
ªq
.
i
.
ifi_ödex
 = 0;

755 
ªq
.
i
.
ifi_ödex
 = 
ödex
;

758 i‡(
«me
) {

759 
Àn
 = 
	`°æí
(
«me
) + 1;

760 i‡(
Àn
 == 1)

761 
	`öv¨g
("\"\" isÇotá valid device identifier\n", "name");

762 i‡(
Àn
 > 
IFNAMSIZ
)

763 
	`öv¨g
("\"«me\"Åoÿl⁄g\n", 
«me
);

764 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFLA_IFNAME
, 
«me
, 
Àn
);

767 i‡(
ty≥
) {

768 
π©å
 *
lököfo
;

769 
¶avebuf
[128], *
ulöï
 = 
	`°rchr
(
ty≥
, '_');

770 
iÊ©y≥
;

772 
lököfo
 = 
	`add©å_√°
(&
ªq
.
n
, ‘eq), 
IFLA_LINKINFO
);

773 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFLA_INFO_KIND
, 
ty≥
,

774 
	`°æí
(
ty≥
));

776 i‡(
ulöï
 && !
	`°rcmp
(ulinep, "_slave")) {

777 
	`°∫˝y
(
¶avebuf
, 
ty≥
, (slavebuf));

778 
¶avebuf
[(slavebuf) - 1] = '\0';

779 
ulöï
 = 
	`°rchr
(
¶avebuf
, '_');

781 i‡(
ulöï
)

782 *
ulöï
 = '\0';

783 
lu
 = 
	`gë_lök_¶ave_köd
(
¶avebuf
);

784 
iÊ©y≥
 = 
IFLA_INFO_SLAVE_DATA
;

786 
lu
 = 
	`gë_lök_köd
(
ty≥
);

787 
iÊ©y≥
 = 
IFLA_INFO_DATA
;

789 i‡(
lu
 && 
¨gc
) {

790 
π©å
 *
d©a
 = 
	`add©å_√°
(&
ªq
.
n
, ‘eq), 
iÊ©y≥
);

792 i‡(
lu
->
∑r£_›t
 &&

793 
lu
->
	`∑r£_›t
÷u, 
¨gc
, 
¨gv
, &
ªq
.
n
))

796 
	`add©å_√°_íd
(&
ªq
.
n
, 
d©a
);

797 } i‡(
¨gc
) {

798 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

799 
	`ußge
();

800 
	`Ârötf
(
°dîr
, "Garbage instead ofárguments \"%s ...\". "

801 "Try \"ùÜök hñp\".\n", *
¨gv
);

804 
	`add©å_√°_íd
(&
ªq
.
n
, 
lököfo
);

805 } i‡(
Êags
 & 
NLM_F_CREATE
) {

806 
	`Ârötf
(
°dîr
, "NotÉnough information: \"type\"árgument "

811 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

812 
	`exô
(2);

815 
	}
}

817 
	$ùlök_gë
(
Êags
, *
«me
, 
__u32
 
fût_mask
)

819 
Àn
;

820 
ùlök_ªq
 
ªq
;

822 
∆msghdr
 
n
;

823 
buf
[16384];

824 } 
™swî
;

826 
	`mem£t
(&
ªq
, 0, (req));

828 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iföfomsg
));

829 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

830 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETLINK
;

831 
ªq
.
i
.
ifi_Ámûy
 = 
¥e„ºed_Ámûy
;

833 i‡(
«me
) {

834 
Àn
 = 
	`°æí
(
«me
) + 1;

835 i‡(
Àn
 == 1)

836 
	`öv¨g
("\"\" isÇotá valid device identifier\n",

838 i‡(
Àn
 > 
IFNAMSIZ
)

839 
	`öv¨g
("\"«me\"Åoÿl⁄g\n", 
«me
);

840 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFLA_IFNAME
, 
«me
, 
Àn
);

842 
	`add©å32
(&
ªq
.
n
, ‘eq), 
IFLA_EXT_MASK
, 
fût_mask
);

844 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, &
™swî
.n, (answer)) < 0)

847 i‡(
brõf
)

848 
	`¥öt_lököfo_brõf
(
NULL
, &
™swî
.
n
, 
°dout
);

850 
	`¥öt_lököfo
(
NULL
, &
™swî
.
n
, 
°dout
);

853 
	}
}

855 #i‡
IPLINK_IOCTL_COMPAT


856 
	$gë_˘l_fd
()

858 
s_î∫o
;

859 
fd
;

861 
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

862 i‡(
fd
 >= 0)

863  
fd
;

864 
s_î∫o
 = 
î∫o
;

865 
fd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 0);

866 i‡(
fd
 >= 0)

867  
fd
;

868 
fd
 = 
	`sockë
(
PF_INET6
, 
SOCK_DGRAM
, 0);

869 i‡(
fd
 >= 0)

870  
fd
;

871 
î∫o
 = 
s_î∫o
;

872 
	`≥º‹
("Cannot create control socket");

874 
	}
}

876 
	$do_chÊags
(c⁄° *
dev
, 
__u32
 
Êags
, __u32 
mask
)

878 
i‰eq
 
i‰
;

879 
fd
;

880 
îr
;

882 
	`°∫˝y
(
i‰
.
i‰_«me
, 
dev
, 
IFNAMSIZ
);

883 
fd
 = 
	`gë_˘l_fd
();

884 i‡(
fd
 < 0)

886 
îr
 = 
	`io˘l
(
fd
, 
SIOCGIFFLAGS
, &
i‰
);

887 i‡(
îr
) {

888 
	`≥º‹
("SIOCGIFFLAGS");

889 
	`˛o£
(
fd
);

892 i‡((
i‰
.
i‰_Êags
^
Êags
)&
mask
) {

893 
i‰
.
i‰_Êags
 &~
mask
;

894 
i‰
.
i‰_Êags
 |
mask
&
Êags
;

895 
îr
 = 
	`io˘l
(
fd
, 
SIOCSIFFLAGS
, &
i‰
);

896 i‡(
îr
)

897 
	`≥º‹
("SIOCSIFFLAGS");

899 
	`˛o£
(
fd
);

900  
îr
;

901 
	}
}

903 
	$do_ch™gíame
(c⁄° *
dev
, c⁄° *
√wdev
)

905 
i‰eq
 
i‰
;

906 
fd
;

907 
îr
;

909 
	`°∫˝y
(
i‰
.
i‰_«me
, 
dev
, 
IFNAMSIZ
);

910 
	`°∫˝y
(
i‰
.
i‰_√w«me
, 
√wdev
, 
IFNAMSIZ
);

911 
fd
 = 
	`gë_˘l_fd
();

912 i‡(
fd
 < 0)

914 
îr
 = 
	`io˘l
(
fd
, 
SIOCSIFNAME
, &
i‰
);

915 i‡(
îr
) {

916 
	`≥º‹
("SIOCSIFNAME");

917 
	`˛o£
(
fd
);

920 
	`˛o£
(
fd
);

921  
îr
;

922 
	}
}

924 
	$£t_qÀn
(c⁄° *
dev
, 
qÀn
)

926 
i‰eq
 
i‰
;

927 
s
;

929 
s
 = 
	`gë_˘l_fd
();

930 i‡(
s
 < 0)

933 
	`mem£t
(&
i‰
, 0, (ifr));

934 
	`°∫˝y
(
i‰
.
i‰_«me
, 
dev
, 
IFNAMSIZ
);

935 
i‰
.
i‰_qÀn
 = 
qÀn
;

936 i‡(
	`io˘l
(
s
, 
SIOCSIFTXQLEN
, &
i‰
) < 0) {

937 
	`≥º‹
("SIOCSIFXQLEN");

938 
	`˛o£
(
s
);

941 
	`˛o£
(
s
);

944 
	}
}

946 
	$£t_mtu
(c⁄° *
dev
, 
mtu
)

948 
i‰eq
 
i‰
;

949 
s
;

951 
s
 = 
	`gë_˘l_fd
();

952 i‡(
s
 < 0)

955 
	`mem£t
(&
i‰
, 0, (ifr));

956 
	`°∫˝y
(
i‰
.
i‰_«me
, 
dev
, 
IFNAMSIZ
);

957 
i‰
.
i‰_mtu
 = 
mtu
;

958 i‡(
	`io˘l
(
s
, 
SIOCSIFMTU
, &
i‰
) < 0) {

959 
	`≥º‹
("SIOCSIFMTU");

960 
	`˛o£
(
s
);

963 
	`˛o£
(
s
);

966 
	}
}

968 
	$gë_addªss
(c⁄° *
dev
, *
hty≥
)

970 
i‰eq
 
i‰
;

971 
sockaddr_Œ
 
me
;

972 
sockÀn_t
 
Æí
;

973 
s
;

975 
s
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 0);

976 i‡(
s
 < 0) {

977 
	`≥º‹
("socket(PF_PACKET)");

981 
	`mem£t
(&
i‰
, 0, (ifr));

982 
	`°∫˝y
(
i‰
.
i‰_«me
, 
dev
, 
IFNAMSIZ
);

983 i‡(
	`io˘l
(
s
, 
SIOCGIFINDEX
, &
i‰
) < 0) {

984 
	`≥º‹
("SIOCGIFINDEX");

985 
	`˛o£
(
s
);

989 
	`mem£t
(&
me
, 0, (me));

990 
me
.
¶l_Ámûy
 = 
AF_PACKET
;

991 
me
.
¶l_ifödex
 = 
i‰
.
i‰_ifödex
;

992 
me
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_LOOP
);

993 i‡(
	`böd
(
s
, (
sockaddr
 *)&
me
, (me)) == -1) {

994 
	`≥º‹
("bind");

995 
	`˛o£
(
s
);

999 
Æí
 = (
me
);

1000 i‡(
	`gësock«me
(
s
, (
sockaddr
 *)&
me
, &
Æí
) == -1) {

1001 
	`≥º‹
("getsockname");

1002 
	`˛o£
(
s
);

1005 
	`˛o£
(
s
);

1006 *
hty≥
 = 
me
.
¶l_h©y≥
;

1007  
me
.
¶l_hÆí
;

1008 
	}
}

1010 
	$∑r£_addªss
(c⁄° *
dev
, 
h©y≥
, 
hÆí
,

1011 *
Œa
, 
i‰eq
 *
i‰
)

1013 
Æí
;

1015 
	`mem£t
(
i‰
, 0, (*ifr));

1016 
	`°∫˝y
(
i‰
->
i‰_«me
, 
dev
, 
IFNAMSIZ
);

1017 
i‰
->
i‰_hwaddr
.
ß_Ámûy
 = 
h©y≥
;

1018 
Æí
 = 
	`Œ_addr_a2n
(
i‰
->
i‰_hwaddr
.
ß_d©a
, 14, 
Œa
);

1019 i‡(
Æí
 < 0)

1021 i‡(
Æí
 !
hÆí
) {

1022 
	`Ârötf
(
°dîr
, "Wr⁄gáddªs†(%sËÀngth:Éx≥˘ed %d byãs\n", 
Œa
, 
hÆí
);

1026 
	}
}

1028 
	$£t_addªss
(
i‰eq
 *
i‰
, 
brd
)

1030 
s
;

1032 
s
 = 
	`gë_˘l_fd
();

1033 i‡(
s
 < 0)

1035 i‡(
	`io˘l
(
s
, 
brd
?
SIOCSIFHWBROADCAST
:
SIOCSIFHWADDR
, 
i‰
) < 0) {

1036 
	`≥º‹
(
brd
?"SIOCSIFHWBROADCAST":"SIOCSIFHWADDR");

1037 
	`˛o£
(
s
);

1040 
	`˛o£
(
s
);

1042 
	}
}

1044 
	$do_£t
(
¨gc
, **
¨gv
)

1046 *
dev
 = 
NULL
;

1047 
__u32
 
mask
 = 0;

1048 
__u32
 
Êags
 = 0;

1049 
qÀn
 = -1;

1050 
mtu
 = -1;

1051 *
√waddr
 = 
NULL
;

1052 *
√wbrd
 = 
NULL
;

1053 
i‰eq
 
i‰0
, 
i‰1
;

1054 *
√w«me
 = 
NULL
;

1055 
hty≥
, 
hÆí
;

1057 
¨gc
 > 0) {

1058 i‡(
	`°rcmp
(*
¨gv
, "up") == 0) {

1059 
mask
 |
IFF_UP
;

1060 
Êags
 |
IFF_UP
;

1061 } i‡(
	`°rcmp
(*
¨gv
, "down") == 0) {

1062 
mask
 |
IFF_UP
;

1063 
Êags
 &~
IFF_UP
;

1064 } i‡(
	`°rcmp
(*
¨gv
, "name") == 0) {

1065 
	`NEXT_ARG
();

1066 
√w«me
 = *
¨gv
;

1067 } i‡(
	`m©ches
(*
¨gv
, "address") == 0) {

1068 
	`NEXT_ARG
();

1069 
√waddr
 = *
¨gv
;

1070 } i‡(
	`m©ches
(*
¨gv
, "broadcast") == 0 ||

1071 
	`°rcmp
(*
¨gv
, "brd") == 0) {

1072 
	`NEXT_ARG
();

1073 
√wbrd
 = *
¨gv
;

1074 } i‡(
	`m©ches
(*
¨gv
, "txqueuelen") == 0 ||

1075 
	`°rcmp
(*
¨gv
, "qlen") == 0 ||

1076 
	`m©ches
(*
¨gv
, "txqlen") == 0) {

1077 
	`NEXT_ARG
();

1078 i‡(
qÀn
 != -1)

1079 
	`du∑rg
("txqueuñí", *
¨gv
);

1080 i‡(
	`gë_öãgî
(&
qÀn
, *
¨gv
, 0))

1081 
	`öv¨g
("InvÆid \"txqueuñí\" vÆue\n", *
¨gv
);

1082 } i‡(
	`°rcmp
(*
¨gv
, "mtu") == 0) {

1083 
	`NEXT_ARG
();

1084 i‡(
mtu
 != -1)

1085 
	`du∑rg
("mtu", *
¨gv
);

1086 i‡(
	`gë_öãgî
(&
mtu
, *
¨gv
, 0))

1087 
	`öv¨g
("InvÆid \"mtu\" vÆue\n", *
¨gv
);

1088 } i‡(
	`°rcmp
(*
¨gv
, "multicast") == 0) {

1089 
	`NEXT_ARG
();

1090 
mask
 |
IFF_MULTICAST
;

1092 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

1093 
Êags
 |
IFF_MULTICAST
;

1094 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

1095 
Êags
 &~
IFF_MULTICAST
;

1097  
	`⁄_off
("mu…iˇ°", *
¨gv
);

1098 } i‡(
	`°rcmp
(*
¨gv
, "allmulticast") == 0) {

1099 
	`NEXT_ARG
();

1100 
mask
 |
IFF_ALLMULTI
;

1102 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

1103 
Êags
 |
IFF_ALLMULTI
;

1104 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

1105 
Êags
 &~
IFF_ALLMULTI
;

1107  
	`⁄_off
("Ælmu…iˇ°", *
¨gv
);

1108 } i‡(
	`°rcmp
(*
¨gv
, "promisc") == 0) {

1109 
	`NEXT_ARG
();

1110 
mask
 |
IFF_PROMISC
;

1112 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

1113 
Êags
 |
IFF_PROMISC
;

1114 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

1115 
Êags
 &~
IFF_PROMISC
;

1117  
	`⁄_off
("¥omisc", *
¨gv
);

1118 } i‡(
	`°rcmp
(*
¨gv
, "trailers") == 0) {

1119 
	`NEXT_ARG
();

1120 
mask
 |
IFF_NOTRAILERS
;

1122 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

1123 
Êags
 |
IFF_NOTRAILERS
;

1124 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

1125 
Êags
 &~
IFF_NOTRAILERS
;

1127  
	`⁄_off
("åaûîs", *
¨gv
);

1128 } i‡(
	`°rcmp
(*
¨gv
, "arp") == 0) {

1129 
	`NEXT_ARG
();

1130 
mask
 |
IFF_NOARP
;

1132 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

1133 
Êags
 &~
IFF_NOARP
;

1134 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

1135 
Êags
 |
IFF_NOARP
;

1137  
	`⁄_off
("¨p", *
¨gv
);

1138 } i‡(
	`m©ches
(*
¨gv
, "dynamic") == 0) {

1139 
	`NEXT_ARG
();

1140 
mask
 |
IFF_DYNAMIC
;

1142 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

1143 
Êags
 |
IFF_DYNAMIC
;

1144 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

1145 
Êags
 &~
IFF_DYNAMIC
;

1147  
	`⁄_off
("dy«mic", *
¨gv
);

1149 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0)

1150 
	`NEXT_ARG
();

1151 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

1152 
	`ußge
();

1154 i‡(
dev
)

1155 
	`du∑rg2
("dev", *
¨gv
);

1156 
dev
 = *
¨gv
;

1158 
¨gc
--; 
¨gv
++;

1161 i‡(!
dev
) {

1162 
	`Ârötf
(
°dîr
, "NotÉnough of information: \"dev\"árgument isÑequired.\n");

1163 
	`exô
(-1);

1166 i‡(
√waddr
 || 
√wbrd
) {

1167 
hÆí
 = 
	`gë_addªss
(
dev
, &
hty≥
);

1168 i‡(
hÆí
 < 0)

1170 i‡(
√waddr
) {

1171 i‡(
	`∑r£_addªss
(
dev
, 
hty≥
, 
hÆí
, 
√waddr
, &
i‰0
) < 0)

1174 i‡(
√wbrd
) {

1175 i‡(
	`∑r£_addªss
(
dev
, 
hty≥
, 
hÆí
, 
√wbrd
, &
i‰1
) < 0)

1180 i‡(
√w«me
 && 
	`°rcmp
(
dev
,Çewname)) {

1181 i‡(
	`°æí
(
√w«me
) == 0)

1182 
	`öv¨g
("\"\" isÇotá valid device identifier\n", "name");

1183 i‡(
	`do_ch™gíame
(
dev
, 
√w«me
) < 0)

1185 
dev
 = 
√w«me
;

1187 i‡(
qÀn
 != -1) {

1188 i‡(
	`£t_qÀn
(
dev
, 
qÀn
) < 0)

1191 i‡(
mtu
 != -1) {

1192 i‡(
	`£t_mtu
(
dev
, 
mtu
) < 0)

1195 i‡(
√waddr
 || 
√wbrd
) {

1196 i‡(
√wbrd
) {

1197 i‡(
	`£t_addªss
(&
i‰1
, 1) < 0)

1200 i‡(
√waddr
) {

1201 i‡(
	`£t_addªss
(&
i‰0
, 0) < 0)

1205 i‡(
mask
)

1206  
	`do_chÊags
(
dev
, 
Êags
, 
mask
);

1208 
	}
}

1211 
	$do_hñp
(
¨gc
, **
¨gv
)

1213 
lök_utû
 *
lu
 = 
NULL
;

1215 i‡(
¨gc
 <= 0) {

1216 
	`ußge
();

1220 
lu
 = 
	`gë_lök_köd
(*
¨gv
);

1221 i‡(
lu
 &&Üu->
¥öt_hñp
)

1222 
lu
->
	`¥öt_hñp
÷u, 
¨gc
-1, 
¨gv
+1, 
°dout
);

1224 
	`ußge
();

1225 
	}
}

1227 
	$do_ùlök
(
¨gc
, **
¨gv
)

1229 i‡(
¨gc
 < 1)

1230  
	`ùaddr_li°_lök
(0, 
NULL
);

1232 i‡(
	`ùlök_have_√wlök
()) {

1233 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

1234  
	`ùlök_modify
(
RTM_NEWLINK
,

1235 
NLM_F_CREATE
|
NLM_F_EXCL
,

1236 
¨gc
-1, 
¨gv
+1);

1237 i‡(
	`m©ches
(*
¨gv
, "set") == 0 ||

1238 
	`m©ches
(*
¨gv
, "change") == 0)

1239  
	`ùlök_modify
(
RTM_NEWLINK
, 0,

1240 
¨gc
-1, 
¨gv
+1);

1241 i‡(
	`m©ches
(*
¨gv
, "replace") == 0)

1242  
	`ùlök_modify
(
RTM_NEWLINK
,

1243 
NLM_F_CREATE
|
NLM_F_REPLACE
,

1244 
¨gc
-1, 
¨gv
+1);

1245 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

1246  
	`ùlök_modify
(
RTM_DELLINK
, 0,

1247 
¨gc
-1, 
¨gv
+1);

1249 #i‡
IPLINK_IOCTL_COMPAT


1250 i‡(
	`m©ches
(*
¨gv
, "set") == 0)

1251  
	`do_£t
(
¨gc
-1, 
¨gv
+1);

1255 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

1256 
	`m©ches
(*
¨gv
, "lst") == 0 ||

1257 
	`m©ches
(*
¨gv
, "list") == 0)

1258  
	`ùaddr_li°_lök
(
¨gc
-1, 
¨gv
+1);

1260 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

1261 
	`do_hñp
(
¨gc
-1, 
¨gv
+1);

1265 
	`Ârötf
(
°dîr
, "Command \"%s\" is unknown,Åry \"ipÜink help\".\n",

1266 *
¨gv
);

1267 
	`exô
(-1);

1268 
	}
}

	@ip/iplink_bond.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<löux/if_lök.h
>

17 
	~<löux/if_ëhî.h
>

18 
	~<√t/if.h
>

20 
	~"π_«mes.h
"

21 
	~"utûs.h
"

22 
	~"ù_comm⁄.h
"

24 
	#BOND_MAX_ARP_TARGETS
 16

	)

26 c⁄° *
	gmode_tbl
[] = {

34 
NULL
,

37 c⁄° *
	g¨p_vÆid©e_tbl
[] = {

42 
NULL
,

45 c⁄° *
	g¨p_Æl_èrgës_tbl
[] = {

48 
NULL
,

51 c⁄° *
	g¥im¨y_ª£À˘_tbl
[] = {

55 
NULL
,

58 c⁄° *
	gÁû_ovî_mac_tbl
[] = {

62 
NULL
,

65 c⁄° *
	gxmô_hash_pﬁicy_tbl
[] = {

71 
NULL
,

74 c⁄° *
	gœ˝_øã_tbl
[] = {

77 
NULL
,

80 c⁄° *
	gad_£À˘_tbl
[] = {

84 
NULL
,

87 c⁄° *
	$gë_«me
(c⁄° **
tbl
, 
ödex
)

89 
i
;

91 
i
 = 0; 
tbl
[i]; i++)

92 i‡(
i
 =
ödex
)

93  
tbl
[
i
];

96 
	}
}

98 
	$gë_ödex
(c⁄° **
tbl
, *
«me
)

100 
i
, 
ödex
;

103 i‡(
	`gë_öãgî
(&
ödex
, 
«me
, 10) == 0)

104 
i
 = 0; 
tbl
[i]; i++)

105 i‡(
i
 =
ödex
)

106  
i
;

108 
i
 = 0; 
tbl
[i]; i++)

109 i‡(
	`°rcmp
(
tbl
[
i
], 
«me
) == 0)

110  
i
;

113 
	}
}

115 
	$¥öt_ex∂aö
(
FILE
 *
f
)

117 
	`Ârötf
(
f
,

152 
	}
}

154 
	$ex∂aö
()

156 
	`¥öt_ex∂aö
(
°dîr
);

157 
	}
}

159 
	$b⁄d_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

160 
∆msghdr
 *
n
)

162 
__u8
 
mode
, 
u£_ˇºõr
, 
¥im¨y_ª£À˘
, 
Áû_ovî_mac
;

163 
__u8
 
xmô_hash_pﬁicy
, 
num_≥î_nŸif
, 
Æl_¶aves_a˘ive
;

164 
__u8
 
œ˝_øã
, 
ad_£À˘
, 
éb_dy«mic_lb
;

165 
__u16
 
ad_u£r_p‹t_key
, 
ad_a˘‹_sys_¥io
;

166 
__u32
 
miim⁄
, 
updñay
, 
downdñay
, 
¨p_öãrvÆ
, 
¨p_vÆid©e
;

167 
__u32
 
¨p_Æl_èrgës
, 
ª£nd_igmp
, 
mö_löks
, 
Õ_öãrvÆ
;

168 
__u32
 
∑ckës_≥r_¶ave
;

169 
ifödex
;

171 
¨gc
 > 0) {

172 i‡(
	`m©ches
(*
¨gv
, "mode") == 0) {

173 
	`NEXT_ARG
();

174 i‡(
	`gë_ödex
(
mode_tbl
, *
¨gv
) < 0)

175 
	`öv¨g
("övÆid mode", *
¨gv
);

176 
mode
 = 
	`gë_ödex
(
mode_tbl
, *
¨gv
);

177 
	`add©å8
(
n
, 1024, 
IFLA_BOND_MODE
, 
mode
);

178 } i‡(
	`m©ches
(*
¨gv
, "active_slave") == 0) {

179 
	`NEXT_ARG
();

180 
ifödex
 = 
	`if_«mëoödex
(*
¨gv
);

181 i‡(!
ifödex
)

183 
	`add©å32
(
n
, 1024, 
IFLA_BOND_ACTIVE_SLAVE
, 
ifödex
);

184 } i‡(
	`m©ches
(*
¨gv
, "clear_active_slave") == 0) {

185 
	`add©å32
(
n
, 1024, 
IFLA_BOND_ACTIVE_SLAVE
, 0);

186 } i‡(
	`m©ches
(*
¨gv
, "miimon") == 0) {

187 
	`NEXT_ARG
();

188 i‡(
	`gë_u32
(&
miim⁄
, *
¨gv
, 0))

189 
	`öv¨g
("övÆid miim⁄", *
¨gv
);

190 
	`add©å32
(
n
, 1024, 
IFLA_BOND_MIIMON
, 
miim⁄
);

191 } i‡(
	`m©ches
(*
¨gv
, "updelay") == 0) {

192 
	`NEXT_ARG
();

193 i‡(
	`gë_u32
(&
updñay
, *
¨gv
, 0))

194 
	`öv¨g
("övÆid updñay", *
¨gv
);

195 
	`add©å32
(
n
, 1024, 
IFLA_BOND_UPDELAY
, 
updñay
);

196 } i‡(
	`m©ches
(*
¨gv
, "downdelay") == 0) {

197 
	`NEXT_ARG
();

198 i‡(
	`gë_u32
(&
downdñay
, *
¨gv
, 0))

199 
	`öv¨g
("övÆid downdñay", *
¨gv
);

200 
	`add©å32
(
n
, 1024, 
IFLA_BOND_DOWNDELAY
, 
downdñay
);

201 } i‡(
	`m©ches
(*
¨gv
, "use_carrier") == 0) {

202 
	`NEXT_ARG
();

203 i‡(
	`gë_u8
(&
u£_ˇºõr
, *
¨gv
, 0))

204 
	`öv¨g
("övÆid u£_ˇºõr", *
¨gv
);

205 
	`add©å8
(
n
, 1024, 
IFLA_BOND_USE_CARRIER
, 
u£_ˇºõr
);

206 } i‡(
	`m©ches
(*
¨gv
, "arp_interval") == 0) {

207 
	`NEXT_ARG
();

208 i‡(
	`gë_u32
(&
¨p_öãrvÆ
, *
¨gv
, 0))

209 
	`öv¨g
("övÆidáΩ_öãrvÆ", *
¨gv
);

210 
	`add©å32
(
n
, 1024, 
IFLA_BOND_ARP_INTERVAL
, 
¨p_öãrvÆ
);

211 } i‡(
	`m©ches
(*
¨gv
, "arp_ip_target") == 0) {

212 
π©å
 * 
√°
 = 
	`add©å_√°
(
n
, 1024,

213 
IFLA_BOND_ARP_IP_TARGET
);

214 i‡(
	`NEXT_ARG_OK
()) {

215 
	`NEXT_ARG
();

216 *
èrgës
 = 
	`°rdu∑
(*
¨gv
);

217 *
èrgë
 = 
	`°πok
(
èrgës
, ",");

218 
i
;

220 
i
 = 0; 
èrgë
 && i < 
BOND_MAX_ARP_TARGETS
; i++) {

221 
__u32
 
addr
 = 
	`gë_addr32
(
èrgë
);

222 
	`add©å32
(
n
, 1024, 
i
, 
addr
);

223 
èrgë
 = 
	`°πok
(
NULL
, ",");

225 
	`add©å_√°_íd
(
n
, 
√°
);

227 
	`add©å_√°_íd
(
n
, 
√°
);

228 } i‡(
	`m©ches
(*
¨gv
, "arp_validate") == 0) {

229 
	`NEXT_ARG
();

230 i‡(
	`gë_ödex
(
¨p_vÆid©e_tbl
, *
¨gv
) < 0)

231 
	`öv¨g
("övÆidáΩ_vÆid©e", *
¨gv
);

232 
¨p_vÆid©e
 = 
	`gë_ödex
(
¨p_vÆid©e_tbl
, *
¨gv
);

233 
	`add©å32
(
n
, 1024, 
IFLA_BOND_ARP_VALIDATE
, 
¨p_vÆid©e
);

234 } i‡(
	`m©ches
(*
¨gv
, "arp_all_targets") == 0) {

235 
	`NEXT_ARG
();

236 i‡(
	`gë_ödex
(
¨p_Æl_èrgës_tbl
, *
¨gv
) < 0)

237 
	`öv¨g
("övÆidáΩ_Æl_èrgës", *
¨gv
);

238 
¨p_Æl_èrgës
 = 
	`gë_ödex
(
¨p_Æl_èrgës_tbl
, *
¨gv
);

239 
	`add©å32
(
n
, 1024, 
IFLA_BOND_ARP_ALL_TARGETS
, 
¨p_Æl_èrgës
);

240 } i‡(
	`m©ches
(*
¨gv
, "primary") == 0) {

241 
	`NEXT_ARG
();

242 
ifödex
 = 
	`if_«mëoödex
(*
¨gv
);

243 i‡(!
ifödex
)

245 
	`add©å32
(
n
, 1024, 
IFLA_BOND_PRIMARY
, 
ifödex
);

246 } i‡(
	`m©ches
(*
¨gv
, "primary_reselect") == 0) {

247 
	`NEXT_ARG
();

248 i‡(
	`gë_ödex
(
¥im¨y_ª£À˘_tbl
, *
¨gv
) < 0)

249 
	`öv¨g
("övÆidÖrim¨y_ª£À˘", *
¨gv
);

250 
¥im¨y_ª£À˘
 = 
	`gë_ödex
(
¥im¨y_ª£À˘_tbl
, *
¨gv
);

251 
	`add©å8
(
n
, 1024, 
IFLA_BOND_PRIMARY_RESELECT
,

252 
¥im¨y_ª£À˘
);

253 } i‡(
	`m©ches
(*
¨gv
, "fail_over_mac") == 0) {

254 
	`NEXT_ARG
();

255 i‡(
	`gë_ödex
(
Áû_ovî_mac_tbl
, *
¨gv
) < 0)

256 
	`öv¨g
("övÆid faû_ovî_mac", *
¨gv
);

257 
Áû_ovî_mac
 = 
	`gë_ödex
(
Áû_ovî_mac_tbl
, *
¨gv
);

258 
	`add©å8
(
n
, 1024, 
IFLA_BOND_FAIL_OVER_MAC
,

259 
Áû_ovî_mac
);

260 } i‡(
	`m©ches
(*
¨gv
, "xmit_hash_policy") == 0) {

261 
	`NEXT_ARG
();

262 i‡(
	`gë_ödex
(
xmô_hash_pﬁicy_tbl
, *
¨gv
) < 0)

263 
	`öv¨g
("övÆid xmô_hash_pﬁicy", *
¨gv
);

265 
xmô_hash_pﬁicy
 = 
	`gë_ödex
(
xmô_hash_pﬁicy_tbl
, *
¨gv
);

266 
	`add©å8
(
n
, 1024, 
IFLA_BOND_XMIT_HASH_POLICY
,

267 
xmô_hash_pﬁicy
);

268 } i‡(
	`m©ches
(*
¨gv
, "resend_igmp") == 0) {

269 
	`NEXT_ARG
();

270 i‡(
	`gë_u32
(&
ª£nd_igmp
, *
¨gv
, 0))

271 
	`öv¨g
("övÆidÑe£nd_igmp", *
¨gv
);

273 
	`add©å32
(
n
, 1024, 
IFLA_BOND_RESEND_IGMP
, 
ª£nd_igmp
);

274 } i‡(
	`m©ches
(*
¨gv
, "num_grat_arp") == 0 ||

275 
	`m©ches
(*
¨gv
, "num_unsol_na") == 0) {

276 
	`NEXT_ARG
();

277 i‡(
	`gë_u8
(&
num_≥î_nŸif
, *
¨gv
, 0))

278 
	`öv¨g
("invalidÇum_grat_arp|num_unsol_na",

279 *
¨gv
);

281 
	`add©å8
(
n
, 1024, 
IFLA_BOND_NUM_PEER_NOTIF
,

282 
num_≥î_nŸif
);

283 } i‡(
	`m©ches
(*
¨gv
, "all_slaves_active") == 0) {

284 
	`NEXT_ARG
();

285 i‡(
	`gë_u8
(&
Æl_¶aves_a˘ive
, *
¨gv
, 0))

286 
	`öv¨g
("övÆidáŒ_¶aves_a˘ive", *
¨gv
);

288 
	`add©å8
(
n
, 1024, 
IFLA_BOND_ALL_SLAVES_ACTIVE
,

289 
Æl_¶aves_a˘ive
);

290 } i‡(
	`m©ches
(*
¨gv
, "min_links") == 0) {

291 
	`NEXT_ARG
();

292 i‡(
	`gë_u32
(&
mö_löks
, *
¨gv
, 0))

293 
	`öv¨g
("övÆid mö_löks", *
¨gv
);

295 
	`add©å32
(
n
, 1024, 
IFLA_BOND_MIN_LINKS
, 
mö_löks
);

296 } i‡(
	`m©ches
(*
¨gv
, "lp_interval") == 0) {

297 
	`NEXT_ARG
();

298 i‡(
	`gë_u32
(&
Õ_öãrvÆ
, *
¨gv
, 0))

299 
	`öv¨g
("övÆidÜp_öãrvÆ", *
¨gv
);

301 
	`add©å32
(
n
, 1024, 
IFLA_BOND_LP_INTERVAL
, 
Õ_öãrvÆ
);

302 } i‡(
	`m©ches
(*
¨gv
, "packets_per_slave") == 0) {

303 
	`NEXT_ARG
();

304 i‡(
	`gë_u32
(&
∑ckës_≥r_¶ave
, *
¨gv
, 0))

305 
	`öv¨g
("övÆidÖackës_≥r_¶ave", *
¨gv
);

307 
	`add©å32
(
n
, 1024, 
IFLA_BOND_PACKETS_PER_SLAVE
,

308 
∑ckës_≥r_¶ave
);

309 } i‡(
	`m©ches
(*
¨gv
, "lacp_rate") == 0) {

310 
	`NEXT_ARG
();

311 i‡(
	`gë_ödex
(
œ˝_øã_tbl
, *
¨gv
) < 0)

312 
	`öv¨g
("övÆidÜa˝_øã", *
¨gv
);

314 
œ˝_øã
 = 
	`gë_ödex
(
œ˝_øã_tbl
, *
¨gv
);

315 
	`add©å8
(
n
, 1024, 
IFLA_BOND_AD_LACP_RATE
, 
œ˝_øã
);

316 } i‡(
	`m©ches
(*
¨gv
, "ad_select") == 0) {

317 
	`NEXT_ARG
();

318 i‡(
	`gë_ödex
(
ad_£À˘_tbl
, *
¨gv
) < 0)

319 
	`öv¨g
("övÆidád_£À˘", *
¨gv
);

321 
ad_£À˘
 = 
	`gë_ödex
(
ad_£À˘_tbl
, *
¨gv
);

322 
	`add©å8
(
n
, 1024, 
IFLA_BOND_AD_SELECT
, 
ad_£À˘
);

323 } i‡(
	`m©ches
(*
¨gv
, "ad_user_port_key") == 0) {

324 
	`NEXT_ARG
();

325 i‡(
	`gë_u16
(&
ad_u£r_p‹t_key
, *
¨gv
, 0))

326 
	`öv¨g
("övÆidád_u£r_p‹t_key", *
¨gv
);

328 
	`add©å16
(
n
, 1024, 
IFLA_BOND_AD_USER_PORT_KEY
,

329 
ad_u£r_p‹t_key
);

330 } i‡(
	`m©ches
(*
¨gv
, "ad_actor_sys_prio") == 0) {

331 
	`NEXT_ARG
();

332 i‡(
	`gë_u16
(&
ad_a˘‹_sys_¥io
, *
¨gv
, 0))

333 
	`öv¨g
("övÆidád_a˘‹_sys_¥io", *
¨gv
);

335 
	`add©å16
(
n
, 1024, 
IFLA_BOND_AD_ACTOR_SYS_PRIO
,

336 
ad_a˘‹_sys_¥io
);

337 } i‡(
	`m©ches
(*
¨gv
, "ad_actor_system") == 0) {

338 
Àn
;

339 
abuf
[32];

341 
	`NEXT_ARG
();

342 
Àn
 = 
	`Œ_addr_a2n
(
abuf
, ◊buf), *
¨gv
);

343 i‡(
Àn
 < 0)

345 
	`add©å_l
(
n
, 1024, 
IFLA_BOND_AD_ACTOR_SYSTEM
,

346 
abuf
, 
Àn
);

347 } i‡(
	`m©ches
(*
¨gv
, "tlb_dynamic_lb") == 0) {

348 
	`NEXT_ARG
();

349 i‡(
	`gë_u8
(&
éb_dy«mic_lb
, *
¨gv
, 0)) {

350 
	`öv¨g
("övÆidÅlb_dy«mic_lb", *
¨gv
);

353 
	`add©å8
(
n
, 1024, 
IFLA_BOND_TLB_DYNAMIC_LB
,

354 
éb_dy«mic_lb
);

355 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

356 
	`ex∂aö
();

359 
	`Ârötf
(
°dîr
, "b⁄d: unknow¿comm™d \"%s\"?\n", *
¨gv
);

360 
	`ex∂aö
();

363 
¨gc
--, 
¨gv
++;

367 
	}
}

369 
	$b⁄d_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

371 
ifödex
;

373 i‡(!
tb
)

376 i‡(
tb
[
IFLA_BOND_MODE
]) {

377 c⁄° *
mode
 = 
	`gë_«me
(
mode_tbl
,

378 
	`πa_gë©å_u8
(
tb
[
IFLA_BOND_MODE
]));

379 
	`Ârötf
(
f
, "modê%†", 
mode
);

382 i‡(
tb
[
IFLA_BOND_ACTIVE_SLAVE
] &&

383 (
ifödex
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_ACTIVE_SLAVE
]))) {

384 
buf
[
IFNAMSIZ
];

385 c⁄° *
n
 = 
	`if_ödext⁄ame
(
ifödex
, 
buf
);

387 i‡(
n
)

388 
	`Ârötf
(
f
, "a˘ive_¶avê%†", 
n
);

390 
	`Ârötf
(
f
, "a˘ive_¶avê%u ", 
ifödex
);

393 i‡(
tb
[
IFLA_BOND_MIIMON
])

394 
	`Ârötf
(
f
, "miim⁄ %u ", 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_MIIMON
]));

396 i‡(
tb
[
IFLA_BOND_UPDELAY
])

397 
	`Ârötf
(
f
, "updñay %u ", 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_UPDELAY
]));

399 i‡(
tb
[
IFLA_BOND_DOWNDELAY
])

400 
	`Ârötf
(
f
, "downdelay %u ",

401 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_DOWNDELAY
]));

403 i‡(
tb
[
IFLA_BOND_USE_CARRIER
])

404 
	`Ârötf
(
f
, "use_carrier %u ",

405 
	`πa_gë©å_u8
(
tb
[
IFLA_BOND_USE_CARRIER
]));

407 i‡(
tb
[
IFLA_BOND_ARP_INTERVAL
])

408 
	`Ârötf
(
f
, "arp_interval %u ",

409 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_ARP_INTERVAL
]));

411 i‡(
tb
[
IFLA_BOND_ARP_IP_TARGET
]) {

412 
π©å
 *
ùtb
[
BOND_MAX_ARP_TARGETS
 + 1];

413 
buf
[
INET_ADDRSTRLEN
];

414 
i
;

416 
	`∑r£_π©å_√°ed
(
ùtb
, 
BOND_MAX_ARP_TARGETS
,

417 
tb
[
IFLA_BOND_ARP_IP_TARGET
]);

419 i‡(
ùtb
[0])

420 
	`Ârötf
(
f
, "arp_ip_target ");

422 
i
 = 0; i < 
BOND_MAX_ARP_TARGETS
; i++) {

423 i‡(
ùtb
[
i
])

424 
	`Ârötf
(
f
, "%s",

425 
	`π_addr_n2a
(
AF_INET
,

426 
	`RTA_PAYLOAD
(
ùtb
[
i
]),

427 
	`RTA_DATA
(
ùtb
[
i
]),

428 
buf
,

429 
INET_ADDRSTRLEN
));

430 i‡(
i
 < 
BOND_MAX_ARP_TARGETS
-1 && 
ùtb
[i+1])

431 
	`Ârötf
(
f
, ",");

434 i‡(
ùtb
[0])

435 
	`Ârötf
(
f
, " ");

438 i‡(
tb
[
IFLA_BOND_ARP_VALIDATE
]) {

439 c⁄° *
¨p_vÆid©e
 = 
	`gë_«me
(
¨p_vÆid©e_tbl
,

440 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_ARP_VALIDATE
]));

441 
	`Ârötf
(
f
, "¨p_vÆid©ê%†", 
¨p_vÆid©e
);

444 i‡(
tb
[
IFLA_BOND_ARP_ALL_TARGETS
]) {

445 c⁄° *
¨p_Æl_èrgës
 = 
	`gë_«me
(
¨p_Æl_èrgës_tbl
,

446 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_ARP_ALL_TARGETS
]));

447 
	`Ârötf
(
f
, "¨p_Æl_èrgë†%†", 
¨p_Æl_èrgës
);

450 i‡(
tb
[
IFLA_BOND_PRIMARY
] &&

451 (
ifödex
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_PRIMARY
]))) {

452 
buf
[
IFNAMSIZ
];

453 c⁄° *
n
 = 
	`if_ödext⁄ame
(
ifödex
, 
buf
);

455 i‡(
n
)

456 
	`Ârötf
(
f
, "¥im¨y %†", 
n
);

458 
	`Ârötf
(
f
, "¥im¨y %u ", 
ifödex
);

461 i‡(
tb
[
IFLA_BOND_PRIMARY_RESELECT
]) {

462 c⁄° *
¥im¨y_ª£À˘
 = 
	`gë_«me
(
¥im¨y_ª£À˘_tbl
,

463 
	`πa_gë©å_u8
(
tb
[
IFLA_BOND_PRIMARY_RESELECT
]));

464 
	`Ârötf
(
f
, "¥im¨y_ª£À˘ %†", 
¥im¨y_ª£À˘
);

467 i‡(
tb
[
IFLA_BOND_FAIL_OVER_MAC
]) {

468 c⁄° *
Áû_ovî_mac
 = 
	`gë_«me
(
Áû_ovî_mac_tbl
,

469 
	`πa_gë©å_u8
(
tb
[
IFLA_BOND_FAIL_OVER_MAC
]));

470 
	`Ârötf
(
f
, "Áû_ovî_ma¯%†", 
Áû_ovî_mac
);

473 i‡(
tb
[
IFLA_BOND_XMIT_HASH_POLICY
]) {

474 c⁄° *
xmô_hash_pﬁicy
 = 
	`gë_«me
(
xmô_hash_pﬁicy_tbl
,

475 
	`πa_gë©å_u8
(
tb
[
IFLA_BOND_XMIT_HASH_POLICY
]));

476 
	`Ârötf
(
f
, "xmô_hash_pﬁicy %†", 
xmô_hash_pﬁicy
);

479 i‡(
tb
[
IFLA_BOND_RESEND_IGMP
])

480 
	`Ârötf
(
f
, "resend_igmp %u ",

481 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_RESEND_IGMP
]));

483 i‡(
tb
[
IFLA_BOND_NUM_PEER_NOTIF
])

484 
	`Ârötf
(
f
, "num_grat_arp %u ",

485 
	`πa_gë©å_u8
(
tb
[
IFLA_BOND_NUM_PEER_NOTIF
]));

487 i‡(
tb
[
IFLA_BOND_ALL_SLAVES_ACTIVE
])

488 
	`Ârötf
(
f
, "all_slaves_active %u ",

489 
	`πa_gë©å_u8
(
tb
[
IFLA_BOND_ALL_SLAVES_ACTIVE
]));

491 i‡(
tb
[
IFLA_BOND_MIN_LINKS
])

492 
	`Ârötf
(
f
, "min_links %u ",

493 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_MIN_LINKS
]));

495 i‡(
tb
[
IFLA_BOND_LP_INTERVAL
])

496 
	`Ârötf
(
f
, "lp_interval %u ",

497 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_LP_INTERVAL
]));

499 i‡(
tb
[
IFLA_BOND_PACKETS_PER_SLAVE
])

500 
	`Ârötf
(
f
, "packets_per_slave %u ",

501 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_PACKETS_PER_SLAVE
]));

503 i‡(
tb
[
IFLA_BOND_AD_LACP_RATE
]) {

504 c⁄° *
œ˝_øã
 = 
	`gë_«me
(
œ˝_øã_tbl
,

505 
	`πa_gë©å_u8
(
tb
[
IFLA_BOND_AD_LACP_RATE
]));

506 
	`Ârötf
(
f
, "œ˝_øã %†", 
œ˝_øã
);

509 i‡(
tb
[
IFLA_BOND_AD_SELECT
]) {

510 c⁄° *
ad_£À˘
 = 
	`gë_«me
(
ad_£À˘_tbl
,

511 
	`πa_gë©å_u8
(
tb
[
IFLA_BOND_AD_SELECT
]));

512 
	`Ârötf
(
f
, "ad_£À˘ %†", 
ad_£À˘
);

515 i‡(
tb
[
IFLA_BOND_AD_INFO
]) {

516 
π©å
 *
adtb
[
IFLA_BOND_AD_INFO_MAX
 + 1];

518 
	`∑r£_π©å_√°ed
(
adtb
, 
IFLA_BOND_AD_INFO_MAX
,

519 
tb
[
IFLA_BOND_AD_INFO
]);

521 i‡(
adtb
[
IFLA_BOND_AD_INFO_AGGREGATOR
])

522 
	`Ârötf
(
f
, "ad_aggregator %d ",

523 
	`πa_gë©å_u16
(
adtb
[
IFLA_BOND_AD_INFO_AGGREGATOR
]));

525 i‡(
adtb
[
IFLA_BOND_AD_INFO_NUM_PORTS
])

526 
	`Ârötf
(
f
, "ad_num_ports %d ",

527 
	`πa_gë©å_u16
(
adtb
[
IFLA_BOND_AD_INFO_NUM_PORTS
]));

529 i‡(
adtb
[
IFLA_BOND_AD_INFO_ACTOR_KEY
])

530 
	`Ârötf
(
f
, "ad_actor_key %d ",

531 
	`πa_gë©å_u16
(
adtb
[
IFLA_BOND_AD_INFO_ACTOR_KEY
]));

533 i‡(
adtb
[
IFLA_BOND_AD_INFO_PARTNER_KEY
])

534 
	`Ârötf
(
f
, "ad_partner_key %d ",

535 
	`πa_gë©å_u16
(
adtb
[
IFLA_BOND_AD_INFO_PARTNER_KEY
]));

537 i‡(
adtb
[
IFLA_BOND_AD_INFO_PARTNER_MAC
]) {

538 *
p
 =

539 
	`RTA_DATA
(
adtb
[
IFLA_BOND_AD_INFO_PARTNER_MAC
]);

540 
	`SPRINT_BUF
(
b
);

541 
	`Ârötf
(
f
, "ad_partner_mac %s ",

542 
	`Œ_addr_n2a
(
p
, 
ETH_ALEN
, 0, 
b
, (b)));

546 i‡(
tb
[
IFLA_BOND_AD_ACTOR_SYS_PRIO
]) {

547 
	`Ârötf
(
f
, "ad_actor_sys_prio %u ",

548 
	`πa_gë©å_u16
(
tb
[
IFLA_BOND_AD_ACTOR_SYS_PRIO
]));

551 i‡(
tb
[
IFLA_BOND_AD_USER_PORT_KEY
]) {

552 
	`Ârötf
(
f
, "ad_user_port_key %u ",

553 
	`πa_gë©å_u16
(
tb
[
IFLA_BOND_AD_USER_PORT_KEY
]));

556 i‡(
tb
[
IFLA_BOND_AD_ACTOR_SYSTEM
]) {

558 
	`SPRINT_BUF
(
b1
);

559 
	`Ârötf
(
f
, "ad_actor_system %s ",

560 
	`Œ_addr_n2a
(
	`RTA_DATA
(
tb
[
IFLA_BOND_AD_ACTOR_SYSTEM
]),

561 
	`RTA_PAYLOAD
(
tb
[
IFLA_BOND_AD_ACTOR_SYSTEM
]),

562 1 , 
b1
, (b1)));

565 i‡(
tb
[
IFLA_BOND_TLB_DYNAMIC_LB
]) {

566 
	`Ârötf
(
f
, "tlb_dynamic_lb %u ",

567 
	`πa_gë©å_u8
(
tb
[
IFLA_BOND_TLB_DYNAMIC_LB
]));

569 
	}
}

571 
	$b⁄d_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

572 
FILE
 *
f
)

574 
	`¥öt_ex∂aö
(
f
);

575 
	}
}

577 
lök_utû
 
	gb⁄d_lök_utû
 = {

578 .
id
 = "bond",

579 .
	gmax©å
 = 
IFLA_BOND_MAX
,

580 .
	g∑r£_›t
 = 
b⁄d_∑r£_›t
,

581 .
	g¥öt_›t
 = 
b⁄d_¥öt_›t
,

582 .
	g¥öt_hñp
 = 
b⁄d_¥öt_hñp
,

	@ip/iplink_bond_slave.c

12 
	~<°dio.h
>

13 
	~<sys/sockë.h
>

14 
	~<löux/if_b⁄dög.h
>

16 
	~"π_«mes.h
"

17 
	~"utûs.h
"

18 
	~"ù_comm⁄.h
"

20 c⁄° *
	g¶ave_°©es
[] = {

21 [
BOND_STATE_ACTIVE
] = "ACTIVE",

22 [
BOND_STATE_BACKUP
] = "BACKUP",

25 
	$¥öt_¶ave_°©e
(
FILE
 *
f
, 
π©å
 *
tb
)

27 
°©e
 = 
	`πa_gë©å_u8
(
tb
);

29 i‡(
°©e
 >(
¶ave_°©es
) / (slave_states[0]))

30 
	`Ârötf
(
f
, "°©ê%d ", 
°©e
);

32 
	`Ârötf
(
f
, "°©ê%†", 
¶ave_°©es
[
°©e
]);

33 
	}
}

35 c⁄° *
	g¶ave_mii_°©us
[] = {

36 [
BOND_LINK_UP
] = "UP",

37 [
BOND_LINK_FAIL
] = "GOING_DOWN",

38 [
BOND_LINK_DOWN
] = "DOWN",

39 [
BOND_LINK_BACK
] = "GOING_BACK",

42 
	$¥öt_¶ave_mii_°©us
(
FILE
 *
f
, 
π©å
 *
tb
)

44 
°©us
 = 
	`πa_gë©å_u8
(
tb
);

46 i‡(
°©us
 >(
¶ave_mii_°©us
) / (slave_mii_status[0]))

47 
	`Ârötf
(
f
, "mii_°©u†%d ", 
°©us
);

49 
	`Ârötf
(
f
, "mii_°©u†%†", 
¶ave_mii_°©us
[
°©us
]);

50 
	}
}

52 
	$b⁄d_¶ave_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

54 
	`SPRINT_BUF
(
b1
);

55 i‡(!
tb
)

58 i‡(
tb
[
IFLA_BOND_SLAVE_STATE
])

59 
	`¥öt_¶ave_°©e
(
f
, 
tb
[
IFLA_BOND_SLAVE_STATE
]);

61 i‡(
tb
[
IFLA_BOND_SLAVE_MII_STATUS
])

62 
	`¥öt_¶ave_mii_°©us
(
f
, 
tb
[
IFLA_BOND_SLAVE_MII_STATUS
]);

64 i‡(
tb
[
IFLA_BOND_SLAVE_LINK_FAILURE_COUNT
])

65 
	`Ârötf
(
f
, "link_failure_count %d ",

66 
	`πa_gë©å_u32
(
tb
[
IFLA_BOND_SLAVE_LINK_FAILURE_COUNT
]));

68 i‡(
tb
[
IFLA_BOND_SLAVE_PERM_HWADDR
])

69 
	`Ârötf
(
f
, "perm_hwaddr %s ",

70 
	`Œ_addr_n2a
(
	`RTA_DATA
(
tb
[
IFLA_BOND_SLAVE_PERM_HWADDR
]),

71 
	`RTA_PAYLOAD
(
tb
[
IFLA_BOND_SLAVE_PERM_HWADDR
]),

72 0, 
b1
, (b1)));

74 i‡(
tb
[
IFLA_BOND_SLAVE_QUEUE_ID
])

75 
	`Ârötf
(
f
, "queue_id %d ",

76 
	`πa_gë©å_u16
(
tb
[
IFLA_BOND_SLAVE_QUEUE_ID
]));

78 i‡(
tb
[
IFLA_BOND_SLAVE_AD_AGGREGATOR_ID
])

79 
	`Ârötf
(
f
, "ad_aggregator_id %d ",

80 
	`πa_gë©å_u16
(
tb
[
IFLA_BOND_SLAVE_AD_AGGREGATOR_ID
]));

82 i‡(
tb
[
IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
])

83 
	`Ârötf
(
f
, "ad_actor_oper_port_state %d\n",

84 
	`πa_gë©å_u8
(
tb
[
IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
]));

86 i‡(
tb
[
IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
])

87 
	`Ârötf
(
f
, "ad_partner_oper_port_state %d\n",

88 
	`πa_gë©å_u16
(
tb
[
IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
]));

89 
	}
}

91 
	$b⁄d_¶ave_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

92 
∆msghdr
 *
n
)

94 
__u16
 
queue_id
;

96 
¨gc
 > 0) {

97 i‡(
	`m©ches
(*
¨gv
, "queue_id") == 0) {

98 
	`NEXT_ARG
();

99 i‡(
	`gë_u16
(&
queue_id
, *
¨gv
, 0))

100 
	`öv¨g
("queue_id i†övÆid", *
¨gv
);

101 
	`add©å16
(
n
, 1024, 
IFLA_BOND_SLAVE_QUEUE_ID
, 
queue_id
);

103 
¨gc
--, 
¨gv
++;

107 
	}
}

109 
lök_utû
 
	gb⁄d_¶ave_lök_utû
 = {

110 .
id
 = "bond",

111 .
	gmax©å
 = 
IFLA_BOND_SLAVE_MAX
,

112 .
	g¥öt_›t
 = 
b⁄d_¶ave_¥öt_›t
,

113 .
	g∑r£_›t
 = 
b⁄d_¶ave_∑r£_›t
,

114 .
	g¶ave
 = 
åue
,

	@ip/iplink_bridge.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<löux/if_lök.h
>

17 
	~"π_«mes.h
"

18 
	~"utûs.h
"

19 
	~"ù_comm⁄.h
"

21 
	$¥öt_ex∂aö
(
FILE
 *
f
)

23 
	`Ârötf
(
f
,

35 
	}
}

37 
	$ex∂aö
()

39 
	`¥öt_ex∂aö
(
°dîr
);

40 
	}
}

42 
	$bridge_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

43 
∆msghdr
 *
n
)

45 
__u32
 
vÆ
;

47 
¨gc
 > 0) {

48 i‡(
	`m©ches
(*
¨gv
, "forward_delay") == 0) {

49 
	`NEXT_ARG
();

50 i‡(
	`gë_u32
(&
vÆ
, *
¨gv
, 0))

51 
	`öv¨g
("övÆid f‹w¨d_dñay", *
¨gv
);

53 
	`add©å32
(
n
, 1024, 
IFLA_BR_FORWARD_DELAY
, 
vÆ
);

54 } i‡(
	`m©ches
(*
¨gv
, "hello_time") == 0) {

55 
	`NEXT_ARG
();

56 i‡(
	`gë_u32
(&
vÆ
, *
¨gv
, 0))

57 
	`öv¨g
("övÆid hñlo_time", *
¨gv
);

59 
	`add©å32
(
n
, 1024, 
IFLA_BR_HELLO_TIME
, 
vÆ
);

60 } i‡(
	`m©ches
(*
¨gv
, "max_age") == 0) {

61 
	`NEXT_ARG
();

62 i‡(
	`gë_u32
(&
vÆ
, *
¨gv
, 0))

63 
	`öv¨g
("övÆid max_age", *
¨gv
);

65 
	`add©å32
(
n
, 1024, 
IFLA_BR_MAX_AGE
, 
vÆ
);

66 } i‡(
	`m©ches
(*
¨gv
, "ageing_time") == 0) {

67 
	`NEXT_ARG
();

68 i‡(
	`gë_u32
(&
vÆ
, *
¨gv
, 0))

69 
	`öv¨g
("övÆidágeög_time", *
¨gv
);

71 
	`add©å32
(
n
, 1024, 
IFLA_BR_AGEING_TIME
, 
vÆ
);

72 } i‡(
	`m©ches
(*
¨gv
, "stp_state") == 0) {

73 
	`NEXT_ARG
();

74 i‡(
	`gë_u32
(&
vÆ
, *
¨gv
, 0))

75 
	`öv¨g
("övÆid sç_°©e", *
¨gv
);

77 
	`add©å32
(
n
, 1024, 
IFLA_BR_STP_STATE
, 
vÆ
);

78 } i‡(
	`m©ches
(*
¨gv
, "priority") == 0) {

79 
__u16
 
¥io
;

81 
	`NEXT_ARG
();

82 i‡(
	`gë_u16
(&
¥io
, *
¨gv
, 0))

83 
	`öv¨g
("övÆidÖri‹ôy", *
¨gv
);

85 
	`add©å16
(
n
, 1024, 
IFLA_BR_PRIORITY
, 
¥io
);

86 } i‡(
	`m©ches
(*
¨gv
, "vlan_filtering") == 0) {

87 
__u8
 
vœn_fûãr
;

89 
	`NEXT_ARG
();

90 i‡(
	`gë_u8
(&
vœn_fûãr
, *
¨gv
, 0)) {

91 
	`öv¨g
("övÆid vœn_fûãrög", *
¨gv
);

94 
	`add©å8
(
n
, 1024, 
IFLA_BR_VLAN_FILTERING
, 
vœn_fûãr
);

95 } i‡(
	`m©ches
(*
¨gv
, "vlan_protocol") == 0) {

96 
__u16
 
vœn_¥Ÿo
;

98 
	`NEXT_ARG
();

99 i‡(
	`Œ_¥Ÿo_a2n
(&
vœn_¥Ÿo
, *
¨gv
)) {

100 
	`öv¨g
("övÆid vœn_¥Ÿocﬁ", *
¨gv
);

103 
	`add©å16
(
n
, 1024, 
IFLA_BR_VLAN_PROTOCOL
, 
vœn_¥Ÿo
);

104 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

105 
	`ex∂aö
();

108 
	`Ârötf
(
°dîr
, "bridge: unknow¿comm™d \"%s\"?\n", *
¨gv
);

109 
	`ex∂aö
();

112 
¨gc
--, 
¨gv
++;

116 
	}
}

118 
	$bridge_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

120 i‡(!
tb
)

123 i‡(
tb
[
IFLA_BR_FORWARD_DELAY
])

124 
	`Ârötf
(
f
, "forward_delay %u ",

125 
	`πa_gë©å_u32
(
tb
[
IFLA_BR_FORWARD_DELAY
]));

127 i‡(
tb
[
IFLA_BR_HELLO_TIME
])

128 
	`Ârötf
(
f
, "hello_time %u ",

129 
	`πa_gë©å_u32
(
tb
[
IFLA_BR_HELLO_TIME
]));

131 i‡(
tb
[
IFLA_BR_MAX_AGE
])

132 
	`Ârötf
(
f
, "max_age %u ",

133 
	`πa_gë©å_u32
(
tb
[
IFLA_BR_MAX_AGE
]));

135 i‡(
tb
[
IFLA_BR_AGEING_TIME
])

136 
	`Ârötf
(
f
, "ageing_time %u ",

137 
	`πa_gë©å_u32
(
tb
[
IFLA_BR_AGEING_TIME
]));

139 i‡(
tb
[
IFLA_BR_STP_STATE
])

140 
	`Ârötf
(
f
, "stp_state %u ",

141 
	`πa_gë©å_u32
(
tb
[
IFLA_BR_STP_STATE
]));

143 i‡(
tb
[
IFLA_BR_PRIORITY
])

144 
	`Ârötf
(
f
, "priority %u ",

145 
	`πa_gë©å_u16
(
tb
[
IFLA_BR_PRIORITY
]));

147 i‡(
tb
[
IFLA_BR_VLAN_FILTERING
])

148 
	`Ârötf
(
f
, "vlan_filtering %u ",

149 
	`πa_gë©å_u8
(
tb
[
IFLA_BR_VLAN_FILTERING
]));

151 i‡(
tb
[
IFLA_BR_VLAN_PROTOCOL
]) {

152 
	`SPRINT_BUF
(
b1
);

154 
	`Ârötf
(
f
, "vlan_protocol %s ",

155 
	`Œ_¥Ÿo_n2a
(
	`πa_gë©å_u16
(
tb
[
IFLA_BR_VLAN_PROTOCOL
]),

156 
b1
, (b1)));

158 
	}
}

160 
	$bridge_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

161 
FILE
 *
f
)

163 
	`¥öt_ex∂aö
(
f
);

164 
	}
}

166 
lök_utû
 
	gbridge_lök_utû
 = {

167 .
id
 = "bridge",

168 .
	gmax©å
 = 
IFLA_BR_MAX
,

169 .
	g∑r£_›t
 = 
bridge_∑r£_›t
,

170 .
	g¥öt_›t
 = 
bridge_¥öt_›t
,

171 .
	g¥öt_hñp
 = 
bridge_¥öt_hñp
,

	@ip/iplink_bridge_slave.c

12 
	~<°dio.h
>

13 
	~<sys/sockë.h
>

14 
	~<√töë/ö.h
>

15 
	~<löux/if_lök.h
>

16 
	~<löux/if_bridge.h
>

18 
	~"π_«mes.h
"

19 
	~"utûs.h
"

20 
	~"ù_comm⁄.h
"

22 
	$¥öt_ex∂aö
(
FILE
 *
f
)

24 
	`Ârötf
(
f
,

33 
	}
}

35 
	$ex∂aö
()

37 
	`¥öt_ex∂aö
(
°dîr
);

38 
	}
}

40 c⁄° *
	gp‹t_°©es
[] = {

41 [
BR_STATE_DISABLED
] = "disabled",

42 [
BR_STATE_LISTENING
] = "listening",

43 [
BR_STATE_LEARNING
] = "learning",

44 [
BR_STATE_FORWARDING
] = "forwarding",

45 [
BR_STATE_BLOCKING
] = "blocking",

48 
	$¥öt_p‹t°©e
(
FILE
 *
f
, 
__u8
 
°©e
)

50 i‡(
°©e
 <
BR_STATE_BLOCKING
)

51 
	`Ârötf
(
f
, "°©ê%†", 
p‹t_°©es
[
°©e
]);

53 
	`Ârötf
(
f
, "°©ê(%dË", 
°©e
);

54 
	}
}

56 
	$¥öt_⁄off
(
FILE
 *
f
, *
Êag
, 
__u8
 
vÆ
)

58 
	`Ârötf
(
f
, "%†%†", 
Êag
, 
vÆ
 ? "on" : "off");

59 
	}
}

61 
	$bridge_¶ave_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
,

62 
π©å
 *
tb
[])

64 i‡(!
tb
)

67 i‡(
tb
[
IFLA_BRPORT_STATE
])

68 
	`¥öt_p‹t°©e
(
f
, 
	`πa_gë©å_u8
(
tb
[
IFLA_BRPORT_STATE
]));

70 i‡(
tb
[
IFLA_BRPORT_PRIORITY
])

71 
	`Ârötf
(
f
, "priority %d ",

72 
	`πa_gë©å_u16
(
tb
[
IFLA_BRPORT_PRIORITY
]));

74 i‡(
tb
[
IFLA_BRPORT_COST
])

75 
	`Ârötf
(
f
, "cost %d ",

76 
	`πa_gë©å_u32
(
tb
[
IFLA_BRPORT_COST
]));

78 i‡(
tb
[
IFLA_BRPORT_MODE
])

79 
	`¥öt_⁄off
(
f
, "hairpin",

80 
	`πa_gë©å_u8
(
tb
[
IFLA_BRPORT_MODE
]));

82 i‡(
tb
[
IFLA_BRPORT_GUARD
])

83 
	`¥öt_⁄off
(
f
, "guard",

84 
	`πa_gë©å_u8
(
tb
[
IFLA_BRPORT_GUARD
]));

86 i‡(
tb
[
IFLA_BRPORT_PROTECT
])

87 
	`¥öt_⁄off
(
f
, "root_block",

88 
	`πa_gë©å_u8
(
tb
[
IFLA_BRPORT_PROTECT
]));

90 i‡(
tb
[
IFLA_BRPORT_FAST_LEAVE
])

91 
	`¥öt_⁄off
(
f
, "fastleave",

92 
	`πa_gë©å_u8
(
tb
[
IFLA_BRPORT_FAST_LEAVE
]));

94 i‡(
tb
[
IFLA_BRPORT_LEARNING
])

95 
	`¥öt_⁄off
(
f
, "learning",

96 
	`πa_gë©å_u8
(
tb
[
IFLA_BRPORT_LEARNING
]));

98 i‡(
tb
[
IFLA_BRPORT_UNICAST_FLOOD
])

99 
	`¥öt_⁄off
(
f
, "flood",

100 
	`πa_gë©å_u8
(
tb
[
IFLA_BRPORT_UNICAST_FLOOD
]));

101 
	}
}

103 
	$bridge_¶ave_∑r£_⁄_off
(*
¨g_«me
, *
¨g_vÆ
,

104 
∆msghdr
 *
n
, 
ty≥
)

106 
__u8
 
vÆ
;

108 i‡(
	`°rcmp
(
¨g_vÆ
, "on") == 0)

109 
vÆ
 = 1;

110 i‡(
	`°rcmp
(
¨g_vÆ
, "off") == 0)

111 
vÆ
 = 0;

113 
	`öv¨g
("should bê\"⁄\" o∏\"off\"", 
¨g_«me
);

115 
	`add©å8
(
n
, 1024, 
ty≥
, 
vÆ
);

116 
	}
}

118 
	$bridge_¶ave_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

119 
∆msghdr
 *
n
)

121 
__u8
 
°©e
;

122 
__u16
 
¥i‹ôy
;

123 
__u32
 
co°
;

125 
¨gc
 > 0) {

126 i‡(
	`m©ches
(*
¨gv
, "state") == 0) {

127 
	`NEXT_ARG
();

128 i‡(
	`gë_u8
(&
°©e
, *
¨gv
, 0))

129 
	`öv¨g
("°©êi†övÆid", *
¨gv
);

130 
	`add©å8
(
n
, 1024, 
IFLA_BRPORT_STATE
, 
°©e
);

131 } i‡(
	`m©ches
(*
¨gv
, "priority") == 0) {

132 
	`NEXT_ARG
();

133 i‡(
	`gë_u16
(&
¥i‹ôy
, *
¨gv
, 0))

134 
	`öv¨g
("¥i‹ôy i†övÆid", *
¨gv
);

135 
	`add©å16
(
n
, 1024, 
IFLA_BRPORT_PRIORITY
, 
¥i‹ôy
);

136 } i‡(
	`m©ches
(*
¨gv
, "cost") == 0) {

137 
	`NEXT_ARG
();

138 i‡(
	`gë_u32
(&
co°
, *
¨gv
, 0))

139 
	`öv¨g
("co° i†övÆid", *
¨gv
);

140 
	`add©å32
(
n
, 1024, 
IFLA_BRPORT_COST
, 
co°
);

141 } i‡(
	`m©ches
(*
¨gv
, "hairpin") == 0) {

142 
	`NEXT_ARG
();

143 
	`bridge_¶ave_∑r£_⁄_off
("haúpö", *
¨gv
, 
n
,

144 
IFLA_BRPORT_MODE
);

145 } i‡(
	`m©ches
(*
¨gv
, "guard") == 0) {

146 
	`NEXT_ARG
();

147 
	`bridge_¶ave_∑r£_⁄_off
("gu¨d", *
¨gv
, 
n
,

148 
IFLA_BRPORT_GUARD
);

149 } i‡(
	`m©ches
(*
¨gv
, "root_block") == 0) {

150 
	`NEXT_ARG
();

151 
	`bridge_¶ave_∑r£_⁄_off
("roŸ_block", *
¨gv
, 
n
,

152 
IFLA_BRPORT_PROTECT
);

153 } i‡(
	`m©ches
(*
¨gv
, "fastleave") == 0) {

154 
	`NEXT_ARG
();

155 
	`bridge_¶ave_∑r£_⁄_off
("Á°Àave", *
¨gv
, 
n
,

156 
IFLA_BRPORT_FAST_LEAVE
);

157 } i‡(
	`m©ches
(*
¨gv
, "learning") == 0) {

158 
	`NEXT_ARG
();

159 
	`bridge_¶ave_∑r£_⁄_off
("À¨nög", *
¨gv
, 
n
,

160 
IFLA_BRPORT_LEARNING
);

161 } i‡(
	`m©ches
(*
¨gv
, "flood") == 0) {

162 
	`NEXT_ARG
();

163 
	`bridge_¶ave_∑r£_⁄_off
("Êood", *
¨gv
, 
n
,

164 
IFLA_BRPORT_UNICAST_FLOOD
);

165 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

166 
	`ex∂aö
();

169 
	`Ârötf
(
°dîr
, "bridge_slave: unknown option \"%s\"?\n",

170 *
¨gv
);

171 
	`ex∂aö
();

174 
¨gc
--, 
¨gv
++;

178 
	}
}

180 
	$bridge_¶ave_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

181 
FILE
 *
f
)

183 
	`¥öt_ex∂aö
(
f
);

184 
	}
}

186 
lök_utû
 
	gbridge_¶ave_lök_utû
 = {

187 .
id
 = "bridge",

188 .
	gmax©å
 = 
IFLA_BRPORT_MAX
,

189 .
	g¥öt_›t
 = 
bridge_¶ave_¥öt_›t
,

190 .
	g∑r£_›t
 = 
bridge_¶ave_∑r£_›t
,

191 .
	g¥öt_hñp
 = 
bridge_¶ave_¥öt_hñp
,

192 .
	g¶ave
 = 
åue
,

	@ip/iplink_can.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

16 
	~<löux/ˇn/√éök.h
>

18 
	~"π_«mes.h
"

19 
	~"utûs.h
"

20 
	~"ù_comm⁄.h
"

22 
	$¥öt_ußge
(
FILE
 *
f
)

24 
	`Ârötf
(
f
,

55 
	}
}

57 
	$ußge
()

59 
	`¥öt_ußge
(
°dîr
);

60 
	}
}

62 
	$gë_Êﬂt
(*
vÆ
, c⁄° *
¨g
)

64 
ªs
;

65 *
±r
;

67 i‡(!
¨g
 || !*arg)

69 
ªs
 = 
	`°πof
(
¨g
, &
±r
);

70 i‡(!
±r
 ||Öå =
¨g
 || *ptr)

72 *
vÆ
 = 
ªs
;

74 
	}
}

76 
	$£t_˘æmode
(* 
«me
, *
¨g
,

77 
ˇn_˘æmode
 *
cm
, 
__u32
 
Êags
)

79 i‡(
	`°rcmp
(
¨g
, "on") == 0) {

80 
cm
->
Êags
 |= flags;

81 } i‡(
	`°rcmp
(
¨g
, "off") != 0) {

82 
	`Ârötf
(
°dîr
,

84 
«me
, 
¨g
);

85 
	`exô
(-1);

87 
cm
->
mask
 |
Êags
;

88 
	}
}

90 
	$¥öt_˘æmode
(
FILE
 *
f
, 
__u32
 
cm
)

92 
	`Ârötf
(
f
, "<");

93 
	#_PF
(
cmÊag
, 
cm«me
) \

94 i‡(
cm
 & 
cmÊag
) { \

95 
cm
 &~
cmÊag
; \

96 
	`Ârötf
(
f
, "%s%s", 
cm«me
, 
cm
 ? "," : ""); \

97 }

	)

98 
	`_PF
(
CAN_CTRLMODE_LOOPBACK
, "LOOPBACK");

99 
	`_PF
(
CAN_CTRLMODE_LISTENONLY
, "LISTEN-ONLY");

100 
	`_PF
(
CAN_CTRLMODE_3_SAMPLES
, "TRIPLE-SAMPLING");

101 
	`_PF
(
CAN_CTRLMODE_ONE_SHOT
, "ONE-SHOT");

102 
	`_PF
(
CAN_CTRLMODE_BERR_REPORTING
, "BERR-REPORTING");

103 
	`_PF
(
CAN_CTRLMODE_FD
, "FD");

104 
	`_PF
(
CAN_CTRLMODE_FD_NON_ISO
, "FD-NON-ISO");

105 
	`_PF
(
CAN_CTRLMODE_PRESUME_ACK
, "PRESUME-ACK");

106 #unde‡
_PF


107 i‡(
cm
)

108 
	`Ârötf
(
f
, "%x", 
cm
);

109 
	`Ârötf
(
f
, "> ");

110 
	}
}

112 
	$ˇn_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

113 
∆msghdr
 *
n
)

115 
ˇn_bôtimög
 
bt
, 
dbt
;

116 
ˇn_˘æmode
 
cm
 = {0, 0};

118 
	`mem£t
(&
bt
, 0, (bt));

119 
	`mem£t
(&
dbt
, 0, (dbt));

120 
¨gc
 > 0) {

121 i‡(
	`m©ches
(*
¨gv
, "bitrate") == 0) {

122 
	`NEXT_ARG
();

123 i‡(
	`gë_u32
(&
bt
.
bôøã
, *
¨gv
, 0))

124 
	`öv¨g
("övÆid \"bôøã\" vÆue\n", *
¨gv
);

125 } i‡(
	`m©ches
(*
¨gv
, "sample-point") == 0) {

126 
•
;

128 
	`NEXT_ARG
();

129 i‡(
	`gë_Êﬂt
(&
•
, *
¨gv
))

130 
	`öv¨g
("invalid \"sample-point\" value\n",

131 *
¨gv
);

132 
bt
.
ßm∂e_poöt
 = (
__u32
)(
•
 * 1000);

133 } i‡(
	`m©ches
(*
¨gv
, "tq") == 0) {

134 
	`NEXT_ARG
();

135 i‡(
	`gë_u32
(&
bt
.
tq
, *
¨gv
, 0))

136 
	`öv¨g
("övÆid \"tq\" vÆue\n", *
¨gv
);

137 } i‡(
	`m©ches
(*
¨gv
, "prop-seg") == 0) {

138 
	`NEXT_ARG
();

139 i‡(
	`gë_u32
(&
bt
.
¥›_£g
, *
¨gv
, 0))

140 
	`öv¨g
("övÆid \"¥›-£g\" vÆue\n", *
¨gv
);

141 } i‡(
	`m©ches
(*
¨gv
, "phase-seg1") == 0) {

142 
	`NEXT_ARG
();

143 i‡(
	`gë_u32
(&
bt
.
pha£_£g1
, *
¨gv
, 0))

144 
	`öv¨g
("övÆid \"pha£-£g1\" vÆue\n", *
¨gv
);

145 } i‡(
	`m©ches
(*
¨gv
, "phase-seg2") == 0) {

146 
	`NEXT_ARG
();

147 i‡(
	`gë_u32
(&
bt
.
pha£_£g2
, *
¨gv
, 0))

148 
	`öv¨g
("övÆid \"pha£-£g2\" vÆue\n", *
¨gv
);

149 } i‡(
	`m©ches
(*
¨gv
, "sjw") == 0) {

150 
	`NEXT_ARG
();

151 i‡(
	`gë_u32
(&
bt
.
sjw
, *
¨gv
, 0))

152 
	`öv¨g
("övÆid \"sjw\" vÆue\n", *
¨gv
);

153 } i‡(
	`m©ches
(*
¨gv
, "dbitrate") == 0) {

154 
	`NEXT_ARG
();

155 i‡(
	`gë_u32
(&
dbt
.
bôøã
, *
¨gv
, 0))

156 
	`öv¨g
("övÆid \"dbôøã\" vÆue\n", *
¨gv
);

157 } i‡(
	`m©ches
(*
¨gv
, "dsample-point") == 0) {

158 
•
;

160 
	`NEXT_ARG
();

161 i‡(
	`gë_Êﬂt
(&
•
, *
¨gv
))

162 
	`öv¨g
("övÆid \"dßm∂e-poöt\" vÆue\n", *
¨gv
);

163 
dbt
.
ßm∂e_poöt
 = (
__u32
)(
•
 * 1000);

164 } i‡(
	`m©ches
(*
¨gv
, "dtq") == 0) {

165 
	`NEXT_ARG
();

166 i‡(
	`gë_u32
(&
dbt
.
tq
, *
¨gv
, 0))

167 
	`öv¨g
("övÆid \"dtq\" vÆue\n", *
¨gv
);

168 } i‡(
	`m©ches
(*
¨gv
, "dprop-seg") == 0) {

169 
	`NEXT_ARG
();

170 i‡(
	`gë_u32
(&
dbt
.
¥›_£g
, *
¨gv
, 0))

171 
	`öv¨g
("övÆid \"d¥›-£g\" vÆue\n", *
¨gv
);

172 } i‡(
	`m©ches
(*
¨gv
, "dphase-seg1") == 0) {

173 
	`NEXT_ARG
();

174 i‡(
	`gë_u32
(&
dbt
.
pha£_£g1
, *
¨gv
, 0))

175 
	`öv¨g
("övÆid \"dpha£-£g1\" vÆue\n", *
¨gv
);

176 } i‡(
	`m©ches
(*
¨gv
, "dphase-seg2") == 0) {

177 
	`NEXT_ARG
();

178 i‡(
	`gë_u32
(&
dbt
.
pha£_£g2
, *
¨gv
, 0))

179 
	`öv¨g
("övÆid \"dpha£-£g2\" vÆue\n", *
¨gv
);

180 } i‡(
	`m©ches
(*
¨gv
, "dsjw") == 0) {

181 
	`NEXT_ARG
();

182 i‡(
	`gë_u32
(&
dbt
.
sjw
, *
¨gv
, 0))

183 
	`öv¨g
("övÆid \"dsjw\" vÆue\n", *
¨gv
);

184 } i‡(
	`m©ches
(*
¨gv
, "loopback") == 0) {

185 
	`NEXT_ARG
();

186 
	`£t_˘æmode
("lo›back", *
¨gv
, &
cm
,

187 
CAN_CTRLMODE_LOOPBACK
);

188 } i‡(
	`m©ches
(*
¨gv
, "listen-only") == 0) {

189 
	`NEXT_ARG
();

190 
	`£t_˘æmode
("li°í-⁄ly", *
¨gv
, &
cm
,

191 
CAN_CTRLMODE_LISTENONLY
);

192 } i‡(
	`m©ches
(*
¨gv
, "triple-sampling") == 0) {

193 
	`NEXT_ARG
();

194 
	`£t_˘æmode
("åùÀ-ßm∂ög", *
¨gv
, &
cm
,

195 
CAN_CTRLMODE_3_SAMPLES
);

196 } i‡(
	`m©ches
(*
¨gv
, "one-shot") == 0) {

197 
	`NEXT_ARG
();

198 
	`£t_˘æmode
("⁄e-shŸ", *
¨gv
, &
cm
,

199 
CAN_CTRLMODE_ONE_SHOT
);

200 } i‡(
	`m©ches
(*
¨gv
, "berr-reporting") == 0) {

201 
	`NEXT_ARG
();

202 
	`£t_˘æmode
("bîr-ªp‹tög", *
¨gv
, &
cm
,

203 
CAN_CTRLMODE_BERR_REPORTING
);

204 } i‡(
	`m©ches
(*
¨gv
, "fd") == 0) {

205 
	`NEXT_ARG
();

206 
	`£t_˘æmode
("fd", *
¨gv
, &
cm
,

207 
CAN_CTRLMODE_FD
);

208 } i‡(
	`m©ches
(*
¨gv
, "fd-non-iso") == 0) {

209 
	`NEXT_ARG
();

210 
	`£t_˘æmode
("fd-n⁄-iso", *
¨gv
, &
cm
,

211 
CAN_CTRLMODE_FD_NON_ISO
);

212 } i‡(
	`m©ches
(*
¨gv
, "presume-ack") == 0) {

213 
	`NEXT_ARG
();

214 
	`£t_˘æmode
("¥esume-ack", *
¨gv
, &
cm
,

215 
CAN_CTRLMODE_PRESUME_ACK
);

216 } i‡(
	`m©ches
(*
¨gv
, "restart") == 0) {

217 
__u32
 
vÆ
 = 1;

219 
	`add©å32
(
n
, 1024, 
IFLA_CAN_RESTART
, 
vÆ
);

220 } i‡(
	`m©ches
(*
¨gv
, "restart-ms") == 0) {

221 
__u32
 
vÆ
;

223 
	`NEXT_ARG
();

224 i‡(
	`gë_u32
(&
vÆ
, *
¨gv
, 0))

225 
	`öv¨g
("övÆid \"ª°¨t-ms\" vÆue\n", *
¨gv
);

226 
	`add©å32
(
n
, 1024, 
IFLA_CAN_RESTART_MS
, 
vÆ
);

227 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

228 
	`ußge
();

231 
	`Ârötf
(
°dîr
, "ˇn: unknow¿›ti⁄ \"%s\"\n", *
¨gv
);

232 
	`ußge
();

235 
¨gc
--, 
¨gv
++;

238 i‡(
bt
.
bôøã
 || bt.
tq
)

239 
	`add©å_l
(
n
, 1024, 
IFLA_CAN_BITTIMING
, &
bt
, (bt));

240 i‡(
dbt
.
bôøã
 || dbt.
tq
)

241 
	`add©å_l
(
n
, 1024, 
IFLA_CAN_DATA_BITTIMING
, &
dbt
, (dbt));

242 i‡(
cm
.
mask
)

243 
	`add©å_l
(
n
, 1024, 
IFLA_CAN_CTRLMODE
, &
cm
, (cm));

246 
	}
}

248 c⁄° *
	gˇn_°©e_«mes
[] = {

249 [
CAN_STATE_ERROR_ACTIVE
] = "ERROR-ACTIVE",

250 [
CAN_STATE_ERROR_WARNING
] = "ERROR-WARNING",

251 [
CAN_STATE_ERROR_PASSIVE
] = "ERROR-PASSIVE",

252 [
CAN_STATE_BUS_OFF
] = "BUS-OFF",

253 [
CAN_STATE_STOPPED
] = "STOPPED",

254 [
CAN_STATE_SLEEPING
] = "SLEEPING"

257 
	$ˇn_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

259 i‡(!
tb
)

262 i‡(
tb
[
IFLA_CAN_CTRLMODE
]) {

263 
ˇn_˘æmode
 *
cm
 = 
	`RTA_DATA
(
tb
[
IFLA_CAN_CTRLMODE
]);

265 i‡(
cm
->
Êags
)

266 
	`¥öt_˘æmode
(
f
, 
cm
->
Êags
);

269 i‡(
tb
[
IFLA_CAN_STATE
]) {

270 *
°©e
 = 
	`RTA_DATA
(
tb
[
IFLA_CAN_STATE
]);

272 
	`Ârötf
(
f
, "°©ê%†", *
°©e
 <
CAN_STATE_MAX
 ?

273 
ˇn_°©e_«mes
[*
°©e
] : "UNKNOWN");

276 i‡(
tb
[
IFLA_CAN_BERR_COUNTER
]) {

277 
ˇn_bîr_cou¡î
 *
bc
 =

278 
	`RTA_DATA
(
tb
[
IFLA_CAN_BERR_COUNTER
]);

280 
	`Ârötf
(
f
, "(bîr-cou¡îÅx %dÑx %dË", 
bc
->
txîr
, bc->
rxîr
);

283 i‡(
tb
[
IFLA_CAN_RESTART_MS
]) {

284 
__u32
 *
ª°¨t_ms
 = 
	`RTA_DATA
(
tb
[
IFLA_CAN_RESTART_MS
]);

286 
	`Ârötf
(
f
, "ª°¨t-m†%d ", *
ª°¨t_ms
);

289 i‡(
tb
[
IFLA_CAN_BITTIMING
]) {

290 
ˇn_bôtimög
 *
bt
 = 
	`RTA_DATA
(
tb
[
IFLA_CAN_BITTIMING
]);

292 
	`Ârötf
(
f
, "\n "

294 
bt
->
bôøã
, ()bt->
ßm∂e_poöt
 / 1000.);

295 
	`Ârötf
(
f
, "\n "

297 
bt
->
tq
, bt->
¥›_£g
, bt->
pha£_£g1
, bt->
pha£_£g2
,

298 
bt
->
sjw
);

301 i‡(
tb
[
IFLA_CAN_BITTIMING_CONST
]) {

302 
ˇn_bôtimög_c⁄°
 *
btc
 =

303 
	`RTA_DATA
(
tb
[
IFLA_CAN_BITTIMING_CONST
]);

305 
	`Ârötf
(
f
, "\n "

308 
btc
->
«me
, btc->
t£g1_mö
, btc->
t£g1_max
,

309 
btc
->
t£g2_mö
, btc->
t£g2_max
, btc->
sjw_max
,

310 
btc
->
bΩ_mö
, btc->
bΩ_max
, btc->
bΩ_öc
);

313 i‡(
tb
[
IFLA_CAN_DATA_BITTIMING
]) {

314 
ˇn_bôtimög
 *
dbt
 =

315 
	`RTA_DATA
(
tb
[
IFLA_CAN_DATA_BITTIMING
]);

317 
	`Ârötf
(
f
, "\n "

319 
dbt
->
bôøã
, ()dbt->
ßm∂e_poöt
 / 1000.);

320 
	`Ârötf
(
f
, "\n "

323 
dbt
->
tq
, dbt->
¥›_£g
, dbt->
pha£_£g1
,

324 
dbt
->
pha£_£g2
, dbt->
sjw
);

327 i‡(
tb
[
IFLA_CAN_DATA_BITTIMING_CONST
]) {

328 
ˇn_bôtimög_c⁄°
 *
dbtc
 =

329 
	`RTA_DATA
(
tb
[
IFLA_CAN_DATA_BITTIMING_CONST
]);

331 
	`Ârötf
(
f
, "\n "

334 
dbtc
->
«me
, dbtc->
t£g1_mö
, dbtc->
t£g1_max
,

335 
dbtc
->
t£g2_mö
, dbtc->
t£g2_max
, dbtc->
sjw_max
,

336 
dbtc
->
bΩ_mö
, dbtc->
bΩ_max
, dbtc->
bΩ_öc
);

339 i‡(
tb
[
IFLA_CAN_CLOCK
]) {

340 
ˇn_˛ock
 *
˛ock
 = 
	`RTA_DATA
(
tb
[
IFLA_CAN_CLOCK
]);

342 
	`Ârötf
(
f
, "\n clock %d", 
˛ock
->
‰eq
);

345 
	}
}

347 
	$ˇn_¥öt_x°©s
(
lök_utû
 *
lu
,

348 
FILE
 *
f
, 
π©å
 *
x°©s
)

350 
ˇn_devi˚_°©s
 *
°©s
;

352 i‡(
x°©s
 && 
	`RTA_PAYLOAD
(x°©sË=(*
°©s
)) {

353 
°©s
 = 
	`RTA_DATA
(
x°©s
);

354 
	`Ârötf
(
f
, "\n "

357 
	`Ârötf
(
f
, "\n %-10d %-10d %-10d %-10d %-10d %-10d",

358 
°©s
->
ª°¨ts
, sèts->
bus_îr‹
,

359 
°©s
->
¨bôøti⁄_lo°
, sèts->
îr‹_w¨nög
,

360 
°©s
->
îr‹_∑ssive
, sèts->
bus_off
);

362 
	}
}

364 
	$ˇn_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

365 
FILE
 *
f
)

367 
	`¥öt_ußge
(
f
);

368 
	}
}

370 
lök_utû
 
	gˇn_lök_utû
 = {

371 .
id
 = "can",

372 .
	gmax©å
 = 
IFLA_CAN_MAX
,

373 .
	g∑r£_›t
 = 
ˇn_∑r£_›t
,

374 .
	g¥öt_›t
 = 
ˇn_¥öt_›t
,

375 .
	g¥öt_x°©s
 = 
ˇn_¥öt_x°©s
,

376 .
	g¥öt_hñp
 = 
ˇn_¥öt_hñp
,

	@ip/iplink_geneve.c

12 
	~<°dio.h
>

14 
	~"π_«mes.h
"

15 
	~"utûs.h
"

16 
	~"ù_comm⁄.h
"

18 
	$¥öt_ex∂aö
(
FILE
 *
f
)

20 
	`Ârötf
(
f
, "Usage: ... geneve id VNIÑemote ADDR\n");

21 
	`Ârötf
(
f
, " [Åtl TTL ] [Åos TOS ]\n");

22 
	`Ârötf
(
f
, "\n");

23 
	`Ârötf
(
f
, "Where: VNI := 0-16777215\n");

24 
	`Ârötf
(
f
, " ADDR := IP_ADDRESS\n");

25 
	`Ârötf
(
f
, " TOS := { NUMBER | inherit }\n");

26 
	`Ârötf
(
f
, " TTL := { 1..255 | inherit }\n");

27 
	}
}

29 
	$ex∂aö
()

31 
	`¥öt_ex∂aö
(
°dîr
);

32 
	}
}

34 
	$gíeve_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

35 
∆msghdr
 *
n
)

37 
__u32
 
vni
 = 0;

38 
vni_£t
 = 0;

39 
__u32
 
daddr
 = 0;

40 
ö6_addr
 
daddr6
 = 
IN6ADDR_ANY_INIT
;

41 
__u8
 
âl
 = 0;

42 
__u8
 
tos
 = 0;

44 
¨gc
 > 0) {

45 i‡(!
	`m©ches
(*
¨gv
, "id") ||

46 !
	`m©ches
(*
¨gv
, "vni")) {

47 
	`NEXT_ARG
();

48 i‡(
	`gë_u32
(&
vni
, *
¨gv
, 0) ||

49 
vni
 >= 1u << 24)

50 
	`öv¨g
("övÆid id", *
¨gv
);

51 
vni_£t
 = 1;

52 } i‡(!
	`m©ches
(*
¨gv
, "remote")) {

53 
	`NEXT_ARG
();

54 i‡(!
	`öë_gë_addr
(*
¨gv
, &
daddr
, &
daddr6
)) {

55 
	`Ârötf
(
°dîr
, "InvÆidáddªs†\"%s\"\n", *
¨gv
);

58 i‡(
	`IN_MULTICAST
(
	`¡ohl
(
daddr
)))

59 
	`öv¨g
("övÆidÑemŸêaddªss", *
¨gv
);

60 } i‡(!
	`m©ches
(*
¨gv
, "ttl") ||

61 !
	`m©ches
(*
¨gv
, "hoplimit")) {

62 
uvÆ
;

64 
	`NEXT_ARG
();

65 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

66 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0))

67 
	`öv¨g
("övÆid TTL", *
¨gv
);

68 i‡(
uvÆ
 > 255)

69 
	`öv¨g
("TTL mu° bê<255", *
¨gv
);

70 
âl
 = 
uvÆ
;

72 } i‡(!
	`m©ches
(*
¨gv
, "tos") ||

73 !
	`m©ches
(*
¨gv
, "dsfield")) {

74 
__u32
 
uvÆ
;

76 
	`NEXT_ARG
();

77 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

78 i‡(
	`π∆_dsfõld_a2n
(&
uvÆ
, *
¨gv
))

79 
	`öv¨g
("bad TOS vÆue", *
¨gv
);

80 
tos
 = 
uvÆ
;

82 
tos
 = 1;

83 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

84 
	`ex∂aö
();

87 
	`Ârötf
(
°dîr
, "gíeve: unknow¿comm™d \"%s\"?\n", *
¨gv
);

88 
	`ex∂aö
();

91 
¨gc
--, 
¨gv
++;

94 i‡(!
vni_£t
) {

95 
	`Ârötf
(
°dîr
, "geneve: missing virtualÇetwork identifier\n");

99 i‡(!
daddr
) {

100 
	`Ârötf
(
°dîr
, "geneve:ÑemoveÜinkÖartnerÇot specified\n");

103 i‡(
	`memcmp
(&
daddr6
, &
ö6addr_™y
, (daddr6)) != 0) {

104 
	`Ârötf
(
°dîr
, "geneve:ÑemoveÜink over IPv6Çot supported\n");

108 
	`add©å32
(
n
, 1024, 
IFLA_GENEVE_ID
, 
vni
);

109 i‡(
daddr
)

110 
	`add©å_l
(
n
, 1024, 
IFLA_GENEVE_REMOTE
, &
daddr
, 4);

111 
	`add©å8
(
n
, 1024, 
IFLA_GENEVE_TTL
, 
âl
);

112 
	`add©å8
(
n
, 1024, 
IFLA_GENEVE_TOS
, 
tos
);

115 
	}
}

117 
	$gíeve_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

119 
__u32
 
vni
;

120 
s1
[1024];

121 
__u8
 
tos
;

123 i‡(!
tb
)

126 i‡(!
tb
[
IFLA_GENEVE_ID
] ||

127 
	`RTA_PAYLOAD
(
tb
[
IFLA_GENEVE_ID
]Ë< (
__u32
))

130 
vni
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_GENEVE_ID
]);

131 
	`Ârötf
(
f
, "id %u ", 
vni
);

133 i‡(
tb
[
IFLA_GENEVE_REMOTE
]) {

134 
__be32
 
addr
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_GENEVE_REMOTE
]);

135 i‡(
addr
)

136 
	`Ârötf
(
f
, "remote %s ",

137 
	`f‹m©_ho°
(
AF_INET
, 4, &
addr
, 
s1
, (s1)));

140 i‡(
tb
[
IFLA_GENEVE_TTL
]) {

141 
__u8
 
âl
 = 
	`πa_gë©å_u8
(
tb
[
IFLA_GENEVE_TTL
]);

142 i‡(
âl
)

143 
	`Ârötf
(
f
, "â»%d ", 
âl
);

146 i‡(
tb
[
IFLA_GENEVE_TOS
] &&

147 (
tos
 = 
	`πa_gë©å_u8
(
tb
[
IFLA_GENEVE_TOS
]))) {

148 i‡(
tos
 == 1)

149 
	`Ârötf
(
f
, "tos inherit ");

151 
	`Ârötf
(
f
, "to†%#x ", 
tos
);

153 
	}
}

155 
	$gíeve_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

156 
FILE
 *
f
)

158 
	`¥öt_ex∂aö
(
f
);

159 
	}
}

161 
lök_utû
 
	ggíeve_lök_utû
 = {

162 .
id
 = "geneve",

163 .
	gmax©å
 = 
IFLA_GENEVE_MAX
,

164 .
	g∑r£_›t
 = 
gíeve_∑r£_›t
,

165 .
	g¥öt_›t
 = 
gíeve_¥öt_›t
,

166 .
	g¥öt_hñp
 = 
gíeve_¥öt_hñp
,

	@ip/iplink_hsr.c

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<sys/sockë.h
>

18 
	~<löux/if.h
>

19 
	~<löux/if_¨p.h
>

20 
	~"π_«mes.h
"

21 
	~"utûs.h
"

22 
	~"ù_comm⁄.h
"

24 
	$¥öt_ußge
(
FILE
 *
f
)

26 
	`Ârötf
(
f
,

37 
	}
}

39 
	$ußge
()

41 
	`¥öt_ußge
(
°dîr
);

42 
	}
}

44 
	$h§_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

45 
∆msghdr
 *
n
)

47 
ifödex
;

48 
mu…iˇ°_•ec
;

50 
¨gc
 > 0) {

51 i‡(
	`m©ches
(*
¨gv
, "supervision") == 0) {

52 
	`NEXT_ARG
();

53 i‡(
	`gë_u8
(&
mu…iˇ°_•ec
, *
¨gv
, 0))

54 
	`öv¨g
("ADDR-BYTE i†övÆid", *
¨gv
);

55 
	`add©å_l
(
n
, 1024, 
IFLA_HSR_MULTICAST_SPEC
,

56 &
mu…iˇ°_•ec
, 1);

57 } i‡(
	`m©ches
(*
¨gv
, "slave1") == 0) {

58 
	`NEXT_ARG
();

59 
ifödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
);

60 i‡(
ifödex
 == 0)

61 
	`öv¨g
("Nÿsuch i¡îÁ˚", *
¨gv
);

62 
	`add©å_l
(
n
, 1024, 
IFLA_HSR_SLAVE1
, &
ifödex
, 4);

63 } i‡(
	`m©ches
(*
¨gv
, "slave2") == 0) {

64 
	`NEXT_ARG
();

65 
ifödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
);

66 i‡(
ifödex
 == 0)

67 
	`öv¨g
("Nÿsuch i¡îÁ˚", *
¨gv
);

68 
	`add©å_l
(
n
, 1024, 
IFLA_HSR_SLAVE2
, &
ifödex
, 4);

69 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

70 
	`ußge
();

73 
	`Ârötf
(
°dîr
, "h§: wh© i†\"%s\"?\n", *
¨gv
);

74 
	`ußge
();

77 
¨gc
--, 
¨gv
++;

81 
	}
}

83 
	$h§_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

85 
	`SPRINT_BUF
(
b1
);

87 i‡(!
tb
)

90 i‡(
tb
[
IFLA_HSR_SLAVE1
] &&

91 
	`RTA_PAYLOAD
(
tb
[
IFLA_HSR_SLAVE1
]Ë< (
__u32
))

93 i‡(
tb
[
IFLA_HSR_SLAVE2
] &&

94 
	`RTA_PAYLOAD
(
tb
[
IFLA_HSR_SLAVE2
]Ë< (
__u32
))

96 i‡(
tb
[
IFLA_HSR_SEQ_NR
] &&

97 
	`RTA_PAYLOAD
(
tb
[
IFLA_HSR_SEQ_NR
]Ë< (
__u16
))

99 i‡(
tb
[
IFLA_HSR_SUPERVISION_ADDR
] &&

100 
	`RTA_PAYLOAD
(
tb
[
IFLA_HSR_SUPERVISION_ADDR
]Ë< 
ETH_ALEN
)

103 
	`Ârötf
(
f
, "slave1 ");

104 i‡(
tb
[
IFLA_HSR_SLAVE1
])

105 
	`Ârötf
(
f
, "%s ",

106 
	`Œ_ödex_to_«me
(
	`πa_gë©å_u32
(
tb
[
IFLA_HSR_SLAVE1
])));

108 
	`Ârötf
(
f
, "<none> ");

110 
	`Ârötf
(
f
, "slave2 ");

111 i‡(
tb
[
IFLA_HSR_SLAVE2
])

112 
	`Ârötf
(
f
, "%s ",

113 
	`Œ_ödex_to_«me
(
	`πa_gë©å_u32
(
tb
[
IFLA_HSR_SLAVE2
])));

115 
	`Ârötf
(
f
, "<none> ");

117 i‡(
tb
[
IFLA_HSR_SEQ_NR
])

118 
	`Ârötf
(
f
, "sequence %d ",

119 
	`πa_gë©å_u16
(
tb
[
IFLA_HSR_SEQ_NR
]));

121 i‡(
tb
[
IFLA_HSR_SUPERVISION_ADDR
])

122 
	`Ârötf
(
f
, "supervision %s ",

123 
	`Œ_addr_n2a
(
	`RTA_DATA
(
tb
[
IFLA_HSR_SUPERVISION_ADDR
]),

124 
	`RTA_PAYLOAD
(
tb
[
IFLA_HSR_SUPERVISION_ADDR
]),

125 
ARPHRD_VOID
,

126 
b1
, (b1)));

127 
	}
}

129 
	$h§_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

130 
FILE
 *
f
)

132 
	`¥öt_ußge
(
f
);

133 
	}
}

135 
lök_utû
 
	gh§_lök_utû
 = {

136 .
id
 = "hsr",

137 .
	gmax©å
 = 
IFLA_VLAN_MAX
,

138 .
	g∑r£_›t
 = 
h§_∑r£_›t
,

139 .
	g¥öt_›t
 = 
h§_¥öt_›t
,

140 .
	g¥öt_hñp
 = 
h§_¥öt_hñp
,

	@ip/iplink_ipoib.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<löux/if_lök.h
>

18 
	~"π_«mes.h
"

19 
	~"utûs.h
"

20 
	~"ù_comm⁄.h
"

22 
	$¥öt_ex∂aö
(
FILE
 *
f
)

24 
	`Ârötf
(
f
,

30 
	}
}

32 
	$ex∂aö
()

34 
	`¥öt_ex∂aö
(
°dîr
);

35 
	}
}

37 
	$mode_¨g
()

39 
	`Ârötf
(
°dîr
, "Error:árgument of \"mode\" must be \"datagram\""

42 
	}
}

44 
	$ùoib_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

45 
∆msghdr
 *
n
)

47 
__u16
 
pkey
, 
mode
, 
umˇ°
;

49 
¨gc
 > 0) {

50 i‡(
	`m©ches
(*
¨gv
, "pkey") == 0) {

51 
	`NEXT_ARG
();

52 i‡(
	`gë_u16
(&
pkey
, *
¨gv
, 0))

53 
	`öv¨g
("pkey i†övÆid", *
¨gv
);

54 
	`add©å_l
(
n
, 1024, 
IFLA_IPOIB_PKEY
, &
pkey
, 2);

55 } i‡(
	`m©ches
(*
¨gv
, "mode") == 0) {

56 
	`NEXT_ARG
();

57 i‡(
	`°rcmp
(*
¨gv
, "datagram") == 0)

58 
mode
 = 
IPOIB_MODE_DATAGRAM
;

59 i‡(
	`°rcmp
(*
¨gv
, "connected") == 0)

60 
mode
 = 
IPOIB_MODE_CONNECTED
;

62  
	`mode_¨g
();

63 
	`add©å_l
(
n
, 1024, 
IFLA_IPOIB_MODE
, &
mode
, 2);

64 } i‡(
	`m©ches
(*
¨gv
, "umcast") == 0) {

65 
	`NEXT_ARG
();

66 i‡(
	`gë_u16
(&
umˇ°
, *
¨gv
, 0))

67 
	`öv¨g
("umˇ° i†övÆid", *
¨gv
);

68 
	`add©å_l
(
n
, 1024, 
IFLA_IPOIB_UMCAST
, &
umˇ°
, 2);

69 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

70 
	`ex∂aö
();

73 
	`Ârötf
(
°dîr
, "ùoib: unknow¿›ti⁄ \"%s\"?\n", *
¨gv
);

74 
	`ex∂aö
();

77 
¨gc
--, 
¨gv
++;

81 
	}
}

83 
	$ùoib_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

85 
__u16
 
mode
;

87 i‡(!
tb
)

90 i‡(!
tb
[
IFLA_IPOIB_PKEY
] ||

91 
	`RTA_PAYLOAD
(
tb
[
IFLA_IPOIB_PKEY
]Ë< (
__u16
))

94 
	`Ârötf
(
f
, "pkey %#.4x ", 
	`πa_gë©å_u16
(
tb
[
IFLA_IPOIB_PKEY
]));

96 i‡(!
tb
[
IFLA_IPOIB_MODE
] ||

97 
	`RTA_PAYLOAD
(
tb
[
IFLA_IPOIB_MODE
]Ë< (
__u16
))

100 
mode
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_IPOIB_MODE
]);

101 
	`Ârötf
(
f
, "mode %s ",

102 
mode
 =
IPOIB_MODE_DATAGRAM
 ? "datagram" :

103 
mode
 =
IPOIB_MODE_CONNECTED
 ? "connected" :

106 i‡(!
tb
[
IFLA_IPOIB_UMCAST
] ||

107 
	`RTA_PAYLOAD
(
tb
[
IFLA_IPOIB_UMCAST
]Ë< (
__u16
))

110 
	`Ârötf
(
f
, "umˇ° %.4x ", 
	`πa_gë©å_u16
(
tb
[
IFLA_IPOIB_UMCAST
]));

111 
	}
}

113 
	$ùoib_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

114 
FILE
 *
f
)

116 
	`¥öt_ex∂aö
(
f
);

117 
	}
}

119 
lök_utû
 
	gùoib_lök_utû
 = {

120 .
id
 = "ipoib",

121 .
	gmax©å
 = 
IFLA_IPOIB_MAX
,

122 .
	g∑r£_›t
 = 
ùoib_∑r£_›t
,

123 .
	g¥öt_›t
 = 
ùoib_¥öt_›t
,

124 .
	g¥öt_hñp
 = 
ùoib_¥öt_hñp
,

	@ip/iplink_ipvlan.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<sys/sockë.h
>

15 
	~<löux/if_lök.h
>

17 
	~"π_«mes.h
"

18 
	~"utûs.h
"

19 
	~"ù_comm⁄.h
"

21 
	$ùvœn_ex∂aö
(
FILE
 *
f
)

23 
	`Ârötf
(
f
, "Usage: ... ipvlan [ mode {Ü2 |Ü3 } ]\n");

24 
	}
}

26 
	$ex∂aö
()

28 
	`ùvœn_ex∂aö
(
°dîr
);

29 
	}
}

31 
	$mode_¨g
()

33 
	`Ârötf
(
°dîr
, "Error:árgument of \"mode\" must beÉither \"l2\", "

36 
	}
}

38 
	$ùvœn_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

39 
∆msghdr
 *
n
)

41 
¨gc
 > 0) {

42 i‡(
	`m©ches
(*
¨gv
, "mode") == 0) {

43 
__u16
 
mode
 = 0;

44 
	`NEXT_ARG
();

46 i‡(
	`°rcmp
(*
¨gv
, "l2") == 0)

47 
mode
 = 
IPVLAN_MODE_L2
;

48 i‡(
	`°rcmp
(*
¨gv
, "l3") == 0)

49 
mode
 = 
IPVLAN_MODE_L3
;

51  
	`mode_¨g
();

53 
	`add©å16
(
n
, 1024, 
IFLA_IPVLAN_MODE
, 
mode
);

54 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

55 
	`ex∂aö
();

58 
	`Ârötf
(
°dîr
, "ipvlan: unknown option \"%s\"?\n",

59 *
¨gv
);

60 
	`ex∂aö
();

63 
¨gc
--, 
¨gv
++;

67 
	}
}

69 
	$ùvœn_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

72 i‡(!
tb
)

75 i‡(
tb
[
IFLA_IPVLAN_MODE
]) {

76 i‡(
	`RTA_PAYLOAD
(
tb
[
IFLA_IPVLAN_MODE
]Ë=(
__u16
)) {

77 
__u16
 
mode
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_IPVLAN_MODE
]);

79 
	`Ârötf
(
f
, " mode %s ",

80 
mode
 =
IPVLAN_MODE_L2
 ? "l2" :

81 
mode
 =
IPVLAN_MODE_L3
 ? "l3" : "unknown");

84 
	}
}

86 
	$ùvœn_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

87 
FILE
 *
f
)

89 
	`ùvœn_ex∂aö
(
f
);

90 
	}
}

92 
lök_utû
 
	gùvœn_lök_utû
 = {

93 .
id
 = "ipvlan",

94 .
	gmax©å
 = 
IFLA_IPVLAN_MAX
,

95 .
	g∑r£_›t
 = 
ùvœn_∑r£_›t
,

96 .
	g¥öt_›t
 = 
ùvœn_¥öt_›t
,

97 .
	g¥öt_hñp
 = 
ùvœn_¥öt_hñp
,

	@ip/iplink_macvlan.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<sys/sockë.h
>

17 
	~<löux/if_lök.h
>

19 
	~"π_«mes.h
"

20 
	~"utûs.h
"

21 
	~"ù_comm⁄.h
"

23 
	#pfx_îr
(
lu
, ...) { \

24 
	`Ârötf
(
°dîr
, "%s: ", 
lu
->
id
); \

25 
	`Ârötf
(
°dîr
, 
__VA_ARGS__
); \

26 
	`Ârötf
(
°dîr
, "\n"); \

27 }

	)

29 
	$¥öt_ex∂aö
(
lök_utû
 *
lu
, 
FILE
 *
f
)

31 
	`Ârötf
(
f
,

33 
lu
->
id


35 
	}
}

37 
	$ex∂aö
(
lök_utû
 *
lu
)

39 
	`¥öt_ex∂aö
(
lu
, 
°dîr
);

40 
	}
}

42 
	$mode_¨g
(c⁄° *
¨g
)

44 
	`Ârötf
(
°dîr
, "Error:árgument of \"mode\" must be \"private\", "

45 "\"vïa\", \"bridge\" o∏\"∑s°hru\",ÇŸ \"%s\"\n", 
¨g
);

47 
	}
}

49 
	$macvœn_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

50 
∆msghdr
 *
n
)

52 
__u32
 
mode
 = 0;

53 
__u16
 
Êags
 = 0;

55 
¨gc
 > 0) {

56 i‡(
	`m©ches
(*
¨gv
, "mode") == 0) {

57 
	`NEXT_ARG
();

59 i‡(
	`°rcmp
(*
¨gv
, "private") == 0)

60 
mode
 = 
MACVLAN_MODE_PRIVATE
;

61 i‡(
	`°rcmp
(*
¨gv
, "vepa") == 0)

62 
mode
 = 
MACVLAN_MODE_VEPA
;

63 i‡(
	`°rcmp
(*
¨gv
, "bridge") == 0)

64 
mode
 = 
MACVLAN_MODE_BRIDGE
;

65 i‡(
	`°rcmp
(*
¨gv
, "passthru") == 0)

66 
mode
 = 
MACVLAN_MODE_PASSTHRU
;

68  
	`mode_¨g
(*
¨gv
);

69 } i‡(
	`m©ches
(*
¨gv
, "nopromisc") == 0) {

70 
Êags
 |
MACVLAN_FLAG_NOPROMISC
;

71 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

72 
	`ex∂aö
(
lu
);

75 
	`pfx_îr
(
lu
, "unknow¿›ti⁄ \"%s\"?", *
¨gv
);

76 
	`ex∂aö
(
lu
);

79 
¨gc
--, 
¨gv
++;

82 i‡(
mode
)

83 
	`add©å32
(
n
, 1024, 
IFLA_MACVLAN_MODE
, 
mode
);

85 i‡(
Êags
) {

86 i‡(
Êags
 & 
MACVLAN_FLAG_NOPROMISC
 &&

87 
mode
 !
MACVLAN_MODE_PASSTHRU
) {

88 
	`pfx_îr
(
lu
, "nopromisc flag only valid inÖassthru mode");

89 
	`ex∂aö
(
lu
);

92 
	`add©å16
(
n
, 1024, 
IFLA_MACVLAN_FLAGS
, 
Êags
);

95 
	}
}

97 
	$macvœn_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

99 
__u32
 
mode
;

100 
__u16
 
Êags
;

102 i‡(!
tb
)

105 i‡(!
tb
[
IFLA_MACVLAN_MODE
] ||

106 
	`RTA_PAYLOAD
(
tb
[
IFLA_MACVLAN_MODE
]Ë< (
__u32
))

109 
mode
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_MACVLAN_MODE
]);

110 
	`Ârötf
(
f
, " mode %s ",

111 
mode
 =
MACVLAN_MODE_PRIVATE
 ? "private"

112 : 
mode
 =
MACVLAN_MODE_VEPA
 ? "vepa"

113 : 
mode
 =
MACVLAN_MODE_BRIDGE
 ? "bridge"

114 : 
mode
 =
MACVLAN_MODE_PASSTHRU
 ? "passthru"

117 i‡(!
tb
[
IFLA_MACVLAN_FLAGS
] ||

118 
	`RTA_PAYLOAD
(
tb
[
IFLA_MACVLAN_FLAGS
]Ë< (
__u16
))

121 
Êags
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_MACVLAN_FLAGS
]);

122 i‡(
Êags
 & 
MACVLAN_FLAG_NOPROMISC
)

123 
	`Ârötf
(
f
, "nopromisc ");

124 
	}
}

126 
	$macvœn_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

127 
FILE
 *
f
)

129 
	`¥öt_ex∂aö
(
lu
, 
f
);

130 
	}
}

132 
lök_utû
 
	gmacvœn_lök_utû
 = {

133 .
id
 = "macvlan",

134 .
	gmax©å
 = 
IFLA_MACVLAN_MAX
,

135 .
	g∑r£_›t
 = 
macvœn_∑r£_›t
,

136 .
	g¥öt_›t
 = 
macvœn_¥öt_›t
,

137 .
	g¥öt_hñp
 = 
macvœn_¥öt_hñp
,

140 
lök_utû
 
	gmacvèp_lök_utû
 = {

141 .
id
 = "macvtap",

142 .
	gmax©å
 = 
IFLA_MACVLAN_MAX
,

143 .
	g∑r£_›t
 = 
macvœn_∑r£_›t
,

144 .
	g¥öt_›t
 = 
macvœn_¥öt_›t
,

145 .
	g¥öt_hñp
 = 
macvœn_¥öt_hñp
,

	@ip/iplink_vlan.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<löux/if_vœn.h
>

17 
	~"π_«mes.h
"

18 
	~"utûs.h
"

19 
	~"ù_comm⁄.h
"

21 
	$¥öt_ex∂aö
(
FILE
 *
f
)

23 
	`Ârötf
(
f
,

36 
	}
}

38 
	$ex∂aö
()

40 
	`¥öt_ex∂aö
(
°dîr
);

41 
	}
}

43 
	$⁄_off
(c⁄° *
msg
, c⁄° *
¨g
)

45 
	`Ârötf
(
°dîr
, "Eº‹:árgumíào‡\"%s\" mu° bê\"⁄\" o∏\"off\",ÇŸ \"%s\"\n", 
msg
, 
¨g
);

47 
	}
}

49 
	$vœn_∑r£_qos_m≠
(*
¨g˝
, ***
¨gvp
, 
∆msghdr
 *
n
,

50 
©åty≥
)

52 
¨gc
 = *
¨g˝
;

53 **
¨gv
 = *
¨gvp
;

54 
iÊa_vœn_qos_m≠pög
 
m
;

55 
π©å
 *
èû
;

57 
èû
 = 
	`NLMSG_TAIL
(
n
);

58 
	`add©å_l
(
n
, 1024, 
©åty≥
, 
NULL
, 0);

60 
¨gc
 > 0) {

61 *
cﬁ⁄
 = 
	`°rchr
(*
¨gv
, ':');

63 i‡(!
cﬁ⁄
)

65 *
cﬁ⁄
 = '\0';

67 i‡(
	`gë_u32
(&
m
.
‰om
, *
¨gv
, 0))

69 i‡(
	`gë_u32
(&
m
.
to
, 
cﬁ⁄
 + 1, 0))

71 
¨gc
--, 
¨gv
++;

73 
	`add©å_l
(
n
, 1024, 
IFLA_VLAN_QOS_MAPPING
, &
m
, (m));

76 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)tail;

78 *
¨g˝
 = 
¨gc
;

79 *
¨gvp
 = 
¨gv
;

81 
	}
}

83 
	$vœn_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

84 
∆msghdr
 *
n
)

86 
iÊa_vœn_Êags
 
Êags
 = { 0 };

87 
__u16
 
id
, 
¥Ÿo
;

89 
¨gc
 > 0) {

90 i‡(
	`m©ches
(*
¨gv
, "protocol") == 0) {

91 
	`NEXT_ARG
();

92 i‡(
	`Œ_¥Ÿo_a2n
(&
¥Ÿo
, *
¨gv
))

93 
	`öv¨g
("¥Ÿocﬁ i†övÆid", *
¨gv
);

94 
	`add©å_l
(
n
, 1024, 
IFLA_VLAN_PROTOCOL
, &
¥Ÿo
, 2);

95 } i‡(
	`m©ches
(*
¨gv
, "id") == 0) {

96 
	`NEXT_ARG
();

97 i‡(
	`gë_u16
(&
id
, *
¨gv
, 0))

98 
	`öv¨g
("id i†övÆid", *
¨gv
);

99 
	`add©å_l
(
n
, 1024, 
IFLA_VLAN_ID
, &
id
, 2);

100 } i‡(
	`m©ches
(*
¨gv
, "reorder_hdr") == 0) {

101 
	`NEXT_ARG
();

102 
Êags
.
mask
 |
VLAN_FLAG_REORDER_HDR
;

103 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

104 
Êags
.Êag†|
VLAN_FLAG_REORDER_HDR
;

105 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

106 
Êags
.Êag†&~
VLAN_FLAG_REORDER_HDR
;

108  
	`⁄_off
("ª‹dî_hdr", *
¨gv
);

109 } i‡(
	`m©ches
(*
¨gv
, "gvrp") == 0) {

110 
	`NEXT_ARG
();

111 
Êags
.
mask
 |
VLAN_FLAG_GVRP
;

112 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

113 
Êags
.Êag†|
VLAN_FLAG_GVRP
;

114 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

115 
Êags
.Êag†&~
VLAN_FLAG_GVRP
;

117  
	`⁄_off
("gvΩ", *
¨gv
);

118 } i‡(
	`m©ches
(*
¨gv
, "mvrp") == 0) {

119 
	`NEXT_ARG
();

120 
Êags
.
mask
 |
VLAN_FLAG_MVRP
;

121 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

122 
Êags
.Êag†|
VLAN_FLAG_MVRP
;

123 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

124 
Êags
.Êag†&~
VLAN_FLAG_MVRP
;

126  
	`⁄_off
("mvΩ", *
¨gv
);

127 } i‡(
	`m©ches
(*
¨gv
, "loose_binding") == 0) {

128 
	`NEXT_ARG
();

129 
Êags
.
mask
 |
VLAN_FLAG_LOOSE_BINDING
;

130 i‡(
	`°rcmp
(*
¨gv
, "on") == 0)

131 
Êags
.Êag†|
VLAN_FLAG_LOOSE_BINDING
;

132 i‡(
	`°rcmp
(*
¨gv
, "off") == 0)

133 
Êags
.Êag†&~
VLAN_FLAG_LOOSE_BINDING
;

135  
	`⁄_off
("loo£_bödög", *
¨gv
);

136 } i‡(
	`m©ches
(*
¨gv
, "ingress-qos-map") == 0) {

137 
	`NEXT_ARG
();

138 i‡(
	`vœn_∑r£_qos_m≠
(&
¨gc
, &
¨gv
, 
n
,

139 
IFLA_VLAN_INGRESS_QOS
))

140 
	`öv¨g
("övÆid ingªss-qos-m≠", *
¨gv
);

142 } i‡(
	`m©ches
(*
¨gv
, "egress-qos-map") == 0) {

143 
	`NEXT_ARG
();

144 i‡(
	`vœn_∑r£_qos_m≠
(&
¨gc
, &
¨gv
, 
n
,

145 
IFLA_VLAN_EGRESS_QOS
))

146 
	`öv¨g
("övÆidÉgªss-qos-m≠", *
¨gv
);

148 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

149 
	`ex∂aö
();

152 
	`Ârötf
(
°dîr
, "vœn: unknow¿comm™d \"%s\"?\n", *
¨gv
);

153 
	`ex∂aö
();

156 
¨gc
--, 
¨gv
++;

159 i‡(
Êags
.
mask
)

160 
	`add©å_l
(
n
, 1024, 
IFLA_VLAN_FLAGS
, &
Êags
, (flags));

163 
	}
}

165 
	$vœn_¥öt_m≠
(
FILE
 *
f
, *
«me
, 
π©å
 *
©å
)

167 
iÊa_vœn_qos_m≠pög
 *
m
;

168 
π©å
 *
i
;

169 
ªm
;

171 
	`Ârötf
(
f
, "\¿ %†{ ", 
«me
);

173 
ªm
 = 
	`RTA_PAYLOAD
(
©å
);

174 
i
 = 
	`RTA_DATA
(
©å
); 
	`RTA_OK
(i, 
ªm
); i = 
	`RTA_NEXT
(i,Ñem)) {

175 
m
 = 
	`RTA_DATA
(
i
);

176 
	`Ârötf
(
f
, "%u:%u ", 
m
->
‰om
, m->
to
);

178 
	`Ârötf
(
f
, "} ");

179 
	}
}

181 
	$vœn_¥öt_Êags
(
FILE
 *
Â
, 
__u32
 
Êags
)

183 
	`Ârötf
(
Â
, "<");

184 
	#_PF
(
f
Ëi‡(
Êags
 & 
VLAN_FLAG_
##f) { \

185 
Êags
 &~ 
VLAN_FLAG_
##
f
; \

186 
	`Ârötf
(
Â
, #‡"%s", 
Êags
 ? "," : ""); \

187 }

	)

188 
	`_PF
(
REORDER_HDR
);

189 
	`_PF
(
GVRP
);

190 
	`_PF
(
MVRP
);

191 
	`_PF
(
LOOSE_BINDING
);

192 #unde‡
_PF


193 i‡(
Êags
)

194 
	`Ârötf
(
Â
, "%x", 
Êags
);

195 
	`Ârötf
(
Â
, "> ");

196 
	}
}

198 
	$vœn_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

200 
iÊa_vœn_Êags
 *
Êags
;

201 
	`SPRINT_BUF
(
b1
);

203 i‡(!
tb
)

206 i‡(
tb
[
IFLA_VLAN_PROTOCOL
] &&

207 
	`RTA_PAYLOAD
(
tb
[
IFLA_VLAN_PROTOCOL
]Ë< (
__u16
))

209 i‡(!
tb
[
IFLA_VLAN_ID
] ||

210 
	`RTA_PAYLOAD
(
tb
[
IFLA_VLAN_ID
]Ë< (
__u16
))

213 i‡(
tb
[
IFLA_VLAN_PROTOCOL
])

214 
	`Ârötf
(
f
, "protocol %s ",

215 
	`Œ_¥Ÿo_n2a
(
	`πa_gë©å_u16
(
tb
[
IFLA_VLAN_PROTOCOL
]),

216 
b1
, (b1)));

218 
	`Ârötf
(
f
, "protocol 802.1q ");

220 
	`Ârötf
(
f
, "id %u ", 
	`πa_gë©å_u16
(
tb
[
IFLA_VLAN_ID
]));

222 i‡(
tb
[
IFLA_VLAN_FLAGS
]) {

223 i‡(
	`RTA_PAYLOAD
(
tb
[
IFLA_VLAN_FLAGS
]Ë< (*
Êags
))

225 
Êags
 = 
	`RTA_DATA
(
tb
[
IFLA_VLAN_FLAGS
]);

226 
	`vœn_¥öt_Êags
(
f
, 
Êags
->flags);

228 i‡(
tb
[
IFLA_VLAN_INGRESS_QOS
])

229 
	`vœn_¥öt_m≠
(
f
, "ögªss-qos-m≠", 
tb
[
IFLA_VLAN_INGRESS_QOS
]);

230 i‡(
tb
[
IFLA_VLAN_EGRESS_QOS
])

231 
	`vœn_¥öt_m≠
(
f
, "egªss-qos-m≠", 
tb
[
IFLA_VLAN_EGRESS_QOS
]);

232 
	}
}

234 
	$vœn_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

235 
FILE
 *
f
)

237 
	`¥öt_ex∂aö
(
f
);

238 
	}
}

240 
lök_utû
 
	gvœn_lök_utû
 = {

241 .
id
 = "vlan",

242 .
	gmax©å
 = 
IFLA_VLAN_MAX
,

243 .
	g∑r£_›t
 = 
vœn_∑r£_›t
,

244 .
	g¥öt_›t
 = 
vœn_¥öt_›t
,

245 .
	g¥öt_hñp
 = 
vœn_¥öt_hñp
,

	@ip/iplink_vrf.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<sys/sockë.h
>

15 
	~<löux/if_lök.h
>

17 
	~"π_«mes.h
"

18 
	~"utûs.h
"

19 
	~"ù_comm⁄.h
"

21 
	$vrf_ex∂aö
(
FILE
 *
f
)

23 
	`Ârötf
(
f
, "Usage: ... vrfÅable TABLEID \n");

24 
	}
}

26 
	$ex∂aö
()

28 
	`vrf_ex∂aö
(
°dîr
);

29 
	}
}

31 
	$èbÀ_¨g
()

33 
	`Ârötf
(
°dîr
,"Error:árgument of \"table\" must be 0-32767ánd currently unused\n");

35 
	}
}

37 
	$vrf_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

38 
∆msghdr
 *
n
)

40 
¨gc
 > 0) {

41 i‡(
	`m©ches
(*
¨gv
, "table") == 0) {

42 
__u32
 
èbÀ
;

44 
	`NEXT_ARG
();

46 
èbÀ
 = 
	`©oi
(*
¨gv
);

47 i‡(
èbÀ
 > 32767)

48  
	`èbÀ_¨g
();

49 
	`add©å32
(
n
, 1024, 
IFLA_VRF_TABLE
, 
èbÀ
);

50 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

51 
	`ex∂aö
();

54 
	`Ârötf
(
°dîr
, "vrf: unknown option \"%s\"?\n",

55 *
¨gv
);

56 
	`ex∂aö
();

59 
¨gc
--, 
¨gv
++;

63 
	}
}

65 
	$vrf_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

67 i‡(!
tb
)

70 i‡(
tb
[
IFLA_VRF_TABLE
])

71 
	`Ârötf
(
f
, "èbÀ %u ", 
	`πa_gë©å_u32
(
tb
[
IFLA_VRF_TABLE
]));

72 
	}
}

74 
	$vrf_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

75 
FILE
 *
f
)

77 
	`vrf_ex∂aö
(
f
);

78 
	}
}

80 
lök_utû
 
	gvrf_lök_utû
 = {

81 .
id
 = "vrf",

82 .
	gmax©å
 = 
IFLA_VRF_MAX
,

83 .
	g∑r£_›t
 = 
vrf_∑r£_›t
,

84 .
	g¥öt_›t
 = 
vrf_¥öt_›t
,

85 .
	g¥öt_hñp
 = 
vrf_¥öt_hñp
,

	@ip/iplink_vxlan.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<√t/if.h
>

16 
	~<löux/ù.h
>

17 
	~<löux/if_lök.h
>

18 
	~<¨∑/öë.h
>

20 
	~"π_«mes.h
"

21 
	~"utûs.h
"

22 
	~"ù_comm⁄.h
"

24 
	$¥öt_ex∂aö
(
FILE
 *
f
)

26 
	`Ârötf
(
f
, "Usage: ... vxlan id VNI [ { group |Ñemote } ADDR ] [Üocal ADDR ]\n");

27 
	`Ârötf
(
f
, " [Åtl TTL ] [Åos TOS ] [ dev PHYS_DEV ]\n");

28 
	`Ârötf
(
f
, " [ dstport PORT ] [ srcport MIN MAX ]\n");

29 
	`Ârötf
(
f
, " [ [no]learning ] [ [no]proxy ] [ [no]rsc ]\n");

30 
	`Ârötf
(
f
, " [ [no]l2miss ] [ [no]l3miss ]\n");

31 
	`Ârötf
(
f
, " [ágeing SECONDS ] [ maxaddress NUMBER ]\n");

32 
	`Ârötf
(
f
, " [ [no]udpcsum ] [ [no]udp6zerocsumtx ] [ [no]udp6zerocsumrx ]\n");

33 
	`Ârötf
(
f
, " [ gbp ]\n");

34 
	`Ârötf
(
f
, "\n");

35 
	`Ârötf
(
f
, "Where: VNI := 0-16777215\n");

36 
	`Ârötf
(
f
, " ADDR := { IP_ADDRESS |ány }\n");

37 
	`Ârötf
(
f
, " TOS := { NUMBER | inherit }\n");

38 
	`Ârötf
(
f
, " TTL := { 1..255 | inherit }\n");

39 
	}
}

41 
	$ex∂aö
()

43 
	`¥öt_ex∂aö
(
°dîr
);

44 
	}
}

46 
	$vxœn_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

47 
∆msghdr
 *
n
)

49 
__u32
 
vni
 = 0;

50 
vni_£t
 = 0;

51 
__u32
 
ßddr
 = 0;

52 
__u32
 
gaddr
 = 0;

53 
__u32
 
daddr
 = 0;

54 
ö6_addr
 
ßddr6
 = 
IN6ADDR_ANY_INIT
;

55 
ö6_addr
 
gaddr6
 = 
IN6ADDR_ANY_INIT
;

56 
ö6_addr
 
daddr6
 = 
IN6ADDR_ANY_INIT
;

57 
lök
 = 0;

58 
__u8
 
tos
 = 0;

59 
__u8
 
âl
 = 0;

60 
__u8
 
À¨nög
 = 1;

61 
__u8
 
¥oxy
 = 0;

62 
__u8
 
rsc
 = 0;

63 
__u8
 
l2miss
 = 0;

64 
__u8
 
l3miss
 = 0;

65 
__u8
 
nﬂge
 = 0;

66 
__u32
 
age
 = 0;

67 
__u32
 
maxaddr
 = 0;

68 
__u16
 
d°p‹t
 = 0;

69 
__u8
 
udpcsum
 = 0;

70 
__u8
 
udp6zîocsumtx
 = 0;

71 
__u8
 
udp6zîocsumrx
 = 0;

72 
__u8
 
gbp
 = 0;

73 
d°_p‹t_£t
 = 0;

74 
iÊa_vxœn_p‹t_ønge
 
ønge
 = { 0, 0 };

76 
¨gc
 > 0) {

77 i‡(!
	`m©ches
(*
¨gv
, "id") ||

78 !
	`m©ches
(*
¨gv
, "vni")) {

79 
	`NEXT_ARG
();

80 i‡(
	`gë_u32
(&
vni
, *
¨gv
, 0) ||

81 
vni
 >= 1u << 24)

82 
	`öv¨g
("övÆid id", *
¨gv
);

83 
vni_£t
 = 1;

84 } i‡(!
	`m©ches
(*
¨gv
, "group")) {

85 
	`NEXT_ARG
();

86 i‡(!
	`öë_gë_addr
(*
¨gv
, &
gaddr
, &
gaddr6
)) {

87 
	`Ârötf
(
°dîr
, "InvÆidáddªs†\"%s\"\n", *
¨gv
);

90 i‡(!
	`IN6_IS_ADDR_MULTICAST
(&
gaddr6
Ë&& !
	`IN_MULTICAST
(
	`¡ohl
(
gaddr
)))

91 
	`öv¨g
("övÆid grou∞addªss", *
¨gv
);

92 } i‡(!
	`m©ches
(*
¨gv
, "remote")) {

93 
	`NEXT_ARG
();

94 i‡(!
	`öë_gë_addr
(*
¨gv
, &
daddr
, &
daddr6
)) {

95 
	`Ârötf
(
°dîr
, "InvÆidáddªs†\"%s\"\n", *
¨gv
);

98 i‡(
	`IN6_IS_ADDR_MULTICAST
(&
daddr6
Ë|| 
	`IN_MULTICAST
(
	`¡ohl
(
daddr
)))

99 
	`öv¨g
("övÆidÑemŸêaddªss", *
¨gv
);

100 } i‡(!
	`m©ches
(*
¨gv
, "local")) {

101 
	`NEXT_ARG
();

102 i‡(
	`°rcmp
(*
¨gv
, "any")) {

103 i‡(!
	`öë_gë_addr
(*
¨gv
, &
ßddr
, &
ßddr6
)) {

104 
	`Ârötf
(
°dîr
, "InvÆidáddªs†\"%s\"\n", *
¨gv
);

109 i‡(
	`IN_MULTICAST
(
	`¡ohl
(
ßddr
)Ë|| 
	`IN6_IS_ADDR_MULTICAST
(&
ßddr6
))

110 
	`öv¨g
("övÆidÜoˇ»addªss", *
¨gv
);

111 } i‡(!
	`m©ches
(*
¨gv
, "dev")) {

112 
	`NEXT_ARG
();

113 
lök
 = 
	`if_«mëoödex
(*
¨gv
);

114 i‡(
lök
 == 0) {

115 
	`Ârötf
(
°dîr
, "Cannot find device \"%s\"\n",

116 *
¨gv
);

117 
	`exô
(-1);

119 } i‡(!
	`m©ches
(*
¨gv
, "ttl") ||

120 !
	`m©ches
(*
¨gv
, "hoplimit")) {

121 
uvÆ
;

123 
	`NEXT_ARG
();

124 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

125 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0))

126 
	`öv¨g
("övÆid TTL", *
¨gv
);

127 i‡(
uvÆ
 > 255)

128 
	`öv¨g
("TTL mu° bê<255", *
¨gv
);

129 
âl
 = 
uvÆ
;

131 } i‡(!
	`m©ches
(*
¨gv
, "tos") ||

132 !
	`m©ches
(*
¨gv
, "dsfield")) {

133 
__u32
 
uvÆ
;

135 
	`NEXT_ARG
();

136 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

137 i‡(
	`π∆_dsfõld_a2n
(&
uvÆ
, *
¨gv
))

138 
	`öv¨g
("bad TOS vÆue", *
¨gv
);

139 
tos
 = 
uvÆ
;

141 
tos
 = 1;

142 } i‡(!
	`m©ches
(*
¨gv
, "ageing")) {

143 
	`NEXT_ARG
();

144 i‡(
	`°rcmp
(*
¨gv
, "none") == 0)

145 
nﬂge
 = 1;

146 i‡(
	`gë_u32
(&
age
, *
¨gv
, 0))

147 
	`öv¨g
("ageögÅimî", *
¨gv
);

148 } i‡(!
	`m©ches
(*
¨gv
, "maxaddress")) {

149 
	`NEXT_ARG
();

150 i‡(
	`°rcmp
(*
¨gv
, "unlimited") == 0)

151 
maxaddr
 = 0;

152 i‡(
	`gë_u32
(&
maxaddr
, *
¨gv
, 0))

153 
	`öv¨g
("maxáddªs£s", *
¨gv
);

154 } i‡(!
	`m©ches
(*
¨gv
, "port") ||

155 !
	`m©ches
(*
¨gv
, "srcport")) {

156 
__u16
 
möp‹t
, 
maxp‹t
;

157 
	`NEXT_ARG
();

158 i‡(
	`gë_u16
(&
möp‹t
, *
¨gv
, 0))

159 
	`öv¨g
("möÖ‹t", *
¨gv
);

160 
	`NEXT_ARG
();

161 i‡(
	`gë_u16
(&
maxp‹t
, *
¨gv
, 0))

162 
	`öv¨g
("maxÖ‹t", *
¨gv
);

163 
ønge
.
low
 = 
	`ht⁄s
(
möp‹t
);

164 
ønge
.
high
 = 
	`ht⁄s
(
maxp‹t
);

165 } i‡(!
	`m©ches
(*
¨gv
, "dstport")){

166 
	`NEXT_ARG
();

167 i‡(
	`gë_u16
(&
d°p‹t
, *
¨gv
, 0))

168 
	`öv¨g
("d°Ö‹t", *
¨gv
);

169 
d°_p‹t_£t
 = 1;

170 } i‡(!
	`m©ches
(*
¨gv
, "nolearning")) {

171 
À¨nög
 = 0;

172 } i‡(!
	`m©ches
(*
¨gv
, "learning")) {

173 
À¨nög
 = 1;

174 } i‡(!
	`m©ches
(*
¨gv
, "noproxy")) {

175 
¥oxy
 = 0;

176 } i‡(!
	`m©ches
(*
¨gv
, "proxy")) {

177 
¥oxy
 = 1;

178 } i‡(!
	`m©ches
(*
¨gv
, "norsc")) {

179 
rsc
 = 0;

180 } i‡(!
	`m©ches
(*
¨gv
, "rsc")) {

181 
rsc
 = 1;

182 } i‡(!
	`m©ches
(*
¨gv
, "nol2miss")) {

183 
l2miss
 = 0;

184 } i‡(!
	`m©ches
(*
¨gv
, "l2miss")) {

185 
l2miss
 = 1;

186 } i‡(!
	`m©ches
(*
¨gv
, "nol3miss")) {

187 
l3miss
 = 0;

188 } i‡(!
	`m©ches
(*
¨gv
, "l3miss")) {

189 
l3miss
 = 1;

190 } i‡(!
	`m©ches
(*
¨gv
, "udpcsum")) {

191 
udpcsum
 = 1;

192 } i‡(!
	`m©ches
(*
¨gv
, "noudpcsum")) {

193 
udpcsum
 = 0;

194 } i‡(!
	`m©ches
(*
¨gv
, "udp6zerocsumtx")) {

195 
udp6zîocsumtx
 = 1;

196 } i‡(!
	`m©ches
(*
¨gv
, "noudp6zerocsumtx")) {

197 
udp6zîocsumtx
 = 0;

198 } i‡(!
	`m©ches
(*
¨gv
, "udp6zerocsumrx")) {

199 
udp6zîocsumrx
 = 1;

200 } i‡(!
	`m©ches
(*
¨gv
, "noudp6zerocsumrx")) {

201 
udp6zîocsumrx
 = 0;

202 } i‡(!
	`m©ches
(*
¨gv
, "gbp")) {

203 
gbp
 = 1;

204 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

205 
	`ex∂aö
();

208 
	`Ârötf
(
°dîr
, "vxœn: unknow¿comm™d \"%s\"?\n", *
¨gv
);

209 
	`ex∂aö
();

212 
¨gc
--, 
¨gv
++;

215 i‡(!
vni_£t
) {

216 
	`Ârötf
(
°dîr
, "vxlan: missing virtualÇetwork identifier\n");

220 i‡((
gaddr
 && 
daddr
) ||

221 (
	`memcmp
(&
gaddr6
, &
ö6addr_™y
, (gaddr6)) &&

222 
	`memcmp
(&
daddr6
, &
ö6addr_™y
, (daddr6)))) {

223 
	`Ârötf
(
°dîr
, "vxlan: both groupándÑemote cannot be specified\n");

227 i‡(!
d°_p‹t_£t
) {

228 
	`Ârötf
(
°dîr
, "vxlan: destinationÖortÇot specified\n"

230 
	`Ârötf
(
°dîr
,

235 
	`add©å32
(
n
, 1024, 
IFLA_VXLAN_ID
, 
vni
);

236 i‡(
gaddr
)

237 
	`add©å_l
(
n
, 1024, 
IFLA_VXLAN_GROUP
, &
gaddr
, 4);

238 i‡(
daddr
)

239 
	`add©å_l
(
n
, 1024, 
IFLA_VXLAN_GROUP
, &
daddr
, 4);

240 i‡(
	`memcmp
(&
gaddr6
, &
ö6addr_™y
, (gaddr6)) != 0)

241 
	`add©å_l
(
n
, 1024, 
IFLA_VXLAN_GROUP6
, &
gaddr6
, (
ö6_addr
));

242 i‡(
	`memcmp
(&
daddr6
, &
ö6addr_™y
, (daddr6)) != 0)

243 
	`add©å_l
(
n
, 1024, 
IFLA_VXLAN_GROUP6
, &
daddr6
, (
ö6_addr
));

245 i‡(
ßddr
)

246 
	`add©å_l
(
n
, 1024, 
IFLA_VXLAN_LOCAL
, &
ßddr
, 4);

247 i‡(
	`memcmp
(&
ßddr6
, &
ö6addr_™y
, (saddr6)) != 0)

248 
	`add©å_l
(
n
, 1024, 
IFLA_VXLAN_LOCAL6
, &
ßddr6
, (
ö6_addr
));

250 i‡(
lök
)

251 
	`add©å32
(
n
, 1024, 
IFLA_VXLAN_LINK
, 
lök
);

252 
	`add©å8
(
n
, 1024, 
IFLA_VXLAN_TTL
, 
âl
);

253 
	`add©å8
(
n
, 1024, 
IFLA_VXLAN_TOS
, 
tos
);

254 
	`add©å8
(
n
, 1024, 
IFLA_VXLAN_LEARNING
, 
À¨nög
);

255 
	`add©å8
(
n
, 1024, 
IFLA_VXLAN_PROXY
, 
¥oxy
);

256 
	`add©å8
(
n
, 1024, 
IFLA_VXLAN_RSC
, 
rsc
);

257 
	`add©å8
(
n
, 1024, 
IFLA_VXLAN_L2MISS
, 
l2miss
);

258 
	`add©å8
(
n
, 1024, 
IFLA_VXLAN_L3MISS
, 
l3miss
);

259 
	`add©å8
(
n
, 1024, 
IFLA_VXLAN_UDP_CSUM
, 
udpcsum
);

260 
	`add©å8
(
n
, 1024, 
IFLA_VXLAN_UDP_ZERO_CSUM6_TX
, 
udp6zîocsumtx
);

261 
	`add©å8
(
n
, 1024, 
IFLA_VXLAN_UDP_ZERO_CSUM6_RX
, 
udp6zîocsumrx
);

263 i‡(
nﬂge
)

264 
	`add©å32
(
n
, 1024, 
IFLA_VXLAN_AGEING
, 0);

265 i‡(
age
)

266 
	`add©å32
(
n
, 1024, 
IFLA_VXLAN_AGEING
, 
age
);

267 i‡(
maxaddr
)

268 
	`add©å32
(
n
, 1024, 
IFLA_VXLAN_LIMIT
, 
maxaddr
);

269 i‡(
ønge
.
low
 ||Ñ™ge.
high
)

270 
	`add©å_l
(
n
, 1024, 
IFLA_VXLAN_PORT_RANGE
,

271 &
ønge
, (range));

272 i‡(
d°p‹t
)

273 
	`add©å16
(
n
, 1024, 
IFLA_VXLAN_PORT
, 
	`ht⁄s
(
d°p‹t
));

275 i‡(
gbp
)

276 
	`add©å_l
(
n
, 1024, 
IFLA_VXLAN_GBP
, 
NULL
, 0);

280 
	}
}

282 
	$vxœn_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

284 
__u32
 
vni
;

285 
lök
;

286 
__u8
 
tos
;

287 
__u32
 
maxaddr
;

288 
s1
[1024];

289 
s2
[64];

291 i‡(!
tb
)

294 i‡(!
tb
[
IFLA_VXLAN_ID
] ||

295 
	`RTA_PAYLOAD
(
tb
[
IFLA_VXLAN_ID
]Ë< (
__u32
))

298 
vni
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_VXLAN_ID
]);

299 
	`Ârötf
(
f
, "id %u ", 
vni
);

301 i‡(
tb
[
IFLA_VXLAN_GROUP
]) {

302 
__be32
 
addr
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_VXLAN_GROUP
]);

303 i‡(
addr
) {

304 i‡(
	`IN_MULTICAST
(
	`¡ohl
(
addr
)))

305 
	`Ârötf
(
f
, "group %s ",

306 
	`f‹m©_ho°
(
AF_INET
, 4, &
addr
, 
s1
, (s1)));

308 
	`Ârötf
(
f
, "remote %s ",

309 
	`f‹m©_ho°
(
AF_INET
, 4, &
addr
, 
s1
, (s1)));

311 } i‡(
tb
[
IFLA_VXLAN_GROUP6
]) {

312 
ö6_addr
 
addr
;

313 
	`mem˝y
(&
addr
, 
	`RTA_DATA
(
tb
[
IFLA_VXLAN_GROUP6
]), (
ö6_addr
));

314 i‡(
	`memcmp
(&
addr
, &
ö6addr_™y
, (addr)) != 0) {

315 i‡(
	`IN6_IS_ADDR_MULTICAST
(&
addr
))

316 
	`Ârötf
(
f
, "group %s ",

317 
	`f‹m©_ho°
(
AF_INET6
, (
ö6_addr
), &
addr
, 
s1
, (s1)));

319 
	`Ârötf
(
f
, "remote %s ",

320 
	`f‹m©_ho°
(
AF_INET6
, (
ö6_addr
), &
addr
, 
s1
, (s1)));

324 i‡(
tb
[
IFLA_VXLAN_LOCAL
]) {

325 
__be32
 
addr
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_VXLAN_LOCAL
]);

326 i‡(
addr
)

327 
	`Ârötf
(
f
, "local %s ",

328 
	`f‹m©_ho°
(
AF_INET
, 4, &
addr
, 
s1
, (s1)));

329 } i‡(
tb
[
IFLA_VXLAN_LOCAL6
]) {

330 
ö6_addr
 
addr
;

331 
	`mem˝y
(&
addr
, 
	`RTA_DATA
(
tb
[
IFLA_VXLAN_LOCAL6
]), (
ö6_addr
));

332 i‡(
	`memcmp
(&
addr
, &
ö6addr_™y
, (addr)) != 0)

333 
	`Ârötf
(
f
, "local %s ",

334 
	`f‹m©_ho°
(
AF_INET6
, (
ö6_addr
), &
addr
, 
s1
, (s1)));

337 i‡(
tb
[
IFLA_VXLAN_LINK
] &&

338 (
lök
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_VXLAN_LINK
]))) {

339 c⁄° *
n
 = 
	`if_ödext⁄ame
(
lök
, 
s2
);

341 i‡(
n
)

342 
	`Ârötf
(
f
, "dev %†", 
n
);

344 
	`Ârötf
(
f
, "dev %u ", 
lök
);

347 i‡(
tb
[
IFLA_VXLAN_PORT_RANGE
]) {

348 c⁄° 
iÊa_vxœn_p‹t_ønge
 *
r


349 
	`RTA_DATA
(
tb
[
IFLA_VXLAN_PORT_RANGE
]);

350 
	`Ârötf
(
f
, "§˝‹à%u %u ", 
	`¡ohs
(
r
->
low
),Çtohs‘->
high
));

353 i‡(
tb
[
IFLA_VXLAN_PORT
])

354 
	`Ârötf
(
f
, "dstport %u ",

355 
	`¡ohs
(
	`πa_gë©å_u16
(
tb
[
IFLA_VXLAN_PORT
])));

357 i‡(
tb
[
IFLA_VXLAN_LEARNING
] &&

358 !
	`πa_gë©å_u8
(
tb
[
IFLA_VXLAN_LEARNING
]))

359 
	`Âuts
("nﬁó∫ög ", 
f
);

361 i‡(
tb
[
IFLA_VXLAN_PROXY
] && 
	`πa_gë©å_u8
(tb[IFLA_VXLAN_PROXY]))

362 
	`Âuts
("¥oxy ", 
f
);

364 i‡(
tb
[
IFLA_VXLAN_RSC
] && 
	`πa_gë©å_u8
(tb[IFLA_VXLAN_RSC]))

365 
	`Âuts
("rs¯", 
f
);

367 i‡(
tb
[
IFLA_VXLAN_L2MISS
] && 
	`πa_gë©å_u8
(tb[IFLA_VXLAN_L2MISS]))

368 
	`Âuts
("l2mis†", 
f
);

370 i‡(
tb
[
IFLA_VXLAN_L3MISS
] && 
	`πa_gë©å_u8
(tb[IFLA_VXLAN_L3MISS]))

371 
	`Âuts
("l3mis†", 
f
);

373 i‡(
tb
[
IFLA_VXLAN_TOS
] &&

374 (
tos
 = 
	`πa_gë©å_u8
(
tb
[
IFLA_VXLAN_TOS
]))) {

375 i‡(
tos
 == 1)

376 
	`Ârötf
(
f
, "tos inherit ");

378 
	`Ârötf
(
f
, "to†%#x ", 
tos
);

381 i‡(
tb
[
IFLA_VXLAN_TTL
]) {

382 
__u8
 
âl
 = 
	`πa_gë©å_u8
(
tb
[
IFLA_VXLAN_TTL
]);

383 i‡(
âl
)

384 
	`Ârötf
(
f
, "â»%d ", 
âl
);

387 i‡(
tb
[
IFLA_VXLAN_AGEING
]) {

388 
__u32
 
age
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_VXLAN_AGEING
]);

389 i‡(
age
 == 0)

390 
	`Ârötf
(
f
, "ageingÇone ");

392 
	`Ârötf
(
f
, "ageög %u ", 
age
);

395 i‡(
tb
[
IFLA_VXLAN_LIMIT
] &&

396 ((
maxaddr
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_VXLAN_LIMIT
])) != 0))

397 
	`Ârötf
(
f
, "maxadd∏%u ", 
maxaddr
);

399 i‡(
tb
[
IFLA_VXLAN_UDP_CSUM
] && 
	`πa_gë©å_u8
(tb[IFLA_VXLAN_UDP_CSUM]))

400 
	`Âuts
("udpcsum ", 
f
);

402 i‡(
tb
[
IFLA_VXLAN_UDP_ZERO_CSUM6_TX
] &&

403 
	`πa_gë©å_u8
(
tb
[
IFLA_VXLAN_UDP_ZERO_CSUM6_TX
]))

404 
	`Âuts
("udp6zîocsumtx ", 
f
);

406 i‡(
tb
[
IFLA_VXLAN_UDP_ZERO_CSUM6_RX
] &&

407 
	`πa_gë©å_u8
(
tb
[
IFLA_VXLAN_UDP_ZERO_CSUM6_RX
]))

408 
	`Âuts
("udp6zîocsumrx ", 
f
);

410 i‡(
tb
[
IFLA_VXLAN_GBP
])

411 
	`Âuts
("gb∞", 
f
);

412 
	}
}

414 
	$vxœn_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

415 
FILE
 *
f
)

417 
	`¥öt_ex∂aö
(
f
);

418 
	}
}

420 
lök_utû
 
	gvxœn_lök_utû
 = {

421 .
id
 = "vxlan",

422 .
	gmax©å
 = 
IFLA_VXLAN_MAX
,

423 .
	g∑r£_›t
 = 
vxœn_∑r£_›t
,

424 .
	g¥öt_›t
 = 
vxœn_¥öt_›t
,

425 .
	g¥öt_hñp
 = 
vxœn_¥öt_hñp
,

	@ip/ipmaddr.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/io˘l.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~<löux/√tdevi˚.h
>

25 
	~<löux/if.h
>

26 
	~<löux/if_¨p.h
>

27 
	~<löux/sockios.h
>

29 
	~"π_«mes.h
"

30 
	~"utûs.h
"

31 
	~"ù_comm⁄.h
"

34 *
	mdev
;

35 
	mÁmûy
;

36 } 
	gfûãr
;

38 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

40 
	$ußge
()

42 
	`Ârötf
(
°dîr
, "Usage: ip maddr [ádd | del ] MULTIADDR dev STRING\n");

43 
	`Ârötf
(
°dîr
, " ip maddr show [ dev STRING ]\n");

44 
	`exô
(-1);

45 
	}
}

47 
	$∑r£_hex
(*
°r
, *
addr
, 
size_t
 
size
)

49 
Àn
 = 0;

51 *
°r
 && (
Àn
 < 2 * 
size
)) {

52 
tmp
;

53 i‡(
°r
[1] == 0)

55 i‡(
	`ssˇnf
(
°r
, "%02x", &
tmp
) != 1)

57 
addr
[
Àn
] = 
tmp
;

58 
Àn
++;

59 
°r
 += 2;

61  
Àn
;

62 
	}
}

64 
	sma_öfo


66 
ma_öfo
 *
	m√xt
;

67 
	mödex
;

68 
	mu£rs
;

69 *
	m„©uªs
;

70 
	m«me
[
IFNAMSIZ
];

71 
öë_¥efix
 
	maddr
;

74 
	$maddr_ös
(
ma_öfo
 **
l°
, ma_öfÿ*
m
)

76 
ma_öfo
 *
mp
;

78 ; (
mp
 = *
l°
Ë!
NULL
;Ü° = &mp->
√xt
) {

79 i‡(
mp
->
ödex
 > 
m
->index)

82 
m
->
√xt
 = *
l°
;

83 *
l°
 = 
m
;

84 
	}
}

86 
	$ªad_dev_mˇ°
(
ma_öfo
 **
ªsu…_p
)

88 
buf
[256];

89 
FILE
 *
Â
 = 
	`f›í
("/proc/net/dev_mcast", "r");

91 i‡(!
Â
)

94 
	`fgës
(
buf
, (buf), 
Â
)) {

95 
hexa
[256];

96 
ma_öfo
 
m
;

97 
Àn
;

98 
°
;

100 
	`mem£t
(&
m
, 0, (m));

101 
	`ssˇnf
(
buf
, "%d%s%d%d%s", &
m
.
ödex
, m.
«me
, &m.
u£rs
, &
°
,

102 
hexa
);

103 i‡(
fûãr
.
dev
 && 
	`°rcmp
(fûãr.dev, 
m
.
«me
))

106 
m
.
addr
.
Ámûy
 = 
AF_PACKET
;

108 
Àn
 = 
	`∑r£_hex
(
hexa
, (*)&
m
.
addr
.
d©a
,  (m.addr.data));

109 i‡(
Àn
 >= 0) {

110 
ma_öfo
 *
ma
 = 
	`mÆloc
((
m
));

112 
	`mem˝y
(
ma
, &
m
, (m));

113 
ma
->
addr
.
byãÀn
 = 
Àn
;

114 
ma
->
addr
.
bôÀn
 = 
Àn
<<3;

115 i‡(
°
)

116 
ma
->
„©uªs
 = "static";

117 
	`maddr_ös
(
ªsu…_p
, 
ma
);

120 
	`f˛o£
(
Â
);

121 
	}
}

123 
	$ªad_igmp
(
ma_öfo
 **
ªsu…_p
)

125 
ma_öfo
 
m
;

126 
buf
[256];

127 
FILE
 *
Â
 = 
	`f›í
("/proc/net/igmp", "r");

129 i‡(!
Â
)

131 
	`mem£t
(&
m
, 0, (m));

132 i‡(!
	`fgës
(
buf
, (buf), 
Â
)) {

133 
	`f˛o£
(
Â
);

137 
m
.
addr
.
Ámûy
 = 
AF_INET
;

138 
m
.
addr
.
bôÀn
 = 32;

139 
m
.
addr
.
byãÀn
 = 4;

141 
	`fgës
(
buf
, (buf), 
Â
)) {

142 
ma_öfo
 *
ma
;

144 i‡(
buf
[0] != '\t') {

145 
	`ssˇnf
(
buf
, "%d%s", &
m
.
ödex
, m.
«me
);

149 i‡(
fûãr
.
dev
 && 
	`°rcmp
(fûãr.dev, 
m
.
«me
))

152 
	`ssˇnf
(
buf
, "%08x%d", (
__u32
*)&
m
.
addr
.
d©a
, &m.
u£rs
);

154 
ma
 = 
	`mÆloc
((
m
));

155 
	`mem˝y
(
ma
, &
m
, (m));

156 
	`maddr_ös
(
ªsu…_p
, 
ma
);

158 
	`f˛o£
(
Â
);

159 
	}
}

162 
	$ªad_igmp6
(
ma_öfo
 **
ªsu…_p
)

164 
buf
[256];

165 
FILE
 *
Â
 = 
	`f›í
("/proc/net/igmp6", "r");

167 i‡(!
Â
)

170 
	`fgës
(
buf
, (buf), 
Â
)) {

171 
hexa
[256];

172 
ma_öfo
 
m
;

173 
Àn
;

175 
	`mem£t
(&
m
, 0, (m));

176 
	`ssˇnf
(
buf
, "%d%s%s%d", &
m
.
ödex
, m.
«me
, 
hexa
, &m.
u£rs
);

178 i‡(
fûãr
.
dev
 && 
	`°rcmp
(fûãr.dev, 
m
.
«me
))

181 
m
.
addr
.
Ámûy
 = 
AF_INET6
;

183 
Àn
 = 
	`∑r£_hex
(
hexa
, (*)&
m
.
addr
.
d©a
,  (m.addr.data));

184 i‡(
Àn
 >= 0) {

185 
ma_öfo
 *
ma
 = 
	`mÆloc
((
m
));

187 
	`mem˝y
(
ma
, &
m
, (m));

189 
ma
->
addr
.
byãÀn
 = 
Àn
;

190 
ma
->
addr
.
bôÀn
 = 
Àn
<<3;

191 
	`maddr_ös
(
ªsu…_p
, 
ma
);

194 
	`f˛o£
(
Â
);

195 
	}
}

197 
	$¥öt_maddr
(
FILE
 *
Â
, 
ma_öfo
 *
li°
)

199 
	`Ârötf
(
Â
, "\t");

201 i‡(
li°
->
addr
.
Ámûy
 =
AF_PACKET
) {

202 
	`SPRINT_BUF
(
b1
);

203 
	`Ârötf
(
Â
, "lök %s", 
	`Œ_addr_n2a
((*)
li°
->
addr
.
d©a
,

204 
li°
->
addr
.
byãÀn
, 0,

205 
b1
, (b1)));

207 
abuf
[256];

208 
li°
->
addr
.
Ámûy
) {

209 
AF_INET
:

210 
	`Ârötf
(
Â
, "inet ");

212 
AF_INET6
:

213 
	`Ârötf
(
Â
, "inet6 ");

216 
	`Ârötf
(
Â
, "Ámûy %d ", 
li°
->
addr
.
Ámûy
);

219 
	`Ârötf
(
Â
, "%s",

220 
	`f‹m©_ho°
(
li°
->
addr
.
Ámûy
,

222 
li°
->
addr
.
d©a
,

223 
abuf
, (abuf)));

225 i‡(
li°
->
u£rs
 != 1)

226 
	`Ârötf
(
Â
, " u£r†%d", 
li°
->
u£rs
);

227 i‡(
li°
->
„©uªs
)

228 
	`Ârötf
(
Â
, " %s", 
li°
->
„©uªs
);

229 
	`Ârötf
(
Â
, "\n");

230 
	}
}

232 
	$¥öt_mli°
(
FILE
 *
Â
, 
ma_öfo
 *
li°
)

234 
cur_ödex
 = 0;

236 ; 
li°
;Üi° =Üi°->
√xt
) {

237 i‡(
⁄ñöe
) {

238 
cur_ödex
 = 
li°
->
ödex
;

239 
	`Ârötf
(
Â
, "%d:\t%s%s", 
cur_ödex
, 
li°
->
«me
, 
_SL_
);

240 } i‡(
cur_ödex
 !
li°
->
ödex
) {

241 
cur_ödex
 = 
li°
->
ödex
;

242 
	`Ârötf
(
Â
, "%d:\t%s\n", 
cur_ödex
, 
li°
->
«me
);

244 
	`¥öt_maddr
(
Â
, 
li°
);

246 
	}
}

248 
	$mu…üddr_li°
(
¨gc
, **
¨gv
)

250 
ma_öfo
 *
li°
 = 
NULL
;

252 i‡(!
fûãr
.
Ámûy
)

253 
fûãr
.
Ámûy
 = 
¥e„ºed_Ámûy
;

255 
¨gc
 > 0) {

257 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

258 
	`NEXT_ARG
();

260 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

261 
	`ußge
();

262 i‡(
fûãr
.
dev
)

263 
	`du∑rg2
("dev", *
¨gv
);

264 
fûãr
.
dev
 = *
¨gv
;

266 
¨gv
++; 
¨gc
--;

269 i‡(!
fûãr
.
Ámûy
 || fûãr.Ámûy =
AF_PACKET
)

270 
	`ªad_dev_mˇ°
(&
li°
);

271 i‡(!
fûãr
.
Ámûy
 || fûãr.Ámûy =
AF_INET
)

272 
	`ªad_igmp
(&
li°
);

273 i‡(!
fûãr
.
Ámûy
 || fûãr.Ámûy =
AF_INET6
)

274 
	`ªad_igmp6
(&
li°
);

275 
	`¥öt_mli°
(
°dout
, 
li°
);

277 
	}
}

279 
	$mu…üddr_modify
(
cmd
, 
¨gc
, **
¨gv
)

281 
i‰eq
 
i‰
;

282 
fd
;

284 
	`mem£t
(&
i‰
, 0, (ifr));

286 i‡(
cmd
 =
RTM_NEWADDR
)

287 
cmd
 = 
SIOCADDMULTI
;

289 
cmd
 = 
SIOCDELMULTI
;

291 
¨gc
 > 0) {

292 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

293 
	`NEXT_ARG
();

294 i‡(
i‰
.
i‰_«me
[0])

295 
	`du∑rg
("dev", *
¨gv
);

296 
	`°∫˝y
(
i‰
.
i‰_«me
, *
¨gv
, 
IFNAMSIZ
);

298 i‡(
	`m©ches
(*
¨gv
, "address") == 0) {

299 
	`NEXT_ARG
();

301 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

302 
	`ußge
();

303 i‡(
i‰
.
i‰_hwaddr
.
ß_d©a
[0])

304 
	`du∑rg
("addªss", *
¨gv
);

305 i‡(
	`Œ_addr_a2n
(
i‰
.
i‰_hwaddr
.
ß_d©a
,

306 14, *
¨gv
) < 0) {

307 
	`Ârötf
(
°dîr
, "Eº‹: \"%s\" i†nŸáÜegÆÜ»addªss.\n", *
¨gv
);

308 
	`exô
(1);

311 
¨gc
--; 
¨gv
++;

313 i‡(
i‰
.
i‰_«me
[0] == 0) {

314 
	`Ârötf
(
°dîr
, "NotÉnough information: \"dev\" isÑequired.\n");

315 
	`exô
(-1);

318 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

319 i‡(
fd
 < 0) {

320 
	`≥º‹
("Cannot create socket");

321 
	`exô
(1);

323 i‡(
	`io˘l
(
fd
, 
cmd
, (*)&
i‰
) != 0) {

324 
	`≥º‹
("ioctl");

325 
	`exô
(1);

327 
	`˛o£
(
fd
);

329 
	`exô
(0);

330 
	}
}

333 
	$do_mu…üddr
(
¨gc
, **
¨gv
)

335 i‡(
¨gc
 < 1)

336  
	`mu…üddr_li°
(0, 
NULL
);

337 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

338  
	`mu…üddr_modify
(
RTM_NEWADDR
, 
¨gc
-1, 
¨gv
+1);

339 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

340  
	`mu…üddr_modify
(
RTM_DELADDR
, 
¨gc
-1, 
¨gv
+1);

341 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

342 || 
	`m©ches
(*
¨gv
, "lst") == 0)

343  
	`mu…üddr_li°
(
¨gc
-1, 
¨gv
+1);

344 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

345 
	`ußge
();

346 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ù madd∏hñp\".\n", *
¨gv
);

347 
	`exô
(-1);

348 
	}
}

	@ip/ipmonitor.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<time.h
>

24 
	~"utûs.h
"

25 
	~"ù_comm⁄.h
"

27 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

28 
¥efix_b™√r
;

29 
li°í_Æl_nsid
;

31 
	$ußge
()

33 
	`Ârötf
(
°dîr
, "Usage: ip monitor [áll | LISTofOBJECTS ] [ FILE ] "

35 
	`Ârötf
(
°dîr
, "LISTofOBJECTS :=Üink |áddress |Ñoute | mroute |Örefix |\n");

36 
	`Ârötf
(
°dîr
, "Çeigh |Çetconf |Ñule |Çsid\n");

37 
	`Ârötf
(
°dîr
, "FILE := file FILENAME\n");

38 
	`exô
(-1);

39 
	}
}

41 
	$¥öt_hódîs
(
FILE
 *
Â
, *
œbñ
, 
π∆_˘æ_d©a
 *
˘æ
)

43 i‡(
time°amp
)

44 
	`¥öt_time°amp
(
Â
);

46 i‡(
li°í_Æl_nsid
) {

47 i‡(
˘æ
 =
NULL
 || cål->
nsid
 < 0)

48 
	`Ârötf
(
Â
, "[nsid current]");

50 
	`Ârötf
(
Â
, "[nsid %d]", 
˘æ
->
nsid
);

53 i‡(
¥efix_b™√r
)

54 
	`Ârötf
(
Â
, "%s", 
œbñ
);

55 
	}
}

57 
	$ac˚±_msg
(c⁄° 
sockaddr_∆
 *
who
,

58 
π∆_˘æ_d©a
 *
˘æ
,

59 
∆msghdr
 *
n
, *
¨g
)

61 
FILE
 *
Â
 = (FILE*)
¨g
;

63 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWROUTE
 ||Ç->∆msg_ty≥ =
RTM_DELROUTE
) {

64 
πmsg
 *
r
 = 
	`NLMSG_DATA
(
n
);

65 
Àn
 = 
n
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
r
));

67 i‡(
Àn
 < 0) {

68 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

72 i‡(
r
->
πm_Êags
 & 
RTM_F_CLONED
)

75 i‡(
r
->
πm_Ámûy
 =
RTNL_FAMILY_IPMR
 ||

76 
r
->
πm_Ámûy
 =
RTNL_FAMILY_IP6MR
) {

77 
	`¥öt_hódîs
(
Â
, "[MROUTE]", 
˘æ
);

78 
	`¥öt_mrouã
(
who
, 
n
, 
¨g
);

81 
	`¥öt_hódîs
(
Â
, "[ROUTE]", 
˘æ
);

82 
	`¥öt_rouã
(
who
, 
n
, 
¨g
);

87 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWLINK
 ||Ç->∆msg_ty≥ =
RTM_DELLINK
) {

88 
	`Œ_ªmembî_ödex
(
who
, 
n
, 
NULL
);

89 
	`¥öt_hódîs
(
Â
, "[LINK]", 
˘æ
);

90 
	`¥öt_lököfo
(
who
, 
n
, 
¨g
);

93 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWADDR
 ||Ç->∆msg_ty≥ =
RTM_DELADDR
) {

94 
	`¥öt_hódîs
(
Â
, "[ADDR]", 
˘æ
);

95 
	`¥öt_addröfo
(
who
, 
n
, 
¨g
);

98 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWADDRLABEL
 ||Ç->∆msg_ty≥ =
RTM_DELADDRLABEL
) {

99 
	`¥öt_hódîs
(
Â
, "[ADDRLABEL]", 
˘æ
);

100 
	`¥öt_addæabñ
(
who
, 
n
, 
¨g
);

103 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWNEIGH
 ||Ç->∆msg_ty≥ =
RTM_DELNEIGH
 ||

104 
n
->
∆msg_ty≥
 =
RTM_GETNEIGH
) {

105 i‡(
¥e„ºed_Ámûy
) {

106 
ndmsg
 *
r
 = 
	`NLMSG_DATA
(
n
);

108 i‡(
r
->
ndm_Ámûy
 !
¥e„ºed_Ámûy
)

112 
	`¥öt_hódîs
(
Â
, "[NEIGH]", 
˘æ
);

113 
	`¥öt_√igh
(
who
, 
n
, 
¨g
);

116 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWPREFIX
) {

117 
	`¥öt_hódîs
(
Â
, "[PREFIX]", 
˘æ
);

118 
	`¥öt_¥efix
(
who
, 
n
, 
¨g
);

121 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWRULE
 ||Ç->∆msg_ty≥ =
RTM_DELRULE
) {

122 
	`¥öt_hódîs
(
Â
, "[RULE]", 
˘æ
);

123 
	`¥öt_ruÀ
(
who
, 
n
, 
¨g
);

126 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWNETCONF
) {

127 
	`¥öt_hódîs
(
Â
, "[NETCONF]", 
˘æ
);

128 
	`¥öt_√tc⁄f
(
who
, 
˘æ
, 
n
, 
¨g
);

131 i‡(
n
->
∆msg_ty≥
 =
NLMSG_TSTAMP
) {

132 
	`¥öt_∆msg_time°amp
(
Â
, 
n
);

135 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWNSID
 ||Ç->∆msg_ty≥ =
RTM_DELNSID
) {

136 
	`¥öt_hódîs
(
Â
, "[NSID]", 
˘æ
);

137 
	`¥öt_nsid
(
who
, 
n
, 
¨g
);

140 i‡(
n
->
∆msg_ty≥
 !
NLMSG_ERROR
 &&Ç->∆msg_ty≥ !
NLMSG_NOOP
 &&

141 
n
->
∆msg_ty≥
 !
NLMSG_DONE
) {

142 
	`Ârötf
(
Â
, "Unknown message:Åype=0x%08x(%d) flags=0x%08x(%d)"

143 "Àn=0x%08x(%d)\n", 
n
->
∆msg_ty≥
,Ç->nlmsg_type,

144 
n
->
∆msg_Êags
,Ç->∆msg_Êags,Ç->
∆msg_Àn
,

145 
n
->
∆msg_Àn
);

148 
	}
}

150 
	$do_ùm⁄ô‹
(
¨gc
, **
¨gv
)

152 *
fûe
 = 
NULL
;

153 
groups
 = 0;

154 
Œök
=0;

155 
œddr
=0;

156 
Ãouã
=0;

157 
lmrouã
=0;

158 
Õªfix
=0;

159 
 eigh
=0;

160 
 ëc⁄f
=0;

161 
ÃuÀ
=0;

162 
 sid
=0;

163 
ifödex
=0;

165 
groups
 |
	`∆_mgΩ
(
RTNLGRP_LINK
);

166 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_IFADDR
);

167 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_IFADDR
);

168 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_ROUTE
);

169 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_ROUTE
);

170 
groups
 |
	`∆_mgΩ
(
RTNLGRP_MPLS_ROUTE
);

171 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_MROUTE
);

172 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_MROUTE
);

173 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_PREFIX
);

174 
groups
 |
	`∆_mgΩ
(
RTNLGRP_NEIGH
);

175 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_NETCONF
);

176 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_NETCONF
);

177 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_RULE
);

178 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_RULE
);

179 
groups
 |
	`∆_mgΩ
(
RTNLGRP_NSID
);

181 
	`π∆_˛o£
(&
πh
);

183 
¨gc
 > 0) {

184 i‡(
	`m©ches
(*
¨gv
, "file") == 0) {

185 
	`NEXT_ARG
();

186 
fûe
 = *
¨gv
;

187 } i‡(
	`m©ches
(*
¨gv
, "label") == 0) {

188 
¥efix_b™√r
 = 1;

189 } i‡(
	`m©ches
(*
¨gv
, "all-nsid") == 0) {

190 
li°í_Æl_nsid
 = 1;

191 } i‡(
	`m©ches
(*
¨gv
, "link") == 0) {

192 
Œök
=1;

193 
groups
 = 0;

194 } i‡(
	`m©ches
(*
¨gv
, "address") == 0) {

195 
œddr
=1;

196 
groups
 = 0;

197 } i‡(
	`m©ches
(*
¨gv
, "route") == 0) {

198 
Ãouã
=1;

199 
groups
 = 0;

200 } i‡(
	`m©ches
(*
¨gv
, "mroute") == 0) {

201 
lmrouã
=1;

202 
groups
 = 0;

203 } i‡(
	`m©ches
(*
¨gv
, "prefix") == 0) {

204 
Õªfix
=1;

205 
groups
 = 0;

206 } i‡(
	`m©ches
(*
¨gv
, "neigh") == 0) {

207 
 eigh
 = 1;

208 
groups
 = 0;

209 } i‡(
	`m©ches
(*
¨gv
, "netconf") == 0) {

210 
 ëc⁄f
 = 1;

211 
groups
 = 0;

212 } i‡(
	`m©ches
(*
¨gv
, "rule") == 0) {

213 
ÃuÀ
 = 1;

214 
groups
 = 0;

215 } i‡(
	`m©ches
(*
¨gv
, "nsid") == 0) {

216 
 sid
 = 1;

217 
groups
 = 0;

218 } i‡(
	`°rcmp
(*
¨gv
, "all") == 0) {

219 
¥efix_b™√r
=1;

220 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

221 
	`ußge
();

222 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

223 
	`NEXT_ARG
();

225 
ifödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
);

226 i‡(!
ifödex
)

227 
	`öv¨g
("Devi˚ d€†nŸÉxi°\n", *
¨gv
);

229 
	`Ârötf
(
°dîr
, "Argumíà\"%s\" i†unknown,Åry \"ù m⁄ô‹ hñp\".\n", *
¨gv
);

230 
	`exô
(-1);

232 
¨gc
--; 
¨gv
++;

235 
	`ùaddr_ª£t_fûãr
(1, 
ifödex
);

236 
	`ùrouã_ª£t_fûãr
(
ifödex
);

237 
	`ùmrouã_ª£t_fûãr
(
ifödex
);

238 
	`ù√igh_ª£t_fûãr
(
ifödex
);

239 
	`ù√tc⁄f_ª£t_fûãr
(
ifödex
);

241 i‡(
Œök
)

242 
groups
 |
	`∆_mgΩ
(
RTNLGRP_LINK
);

243 i‡(
œddr
) {

244 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_INET
)

245 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_IFADDR
);

246 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_INET6
)

247 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_IFADDR
);

249 i‡(
Ãouã
) {

250 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_INET
)

251 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_ROUTE
);

252 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_INET6
)

253 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_ROUTE
);

254 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_MPLS
)

255 
groups
 |
	`∆_mgΩ
(
RTNLGRP_MPLS_ROUTE
);

257 i‡(
lmrouã
) {

258 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_INET
)

259 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_MROUTE
);

260 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_INET6
)

261 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_MROUTE
);

263 i‡(
Õªfix
) {

264 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_INET6
)

265 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_PREFIX
);

267 i‡(
 eigh
) {

268 
groups
 |
	`∆_mgΩ
(
RTNLGRP_NEIGH
);

270 i‡(
 ëc⁄f
) {

271 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_INET
)

272 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_NETCONF
);

273 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_INET6
)

274 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_NETCONF
);

276 i‡(
ÃuÀ
) {

277 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_INET
)

278 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_RULE
);

279 i‡(!
¥e„ºed_Ámûy
 ||Öª„ºed_Ámûy =
AF_INET6
)

280 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_RULE
);

282 i‡(
 sid
) {

283 
groups
 |
	`∆_mgΩ
(
RTNLGRP_NSID
);

285 i‡(
fûe
) {

286 
FILE
 *
Â
;

287 
Â
 = 
	`f›í
(
fûe
, "r");

288 i‡(
Â
 =
NULL
) {

289 
	`≥º‹
("Cannot fopen");

290 
	`exô
(-1);

292  
	`π∆_‰om_fûe
(
Â
, 
ac˚±_msg
, 
°dout
);

295 i‡(
	`π∆_›í
(&
πh
, 
groups
) < 0)

296 
	`exô
(1);

297 i‡(
li°í_Æl_nsid
 && 
	`π∆_li°í_Æl_nsid
(&
πh
) < 0)

298 
	`exô
(1);

300 
	`Œ_öô_m≠
(&
πh
);

301 
	`√äs_m≠_öô
();

303 i‡(
	`π∆_li°í
(&
πh
, 
ac˚±_msg
, 
°dout
) < 0)

304 
	`exô
(2);

307 
	}
}

	@ip/ipmroute.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<öây≥s.h
>

19 
	~<sys/io˘l.h
>

20 
	~<sys/sockë.h
>

21 
	~<√töë/ö.h
>

22 
	~<¨∑/öë.h
>

23 
	~<°rög.h
>

25 
	~<löux/√tdevi˚.h
>

26 
	~<löux/if.h
>

27 
	~<löux/if_¨p.h
>

28 
	~<löux/sockios.h
>

30 
	~<π_«mes.h
>

31 
	~"utûs.h
"

32 
	~"ù_comm⁄.h
"

34 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

36 
	$ußge
()

38 
	`Ârötf
(
°dîr
, "Usage: ip mroute show [ [Åo ] PREFIX ] [ from PREFIX ] [ iif DEVICE ]\n");

39 
	`Ârötf
(
°dîr
, " [Åable TABLE_ID ]\n");

40 
	`Ârötf
(
°dîr
, "TABLE_ID := [Üocal | main | default |áll | NUMBER ]\n");

42 
	`Ârötf
(
°dîr
, "Usage: ip mroute [ádd | del ] DESTINATION from SOURCE [ iif DEVICE ] [ oif DEVICE ]\n");

44 
	`exô
(-1);

45 
	}
}

47 
	sπfûãr


49 
	mtb
;

50 
	maf
;

51 
	miif
;

52 
öë_¥efix
 
	mmd°
;

53 
öë_¥efix
 
	mm§c
;

54 } 
	gfûãr
;

56 
	$¥öt_mrouã
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

58 
FILE
 *
Â
 = (FILE*)
¨g
;

59 
πmsg
 *
r
 = 
	`NLMSG_DATA
(
n
);

60 
Àn
 = 
n
->
∆msg_Àn
;

61 
π©å
 * 
tb
[
RTA_MAX
+1];

62 
abuf
[256];

63 
obuf
[256];

64 
	`SPRINT_BUF
(
b1
);

65 
__u32
 
èbÀ
;

66 
iif
 = 0;

67 
Ámûy
;

69 i‡((
n
->
∆msg_ty≥
 !
RTM_NEWROUTE
 &&

70 
n
->
∆msg_ty≥
 !
RTM_DELROUTE
)) {

71 
	`Ârötf
(
°dîr
, "Notá multicastÑoute: %08x %08x %08x\n",

72 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

75 
Àn
 -
	`NLMSG_LENGTH
((*
r
));

76 i‡(
Àn
 < 0) {

77 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

80 i‡(
r
->
πm_ty≥
 !
RTN_MULTICAST
) {

81 
	`Ârötf
(
°dîr
, "Notá multicastÑoute (type: %s)\n",

82 
	`π∆_π¡y≥_n2a
(
r
->
πm_ty≥
, 
b1
, (b1)));

86 
	`∑r£_π©å
(
tb
, 
RTA_MAX
, 
	`RTM_RTA
(
r
), 
Àn
);

87 
èbÀ
 = 
	`πm_gë_èbÀ
(
r
, 
tb
);

89 i‡(
fûãr
.
tb
 > 0 && fûãr.tb !
èbÀ
)

92 i‡(
tb
[
RTA_IIF
])

93 
iif
 = *(*)
	`RTA_DATA
(
tb
[
RTA_IIF
]);

94 i‡(
fûãr
.
iif
 && filter.iif != iif)

97 i‡(
fûãr
.
af
 && fûãr.a‡!
r
->
πm_Ámûy
)

100 i‡(
tb
[
RTA_DST
] && 
fûãr
.
md°
.
bôÀn
 > 0) {

101 
öë_¥efix
 
d°
;

103 
	`mem£t
(&
d°
, 0, (dst));

104 
d°
.
Ámûy
 = 
r
->
πm_Ámûy
;

105 
	`mem˝y
(&
d°
.
d©a
, 
	`RTA_DATA
(
tb
[
RTA_DST
]), 
	`RTA_PAYLOAD
(tb[RTA_DST]));

106 i‡(
	`öë_addr_m©ch
(&
d°
, &
fûãr
.
md°
, fûãr.md°.
bôÀn
))

110 i‡(
tb
[
RTA_SRC
] && 
fûãr
.
m§c
.
bôÀn
 > 0) {

111 
öë_¥efix
 
§c
;

113 
	`mem£t
(&
§c
, 0, (src));

114 
§c
.
Ámûy
 = 
r
->
πm_Ámûy
;

115 
	`mem˝y
(&
§c
.
d©a
, 
	`RTA_DATA
(
tb
[
RTA_SRC
]), 
	`RTA_PAYLOAD
(tb[RTA_SRC]));

116 i‡(
	`öë_addr_m©ch
(&
§c
, &
fûãr
.
m§c
, fûãr.m§c.
bôÀn
))

120 
Ámûy
 = 
r
->
πm_Ámûy
 =
RTNL_FAMILY_IPMR
 ? 
AF_INET
 : 
AF_INET6
;

122 i‡(
n
->
∆msg_ty≥
 =
RTM_DELROUTE
)

123 
	`Ârötf
(
Â
, "Deleted ");

125 i‡(
tb
[
RTA_SRC
])

126 
Àn
 = 
	`¢¥ötf
(
obuf
, (obuf),

127 "(%s, ", 
	`π_addr_n2a
(
Ámûy
,

128 
	`RTA_PAYLOAD
(
tb
[
RTA_SRC
]),

129 
	`RTA_DATA
(
tb
[
RTA_SRC
]),

130 
abuf
, (abuf)));

132 
Àn
 = 
	`•rötf
(
obuf
, "(unknown, ");

133 i‡(
tb
[
RTA_DST
])

134 
	`¢¥ötf
(
obuf
 + 
Àn
, (obuf) -Üen,

135 "%s)", 
	`π_addr_n2a
(
Ámûy
,

136 
	`RTA_PAYLOAD
(
tb
[
RTA_DST
]),

137 
	`RTA_DATA
(
tb
[
RTA_DST
]),

138 
abuf
, (abuf)));

140 
	`¢¥ötf
(
obuf
 + 
Àn
, (obuf) -Üen, "unknown) ");

142 
	`Ârötf
(
Â
, "%-32†Iif: ", 
obuf
);

143 i‡(
iif
)

144 
	`Ârötf
(
Â
, "%-10†", 
	`Œ_ödex_to_«me
(
iif
));

146 
	`Ârötf
(
Â
, "unresolved ");

148 i‡(
tb
[
RTA_MULTIPATH
]) {

149 
π√xth›
 *
nh
 = 
	`RTA_DATA
(
tb
[
RTA_MULTIPATH
]);

150 
fú°
 = 1;

152 
Àn
 = 
	`RTA_PAYLOAD
(
tb
[
RTA_MULTIPATH
]);

155 i‡(
Àn
 < (*
nh
))

157 i‡(
nh
->
πnh_Àn
 > 
Àn
)

160 i‡(
fú°
) {

161 
	`Ârötf
(
Â
, "Oifs: ");

162 
fú°
 = 0;

164 
	`Ârötf
(
Â
, "%s", 
	`Œ_ödex_to_«me
(
nh
->
πnh_ifödex
));

165 i‡(
nh
->
πnh_h›s
 > 1)

166 
	`Ârötf
(
Â
, "—é %dË", 
nh
->
πnh_h›s
);

168 
	`Ârötf
(
Â
, " ");

169 
Àn
 -
	`NLMSG_ALIGN
(
nh
->
πnh_Àn
);

170 
nh
 = 
	`RTNH_NEXT
(nh);

173 i‡(
show_°©s
 && 
tb
[
RTA_MFC_STATS
]) {

174 
πa_mfc_°©s
 *
mfcs
 = 
	`RTA_DATA
(
tb
[
RTA_MFC_STATS
]);

176 
	`Ârötf
(
Â
, "%† %"
PRIu64
"Öackës, %"PRIu64" byãs", 
_SL_
,

177 (
uöt64_t
)
mfcs
->
mfcs_∑ckës
,

178 (
uöt64_t
)
mfcs
->
mfcs_byãs
);

179 i‡(
mfcs
->
mfcs_wr⁄g_if
)

180 
	`Ârötf
(
Â
, ", %"
PRIu64
"árrived on wrong iif.",

181 (
uöt64_t
)
mfcs
->
mfcs_wr⁄g_if
);

183 
	`Ârötf
(
Â
, "\n");

184 
	`fÊush
(
Â
);

186 
	}
}

188 
	$ùmrouã_ª£t_fûãr
(
ifödex
)

190 
	`mem£t
(&
fûãr
, 0, (filter));

191 
fûãr
.
md°
.
bôÀn
 = -1;

192 
fûãr
.
m§c
.
bôÀn
 = -1;

193 
fûãr
.
iif
 = 
ifödex
;

194 
	}
}

196 
	$mrouã_li°
(
¨gc
, **
¨gv
)

198 *
id
 = 
NULL
;

199 
Ámûy
;

201 
	`ùmrouã_ª£t_fûãr
(0);

202 i‡(
¥e„ºed_Ámûy
 =
AF_UNSPEC
)

203 
Ámûy
 = 
AF_INET
;

205 
Ámûy
 = 
AF_INET6
;

206 i‡(
Ámûy
 =
AF_INET
) {

207 
fûãr
.
af
 = 
RTNL_FAMILY_IPMR
;

208 
fûãr
.
tb
 = 
RT_TABLE_DEFAULT
;

210 
fûãr
.
af
 = 
RTNL_FAMILY_IP6MR
;

212 
¨gc
 > 0) {

213 i‡(
	`m©ches
(*
¨gv
, "table") == 0) {

214 
__u32
 
tid
;

215 
	`NEXT_ARG
();

216 i‡(
	`π∆_πèbÀ_a2n
(&
tid
, *
¨gv
)) {

217 i‡(
	`°rcmp
(*
¨gv
, "all") == 0) {

218 
fûãr
.
tb
 = 0;

219 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

220 
	`ußge
();

222 
	`öv¨g
("èbÀ id vÆuêi†övÆid\n", *
¨gv
);

225 
fûãr
.
tb
 = 
tid
;

226 } i‡(
	`°rcmp
(*
¨gv
, "iif") == 0) {

227 
	`NEXT_ARG
();

228 
id
 = *
¨gv
;

229 } i‡(
	`m©ches
(*
¨gv
, "from") == 0) {

230 
	`NEXT_ARG
();

231 
	`gë_¥efix
(&
fûãr
.
m§c
, *
¨gv
, 
Ámûy
);

233 i‡(
	`°rcmp
(*
¨gv
, "to") == 0) {

234 
	`NEXT_ARG
();

236 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

237 
	`ußge
();

238 
	`gë_¥efix
(&
fûãr
.
md°
, *
¨gv
, 
Ámûy
);

240 
¨gc
--; 
¨gv
++;

243 
	`Œ_öô_m≠
(&
πh
);

245 i‡(
id
) {

246 
idx
;

248 i‡((
idx
 = 
	`Œ_«me_to_ödex
(
id
)) == 0) {

249 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
id
);

252 
fûãr
.
iif
 = 
idx
;

255 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
fûãr
.
af
, 
RTM_GETROUTE
) < 0) {

256 
	`≥º‹
("Cannot send dumpÑequest");

260 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_mrouã
, 
°dout
) < 0) {

261 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

262 
	`exô
(1);

265 
	`exô
(0);

266 
	}
}

268 
	$do_mu…úouã
(
¨gc
, **
¨gv
)

270 i‡(
¨gc
 < 1)

271  
	`mrouã_li°
(0, 
NULL
);

273 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

274  
	`mrouã_modify
(
RTM_NEWADDR
, 
¨gc
-1, 
¨gv
+1);

275 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

276  
	`mrouã_modify
(
RTM_DELADDR
, 
¨gc
-1, 
¨gv
+1);

277 i‡(
	`m©ches
(*
¨gv
, "get") == 0)

278  
	`mrouã_gë
(
¨gc
-1, 
¨gv
+1);

280 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

281 || 
	`m©ches
(*
¨gv
, "lst") == 0)

282  
	`mrouã_li°
(
¨gc
-1, 
¨gv
+1);

283 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

284 
	`ußge
();

285 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ù mrouã hñp\".\n", *
¨gv
);

286 
	`exô
(-1);

287 
	}
}

	@ip/ipneigh.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<°rög.h
>

19 
	~<sys/time.h
>

20 
	~<sys/sockë.h
>

21 
	~<√töë/ö.h
>

22 
	~<√töë/ù.h
>

24 
	~"π_«mes.h
"

25 
	~"utûs.h
"

26 
	~"ù_comm⁄.h
"

28 
	#NUD_VALID
 (
NUD_PERMANENT
|
NUD_NOARP
|
NUD_REACHABLE
|
NUD_PROBE
|
NUD_STALE
|
NUD_DELAY
)

	)

29 
	#MAX_ROUNDS
 10

	)

33 
	mÁmûy
;

34 
	mödex
;

35 
	m°©e
;

36 
	munu£d_⁄ly
;

37 
öë_¥efix
 
	mpfx
;

38 
	mÊushed
;

39 *
	mÊushb
;

40 
	mÊushp
;

41 
	mÊushe
;

42 } 
	gfûãr
;

44 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

46 
	$ußge
()

48 
	`Ârötf
(
°dîr
, "Usage: ipÇeigh {ádd | del | change |Ñeplace } { ADDR [Üladdr LLADDR ]\n"

51 
	`Ârötf
(
°dîr
, " ipÇeigh {show|flush} [Åo PREFIX ] [ dev DEV ] [Çud STATE ]\n");

52 
	`exô
(-1);

53 
	}
}

55 
	$nud_°©e_a2n
(*
°©e
, c⁄° *
¨g
)

57 i‡(
	`m©ches
(
¨g
, "permanent") == 0)

58 *
°©e
 = 
NUD_PERMANENT
;

59 i‡(
	`m©ches
(
¨g
, "reachable") == 0)

60 *
°©e
 = 
NUD_REACHABLE
;

61 i‡(
	`°rcmp
(
¨g
, "noarp") == 0)

62 *
°©e
 = 
NUD_NOARP
;

63 i‡(
	`°rcmp
(
¨g
, "none") == 0)

64 *
°©e
 = 
NUD_NONE
;

65 i‡(
	`°rcmp
(
¨g
, "stale") == 0)

66 *
°©e
 = 
NUD_STALE
;

67 i‡(
	`°rcmp
(
¨g
, "incomplete") == 0)

68 *
°©e
 = 
NUD_INCOMPLETE
;

69 i‡(
	`°rcmp
(
¨g
, "delay") == 0)

70 *
°©e
 = 
NUD_DELAY
;

71 i‡(
	`°rcmp
(
¨g
, "probe") == 0)

72 *
°©e
 = 
NUD_PROBE
;

73 i‡(
	`m©ches
(
¨g
, "failed") == 0)

74 *
°©e
 = 
NUD_FAILED
;

76 i‡(
	`gë_unsig√d
(
°©e
, 
¨g
, 0))

78 i‡(*
°©e
>=0x100 || (*state&((*state)-1)))

82 
	}
}

84 
	$Êush_upd©e
()

86 i‡(
	`π∆_£nd_check
(&
πh
, 
fûãr
.
Êushb
, fûãr.
Êushp
) < 0) {

87 
	`≥º‹
("FailedÅo send flushÑequest");

90 
fûãr
.
Êushp
 = 0;

92 
	}
}

95 
	$ù√igh_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

98 
∆msghdr
 
n
;

99 
ndmsg
 
ndm
;

100 
buf
[256];

101 } 
ªq
;

102 *
d
 = 
NULL
;

103 
d°_ok
 = 0;

104 
Œaddr_ok
 = 0;

105 * 
Œa
 = 
NULL
;

106 
öë_¥efix
 
d°
;

108 
	`mem£t
(&
ªq
, 0, (req));

110 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
ndmsg
));

111 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

112 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

113 
ªq
.
ndm
.
ndm_Ámûy
 = 
¥e„ºed_Ámûy
;

114 
ªq
.
ndm
.
ndm_°©e
 = 
NUD_PERMANENT
;

116 
¨gc
 > 0) {

117 i‡(
	`m©ches
(*
¨gv
, "lladdr") == 0) {

118 
	`NEXT_ARG
();

119 i‡(
Œaddr_ok
)

120 
	`du∑rg
("Œaddr", *
¨gv
);

121 
Œa
 = *
¨gv
;

122 
Œaddr_ok
 = 1;

123 } i‡(
	`°rcmp
(*
¨gv
, "nud") == 0) {

124 
°©e
;

125 
	`NEXT_ARG
();

126 i‡(
	`nud_°©e_a2n
(&
°©e
, *
¨gv
))

127 
	`öv¨g
("nud sèã i†bad", *
¨gv
);

128 
ªq
.
ndm
.
ndm_°©e
 = 
°©e
;

129 } i‡(
	`m©ches
(*
¨gv
, "proxy") == 0) {

130 
	`NEXT_ARG
();

131 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

132 
	`ußge
();

133 i‡(
d°_ok
)

134 
	`du∑rg
("addªss", *
¨gv
);

135 
	`gë_addr
(&
d°
, *
¨gv
, 
¥e„ºed_Ámûy
);

136 
d°_ok
 = 1;

137 
ªq
.
ndm
.
ndm_Êags
 |
NTF_PROXY
;

138 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

139 
	`NEXT_ARG
();

140 
d
 = *
¨gv
;

142 i‡(
	`°rcmp
(*
¨gv
, "to") == 0) {

143 
	`NEXT_ARG
();

145 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

146 
	`NEXT_ARG
();

148 i‡(
d°_ok
)

149 
	`du∑rg2
("to", *
¨gv
);

150 
	`gë_addr
(&
d°
, *
¨gv
, 
¥e„ºed_Ámûy
);

151 
d°_ok
 = 1;

153 
¨gc
--; 
¨gv
++;

155 i‡(
d
 =
NULL
 || !
d°_ok
 || 
d°
.
Ámûy
 =
AF_UNSPEC
) {

156 
	`Ârötf
(
°dîr
, "Deviceánd destinationáreÑequiredárguments.\n");

157 
	`exô
(-1);

159 
ªq
.
ndm
.
ndm_Ámûy
 = 
d°
.
Ámûy
;

160 i‡(
	`add©å_l
(&
ªq
.
n
, ‘eq), 
NDA_DST
, &
d°
.
d©a
, d°.
byãÀn
) < 0)

163 i‡(
Œa
 && 
	`°rcmp
(lla, "null")) {

164 
Œabuf
[20];

165 
l
;

167 
l
 = 
	`Œ_addr_a2n
(
Œabuf
, ÷œbuf), 
Œa
);

168 i‡(
l
 < 0)

171 i‡(
	`add©å_l
(&
ªq
.
n
, ‘eq), 
NDA_LLADDR
, 
Œabuf
, 
l
) < 0)

175 
	`Œ_öô_m≠
(&
πh
);

177 i‡((
ªq
.
ndm
.
ndm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

178 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

182 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

183 
	`exô
(2);

186 
	}
}

189 
	$¥öt_√igh
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

191 
FILE
 *
Â
 = (FILE*)
¨g
;

192 
ndmsg
 *
r
 = 
	`NLMSG_DATA
(
n
);

193 
Àn
 = 
n
->
∆msg_Àn
;

194 
π©å
 * 
tb
[
NDA_MAX
+1];

195 
abuf
[256];

197 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWNEIGH
 &&Ç->∆msg_ty≥ !
RTM_DELNEIGH
 &&

198 
n
->
∆msg_ty≥
 !
RTM_GETNEIGH
) {

199 
	`Ârötf
(
°dîr
, "Not RTM_NEWNEIGH: %08x %08x %08x\n",

200 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

204 
Àn
 -
	`NLMSG_LENGTH
((*
r
));

205 i‡(
Àn
 < 0) {

206 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

210 i‡(
fûãr
.
Êushb
 && 
n
->
∆msg_ty≥
 !
RTM_NEWNEIGH
)

213 i‡(
fûãr
.
Ámûy
 && fûãr.Ámûy !
r
->
ndm_Ámûy
)

215 i‡(
fûãr
.
ödex
 && fûãr.ödex !
r
->
ndm_ifödex
)

217 i‡(!(
fûãr
.
°©e
&
r
->
ndm_°©e
) &&

218 !(
r
->
ndm_Êags
 & 
NTF_PROXY
) &&

219 (
r
->
ndm_°©e
 || !(
fûãr
.
°©e
&0x100)) &&

220 (
r
->
ndm_Ámûy
 !
AF_DEC√t
))

223 
	`∑r£_π©å
(
tb
, 
NDA_MAX
, 
	`NDA_RTA
(
r
), 
n
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*r)));

225 i‡(
tb
[
NDA_DST
]) {

226 i‡(
fûãr
.
pfx
.
Ámûy
) {

227 
öë_¥efix
 
d°
;

228 
	`mem£t
(&
d°
, 0, (dst));

229 
d°
.
Ámûy
 = 
r
->
ndm_Ámûy
;

230 
	`mem˝y
(&
d°
.
d©a
, 
	`RTA_DATA
(
tb
[
NDA_DST
]), 
	`RTA_PAYLOAD
(tb[NDA_DST]));

231 i‡(
	`öë_addr_m©ch
(&
d°
, &
fûãr
.
pfx
, fûãr.pfx.
bôÀn
))

235 i‡(
fûãr
.
unu£d_⁄ly
 && 
tb
[
NDA_CACHEINFO
]) {

236 
nda_ˇcheöfo
 *
ci
 = 
	`RTA_DATA
(
tb
[
NDA_CACHEINFO
]);

237 i‡(
ci
->
ndm_ªf˙t
)

241 i‡(
fûãr
.
Êushb
) {

242 
∆msghdr
 *
‚
;

243 i‡(
	`NLMSG_ALIGN
(
fûãr
.
Êushp
Ë+ 
n
->
∆msg_Àn
 > fûãr.
Êushe
) {

244 i‡(
	`Êush_upd©e
())

247 
‚
 = (
∆msghdr
*)(
fûãr
.
Êushb
 + 
	`NLMSG_ALIGN
(fûãr.
Êushp
));

248 
	`mem˝y
(
‚
, 
n
,Ç->
∆msg_Àn
);

249 
‚
->
∆msg_ty≥
 = 
RTM_DELNEIGH
;

250 
‚
->
∆msg_Êags
 = 
NLM_F_REQUEST
;

251 
‚
->
∆msg_£q
 = ++
πh
.
£q
;

252 
fûãr
.
Êushp
 = (((*)
‚
Ë+ 
n
->
∆msg_Àn
Ë- fûãr.
Êushb
;

253 
fûãr
.
Êushed
++;

254 i‡(
show_°©s
 < 2)

258 i‡(
n
->
∆msg_ty≥
 =
RTM_DELNEIGH
)

259 
	`Ârötf
(
Â
, "Deleted ");

260 i‡(
n
->
∆msg_ty≥
 =
RTM_GETNEIGH
)

261 
	`Ârötf
(
Â
, "miss ");

262 i‡(
tb
[
NDA_DST
]) {

263 
	`Ârötf
(
Â
, "%s ",

264 
	`f‹m©_ho°
(
r
->
ndm_Ámûy
,

265 
	`RTA_PAYLOAD
(
tb
[
NDA_DST
]),

266 
	`RTA_DATA
(
tb
[
NDA_DST
]),

267 
abuf
, (abuf)));

269 i‡(!
fûãr
.
ödex
 && 
r
->
ndm_ifödex
)

270 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
r
->
ndm_ifödex
));

271 i‡(
tb
[
NDA_LLADDR
]) {

272 
	`SPRINT_BUF
(
b1
);

273 
	`Ârötf
(
Â
, "Œadd∏%s", 
	`Œ_addr_n2a
(
	`RTA_DATA
(
tb
[
NDA_LLADDR
]),

274 
	`RTA_PAYLOAD
(
tb
[
NDA_LLADDR
]),

275 
	`Œ_ödex_to_ty≥
(
r
->
ndm_ifödex
),

276 
b1
, (b1)));

278 i‡(
r
->
ndm_Êags
 & 
NTF_ROUTER
) {

279 
	`Ârötf
(
Â
, "Ñouter");

281 i‡(
r
->
ndm_Êags
 & 
NTF_PROXY
) {

282 
	`Ârötf
(
Â
, "Öroxy");

284 i‡(
tb
[
NDA_CACHEINFO
] && 
show_°©s
) {

285 
nda_ˇcheöfo
 *
ci
 = 
	`RTA_DATA
(
tb
[
NDA_CACHEINFO
]);

286 
hz
 = 
	`gë_u£r_hz
();

288 i‡(
ci
->
ndm_ªf˙t
)

289 
	`¥ötf
("Ñe‡%d", 
ci
->
ndm_ªf˙t
);

290 
	`Ârötf
(
Â
, " u£d %d/%d/%d", 
ci
->
ndm_u£d
/
hz
,

291 
ci
->
ndm_c⁄fúmed
/
hz
, ci->
ndm_upd©ed
/hz);

294 i‡(
tb
[
NDA_PROBES
] && 
show_°©s
) {

295 
__u32
 
p
 = 
	`πa_gë©å_u32
(
tb
[
NDA_PROBES
]);

296 
	`Ârötf
(
Â
, "Örobe†%u", 
p
);

299 i‡(
r
->
ndm_°©e
) {

300 
nud
 = 
r
->
ndm_°©e
;

301 
	`Ârötf
(
Â
, " ");

303 
	#PRINT_FLAG
(
f
Ëi‡(
nud
 & 
NUD_
##f) { \

304 
nud
 &~
NUD_
##
f
; 
	`Ârötf
(
Â
, #‡"%s",Çud ? "," : ""); }

	)

305 
	`PRINT_FLAG
(
INCOMPLETE
);

306 
	`PRINT_FLAG
(
REACHABLE
);

307 
	`PRINT_FLAG
(
STALE
);

308 
	`PRINT_FLAG
(
DELAY
);

309 
	`PRINT_FLAG
(
PROBE
);

310 
	`PRINT_FLAG
(
FAILED
);

311 
	`PRINT_FLAG
(
NOARP
);

312 
	`PRINT_FLAG
(
PERMANENT
);

313 #unde‡
PRINT_FLAG


315 
	`Ârötf
(
Â
, "\n");

317 
	`fÊush
(
Â
);

319 
	}
}

321 
	$ù√igh_ª£t_fûãr
(
ifödex
)

323 
	`mem£t
(&
fûãr
, 0, (filter));

324 
fûãr
.
°©e
 = ~0;

325 
fûãr
.
ödex
 = 
ifödex
;

326 
	}
}

328 
	$do_show_‹_Êush
(
¨gc
, **
¨gv
, 
Êush
)

330 *
fûãr_dev
 = 
NULL
;

331 
°©e_giví
 = 0;

332 
ndmsg
 
ndm
 = { 0 };

334 
	`ù√igh_ª£t_fûãr
(0);

336 i‡(!
fûãr
.
Ámûy
)

337 
fûãr
.
Ámûy
 = 
¥e„ºed_Ámûy
;

339 i‡(
Êush
) {

340 i‡(
¨gc
 <= 0) {

341 
	`Ârötf
(
°dîr
, "FlushÑequiresárguments.\n");

344 
fûãr
.
°©e
 = ~(
NUD_PERMANENT
|
NUD_NOARP
);

346 
fûãr
.
°©e
 = 0xFF & ~
NUD_NOARP
;

348 
¨gc
 > 0) {

349 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

350 
	`NEXT_ARG
();

351 i‡(
fûãr_dev
)

352 
	`du∑rg
("dev", *
¨gv
);

353 
fûãr_dev
 = *
¨gv
;

354 } i‡(
	`°rcmp
(*
¨gv
, "unused") == 0) {

355 
fûãr
.
unu£d_⁄ly
 = 1;

356 } i‡(
	`°rcmp
(*
¨gv
, "nud") == 0) {

357 
°©e
;

358 
	`NEXT_ARG
();

359 i‡(!
°©e_giví
) {

360 
°©e_giví
 = 1;

361 
fûãr
.
°©e
 = 0;

363 i‡(
	`nud_°©e_a2n
(&
°©e
, *
¨gv
)) {

364 i‡(
	`°rcmp
(*
¨gv
, "all") != 0)

365 
	`öv¨g
("nud sèã i†bad", *
¨gv
);

366 
°©e
 = ~0;

367 i‡(
Êush
)

368 
°©e
 &~
NUD_NOARP
;

370 i‡(
°©e
 == 0)

371 
°©e
 = 0x100;

372 
fûãr
.
°©e
 |= state;

373 } i‡(
	`°rcmp
(*
¨gv
, "proxy") == 0)

374 
ndm
.
ndm_Êags
 = 
NTF_PROXY
;

376 i‡(
	`°rcmp
(*
¨gv
, "to") == 0) {

377 
	`NEXT_ARG
();

379 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

380 
	`ußge
();

381 
	`gë_¥efix
(&
fûãr
.
pfx
, *
¨gv
, fûãr.
Ámûy
);

382 i‡(
fûãr
.
Ámûy
 =
AF_UNSPEC
)

383 
fûãr
.
Ámûy
 = fûãr.
pfx
.family;

385 
¨gc
--; 
¨gv
++;

388 
	`Œ_öô_m≠
(&
πh
);

390 i‡(
fûãr_dev
) {

391 i‡((
fûãr
.
ödex
 = 
	`Œ_«me_to_ödex
(
fûãr_dev
)) == 0) {

392 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
fûãr_dev
);

397 i‡(
Êush
) {

398 
round
 = 0;

399 
Êushb
[4096-512];

401 
fûãr
.
Êushb
 = flushb;

402 
fûãr
.
Êushp
 = 0;

403 
fûãr
.
Êushe
 = (
Êushb
);

404 
fûãr
.
°©e
 &~
NUD_FAILED
;

406 
round
 < 
MAX_ROUNDS
) {

407 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
fûãr
.
Ámûy
, 
RTM_GETNEIGH
) < 0) {

408 
	`≥º‹
("Cannot send dumpÑequest");

409 
	`exô
(1);

411 
fûãr
.
Êushed
 = 0;

412 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_√igh
, 
°dout
) < 0) {

413 
	`Ârötf
(
°dîr
, "FlushÅerminated\n");

414 
	`exô
(1);

416 i‡(
fûãr
.
Êushed
 == 0) {

417 i‡(
show_°©s
) {

418 i‡(
round
 == 0)

419 
	`¥ötf
("NothingÅo flush.\n");

421 
	`¥ötf
("*** Flush i†com∂ëêa·î %dÑound%†***\n", 
round
,Ñound>1?"s":"");

423 
	`fÊush
(
°dout
);

426 
round
++;

427 i‡(
	`Êush_upd©e
() < 0)

428 
	`exô
(1);

429 i‡(
show_°©s
) {

430 
	`¥ötf
("\n*** Round %d, dñëög %dÉ¡rõ†***\n", 
round
, 
fûãr
.
Êushed
);

431 
	`fÊush
(
°dout
);

434 
	`¥ötf
("*** FlushÇot complete bailing outáfter %dÑounds\n",

435 
MAX_ROUNDS
);

439 
ndm
.
ndm_Ámûy
 = 
fûãr
.
Ámûy
;

441 i‡(
	`π∆_dump_ªque°
(&
πh
, 
RTM_GETNEIGH
, &
ndm
, (
ndmsg
)) < 0) {

442 
	`≥º‹
("Cannot send dumpÑequest");

443 
	`exô
(1);

446 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_√igh
, 
°dout
) < 0) {

447 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

448 
	`exô
(1);

452 
	}
}

454 
	$do_ù√igh
(
¨gc
, **
¨gv
)

456 i‡(
¨gc
 > 0) {

457 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

458  
	`ù√igh_modify
(
RTM_NEWNEIGH
, 
NLM_F_CREATE
|
NLM_F_EXCL
, 
¨gc
-1, 
¨gv
+1);

459 i‡(
	`m©ches
(*
¨gv
, "change") == 0 ||

460 
	`°rcmp
(*
¨gv
, "chg") == 0)

461  
	`ù√igh_modify
(
RTM_NEWNEIGH
, 
NLM_F_REPLACE
, 
¨gc
-1, 
¨gv
+1);

462 i‡(
	`m©ches
(*
¨gv
, "replace") == 0)

463  
	`ù√igh_modify
(
RTM_NEWNEIGH
, 
NLM_F_CREATE
|
NLM_F_REPLACE
, 
¨gc
-1, 
¨gv
+1);

464 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

465  
	`ù√igh_modify
(
RTM_DELNEIGH
, 0, 
¨gc
-1, 
¨gv
+1);

466 i‡(
	`m©ches
(*
¨gv
, "get") == 0) {

467 
	`Ârötf
(
°dîr
, "Sorry, \"neigh get\" isÇot implemented :-(\n");

470 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

471 
	`m©ches
(*
¨gv
, "lst") == 0 ||

472 
	`m©ches
(*
¨gv
, "list") == 0)

473  
	`do_show_‹_Êush
(
¨gc
-1, 
¨gv
+1, 0);

474 i‡(
	`m©ches
(*
¨gv
, "flush") == 0)

475  
	`do_show_‹_Êush
(
¨gc
-1, 
¨gv
+1, 1);

476 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

477 
	`ußge
();

479  
	`do_show_‹_Êush
(0, 
NULL
, 0);

481 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ùÇeigh hñp\".\n", *
¨gv
);

482 
	`exô
(-1);

483 
	}
}

	@ip/ipnetconf.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<°rög.h
>

19 
	~<sys/time.h
>

20 
	~<sys/sockë.h
>

21 
	~<√töë/ö.h
>

23 
	~"π_«mes.h
"

24 
	~"utûs.h
"

25 
	~"ù_comm⁄.h
"

29 
	mÁmûy
;

30 
	mifödex
;

31 } 
	gfûãr
;

33 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

35 
	$ußge
()

37 
	`Ârötf
(
°dîr
, "Usage: ipÇetconf show [ dev STRING ]\n");

38 
	`exô
(-1);

39 
	}
}

41 
	#NETCONF_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
√tc⁄fmsg
))))

	)

43 
	$¥öt_√tc⁄f
(c⁄° 
sockaddr_∆
 *
who
, 
π∆_˘æ_d©a
 *
˘æ
,

44 
∆msghdr
 *
n
, *
¨g
)

46 
FILE
 *
Â
 = (FILE*)
¨g
;

47 
√tc⁄fmsg
 *
ncm
 = 
	`NLMSG_DATA
(
n
);

48 
Àn
 = 
n
->
∆msg_Àn
;

49 
π©å
 *
tb
[
NETCONFA_MAX
+1];

51 i‡(
n
->
∆msg_ty≥
 =
NLMSG_ERROR
)

53 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWNETCONF
) {

54 
	`Ârötf
(
°dîr
, "Not RTM_NEWNETCONF: %08x %08x %08x\n",

55 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

59 
Àn
 -
	`NLMSG_SPACE
((*
ncm
));

60 i‡(
Àn
 < 0) {

61 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

65 i‡(
fûãr
.
Ámûy
 && fûãr.Ámûy !
ncm
->
ncm_Ámûy
)

68 
	`∑r£_π©å
(
tb
, 
NETCONFA_MAX
, 
	`NETCONF_RTA
(
ncm
),

69 
	`NLMSG_PAYLOAD
(
n
, (*
ncm
)));

71 
ncm
->
ncm_Ámûy
) {

72 
AF_INET
:

73 
	`Ârötf
(
Â
, "ipv4 ");

75 
AF_INET6
:

76 
	`Ârötf
(
Â
, "ipv6 ");

79 
	`Ârötf
(
Â
, "unknown ");

83 i‡(
tb
[
NETCONFA_IFINDEX
]) {

84 *
ifödex
 = (*)
	`RTA_DATA
(
tb
[
NETCONFA_IFINDEX
]);

86 *
ifödex
) {

87 
NETCONFA_IFINDEX_ALL
:

88 
	`Ârötf
(
Â
, "all ");

90 
NETCONFA_IFINDEX_DEFAULT
:

91 
	`Ârötf
(
Â
, "default ");

94 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(*
ifödex
));

99 i‡(
tb
[
NETCONFA_FORWARDING
])

100 
	`Ârötf
(
Â
, "forwarding %s ",

101 *(*)
	`RTA_DATA
(
tb
[
NETCONFA_FORWARDING
])?"on":"off");

102 i‡(
tb
[
NETCONFA_RP_FILTER
]) {

103 
Ω_fûãr
 = *(*)
	`RTA_DATA
(
tb
[
NETCONFA_RP_FILTER
]);

105 i‡(
Ω_fûãr
 == 0)

106 
	`Ârötf
(
Â
, "rp_filter off ");

107 i‡(
Ω_fûãr
 == 1)

108 
	`Ârötf
(
Â
, "rp_filter strict ");

109 i‡(
Ω_fûãr
 == 2)

110 
	`Ârötf
(
Â
, "rp_filterÜoose ");

112 
	`Ârötf
(
Â
, "rp_filter unknown mode ");

114 i‡(
tb
[
NETCONFA_MC_FORWARDING
])

115 
	`Ârötf
(
Â
, "mc_forwarding %d ",

116 *(*)
	`RTA_DATA
(
tb
[
NETCONFA_MC_FORWARDING
]));

118 i‡(
tb
[
NETCONFA_PROXY_NEIGH
])

119 
	`Ârötf
(
Â
, "proxy_neigh %s ",

120 *(*)
	`RTA_DATA
(
tb
[
NETCONFA_PROXY_NEIGH
])?"on":"off");

122 
	`Ârötf
(
Â
, "\n");

123 
	`fÊush
(
Â
);

125 
	}
}

127 
	$¥öt_√tc⁄f2
(c⁄° 
sockaddr_∆
 *
who
,

128 
∆msghdr
 *
n
, *
¨g
)

130  
	`¥öt_√tc⁄f
(
who
, 
NULL
, 
n
, 
¨g
);

131 
	}
}

133 
	$ù√tc⁄f_ª£t_fûãr
(
ifödex
)

135 
	`mem£t
(&
fûãr
, 0, (filter));

136 
fûãr
.
ifödex
 = ifindex;

137 
	}
}

139 
	$do_show
(
¨gc
, **
¨gv
)

142 
∆msghdr
 
n
;

143 
√tc⁄fmsg
 
ncm
;

144 
buf
[1024];

145 } 
ªq
;

147 
	`ù√tc⁄f_ª£t_fûãr
(0);

148 
fûãr
.
Ámûy
 = 
¥e„ºed_Ámûy
;

149 i‡(
fûãr
.
Ámûy
 =
AF_UNSPEC
)

150 
fûãr
.
Ámûy
 = 
AF_INET
;

152 
¨gc
 > 0) {

153 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

154 
	`NEXT_ARG
();

155 
fûãr
.
ifödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
);

156 i‡(
fûãr
.
ifödex
 <= 0) {

157 
	`Ârötf
(
°dîr
, "Device \"%s\" doesÇotÉxist.\n",

158 *
¨gv
);

162 
¨gv
++; 
¨gc
--;

165 
	`Œ_öô_m≠
(&
πh
);

166 i‡(
fûãr
.
ifödex
) {

167 
	`mem£t
(&
ªq
, 0, (req));

168 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
√tc⁄fmsg
));

169 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
NLM_F_ACK
;

170 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETNETCONF
;

171 
ªq
.
ncm
.
ncm_Ámûy
 = 
fûãr
.
Ámûy
;

172 i‡(
fûãr
.
ifödex
)

173 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
NETCONFA_IFINDEX
,

174 &
fûãr
.
ifödex
, (filter.ifindex));

176 i‡(
	`π∆_£nd
(&
πh
, &
ªq
.
n
,Ñeq.n.
∆msg_Àn
) < 0) {

177 
	`≥º‹
("CanÇot sendÑequest");

178 
	`exô
(1);

180 
	`π∆_li°í
(&
πh
, 
¥öt_√tc⁄f
, 
°dout
);

182 
dump
:

183 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
fûãr
.
Ámûy
, 
RTM_GETNETCONF
) < 0) {

184 
	`≥º‹
("Cannot send dumpÑequest");

185 
	`exô
(1);

187 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_√tc⁄f2
, 
°dout
) < 0) {

188 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

189 
	`exô
(1);

191 i‡(
¥e„ºed_Ámûy
 =
AF_UNSPEC
) {

192 
¥e„ºed_Ámûy
 = 
AF_INET6
;

193 
fûãr
.
Ámûy
 = 
AF_INET6
;

194 
dump
;

198 
	}
}

200 
	$do_ù√tc⁄f
(
¨gc
, **
¨gv
)

202 i‡(
¨gc
 > 0) {

203 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

204 
	`m©ches
(*
¨gv
, "lst") == 0 ||

205 
	`m©ches
(*
¨gv
, "list") == 0)

206  
	`do_show
(
¨gc
-1, 
¨gv
+1);

207 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

208 
	`ußge
();

210  
	`do_show
(0, 
NULL
);

212 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ùÇëc⁄‡hñp\".\n", *
¨gv
);

213 
	`exô
(-1);

214 
	}
}

	@ip/ipnetns.c

1 
	#_ATFILE_SOURCE


	)

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<sys/waô.h
>

5 
	~<sys/öŸify.h
>

6 
	~<sys/mou¡.h
>

7 
	~<sys/sysˇŒ.h
>

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~<sched.h
>

11 
	~<f˙é.h
>

12 
	~<dúít.h
>

13 
	~<î∫o.h
>

14 
	~<uni°d.h
>

15 
	~<˘y≥.h
>

16 
	~<löux/limôs.h
>

18 
	~<löux/√t_«me•a˚.h
>

20 
	~"utûs.h
"

21 
	~"hli°.h
"

22 
	~"ù_comm⁄.h
"

23 
	~"«me•a˚.h
"

25 
	$ußge
()

27 
	`Ârötf
(
°dîr
, "Usage: ipÇetnsÜist\n");

28 
	`Ârötf
(
°dîr
, " ipÇetnsádd NAME\n");

29 
	`Ârötf
(
°dîr
, " ipÇetns set NAME NETNSID\n");

30 
	`Ârötf
(
°dîr
, " ip [-all]Çetns delete [NAME]\n");

31 
	`Ârötf
(
°dîr
, " ipÇetns identify [PID]\n");

32 
	`Ârötf
(
°dîr
, " ipÇetnsÖids NAME\n");

33 
	`Ârötf
(
°dîr
, " ip [-all]ÇetnsÉxec [NAME] cmd ...\n");

34 
	`Ârötf
(
°dîr
, " ipÇetns monitor\n");

35 
	`Ârötf
(
°dîr
, " ipÇetnsÜist-id\n");

36 
	`exô
(-1);

37 
	}
}

40 
π∆_h™dÀ
 
	gπnsh
 = { .
fd
 = -1 };

42 
	ghave_π∆_gënsid
 = -1;

44 
	$ù√äs_ac˚±_msg
(c⁄° 
sockaddr_∆
 *
who
,

45 
π∆_˘æ_d©a
 *
˘æ
,

46 
∆msghdr
 *
n
, *
¨g
)

48 
∆msgîr
 *
îr
 = (∆msgî∏*)
	`NLMSG_DATA
(
n
);

50 i‡(
n
->
∆msg_ty≥
 =
NLMSG_ERROR
 &&

51 (
îr
->
îr‹
 =-
EOPNOTSUPP
 ||Éº->îr‹ =-
EINVAL
))

52 
have_π∆_gënsid
 = 0;

54 
have_π∆_gënsid
 = 1;

56 
	}
}

58 
	$ù√äs_have_nsid
()

61 
∆msghdr
 
n
;

62 
πgímsg
 
g
;

63 
buf
[1024];

64 } 
ªq
;

65 
fd
;

67 i‡(
have_π∆_gënsid
 < 0) {

68 
	`mem£t
(&
ªq
, 0, (req));

69 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
πgímsg
));

70 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

71 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETNSID
;

72 
ªq
.
g
.
πgí_Ámûy
 = 
AF_UNSPEC
;

74 
fd
 = 
	`›í
("/¥oc/£lf/ns/√t", 
O_RDONLY
);

75 i‡(
fd
 < 0) {

76 
	`≥º‹
("open(\"/proc/self/ns/net\")");

77 
	`exô
(1);

80 
	`add©å32
(&
ªq
.
n
, 1024, 
NETNSA_FD
, 
fd
);

82 i‡(
	`π∆_£nd
(&
πh
, &
ªq
.
n
,Ñeq.n.
∆msg_Àn
) < 0) {

83 
	`≥º‹
("request send failed");

84 
	`exô
(1);

86 
	`π∆_li°í
(&
πh
, 
ù√äs_ac˚±_msg
, 
NULL
);

87 
	`˛o£
(
fd
);

90  
have_π∆_gënsid
;

91 
	}
}

93 
	$gë_√äsid_‰om_«me
(c⁄° *
«me
)

96 
∆msghdr
 
n
;

97 
πgímsg
 
g
;

98 
buf
[1024];

99 } 
ªq
, 
™swî
;

100 
π©å
 *
tb
[
NETNSA_MAX
 + 1];

101 
πgímsg
 *
πhdr
;

102 
Àn
, 
fd
;

104 
	`mem£t
(&
ªq
, 0, (req));

105 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
πgímsg
));

106 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

107 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETNSID
;

108 
ªq
.
g
.
πgí_Ámûy
 = 
AF_UNSPEC
;

110 
fd
 = 
	`√äs_gë_fd
(
«me
);

111 i‡(
fd
 < 0)

112  
fd
;

114 
	`add©å32
(&
ªq
.
n
, 1024, 
NETNSA_FD
, 
fd
);

115 i‡(
	`π∆_èlk
(&
πnsh
, &
ªq
.
n
, &
™swî
.n, (answer)) < 0) {

116 
	`˛o£
(
fd
);

119 
	`˛o£
(
fd
);

122 i‡(
™swî
.
n
.
∆msg_ty≥
 =
NLMSG_ERROR
)

125 
πhdr
 = 
	`NLMSG_DATA
(&
™swî
.
n
);

126 
Àn
 = 
™swî
.
n
.
∆msg_Àn
 - 
	`NLMSG_SPACE
((*
πhdr
));

127 i‡(
Àn
 < 0)

130 
	`∑r£_π©å
(
tb
, 
NETNSA_MAX
, 
	`NETNS_RTA
(
πhdr
), 
Àn
);

132 i‡(
tb
[
NETNSA_NSID
])

133  
	`πa_gë©å_u32
(
tb
[
NETNSA_NSID
]);

136 
	}
}

138 
	snsid_ˇche
 {

139 
hli°_node
 
	mnsid_hash
;

140 
hli°_node
 
	m«me_hash
;

141 
	mnsid
;

142 
	m«me
[0];

145 
	#NSIDMAP_SIZE
 128

	)

146 
	#NSID_HASH_NSID
(
nsid
Ë“sid & (
NSIDMAP_SIZE
 - 1))

	)

147 
	#NSID_HASH_NAME
(
«me
Ë(
	`«mehash
“ameË& (
NSIDMAP_SIZE
 - 1))

	)

149 
hli°_hód
 
	gnsid_hód
[
NSIDMAP_SIZE
];

150 
hli°_hód
 
	g«me_hód
[
NSIDMAP_SIZE
];

152 
nsid_ˇche
 *
	$√äs_m≠_gë_by_nsid
(
nsid
)

154 
uöt32_t
 
h
 = 
	`NSID_HASH_NSID
(
nsid
);

155 
hli°_node
 *
n
;

157 
	`hli°_f‹_óch
(
n
, &
nsid_hód
[
h
]) {

158 
nsid_ˇche
 *
c
 = 
	`c⁄èöî_of
(
n
, nsid_cache,

159 
nsid_hash
);

160 i‡(
c
->
nsid
 ==Çsid)

161  
c
;

164  
NULL
;

165 
	}
}

167 
	$√äs_m≠_add
(
nsid
, c⁄° *
«me
)

169 
nsid_ˇche
 *
c
;

170 
uöt32_t
 
h
;

172 i‡(
	`√äs_m≠_gë_by_nsid
(
nsid
Ë!
NULL
)

173  -
EEXIST
;

175 
c
 = 
	`mÆloc
((*cË+ 
	`°æí
(
«me
));

176 i‡(
c
 =
NULL
) {

177 
	`≥º‹
("malloc");

178  -
ENOMEM
;

180 
c
->
nsid
 =Çsid;

181 
	`°r˝y
(
c
->
«me
,Çame);

183 
h
 = 
	`NSID_HASH_NSID
(
nsid
);

184 
	`hli°_add_hód
(&
c
->
nsid_hash
, &
nsid_hód
[
h
]);

186 
h
 = 
	`NSID_HASH_NAME
(
«me
);

187 
	`hli°_add_hód
(&
c
->
«me_hash
, &
«me_hód
[
h
]);

190 
	}
}

192 
	$√äs_m≠_dñ
(
nsid_ˇche
 *
c
)

194 
	`hli°_dñ
(&
c
->
«me_hash
);

195 
	`hli°_dñ
(&
c
->
nsid_hash
);

196 
	`‰ì
(
c
);

197 
	}
}

199 
	$√äs_m≠_öô
()

201 
öôülized
;

202 
dúít
 *
íåy
;

203 
DIR
 *
dú
;

204 
nsid
;

206 i‡(
öôülized
 || !
	`ù√äs_have_nsid
())

209 i‡(
	`π∆_›í
(&
πnsh
, 0) < 0) {

210 
	`Ârötf
(
°dîr
, "Cannot openÑtnetlink\n");

211 
	`exô
(1);

214 
dú
 = 
	`›ídú
(
NETNS_RUN_DIR
);

215 i‡(!
dú
)

218 (
íåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

219 i‡(
	`°rcmp
(
íåy
->
d_«me
, ".") == 0)

221 i‡(
	`°rcmp
(
íåy
->
d_«me
, "..") == 0)

223 
nsid
 = 
	`gë_√äsid_‰om_«me
(
íåy
->
d_«me
);

225 i‡(
nsid
 >= 0)

226 
	`√äs_m≠_add
(
nsid
, 
íåy
->
d_«me
);

228 
	`˛o£dú
(
dú
);

229 
öôülized
 = 1;

230 
	}
}

232 
	$√äs_gë_«me
(
nsid
, *
«me
)

234 
dúít
 *
íåy
;

235 
DIR
 *
dú
;

236 
id
;

238 
dú
 = 
	`›ídú
(
NETNS_RUN_DIR
);

239 i‡(!
dú
)

240  -
ENOENT
;

242 (
íåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

243 i‡(
	`°rcmp
(
íåy
->
d_«me
, ".") == 0)

245 i‡(
	`°rcmp
(
íåy
->
d_«me
, "..") == 0)

247 
id
 = 
	`gë_√äsid_‰om_«me
(
íåy
->
d_«me
);

249 i‡(
nsid
 =
id
) {

250 
	`°r˝y
(
«me
, 
íåy
->
d_«me
);

251 
	`˛o£dú
(
dú
);

255 
	`˛o£dú
(
dú
);

256  -
ENOENT
;

257 
	}
}

259 
	$¥öt_nsid
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

261 
πgímsg
 *
πhdr
 = 
	`NLMSG_DATA
(
n
);

262 
π©å
 *
tb
[
NETNSA_MAX
+1];

263 
Àn
 = 
n
->
∆msg_Àn
;

264 
FILE
 *
Â
 = (FILE *)
¨g
;

265 
nsid_ˇche
 *
c
;

266 
«me
[
NAME_MAX
];

267 
nsid
;

269 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWNSID
 &&Ç->∆msg_ty≥ !
RTM_DELNSID
)

272 
Àn
 -
	`NLMSG_SPACE
((*
πhdr
));

273 i‡(
Àn
 < 0) {

274 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d i¿%s\n", 
Àn
,

275 
__func__
);

279 
	`∑r£_π©å
(
tb
, 
NETNSA_MAX
, 
	`NETNS_RTA
(
πhdr
), 
Àn
);

280 i‡(
tb
[
NETNSA_NSID
] =
NULL
) {

281 
	`Ârötf
(
°dîr
, "BUG: NETNSA_NSID i†missög %s\n", 
__func__
);

285 i‡(
n
->
∆msg_ty≥
 =
RTM_DELNSID
)

286 
	`Ârötf
(
Â
, "Deleted ");

288 
nsid
 = 
	`πa_gë©å_u32
(
tb
[
NETNSA_NSID
]);

289 
	`Ârötf
(
Â
, "nsid %u ", 
nsid
);

291 
c
 = 
	`√äs_m≠_gë_by_nsid
(
nsid
);

292 i‡(
c
 !
NULL
) {

293 
	`Ârötf
(
Â
, "(ùrouã2Çën†«me: %s)", 
c
->
«me
);

294 
	`√äs_m≠_dñ
(
c
);

298 i‡(
c
 =
NULL
 && 
n
->
∆msg_ty≥
 =
RTM_NEWNSID
)

299 i‡(
	`√äs_gë_«me
(
nsid
, 
«me
) == 0) {

300 
	`Ârötf
(
Â
, "(ùrouã2Çën†«me: %s)", 
«me
);

301 
	`√äs_m≠_add
(
nsid
, 
«me
);

304 
	`Ârötf
(
Â
, "\n");

305 
	`fÊush
(
Â
);

307 
	}
}

309 
	$√äs_li°_id
(
¨gc
, **
¨gv
)

311 i‡(!
	`ù√äs_have_nsid
()) {

312 
	`Ârötf
(
°dîr
,

314  -
ENOTSUP
;

317 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
AF_UNSPEC
, 
RTM_GETNSID
) < 0) {

318 
	`≥º‹
("Cannot send dumpÑequest");

319 
	`exô
(1);

321 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_nsid
, 
°dout
) < 0) {

322 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

323 
	`exô
(1);

326 
	}
}

328 
	$√äs_li°
(
¨gc
, **
¨gv
)

330 
dúít
 *
íåy
;

331 
DIR
 *
dú
;

332 
id
;

334 
dú
 = 
	`›ídú
(
NETNS_RUN_DIR
);

335 i‡(!
dú
)

338 (
íåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

339 i‡(
	`°rcmp
(
íåy
->
d_«me
, ".") == 0)

341 i‡(
	`°rcmp
(
íåy
->
d_«me
, "..") == 0)

343 
	`¥ötf
("%s", 
íåy
->
d_«me
);

344 i‡(
	`ù√äs_have_nsid
()) {

345 
id
 = 
	`gë_√äsid_‰om_«me
(
íåy
->
d_«me
);

346 i‡(
id
 >= 0)

347 
	`¥ötf
(" (id: %d)", 
id
);

349 
	`¥ötf
("\n");

351 
	`˛o£dú
(
dú
);

353 
	}
}

355 
	$cmd_exec
(c⁄° *
cmd
, **
¨gv
, 
boﬁ
 
do_f‹k
)

357 
	`fÊush
(
°dout
);

358 i‡(
do_f‹k
) {

359 
°©us
;

360 
pid_t
 
pid
;

362 
pid
 = 
	`f‹k
();

363 i‡(
pid
 < 0) {

364 
	`≥º‹
("fork");

365 
	`exô
(1);

368 i‡(
pid
 != 0) {

370 i‡(
	`waôpid
(
pid
, &
°©us
, 0) < 0) {

371 
	`≥º‹
("waitpid");

372 
	`exô
(1);

375 i‡(
	`WIFEXITED
(
°©us
)) {

376  
	`WEXITSTATUS
(
°©us
);

379 
	`exô
(1);

383 i‡(
	`execvp
(
cmd
, 
¨gv
) < 0)

384 
	`Ârötf
(
°dîr
, "exec of \"%s\" failed: %s\n",

385 
cmd
, 
	`°ªº‹
(
î∫o
));

386 
	`_exô
(1);

387 
	}
}

389 
	$⁄_√äs_exec
(*
n¢ame
, *
¨g
)

391 **
¨gv
 = 
¨g
;

392 
	`cmd_exec
(
¨gv
[1],árgv + 1, 
åue
);

394 
	}
}

396 
	$√äs_exec
(
¨gc
, **
¨gv
)

401 c⁄° *
cmd
;

403 i‡(
¨gc
 < 1 && !
do_Æl
) {

404 
	`Ârötf
(
°dîr
, "NoÇetnsÇame specified\n");

407 i‡((
¨gc
 < 2 && !
do_Æl
) || (argc < 1 && do_all)) {

408 
	`Ârötf
(
°dîr
, "No command specified\n");

412 i‡(
do_Æl
)

413  
	`do_óch_√äs
(
⁄_√äs_exec
, --
¨gv
, 1);

415 i‡(
	`√äs_swôch
(
¨gv
[0]))

422 
cmd
 = 
¨gv
[1];

423  -
	`cmd_exec
(
cmd
, 
¨gv
 + 1, !!
b©ch_mode
);

424 
	}
}

426 
	$is_pid
(c⁄° *
°r
)

428 
ch
;

429 ; (
ch
 = *
°r
); str++) {

430 i‡(!
	`isdigô
(
ch
))

434 
	}
}

436 
	$√äs_pids
(
¨gc
, **
¨gv
)

438 c⁄° *
«me
;

439 
√t_∑th
[
PATH_MAX
];

440 
√äs
;

441 
°©
 
√t°
;

442 
DIR
 *
dú
;

443 
dúít
 *
íåy
;

445 i‡(
¨gc
 < 1) {

446 
	`Ârötf
(
°dîr
, "NoÇetnsÇame specified\n");

449 i‡(
¨gc
 > 1) {

450 
	`Ârötf
(
°dîr
, "extraárguments specified\n");

454 
«me
 = 
¨gv
[0];

455 
	`¢¥ötf
(
√t_∑th
, “ë_∑th), "%s/%s", 
NETNS_RUN_DIR
, 
«me
);

456 
√äs
 = 
	`›í
(
√t_∑th
, 
O_RDONLY
);

457 i‡(
√äs
 < 0) {

458 
	`Ârötf
(
°dîr
, "Cannot openÇetworkÇamespace: %s\n",

459 
	`°ªº‹
(
î∫o
));

462 i‡(
	`f°©
(
√äs
, &
√t°
) < 0) {

463 
	`Ârötf
(
°dîr
, "Stat ofÇetns failed: %s\n",

464 
	`°ªº‹
(
î∫o
));

467 
dú
 = 
	`›ídú
("/proc/");

468 i‡(!
dú
) {

469 
	`Ârötf
(
°dîr
, "Open of /proc failed: %s\n",

470 
	`°ªº‹
(
î∫o
));

473 (
íåy
 = 
	`ªaddú
(
dú
))) {

474 
pid_√t_∑th
[
PATH_MAX
];

475 
°©
 
°
;

476 i‡(!
	`is_pid
(
íåy
->
d_«me
))

478 
	`¢¥ötf
(
pid_√t_∑th
, (pid_net_path), "/proc/%s/ns/net",

479 
íåy
->
d_«me
);

480 i‡(
	`°©
(
pid_√t_∑th
, &
°
) != 0)

482 i‡((
°
.
°_dev
 =
√t°
.st_dev) &&

483 (
°
.
°_öo
 =
√t°
.st_ino)) {

484 
	`¥ötf
("%s\n", 
íåy
->
d_«me
);

487 
	`˛o£dú
(
dú
);

490 
	}
}

492 
	$√äs_idítify
(
¨gc
, **
¨gv
)

494 c⁄° *
pid°r
;

495 
√t_∑th
[
PATH_MAX
];

496 
√äs
;

497 
°©
 
√t°
;

498 
DIR
 *
dú
;

499 
dúít
 *
íåy
;

501 i‡(
¨gc
 < 1) {

502 
pid°r
 = "self";

503 } i‡(
¨gc
 > 1) {

504 
	`Ârötf
(
°dîr
, "extraárguments specified\n");

507 
pid°r
 = 
¨gv
[0];

508 i‡(!
	`is_pid
(
pid°r
)) {

509 
	`Ârötf
(
°dîr
, "Specified string '%s' isÇotáÖid\n",

510 
pid°r
);

515 
	`¢¥ötf
(
√t_∑th
, “ë_∑th), "/¥oc/%s/ns/√t", 
pid°r
);

516 
√äs
 = 
	`›í
(
√t_∑th
, 
O_RDONLY
);

517 i‡(
√äs
 < 0) {

518 
	`Ârötf
(
°dîr
, "Cannot openÇetworkÇamespace: %s\n",

519 
	`°ªº‹
(
î∫o
));

522 i‡(
	`f°©
(
√äs
, &
√t°
) < 0) {

523 
	`Ârötf
(
°dîr
, "Stat ofÇetns failed: %s\n",

524 
	`°ªº‹
(
î∫o
));

527 
dú
 = 
	`›ídú
(
NETNS_RUN_DIR
);

528 i‡(!
dú
) {

530 i‡(
î∫o
 =
ENOENT
)

533 
	`Ârötf
(
°dîr
, "FailedÅo open directory %s:%s\n",

534 
NETNS_RUN_DIR
, 
	`°ªº‹
(
î∫o
));

538 (
íåy
 = 
	`ªaddú
(
dú
))) {

539 
«me_∑th
[
PATH_MAX
];

540 
°©
 
°
;

542 i‡(
	`°rcmp
(
íåy
->
d_«me
, ".") == 0)

544 i‡(
	`°rcmp
(
íåy
->
d_«me
, "..") == 0)

547 
	`¢¥ötf
(
«me_∑th
, “ame_∑th), "%s/%s", 
NETNS_RUN_DIR
,

548 
íåy
->
d_«me
);

550 i‡(
	`°©
(
«me_∑th
, &
°
) != 0)

553 i‡((
°
.
°_dev
 =
√t°
.st_dev) &&

554 (
°
.
°_öo
 =
√t°
.st_ino)) {

555 
	`¥ötf
("%s\n", 
íåy
->
d_«me
);

558 
	`˛o£dú
(
dú
);

561 
	}
}

563 
	$⁄_√äs_dñ
(*
n¢ame
, *
¨g
)

565 
√äs_∑th
[
PATH_MAX
];

567 
	`¢¥ötf
(
√äs_∑th
, “ëns_∑th), "%s/%s", 
NETNS_RUN_DIR
, 
n¢ame
);

568 
	`umou¡2
(
√äs_∑th
, 
MNT_DETACH
);

569 i‡(
	`u∆ök
(
√äs_∑th
) < 0) {

570 
	`Ârötf
(
°dîr
, "CannotÑemoveÇamespace file \"%s\": %s\n",

571 
√äs_∑th
, 
	`°ªº‹
(
î∫o
));

575 
	}
}

577 
	$√äs_dñëe
(
¨gc
, **
¨gv
)

579 i‡(
¨gc
 < 1 && !
do_Æl
) {

580 
	`Ârötf
(
°dîr
, "NoÇetnsÇame specified\n");

584 i‡(
do_Æl
)

585  
	`√äs_f‹óch
(
⁄_√äs_dñ
, 
NULL
);

587  
	`⁄_√äs_dñ
(
¨gv
[0], 
NULL
);

588 
	}
}

590 
	$¸óã_√äs_dú
()

593 i‡(
	`mkdú
(
NETNS_RUN_DIR
, 
S_IRWXU
|
S_IRGRP
|
S_IXGRP
|
S_IROTH
|
S_IXOTH
)) {

594 i‡(
î∫o
 !
EEXIST
) {

595 
	`Ârötf
(
°dîr
, "mkdir %s failed: %s\n",

596 
NETNS_RUN_DIR
, 
	`°ªº‹
(
î∫o
));

602 
	}
}

604 
	$√äs_add
(
¨gc
, **
¨gv
)

614 
√äs_∑th
[
PATH_MAX
];

615 c⁄° *
«me
;

616 
fd
;

617 
made_√äs_run_dú_mou¡
 = 0;

619 i‡(
¨gc
 < 1) {

620 
	`Ârötf
(
°dîr
, "NoÇetnsÇame specified\n");

623 
«me
 = 
¨gv
[0];

625 
	`¢¥ötf
(
√äs_∑th
, “ëns_∑th), "%s/%s", 
NETNS_RUN_DIR
, 
«me
);

627 i‡(
	`¸óã_√äs_dú
())

636 
	`mou¡
("", 
NETNS_RUN_DIR
, "n⁄e", 
MS_SHARED
 | 
MS_REC
, 
NULL
)) {

638 i‡(
î∫o
 !
EINVAL
 || 
made_√äs_run_dú_mou¡
) {

639 
	`Ârötf
(
°dîr
, "mount --make-shared %s failed: %s\n",

640 
NETNS_RUN_DIR
, 
	`°ªº‹
(
î∫o
));

645 i‡(
	`mou¡
(
NETNS_RUN_DIR
, NETNS_RUN_DIR, "n⁄e", 
MS_BIND
, 
NULL
)) {

646 
	`Ârötf
(
°dîr
, "mount --bind %s %s failed: %s\n",

647 
NETNS_RUN_DIR
, NETNS_RUN_DIR, 
	`°ªº‹
(
î∫o
));

650 
made_√äs_run_dú_mou¡
 = 1;

654 
fd
 = 
	`›í
(
√äs_∑th
, 
O_RDONLY
|
O_CREAT
|
O_EXCL
, 0);

655 i‡(
fd
 < 0) {

656 
	`Ârötf
(
°dîr
, "Cannot createÇamespace file \"%s\": %s\n",

657 
√äs_∑th
, 
	`°ªº‹
(
î∫o
));

660 
	`˛o£
(
fd
);

661 i‡(
	`unsh¨e
(
CLONE_NEWNET
) < 0) {

662 
	`Ârötf
(
°dîr
, "FailedÅo createáÇewÇetworkÇamespace \"%s\": %s\n",

663 
«me
, 
	`°ªº‹
(
î∫o
));

664 
out_dñëe
;

668 i‡(
	`mou¡
("/¥oc/£lf/ns/√t", 
√äs_∑th
, "n⁄e", 
MS_BIND
, 
NULL
) < 0) {

669 
	`Ârötf
(
°dîr
, "Bind /proc/self/ns/net -> %s failed: %s\n",

670 
√äs_∑th
, 
	`°ªº‹
(
î∫o
));

671 
out_dñëe
;

674 
out_dñëe
:

675 
	`√äs_dñëe
(
¨gc
, 
¨gv
);

677 
	}
}

679 
	$£t_√äsid_‰om_«me
(c⁄° *
«me
, 
nsid
)

682 
∆msghdr
 
n
;

683 
πgímsg
 
g
;

684 
buf
[1024];

685 } 
ªq
;

686 
fd
, 
îr
 = 0;

688 
	`mem£t
(&
ªq
, 0, (req));

689 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
πgímsg
));

690 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

691 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_NEWNSID
;

692 
ªq
.
g
.
πgí_Ámûy
 = 
AF_UNSPEC
;

694 
fd
 = 
	`√äs_gë_fd
(
«me
);

695 i‡(
fd
 < 0)

696  
fd
;

698 
	`add©å32
(&
ªq
.
n
, 1024, 
NETNSA_FD
, 
fd
);

699 
	`add©å32
(&
ªq
.
n
, 1024, 
NETNSA_NSID
, 
nsid
);

700 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

701 
îr
 = -2;

703 
	`˛o£
(
fd
);

704  
îr
;

705 
	}
}

707 
	$√äs_£t
(
¨gc
, **
¨gv
)

709 
√äs_∑th
[
PATH_MAX
];

710 c⁄° *
«me
;

711 
√äs
, 
nsid
;

713 i‡(
¨gc
 < 1) {

714 
	`Ârötf
(
°dîr
, "NoÇetnsÇame specified\n");

717 i‡(
¨gc
 < 2) {

718 
	`Ârötf
(
°dîr
, "NoÇsid specified\n");

721 
«me
 = 
¨gv
[0];

722 
nsid
 = 
	`©oi
(
¨gv
[1]);

724 
	`¢¥ötf
(
√äs_∑th
, “ëns_∑th), "%s/%s", 
NETNS_RUN_DIR
, 
«me
);

725 
√äs
 = 
	`›í
(
√äs_∑th
, 
O_RDONLY
 | 
O_CLOEXEC
);

726 i‡(
√äs
 < 0) {

727 
	`Ârötf
(
°dîr
, "Cannot openÇetworkÇamespace \"%s\": %s\n",

728 
«me
, 
	`°ªº‹
(
î∫o
));

732  
	`£t_√äsid_‰om_«me
(
«me
, 
nsid
);

733 
	}
}

735 
	$√äs_m⁄ô‹
(
¨gc
, **
¨gv
)

737 
buf
[4096];

738 
öŸify_evít
 *
evít
;

739 
fd
;

740 
fd
 = 
	`öŸify_öô
();

741 i‡(
fd
 < 0) {

742 
	`Ârötf
(
°dîr
, "inotify_init failed: %s\n",

743 
	`°ªº‹
(
î∫o
));

747 i‡(
	`¸óã_√äs_dú
())

750 i‡(
	`öŸify_add_w©ch
(
fd
, 
NETNS_RUN_DIR
, 
IN_CREATE
 | 
IN_DELETE
) < 0) {

751 
	`Ârötf
(
°dîr
, "inotify_add_watch failed: %s\n",

752 
	`°ªº‹
(
î∫o
));

756 
ssize_t
 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

757 i‡(
Àn
 < 0) {

758 
	`Ârötf
(
°dîr
, "read failed: %s\n",

759 
	`°ªº‹
(
î∫o
));

762 
evít
 = (
öŸify_evít
 *)
buf
;

763 (*)
evít
 < &
buf
[
Àn
];

764 
evít
 = (
öŸify_evít
 *)((*Îvíà+ (*evítË+Évít->
Àn
)) {

765 i‡(
evít
->
mask
 & 
IN_CREATE
)

766 
	`¥ötf
("add %s\n", 
evít
->
«me
);

767 i‡(
evít
->
mask
 & 
IN_DELETE
)

768 
	`¥ötf
("dñëê%s\n", 
evít
->
«me
);

772 
	}
}

774 
	$do_√äs
(
¨gc
, **
¨gv
)

776 
	`√äs_m≠_öô
();

778 i‡(
¨gc
 < 1)

779  
	`√äs_li°
(0, 
NULL
);

781 i‡((
	`m©ches
(*
¨gv
, "list") == 0) || (matches(*argv, "show") == 0) ||

782 (
	`m©ches
(*
¨gv
, "lst") == 0))

783  
	`√äs_li°
(
¨gc
-1, 
¨gv
+1);

785 i‡((
	`m©ches
(*
¨gv
, "list-id") == 0))

786  
	`√äs_li°_id
(
¨gc
-1, 
¨gv
+1);

788 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

789  
	`ußge
();

791 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

792  
	`√äs_add
(
¨gc
-1, 
¨gv
+1);

794 i‡(
	`m©ches
(*
¨gv
, "set") == 0)

795  
	`√äs_£t
(
¨gc
-1, 
¨gv
+1);

797 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

798  
	`√äs_dñëe
(
¨gc
-1, 
¨gv
+1);

800 i‡(
	`m©ches
(*
¨gv
, "identify") == 0)

801  
	`√äs_idítify
(
¨gc
-1, 
¨gv
+1);

803 i‡(
	`m©ches
(*
¨gv
, "pids") == 0)

804  
	`√äs_pids
(
¨gc
-1, 
¨gv
+1);

806 i‡(
	`m©ches
(*
¨gv
, "exec") == 0)

807  
	`√äs_exec
(
¨gc
-1, 
¨gv
+1);

809 i‡(
	`m©ches
(*
¨gv
, "monitor") == 0)

810  
	`√äs_m⁄ô‹
(
¨gc
-1, 
¨gv
+1);

812 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ùÇën†hñp\".\n", *
¨gv
);

813 
	`exô
(-1);

814 
	}
}

	@ip/ipntable.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<sys/time.h
>

29 
	~<sys/sockë.h
>

30 
	~<time.h
>

32 
	~"utûs.h
"

33 
	~"ù_comm⁄.h
"

37 
	mÁmûy
;

38 
	mödex
;

39 
	#NONE_DEV
 (-1)

	)

40 
	m«me
[1024];

41 } 
	gfûãr
;

43 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

45 
	$ußge
()

47 
	`Ârötf
(
°dîr
,

60 
	`exô
(-1);

61 
	}
}

63 
	$ù¡abÀ_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

66 
∆msghdr
 
n
;

67 
ndtmsg
 
ndtm
;

68 
buf
[1024];

69 } 
ªq
;

70 *
«mï
 = 
NULL
;

71 *
thªsh•
 = 
NULL
;

72 *
gc_öç
 = 
NULL
;

73 
∑rms_buf
[1024];

74 
π©å
 *
∑rms_πa
 = (π©å *)
∑rms_buf
;

75 
∑rms_ch™ge
 = 0;

77 
	`mem£t
(&
ªq
, 0, (req));

79 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
ndtmsg
));

80 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

81 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

83 
ªq
.
ndtm
.
ndtm_Ámûy
 = 
¥e„ºed_Ámûy
;

84 
ªq
.
ndtm
.
ndtm_∑d1
 = 0;

85 
ªq
.
ndtm
.
ndtm_∑d2
 = 0;

87 
	`mem£t
(&
∑rms_buf
, 0, (parms_buf));

89 
∑rms_πa
->
πa_ty≥
 = 
NDTA_PARMS
;

90 
∑rms_πa
->
πa_Àn
 = 
	`RTA_LENGTH
(0);

92 
¨gc
 > 0) {

93 i‡(
	`°rcmp
(*
¨gv
, "name") == 0) {

94 
Àn
;

96 
	`NEXT_ARG
();

97 i‡(
«mï
)

98 
	`du∑rg
("NAME", *
¨gv
);

100 
«mï
 = *
¨gv
;

101 
Àn
 = 
	`°æí
(
«mï
) + 1;

102 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
NDTA_NAME
, 
«mï
, 
Àn
);

103 } i‡(
	`°rcmp
(*
¨gv
, "thresh1") == 0) {

104 
__u32
 
thªsh1
;

106 
	`NEXT_ARG
();

107 
thªsh•
 = *
¨gv
;

109 i‡(
	`gë_u32
(&
thªsh1
, *
¨gv
, 0))

110 
	`öv¨g
("\"thªsh1\" vÆuêi†övÆid", *
¨gv
);

112 
	`add©å32
(&
ªq
.
n
, ‘eq), 
NDTA_THRESH1
, 
thªsh1
);

113 } i‡(
	`°rcmp
(*
¨gv
, "thresh2") == 0) {

114 
__u32
 
thªsh2
;

116 
	`NEXT_ARG
();

117 
thªsh•
 = *
¨gv
;

119 i‡(
	`gë_u32
(&
thªsh2
, *
¨gv
, 0))

120 
	`öv¨g
("\"thªsh2\" vÆuêi†övÆid", *
¨gv
);

122 
	`add©å32
(&
ªq
.
n
, ‘eq), 
NDTA_THRESH2
, 
thªsh2
);

123 } i‡(
	`°rcmp
(*
¨gv
, "thresh3") == 0) {

124 
__u32
 
thªsh3
;

126 
	`NEXT_ARG
();

127 
thªsh•
 = *
¨gv
;

129 i‡(
	`gë_u32
(&
thªsh3
, *
¨gv
, 0))

130 
	`öv¨g
("\"thªsh3\" vÆuêi†övÆid", *
¨gv
);

132 
	`add©å32
(&
ªq
.
n
, ‘eq), 
NDTA_THRESH3
, 
thªsh3
);

133 } i‡(
	`°rcmp
(*
¨gv
, "gc_int") == 0) {

134 
__u64
 
gc_öt
;

136 
	`NEXT_ARG
();

137 
gc_öç
 = *
¨gv
;

139 i‡(
	`gë_u64
(&
gc_öt
, *
¨gv
, 0))

140 
	`öv¨g
("\"gc_öt\" vÆuêi†övÆid", *
¨gv
);

142 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
NDTA_GC_INTERVAL
,

143 &
gc_öt
, (gc_int));

144 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

145 
__u32
 
ifödex
;

147 
	`NEXT_ARG
();

148 
ifödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
);

149 i‡(
ifödex
 == 0) {

150 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", *
¨gv
);

154 
	`πa_add©å32
(
∑rms_πa
, (
∑rms_buf
),

155 
NDTPA_IFINDEX
, 
ifödex
);

156 } i‡(
	`°rcmp
(*
¨gv
, "base_reachable") == 0) {

157 
__u64
 
bªachabÀ
;

159 
	`NEXT_ARG
();

161 i‡(
	`gë_u64
(&
bªachabÀ
, *
¨gv
, 0))

162 
	`öv¨g
("\"ba£_ªachabÀ\" vÆuêi†övÆid", *
¨gv
);

164 
	`πa_add©å_l
(
∑rms_πa
, (
∑rms_buf
),

165 
NDTPA_BASE_REACHABLE_TIME
,

166 &
bªachabÀ
, (breachable));

167 
∑rms_ch™ge
 = 1;

168 } i‡(
	`°rcmp
(*
¨gv
, "retrans") == 0) {

169 
__u64
 
ªå™s
;

171 
	`NEXT_ARG
();

173 i‡(
	`gë_u64
(&
ªå™s
, *
¨gv
, 0))

174 
	`öv¨g
("\"ªå™s\" vÆuêi†övÆid", *
¨gv
);

176 
	`πa_add©å_l
(
∑rms_πa
, (
∑rms_buf
),

177 
NDTPA_RETRANS_TIME
,

178 &
ªå™s
, (retrans));

179 
∑rms_ch™ge
 = 1;

180 } i‡(
	`°rcmp
(*
¨gv
, "gc_stale") == 0) {

181 
__u64
 
gc_°Æe
;

183 
	`NEXT_ARG
();

185 i‡(
	`gë_u64
(&
gc_°Æe
, *
¨gv
, 0))

186 
	`öv¨g
("\"gc_°Æe\" vÆuêi†övÆid", *
¨gv
);

188 
	`πa_add©å_l
(
∑rms_πa
, (
∑rms_buf
),

189 
NDTPA_GC_STALETIME
,

190 &
gc_°Æe
, (gc_stale));

191 
∑rms_ch™ge
 = 1;

192 } i‡(
	`°rcmp
(*
¨gv
, "delay_probe") == 0) {

193 
__u64
 
dñay_¥obe
;

195 
	`NEXT_ARG
();

197 i‡(
	`gë_u64
(&
dñay_¥obe
, *
¨gv
, 0))

198 
	`öv¨g
("\"dñay_¥obe\" vÆuêi†övÆid", *
¨gv
);

200 
	`πa_add©å_l
(
∑rms_πa
, (
∑rms_buf
),

201 
NDTPA_DELAY_PROBE_TIME
,

202 &
dñay_¥obe
, (delay_probe));

203 
∑rms_ch™ge
 = 1;

204 } i‡(
	`°rcmp
(*
¨gv
, "queue") == 0) {

205 
__u32
 
queue
;

207 
	`NEXT_ARG
();

209 i‡(
	`gë_u32
(&
queue
, *
¨gv
, 0))

210 
	`öv¨g
("\"queue\" vÆuêi†övÆid", *
¨gv
);

212 i‡(!
∑rms_πa
)

213 
∑rms_πa
 = (
π©å
 *)&
∑rms_buf
;

214 
	`πa_add©å32
(
∑rms_πa
, (
∑rms_buf
),

215 
NDTPA_QUEUE_LEN
, 
queue
);

216 
∑rms_ch™ge
 = 1;

217 } i‡(
	`°rcmp
(*
¨gv
, "app_probes") == 0) {

218 
__u32
 
≠robe
;

220 
	`NEXT_ARG
();

222 i‡(
	`gë_u32
(&
≠robe
, *
¨gv
, 0))

223 
	`öv¨g
("\"≠p_¥obes\" vÆuêi†övÆid", *
¨gv
);

225 
	`πa_add©å32
(
∑rms_πa
, (
∑rms_buf
),

226 
NDTPA_APP_PROBES
, 
≠robe
);

227 
∑rms_ch™ge
 = 1;

228 } i‡(
	`°rcmp
(*
¨gv
, "ucast_probes") == 0) {

229 
__u32
 
u¥obe
;

231 
	`NEXT_ARG
();

233 i‡(
	`gë_u32
(&
u¥obe
, *
¨gv
, 0))

234 
	`öv¨g
("\"uˇ°_¥obes\" vÆuêi†övÆid", *
¨gv
);

236 
	`πa_add©å32
(
∑rms_πa
, (
∑rms_buf
),

237 
NDTPA_UCAST_PROBES
, 
u¥obe
);

238 
∑rms_ch™ge
 = 1;

239 } i‡(
	`°rcmp
(*
¨gv
, "mcast_probes") == 0) {

240 
__u32
 
m¥obe
;

242 
	`NEXT_ARG
();

244 i‡(
	`gë_u32
(&
m¥obe
, *
¨gv
, 0))

245 
	`öv¨g
("\"mˇ°_¥obes\" vÆuêi†övÆid", *
¨gv
);

247 
	`πa_add©å32
(
∑rms_πa
, (
∑rms_buf
),

248 
NDTPA_MCAST_PROBES
, 
m¥obe
);

249 
∑rms_ch™ge
 = 1;

250 } i‡(
	`°rcmp
(*
¨gv
, "anycast_delay") == 0) {

251 
__u64
 
™yˇ°_dñay
;

253 
	`NEXT_ARG
();

255 i‡(
	`gë_u64
(&
™yˇ°_dñay
, *
¨gv
, 0))

256 
	`öv¨g
("\"™yˇ°_dñay\" vÆuêi†övÆid", *
¨gv
);

258 
	`πa_add©å_l
(
∑rms_πa
, (
∑rms_buf
),

259 
NDTPA_ANYCAST_DELAY
,

260 &
™yˇ°_dñay
, (anycast_delay));

261 
∑rms_ch™ge
 = 1;

262 } i‡(
	`°rcmp
(*
¨gv
, "proxy_delay") == 0) {

263 
__u64
 
¥oxy_dñay
;

265 
	`NEXT_ARG
();

267 i‡(
	`gë_u64
(&
¥oxy_dñay
, *
¨gv
, 0))

268 
	`öv¨g
("\"¥oxy_dñay\" vÆuêi†övÆid", *
¨gv
);

270 
	`πa_add©å_l
(
∑rms_πa
, (
∑rms_buf
),

271 
NDTPA_PROXY_DELAY
,

272 &
¥oxy_dñay
, (proxy_delay));

273 
∑rms_ch™ge
 = 1;

274 } i‡(
	`°rcmp
(*
¨gv
, "proxy_queue") == 0) {

275 
__u32
 
pqueue
;

277 
	`NEXT_ARG
();

279 i‡(
	`gë_u32
(&
pqueue
, *
¨gv
, 0))

280 
	`öv¨g
("\"¥oxy_queue\" vÆuêi†övÆid", *
¨gv
);

282 
	`πa_add©å32
(
∑rms_πa
, (
∑rms_buf
),

283 
NDTPA_PROXY_QLEN
, 
pqueue
);

284 
∑rms_ch™ge
 = 1;

285 } i‡(
	`°rcmp
(*
¨gv
, "locktime") == 0) {

286 
__u64
 
locktime
;

288 
	`NEXT_ARG
();

290 i‡(
	`gë_u64
(&
locktime
, *
¨gv
, 0))

291 
	`öv¨g
("\"locktime\" vÆuêi†övÆid", *
¨gv
);

293 
	`πa_add©å_l
(
∑rms_πa
, (
∑rms_buf
),

294 
NDTPA_LOCKTIME
,

295 &
locktime
, (locktime));

296 
∑rms_ch™ge
 = 1;

298 
	`öv¨g
("unknown", *
¨gv
);

301 
¨gc
--; 
¨gv
++;

304 i‡(!
«mï
)

305 
	`misßrg
("NAME");

306 i‡(!
thªsh•
 && !
gc_öç
 && !
∑rms_ch™ge
) {

307 
	`Ârötf
(
°dîr
, "NotÉnough information: changeableáttributesÑequired.\n");

308 
	`exô
(-1);

311 i‡(
∑rms_πa
->
πa_Àn
 > 
	`RTA_LENGTH
(0)) {

312 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
NDTA_PARMS
, 
	`RTA_DATA
(
∑rms_πa
),

313 
	`RTA_PAYLOAD
(
∑rms_πa
));

316 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

317 
	`exô
(2);

320 
	}
}

322 c⁄° *
	$¡abÀ_°πime_dñè
(
__u32
 
m£c
)

324 
°r
[32];

325 
timevÆ
 
now
;

326 
time_t
 
t
;

327 
tm
 *
ç
;

329 i‡(
m£c
 == 0)

330 
îr‹
;

332 
	`mem£t
(&
now
, 0, (now));

334 i‡(
	`gëtimeofday
(&
now
, 
NULL
) < 0) {

335 
	`≥º‹
("gettimeofday");

336 
îr‹
;

339 
t
 = 
now
.
tv_£c
 - (
m£c
 / 1000);

340 
ç
 = 
	`loˇ…ime
(&
t
);

341 i‡(!
ç
)

342 
îr‹
;

344 
	`°r·ime
(
°r
, (°r), "%Y-%m-%d %T", 
ç
);

346  
°r
;

347 
îr‹
:

348 
	`°r˝y
(
°r
, "(error)");

349  
°r
;

350 
	}
}

352 
	$¥öt_¡abÀ
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

354 
FILE
 *
Â
 = (FILE*)
¨g
;

355 
ndtmsg
 *
ndtm
 = 
	`NLMSG_DATA
(
n
);

356 
Àn
 = 
n
->
∆msg_Àn
;

357 
π©å
 *
tb
[
NDTA_MAX
+1];

358 
π©å
 *
çb
[
NDTPA_MAX
+1];

359 
ªt
;

361 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWNEIGHTBL
) {

362 
	`Ârötf
(
°dîr
, "Not NEIGHTBL: %08x %08x %08x\n",

363 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

366 
Àn
 -
	`NLMSG_LENGTH
((*
ndtm
));

367 i‡(
Àn
 < 0) {

368 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

372 i‡(
¥e„ºed_Ámûy
 &&Öª„ºed_Ámûy !
ndtm
->
ndtm_Ámûy
)

375 
	`∑r£_π©å
(
tb
, 
NDTA_MAX
, 
	`NDTA_RTA
(
ndtm
),

376 
n
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
ndtm
)));

378 i‡(
tb
[
NDTA_NAME
]) {

379 c⁄° *
«me
 = 
	`πa_gë©å_°r
(
tb
[
NDTA_NAME
]);

381 i‡(
	`°æí
(
fûãr
.
«me
Ë> 0 && 
	`°rcmp
(filter.name,Çame))

384 i‡(
tb
[
NDTA_PARMS
]) {

385 
	`∑r£_π©å
(
çb
, 
NDTPA_MAX
, 
	`RTA_DATA
(
tb
[
NDTA_PARMS
]),

386 
	`RTA_PAYLOAD
(
tb
[
NDTA_PARMS
]));

388 i‡(
çb
[
NDTPA_IFINDEX
]) {

389 
__u32
 
ifödex
 = 
	`πa_gë©å_u32
(
çb
[
NDTPA_IFINDEX
]);

391 i‡(
fûãr
.
ödex
 && fûãr.ödex !
ifödex
)

394 i‡(
fûãr
.
ödex
 && fûãr.ödex !
NONE_DEV
)

399 i‡(
ndtm
->
ndtm_Ámûy
 =
AF_INET
)

400 
	`Ârötf
(
Â
, "inet ");

401 i‡(
ndtm
->
ndtm_Ámûy
 =
AF_INET6
)

402 
	`Ârötf
(
Â
, "inet6 ");

403 i‡(
ndtm
->
ndtm_Ámûy
 =
AF_DEC√t
)

404 
	`Ârötf
(
Â
, "dnet ");

406 
	`Ârötf
(
Â
, "(%dË", 
ndtm
->
ndtm_Ámûy
);

408 i‡(
tb
[
NDTA_NAME
]) {

409 c⁄° *
«me
 = 
	`πa_gë©å_°r
(
tb
[
NDTA_NAME
]);

410 
	`Ârötf
(
Â
, "%†", 
«me
);

413 
	`Ârötf
(
Â
, "%s", 
_SL_
);

415 
ªt
 = (
tb
[
NDTA_THRESH1
] ||Åb[
NDTA_THRESH2
] ||Åb[
NDTA_THRESH3
] ||

416 
tb
[
NDTA_GC_INTERVAL
]);

417 i‡(
ªt
)

418 
	`Ârötf
(
Â
, " ");

420 i‡(
tb
[
NDTA_THRESH1
]) {

421 
__u32
 
thªsh1
 = 
	`πa_gë©å_u32
(
tb
[
NDTA_THRESH1
]);

422 
	`Ârötf
(
Â
, "thªsh1 %u ", 
thªsh1
);

424 i‡(
tb
[
NDTA_THRESH2
]) {

425 
__u32
 
thªsh2
 = 
	`πa_gë©å_u32
(
tb
[
NDTA_THRESH2
]);

426 
	`Ârötf
(
Â
, "thªsh2 %u ", 
thªsh2
);

428 i‡(
tb
[
NDTA_THRESH3
]) {

429 
__u32
 
thªsh3
 = 
	`πa_gë©å_u32
(
tb
[
NDTA_THRESH3
]);

430 
	`Ârötf
(
Â
, "thªsh3 %u ", 
thªsh3
);

432 i‡(
tb
[
NDTA_GC_INTERVAL
]) {

433 
gc_öt
 = 
	`πa_gë©å_u64
(
tb
[
NDTA_GC_INTERVAL
]);

434 
	`Ârötf
(
Â
, "gc_öà%Œu ", 
gc_öt
);

437 i‡(
ªt
)

438 
	`Ârötf
(
Â
, "%s", 
_SL_
);

440 i‡(
tb
[
NDTA_CONFIG
] && 
show_°©s
) {

441 
ndt_c⁄fig
 *
ndtc
 = 
	`RTA_DATA
(
tb
[
NDTA_CONFIG
]);

443 
	`Ârötf
(
Â
, " ");

444 
	`Ârötf
(
Â
, "config ");

446 
	`Ârötf
(
Â
, "key_À¿%u ", 
ndtc
->
ndtc_key_Àn
);

447 
	`Ârötf
(
Â
, "íåy_sizê%u ", 
ndtc
->
ndtc_íåy_size
);

448 
	`Ârötf
(
Â
, "íåõ†%u ", 
ndtc
->
ndtc_íåõs
);

450 
	`Ârötf
(
Â
, "%s", 
_SL_
);

451 
	`Ârötf
(
Â
, " ");

453 
	`Ârötf
(
Â
, "last_flush %s ",

454 
	`¡abÀ_°πime_dñè
(
ndtc
->
ndtc_œ°_Êush
));

455 
	`Ârötf
(
Â
, "last_rand %s ",

456 
	`¡abÀ_°πime_dñè
(
ndtc
->
ndtc_œ°_ønd
));

458 
	`Ârötf
(
Â
, "%s", 
_SL_
);

459 
	`Ârötf
(
Â
, " ");

461 
	`Ârötf
(
Â
, "hash_∫d %u ", 
ndtc
->
ndtc_hash_∫d
);

462 
	`Ârötf
(
Â
, "hash_mask %08x ", 
ndtc
->
ndtc_hash_mask
);

464 
	`Ârötf
(
Â
, "hash_chaö_g¯%u ", 
ndtc
->
ndtc_hash_chaö_gc
);

465 
	`Ârötf
(
Â
, "¥oxy_qÀ¿%u ", 
ndtc
->
ndtc_¥oxy_qÀn
);

467 
	`Ârötf
(
Â
, "%s", 
_SL_
);

470 i‡(
tb
[
NDTA_PARMS
]) {

471 i‡(
çb
[
NDTPA_IFINDEX
]) {

472 
__u32
 
ifödex
 = 
	`πa_gë©å_u32
(
çb
[
NDTPA_IFINDEX
]);

474 
	`Ârötf
(
Â
, " ");

475 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
ifödex
));

476 
	`Ârötf
(
Â
, "%s", 
_SL_
);

479 
	`Ârötf
(
Â
, " ");

481 i‡(
çb
[
NDTPA_REFCNT
]) {

482 
__u32
 
ªf˙t
 = 
	`πa_gë©å_u32
(
çb
[
NDTPA_REFCNT
]);

483 
	`Ârötf
(
Â
, "ªf˙à%u ", 
ªf˙t
);

485 i‡(
çb
[
NDTPA_REACHABLE_TIME
]) {

486 
ªachabÀ
 = 
	`πa_gë©å_u64
(
çb
[
NDTPA_REACHABLE_TIME
]);

487 
	`Ârötf
(
Â
, "ªachabÀ %Œu ", 
ªachabÀ
);

489 i‡(
çb
[
NDTPA_BASE_REACHABLE_TIME
]) {

490 
bªachabÀ
 = 
	`πa_gë©å_u64
(
çb
[
NDTPA_BASE_REACHABLE_TIME
]);

491 
	`Ârötf
(
Â
, "ba£_ªachabÀ %Œu ", 
bªachabÀ
);

493 i‡(
çb
[
NDTPA_RETRANS_TIME
]) {

494 
ªå™s
 = 
	`πa_gë©å_u64
(
çb
[
NDTPA_RETRANS_TIME
]);

495 
	`Ârötf
(
Â
, "ªå™†%Œu ", 
ªå™s
);

498 
	`Ârötf
(
Â
, "%s", 
_SL_
);

500 
	`Ârötf
(
Â
, " ");

502 i‡(
çb
[
NDTPA_GC_STALETIME
]) {

503 
gc_°Æe
 = 
	`πa_gë©å_u64
(
çb
[
NDTPA_GC_STALETIME
]);

504 
	`Ârötf
(
Â
, "gc_°Æê%Œu ", 
gc_°Æe
);

506 i‡(
çb
[
NDTPA_DELAY_PROBE_TIME
]) {

507 
dñay_¥obe
 = 
	`πa_gë©å_u64
(
çb
[
NDTPA_DELAY_PROBE_TIME
]);

508 
	`Ârötf
(
Â
, "dñay_¥obê%Œu ", 
dñay_¥obe
);

510 i‡(
çb
[
NDTPA_QUEUE_LEN
]) {

511 
__u32
 
queue
 = 
	`πa_gë©å_u32
(
çb
[
NDTPA_QUEUE_LEN
]);

512 
	`Ârötf
(
Â
, "queuê%u ", 
queue
);

515 
	`Ârötf
(
Â
, "%s", 
_SL_
);

517 
	`Ârötf
(
Â
, " ");

519 i‡(
çb
[
NDTPA_APP_PROBES
]) {

520 
__u32
 
≠robe
 = 
	`πa_gë©å_u32
(
çb
[
NDTPA_APP_PROBES
]);

521 
	`Ârötf
(
Â
, "≠p_¥obe†%u ", 
≠robe
);

523 i‡(
çb
[
NDTPA_UCAST_PROBES
]) {

524 
__u32
 
u¥obe
 = 
	`πa_gë©å_u32
(
çb
[
NDTPA_UCAST_PROBES
]);

525 
	`Ârötf
(
Â
, "uˇ°_¥obe†%u ", 
u¥obe
);

527 i‡(
çb
[
NDTPA_MCAST_PROBES
]) {

528 
__u32
 
m¥obe
 = 
	`πa_gë©å_u32
(
çb
[
NDTPA_MCAST_PROBES
]);

529 
	`Ârötf
(
Â
, "mˇ°_¥obe†%u ", 
m¥obe
);

532 
	`Ârötf
(
Â
, "%s", 
_SL_
);

534 
	`Ârötf
(
Â
, " ");

536 i‡(
çb
[
NDTPA_ANYCAST_DELAY
]) {

537 
™yˇ°_dñay
 = 
	`πa_gë©å_u64
(
çb
[
NDTPA_ANYCAST_DELAY
]);

538 
	`Ârötf
(
Â
, "™yˇ°_dñay %Œu ", 
™yˇ°_dñay
);

540 i‡(
çb
[
NDTPA_PROXY_DELAY
]) {

541 
¥oxy_dñay
 = 
	`πa_gë©å_u64
(
çb
[
NDTPA_PROXY_DELAY
]);

542 
	`Ârötf
(
Â
, "¥oxy_dñay %Œu ", 
¥oxy_dñay
);

544 i‡(
çb
[
NDTPA_PROXY_QLEN
]) {

545 
__u32
 
pqueue
 = 
	`πa_gë©å_u32
(
çb
[
NDTPA_PROXY_QLEN
]);

546 
	`Ârötf
(
Â
, "¥oxy_queuê%u ", 
pqueue
);

548 i‡(
çb
[
NDTPA_LOCKTIME
]) {

549 
locktime
 = 
	`πa_gë©å_u64
(
çb
[
NDTPA_LOCKTIME
]);

550 
	`Ârötf
(
Â
, "locktimê%Œu ", 
locktime
);

553 
	`Ârötf
(
Â
, "%s", 
_SL_
);

556 i‡(
tb
[
NDTA_STATS
] && 
show_°©s
) {

557 
ndt_°©s
 *
ndts
 = 
	`RTA_DATA
(
tb
[
NDTA_STATS
]);

559 
	`Ârötf
(
Â
, " ");

560 
	`Ârötf
(
Â
, "stats ");

562 
	`Ârötf
(
Â
, "allocs %llu ",

563 (Ë
ndts
->
ndts_Ælocs
);

564 
	`Ârötf
(
Â
, "destroys %llu ",

565 (Ë
ndts
->
ndts_de°roys
);

566 
	`Ârötf
(
Â
, "hash_grows %llu ",

567 (Ë
ndts
->
ndts_hash_grows
);

569 
	`Ârötf
(
Â
, "%s", 
_SL_
);

570 
	`Ârötf
(
Â
, " ");

572 
	`Ârötf
(
Â
, "res_failed %llu ",

573 (Ë
ndts
->
ndts_ªs_Áûed
);

574 
	`Ârötf
(
Â
, "lookups %llu ",

575 (Ë
ndts
->
ndts_lookups
);

576 
	`Ârötf
(
Â
, "hits %llu ",

577 (Ë
ndts
->
ndts_hôs
);

579 
	`Ârötf
(
Â
, "%s", 
_SL_
);

580 
	`Ârötf
(
Â
, " ");

582 
	`Ârötf
(
Â
, "rcv_probes_mcast %llu ",

583 (Ë
ndts
->
ndts_rcv_¥obes_mˇ°
);

584 
	`Ârötf
(
Â
, "rcv_probes_ucast %llu ",

585 (Ë
ndts
->
ndts_rcv_¥obes_uˇ°
);

587 
	`Ârötf
(
Â
, "%s", 
_SL_
);

588 
	`Ârötf
(
Â
, " ");

590 
	`Ârötf
(
Â
, "periodic_gc_runs %llu ",

591 (Ë
ndts
->
ndts_≥riodic_gc_runs
);

592 
	`Ârötf
(
Â
, "forced_gc_runs %llu ",

593 (Ë
ndts
->
ndts_f‹˚d_gc_runs
);

595 
	`Ârötf
(
Â
, "%s", 
_SL_
);

598 
	`Ârötf
(
Â
, "\n");

600 
	`fÊush
(
Â
);

602 
	}
}

604 
	$ù¡abÀ_ª£t_fûãr
()

606 
	`mem£t
(&
fûãr
, 0, (filter));

607 
	}
}

609 
	$ù¡abÀ_show
(
¨gc
, **
¨gv
)

611 
	`ù¡abÀ_ª£t_fûãr
();

613 
fûãr
.
Ámûy
 = 
¥e„ºed_Ámûy
;

615 
¨gc
 > 0) {

616 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

617 
	`NEXT_ARG
();

619 i‡(
	`°rcmp
("n⁄e", *
¨gv
) == 0)

620 
fûãr
.
ödex
 = 
NONE_DEV
;

621 i‡((
fûãr
.
ödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
)) == 0)

622 
	`öv¨g
("\"DEV\" i†övÆid", *
¨gv
);

623 } i‡(
	`°rcmp
(*
¨gv
, "name") == 0) {

624 
	`NEXT_ARG
();

626 
	`°∫˝y
(
fûãr
.
«me
, *
¨gv
, (filter.name));

628 
	`öv¨g
("unknown", *
¨gv
);

630 
¨gc
--; 
¨gv
++;

633 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
¥e„ºed_Ámûy
, 
RTM_GETNEIGHTBL
) < 0) {

634 
	`≥º‹
("Cannot send dumpÑequest");

635 
	`exô
(1);

638 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_¡abÀ
, 
°dout
) < 0) {

639 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

640 
	`exô
(1);

644 
	}
}

646 
	$do_ù¡abÀ
(
¨gc
, **
¨gv
)

648 
	`Œ_öô_m≠
(&
πh
);

650 i‡(
¨gc
 > 0) {

651 i‡(
	`m©ches
(*
¨gv
, "change") == 0 ||

652 
	`m©ches
(*
¨gv
, "chg") == 0)

653  
	`ù¡abÀ_modify
(
RTM_SETNEIGHTBL
,

654 
NLM_F_REPLACE
,

655 
¨gc
-1, 
¨gv
+1);

656 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

657 
	`m©ches
(*
¨gv
, "lst") == 0 ||

658 
	`m©ches
(*
¨gv
, "list") == 0)

659  
	`ù¡abÀ_show
(
¨gc
-1, 
¨gv
+1);

660 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

661 
	`ußge
();

663  
	`ù¡abÀ_show
(0, 
NULL
);

665 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ùÇèbÀ hñp\".\n", *
¨gv
);

666 
	`exô
(-1);

667 
	}
}

	@ip/ipprefix.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<sys/sockë.h
>

29 
	~<√töë/icmp6.h
>

31 
	~"utûs.h
"

32 
	~"ù_comm⁄.h
"

35 
	#IF_PREFIX_ONLINK
 0x01

	)

36 
	#IF_PREFIX_AUTOCONF
 0x02

	)

38 
	$¥öt_¥efix
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

40 
FILE
 *
Â
 = (FILE*)
¨g
;

41 
¥efixmsg
 *
¥efix
 = 
	`NLMSG_DATA
(
n
);

42 
Àn
 = 
n
->
∆msg_Àn
;

43 
π©å
 * 
tb
[
RTA_MAX
+1];

44 
Ámûy
 = 
¥e„ºed_Ámûy
;

46 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWPREFIX
) {

47 
	`Ârötf
(
°dîr
, "NotáÖrefix: %08x %08x %08x\n",

48 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

52 
Àn
 -
	`NLMSG_LENGTH
((*
¥efix
));

53 i‡(
Àn
 < 0) {

54 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

58 i‡(
Ámûy
 =
AF_UNSPEC
)

59 
Ámûy
 = 
AF_INET6
;

60 i‡(
Ámûy
 !
AF_INET6
)

63 i‡(
¥efix
->
¥efix_Ámûy
 !
AF_INET6
) {

64 
	`Ârötf
(
°dîr
, "öc‹ª˘ÖrŸocﬁ famûy: %d\n", 
¥efix
->
¥efix_Ámûy
);

67 i‡(
¥efix
->
¥efix_ty≥
 !
ND_OPT_PREFIX_INFORMATION
) {

68 
	`Ârötf
(
°dîr
, "wr⁄g NDÅy≥ %d\n", 
¥efix
->
¥efix_ty≥
);

72 
	`∑r£_π©å
(
tb
, 
RTA_MAX
, 
	`RTM_RTA
(
¥efix
), 
Àn
);

74 
	`Ârötf
(
Â
, "prefix ");

76 i‡(
tb
[
PREFIX_ADDRESS
]) {

77 
ö6_addr
 *
pfx
;

78 
abuf
[256];

80 
pfx
 = (
ö6_addr
 *)
	`RTA_DATA
(
tb
[
PREFIX_ADDRESS
]);

82 
	`mem£t
(
abuf
, '\0', (abuf));

83 
	`Ârötf
(
Â
, "%s", 
	`π_addr_n2a
(
Ámûy
,

84 
	`RTA_PAYLOAD
(
tb
[
PREFIX_ADDRESS
]),

85 
pfx
,

86 
abuf
, (abuf)));

88 
	`Ârötf
(
Â
, "/%u ", 
¥efix
->
¥efix_Àn
);

90 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
¥efix
->
¥efix_ifödex
));

92 i‡(
¥efix
->
¥efix_Êags
 & 
IF_PREFIX_ONLINK
)

93 
	`Ârötf
(
Â
, "onlink ");

94 i‡(
¥efix
->
¥efix_Êags
 & 
IF_PREFIX_AUTOCONF
)

95 
	`Ârötf
(
Â
, "autoconf ");

97 i‡(
tb
[
PREFIX_CACHEINFO
]) {

98 
¥efix_ˇcheöfo
 *
pc
;

99 
pc
 = (
¥efix_ˇcheöfo
 *)
	`RTA_DATA
(
tb
[
PREFIX_CACHEINFO
]);

101 
	`Ârötf
(
Â
, "vÆid %u ", 
pc
->
vÆid_time
);

102 
	`Ârötf
(
Â
, "¥e„ºed %u ", 
pc
->
¥e„ºed_time
);

105 
	`Ârötf
(
Â
, "\n");

106 
	`fÊush
(
Â
);

109 
	}
}

	@ip/iproute.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<°rög.h
>

19 
	~<time.h
>

20 
	~<sys/time.h
>

21 
	~<sys/sockë.h
>

22 
	~<√töë/ö.h
>

23 
	~<√töë/ù.h
>

24 
	~<¨∑/öë.h
>

25 
	~<löux/ö_rouã.h
>

26 
	~<löux/icmpv6.h
>

27 
	~<î∫o.h
>

29 
	~"π_«mes.h
"

30 
	~"utûs.h
"

31 
	~"ù_comm⁄.h
"

33 #i‚de‡
RTAX_RTTVAR


34 
	#RTAX_RTTVAR
 
RTAX_HOPS


	)

37 
	eli°_a˘i⁄
 {

38 
	mIPROUTE_LIST
,

39 
	mIPROUTE_FLUSH
,

40 
	mIPROUTE_SAVE
,

42 c⁄° *
	gmx_«mes
[
RTAX_MAX
+1] = {

43 [
RTAX_MTU
] = "mtu",

44 [
RTAX_WINDOW
] = "window",

45 [
RTAX_RTT
] = "rtt",

46 [
RTAX_RTTVAR
] = "rttvar",

47 [
RTAX_SSTHRESH
] = "ssthresh",

48 [
RTAX_CWND
] = "cwnd",

49 [
RTAX_ADVMSS
] = "advmss",

50 [
RTAX_REORDERING
]="reordering",

51 [
RTAX_HOPLIMIT
] = "hoplimit",

52 [
RTAX_INITCWND
] = "initcwnd",

53 [
RTAX_FEATURES
] = "features",

54 [
RTAX_RTO_MIN
] = "rto_min",

55 [
RTAX_INITRWND
] = "initrwnd",

56 [
RTAX_QUICKACK
] = "quickack",

57 [
RTAX_CC_ALGO
] = "congctl",

59 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

61 
	$ußge
()

63 
	`Ârötf
(
°dîr
, "Usage: ipÑoute {Üist | flush } SELECTOR\n");

64 
	`Ârötf
(
°dîr
, " ipÑoute save SELECTOR\n");

65 
	`Ârötf
(
°dîr
, " ipÑouteÑestore\n");

66 
	`Ârötf
(
°dîr
, " ipÑoute showdump\n");

67 
	`Ârötf
(
°dîr
, " ipÑoute get ADDRESS [ from ADDRESS iif STRING ]\n");

68 
	`Ârötf
(
°dîr
, " [ oif STRING ] [Åos TOS ]\n");

69 
	`Ârötf
(
°dîr
, " [ mark NUMBER ]\n");

70 
	`Ârötf
(
°dîr
, " ipÑoute {ádd | del | change |áppend |Ñeplace } ROUTE\n");

71 
	`Ârötf
(
°dîr
, "SELECTOR := [Ñoot PREFIX ] [ match PREFIX ] [Éxact PREFIX ]\n");

72 
	`Ârötf
(
°dîr
, " [Åable TABLE_ID ] [Öroto RTPROTO ]\n");

73 
	`Ârötf
(
°dîr
, " [Åype TYPE ] [ scope SCOPE ]\n");

74 
	`Ârötf
(
°dîr
, "ROUTE := NODE_SPEC [ INFO_SPEC ]\n");

75 
	`Ârötf
(
°dîr
, "NODE_SPEC := [ TYPE ] PREFIX [Åos TOS ]\n");

76 
	`Ârötf
(
°dîr
, " [Åable TABLE_ID ] [Öroto RTPROTO ]\n");

77 
	`Ârötf
(
°dîr
, " [ scope SCOPE ] [ metric METRIC ]\n");

78 
	`Ârötf
(
°dîr
, "INFO_SPEC := NH OPTIONS FLAGS [Çexthop NH ]...\n");

79 
	`Ârötf
(
°dîr
, "NH := [ via [ FAMILY ] ADDRESS ] [ dev STRING ] [ weight NUMBER ] NHFLAGS\n");

80 
	`Ârötf
(
°dîr
, "FAMILY := [ inet | inet6 | ipx | dnet | mpls | bridge |Üink ]\n");

81 
	`Ârötf
(
°dîr
, "OPTIONS := FLAGS [ mtu NUMBER ] [ádvmss NUMBER ] [ás [Åo ] ADDRESS ]\n");

82 
	`Ârötf
(
°dîr
, " [Ñtt TIME ] [Ñttvar TIME ] [Ñeordering NUMBER ]\n");

83 
	`Ârötf
(
°dîr
, " [ window NUMBER] [ cwnd NUMBER ] [ initcwnd NUMBER ]\n");

84 
	`Ârötf
(
°dîr
, " [ ssthresh NUMBER ] [Ñealms REALM ] [ src ADDRESS ]\n");

85 
	`Ârötf
(
°dîr
, " [Ñto_min TIME ] [ hoplimit NUMBER ] [ initrwnd NUMBER ]\n");

86 
	`Ârötf
(
°dîr
, " [ features FEATURES ] [ quickack BOOL ] [ congctl NAME ]\n");

87 
	`Ârötf
(
°dîr
, " [Öref PREF ]\n");

88 
	`Ârötf
(
°dîr
, "TYPE := [ unicast |Üocal | broadcast | multicast |Åhrow |\n");

89 
	`Ârötf
(
°dîr
, " unreachable |Örohibit | blackhole |Çat ]\n");

90 
	`Ârötf
(
°dîr
, "TABLE_ID := [Üocal | main | default |áll | NUMBER ]\n");

91 
	`Ârötf
(
°dîr
, "SCOPE := [ host |Üink | global | NUMBER ]\n");

92 
	`Ârötf
(
°dîr
, "NHFLAGS := [ onlink |Öervasive ]\n");

93 
	`Ârötf
(
°dîr
, "RTPROTO := [ kernel | boot | static | NUMBER ]\n");

94 
	`Ârötf
(
°dîr
, "PREF := [Üow | medium | high ]\n");

95 
	`Ârötf
(
°dîr
, "TIME := NUMBER[s|ms]\n");

96 
	`Ârötf
(
°dîr
, "BOOL := [1|0]\n");

97 
	`Ârötf
(
°dîr
, "FEATURES :=Écn\n");

98 
	`exô
(-1);

99 
	}
}

104 
	mtb
;

105 
	m˛⁄ed
;

106 
	mÊushed
;

107 *
	mÊushb
;

108 
	mÊushp
;

109 
	mÊushe
;

110 
	m¥Ÿocﬁ
, 
	m¥Ÿocﬁmask
;

111 
	msc›e
, 
	msc›emask
;

112 
	mty≥
, 
	mty≥mask
;

113 
	mtos
, 
	mtosmask
;

114 
	miif
, 
	miifmask
;

115 
	moif
, 
	moifmask
;

116 
	mm¨k
, 
	mm¨kmask
;

117 
	mªÆm
, 
	mªÆmmask
;

118 
öë_¥efix
 
	mΩªf§c
;

119 
öë_¥efix
 
	mrvü
;

120 
öë_¥efix
 
	mrd°
;

121 
öë_¥efix
 
	mmd°
;

122 
öë_¥efix
 
	mr§c
;

123 
öë_¥efix
 
	mm§c
;

124 } 
	gfûãr
;

126 
	$Êush_upd©e
()

128 i‡(
	`π∆_£nd_check
(&
πh
, 
fûãr
.
Êushb
, fûãr.
Êushp
) < 0) {

129 
	`≥º‹
("FailedÅo send flushÑequest");

132 
fûãr
.
Êushp
 = 0;

134 
	}
}

136 
	$fûãr_∆msg
(
∆msghdr
 *
n
, 
π©å
 **
tb
, 
ho°_Àn
)

138 
πmsg
 *
r
 = 
	`NLMSG_DATA
(
n
);

139 
öë_¥efix
 
d°
;

140 
öë_¥efix
 
§c
;

141 
öë_¥efix
 
vü
;

142 
öë_¥efix
 
¥ef§c
;

143 
__u32
 
èbÀ
;

144 
ù6_mu…ùÀ_èbÀs
;

146 
èbÀ
 = 
	`πm_gë_èbÀ
(
r
, 
tb
);

148 i‡(
¥e„ºed_Ámûy
 !
AF_UNSPEC
 && 
r
->
πm_Ámûy
 !=Öreferred_family)

151 i‡(
r
->
πm_Ámûy
 =
AF_INET6
 && 
èbÀ
 !
RT_TABLE_MAIN
)

152 
ù6_mu…ùÀ_èbÀs
 = 1;

154 i‡(
fûãr
.
˛⁄ed
 =!(
r
->
πm_Êags
&
RTM_F_CLONED
))

157 i‡(
r
->
πm_Ámûy
 =
AF_INET6
 && !
ù6_mu…ùÀ_èbÀs
) {

158 i‡(
fûãr
.
tb
) {

159 i‡(
fûãr
.
tb
 =
RT_TABLE_LOCAL
) {

160 i‡(
r
->
πm_ty≥
 !
RTN_LOCAL
)

162 } i‡(
fûãr
.
tb
 =
RT_TABLE_MAIN
) {

163 i‡(
r
->
πm_ty≥
 =
RTN_LOCAL
)

170 i‡(
fûãr
.
tb
 > 0 && fûãr.tb !
èbÀ
)

173 i‡((
fûãr
.
¥Ÿocﬁ
^
r
->
πm_¥Ÿocﬁ
)&fûãr.
¥Ÿocﬁmask
)

175 i‡((
fûãr
.
sc›e
^
r
->
πm_sc›e
)&fûãr.
sc›emask
)

177 i‡((
fûãr
.
ty≥
^
r
->
πm_ty≥
)&fûãr.
ty≥mask
)

179 i‡((
fûãr
.
tos
^
r
->
πm_tos
)&fûãr.
tosmask
)

181 i‡(
fûãr
.
rd°
.
Ámûy
 &&

182 (
r
->
πm_Ámûy
 !
fûãr
.
rd°
.
Ámûy
 || fûãr.rd°.
bôÀn
 >Ñ->
πm_d°_Àn
))

184 i‡(
fûãr
.
md°
.
Ámûy
 &&

185 (
r
->
πm_Ámûy
 !
fûãr
.
md°
.
Ámûy
 ||

186 (
fûãr
.
md°
.
bôÀn
 >0 && fûãr.md°.bôÀ¿< 
r
->
πm_d°_Àn
)))

188 i‡(
fûãr
.
r§c
.
Ámûy
 &&

189 (
r
->
πm_Ámûy
 !
fûãr
.
r§c
.
Ámûy
 || fûãr.r§c.
bôÀn
 >Ñ->
πm_§c_Àn
))

191 i‡(
fûãr
.
m§c
.
Ámûy
 &&

192 (
r
->
πm_Ámûy
 !
fûãr
.
m§c
.
Ámûy
 ||

193 (
fûãr
.
m§c
.
bôÀn
 >0 && fûãr.m§c.bôÀ¿< 
r
->
πm_§c_Àn
)))

195 i‡(
fûãr
.
rvü
.
Ámûy
) {

196 
Ámûy
 = 
r
->
πm_Ámûy
;

197 i‡(
tb
[
RTA_VIA
]) {

198 
πvü
 *
vü
 = 
	`RTA_DATA
(
tb
[
RTA_VIA
]);

199 
Ámûy
 = 
vü
->
πvü_Ámûy
;

201 i‡(
Ámûy
 !
fûãr
.
rvü
.family)

204 i‡(
fûãr
.
Ωªf§c
.
Ámûy
 && 
r
->
πm_Ámûy
 != filter.rprefsrc.family)

207 
	`mem£t
(&
d°
, 0, (dst));

208 
d°
.
Ámûy
 = 
r
->
πm_Ámûy
;

209 i‡(
tb
[
RTA_DST
])

210 
	`mem˝y
(&
d°
.
d©a
, 
	`RTA_DATA
(
tb
[
RTA_DST
]), (
r
->
πm_d°_Àn
+7)/8);

211 i‡(
fûãr
.
r§c
.
Ámûy
 || fûãr.
m§c
.family) {

212 
	`mem£t
(&
§c
, 0, (src));

213 
§c
.
Ámûy
 = 
r
->
πm_Ámûy
;

214 i‡(
tb
[
RTA_SRC
])

215 
	`mem˝y
(&
§c
.
d©a
, 
	`RTA_DATA
(
tb
[
RTA_SRC
]), (
r
->
πm_§c_Àn
+7)/8);

217 i‡(
fûãr
.
rvü
.
bôÀn
>0) {

218 
	`mem£t
(&
vü
, 0, (via));

219 
vü
.
Ámûy
 = 
r
->
πm_Ámûy
;

220 i‡(
tb
[
RTA_GATEWAY
])

221 
	`mem˝y
(&
vü
.
d©a
, 
	`RTA_DATA
(
tb
[
RTA_GATEWAY
]), 
ho°_Àn
/8);

222 i‡(
tb
[
RTA_VIA
]) {

223 
size_t
 
Àn
 = 
	`RTA_PAYLOAD
(
tb
[
RTA_VIA
]) - 2;

224 
πvü
 *πvü = 
	`RTA_DATA
(
tb
[
RTA_VIA
]);

225 
vü
.
Ámûy
 = 
πvü
->
πvü_Ámûy
;

226 
	`mem˝y
(&
vü
.
d©a
, 
πvü
->
πvü_addr
, 
Àn
);

229 i‡(
fûãr
.
Ωªf§c
.
bôÀn
>0) {

230 
	`mem£t
(&
¥ef§c
, 0, (prefsrc));

231 
¥ef§c
.
Ámûy
 = 
r
->
πm_Ámûy
;

232 i‡(
tb
[
RTA_PREFSRC
])

233 
	`mem˝y
(&
¥ef§c
.
d©a
, 
	`RTA_DATA
(
tb
[
RTA_PREFSRC
]), 
ho°_Àn
/8);

236 i‡(
fûãr
.
rd°
.
Ámûy
 && 
	`öë_addr_m©ch
(&
d°
, &fûãr.rd°, fûãr.rd°.
bôÀn
))

238 i‡(
fûãr
.
md°
.
Ámûy
 && fûãr.md°.
bôÀn
 >= 0 &&

239 
	`öë_addr_m©ch
(&
d°
, &
fûãr
.
md°
, 
r
->
πm_d°_Àn
))

242 i‡(
fûãr
.
r§c
.
Ámûy
 && 
	`öë_addr_m©ch
(&
§c
, &fûãr.r§c, fûãr.r§c.
bôÀn
))

244 i‡(
fûãr
.
m§c
.
Ámûy
 && fûãr.m§c.
bôÀn
 >= 0 &&

245 
	`öë_addr_m©ch
(&
§c
, &
fûãr
.
m§c
, 
r
->
πm_§c_Àn
))

248 i‡(
fûãr
.
rvü
.
Ámûy
 && 
	`öë_addr_m©ch
(&
vü
, &fûãr.rvü, fûãr.rvü.
bôÀn
))

250 i‡(
fûãr
.
Ωªf§c
.
Ámûy
 && 
	`öë_addr_m©ch
(&
¥ef§c
, &fûãr.Ωªf§c, fûãr.Ωªf§c.
bôÀn
))

252 i‡(
fûãr
.
ªÆmmask
) {

253 
__u32
 
ªÆms
 = 0;

254 i‡(
tb
[
RTA_FLOW
])

255 
ªÆms
 = 
	`πa_gë©å_u32
(
tb
[
RTA_FLOW
]);

256 i‡((
ªÆms
^
fûãr
.
ªÆm
)&fûãr.
ªÆmmask
)

259 i‡(
fûãr
.
iifmask
) {

260 
iif
 = 0;

261 i‡(
tb
[
RTA_IIF
])

262 
iif
 = *(*)
	`RTA_DATA
(
tb
[
RTA_IIF
]);

263 i‡((
iif
^
fûãr
.iif)&fûãr.
iifmask
)

266 i‡(
fûãr
.
oifmask
) {

267 
oif
 = 0;

268 i‡(
tb
[
RTA_OIF
])

269 
oif
 = *(*)
	`RTA_DATA
(
tb
[
RTA_OIF
]);

270 i‡((
oif
^
fûãr
.oif)&fûãr.
oifmask
)

273 i‡(
fûãr
.
m¨kmask
) {

274 
m¨k
 = 0;

275 i‡(
tb
[
RTA_MARK
])

276 
m¨k
 = *(*)
	`RTA_DATA
(
tb
[
RTA_MARK
]);

277 i‡((
m¨k
 ^ 
fûãr
.m¨kË& fûãr.
m¨kmask
)

280 i‡(
fûãr
.
Êushb
 &&

281 
r
->
πm_Ámûy
 =
AF_INET6
 &&

282 
r
->
πm_d°_Àn
 == 0 &&

283 
r
->
πm_ty≥
 =
RTN_UNREACHABLE
 &&

284 
tb
[
RTA_PRIORITY
] &&

285 *(*)
	`RTA_DATA
(
tb
[
RTA_PRIORITY
]) == -1)

289 
	}
}

291 
	$¥öt_πax_„©uªs
(
FILE
 *
Â
, 
„©uªs
)

293 
of
 = 
„©uªs
;

295 i‡(
„©uªs
 & 
RTAX_FEATURE_ECN
) {

296 
	`Ârötf
(
Â
, "Écn");

297 
„©uªs
 &~
RTAX_FEATURE_ECN
;

300 i‡(
„©uªs
)

301 
	`Ârötf
(
Â
, " 0x%x", 
of
);

302 
	}
}

304 
	$¥öt_rouã
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

306 
FILE
 *
Â
 = (FILE*)
¨g
;

307 
πmsg
 *
r
 = 
	`NLMSG_DATA
(
n
);

308 
Àn
 = 
n
->
∆msg_Àn
;

309 
π©å
 * 
tb
[
RTA_MAX
+1];

310 
abuf
[256];

311 
ho°_Àn
;

312 
__u32
 
èbÀ
;

313 
	`SPRINT_BUF
(
b1
);

314 
hz
;

316 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWROUTE
 &&Ç->∆msg_ty≥ !
RTM_DELROUTE
) {

317 
	`Ârötf
(
°dîr
, "NotáÑoute: %08x %08x %08x\n",

318 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

321 i‡(
fûãr
.
Êushb
 && 
n
->
∆msg_ty≥
 !
RTM_NEWROUTE
)

323 
Àn
 -
	`NLMSG_LENGTH
((*
r
));

324 i‡(
Àn
 < 0) {

325 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

329 
ho°_Àn
 = 
	`af_bô_Àn
(
r
->
πm_Ámûy
);

331 
	`∑r£_π©å
(
tb
, 
RTA_MAX
, 
	`RTM_RTA
(
r
), 
Àn
);

332 
èbÀ
 = 
	`πm_gë_èbÀ
(
r
, 
tb
);

334 i‡(!
	`fûãr_∆msg
(
n
, 
tb
, 
ho°_Àn
))

337 i‡(
fûãr
.
Êushb
) {

338 
∆msghdr
 *
‚
;

339 i‡(
	`NLMSG_ALIGN
(
fûãr
.
Êushp
Ë+ 
n
->
∆msg_Àn
 > fûãr.
Êushe
) {

340 i‡(
	`Êush_upd©e
())

343 
‚
 = (
∆msghdr
*)(
fûãr
.
Êushb
 + 
	`NLMSG_ALIGN
(fûãr.
Êushp
));

344 
	`mem˝y
(
‚
, 
n
,Ç->
∆msg_Àn
);

345 
‚
->
∆msg_ty≥
 = 
RTM_DELROUTE
;

346 
‚
->
∆msg_Êags
 = 
NLM_F_REQUEST
;

347 
‚
->
∆msg_£q
 = ++
πh
.
£q
;

348 
fûãr
.
Êushp
 = (((*)
‚
Ë+ 
n
->
∆msg_Àn
Ë- fûãr.
Êushb
;

349 
fûãr
.
Êushed
++;

350 i‡(
show_°©s
 < 2)

354 i‡(
n
->
∆msg_ty≥
 =
RTM_DELROUTE
)

355 
	`Ârötf
(
Â
, "Deleted ");

356 i‡((
r
->
πm_ty≥
 !
RTN_UNICAST
 || 
show_dëaûs
 > 0Ë&& !
fûãr
.
ty≥
)

357 
	`Ârötf
(
Â
, "%†", 
	`π∆_π¡y≥_n2a
(
r
->
πm_ty≥
, 
b1
, (b1)));

359 i‡(
tb
[
RTA_DST
]) {

360 i‡(
r
->
πm_d°_Àn
 !
ho°_Àn
) {

361 
	`Ârötf
(
Â
, "%s/%u ", 
	`π_addr_n2a
(
r
->
πm_Ámûy
,

362 
	`RTA_PAYLOAD
(
tb
[
RTA_DST
]),

363 
	`RTA_DATA
(
tb
[
RTA_DST
]),

364 
abuf
, (abuf)),

365 
r
->
πm_d°_Àn


368 
	`Ârötf
(
Â
, "%†", 
	`f‹m©_ho°
(
r
->
πm_Ámûy
,

369 
	`RTA_PAYLOAD
(
tb
[
RTA_DST
]),

370 
	`RTA_DATA
(
tb
[
RTA_DST
]),

371 
abuf
, (abuf))

374 } i‡(
r
->
πm_d°_Àn
) {

375 
	`Ârötf
(
Â
, "0/%d ", 
r
->
πm_d°_Àn
);

377 
	`Ârötf
(
Â
, "default ");

379 i‡(
tb
[
RTA_SRC
]) {

380 i‡(
r
->
πm_§c_Àn
 !
ho°_Àn
) {

381 
	`Ârötf
(
Â
, "‰om %s/%u ", 
	`π_addr_n2a
(
r
->
πm_Ámûy
,

382 
	`RTA_PAYLOAD
(
tb
[
RTA_SRC
]),

383 
	`RTA_DATA
(
tb
[
RTA_SRC
]),

384 
abuf
, (abuf)),

385 
r
->
πm_§c_Àn


388 
	`Ârötf
(
Â
, "‰om %†", 
	`f‹m©_ho°
(
r
->
πm_Ámûy
,

389 
	`RTA_PAYLOAD
(
tb
[
RTA_SRC
]),

390 
	`RTA_DATA
(
tb
[
RTA_SRC
]),

391 
abuf
, (abuf))

394 } i‡(
r
->
πm_§c_Àn
) {

395 
	`Ârötf
(
Â
, "‰om 0/%u ", 
r
->
πm_§c_Àn
);

397 i‡(
tb
[
RTA_NEWDST
]) {

398 
	`Ârötf
(
Â
, "a†tÿ%†", 
	`f‹m©_ho°
(
r
->
πm_Ámûy
,

399 
	`RTA_PAYLOAD
(
tb
[
RTA_NEWDST
]),

400 
	`RTA_DATA
(
tb
[
RTA_NEWDST
]),

401 
abuf
, (abuf))

404 i‡(
r
->
πm_tos
 && 
fûãr
.
tosmask
 != -1) {

405 
	`SPRINT_BUF
(
b1
);

406 
	`Ârötf
(
Â
, "to†%†", 
	`π∆_dsfõld_n2a
(
r
->
πm_tos
, 
b1
, (b1)));

409 i‡(
tb
[
RTA_GATEWAY
] && 
fûãr
.
rvü
.
bôÀn
 !
ho°_Àn
) {

410 
	`Ârötf
(
Â
, "via %s ",

411 
	`f‹m©_ho°
(
r
->
πm_Ámûy
,

412 
	`RTA_PAYLOAD
(
tb
[
RTA_GATEWAY
]),

413 
	`RTA_DATA
(
tb
[
RTA_GATEWAY
]),

414 
abuf
, (abuf)));

416 i‡(
tb
[
RTA_VIA
]) {

417 
size_t
 
Àn
 = 
	`RTA_PAYLOAD
(
tb
[
RTA_VIA
]) - 2;

418 
πvü
 *
vü
 = 
	`RTA_DATA
(
tb
[
RTA_VIA
]);

419 
	`Ârötf
(
Â
, "via %s %s ",

420 
	`Ámûy_«me
(
vü
->
πvü_Ámûy
),

421 
	`f‹m©_ho°
(
vü
->
πvü_Ámûy
, 
Àn
, vü->
πvü_addr
,

422 
abuf
, (abuf)));

424 i‡(
tb
[
RTA_OIF
] && 
fûãr
.
oifmask
 != -1)

425 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(*(*)
	`RTA_DATA
(
tb
[
RTA_OIF
])));

427 i‡(!(
r
->
πm_Êags
&
RTM_F_CLONED
)) {

428 i‡((
èbÀ
 !
RT_TABLE_MAIN
 || 
show_dëaûs
 > 0Ë&& !
fûãr
.
tb
)

429 
	`Ârötf
(
Â
, "ÅabÀ %†", 
	`π∆_πèbÀ_n2a
(
èbÀ
, 
b1
, (b1)));

430 i‡((
r
->
πm_¥Ÿocﬁ
 !
RTPROT_BOOT
 || 
show_dëaûs
 > 0Ë&& 
fûãr
.
¥Ÿocﬁmask
 != -1)

431 
	`Ârötf
(
Â
, "ÖrŸÿ%†", 
	`π∆_π¥Ÿ_n2a
(
r
->
πm_¥Ÿocﬁ
, 
b1
, (b1)));

432 i‡((
r
->
πm_sc›e
 !
RT_SCOPE_UNIVERSE
 || 
show_dëaûs
 > 0Ë&& 
fûãr
.
sc›emask
 != -1)

433 
	`Ârötf
(
Â
, " sc›ê%†", 
	`π∆_πsc›e_n2a
(
r
->
πm_sc›e
, 
b1
, (b1)));

435 i‡(
tb
[
RTA_PREFSRC
] && 
fûãr
.
Ωªf§c
.
bôÀn
 !
ho°_Àn
) {

439 
	`Ârötf
(
Â
, " src %s ",

440 
	`π_addr_n2a
(
r
->
πm_Ámûy
,

441 
	`RTA_PAYLOAD
(
tb
[
RTA_PREFSRC
]),

442 
	`RTA_DATA
(
tb
[
RTA_PREFSRC
]),

443 
abuf
, (abuf)));

445 i‡(
tb
[
RTA_PRIORITY
])

446 
	`Ârötf
(
Â
, " mëri¯%u ", 
	`πa_gë©å_u32
(
tb
[
RTA_PRIORITY
]));

447 i‡(
r
->
πm_Êags
 & 
RTNH_F_DEAD
)

448 
	`Ârötf
(
Â
, "dead ");

449 i‡(
r
->
πm_Êags
 & 
RTNH_F_ONLINK
)

450 
	`Ârötf
(
Â
, "onlink ");

451 i‡(
r
->
πm_Êags
 & 
RTNH_F_PERVASIVE
)

452 
	`Ârötf
(
Â
, "pervasive ");

453 i‡(
r
->
πm_Êags
 & 
RTNH_F_OFFLOAD
)

454 
	`Ârötf
(
Â
, "offload ");

455 i‡(
r
->
πm_Êags
 & 
RTM_F_NOTIFY
)

456 
	`Ârötf
(
Â
, "notify ");

457 i‡(
r
->
πm_Êags
 & 
RTNH_F_LINKDOWN
)

458 
	`Ârötf
(
Â
, "linkdown ");

459 i‡(
tb
[
RTA_MARK
]) {

460 
m¨k
 = *(*)
	`RTA_DATA
(
tb
[
RTA_MARK
]);

461 i‡(
m¨k
) {

462 i‡(
m¨k
 >= 16)

463 
	`Ârötf
(
Â
, " m¨k 0x%x", 
m¨k
);

465 
	`Ârötf
(
Â
, " m¨k %u", 
m¨k
);

469 i‡(
tb
[
RTA_FLOW
] && 
fûãr
.
ªÆmmask
 != ~0U) {

470 
__u32
 
to
 = 
	`πa_gë©å_u32
(
tb
[
RTA_FLOW
]);

471 
__u32
 
‰om
 = 
to
>>16;

472 
to
 &= 0xFFFF;

473 
	`Ârötf
(
Â
, "ªÆm%†", 
‰om
 ? "s" : "");

474 i‡(
‰om
) {

475 
	`Ârötf
(
Â
, "%s/",

476 
	`π∆_πªÆm_n2a
(
‰om
, 
b1
, (b1)));

478 
	`Ârötf
(
Â
, "%s ",

479 
	`π∆_πªÆm_n2a
(
to
, 
b1
, (b1)));

481 i‡((
r
->
πm_Êags
&
RTM_F_CLONED
Ë&&Ñ->
πm_Ámûy
 =
AF_INET
) {

482 
__u32
 
Êags
 = 
r
->
πm_Êags
&~0xFFFF;

483 
fú°
 = 1;

485 
	`Ârötf
(
Â
, "%† cachê", 
_SL_
);

487 
	#PRTFL
(
Ê
,
Ê«me
Ëi‡(
Êags
&
RTCF_
##fl) { \

488 
Êags
 &~
RTCF_
##
Ê
; \

489 
	`Ârötf
(
Â
, "%s" 
Ê«me
 "%s", 
fú°
 ? "<" : "", 
Êags
 ? "," : "> "); \

490 
fú°
 = 0; }

	)

491 
	`PRTFL
(
LOCAL
, "local");

492 
	`PRTFL
(
REJECT
, "reject");

493 
	`PRTFL
(
MULTICAST
, "mc");

494 
	`PRTFL
(
BROADCAST
, "brd");

495 
	`PRTFL
(
DNAT
, "dst-nat");

496 
	`PRTFL
(
SNAT
, "src-nat");

497 
	`PRTFL
(
MASQ
, "masq");

498 
	`PRTFL
(
DIRECTDST
, "dst-direct");

499 
	`PRTFL
(
DIRECTSRC
, "src-direct");

500 
	`PRTFL
(
REDIRECTED
, "redirected");

501 
	`PRTFL
(
DOREDIRECT
, "redirect");

502 
	`PRTFL
(
FAST
, "fastroute");

503 
	`PRTFL
(
NOTIFY
, "notify");

504 
	`PRTFL
(
TPROXY
, "proxy");

506 i‡(
Êags
)

507 
	`Ârötf
(
Â
, "%s%x> ", 
fú°
 ? "<" : "", 
Êags
);

508 i‡(
tb
[
RTA_CACHEINFO
]) {

509 
πa_ˇcheöfo
 *
ci
 = 
	`RTA_DATA
(
tb
[
RTA_CACHEINFO
]);

510 i‡(!
hz
)

511 
hz
 = 
	`gë_u£r_hz
();

512 i‡(
ci
->
πa_expúes
 != 0)

513 
	`Ârötf
(
Â
, "Éxpúe†%d£c", 
ci
->
πa_expúes
/
hz
);

514 i‡(
ci
->
πa_îr‹
 != 0)

515 
	`Ârötf
(
Â
, "Éº‹ %d", 
ci
->
πa_îr‹
);

516 i‡(
show_°©s
) {

517 i‡(
ci
->
πa_˛¡ªf
)

518 
	`Ârötf
(
Â
, " u£r†%d", 
ci
->
πa_˛¡ªf
);

519 i‡(
ci
->
πa_u£d
 != 0)

520 
	`Ârötf
(
Â
, " u£d %d", 
ci
->
πa_u£d
);

521 i‡(
ci
->
πa_œ°u£
 != 0)

522 
	`Ârötf
(
Â
, "ágê%d£c", 
ci
->
πa_œ°u£
/
hz
);

524 i‡(
ci
->
πa_id
)

525 
	`Ârötf
(
Â
, " ipid 0x%04x", 
ci
->
πa_id
);

526 i‡(
ci
->
πa_ts
 || ci->
πa_tßge
)

527 
	`Ârötf
(
Â
, "Ås 0x%xÅsage %dsec",

528 
ci
->
πa_ts
, ci->
πa_tßge
);

530 } i‡(
r
->
πm_Ámûy
 =
AF_INET6
) {

531 
πa_ˇcheöfo
 *
ci
 = 
NULL
;

532 i‡(
tb
[
RTA_CACHEINFO
])

533 
ci
 = 
	`RTA_DATA
(
tb
[
RTA_CACHEINFO
]);

534 i‡((
r
->
πm_Êags
 & 
RTM_F_CLONED
Ë|| (
ci
 && ci->
πa_expúes
)) {

535 i‡(!
hz
)

536 
hz
 = 
	`gë_u£r_hz
();

537 i‡(
r
->
πm_Êags
 & 
RTM_F_CLONED
)

538 
	`Ârötf
(
Â
, "%† cachê", 
_SL_
);

539 i‡(
ci
->
πa_expúes
)

540 
	`Ârötf
(
Â
, "Éxpúe†%d£c", 
ci
->
πa_expúes
/
hz
);

541 i‡(
ci
->
πa_îr‹
 != 0)

542 
	`Ârötf
(
Â
, "Éº‹ %d", 
ci
->
πa_îr‹
);

543 i‡(
show_°©s
) {

544 i‡(
ci
->
πa_˛¡ªf
)

545 
	`Ârötf
(
Â
, " u£r†%d", 
ci
->
πa_˛¡ªf
);

546 i‡(
ci
->
πa_u£d
 != 0)

547 
	`Ârötf
(
Â
, " u£d %d", 
ci
->
πa_u£d
);

548 i‡(
ci
->
πa_œ°u£
 != 0)

549 
	`Ârötf
(
Â
, "ágê%d£c", 
ci
->
πa_œ°u£
/
hz
);

551 } i‡(
ci
) {

552 i‡(
ci
->
πa_îr‹
 != 0)

553 
	`Ârötf
(
Â
, "Éº‹ %d", 
ci
->
πa_îr‹
);

556 i‡(
tb
[
RTA_METRICS
]) {

557 
i
;

558 
mxlock
 = 0;

559 
π©å
 *
mxπa
[
RTAX_MAX
+1];

561 
	`∑r£_π©å
(
mxπa
, 
RTAX_MAX
, 
	`RTA_DATA
(
tb
[
RTA_METRICS
]),

562 
	`RTA_PAYLOAD
(
tb
[
RTA_METRICS
]));

563 i‡(
mxπa
[
RTAX_LOCK
])

564 
mxlock
 = *(*)
	`RTA_DATA
(
mxπa
[
RTAX_LOCK
]);

566 
i
=2; i<
RTAX_MAX
; i++) {

567 
__u32
 
vÆ
;

569 i‡(
mxπa
[
i
] =
NULL
)

572 i‡(
i
 < (
mx_«mes
)/(*) && mx_names[i])

573 
	`Ârötf
(
Â
, " %s", 
mx_«mes
[
i
]);

575 
	`Ârötf
(
Â
, " mëri¯%d", 
i
);

577 i‡(
mxlock
 & (1<<
i
))

578 
	`Ârötf
(
Â
, "Üock");

579 i‡(
i
 !
RTAX_CC_ALGO
)

580 
vÆ
 = 
	`πa_gë©å_u32
(
mxπa
[
i
]);

582 
i
) {

583 
RTAX_FEATURES
:

584 
	`¥öt_πax_„©uªs
(
Â
, 
vÆ
);

586 
RTAX_HOPLIMIT
:

587 i‡(()
vÆ
 == -1)

588 
vÆ
 = 0;

591 
	`Ârötf
(
Â
, " %u", 
vÆ
);

594 
RTAX_RTT
:

595 
RTAX_RTTVAR
:

596 
RTAX_RTO_MIN
:

597 i‡(
i
 =
RTAX_RTT
)

598 
vÆ
 /= 8;

599 i‡(
i
 =
RTAX_RTTVAR
)

600 
vÆ
 /= 4;

602 i‡(
vÆ
 >= 1000)

603 
	`Ârötf
(
Â
, " %gs", 
vÆ
/1e3);

605 
	`Ârötf
(
Â
, " %ums", 
vÆ
);

607 
RTAX_CC_ALGO
:

608 
	`Ârötf
(
Â
, " %s", 
	`πa_gë©å_°r
(
mxπa
[
i
]));

613 i‡(
tb
[
RTA_IIF
] && 
fûãr
.
iifmask
 != -1) {

614 
	`Ârötf
(
Â
, " ii‡%s", 
	`Œ_ödex_to_«me
(*(*)
	`RTA_DATA
(
tb
[
RTA_IIF
])));

616 i‡(
tb
[
RTA_MULTIPATH
]) {

617 
π√xth›
 *
nh
 = 
	`RTA_DATA
(
tb
[
RTA_MULTIPATH
]);

618 
fú°
 = 0;

620 
Àn
 = 
	`RTA_PAYLOAD
(
tb
[
RTA_MULTIPATH
]);

623 i‡(
Àn
 < (*
nh
))

625 i‡(
nh
->
πnh_Àn
 > 
Àn
)

627 i‡(
r
->
πm_Êags
&
RTM_F_CLONED
 &&Ñ->
πm_ty≥
 =
RTN_MULTICAST
) {

628 i‡(
fú°
)

629 
	`Ârötf
(
Â
, " Oifs:");

631 
	`Ârötf
(
Â
, " ");

633 
	`Ârötf
(
Â
, "%s\äexth›", 
_SL_
);

634 i‡(
nh
->
πnh_Àn
 > (*nh)) {

635 
	`∑r£_π©å
(
tb
, 
RTA_MAX
, 
	`RTNH_DATA
(
nh
),Çh->
πnh_Àn
 - (*nh));

636 i‡(
tb
[
RTA_GATEWAY
]) {

637 
	`Ârötf
(
Â
, " via %s ",

638 
	`f‹m©_ho°
(
r
->
πm_Ámûy
,

639 
	`RTA_PAYLOAD
(
tb
[
RTA_GATEWAY
]),

640 
	`RTA_DATA
(
tb
[
RTA_GATEWAY
]),

641 
abuf
, (abuf)));

643 i‡(
tb
[
RTA_VIA
]) {

644 
size_t
 
Àn
 = 
	`RTA_PAYLOAD
(
tb
[
RTA_VIA
]) - 2;

645 
πvü
 *
vü
 = 
	`RTA_DATA
(
tb
[
RTA_VIA
]);

646 
	`Ârötf
(
Â
, "via %s %s ",

647 
	`Ámûy_«me
(
vü
->
πvü_Ámûy
),

648 
	`f‹m©_ho°
(
vü
->
πvü_Ámûy
, 
Àn
, vü->
πvü_addr
,

649 
abuf
, (abuf)));

651 i‡(
tb
[
RTA_FLOW
]) {

652 
__u32
 
to
 = 
	`πa_gë©å_u32
(
tb
[
RTA_FLOW
]);

653 
__u32
 
‰om
 = 
to
>>16;

654 
to
 &= 0xFFFF;

655 
	`Ârötf
(
Â
, "Ñólm%†", 
‰om
 ? "s" : "");

656 i‡(
‰om
) {

657 
	`Ârötf
(
Â
, "%s/",

658 
	`π∆_πªÆm_n2a
(
‰om
, 
b1
, (b1)));

660 
	`Ârötf
(
Â
, "%s",

661 
	`π∆_πªÆm_n2a
(
to
, 
b1
, (b1)));

664 i‡(
r
->
πm_Êags
&
RTM_F_CLONED
 &&Ñ->
πm_ty≥
 =
RTN_MULTICAST
) {

665 
	`Ârötf
(
Â
, " %s", 
	`Œ_ödex_to_«me
(
nh
->
πnh_ifödex
));

666 i‡(
nh
->
πnh_h›s
 != 1)

667 
	`Ârötf
(
Â
, "—é>%d)", 
nh
->
πnh_h›s
);

669 
	`Ârötf
(
Â
, " dev %s", 
	`Œ_ödex_to_«me
(
nh
->
πnh_ifödex
));

670 
	`Ârötf
(
Â
, " weighà%d", 
nh
->
πnh_h›s
+1);

672 i‡(
nh
->
πnh_Êags
 & 
RTNH_F_DEAD
)

673 
	`Ârötf
(
Â
, " dead");

674 i‡(
nh
->
πnh_Êags
 & 
RTNH_F_ONLINK
)

675 
	`Ârötf
(
Â
, " onlink");

676 i‡(
nh
->
πnh_Êags
 & 
RTNH_F_PERVASIVE
)

677 
	`Ârötf
(
Â
, "Öervasive");

678 i‡(
nh
->
πnh_Êags
 & 
RTNH_F_LINKDOWN
)

679 
	`Ârötf
(
Â
, "Üinkdown");

680 
Àn
 -
	`NLMSG_ALIGN
(
nh
->
πnh_Àn
);

681 
nh
 = 
	`RTNH_NEXT
(nh);

684 i‡(
tb
[
RTA_PREF
]) {

685 
¥ef
 = 
	`πa_gë©å_u8
(
tb
[
RTA_PREF
]);

686 
	`Ârötf
(
Â
, "Öref ");

688 
¥ef
) {

689 
ICMPV6_ROUTER_PREF_LOW
:

690 
	`Ârötf
(
Â
, "low");

692 
ICMPV6_ROUTER_PREF_MEDIUM
:

693 
	`Ârötf
(
Â
, "medium");

695 
ICMPV6_ROUTER_PREF_HIGH
:

696 
	`Ârötf
(
Â
, "high");

699 
	`Ârötf
(
Â
, "%u", 
¥ef
);

702 
	`Ârötf
(
Â
, "\n");

703 
	`fÊush
(
Â
);

705 
	}
}

708 
	$∑r£_⁄e_nh
(
πmsg
 *
r
, 
π©å
 *
πa
,

709 
π√xth›
 *
πnh
,

710 *
¨g˝
, ***
¨gvp
)

712 
¨gc
 = *
¨g˝
;

713 **
¨gv
 = *
¨gvp
;

715 ++
¨gv
, --
¨gc
 > 0) {

716 i‡(
	`°rcmp
(*
¨gv
, "via") == 0) {

717 
öë_¥efix
 
addr
;

718 
Ámûy
;

719 
	`NEXT_ARG
();

720 
Ámûy
 = 
	`ªad_Ámûy
(*
¨gv
);

721 i‡(
Ámûy
 =
AF_UNSPEC
)

722 
Ámûy
 = 
r
->
πm_Ámûy
;

724 
	`NEXT_ARG
();

725 
	`gë_addr
(&
addr
, *
¨gv
, 
Ámûy
);

726 i‡(
r
->
πm_Ámûy
 =
AF_UNSPEC
)

727 
r
->
πm_Ámûy
 = 
addr
.
Ámûy
;

728 i‡(
addr
.
Ámûy
 =
r
->
πm_Ámûy
) {

729 
	`πa_add©å_l
(
πa
, 4096, 
RTA_GATEWAY
, &
addr
.
d©a
,áddr.
byãÀn
);

730 
πnh
->
πnh_Àn
 +(
π©å
Ë+ 
addr
.
byãÀn
;

732 
	`πa_add©å_l
(
πa
, 4096, 
RTA_VIA
, &
addr
.
Ámûy
,áddr.
byãÀn
+2);

733 
πnh
->
πnh_Àn
 +(
π©å
Ë+ 
addr
.
byãÀn
+2;

735 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

736 
	`NEXT_ARG
();

737 i‡((
πnh
->
πnh_ifödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
)) == 0) {

738 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", *
¨gv
);

739 
	`exô
(1);

741 } i‡(
	`°rcmp
(*
¨gv
, "weight") == 0) {

742 
w
;

743 
	`NEXT_ARG
();

744 i‡(
	`gë_unsig√d
(&
w
, *
¨gv
, 0) || w == 0 || w > 256)

745 
	`öv¨g
("\"weight\" i†övÆid\n", *
¨gv
);

746 
πnh
->
πnh_h›s
 = 
w
 - 1;

747 } i‡(
	`°rcmp
(*
¨gv
, "onlink") == 0) {

748 
πnh
->
πnh_Êags
 |
RTNH_F_ONLINK
;

749 } i‡(
	`m©ches
(*
¨gv
, "realms") == 0) {

750 
__u32
 
ªÆm
;

751 
	`NEXT_ARG
();

752 i‡(
	`gë_π_ªÆms_‹_øw
(&
ªÆm
, *
¨gv
))

753 
	`öv¨g
("\"ªÆm\" vÆuêi†övÆid\n", *
¨gv
);

754 
	`πa_add©å32
(
πa
, 4096, 
RTA_FLOW
, 
ªÆm
);

755 
πnh
->
πnh_Àn
 +(
π©å
) + 4;

759 *
¨g˝
 = 
¨gc
;

760 *
¨gvp
 = 
¨gv
;

762 
	}
}

764 
	$∑r£_√xth›s
(
∆msghdr
 *
n
, 
πmsg
 *
r
,

765 
¨gc
, **
¨gv
)

767 
buf
[1024];

768 
π©å
 *
πa
 = (*)
buf
;

769 
π√xth›
 *
πnh
;

771 
πa
->
πa_ty≥
 = 
RTA_MULTIPATH
;

772 
πa
->
πa_Àn
 = 
	`RTA_LENGTH
(0);

773 
πnh
 = 
	`RTA_DATA
(
πa
);

775 
¨gc
 > 0) {

776 i‡(
	`°rcmp
(*
¨gv
, "nexthop") != 0) {

777 
	`Ârötf
(
°dîr
, "Eº‹: \"√xth›\" o∏íd o‡löêi†ex≥˘ed in°ód o‡\"%s\"\n", *
¨gv
);

778 
	`exô
(-1);

780 i‡(
¨gc
 <= 1) {

781 
	`Ârötf
(
°dîr
, "Error: unexpectedÉnd ofÜineáfter \"nexthop\"\n");

782 
	`exô
(-1);

784 
	`mem£t
(
πnh
, 0, (*rtnh));

785 
πnh
->
πnh_Àn
 = (*rtnh);

786 
πa
->
πa_Àn
 +
πnh
->
πnh_Àn
;

787 
	`∑r£_⁄e_nh
(
r
, 
πa
, 
πnh
, &
¨gc
, &
¨gv
);

788 
πnh
 = 
	`RTNH_NEXT
(rtnh);

791 i‡(
πa
->
πa_Àn
 > 
	`RTA_LENGTH
(0))

792 
	`add©å_l
(
n
, 1024, 
RTA_MULTIPATH
, 
	`RTA_DATA
(
πa
), 
	`RTA_PAYLOAD
(rta));

794 
	}
}

796 
	$ùrouã_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

799 
∆msghdr
 
n
;

800 
πmsg
 
r
;

801 
buf
[1024];

802 } 
ªq
;

803 
mxbuf
[256];

804 
π©å
 * 
mxπa
 = (*)
mxbuf
;

805 
mxlock
 = 0;

806 *
d
 = 
NULL
;

807 
gw_ok
 = 0;

808 
d°_ok
 = 0;

809 
nhs_ok
 = 0;

810 
sc›e_ok
 = 0;

811 
èbÀ_ok
 = 0;

812 
øw
 = 0;

813 
ty≥_ok
 = 0;

815 
	`mem£t
(&
ªq
, 0, (req));

817 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
πmsg
));

818 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

819 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

820 
ªq
.
r
.
πm_Ámûy
 = 
¥e„ºed_Ámûy
;

821 
ªq
.
r
.
πm_èbÀ
 = 
RT_TABLE_MAIN
;

822 
ªq
.
r
.
πm_sc›e
 = 
RT_SCOPE_NOWHERE
;

824 i‡(
cmd
 !
RTM_DELROUTE
) {

825 
ªq
.
r
.
πm_¥Ÿocﬁ
 = 
RTPROT_BOOT
;

826 
ªq
.
r
.
πm_sc›e
 = 
RT_SCOPE_UNIVERSE
;

827 
ªq
.
r
.
πm_ty≥
 = 
RTN_UNICAST
;

830 
mxπa
->
πa_ty≥
 = 
RTA_METRICS
;

831 
mxπa
->
πa_Àn
 = 
	`RTA_LENGTH
(0);

833 
¨gc
 > 0) {

834 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

835 
öë_¥efix
 
addr
;

836 
	`NEXT_ARG
();

837 
	`gë_addr
(&
addr
, *
¨gv
, 
ªq
.
r
.
πm_Ámûy
);

838 i‡(
ªq
.
r
.
πm_Ámûy
 =
AF_UNSPEC
)

839 
ªq
.
r
.
πm_Ámûy
 = 
addr
.
Ámûy
;

840 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
RTA_PREFSRC
, &
addr
.
d©a
,áddr.
byãÀn
);

841 } i‡(
	`°rcmp
(*
¨gv
, "as") == 0) {

842 
öë_¥efix
 
addr
;

843 
	`NEXT_ARG
();

844 i‡(
	`°rcmp
(*
¨gv
, "to") == 0) {

845 
	`NEXT_ARG
();

847 
	`gë_addr
(&
addr
, *
¨gv
, 
ªq
.
r
.
πm_Ámûy
);

848 i‡(
ªq
.
r
.
πm_Ámûy
 =
AF_UNSPEC
)

849 
ªq
.
r
.
πm_Ámûy
 = 
addr
.
Ámûy
;

850 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
RTA_NEWDST
, &
addr
.
d©a
,áddr.
byãÀn
);

851 } i‡(
	`°rcmp
(*
¨gv
, "via") == 0) {

852 
öë_¥efix
 
addr
;

853 
Ámûy
;

854 
gw_ok
 = 1;

855 
	`NEXT_ARG
();

856 
Ámûy
 = 
	`ªad_Ámûy
(*
¨gv
);

857 i‡(
Ámûy
 =
AF_UNSPEC
)

858 
Ámûy
 = 
ªq
.
r
.
πm_Ámûy
;

860 
	`NEXT_ARG
();

861 
	`gë_addr
(&
addr
, *
¨gv
, 
Ámûy
);

862 i‡(
ªq
.
r
.
πm_Ámûy
 =
AF_UNSPEC
)

863 
ªq
.
r
.
πm_Ámûy
 = 
addr
.
Ámûy
;

864 i‡(
addr
.
Ámûy
 =
ªq
.
r
.
πm_Ámûy
)

865 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
RTA_GATEWAY
, &
addr
.
d©a
,áddr.
byãÀn
);

867 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
RTA_VIA
, &
addr
.
Ámûy
,áddr.
byãÀn
+2);

868 } i‡(
	`°rcmp
(*
¨gv
, "from") == 0) {

869 
öë_¥efix
 
addr
;

870 
	`NEXT_ARG
();

871 
	`gë_¥efix
(&
addr
, *
¨gv
, 
ªq
.
r
.
πm_Ámûy
);

872 i‡(
ªq
.
r
.
πm_Ámûy
 =
AF_UNSPEC
)

873 
ªq
.
r
.
πm_Ámûy
 = 
addr
.
Ámûy
;

874 i‡(
addr
.
byãÀn
)

875 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
RTA_SRC
, &
addr
.
d©a
,áddr.
byãÀn
);

876 
ªq
.
r
.
πm_§c_Àn
 = 
addr
.
bôÀn
;

877 } i‡(
	`°rcmp
(*
¨gv
, "tos") == 0 ||

878 
	`m©ches
(*
¨gv
, "dsfield") == 0) {

879 
__u32
 
tos
;

880 
	`NEXT_ARG
();

881 i‡(
	`π∆_dsfõld_a2n
(&
tos
, *
¨gv
))

882 
	`öv¨g
("\"tos\" vÆuêi†övÆid\n", *
¨gv
);

883 
ªq
.
r
.
πm_tos
 = 
tos
;

884 } i‡(
	`m©ches
(*
¨gv
, "metric") == 0 ||

885 
	`m©ches
(*
¨gv
, "priority") == 0 ||

886 
	`°rcmp
(*
¨gv
, "preference") == 0) {

887 
__u32
 
mëric
;

888 
	`NEXT_ARG
();

889 i‡(
	`gë_u32
(&
mëric
, *
¨gv
, 0))

890 
	`öv¨g
("\"mëric\" vÆuêi†övÆid\n", *
¨gv
);

891 
	`add©å32
(&
ªq
.
n
, ‘eq), 
RTA_PRIORITY
, 
mëric
);

892 } i‡(
	`°rcmp
(*
¨gv
, "scope") == 0) {

893 
__u32
 
sc›e
 = 0;

894 
	`NEXT_ARG
();

895 i‡(
	`π∆_πsc›e_a2n
(&
sc›e
, *
¨gv
))

896 
	`öv¨g
("övÆid \"sc›e\" vÆue\n", *
¨gv
);

897 
ªq
.
r
.
πm_sc›e
 = 
sc›e
;

898 
sc›e_ok
 = 1;

899 } i‡(
	`°rcmp
(*
¨gv
, "mtu") == 0) {

900 
mtu
;

901 
	`NEXT_ARG
();

902 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

903 
mxlock
 |(1<<
RTAX_MTU
);

904 
	`NEXT_ARG
();

906 i‡(
	`gë_unsig√d
(&
mtu
, *
¨gv
, 0))

907 
	`öv¨g
("\"mtu\" vÆuêi†övÆid\n", *
¨gv
);

908 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_MTU
, 
mtu
);

909 } i‡(
	`°rcmp
(*
¨gv
, "hoplimit") == 0) {

910 
h›limô
;

911 
	`NEXT_ARG
();

912 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

913 
mxlock
 |(1<<
RTAX_HOPLIMIT
);

914 
	`NEXT_ARG
();

916 i‡(
	`gë_unsig√d
(&
h›limô
, *
¨gv
, 0))

917 
	`öv¨g
("\"h›limô\" vÆuêi†övÆid\n", *
¨gv
);

918 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_HOPLIMIT
, 
h›limô
);

919 } i‡(
	`°rcmp
(*
¨gv
, "advmss") == 0) {

920 
mss
;

921 
	`NEXT_ARG
();

922 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

923 
mxlock
 |(1<<
RTAX_ADVMSS
);

924 
	`NEXT_ARG
();

926 i‡(
	`gë_unsig√d
(&
mss
, *
¨gv
, 0))

927 
	`öv¨g
("\"mss\" vÆuêi†övÆid\n", *
¨gv
);

928 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_ADVMSS
, 
mss
);

929 } i‡(
	`m©ches
(*
¨gv
, "reordering") == 0) {

930 
ª‹d
;

931 
	`NEXT_ARG
();

932 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

933 
mxlock
 |(1<<
RTAX_REORDERING
);

934 
	`NEXT_ARG
();

936 i‡(
	`gë_unsig√d
(&
ª‹d
, *
¨gv
, 0))

937 
	`öv¨g
("\"ª‹dîög\" vÆuêi†övÆid\n", *
¨gv
);

938 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_REORDERING
, 
ª‹d
);

939 } i‡(
	`°rcmp
(*
¨gv
, "rtt") == 0) {

940 
πt
;

941 
	`NEXT_ARG
();

942 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

943 
mxlock
 |(1<<
RTAX_RTT
);

944 
	`NEXT_ARG
();

946 i‡(
	`gë_time_πt
(&
πt
, *
¨gv
, &
øw
))

947 
	`öv¨g
("\"πt\" vÆuêi†övÆid\n", *
¨gv
);

948 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_RTT
,

949 (
øw
Ë? 
πt
 :Ñtt * 8);

950 } i‡(
	`°rcmp
(*
¨gv
, "rto_min") == 0) {

951 
πo_mö
;

952 
	`NEXT_ARG
();

953 
mxlock
 |(1<<
RTAX_RTO_MIN
);

954 i‡(
	`gë_time_πt
(&
πo_mö
, *
¨gv
, &
øw
))

955 
	`öv¨g
("\"rto_min\" value is invalid\n",

956 *
¨gv
);

957 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_RTO_MIN
,

958 
πo_mö
);

959 } i‡(
	`m©ches
(*
¨gv
, "window") == 0) {

960 
wö
;

961 
	`NEXT_ARG
();

962 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

963 
mxlock
 |(1<<
RTAX_WINDOW
);

964 
	`NEXT_ARG
();

966 i‡(
	`gë_unsig√d
(&
wö
, *
¨gv
, 0))

967 
	`öv¨g
("\"wödow\" vÆuêi†övÆid\n", *
¨gv
);

968 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_WINDOW
, 
wö
);

969 } i‡(
	`m©ches
(*
¨gv
, "cwnd") == 0) {

970 
wö
;

971 
	`NEXT_ARG
();

972 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

973 
mxlock
 |(1<<
RTAX_CWND
);

974 
	`NEXT_ARG
();

976 i‡(
	`gë_unsig√d
(&
wö
, *
¨gv
, 0))

977 
	`öv¨g
("\"cwnd\" vÆuêi†övÆid\n", *
¨gv
);

978 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_CWND
, 
wö
);

979 } i‡(
	`m©ches
(*
¨gv
, "initcwnd") == 0) {

980 
wö
;

981 
	`NEXT_ARG
();

982 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

983 
mxlock
 |(1<<
RTAX_INITCWND
);

984 
	`NEXT_ARG
();

986 i‡(
	`gë_unsig√d
(&
wö
, *
¨gv
, 0))

987 
	`öv¨g
("\"öôcwnd\" vÆuêi†övÆid\n", *
¨gv
);

988 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_INITCWND
, 
wö
);

989 } i‡(
	`m©ches
(*
¨gv
, "initrwnd") == 0) {

990 
wö
;

991 
	`NEXT_ARG
();

992 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

993 
mxlock
 |(1<<
RTAX_INITRWND
);

994 
	`NEXT_ARG
();

996 i‡(
	`gë_unsig√d
(&
wö
, *
¨gv
, 0))

997 
	`öv¨g
("\"öôrwnd\" vÆuêi†övÆid\n", *
¨gv
);

998 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_INITRWND
, 
wö
);

999 } i‡(
	`m©ches
(*
¨gv
, "features") == 0) {

1000 
„©uªs
 = 0;

1002 
¨gc
 > 0) {

1003 
	`NEXT_ARG
();

1005 i‡(
	`°rcmp
(*
¨gv
, "ecn") == 0)

1006 
„©uªs
 |
RTAX_FEATURE_ECN
;

1008 
	`öv¨g
("\"„©uªs\" vÆuênŸ vÆid\n", *
¨gv
);

1012 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_FEATURES
, 
„©uªs
);

1013 } i‡(
	`m©ches
(*
¨gv
, "quickack") == 0) {

1014 
quickack
;

1015 
	`NEXT_ARG
();

1016 i‡(
	`gë_unsig√d
(&
quickack
, *
¨gv
, 0))

1017 
	`öv¨g
("\"quickack\" vÆuêi†övÆid\n", *
¨gv
);

1018 i‡(
quickack
 != 1 && quickack != 0)

1019 
	`öv¨g
("\"quickack\" vÆuêshould bê0 o∏1\n", *
¨gv
);

1020 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_QUICKACK
, 
quickack
);

1021 } i‡(
	`m©ches
(*
¨gv
, "congctl") == 0) {

1022 
	`NEXT_ARG
();

1023 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

1024 
mxlock
 |1 << 
RTAX_CC_ALGO
;

1025 
	`NEXT_ARG
();

1027 
	`πa_add©å_l
(
mxπa
, (
mxbuf
), 
RTAX_CC_ALGO
, *
¨gv
,

1028 
	`°æí
(*
¨gv
));

1029 } i‡(
	`m©ches
(*
¨gv
, "rttvar") == 0) {

1030 
wö
;

1031 
	`NEXT_ARG
();

1032 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

1033 
mxlock
 |(1<<
RTAX_RTTVAR
);

1034 
	`NEXT_ARG
();

1036 i‡(
	`gë_time_πt
(&
wö
, *
¨gv
, &
øw
))

1037 
	`öv¨g
("\"πtv¨\" vÆuêi†övÆid\n", *
¨gv
);

1038 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_RTTVAR
,

1039 (
øw
Ë? 
wö
 : win * 4);

1040 } i‡(
	`m©ches
(*
¨gv
, "ssthresh") == 0) {

1041 
wö
;

1042 
	`NEXT_ARG
();

1043 i‡(
	`°rcmp
(*
¨gv
, "lock") == 0) {

1044 
mxlock
 |(1<<
RTAX_SSTHRESH
);

1045 
	`NEXT_ARG
();

1047 i‡(
	`gë_unsig√d
(&
wö
, *
¨gv
, 0))

1048 
	`öv¨g
("\"s°hªsh\" vÆuêi†övÆid\n", *
¨gv
);

1049 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_SSTHRESH
, 
wö
);

1050 } i‡(
	`m©ches
(*
¨gv
, "realms") == 0) {

1051 
__u32
 
ªÆm
;

1052 
	`NEXT_ARG
();

1053 i‡(
	`gë_π_ªÆms_‹_øw
(&
ªÆm
, *
¨gv
))

1054 
	`öv¨g
("\"ªÆm\" vÆuêi†övÆid\n", *
¨gv
);

1055 
	`add©å32
(&
ªq
.
n
, ‘eq), 
RTA_FLOW
, 
ªÆm
);

1056 } i‡(
	`°rcmp
(*
¨gv
, "onlink") == 0) {

1057 
ªq
.
r
.
πm_Êags
 |
RTNH_F_ONLINK
;

1058 } i‡(
	`°rcmp
(*
¨gv
, "nexthop") == 0) {

1059 
nhs_ok
 = 1;

1061 } i‡(
	`m©ches
(*
¨gv
, "protocol") == 0) {

1062 
__u32
 
¥Ÿ
;

1063 
	`NEXT_ARG
();

1064 i‡(
	`π∆_π¥Ÿ_a2n
(&
¥Ÿ
, *
¨gv
))

1065 
	`öv¨g
("\"¥Ÿocﬁ\" vÆuêi†övÆid\n", *
¨gv
);

1066 
ªq
.
r
.
πm_¥Ÿocﬁ
 = 
¥Ÿ
;

1067 } i‡(
	`m©ches
(*
¨gv
, "table") == 0) {

1068 
__u32
 
tid
;

1069 
	`NEXT_ARG
();

1070 i‡(
	`π∆_πèbÀ_a2n
(&
tid
, *
¨gv
))

1071 
	`öv¨g
("\"èbÀ\" vÆuêi†övÆid\n", *
¨gv
);

1072 i‡(
tid
 < 256)

1073 
ªq
.
r
.
πm_èbÀ
 = 
tid
;

1075 
ªq
.
r
.
πm_èbÀ
 = 
RT_TABLE_UNSPEC
;

1076 
	`add©å32
(&
ªq
.
n
, ‘eq), 
RTA_TABLE
, 
tid
);

1078 
èbÀ_ok
 = 1;

1079 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0 ||

1080 
	`°rcmp
(*
¨gv
, "oif") == 0) {

1081 
	`NEXT_ARG
();

1082 
d
 = *
¨gv
;

1083 } i‡(
	`m©ches
(*
¨gv
, "pref") == 0) {

1084 
__u8
 
¥ef
;

1085 
	`NEXT_ARG
();

1086 i‡(
	`°rcmp
(*
¨gv
, "low") == 0)

1087 
¥ef
 = 
ICMPV6_ROUTER_PREF_LOW
;

1088 i‡(
	`°rcmp
(*
¨gv
, "medium") == 0)

1089 
¥ef
 = 
ICMPV6_ROUTER_PREF_MEDIUM
;

1090 i‡(
	`°rcmp
(*
¨gv
, "high") == 0)

1091 
¥ef
 = 
ICMPV6_ROUTER_PREF_HIGH
;

1092 i‡(
	`gë_u8
(&
¥ef
, *
¨gv
, 0))

1093 
	`öv¨g
("\"¥ef\" vÆuêi†övÆid\n", *
¨gv
);

1094 
	`add©å8
(&
ªq
.
n
, ‘eq), 
RTA_PREF
, 
¥ef
);

1096 
ty≥
;

1097 
öë_¥efix
 
d°
;

1099 i‡(
	`°rcmp
(*
¨gv
, "to") == 0) {

1100 
	`NEXT_ARG
();

1102 i‡((**
¨gv
 < '0' || **argv > '9') &&

1103 
	`π∆_π¡y≥_a2n
(&
ty≥
, *
¨gv
) == 0) {

1104 
	`NEXT_ARG
();

1105 
ªq
.
r
.
πm_ty≥
 = 
ty≥
;

1106 
ty≥_ok
 = 1;

1109 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

1110 
	`ußge
();

1111 i‡(
d°_ok
)

1112 
	`du∑rg2
("to", *
¨gv
);

1113 
	`gë_¥efix
(&
d°
, *
¨gv
, 
ªq
.
r
.
πm_Ámûy
);

1114 i‡(
ªq
.
r
.
πm_Ámûy
 =
AF_UNSPEC
)

1115 
ªq
.
r
.
πm_Ámûy
 = 
d°
.
Ámûy
;

1116 
ªq
.
r
.
πm_d°_Àn
 = 
d°
.
bôÀn
;

1117 
d°_ok
 = 1;

1118 i‡(
d°
.
byãÀn
)

1119 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
RTA_DST
, &
d°
.
d©a
, d°.
byãÀn
);

1121 
¨gc
--; 
¨gv
++;

1124 i‡(!
d°_ok
)

1125 
	`ußge
();

1127 i‡(
d
 || 
nhs_ok
) {

1128 
idx
;

1130 i‡(
d
) {

1131 i‡((
idx
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

1132 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

1135 
	`add©å32
(&
ªq
.
n
, ‘eq), 
RTA_OIF
, 
idx
);

1139 i‡(
mxπa
->
πa_Àn
 > 
	`RTA_LENGTH
(0)) {

1140 i‡(
mxlock
)

1141 
	`πa_add©å32
(
mxπa
, (
mxbuf
), 
RTAX_LOCK
, 
mxlock
);

1142 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
RTA_METRICS
, 
	`RTA_DATA
(
mxπa
), 
	`RTA_PAYLOAD
(mxrta));

1145 i‡(
nhs_ok
)

1146 
	`∑r£_√xth›s
(&
ªq
.
n
, &ªq.
r
, 
¨gc
, 
¨gv
);

1148 i‡(
ªq
.
r
.
πm_Ámûy
 =
AF_UNSPEC
)

1149 
ªq
.
r
.
πm_Ámûy
 = 
AF_INET
;

1151 i‡(!
èbÀ_ok
) {

1152 i‡(
ªq
.
r
.
πm_ty≥
 =
RTN_LOCAL
 ||

1153 
ªq
.
r
.
πm_ty≥
 =
RTN_BROADCAST
 ||

1154 
ªq
.
r
.
πm_ty≥
 =
RTN_NAT
 ||

1155 
ªq
.
r
.
πm_ty≥
 =
RTN_ANYCAST
)

1156 
ªq
.
r
.
πm_èbÀ
 = 
RT_TABLE_LOCAL
;

1158 i‡(!
sc›e_ok
) {

1159 i‡(
ªq
.
r
.
πm_Ámûy
 =
AF_INET6
 ||

1160 
ªq
.
r
.
πm_Ámûy
 =
AF_MPLS
)

1161 
ªq
.
r
.
πm_sc›e
 = 
RT_SCOPE_UNIVERSE
;

1162 i‡(
ªq
.
r
.
πm_ty≥
 =
RTN_LOCAL
 ||

1163 
ªq
.
r
.
πm_ty≥
 =
RTN_NAT
)

1164 
ªq
.
r
.
πm_sc›e
 = 
RT_SCOPE_HOST
;

1165 i‡(
ªq
.
r
.
πm_ty≥
 =
RTN_BROADCAST
 ||

1166 
ªq
.
r
.
πm_ty≥
 =
RTN_MULTICAST
 ||

1167 
ªq
.
r
.
πm_ty≥
 =
RTN_ANYCAST
)

1168 
ªq
.
r
.
πm_sc›e
 = 
RT_SCOPE_LINK
;

1169 i‡(
ªq
.
r
.
πm_ty≥
 =
RTN_UNICAST
 ||

1170 
ªq
.
r
.
πm_ty≥
 =
RTN_UNSPEC
) {

1171 i‡(
cmd
 =
RTM_DELROUTE
)

1172 
ªq
.
r
.
πm_sc›e
 = 
RT_SCOPE_NOWHERE
;

1173 i‡(!
gw_ok
 && !
nhs_ok
)

1174 
ªq
.
r
.
πm_sc›e
 = 
RT_SCOPE_LINK
;

1178 i‡(!
ty≥_ok
 && 
ªq
.
r
.
πm_Ámûy
 =
AF_MPLS
)

1179 
ªq
.
r
.
πm_ty≥
 = 
RTN_UNICAST
;

1181 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

1185 
	}
}

1187 
	$π∆_πˇche_ªque°
(
π∆_h™dÀ
 *
πh
, 
Ámûy
)

1190 
∆msghdr
 
∆h
;

1191 
πmsg
 
πm
;

1192 } 
ªq
;

1193 
sockaddr_∆
 
∆addr
;

1195 
	`mem£t
(&
∆addr
, 0, (nladdr));

1196 
	`mem£t
(&
ªq
, 0, (req));

1197 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

1199 
ªq
.
∆h
.
∆msg_Àn
 = (req);

1200 
ªq
.
∆h
.
∆msg_ty≥
 = 
RTM_GETROUTE
;

1201 
ªq
.
∆h
.
∆msg_Êags
 = 
NLM_F_ROOT
|
NLM_F_REQUEST
;

1202 
ªq
.
∆h
.
∆msg_pid
 = 0;

1203 
ªq
.
∆h
.
∆msg_£q
 = 
πh
->
dump
 = ++πh->
£q
;

1204 
ªq
.
πm
.
πm_Ámûy
 = 
Ámûy
;

1205 
ªq
.
πm
.
πm_Êags
 |
RTM_F_CLONED
;

1207  
	`£ndto
(
πh
->
fd
, (*)&
ªq
, ‘eq), 0, (
sockaddr
*)&
∆addr
, (nladdr));

1208 
	}
}

1210 
	$ùrouã_Êush_ˇche
()

1212 
	#ROUTE_FLUSH_PATH
 "/¥oc/sys/√t/ùv4/rouã/Êush"

	)

1214 
Àn
;

1215 
Êush_fd
 = 
	`›í
 (
ROUTE_FLUSH_PATH
, 
O_WRONLY
);

1216 *
buf„r
 = "-1";

1218 i‡(
Êush_fd
 < 0) {

1219 
	`Ârötf
 (
°dîr
, "Cannot open \"%s\": %s\n",

1220 
ROUTE_FLUSH_PATH
, 
	`°ªº‹
(
î∫o
));

1224 
Àn
 = 
	`°æí
 (
buf„r
);

1226 i‡((
	`wrôe
 (
Êush_fd
, (*)
buf„r
, 
Àn
)) <Üen) {

1227 
	`Ârötf
 (
°dîr
, "Cannot flushÑouting cache\n");

1228 
	`˛o£
(
Êush_fd
);

1231 
	`˛o£
(
Êush_fd
);

1233 
	}
}

1235 
__u32
 
	grouã_dump_magic
 = 0x45311224;

1237 
	$ßve_rouã
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
,

1238 *
¨g
)

1240 
ªt
;

1241 
Àn
 = 
n
->
∆msg_Àn
;

1242 
πmsg
 *
r
 = 
	`NLMSG_DATA
(
n
);

1243 
π©å
 *
tb
[
RTA_MAX
+1];

1244 
ho°_Àn
;

1246 
ho°_Àn
 = 
	`af_bô_Àn
(
r
->
πm_Ámûy
);

1247 
Àn
 -
	`NLMSG_LENGTH
((*
r
));

1248 
	`∑r£_π©å
(
tb
, 
RTA_MAX
, 
	`RTM_RTA
(
r
), 
Àn
);

1250 i‡(!
	`fûãr_∆msg
(
n
, 
tb
, 
ho°_Àn
))

1253 
ªt
 = 
	`wrôe
(
STDOUT_FILENO
, 
n
,Ç->
∆msg_Àn
);

1254 i‡((
ªt
 > 0Ë&& (ªà!
n
->
∆msg_Àn
)) {

1255 
	`Ârötf
(
°dîr
, "Short write while savingÇlmsg\n");

1256 
ªt
 = -
EIO
;

1259  
ªt
 =
n
->
∆msg_Àn
 ? 0 :Ñet;

1260 
	}
}

1262 
	$ßve_rouã_¥ï
()

1264 
ªt
;

1266 i‡(
	`ißây
(
STDOUT_FILENO
)) {

1267 
	`Ârötf
(
°dîr
, "Not sendingá binary streamÅo stdout\n");

1271 
ªt
 = 
	`wrôe
(
STDOUT_FILENO
, &
rouã_dump_magic
, (route_dump_magic));

1272 i‡(
ªt
 !(
rouã_dump_magic
)) {

1273 
	`Ârötf
(
°dîr
, "Can't write magicÅo dump file\n");

1278 
	}
}

1280 
	$ùrouã_li°_Êush_‹_ßve
(
¨gc
, **
¨gv
, 
a˘i⁄
)

1282 
do_ùv6
 = 
¥e„ºed_Ámûy
;

1283 *
id
 = 
NULL
;

1284 *
od
 = 
NULL
;

1285 
m¨k
 = 0;

1286 
π∆_fûãr_t
 
fûãr_‚
;

1288 i‡(
a˘i⁄
 =
IPROUTE_SAVE
) {

1289 i‡(
	`ßve_rouã_¥ï
())

1292 
fûãr_‚
 = 
ßve_rouã
;

1294 
fûãr_‚
 = 
¥öt_rouã
;

1296 
	`ùrouã_ª£t_fûãr
(0);

1297 
fûãr
.
tb
 = 
RT_TABLE_MAIN
;

1299 i‡((
a˘i⁄
 =
IPROUTE_FLUSH
Ë&& 
¨gc
 <= 0) {

1300 
	`Ârötf
(
°dîr
, "\"ipÑoute flush\"Ñequiresárguments.\n");

1304 
¨gc
 > 0) {

1305 i‡(
	`m©ches
(*
¨gv
, "table") == 0) {

1306 
__u32
 
tid
;

1307 
	`NEXT_ARG
();

1308 i‡(
	`π∆_πèbÀ_a2n
(&
tid
, *
¨gv
)) {

1309 i‡(
	`°rcmp
(*
¨gv
, "all") == 0) {

1310 
fûãr
.
tb
 = 0;

1311 } i‡(
	`°rcmp
(*
¨gv
, "cache") == 0) {

1312 
fûãr
.
˛⁄ed
 = 1;

1313 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

1314 
	`ußge
();

1316 
	`öv¨g
("èbÀ id vÆuêi†övÆid\n", *
¨gv
);

1319 
fûãr
.
tb
 = 
tid
;

1320 } i‡(
	`m©ches
(*
¨gv
, "cached") == 0 ||

1321 
	`m©ches
(*
¨gv
, "cloned") == 0) {

1322 
fûãr
.
˛⁄ed
 = 1;

1323 } i‡(
	`°rcmp
(*
¨gv
, "tos") == 0 ||

1324 
	`m©ches
(*
¨gv
, "dsfield") == 0) {

1325 
__u32
 
tos
;

1326 
	`NEXT_ARG
();

1327 i‡(
	`π∆_dsfõld_a2n
(&
tos
, *
¨gv
))

1328 
	`öv¨g
("TOS vÆuêi†övÆid\n", *
¨gv
);

1329 
fûãr
.
tos
 =Åos;

1330 
fûãr
.
tosmask
 = -1;

1331 } i‡(
	`m©ches
(*
¨gv
, "protocol") == 0) {

1332 
__u32
 
¥Ÿ
 = 0;

1333 
	`NEXT_ARG
();

1334 
fûãr
.
¥Ÿocﬁmask
 = -1;

1335 i‡(
	`π∆_π¥Ÿ_a2n
(&
¥Ÿ
, *
¨gv
)) {

1336 i‡(
	`°rcmp
(*
¨gv
, "all") != 0)

1337 
	`öv¨g
("övÆid \"¥Ÿocﬁ\"\n", *
¨gv
);

1338 
¥Ÿ
 = 0;

1339 
fûãr
.
¥Ÿocﬁmask
 = 0;

1341 
fûãr
.
¥Ÿocﬁ
 = 
¥Ÿ
;

1342 } i‡(
	`m©ches
(*
¨gv
, "scope") == 0) {

1343 
__u32
 
sc›e
 = 0;

1344 
	`NEXT_ARG
();

1345 
fûãr
.
sc›emask
 = -1;

1346 i‡(
	`π∆_πsc›e_a2n
(&
sc›e
, *
¨gv
)) {

1347 i‡(
	`°rcmp
(*
¨gv
, "all") != 0)

1348 
	`öv¨g
("övÆid \"sc›e\"\n", *
¨gv
);

1349 
sc›e
 = 
RT_SCOPE_NOWHERE
;

1350 
fûãr
.
sc›emask
 = 0;

1352 
fûãr
.
sc›e
 = scope;

1353 } i‡(
	`m©ches
(*
¨gv
, "type") == 0) {

1354 
ty≥
;

1355 
	`NEXT_ARG
();

1356 
fûãr
.
ty≥mask
 = -1;

1357 i‡(
	`π∆_π¡y≥_a2n
(&
ty≥
, *
¨gv
))

1358 
	`öv¨g
("nodêty≥ vÆuêi†övÆid\n", *
¨gv
);

1359 
fûãr
.
ty≥
 =Åype;

1360 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0 ||

1361 
	`°rcmp
(*
¨gv
, "oif") == 0) {

1362 
	`NEXT_ARG
();

1363 
od
 = *
¨gv
;

1364 } i‡(
	`°rcmp
(*
¨gv
, "iif") == 0) {

1365 
	`NEXT_ARG
();

1366 
id
 = *
¨gv
;

1367 } i‡(
	`°rcmp
(*
¨gv
, "mark") == 0) {

1368 
	`NEXT_ARG
();

1369 
	`gë_unsig√d
(&
m¨k
, *
¨gv
, 0);

1370 
fûãr
.
m¨kmask
 = -1;

1371 } i‡(
	`°rcmp
(*
¨gv
, "via") == 0) {

1372 
Ámûy
;

1373 
	`NEXT_ARG
();

1374 
Ámûy
 = 
	`ªad_Ámûy
(*
¨gv
);

1375 i‡(
Ámûy
 =
AF_UNSPEC
)

1376 
Ámûy
 = 
do_ùv6
;

1378 
	`NEXT_ARG
();

1379 
	`gë_¥efix
(&
fûãr
.
rvü
, *
¨gv
, 
Ámûy
);

1380 } i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

1381 
	`NEXT_ARG
();

1382 
	`gë_¥efix
(&
fûãr
.
Ωªf§c
, *
¨gv
, 
do_ùv6
);

1383 } i‡(
	`m©ches
(*
¨gv
, "realms") == 0) {

1384 
__u32
 
ªÆm
;

1385 
	`NEXT_ARG
();

1386 i‡(
	`gë_π_ªÆms_‹_øw
(&
ªÆm
, *
¨gv
))

1387 
	`öv¨g
("övÆidÑólms\n", *
¨gv
);

1388 
fûãr
.
ªÆm
 =Ñealm;

1389 
fûãr
.
ªÆmmask
 = ~0U;

1390 i‡((
fûãr
.
ªÆm
&0xFFFF) == 0 &&

1391 (*
¨gv
)[
	`°æí
(*argv) - 1] == '/')

1392 
fûãr
.
ªÆmmask
 &= ~0xFFFF;

1393 i‡((
fûãr
.
ªÆm
&0xFFFF0000U) == 0 &&

1394 (
	`°rchr
(*
¨gv
, '/'Ë=
NULL
 ||

1395 (*
¨gv
)[0] == '/'))

1396 
fûãr
.
ªÆmmask
 &= ~0xFFFF0000U;

1397 } i‡(
	`m©ches
(*
¨gv
, "from") == 0) {

1398 
	`NEXT_ARG
();

1399 i‡(
	`m©ches
(*
¨gv
, "root") == 0) {

1400 
	`NEXT_ARG
();

1401 
	`gë_¥efix
(&
fûãr
.
r§c
, *
¨gv
, 
do_ùv6
);

1402 } i‡(
	`m©ches
(*
¨gv
, "match") == 0) {

1403 
	`NEXT_ARG
();

1404 
	`gë_¥efix
(&
fûãr
.
m§c
, *
¨gv
, 
do_ùv6
);

1406 i‡(
	`m©ches
(*
¨gv
, "exact") == 0) {

1407 
	`NEXT_ARG
();

1409 
	`gë_¥efix
(&
fûãr
.
m§c
, *
¨gv
, 
do_ùv6
);

1410 
fûãr
.
r§c
 = fûãr.
m§c
;

1413 i‡(
	`m©ches
(*
¨gv
, "to") == 0) {

1414 
	`NEXT_ARG
();

1416 i‡(
	`m©ches
(*
¨gv
, "root") == 0) {

1417 
	`NEXT_ARG
();

1418 
	`gë_¥efix
(&
fûãr
.
rd°
, *
¨gv
, 
do_ùv6
);

1419 } i‡(
	`m©ches
(*
¨gv
, "match") == 0) {

1420 
	`NEXT_ARG
();

1421 
	`gë_¥efix
(&
fûãr
.
md°
, *
¨gv
, 
do_ùv6
);

1423 i‡(
	`m©ches
(*
¨gv
, "exact") == 0) {

1424 
	`NEXT_ARG
();

1426 
	`gë_¥efix
(&
fûãr
.
md°
, *
¨gv
, 
do_ùv6
);

1427 
fûãr
.
rd°
 = fûãr.
md°
;

1430 
¨gc
--; 
¨gv
++;

1433 i‡(
do_ùv6
 =
AF_UNSPEC
 && 
fûãr
.
tb
)

1434 
do_ùv6
 = 
AF_INET
;

1436 i‡(
id
 || 
od
) {

1437 
idx
;

1439 i‡(
id
) {

1440 i‡((
idx
 = 
	`Œ_«me_to_ödex
(
id
)) == 0) {

1441 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
id
);

1444 
fûãr
.
iif
 = 
idx
;

1445 
fûãr
.
iifmask
 = -1;

1447 i‡(
od
) {

1448 i‡((
idx
 = 
	`Œ_«me_to_ödex
(
od
)) == 0) {

1449 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
od
);

1452 
fûãr
.
oif
 = 
idx
;

1453 
fûãr
.
oifmask
 = -1;

1456 
fûãr
.
m¨k
 = mark;

1458 i‡(
a˘i⁄
 =
IPROUTE_FLUSH
) {

1459 
round
 = 0;

1460 
Êushb
[4096-512];

1461 
time_t
 
°¨t
 = 
	`time
(0);

1463 i‡(
fûãr
.
˛⁄ed
) {

1464 i‡(
do_ùv6
 !
AF_INET6
) {

1465 
	`ùrouã_Êush_ˇche
();

1466 i‡(
show_°©s
)

1467 
	`¥ötf
("*** IPv4Ñouting cache is flushed.\n");

1469 i‡(
do_ùv6
 =
AF_INET
)

1473 
fûãr
.
Êushb
 = flushb;

1474 
fûãr
.
Êushp
 = 0;

1475 
fûãr
.
Êushe
 = (
Êushb
);

1478 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
do_ùv6
, 
RTM_GETROUTE
) < 0) {

1479 
	`≥º‹
("Cannot send dumpÑequest");

1480 
	`exô
(1);

1482 
fûãr
.
Êushed
 = 0;

1483 i‡(
	`π∆_dump_fûãr
(&
πh
, 
fûãr_‚
, 
°dout
) < 0) {

1484 
	`Ârötf
(
°dîr
, "FlushÅerminated\n");

1485 
	`exô
(1);

1487 i‡(
fûãr
.
Êushed
 == 0) {

1488 i‡(
show_°©s
) {

1489 i‡(
round
 =0 && (!
fûãr
.
˛⁄ed
 || 
do_ùv6
 =
AF_INET6
))

1490 
	`¥ötf
("NothingÅo flush.\n");

1492 
	`¥ötf
("*** Flush i†com∂ëêa·î %dÑound%†***\n", 
round
,Ñound>1?"s":"");

1494 
	`fÊush
(
°dout
);

1497 
round
++;

1498 i‡(
	`Êush_upd©e
() < 0)

1499 
	`exô
(1);

1501 i‡(
	`time
(0Ë- 
°¨t
 > 30) {

1502 
	`¥ötf
("\n*** FlushÇot completedáfter %ld seconds, %dÉntriesÑemain ***\n",

1503 ()(
	`time
(0Ë- 
°¨t
), 
fûãr
.
Êushed
);

1504 
	`exô
(1);

1507 i‡(
show_°©s
) {

1508 
	`¥ötf
("\n*** Round %d, dñëög %dÉ¡rõ†***\n", 
round
, 
fûãr
.
Êushed
);

1509 
	`fÊush
(
°dout
);

1514 i‡(!
fûãr
.
˛⁄ed
) {

1515 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
do_ùv6
, 
RTM_GETROUTE
) < 0) {

1516 
	`≥º‹
("Cannot send dumpÑequest");

1517 
	`exô
(1);

1520 i‡(
	`π∆_πˇche_ªque°
(&
πh
, 
do_ùv6
) < 0) {

1521 
	`≥º‹
("Cannot send dumpÑequest");

1522 
	`exô
(1);

1526 i‡(
	`π∆_dump_fûãr
(&
πh
, 
fûãr_‚
, 
°dout
) < 0) {

1527 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

1528 
	`exô
(1);

1531 
	`exô
(0);

1532 
	}
}

1535 
	$ùrouã_gë
(
¨gc
, **
¨gv
)

1538 
∆msghdr
 
n
;

1539 
πmsg
 
r
;

1540 
buf
[1024];

1541 } 
ªq
;

1542 *
idev
 = 
NULL
;

1543 *
odev
 = 
NULL
;

1544 
c⁄√˘ed
 = 0;

1545 
‰om_ok
 = 0;

1546 
m¨k
 = 0;

1548 
	`mem£t
(&
ªq
, 0, (req));

1550 
	`ùrouã_ª£t_fûãr
(0);

1551 
fûãr
.
˛⁄ed
 = 2;

1553 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
πmsg
));

1554 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

1555 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETROUTE
;

1556 
ªq
.
r
.
πm_Ámûy
 = 
¥e„ºed_Ámûy
;

1557 
ªq
.
r
.
πm_èbÀ
 = 0;

1558 
ªq
.
r
.
πm_¥Ÿocﬁ
 = 0;

1559 
ªq
.
r
.
πm_sc›e
 = 0;

1560 
ªq
.
r
.
πm_ty≥
 = 0;

1561 
ªq
.
r
.
πm_§c_Àn
 = 0;

1562 
ªq
.
r
.
πm_d°_Àn
 = 0;

1563 
ªq
.
r
.
πm_tos
 = 0;

1565 
¨gc
 > 0) {

1566 i‡(
	`°rcmp
(*
¨gv
, "tos") == 0 ||

1567 
	`m©ches
(*
¨gv
, "dsfield") == 0) {

1568 
__u32
 
tos
;

1569 
	`NEXT_ARG
();

1570 i‡(
	`π∆_dsfõld_a2n
(&
tos
, *
¨gv
))

1571 
	`öv¨g
("TOS vÆuêi†övÆid\n", *
¨gv
);

1572 
ªq
.
r
.
πm_tos
 = 
tos
;

1573 } i‡(
	`m©ches
(*
¨gv
, "from") == 0) {

1574 
öë_¥efix
 
addr
;

1575 
	`NEXT_ARG
();

1576 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

1577 
	`ußge
();

1578 
‰om_ok
 = 1;

1579 
	`gë_¥efix
(&
addr
, *
¨gv
, 
ªq
.
r
.
πm_Ámûy
);

1580 i‡(
ªq
.
r
.
πm_Ámûy
 =
AF_UNSPEC
)

1581 
ªq
.
r
.
πm_Ámûy
 = 
addr
.
Ámûy
;

1582 i‡(
addr
.
byãÀn
)

1583 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
RTA_SRC
, &
addr
.
d©a
,áddr.
byãÀn
);

1584 
ªq
.
r
.
πm_§c_Àn
 = 
addr
.
bôÀn
;

1585 } i‡(
	`m©ches
(*
¨gv
, "iif") == 0) {

1586 
	`NEXT_ARG
();

1587 
idev
 = *
¨gv
;

1588 } i‡(
	`m©ches
(*
¨gv
, "mark") == 0) {

1589 
	`NEXT_ARG
();

1590 
	`gë_unsig√d
(&
m¨k
, *
¨gv
, 0);

1591 } i‡(
	`m©ches
(*
¨gv
, "oif") == 0 ||

1592 
	`°rcmp
(*
¨gv
, "dev") == 0) {

1593 
	`NEXT_ARG
();

1594 
odev
 = *
¨gv
;

1595 } i‡(
	`m©ches
(*
¨gv
, "notify") == 0) {

1596 
ªq
.
r
.
πm_Êags
 |
RTM_F_NOTIFY
;

1597 } i‡(
	`m©ches
(*
¨gv
, "connected") == 0) {

1598 
c⁄√˘ed
 = 1;

1600 
öë_¥efix
 
addr
;

1601 i‡(
	`°rcmp
(*
¨gv
, "to") == 0) {

1602 
	`NEXT_ARG
();

1604 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

1605 
	`ußge
();

1606 
	`gë_¥efix
(&
addr
, *
¨gv
, 
ªq
.
r
.
πm_Ámûy
);

1607 i‡(
ªq
.
r
.
πm_Ámûy
 =
AF_UNSPEC
)

1608 
ªq
.
r
.
πm_Ámûy
 = 
addr
.
Ámûy
;

1609 i‡(
addr
.
byãÀn
)

1610 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
RTA_DST
, &
addr
.
d©a
,áddr.
byãÀn
);

1611 
ªq
.
r
.
πm_d°_Àn
 = 
addr
.
bôÀn
;

1613 
¨gc
--; 
¨gv
++;

1616 i‡(
ªq
.
r
.
πm_d°_Àn
 == 0) {

1617 
	`Ârötf
(
°dîr
, "needátÜeastá destinationáddress\n");

1618 
	`exô
(1);

1621 i‡(
idev
 || 
odev
) {

1622 
idx
;

1624 i‡(
idev
) {

1625 i‡((
idx
 = 
	`Œ_«me_to_ödex
(
idev
)) == 0) {

1626 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
idev
);

1629 
	`add©å32
(&
ªq
.
n
, ‘eq), 
RTA_IIF
, 
idx
);

1631 i‡(
odev
) {

1632 i‡((
idx
 = 
	`Œ_«me_to_ödex
(
odev
)) == 0) {

1633 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
odev
);

1636 
	`add©å32
(&
ªq
.
n
, ‘eq), 
RTA_OIF
, 
idx
);

1639 i‡(
m¨k
)

1640 
	`add©å32
(&
ªq
.
n
, ‘eq), 
RTA_MARK
, 
m¨k
);

1642 i‡(
ªq
.
r
.
πm_Ámûy
 =
AF_UNSPEC
)

1643 
ªq
.
r
.
πm_Ámûy
 = 
AF_INET
;

1645 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, &req.n, (req)) < 0)

1648 i‡(
c⁄√˘ed
 && !
‰om_ok
) {

1649 
πmsg
 *
r
 = 
	`NLMSG_DATA
(&
ªq
.
n
);

1650 
Àn
 = 
ªq
.
n
.
∆msg_Àn
;

1651 
π©å
 * 
tb
[
RTA_MAX
+1];

1653 i‡(
	`¥öt_rouã
(
NULL
, &
ªq
.
n
, (*)
°dout
) < 0) {

1654 
	`Ârötf
(
°dîr
, "AnÉrror :-)\n");

1655 
	`exô
(1);

1658 i‡(
ªq
.
n
.
∆msg_ty≥
 !
RTM_NEWROUTE
) {

1659 
	`Ârötf
(
°dîr
, "NotáÑoute?\n");

1662 
Àn
 -
	`NLMSG_LENGTH
((*
r
));

1663 i‡(
Àn
 < 0) {

1664 
	`Ârötf
(
°dîr
, "Wr⁄gÜí %d\n", 
Àn
);

1668 
	`∑r£_π©å
(
tb
, 
RTA_MAX
, 
	`RTM_RTA
(
r
), 
Àn
);

1670 i‡(
tb
[
RTA_PREFSRC
]) {

1671 
tb
[
RTA_PREFSRC
]->
πa_ty≥
 = 
RTA_SRC
;

1672 
r
->
πm_§c_Àn
 = 8*
	`RTA_PAYLOAD
(
tb
[
RTA_PREFSRC
]);

1673 } i‡(!
tb
[
RTA_SRC
]) {

1674 
	`Ârötf
(
°dîr
, "FailedÅo connectÅheÑoute\n");

1677 i‡(!
odev
 && 
tb
[
RTA_OIF
])

1678 
tb
[
RTA_OIF
]->
πa_ty≥
 = 0;

1679 i‡(
tb
[
RTA_GATEWAY
])

1680 
tb
[
RTA_GATEWAY
]->
πa_ty≥
 = 0;

1681 i‡(
tb
[
RTA_VIA
])

1682 
tb
[
RTA_VIA
]->
πa_ty≥
 = 0;

1683 i‡(!
idev
 && 
tb
[
RTA_IIF
])

1684 
tb
[
RTA_IIF
]->
πa_ty≥
 = 0;

1685 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

1686 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETROUTE
;

1688 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, &req.n, (req)) < 0)

1692 i‡(
	`¥öt_rouã
(
NULL
, &
ªq
.
n
, (*)
°dout
) < 0) {

1693 
	`Ârötf
(
°dîr
, "AnÉrror :-)\n");

1698 
	}
}

1700 
	$ª°‹e_h™dÀr
(c⁄° 
sockaddr_∆
 *
∆
,

1701 
π∆_˘æ_d©a
 *
˘æ
,

1702 
∆msghdr
 *
n
, *
¨g
)

1704 
ªt
;

1706 
n
->
∆msg_Êags
 |
NLM_F_REQUEST
 | 
NLM_F_CREATE
 | 
NLM_F_ACK
;

1708 
	`Œ_öô_m≠
(&
πh
);

1710 
ªt
 = 
	`π∆_èlk
(&
πh
, 
n
,Ç, (*n));

1711 i‡((
ªt
 < 0Ë&& (
î∫o
 =
EEXIST
))

1712 
ªt
 = 0;

1714  
ªt
;

1715 
	}
}

1717 
	$rouã_dump_check_magic
()

1719 
ªt
;

1720 
__u32
 
magic
 = 0;

1722 i‡(
	`ißây
(
STDIN_FILENO
)) {

1723 
	`Ârötf
(
°dîr
, "Can'tÑestoreÑoute dump fromáÅerminal\n");

1727 
ªt
 = 
	`‰ód
(&
magic
, (magic), 1, 
°dö
);

1728 i‡(
magic
 !
rouã_dump_magic
) {

1729 
	`Ârötf
(
°dîr
, "Magi¯mism©ch (%dÉÀms, %x magic)\n", 
ªt
, 
magic
);

1734 
	}
}

1736 
	$ùrouã_ª°‹e
()

1738 i‡(
	`rouã_dump_check_magic
())

1739 
	`exô
(-1);

1741 
	`exô
(
	`π∆_‰om_fûe
(
°dö
, &
ª°‹e_h™dÀr
, 
NULL
));

1742 
	}
}

1744 
	$show_h™dÀr
(c⁄° 
sockaddr_∆
 *
∆
,

1745 
π∆_˘æ_d©a
 *
˘æ
,

1746 
∆msghdr
 *
n
, *
¨g
)

1748 
	`¥öt_rouã
(
∆
, 
n
, 
°dout
);

1750 
	}
}

1752 
	$ùrouã_showdump
()

1754 i‡(
	`rouã_dump_check_magic
())

1755 
	`exô
(-1);

1757 
	`exô
(
	`π∆_‰om_fûe
(
°dö
, &
show_h™dÀr
, 
NULL
));

1758 
	}
}

1760 
	$ùrouã_ª£t_fûãr
(
ifödex
)

1762 
	`mem£t
(&
fûãr
, 0, (filter));

1763 
fûãr
.
md°
.
bôÀn
 = -1;

1764 
fûãr
.
m§c
.
bôÀn
 = -1;

1765 
fûãr
.
oif
 = 
ifödex
;

1766 i‡(
fûãr
.
oif
 > 0)

1767 
fûãr
.
oifmask
 = -1;

1768 
	}
}

1770 
	$do_ùrouã
(
¨gc
, **
¨gv
)

1772 i‡(
¨gc
 < 1)

1773  
	`ùrouã_li°_Êush_‹_ßve
(0, 
NULL
, 
IPROUTE_LIST
);

1775 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

1776  
	`ùrouã_modify
(
RTM_NEWROUTE
, 
NLM_F_CREATE
|
NLM_F_EXCL
,

1777 
¨gc
-1, 
¨gv
+1);

1778 i‡(
	`m©ches
(*
¨gv
, "ch™ge"Ë=0 || 
	`°rcmp
(*argv, "chg") == 0)

1779  
	`ùrouã_modify
(
RTM_NEWROUTE
, 
NLM_F_REPLACE
,

1780 
¨gc
-1, 
¨gv
+1);

1781 i‡(
	`m©ches
(*
¨gv
, "replace") == 0)

1782  
	`ùrouã_modify
(
RTM_NEWROUTE
, 
NLM_F_CREATE
|
NLM_F_REPLACE
,

1783 
¨gc
-1, 
¨gv
+1);

1784 i‡(
	`m©ches
(*
¨gv
, "prepend") == 0)

1785  
	`ùrouã_modify
(
RTM_NEWROUTE
, 
NLM_F_CREATE
,

1786 
¨gc
-1, 
¨gv
+1);

1787 i‡(
	`m©ches
(*
¨gv
, "append") == 0)

1788  
	`ùrouã_modify
(
RTM_NEWROUTE
, 
NLM_F_CREATE
|
NLM_F_APPEND
,

1789 
¨gc
-1, 
¨gv
+1);

1790 i‡(
	`m©ches
(*
¨gv
, "test") == 0)

1791  
	`ùrouã_modify
(
RTM_NEWROUTE
, 
NLM_F_EXCL
,

1792 
¨gc
-1, 
¨gv
+1);

1793 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

1794  
	`ùrouã_modify
(
RTM_DELROUTE
, 0,

1795 
¨gc
-1, 
¨gv
+1);

1796 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

1797 || 
	`m©ches
(*
¨gv
, "lst") == 0)

1798  
	`ùrouã_li°_Êush_‹_ßve
(
¨gc
-1, 
¨gv
+1, 
IPROUTE_LIST
);

1799 i‡(
	`m©ches
(*
¨gv
, "get") == 0)

1800  
	`ùrouã_gë
(
¨gc
-1, 
¨gv
+1);

1801 i‡(
	`m©ches
(*
¨gv
, "flush") == 0)

1802  
	`ùrouã_li°_Êush_‹_ßve
(
¨gc
-1, 
¨gv
+1, 
IPROUTE_FLUSH
);

1803 i‡(
	`m©ches
(*
¨gv
, "save") == 0)

1804  
	`ùrouã_li°_Êush_‹_ßve
(
¨gc
-1, 
¨gv
+1, 
IPROUTE_SAVE
);

1805 i‡(
	`m©ches
(*
¨gv
, "restore") == 0)

1806  
	`ùrouã_ª°‹e
();

1807 i‡(
	`m©ches
(*
¨gv
, "showdump") == 0)

1808  
	`ùrouã_showdump
();

1809 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

1810 
	`ußge
();

1811 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ùÑouã hñp\".\n", *
¨gv
);

1812 
	`exô
(-1);

1813 
	}
}

	@ip/iprule.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<√töë/ù.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

23 
	~<löux/fib_ruÀs.h
>

24 
	~<î∫o.h
>

26 
	~"π_«mes.h
"

27 
	~"utûs.h
"

28 
	~"ù_comm⁄.h
"

30 
π∆_h™dÀ
 
πh
;

32 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
, "Usage: ipÑule [Üist |ádd | del | flush | save ] SELECTOR ACTION\n");

37 
	`Ârötf
(
°dîr
, " ipÑuleÑestore\n");

38 
	`Ârötf
(
°dîr
, "SELECTOR := [Çot ] [ from PREFIX ] [Åo PREFIX ] [Åos TOS ] [ fwmark FWMARK[/MASK] ]\n");

39 
	`Ârötf
(
°dîr
, " [ iif STRING ] [ oif STRING ] [Öref NUMBER ]\n");

40 
	`Ârötf
(
°dîr
, "ACTION := [Åable TABLE_ID ]\n");

41 
	`Ârötf
(
°dîr
, " [Ñealms [SRCREALM/]DSTREALM ]\n");

42 
	`Ârötf
(
°dîr
, " [ goto NUMBER ]\n");

43 
	`Ârötf
(
°dîr
, " SUPPRESSOR\n");

44 
	`Ârötf
(
°dîr
, "SUPPRESSOR := [ suppress_prefixlength NUMBER ]\n");

45 
	`Ârötf
(
°dîr
, " [ suppress_ifgroup DEVGROUP ]\n");

46 
	`Ârötf
(
°dîr
, "TABLE_ID := [Üocal | main | default | NUMBER ]\n");

47 
	`exô
(-1);

48 
	}
}

50 
	$¥öt_ruÀ
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

52 
FILE
 *
Â
 = (FILE*)
¨g
;

53 
πmsg
 *
r
 = 
	`NLMSG_DATA
(
n
);

54 
Àn
 = 
n
->
∆msg_Àn
;

55 
ho°_Àn
 = -1;

56 
__u32
 
èbÀ
;

57 
π©å
 * 
tb
[
FRA_MAX
+1];

58 
abuf
[256];

59 
	`SPRINT_BUF
(
b1
);

61 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWRULE
 &&Ç->∆msg_ty≥ !
RTM_DELRULE
)

64 
Àn
 -
	`NLMSG_LENGTH
((*
r
));

65 i‡(
Àn
 < 0)

68 
	`∑r£_π©å
(
tb
, 
FRA_MAX
, 
	`RTM_RTA
(
r
), 
Àn
);

70 
ho°_Àn
 = 
	`af_bô_Àn
(
r
->
πm_Ámûy
);

72 i‡(
n
->
∆msg_ty≥
 =
RTM_DELRULE
)

73 
	`Ârötf
(
Â
, "Deleted ");

75 i‡(
tb
[
FRA_PRIORITY
])

76 
	`Ârötf
(
Â
, "%u:\t", *(*)
	`RTA_DATA
(
tb
[
FRA_PRIORITY
]));

78 
	`Ârötf
(
Â
, "0:\t");

80 i‡(
r
->
πm_Êags
 & 
FIB_RULE_INVERT
)

81 
	`Ârötf
(
Â
, "not ");

83 i‡(
tb
[
FRA_SRC
]) {

84 i‡(
r
->
πm_§c_Àn
 !
ho°_Àn
) {

85 
	`Ârötf
(
Â
, "‰om %s/%u ", 
	`π_addr_n2a
(
r
->
πm_Ámûy
,

86 
	`RTA_PAYLOAD
(
tb
[
FRA_SRC
]),

87 
	`RTA_DATA
(
tb
[
FRA_SRC
]),

88 
abuf
, (abuf)),

89 
r
->
πm_§c_Àn


92 
	`Ârötf
(
Â
, "‰om %†", 
	`f‹m©_ho°
(
r
->
πm_Ámûy
,

93 
	`RTA_PAYLOAD
(
tb
[
FRA_SRC
]),

94 
	`RTA_DATA
(
tb
[
FRA_SRC
]),

95 
abuf
, (abuf))

98 } i‡(
r
->
πm_§c_Àn
) {

99 
	`Ârötf
(
Â
, "‰om 0/%d ", 
r
->
πm_§c_Àn
);

101 
	`Ârötf
(
Â
, "fromáll ");

104 i‡(
tb
[
FRA_DST
]) {

105 i‡(
r
->
πm_d°_Àn
 !
ho°_Àn
) {

106 
	`Ârötf
(
Â
, "tÿ%s/%u ", 
	`π_addr_n2a
(
r
->
πm_Ámûy
,

107 
	`RTA_PAYLOAD
(
tb
[
FRA_DST
]),

108 
	`RTA_DATA
(
tb
[
FRA_DST
]),

109 
abuf
, (abuf)),

110 
r
->
πm_d°_Àn


113 
	`Ârötf
(
Â
, "tÿ%†", 
	`f‹m©_ho°
(
r
->
πm_Ámûy
,

114 
	`RTA_PAYLOAD
(
tb
[
FRA_DST
]),

115 
	`RTA_DATA
(
tb
[
FRA_DST
]),

116 
abuf
, (abuf)));

118 } i‡(
r
->
πm_d°_Àn
) {

119 
	`Ârötf
(
Â
, "tÿ0/%d ", 
r
->
πm_d°_Àn
);

122 i‡(
r
->
πm_tos
) {

123 
	`SPRINT_BUF
(
b1
);

124 
	`Ârötf
(
Â
, "to†%†", 
	`π∆_dsfõld_n2a
(
r
->
πm_tos
, 
b1
, (b1)));

127 i‡(
tb
[
FRA_FWMARK
] ||Åb[
FRA_FWMASK
]) {

128 
__u32
 
m¨k
 = 0, 
mask
 = 0;

130 i‡(
tb
[
FRA_FWMARK
])

131 
m¨k
 = 
	`πa_gë©å_u32
(
tb
[
FRA_FWMARK
]);

133 i‡(
tb
[
FRA_FWMASK
] &&

134 (
mask
 = 
	`πa_gë©å_u32
(
tb
[
FRA_FWMASK
])) != 0xFFFFFFFF)

135 
	`Ârötf
(
Â
, "fwm¨k 0x%x/0x%x ", 
m¨k
, 
mask
);

137 
	`Ârötf
(
Â
, "fwm¨k 0x%x ", 
m¨k
);

140 i‡(
tb
[
FRA_IFNAME
]) {

141 
	`Ârötf
(
Â
, "ii‡%†", 
	`πa_gë©å_°r
(
tb
[
FRA_IFNAME
]));

142 i‡(
r
->
πm_Êags
 & 
FIB_RULE_IIF_DETACHED
)

143 
	`Ârötf
(
Â
, "[detached] ");

146 i‡(
tb
[
FRA_OIFNAME
]) {

147 
	`Ârötf
(
Â
, "oi‡%†", 
	`πa_gë©å_°r
(
tb
[
FRA_OIFNAME
]));

148 i‡(
r
->
πm_Êags
 & 
FIB_RULE_OIF_DETACHED
)

149 
	`Ârötf
(
Â
, "[detached] ");

152 
èbÀ
 = 
	`πm_gë_èbÀ
(
r
, 
tb
);

153 i‡(
èbÀ
) {

154 
	`Ârötf
(
Â
, "looku∞%†", 
	`π∆_πèbÀ_n2a
(
èbÀ
, 
b1
, (b1)));

156 i‡(
tb
[
FRA_SUPPRESS_PREFIXLEN
]) {

157 
∂
 = 
	`πa_gë©å_u32
(
tb
[
FRA_SUPPRESS_PREFIXLEN
]);

158 i‡(
∂
 != -1) {

159 
	`Ârötf
(
Â
, "suµªss_¥efixÀngth %d ", 
∂
);

162 i‡(
tb
[
FRA_SUPPRESS_IFGROUP
]) {

163 
group
 = 
	`πa_gë©å_u32
(
tb
[
FRA_SUPPRESS_IFGROUP
]);

164 i‡(
group
 != -1) {

165 
	`SPRINT_BUF
(
b1
);

166 
	`Ârötf
(
Â
, "suµªss_ifgrou∞%†", 
	`π∆_group_n2a
(
group
, 
b1
, (b1)));

171 i‡(
tb
[
FRA_FLOW
]) {

172 
__u32
 
to
 = 
	`πa_gë©å_u32
(
tb
[
FRA_FLOW
]);

173 
__u32
 
‰om
 = 
to
>>16;

174 
to
 &= 0xFFFF;

175 i‡(
‰om
) {

176 
	`Ârötf
(
Â
, "realms %s/",

177 
	`π∆_πªÆm_n2a
(
‰om
, 
b1
, (b1)));

179 
	`Ârötf
(
Â
, "%s ",

180 
	`π∆_πªÆm_n2a
(
to
, 
b1
, (b1)));

183 i‡(
r
->
πm_ty≥
 =
RTN_NAT
) {

184 i‡(
tb
[
RTA_GATEWAY
]) {

185 
	`Ârötf
(
Â
, "map-to %s ",

186 
	`f‹m©_ho°
(
r
->
πm_Ámûy
,

187 
	`RTA_PAYLOAD
(
tb
[
RTA_GATEWAY
]),

188 
	`RTA_DATA
(
tb
[
RTA_GATEWAY
]),

189 
abuf
, (abuf)));

191 
	`Ârötf
(
Â
, "masquerade");

192 } i‡(
r
->
πm_ty≥
 =
FR_ACT_GOTO
) {

193 
	`Ârötf
(
Â
, "goto ");

194 i‡(
tb
[
FRA_GOTO
])

195 
	`Ârötf
(
Â
, "%u", 
	`πa_gë©å_u32
(
tb
[
FRA_GOTO
]));

197 
	`Ârötf
(
Â
, "none");

198 i‡(
r
->
πm_Êags
 & 
FIB_RULE_UNRESOLVED
)

199 
	`Ârötf
(
Â
, " [unresolved]");

200 } i‡(
r
->
πm_ty≥
 =
FR_ACT_NOP
)

201 
	`Ârötf
(
Â
, "nop");

202 i‡(
r
->
πm_ty≥
 !
RTN_UNICAST
)

203 
	`Ârötf
(
Â
, "%s", 
	`π∆_π¡y≥_n2a
(
r
->
πm_ty≥
, 
b1
, (b1)));

205 
	`Ârötf
(
Â
, "\n");

206 
	`fÊush
(
Â
);

208 
	}
}

210 
__u32
 
	gruÀ_dump_magic
 = 0x71706986;

212 
	$ßve_ruÀ_¥ï
()

214 
ªt
;

216 i‡(
	`ißây
(
STDOUT_FILENO
)) {

217 
	`Ârötf
(
°dîr
, "Not sendingá binary streamÅo stdout\n");

221 
ªt
 = 
	`wrôe
(
STDOUT_FILENO
, &
ruÀ_dump_magic
, (rule_dump_magic));

222 i‡(
ªt
 !(
ruÀ_dump_magic
)) {

223 
	`Ârötf
(
°dîr
, "Can't write magicÅo dump file\n");

228 
	}
}

230 
	$ßve_ruÀ
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

232 
ªt
;

234 
ªt
 = 
	`wrôe
(
STDOUT_FILENO
, 
n
,Ç->
∆msg_Àn
);

235 i‡((
ªt
 > 0Ë&& (ªà!
n
->
∆msg_Àn
)) {

236 
	`Ârötf
(
°dîr
, "Short write while savingÇlmsg\n");

237 
ªt
 = -
EIO
;

240  
ªt
 =
n
->
∆msg_Àn
 ? 0 :Ñet;

241 
	}
}

243 
	$ùruÀ_li°_‹_ßve
(
¨gc
, **
¨gv
, 
ßve
)

245 
π∆_fûãr_t
 
fûãr
 = 
¥öt_ruÀ
;

246 
af
 = 
¥e„ºed_Ámûy
;

248 i‡(
af
 =
AF_UNSPEC
)

249 
af
 = 
AF_INET
;

251 i‡(
¨gc
 > 0) {

252 
	`Ârötf
(
°dîr
, "\"ipÑule %s\" doesÇotÅakeányárguments.\n",

253 
ßve
 ? "save" : "show");

257 i‡(
ßve
) {

258 i‡(
	`ßve_ruÀ_¥ï
())

260 
fûãr
 = 
ßve_ruÀ
;

263 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
af
, 
RTM_GETRULE
) < 0) {

264 
	`≥º‹
("Cannot send dumpÑequest");

268 i‡(
	`π∆_dump_fûãr
(&
πh
, 
fûãr
, 
°dout
) < 0) {

269 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

274 
	}
}

276 
	$ruÀ_dump_check_magic
()

278 
ªt
;

279 
__u32
 
magic
 = 0;

281 i‡(
	`ißây
(
STDIN_FILENO
)) {

282 
	`Ârötf
(
°dîr
, "Can'tÑestoreÑule dump fromáÅerminal\n");

286 
ªt
 = 
	`‰ód
(&
magic
, (magic), 1, 
°dö
);

287 i‡(
magic
 !
ruÀ_dump_magic
) {

288 
	`Ârötf
(
°dîr
, "Magi¯mism©ch (%dÉÀms, %x magic)\n", 
ªt
, 
magic
);

293 
	}
}

295 
	$ª°‹e_h™dÀr
(c⁄° 
sockaddr_∆
 *
∆
,

296 
π∆_˘æ_d©a
 *
˘æ
,

297 
∆msghdr
 *
n
, *
¨g
)

299 
ªt
;

301 
n
->
∆msg_Êags
 |
NLM_F_REQUEST
 | 
NLM_F_CREATE
 | 
NLM_F_ACK
;

303 
	`Œ_öô_m≠
(&
πh
);

305 
ªt
 = 
	`π∆_èlk
(&
πh
, 
n
,Ç, (*n));

306 i‡((
ªt
 < 0Ë&& (
î∫o
 =
EEXIST
))

307 
ªt
 = 0;

309  
ªt
;

310 
	}
}

313 
	$ùruÀ_ª°‹e
()

315 i‡(
	`ruÀ_dump_check_magic
())

316 
	`exô
(-1);

318 
	`exô
(
	`π∆_‰om_fûe
(
°dö
, &
ª°‹e_h™dÀr
, 
NULL
));

319 
	}
}

321 
	$ùruÀ_modify
(
cmd
, 
¨gc
, **
¨gv
)

323 
èbÀ_ok
 = 0;

325 
∆msghdr
 
n
;

326 
πmsg
 
r
;

327 
buf
[1024];

328 } 
ªq
;

330 
	`mem£t
(&
ªq
, 0, (req));

332 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

333 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
πmsg
));

334 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

335 
ªq
.
r
.
πm_Ámûy
 = 
¥e„ºed_Ámûy
;

336 
ªq
.
r
.
πm_¥Ÿocﬁ
 = 
RTPROT_BOOT
;

337 
ªq
.
r
.
πm_sc›e
 = 
RT_SCOPE_UNIVERSE
;

338 
ªq
.
r
.
πm_èbÀ
 = 0;

339 
ªq
.
r
.
πm_ty≥
 = 
RTN_UNSPEC
;

340 
ªq
.
r
.
πm_Êags
 = 0;

342 i‡(
cmd
 =
RTM_NEWRULE
) {

343 
ªq
.
n
.
∆msg_Êags
 |
NLM_F_CREATE
|
NLM_F_EXCL
;

344 
ªq
.
r
.
πm_ty≥
 = 
RTN_UNICAST
;

347 
¨gc
 > 0) {

348 i‡(
	`°rcmp
(*
¨gv
, "not") == 0) {

349 
ªq
.
r
.
πm_Êags
 |
FIB_RULE_INVERT
;

350 } i‡(
	`°rcmp
(*
¨gv
, "from") == 0) {

351 
öë_¥efix
 
d°
;

352 
	`NEXT_ARG
();

353 
	`gë_¥efix
(&
d°
, *
¨gv
, 
ªq
.
r
.
πm_Ámûy
);

354 
ªq
.
r
.
πm_§c_Àn
 = 
d°
.
bôÀn
;

355 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
FRA_SRC
, &
d°
.
d©a
, d°.
byãÀn
);

356 } i‡(
	`°rcmp
(*
¨gv
, "to") == 0) {

357 
öë_¥efix
 
d°
;

358 
	`NEXT_ARG
();

359 
	`gë_¥efix
(&
d°
, *
¨gv
, 
ªq
.
r
.
πm_Ámûy
);

360 
ªq
.
r
.
πm_d°_Àn
 = 
d°
.
bôÀn
;

361 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
FRA_DST
, &
d°
.
d©a
, d°.
byãÀn
);

362 } i‡(
	`m©ches
(*
¨gv
, "preference") == 0 ||

363 
	`m©ches
(*
¨gv
, "order") == 0 ||

364 
	`m©ches
(*
¨gv
, "priority") == 0) {

365 
__u32
 
¥ef
;

366 
	`NEXT_ARG
();

367 i‡(
	`gë_u32
(&
¥ef
, *
¨gv
, 0))

368 
	`öv¨g
("¥e„ªn˚ vÆuêi†övÆid\n", *
¨gv
);

369 
	`add©å32
(&
ªq
.
n
, ‘eq), 
FRA_PRIORITY
, 
¥ef
);

370 } i‡(
	`°rcmp
(*
¨gv
, "tos") == 0 ||

371 
	`m©ches
(*
¨gv
, "dsfield") == 0) {

372 
__u32
 
tos
;

373 
	`NEXT_ARG
();

374 i‡(
	`π∆_dsfõld_a2n
(&
tos
, *
¨gv
))

375 
	`öv¨g
("TOS vÆuêi†övÆid\n", *
¨gv
);

376 
ªq
.
r
.
πm_tos
 = 
tos
;

377 } i‡(
	`°rcmp
(*
¨gv
, "fwmark") == 0) {

378 *
¶ash
;

379 
__u32
 
fwm¨k
, 
fwmask
;

380 
	`NEXT_ARG
();

381 i‡((
¶ash
 = 
	`°rchr
(*
¨gv
, '/')Ë!
NULL
)

382 *
¶ash
 = '\0';

383 i‡(
	`gë_u32
(&
fwm¨k
, *
¨gv
, 0))

384 
	`öv¨g
("fwm¨k vÆuêi†övÆid\n", *
¨gv
);

385 
	`add©å32
(&
ªq
.
n
, ‘eq), 
FRA_FWMARK
, 
fwm¨k
);

386 i‡(
¶ash
) {

387 i‡(
	`gë_u32
(&
fwmask
, 
¶ash
+1, 0))

388 
	`öv¨g
("fwmask vÆuêi†övÆid\n", 
¶ash
+1);

389 
	`add©å32
(&
ªq
.
n
, ‘eq), 
FRA_FWMASK
, 
fwmask
);

391 } i‡(
	`m©ches
(*
¨gv
, "realms") == 0) {

392 
__u32
 
ªÆm
;

393 
	`NEXT_ARG
();

394 i‡(
	`gë_π_ªÆms_‹_øw
(&
ªÆm
, *
¨gv
))

395 
	`öv¨g
("övÆidÑólms\n", *
¨gv
);

396 
	`add©å32
(&
ªq
.
n
, ‘eq), 
FRA_FLOW
, 
ªÆm
);

397 } i‡(
	`m©ches
(*
¨gv
, "table") == 0 ||

398 
	`°rcmp
(*
¨gv
, "lookup") == 0) {

399 
__u32
 
tid
;

400 
	`NEXT_ARG
();

401 i‡(
	`π∆_πèbÀ_a2n
(&
tid
, *
¨gv
))

402 
	`öv¨g
("övÆidÅabÀ ID\n", *
¨gv
);

403 i‡(
tid
 < 256)

404 
ªq
.
r
.
πm_èbÀ
 = 
tid
;

406 
ªq
.
r
.
πm_èbÀ
 = 
RT_TABLE_UNSPEC
;

407 
	`add©å32
(&
ªq
.
n
, ‘eq), 
FRA_TABLE
, 
tid
);

409 
èbÀ_ok
 = 1;

410 } i‡(
	`m©ches
(*
¨gv
, "suppress_prefixlength") == 0 ||

411 
	`°rcmp
(*
¨gv
, "sup_pl") == 0) {

412 
∂
;

413 
	`NEXT_ARG
();

414 i‡(
	`gë_s32
(&
∂
, *
¨gv
, 0) ||Öl < 0)

415 
	`öv¨g
("suµªss_¥efixÀngth vÆuêi†övÆid\n", *
¨gv
);

416 
	`add©å32
(&
ªq
.
n
, ‘eq), 
FRA_SUPPRESS_PREFIXLEN
, 
∂
);

417 } i‡(
	`m©ches
(*
¨gv
, "suppress_ifgroup") == 0 ||

418 
	`°rcmp
(*
¨gv
, "sup_group") == 0) {

419 
	`NEXT_ARG
();

420 
group
;

421 i‡(
	`π∆_group_a2n
(&
group
, *
¨gv
))

422 
	`öv¨g
("InvÆid \"suµªss_ifgroup\" vÆue\n", *
¨gv
);

423 
	`add©å32
(&
ªq
.
n
, ‘eq), 
FRA_SUPPRESS_IFGROUP
, 
group
);

424 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0 ||

425 
	`°rcmp
(*
¨gv
, "iif") == 0) {

426 
	`NEXT_ARG
();

427 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
FRA_IFNAME
, *
¨gv
, 
	`°æí
(*argv)+1);

428 } i‡(
	`°rcmp
(*
¨gv
, "oif") == 0) {

429 
	`NEXT_ARG
();

430 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
FRA_OIFNAME
, *
¨gv
, 
	`°æí
(*argv)+1);

431 } i‡(
	`°rcmp
(*
¨gv
, "nat") == 0 ||

432 
	`m©ches
(*
¨gv
, "map-to") == 0) {

433 
	`NEXT_ARG
();

434 
	`Ârötf
(
°dîr
, "Warning:Ñoute NAT is deprecated\n");

435 
	`add©å32
(&
ªq
.
n
, ‘eq), 
RTA_GATEWAY
, 
	`gë_addr32
(*
¨gv
));

436 
ªq
.
r
.
πm_ty≥
 = 
RTN_NAT
;

438 
ty≥
;

440 i‡(
	`°rcmp
(*
¨gv
, "type") == 0) {

441 
	`NEXT_ARG
();

443 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

444 
	`ußge
();

445 i‡(
	`m©ches
(*
¨gv
, "goto") == 0) {

446 
__u32
 
èrgë
;

447 
ty≥
 = 
FR_ACT_GOTO
;

448 
	`NEXT_ARG
();

449 i‡(
	`gë_u32
(&
èrgë
, *
¨gv
, 0))

450 
	`öv¨g
("övÆidÅ¨gë\n", *
¨gv
);

451 
	`add©å32
(&
ªq
.
n
, ‘eq), 
FRA_GOTO
, 
èrgë
);

452 } i‡(
	`m©ches
(*
¨gv
, "nop") == 0)

453 
ty≥
 = 
FR_ACT_NOP
;

454 i‡(
	`π∆_π¡y≥_a2n
(&
ty≥
, *
¨gv
))

455 
	`öv¨g
("FaûedÅÿ∑r£ÑuÀÅy≥", *
¨gv
);

456 
ªq
.
r
.
πm_ty≥
 = 
ty≥
;

457 
èbÀ_ok
 = 1;

459 
¨gc
--;

460 
¨gv
++;

463 i‡(
ªq
.
r
.
πm_Ámûy
 =
AF_UNSPEC
)

464 
ªq
.
r
.
πm_Ámûy
 = 
AF_INET
;

466 i‡(!
èbÀ_ok
 && 
cmd
 =
RTM_NEWRULE
)

467 
ªq
.
r
.
πm_èbÀ
 = 
RT_TABLE_MAIN
;

469 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

473 
	}
}

476 
	$Êush_ruÀ
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

478 
π∆_h™dÀ
 
πh2
;

479 
πmsg
 *
r
 = 
	`NLMSG_DATA
(
n
);

480 
Àn
 = 
n
->
∆msg_Àn
;

481 
π©å
 * 
tb
[
FRA_MAX
+1];

483 
Àn
 -
	`NLMSG_LENGTH
((*
r
));

484 i‡(
Àn
 < 0)

487 
	`∑r£_π©å
(
tb
, 
FRA_MAX
, 
	`RTM_RTA
(
r
), 
Àn
);

489 i‡(
tb
[
FRA_PRIORITY
]) {

490 
n
->
∆msg_ty≥
 = 
RTM_DELRULE
;

491 
n
->
∆msg_Êags
 = 
NLM_F_REQUEST
;

493 i‡(
	`π∆_›í
(&
πh2
, 0) < 0)

496 i‡(
	`π∆_èlk
(&
πh2
, 
n
, 
NULL
, 0) < 0)

499 
	`π∆_˛o£
(&
πh2
);

503 
	}
}

505 
	$ùruÀ_Êush
(
¨gc
, **
¨gv
)

507 
af
 = 
¥e„ºed_Ámûy
;

509 i‡(
af
 =
AF_UNSPEC
)

510 
af
 = 
AF_INET
;

512 i‡(
¨gc
 > 0) {

513 
	`Ârötf
(
°dîr
, "\"ipÑule flush\" doesÇotállowárguments\n");

517 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
af
, 
RTM_GETRULE
) < 0) {

518 
	`≥º‹
("Cannot send dumpÑequest");

522 i‡(
	`π∆_dump_fûãr
(&
πh
, 
Êush_ruÀ
, 
NULL
) < 0) {

523 
	`Ârötf
(
°dîr
, "FlushÅerminated\n");

528 
	}
}

530 
	$do_ùruÀ
(
¨gc
, **
¨gv
)

532 i‡(
¨gc
 < 1) {

533  
	`ùruÀ_li°_‹_ßve
(0, 
NULL
, 0);

534 } i‡(
	`m©ches
(
¨gv
[0], "list") == 0 ||

535 
	`m©ches
(
¨gv
[0], "lst") == 0 ||

536 
	`m©ches
(
¨gv
[0], "show") == 0) {

537  
	`ùruÀ_li°_‹_ßve
(
¨gc
-1, 
¨gv
+1, 0);

538 } i‡(
	`m©ches
(
¨gv
[0], "save") == 0) {

539  
	`ùruÀ_li°_‹_ßve
(
¨gc
-1, 
¨gv
+1, 1);

540 } i‡(
	`m©ches
(
¨gv
[0], "restore") == 0) {

541  
	`ùruÀ_ª°‹e
();

542 } i‡(
	`m©ches
(
¨gv
[0], "add") == 0) {

543  
	`ùruÀ_modify
(
RTM_NEWRULE
, 
¨gc
-1, 
¨gv
+1);

544 } i‡(
	`m©ches
(
¨gv
[0], "delete") == 0) {

545  
	`ùruÀ_modify
(
RTM_DELRULE
, 
¨gc
-1, 
¨gv
+1);

546 } i‡(
	`m©ches
(
¨gv
[0], "flush") == 0) {

547  
	`ùruÀ_Êush
(
¨gc
-1, 
¨gv
+1);

548 } i‡(
	`m©ches
(
¨gv
[0], "help") == 0)

549 
	`ußge
();

551 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ùÑuÀ hñp\".\n", *
¨gv
);

552 
	`exô
(-1);

553 
	}
}

555 
	$do_mu…úuÀ
(
¨gc
, **
¨gv
)

557 
¥e„ºed_Ámûy
) {

558 
AF_UNSPEC
:

559 
AF_INET
:

560 
¥e„ºed_Ámûy
 = 
RTNL_FAMILY_IPMR
;

562 
AF_INET6
:

563 
¥e„ºed_Ámûy
 = 
RTNL_FAMILY_IP6MR
;

565 
RTNL_FAMILY_IPMR
:

566 
RTNL_FAMILY_IP6MR
:

569 
	`Ârötf
(
°dîr
, "MulticastÑulesáre only supported for IPv4/IPv6, was: %i\n",

570 
¥e„ºed_Ámûy
);

571 
	`exô
(-1);

574  
	`do_ùruÀ
(
¨gc
, 
¨gv
);

575 
	}
}

	@ip/iptoken.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°dboﬁ.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<°rög.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<√töë/ù.h
>

22 
	~<¨∑/öë.h
>

23 
	~<löux/ty≥s.h
>

24 
	~<löux/if.h
>

26 
	~"π_«mes.h
"

27 
	~"utûs.h
"

28 
	~"ù_comm⁄.h
"

30 
π∆_h™dÀ
 
πh
;

32 
	sπ∆_dump_¨gs
 {

33 
FILE
 *
	mÂ
;

34 
	mifödex
;

37 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

39 
	$ußge
()

41 
	`Ârötf
(
°dîr
, "Usage: ipÅoken [Üist | set | get ] [ TOKEN ] [ dev DEV ]\n");

42 
	`exô
(-1);

43 
	}
}

45 
	$¥öt_tokí
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

47 
π∆_dump_¨gs
 *
¨gs
 = 
¨g
;

48 
FILE
 *
Â
 = 
¨gs
->fp;

49 
ifödex
 = 
¨gs
->ifindex;

50 
iföfomsg
 *
ifi
 = 
	`NLMSG_DATA
(
n
);

51 
Àn
 = 
n
->
∆msg_Àn
;

52 
π©å
 *
tb
[
IFLA_MAX
 + 1];

53 
π©å
 *
…b
[
IFLA_INET6_MAX
 + 1];

54 
abuf
[256];

56 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWLINK
)

59 
Àn
 -
	`NLMSG_LENGTH
((*
ifi
));

60 i‡(
Àn
 < 0)

63 i‡(
ifi
->
ifi_Ámûy
 !
AF_INET6
)

65 i‡(
ifi
->
ifi_ödex
 == 0)

67 i‡(
ifödex
 > 0 && 
ifi
->
ifi_ödex
 != ifindex)

69 i‡(
ifi
->
ifi_Êags
 & (
IFF_LOOPBACK
 | 
IFF_NOARP
))

72 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(
ifi
), 
Àn
);

73 i‡(!
tb
[
IFLA_PROTINFO
])

76 
	`∑r£_π©å_√°ed
(
…b
, 
IFLA_INET6_MAX
, 
tb
[
IFLA_PROTINFO
]);

77 i‡(!
…b
[
IFLA_INET6_TOKEN
]) {

78 
	`Ârötf
(
°dîr
, "SeemsÅhere'sÇo support for IPv6Åoken!\n");

82 
	`Ârötf
(
Â
, "token %s ",

83 
	`f‹m©_ho°
(
ifi
->
ifi_Ámûy
,

84 
	`RTA_PAYLOAD
(
…b
[
IFLA_INET6_TOKEN
]),

85 
	`RTA_DATA
(
…b
[
IFLA_INET6_TOKEN
]),

86 
abuf
, (abuf)));

87 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
ifi
->
ifi_ödex
));

88 
	`Ârötf
(
Â
, "\n");

89 
	`fÊush
(
Â
);

92 
	}
}

94 
	$ùtokí_li°
(
¨gc
, **
¨gv
)

96 
af
 = 
AF_INET6
;

97 
π∆_dump_¨gs
 
da
;

98 c⁄° 
π∆_dump_fûãr_¨g
 
a
[2] = {

99 { .
fûãr
 = 
¥öt_tokí
, .
¨g1
 = &
da
, },

100 { .
fûãr
 = 
NULL
, .
¨g1
 = NULL, },

103 
	`mem£t
(&
da
, 0, (da));

104 
da
.
Â
 = 
°dout
;

106 
¨gc
 > 0) {

107 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

108 
	`NEXT_ARG
();

109 i‡((
da
.
ifödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
)) == 0)

110 
	`öv¨g
("dev i†övÆid\n", *
¨gv
);

113 
¨gc
--; 
¨gv
++;

116 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
af
, 
RTM_GETLINK
) < 0) {

117 
	`≥º‹
("Cannot send dumpÑequest");

121 i‡(
	`π∆_dump_fûãr_l
(&
πh
, 
a
) < 0) {

122 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

127 
	}
}

129 
	$ùtokí_£t
(
¨gc
, **
¨gv
)

132 
∆msghdr
 
n
;

133 
iföfomsg
 
ifi
;

134 
buf
[512];

135 } 
ªq
;

136 
π©å
 *
afs
, *
afs6
;

137 
boﬁ
 
have_tokí
 = 
Ál£
, 
have_dev
 = false;

138 
öë_¥efix
 
addr
;

140 
	`mem£t
(&
addr
, 0, (addr));

141 
	`mem£t
(&
ªq
, 0, (req));

143 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iföfomsg
));

144 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

145 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_SETLINK
;

146 
ªq
.
ifi
.
ifi_Ámûy
 = 
AF_INET6
;

148 
¨gc
 > 0) {

149 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

150 
	`NEXT_ARG
();

151 i‡(!
have_dev
) {

152 i‡((
ªq
.
ifi
.
ifi_ödex
 =

153 
	`Œ_«me_to_ödex
(*
¨gv
)) == 0)

154 
	`öv¨g
("dev i†övÆid\n", *
¨gv
);

155 
have_dev
 = 
åue
;

158 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

159 
	`ußge
();

160 i‡(!
have_tokí
) {

161 
afs
 = 
	`add©å_√°
(&
ªq
.
n
, ‘eq), 
IFLA_AF_SPEC
);

162 
afs6
 = 
	`add©å_√°
(&
ªq
.
n
, ‘eq), 
AF_INET6
);

163 
	`gë_¥efix
(&
addr
, *
¨gv
, 
ªq
.
ifi
.
ifi_Ámûy
);

164 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
IFLA_INET6_TOKEN
,

165 &
addr
.
d©a
,áddr.
byãÀn
);

166 
	`add©å_√°_íd
(&
ªq
.
n
, 
afs6
);

167 
	`add©å_√°_íd
(&
ªq
.
n
, 
afs
);

168 
have_tokí
 = 
åue
;

171 
¨gc
--; 
¨gv
++;

174 i‡(!
have_tokí
) {

175 
	`Ârötf
(
°dîr
, "NotÉnough information:Åoken "

179 i‡(!
have_dev
) {

180 
	`Ârötf
(
°dîr
, "NotÉnough information: \"dev\" "

185 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

189 
	}
}

191 
	$do_ùtokí
(
¨gc
, **
¨gv
)

193 
	`Œ_öô_m≠
(&
πh
);

195 i‡(
¨gc
 < 1) {

196  
	`ùtokí_li°
(0, 
NULL
);

197 } i‡(
	`m©ches
(
¨gv
[0], "list") == 0 ||

198 
	`m©ches
(
¨gv
[0], "lst") == 0 ||

199 
	`m©ches
(
¨gv
[0], "show") == 0) {

200  
	`ùtokí_li°
(
¨gc
 - 1, 
¨gv
 + 1);

201 } i‡(
	`m©ches
(
¨gv
[0], "set") == 0 ||

202 
	`m©ches
(
¨gv
[0], "add") == 0) {

203  
	`ùtokí_£t
(
¨gc
 - 1, 
¨gv
 + 1);

204 } i‡(
	`m©ches
(
¨gv
[0], "get") == 0) {

205  
	`ùtokí_li°
(
¨gc
 - 1, 
¨gv
 + 1);

206 } i‡(
	`m©ches
(
¨gv
[0], "help") == 0)

207 
	`ußge
();

209 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ùÅokí hñp\".\n", *
¨gv
);

210 
	`exô
(-1);

211 
	}
}

	@ip/iptunnel.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<uni°d.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<sys/sockë.h
>

19 
	~<¨∑/öë.h
>

20 
	~<sys/io˘l.h
>

21 
	~<√t/if.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<löux/ù.h
>

24 
	~<löux/if_tu¬ñ.h
>

26 
	~"π_«mes.h
"

27 
	~"utûs.h
"

28 
	~"ù_comm⁄.h
"

29 
	~"tu¬ñ.h
"

31 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

33 
	$ußge
()

35 
	`Ârötf
(
°dîr
, "Usage: ipÅunnel {ádd | change | del | show |Örl | 6rd } [ NAME ]\n");

36 
	`Ârötf
(
°dîr
, " [ mode { ipip | gre | sit | isatap | vti } ] [Ñemote ADDR ] [Üocal ADDR ]\n");

37 
	`Ârötf
(
°dîr
, " [ [i|o]seq ] [ [i|o]key KEY ] [ [i|o]csum ]\n");

38 
	`Ârötf
(
°dîr
, " [Örl-default ADDR ] [Örl-nodefault ADDR ] [Örl-delete ADDR ]\n");

39 
	`Ârötf
(
°dîr
, " [ 6rd-prefix ADDR ] [ 6rd-relay_prefix ADDR ] [ 6rd-reset ]\n");

40 
	`Ârötf
(
°dîr
, " [Åtl TTL ] [Åos TOS ] [ [no]pmtudisc ] [ dev PHYS_DEV ]\n");

41 
	`Ârötf
(
°dîr
, "\n");

42 
	`Ârötf
(
°dîr
, "Where: NAME := STRING\n");

43 
	`Ârötf
(
°dîr
, " ADDR := { IP_ADDRESS |ány }\n");

44 
	`Ârötf
(
°dîr
, " TOS := { STRING | 00..ff | inherit | inherit/STRING | inherit/00..ff }\n");

45 
	`Ârötf
(
°dîr
, " TTL := { 1..255 | inherit }\n");

46 
	`Ârötf
(
°dîr
, " KEY := { DOTTED_QUAD | NUMBER }\n");

47 
	`exô
(-1);

48 
	}
}

50 
	$∑r£_¨gs
(
¨gc
, **
¨gv
, 
cmd
, 
ù_tu¬ñ_∑rm
 *
p
)

52 
cou¡
 = 0;

53 
medium
[
IFNAMSIZ
];

54 
ißèp
 = 0;

56 
	`mem£t
(
p
, 0, (*p));

57 
	`mem£t
(&
medium
, 0, (medium));

59 
p
->
ùh
.
vîsi⁄
 = 4;

60 
p
->
ùh
.
ihl
 = 5;

61 #i‚de‡
IP_DF


62 
	#IP_DF
 0x4000

	)

64 
p
->
ùh
.
‰ag_off
 = 
	`ht⁄s
(
IP_DF
);

66 
¨gc
 > 0) {

67 i‡(
	`°rcmp
(*
¨gv
, "mode") == 0) {

68 
	`NEXT_ARG
();

69 i‡(
	`°rcmp
(*
¨gv
, "ipip") == 0 ||

70 
	`°rcmp
(*
¨gv
, "ip/ip") == 0) {

71 i‡(
p
->
ùh
.
¥Ÿocﬁ
 &&Ö->ùh.¥Ÿocﬁ !
IPPROTO_IPIP
) {

72 
	`Ârötf
(
°dîr
,"You managedÅoásk for moreÅhan oneÅunnel mode.\n");

73 
	`exô
(-1);

75 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPIP
;

76 } i‡(
	`°rcmp
(*
¨gv
, "gre") == 0 ||

77 
	`°rcmp
(*
¨gv
, "gre/ip") == 0) {

78 i‡(
p
->
ùh
.
¥Ÿocﬁ
 &&Ö->ùh.¥Ÿocﬁ !
IPPROTO_GRE
) {

79 
	`Ârötf
(
°dîr
,"You managedÅoásk for moreÅhan oneÅunnel mode.\n");

80 
	`exô
(-1);

82 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_GRE
;

83 } i‡(
	`°rcmp
(*
¨gv
, "sit") == 0 ||

84 
	`°rcmp
(*
¨gv
, "ipv6/ip") == 0) {

85 i‡(
p
->
ùh
.
¥Ÿocﬁ
 &&Ö->ùh.¥Ÿocﬁ !
IPPROTO_IPV6
) {

86 
	`Ârötf
(
°dîr
,"You managedÅoásk for moreÅhan oneÅunnel mode.\n");

87 
	`exô
(-1);

89 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPV6
;

90 } i‡(
	`°rcmp
(*
¨gv
, "isatap") == 0) {

91 i‡(
p
->
ùh
.
¥Ÿocﬁ
 &&Ö->ùh.¥Ÿocﬁ !
IPPROTO_IPV6
) {

92 
	`Ârötf
(
°dîr
, "You managedÅoásk for moreÅhan oneÅunnel mode.\n");

93 
	`exô
(-1);

95 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPV6
;

96 
ißèp
++;

97 } i‡(
	`°rcmp
(*
¨gv
, "vti") == 0) {

98 i‡(
p
->
ùh
.
¥Ÿocﬁ
 &&Ö->ùh.¥Ÿocﬁ !
IPPROTO_IPIP
) {

99 
	`Ârötf
(
°dîr
, "You managedÅoásk for moreÅhan oneÅunnel mode.\n");

100 
	`exô
(-1);

102 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPIP
;

103 
p
->
i_Êags
 |
VTI_ISVTI
;

105 
	`Ârötf
(
°dîr
,"Unknow¿tu¬ñ modê\"%s\"\n", *
¨gv
);

106 
	`exô
(-1);

108 } i‡(
	`°rcmp
(*
¨gv
, "key") == 0) {

109 
uvÆ
;

110 
	`NEXT_ARG
();

111 
p
->
i_Êags
 |
GRE_KEY
;

112 
p
->
o_Êags
 |
GRE_KEY
;

113 i‡(
	`°rchr
(*
¨gv
, '.'))

114 
p
->
i_key
 =Ö->
o_key
 = 
	`gë_addr32
(*
¨gv
);

116 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0)<0) {

117 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"key\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

118 
	`exô
(-1);

120 
p
->
i_key
 =Ö->
o_key
 = 
	`ht⁄l
(
uvÆ
);

122 } i‡(
	`°rcmp
(*
¨gv
, "ikey") == 0) {

123 
uvÆ
;

124 
	`NEXT_ARG
();

125 
p
->
i_Êags
 |
GRE_KEY
;

126 i‡(
	`°rchr
(*
¨gv
, '.'))

127 
p
->
i_key
 = 
	`gë_addr32
(*
¨gv
);

129 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0)<0) {

130 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"ikey\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

131 
	`exô
(-1);

133 
p
->
i_key
 = 
	`ht⁄l
(
uvÆ
);

135 } i‡(
	`°rcmp
(*
¨gv
, "okey") == 0) {

136 
uvÆ
;

137 
	`NEXT_ARG
();

138 
p
->
o_Êags
 |
GRE_KEY
;

139 i‡(
	`°rchr
(*
¨gv
, '.'))

140 
p
->
o_key
 = 
	`gë_addr32
(*
¨gv
);

142 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0)<0) {

143 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"okey\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

144 
	`exô
(-1);

146 
p
->
o_key
 = 
	`ht⁄l
(
uvÆ
);

148 } i‡(
	`°rcmp
(*
¨gv
, "seq") == 0) {

149 
p
->
i_Êags
 |
GRE_SEQ
;

150 
p
->
o_Êags
 |
GRE_SEQ
;

151 } i‡(
	`°rcmp
(*
¨gv
, "iseq") == 0) {

152 
p
->
i_Êags
 |
GRE_SEQ
;

153 } i‡(
	`°rcmp
(*
¨gv
, "oseq") == 0) {

154 
p
->
o_Êags
 |
GRE_SEQ
;

155 } i‡(
	`°rcmp
(*
¨gv
, "csum") == 0) {

156 
p
->
i_Êags
 |
GRE_CSUM
;

157 
p
->
o_Êags
 |
GRE_CSUM
;

158 } i‡(
	`°rcmp
(*
¨gv
, "icsum") == 0) {

159 
p
->
i_Êags
 |
GRE_CSUM
;

160 } i‡(
	`°rcmp
(*
¨gv
, "ocsum") == 0) {

161 
p
->
o_Êags
 |
GRE_CSUM
;

162 } i‡(
	`°rcmp
(*
¨gv
, "nopmtudisc") == 0) {

163 
p
->
ùh
.
‰ag_off
 = 0;

164 } i‡(
	`°rcmp
(*
¨gv
, "pmtudisc") == 0) {

165 
p
->
ùh
.
‰ag_off
 = 
	`ht⁄s
(
IP_DF
);

166 } i‡(
	`°rcmp
(*
¨gv
, "remote") == 0) {

167 
	`NEXT_ARG
();

168 i‡(
	`°rcmp
(*
¨gv
, "any"))

169 
p
->
ùh
.
daddr
 = 
	`gë_addr32
(*
¨gv
);

171 
p
->
ùh
.
daddr
 = 
	`ht⁄l
(
INADDR_ANY
);

172 } i‡(
	`°rcmp
(*
¨gv
, "local") == 0) {

173 
	`NEXT_ARG
();

174 i‡(
	`°rcmp
(*
¨gv
, "any"))

175 
p
->
ùh
.
ßddr
 = 
	`gë_addr32
(*
¨gv
);

177 
p
->
ùh
.
ßddr
 = 
	`ht⁄l
(
INADDR_ANY
);

178 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

179 
	`NEXT_ARG
();

180 
	`°∫˝y
(
medium
, *
¨gv
, 
IFNAMSIZ
-1);

181 } i‡(
	`°rcmp
(*
¨gv
, "ttl") == 0 ||

182 
	`°rcmp
(*
¨gv
, "hoplimit") == 0) {

183 
uvÆ
;

184 
	`NEXT_ARG
();

185 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

186 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0))

187 
	`öv¨g
("övÆid TTL\n", *
¨gv
);

188 i‡(
uvÆ
 > 255)

189 
	`öv¨g
("TTL mu° bê<=255\n", *
¨gv
);

190 
p
->
ùh
.
âl
 = 
uvÆ
;

192 } i‡(
	`°rcmp
(*
¨gv
, "tos") == 0 ||

193 
	`°rcmp
(*
¨gv
, "tclass") == 0 ||

194 
	`m©ches
(*
¨gv
, "dsfield") == 0) {

195 *
dsfõld
;

196 
__u32
 
uvÆ
;

197 
	`NEXT_ARG
();

198 
dsfõld
 = *
¨gv
;

199 
	`°r£p
(&
dsfõld
, "/");

200 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

201 
dsfõld
 = *
¨gv
;

202 
p
->
ùh
.
tos
 = 0;

204 
p
->
ùh
.
tos
 = 1;

205 i‡(
dsfõld
) {

206 i‡(
	`π∆_dsfõld_a2n
(&
uvÆ
, 
dsfõld
))

207 
	`öv¨g
("bad TOS vÆue", *
¨gv
);

208 
p
->
ùh
.
tos
 |
uvÆ
;

211 i‡(
	`°rcmp
(*
¨gv
, "name") == 0) {

212 
	`NEXT_ARG
();

213 } i‡(
	`m©ches
(*
¨gv
, "help") == 0)

214 
	`ußge
();

215 i‡(
p
->
«me
[0])

216 
	`du∑rg2
("«me", *
¨gv
);

217 
	`°∫˝y
(
p
->
«me
, *
¨gv
, 
IFNAMSIZ
);

218 i‡(
cmd
 =
SIOCCHGTUNNEL
 && 
cou¡
 == 0) {

219 
ù_tu¬ñ_∑rm
 
ﬁd_p
;

220 
	`mem£t
(&
ﬁd_p
, 0, (old_p));

221 i‡(
	`äl_gë_io˘l
(*
¨gv
, &
ﬁd_p
))

223 *
p
 = 
ﬁd_p
;

226 
cou¡
++;

227 
¨gc
--; 
¨gv
++;

231 i‡(
p
->
ùh
.
¥Ÿocﬁ
 == 0) {

232 i‡(
	`memcmp
(
p
->
«me
, "gre", 3) == 0)

233 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_GRE
;

234 i‡(
	`memcmp
(
p
->
«me
, "ipip", 4) == 0)

235 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPIP
;

236 i‡(
	`memcmp
(
p
->
«me
, "sit", 3) == 0)

237 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPV6
;

238 i‡(
	`memcmp
(
p
->
«me
, "isatap", 6) == 0) {

239 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPV6
;

240 
ißèp
++;

241 } i‡(
	`memcmp
(
p
->
«me
, "vti", 3) == 0) {

242 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPIP
;

243 
p
->
i_Êags
 |
VTI_ISVTI
;

247 i‡((
p
->
i_Êags
 & 
GRE_KEY
Ë|| (p->
o_Êags
 & GRE_KEY)) {

248 i‡(!(
p
->
i_Êags
 & 
VTI_ISVTI
) &&

249 (
p
->
ùh
.
¥Ÿocﬁ
 !
IPPROTO_GRE
)) {

250 
	`Ârötf
(
°dîr
, "KeysáreÇotállowed with ipipánd sitÅunnels\n");

255 i‡(
medium
[0]) {

256 
p
->
lök
 = 
	`if_«mëoödex
(
medium
);

257 i‡(
p
->
lök
 == 0) {

258 
	`Ârötf
(
°dîr
, "Cannot find device \"%s\"\n",

259 
medium
);

264 i‡(
p
->
i_key
 =0 && 
	`IN_MULTICAST
(
	`¡ohl
’->
ùh
.
daddr
))) {

265 
p
->
i_key
 =Ö->
ùh
.
daddr
;

266 
p
->
i_Êags
 |
GRE_KEY
;

268 i‡(
p
->
o_key
 =0 && 
	`IN_MULTICAST
(
	`¡ohl
’->
ùh
.
daddr
))) {

269 
p
->
o_key
 =Ö->
ùh
.
daddr
;

270 
p
->
o_Êags
 |
GRE_KEY
;

272 i‡(
	`IN_MULTICAST
(
	`¡ohl
(
p
->
ùh
.
daddr
)Ë&& !p->ùh.
ßddr
) {

273 
	`Ârötf
(
°dîr
, "A broadcastÅunnelÑequiresá sourceáddress\n");

276 i‡(
ißèp
)

277 
p
->
i_Êags
 |
SIT_ISATAP
;

280 
	}
}

283 
	$do_add
(
cmd
, 
¨gc
, **
¨gv
)

285 
ù_tu¬ñ_∑rm
 
p
;

287 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, 
cmd
, &
p
) < 0)

290 i‡(
p
.
ùh
.
âl
 &&Ö.ùh.
‰ag_off
 == 0) {

291 
	`Ârötf
(
°dîr
, "ttl != 0ándÇopmtudiscáre incompatible\n");

295 
p
.
ùh
.
¥Ÿocﬁ
) {

296 
IPPROTO_IPIP
:

297 i‡(
p
.
i_Êags
 & 
VTI_ISVTI
)

298  
	`äl_add_io˘l
(
cmd
, "ù_vti0", 
p
.
«me
, &p);

300  
	`äl_add_io˘l
(
cmd
, "tu∆0", 
p
.
«me
, &p);

301 
IPPROTO_GRE
:

302  
	`äl_add_io˘l
(
cmd
, "gª0", 
p
.
«me
, &p);

303 
IPPROTO_IPV6
:

304  
	`äl_add_io˘l
(
cmd
, "sô0", 
p
.
«me
, &p);

306 
	`Ârötf
(
°dîr
, "cannot determineÅunnel mode (ipip, gre, vti or sit)\n");

310 
	}
}

312 
	$do_dñ
(
¨gc
, **
¨gv
)

314 
ù_tu¬ñ_∑rm
 
p
;

316 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, 
SIOCDELTUNNEL
, &
p
) < 0)

319 
p
.
ùh
.
¥Ÿocﬁ
) {

320 
IPPROTO_IPIP
:

321 i‡(
p
.
i_Êags
 & 
VTI_ISVTI
)

322  
	`äl_dñ_io˘l
("ù_vti0", 
p
.
«me
, &p);

324  
	`äl_dñ_io˘l
("tu∆0", 
p
.
«me
, &p);

325 
IPPROTO_GRE
:

326  
	`äl_dñ_io˘l
("gª0", 
p
.
«me
, &p);

327 
IPPROTO_IPV6
:

328  
	`äl_dñ_io˘l
("sô0", 
p
.
«me
, &p);

330  
	`äl_dñ_io˘l
(
p
.
«me
,Ö.name, &p);

333 
	}
}

335 
	$¥öt_tu¬ñ
(
ù_tu¬ñ_∑rm
 *
p
)

337 
ù_tu¬ñ_6rd
 
ù6rd
;

338 
s1
[1024];

339 
s2
[1024];

341 
	`mem£t
(&
ù6rd
, 0, (ip6rd));

346 
	`¥ötf
("%s: %s/ipÑemote %sÜocal %s ",

347 
p
->
«me
,

348 
	`äl_°ΩrŸo
(
p
->
ùh
.
¥Ÿocﬁ
),

349 
p
->
ùh
.
daddr
 ? 
	`f‹m©_ho°
(
AF_INET
, 4, &p->ùh.daddr, 
s1
, (s1)) : "any",

350 
p
->
ùh
.
ßddr
 ? 
	`π_addr_n2a
(
AF_INET
, 4, &p->ùh.ßddr, 
s2
, (s2)) : "any");

352 i‡(
p
->
ùh
.
¥Ÿocﬁ
 =
IPPROTO_IPV6
 && (p->
i_Êags
 & 
SIT_ISATAP
)) {

353 
ù_tu¬ñ_¥l
 
¥l
[16];

354 
i
;

356 
	`mem£t
(
¥l
, 0, (prl));

357 
¥l
[0].
d©Æí
 = (prl) - (prl[0]);

358 
¥l
[0].
addr
 = 
	`ht⁄l
(
INADDR_ANY
);

360 i‡(!
	`äl_¥l_io˘l
(
SIOCGETPRL
, 
p
->
«me
, 
¥l
))

361 
i
 = 1; i < (
¥l
) / (prl[0]); i++)

363 i‡(
¥l
[
i
].
addr
 !
	`ht⁄l
(
INADDR_ANY
)) {

364 
	`¥ötf
(" %s %s ",

365 (
¥l
[
i
].
Êags
 & 
PRL_DEFAULT
) ? "pdr" : "pr",

366 
	`f‹m©_ho°
(
AF_INET
, 4, &
¥l
[
i
].
addr
, 
s1
, (s1)));

371 i‡(
p
->
lök
) {

372 c⁄° *
n
 = 
	`Œ_ödex_to_«me
(
p
->
lök
);

373 i‡(
n
)

374 
	`¥ötf
(" dev %†", 
n
);

377 i‡(
p
->
ùh
.
âl
)

378 
	`¥ötf
("Åé %d ", 
p
->
ùh
.
âl
);

380 
	`¥ötf
("Åtl inherit ");

382 i‡(
p
->
ùh
.
tos
) {

383 
	`SPRINT_BUF
(
b1
);

384 
	`¥ötf
("Åos");

385 i‡(
p
->
ùh
.
tos
&1)

386 
	`¥ötf
(" inherit");

387 i‡(
p
->
ùh
.
tos
&~1)

388 
	`¥ötf
("%c%†", 
p
->
ùh
.
tos
&1 ? '/' : ' ',

389 
	`π∆_dsfõld_n2a
(
p
->
ùh
.
tos
&~1, 
b1
, (b1)));

392 i‡(!(
p
->
ùh
.
‰ag_off
&
	`ht⁄s
(
IP_DF
)))

393 
	`¥ötf
("Çopmtudisc");

395 i‡(
p
->
ùh
.
¥Ÿocﬁ
 =
IPPROTO_IPV6
 && !
	`äl_io˘l_gë_6rd
’->
«me
, &
ù6rd
Ë&& ip6rd.
¥efixÀn
) {

396 
	`¥ötf
(" 6rd-prefix %s/%u ",

397 
	`öë_¡›
(
AF_INET6
, &
ù6rd
.
¥efix
, 
s1
, (s1)),

398 
ù6rd
.
¥efixÀn
);

399 i‡(
ù6rd
.
ªœy_¥efix
) {

400 
	`¥ötf
("6rd-relay_prefix %s/%u ",

401 
	`f‹m©_ho°
(
AF_INET
, 4, &
ù6rd
.
ªœy_¥efix
, 
s1
, (s1)),

402 
ù6rd
.
ªœy_¥efixÀn
);

406 i‡((
p
->
i_Êags
&
GRE_KEY
Ë&& (p->
o_Êags
&GRE_KEYË&&Ö->
o_key
 =p->
i_key
)

407 
	`¥ötf
(" key %u", 
	`¡ohl
(
p
->
i_key
));

408 i‡((
p
->
i_Êags
|p->
o_Êags
)&
GRE_KEY
) {

409 i‡(
p
->
i_Êags
&
GRE_KEY
)

410 
	`¥ötf
(" ikey %u ", 
	`¡ohl
(
p
->
i_key
));

411 i‡(
p
->
o_Êags
&
GRE_KEY
)

412 
	`¥ötf
(" okey %u ", 
	`¡ohl
(
p
->
o_key
));

415 i‡(
p
->
i_Êags
&
GRE_SEQ
)

416 
	`¥ötf
("%† Dr›Öackë†ouào‡£quí˚.", 
_SL_
);

417 i‡(
p
->
i_Êags
&
GRE_CSUM
)

418 
	`¥ötf
("%† Checksum i¿ª˚ivedÖackë i†ªquúed.", 
_SL_
);

419 i‡(
p
->
o_Êags
&
GRE_SEQ
)

420 
	`¥ötf
("%† Sequí˚Öackë†⁄ ouçut.", 
_SL_
);

421 i‡(
p
->
o_Êags
&
GRE_CSUM
)

422 
	`¥ötf
("%† Checksum ouçuà∑ckës.", 
_SL_
);

423 
	}
}

425 
	$do_tu¬ñs_li°
(
ù_tu¬ñ_∑rm
 *
p
)

427 
«me
[
IFNAMSIZ
];

428 
rx_byãs
, 
rx_∑ckës
, 
rx_îrs
, 
rx_dr›s
,

429 
rx_fifo
, 
rx_‰ame
,

430 
tx_byãs
, 
tx_∑ckës
, 
tx_îrs
, 
tx_dr›s
,

431 
tx_fifo
, 
tx_cﬁls
, 
tx_ˇºõr
, 
rx_mu…i
;

432 
ù_tu¬ñ_∑rm
 
p1
;

434 
buf
[512];

435 
FILE
 *
Â
 = 
	`f›í
("/proc/net/dev", "r");

436 i‡(
Â
 =
NULL
) {

437 
	`≥º‹
("fopen");

442 i‡(!
	`fgës
(
buf
, (buf), 
Â
) ||

443 !
	`fgës
(
buf
, (buf), 
Â
)) {

444 
	`Ârötf
(
°dîr
, "/proc/net/devÑeadÉrror\n");

445 
	`f˛o£
(
Â
);

449 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

450 
ödex
, 
ty≥
;

451 *
±r
;

452 
buf
[(buf) - 1] = 0;

453 i‡((
±r
 = 
	`°rchr
(
buf
, ':')Ë=
NULL
 ||

454 (*
±r
++ = 0, 
	`ssˇnf
(
buf
, "%s", 
«me
) != 1)) {

455 
	`Ârötf
(
°dîr
, "Wrong format for /proc/net/dev. Giving up.\n");

456 
	`f˛o£
(
Â
);

459 i‡(
	`ssˇnf
(
±r
, "%ld%ld%ld%ld%ld%ld%ld%*d%ld%ld%ld%ld%ld%ld%ld",

460 &
rx_byãs
, &
rx_∑ckës
, &
rx_îrs
, &
rx_dr›s
,

461 &
rx_fifo
, &
rx_‰ame
, &
rx_mu…i
,

462 &
tx_byãs
, &
tx_∑ckës
, &
tx_îrs
, &
tx_dr›s
,

463 &
tx_fifo
, &
tx_cﬁls
, &
tx_ˇºõr
) != 14)

465 i‡(
p
->
«me
[0] && 
	`°rcmp
(p->name,Çame))

467 
ödex
 = 
	`Œ_«me_to_ödex
(
«me
);

468 i‡(
ödex
 == 0)

470 
ty≥
 = 
	`Œ_ödex_to_ty≥
(
ödex
);

471 i‡(
ty≥
 == -1) {

472 
	`Ârötf
(
°dîr
, "FaûedÅÿgëÅy≥ o‡\"%s\"\n", 
«me
);

475 i‡(
ty≥
 !
ARPHRD_TUNNEL
 &&Åy≥ !
ARPHRD_IPGRE
 &&Åy≥ !
ARPHRD_SIT
)

477 
	`mem£t
(&
p1
, 0, (p1));

478 i‡(
	`äl_gë_io˘l
(
«me
, &
p1
))

480 i‡((
p
->
lök
 && 
p1
.link !=Ö->link) ||

481 (
p
->
«me
[0] && 
	`°rcmp
(
p1
.name,Ö->name)) ||

482 (
p
->
ùh
.
daddr
 && 
p1
.iph.daddr !=Ö->iph.daddr) ||

483 (
p
->
ùh
.
ßddr
 && 
p1
.iph.saddr !=Ö->iph.saddr) ||

484 (
p
->
i_key
 && 
p1
.i_key !=Ö->i_key))

486 
	`¥öt_tu¬ñ
(&
p1
);

487 i‡(
show_°©s
) {

488 
	`¥ötf
("%s", 
_SL_
);

489 
	`¥ötf
("RX: Packë† Byã† Eº‹†CsumEº†OutOfSeq Mˇ°s%s", 
_SL_
);

490 
	`¥ötf
(" %-10ld %-12ld %-6ld %-8ld %-8ld %-8ld%s",

491 
rx_∑ckës
, 
rx_byãs
, 
rx_îrs
, 
rx_‰ame
, 
rx_fifo
, 
rx_mu…i
, 
_SL_
);

492 
	`¥ötf
("TX: Packë† Byã† Eº‹†DódLo› NoRouã NoBufs%s", 
_SL_
);

493 
	`¥ötf
(" %-10ld %-12ld %-6ld %-8ld %-8ld %-6ld",

494 
tx_∑ckës
, 
tx_byãs
, 
tx_îrs
, 
tx_cﬁls
, 
tx_ˇºõr
, 
tx_dr›s
);

496 
	`¥ötf
("\n");

498 
	`f˛o£
(
Â
);

500 
	}
}

502 
	$do_show
(
¨gc
, **
¨gv
)

504 
îr
;

505 
ù_tu¬ñ_∑rm
 
p
;

507 
	`Œ_öô_m≠
(&
πh
);

508 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, 
SIOCGETTUNNEL
, &
p
) < 0)

511 
p
.
ùh
.
¥Ÿocﬁ
) {

512 
IPPROTO_IPIP
:

513 i‡(
p
.
i_Êags
 & 
VTI_ISVTI
)

514 
îr
 = 
	`äl_gë_io˘l
(
p
.
«me
[0] ?Ö.name : "ip_vti0", &p);

516 
îr
 = 
	`äl_gë_io˘l
(
p
.
«me
[0] ?Ö.name : "tunl0", &p);

518 
IPPROTO_GRE
:

519 
îr
 = 
	`äl_gë_io˘l
(
p
.
«me
[0] ?Ö.name : "gre0", &p);

521 
IPPROTO_IPV6
:

522 
îr
 = 
	`äl_gë_io˘l
(
p
.
«me
[0] ?Ö.name : "sit0", &p);

525 
	`do_tu¬ñs_li°
(&
p
);

528 i‡(
îr
)

531 
	`¥öt_tu¬ñ
(&
p
);

532 
	`¥ötf
("\n");

534 
	}
}

536 
	$do_¥l
(
¨gc
, **
¨gv
)

538 
ù_tu¬ñ_¥l
 
p
;

539 
cou¡
 = 0;

540 
dev«me
 = 0;

541 
cmd
 = 0;

542 
medium
[
IFNAMSIZ
];

544 
	`mem£t
(&
p
, 0, (p));

545 
	`mem£t
(&
medium
, 0, (medium));

547 
¨gc
 > 0) {

548 i‡(
	`°rcmp
(*
¨gv
, "prl-default") == 0) {

549 
	`NEXT_ARG
();

550 
cmd
 = 
SIOCADDPRL
;

551 
p
.
addr
 = 
	`gë_addr32
(*
¨gv
);

552 
p
.
Êags
 |
PRL_DEFAULT
;

553 
cou¡
++;

554 } i‡(
	`°rcmp
(*
¨gv
, "prl-nodefault") == 0) {

555 
	`NEXT_ARG
();

556 
cmd
 = 
SIOCADDPRL
;

557 
p
.
addr
 = 
	`gë_addr32
(*
¨gv
);

558 
cou¡
++;

559 } i‡(
	`°rcmp
(*
¨gv
, "prl-delete") == 0) {

560 
	`NEXT_ARG
();

561 
cmd
 = 
SIOCDELPRL
;

562 
p
.
addr
 = 
	`gë_addr32
(*
¨gv
);

563 
cou¡
++;

564 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

565 
	`NEXT_ARG
();

566 
	`°∫˝y
(
medium
, *
¨gv
, 
IFNAMSIZ
-1);

567 
dev«me
++;

569 
	`Ârötf
(
°dîr
,"InvÆid PRLÖ¨amëî \"%s\"\n", *
¨gv
);

570 
	`exô
(-1);

572 i‡(
cou¡
 > 1) {

573 
	`Ârötf
(
°dîr
,"One PRLÉntryátáÅime\n");

574 
	`exô
(-1);

576 
¨gc
--; 
¨gv
++;

578 i‡(
dev«me
 == 0) {

579 
	`Ârötf
(
°dîr
, "Must specify device\n");

580 
	`exô
(-1);

583  
	`äl_¥l_io˘l
(
cmd
, 
medium
, &
p
);

584 
	}
}

586 
	$do_6rd
(
¨gc
, **
¨gv
)

588 
ù_tu¬ñ_6rd
 
ù6rd
;

589 
dev«me
 = 0;

590 
cmd
 = 0;

591 
medium
[
IFNAMSIZ
];

592 
öë_¥efix
 
¥efix
;

594 
	`mem£t
(&
ù6rd
, 0, (ip6rd));

595 
	`mem£t
(&
medium
, 0, (medium));

597 
¨gc
 > 0) {

598 i‡(
	`°rcmp
(*
¨gv
, "6rd-prefix") == 0) {

599 
	`NEXT_ARG
();

600 i‡(
	`gë_¥efix
(&
¥efix
, *
¨gv
, 
AF_INET6
))

601 
	`öv¨g
("övÆid 6rd_¥efix\n", *
¨gv
);

602 
cmd
 = 
SIOCADD6RD
;

603 
	`mem˝y
(&
ù6rd
.
¥efix
,Öªfix.
d©a
, 16);

604 
ù6rd
.
¥efixÀn
 = 
¥efix
.
bôÀn
;

605 } i‡(
	`°rcmp
(*
¨gv
, "6rd-relay_prefix") == 0) {

606 
	`NEXT_ARG
();

607 i‡(
	`gë_¥efix
(&
¥efix
, *
¨gv
, 
AF_INET
))

608 
	`öv¨g
("övÆid 6rd-ªœy_¥efix\n", *
¨gv
);

609 
cmd
 = 
SIOCADD6RD
;

610 
	`mem˝y
(&
ù6rd
.
ªœy_¥efix
, 
¥efix
.
d©a
, 4);

611 
ù6rd
.
ªœy_¥efixÀn
 = 
¥efix
.
bôÀn
;

612 } i‡(
	`°rcmp
(*
¨gv
, "6rd-reset") == 0) {

613 
cmd
 = 
SIOCDEL6RD
;

614 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

615 
	`NEXT_ARG
();

616 
	`°∫˝y
(
medium
, *
¨gv
, 
IFNAMSIZ
-1);

617 
dev«me
++;

619 
	`Ârötf
(
°dîr
,"InvÆid 6RDÖ¨amëî \"%s\"\n", *
¨gv
);

620 
	`exô
(-1);

622 
¨gc
--; 
¨gv
++;

624 i‡(
dev«me
 == 0) {

625 
	`Ârötf
(
°dîr
, "Must specify device\n");

626 
	`exô
(-1);

629  
	`äl_6rd_io˘l
(
cmd
, 
medium
, &
ù6rd
);

630 
	}
}

632 
	$do_ùtu¬ñ
(
¨gc
, **
¨gv
)

634 
¥e„ºed_Ámûy
) {

635 
AF_UNSPEC
:

636 
¥e„ºed_Ámûy
 = 
AF_INET
;

638 
AF_INET
:

645 
AF_INET6
:

646  
	`do_ù6tu¬ñ
(
¨gc
, 
¨gv
);

648 
	`Ârötf
(
°dîr
, "Unsuµ‹ãdÖrŸocﬁ famûy: %d\n", 
¥e„ºed_Ámûy
);

649 
	`exô
(-1);

652 i‡(
¨gc
 > 0) {

653 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

654  
	`do_add
(
SIOCADDTUNNEL
, 
¨gc
-1, 
¨gv
+1);

655 i‡(
	`m©ches
(*
¨gv
, "change") == 0)

656  
	`do_add
(
SIOCCHGTUNNEL
, 
¨gc
-1, 
¨gv
+1);

657 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

658  
	`do_dñ
(
¨gc
-1, 
¨gv
+1);

659 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

660 
	`m©ches
(*
¨gv
, "lst") == 0 ||

661 
	`m©ches
(*
¨gv
, "list") == 0)

662  
	`do_show
(
¨gc
-1, 
¨gv
+1);

663 i‡(
	`m©ches
(*
¨gv
, "prl") == 0)

664  
	`do_¥l
(
¨gc
-1, 
¨gv
+1);

665 i‡(
	`m©ches
(*
¨gv
, "6rd") == 0)

666  
	`do_6rd
(
¨gc
-1, 
¨gv
+1);

667 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

668 
	`ußge
();

670  
	`do_show
(0, 
NULL
);

672 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ùÅu¬ñ hñp\"\n", *
¨gv
);

673 
	`exô
(-1);

674 
	}
}

	@ip/iptuntap.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<uni°d.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<sys/sockë.h
>

19 
	~<¨∑/öë.h
>

20 
	~<sys/io˘l.h
>

21 
	~<löux/if.h
>

22 
	~<löux/if_tun.h
>

23 
	~<pwd.h
>

24 
	~<gΩ.h
>

25 
	~<f˙é.h
>

26 
	~<dúít.h
>

27 
	~<î∫o.h
>

29 
	~"π_«mes.h
"

30 
	~"utûs.h
"

31 
	~"ù_comm⁄.h
"

33 
	#TUNDEV
 "/dev/√t/tun"

	)

35 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

37 
	$ußge
()

39 
	`Ârötf
(
°dîr
, "Usage: ipÅuntap {ádd | del | show |Üist |Üst | help } [ dev PHYS_DEV ] \n");

40 
	`Ârötf
(
°dîr
, " [ mode {Åun |Åap } ] [ user USER ] [ group GROUP ]\n");

41 
	`Ârötf
(
°dîr
, " [ one_queue ] [Öi ] [ vnet_hdr ] [ multi_queue ]\n");

42 
	`Ârötf
(
°dîr
, "\n");

43 
	`Ârötf
(
°dîr
, "Where: USER := { STRING | NUMBER }\n");

44 
	`Ârötf
(
°dîr
, " GROUP := { STRING | NUMBER }\n");

45 
	`exô
(-1);

46 
	}
}

48 
	$èp_add_io˘l
(
i‰eq
 *
i‰
, 
uid_t
 
uid
, 
gid_t
 
gid
)

50 
fd
;

51 
ªt
 = -1;

53 #ifde‡
IFF_TUN_EXCL


54 
i‰
->
i‰_Êags
 |
IFF_TUN_EXCL
;

57 
fd
 = 
	`›í
(
TUNDEV
, 
O_RDWR
);

58 i‡(
fd
 < 0) {

59 
	`≥º‹
("open");

62 i‡(
	`io˘l
(
fd
, 
TUNSETIFF
, 
i‰
)) {

63 
	`≥º‹
("ioctl(TUNSETIFF)");

64 
out
;

66 i‡(
uid
 !-1 && 
	`io˘l
(
fd
, 
TUNSETOWNER
, uid)) {

67 
	`≥º‹
("ioctl(TUNSETOWNER)");

68 
out
;

70 i‡(
gid
 !-1 && 
	`io˘l
(
fd
, 
TUNSETGROUP
, gid)) {

71 
	`≥º‹
("ioctl(TUNSETGROUP)");

72 
out
;

74 i‡(
	`io˘l
(
fd
, 
TUNSETPERSIST
, 1)) {

75 
	`≥º‹
("ioctl(TUNSETPERSIST)");

76 
out
;

78 
ªt
 = 0;

79 
out
:

80 
	`˛o£
(
fd
);

81  
ªt
;

82 
	}
}

84 
	$èp_dñ_io˘l
(
i‰eq
 *
i‰
)

86 
fd
 = 
	`›í
(
TUNDEV
, 
O_RDWR
);

87 
ªt
 = -1;

89 i‡(
fd
 < 0) {

90 
	`≥º‹
("open");

93 i‡(
	`io˘l
(
fd
, 
TUNSETIFF
, 
i‰
)) {

94 
	`≥º‹
("ioctl(TUNSETIFF)");

95 
out
;

97 i‡(
	`io˘l
(
fd
, 
TUNSETPERSIST
, 0)) {

98 
	`≥º‹
("ioctl(TUNSETPERSIST)");

99 
out
;

101 
ªt
 = 0;

102 
out
:

103 
	`˛o£
(
fd
);

104  
ªt
;

106 
	}
}

107 
	$∑r£_¨gs
(
¨gc
, **
¨gv
, 
i‰eq
 *
i‰
, 
uid_t
 *
uid
, 
gid_t
 *
gid
)

109 
cou¡
 = 0;

111 
	`mem£t
(
i‰
, 0, (*ifr));

113 
i‰
->
i‰_Êags
 |
IFF_NO_PI
;

115 
¨gc
 > 0) {

116 i‡(
	`m©ches
(*
¨gv
, "mode") == 0) {

117 
	`NEXT_ARG
();

118 i‡(
	`m©ches
(*
¨gv
, "tun") == 0) {

119 i‡(
i‰
->
i‰_Êags
 & 
IFF_TAP
) {

120 
	`Ârötf
(
°dîr
,"You managedÅoásk for moreÅhan oneÅunnel mode.\n");

121 
	`exô
(-1);

123 
i‰
->
i‰_Êags
 |
IFF_TUN
;

124 } i‡(
	`m©ches
(*
¨gv
, "tap") == 0) {

125 i‡(
i‰
->
i‰_Êags
 & 
IFF_TUN
) {

126 
	`Ârötf
(
°dîr
,"You managedÅoásk for moreÅhan oneÅunnel mode.\n");

127 
	`exô
(-1);

129 
i‰
->
i‰_Êags
 |
IFF_TAP
;

131 
	`Ârötf
(
°dîr
,"Unknow¿tu¬ñ modê\"%s\"\n", *
¨gv
);

132 
	`exô
(-1);

134 } i‡(
uid
 && 
	`m©ches
(*
¨gv
, "user") == 0) {

135 *
íd
;

136 
u£r
;

138 
	`NEXT_ARG
();

139 i‡(**
¨gv
 && ((
u£r
 = 
	`°πﬁ
(*¨gv, &
íd
, 10)), !*end))

140 *
uid
 = 
u£r
;

142 
∑sswd
 *
pw
 = 
	`gëpw«m
(*
¨gv
);

143 i‡(!
pw
) {

144 
	`Ârötf
(
°dîr
, "övÆid u£∏\"%s\"\n", *
¨gv
);

145 
	`exô
(-1);

147 *
uid
 = 
pw
->
pw_uid
;

149 } i‡(
gid
 && 
	`m©ches
(*
¨gv
, "group") == 0) {

150 *
íd
;

151 
group
;

153 
	`NEXT_ARG
();

155 i‡(**
¨gv
 && ((
group
 = 
	`°πﬁ
(*¨gv, &
íd
, 10)), !*end))

156 *
gid
 = 
group
;

158 
group
 *
gr
 = 
	`gëg∫am
(*
¨gv
);

159 i‡(!
gr
) {

160 
	`Ârötf
(
°dîr
, "övÆid grou∞\"%s\"\n", *
¨gv
);

161 
	`exô
(-1);

163 *
gid
 = 
gr
->
gr_gid
;

165 } i‡(
	`m©ches
(*
¨gv
, "pi") == 0) {

166 
i‰
->
i‰_Êags
 &~
IFF_NO_PI
;

167 } i‡(
	`m©ches
(*
¨gv
, "one_queue") == 0) {

168 
i‰
->
i‰_Êags
 |
IFF_ONE_QUEUE
;

169 } i‡(
	`m©ches
(*
¨gv
, "vnet_hdr") == 0) {

170 
i‰
->
i‰_Êags
 |
IFF_VNET_HDR
;

171 } i‡(
	`m©ches
(*
¨gv
, "multi_queue") == 0) {

172 
i‰
->
i‰_Êags
 |
IFF_MULTI_QUEUE
;

173 } i‡(
	`m©ches
(*
¨gv
, "dev") == 0) {

174 
	`NEXT_ARG
();

175 
	`°∫˝y
(
i‰
->
i‰_«me
, *
¨gv
, 
IFNAMSIZ
-1);

177 i‡(
	`m©ches
(*
¨gv
, "name") == 0) {

178 
	`NEXT_ARG
();

179 } i‡(
	`m©ches
(*
¨gv
, "help") == 0)

180 
	`ußge
();

181 i‡(
i‰
->
i‰_«me
[0])

182 
	`du∑rg2
("«me", *
¨gv
);

183 
	`°∫˝y
(
i‰
->
i‰_«me
, *
¨gv
, 
IFNAMSIZ
);

185 
cou¡
++;

186 
¨gc
--; 
¨gv
++;

189 i‡(!(
i‰
->
i‰_Êags
 & 
TUN_TYPE_MASK
)) {

190 
	`Ârötf
(
°dîr
, "You failedÅo specifyáÅunnel mode\n");

195 
	}
}

198 
	$do_add
(
¨gc
, **
¨gv
)

200 
i‰eq
 
i‰
;

201 
uid_t
 
uid
 = -1;

202 
gid_t
 
gid
 = -1;

204 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, &
i‰
, &
uid
, &
gid
) < 0)

207  
	`èp_add_io˘l
(&
i‰
, 
uid
, 
gid
);

208 
	}
}

210 
	$do_dñ
(
¨gc
, **
¨gv
)

212 
i‰eq
 
i‰
;

214 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, &
i‰
, 
NULL
, NULL) < 0)

217  
	`èp_dñ_io˘l
(&
i‰
);

218 
	}
}

220 
	$ªad_¥›
(*
dev
, *
¥›
, *
vÆue
)

222 
‚ame
[
IFNAMSIZ
+25], 
buf
[80], *
ídp
;

223 
ssize_t
 
Àn
;

224 
fd
;

225 
ªsu…
;

227 
	`•rötf
(
‚ame
, "/sys/˛ass/√t/%s/%s", 
dev
, 
¥›
);

228 
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
);

229 i‡(
fd
 < 0) {

230 i‡(
	`°rcmp
(
¥›
, "tun_flags"))

231 
	`Ârötf
(
°dîr
, "›í %s: %s\n", 
‚ame
,

232 
	`°ªº‹
(
î∫o
));

235 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf)-1);

236 
	`˛o£
(
fd
);

237 i‡(
Àn
 < 0) {

238 
	`Ârötf
(
°dîr
, "ªad %s: %s", 
‚ame
, 
	`°ªº‹
(
î∫o
));

242 
buf
[
Àn
] = 0;

243 
ªsu…
 = 
	`°πﬁ
(
buf
, &
ídp
, 0);

244 i‡(*
ídp
 != '\n') {

245 
	`Ârötf
(
°dîr
, "FaûedÅÿ∑r£ %s\n", 
‚ame
);

248 *
vÆue
 = 
ªsu…
;

250 
	}
}

252 
	$¥öt_Êags
(
Êags
)

254 i‡(
Êags
 & 
IFF_TUN
)

255 
	`¥ötf
("Åun");

257 i‡(
Êags
 & 
IFF_TAP
)

258 
	`¥ötf
("Åap");

260 i‡(!(
Êags
 & 
IFF_NO_PI
))

261 
	`¥ötf
("Öi");

263 i‡(
Êags
 & 
IFF_ONE_QUEUE
)

264 
	`¥ötf
(" one_queue");

266 i‡(
Êags
 & 
IFF_VNET_HDR
)

267 
	`¥ötf
(" vnet_hdr");

269 
Êags
 &~(
IFF_TUN
|
IFF_TAP
|
IFF_NO_PI
|
IFF_ONE_QUEUE
|
IFF_VNET_HDR
);

270 i‡(
Êags
)

271 
	`¥ötf
(" UNKNOWN_FLAGS:%lx", 
Êags
);

272 
	}
}

274 
	$do_show
(
¨gc
, **
¨gv
)

276 
DIR
 *
dú
;

277 
dúít
 *
d
;

278 
Êags
, 
ow√r
 = -1, 
group
 = -1;

280 
dú
 = 
	`›ídú
("/sys/class/net");

281 i‡(!
dú
) {

282 
	`≥º‹
("opendir");

285 (
d
 = 
	`ªaddú
(
dú
))) {

286 i‡(
d
->
d_«me
[0] == '.' &&

287 (
d
->
d_«me
[1] == 0 || d->d_name[1] == '.'))

290 i‡(
	`ªad_¥›
(
d
->
d_«me
, "tun_Êags", &
Êags
))

293 
	`ªad_¥›
(
d
->
d_«me
, "ow√r", &
ow√r
);

294 
	`ªad_¥›
(
d
->
d_«me
, "group", &
group
);

296 
	`¥ötf
("%s:", 
d
->
d_«me
);

297 
	`¥öt_Êags
(
Êags
);

298 i‡(
ow√r
 != -1)

299 
	`¥ötf
(" u£∏%ld", 
ow√r
);

300 i‡(
group
 != -1)

301 
	`¥ötf
(" grou∞%ld", 
group
);

302 
	`¥ötf
("\n");

304 
	`˛o£dú
(
dú
);

306 
	}
}

308 
	$do_ùtu¡≠
(
¨gc
, **
¨gv
)

310 i‡(
¨gc
 > 0) {

311 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

312  
	`do_add
(
¨gc
-1, 
¨gv
+1);

313 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

314  
	`do_dñ
(
¨gc
-1, 
¨gv
+1);

315 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

316 
	`m©ches
(*
¨gv
, "lst") == 0 ||

317 
	`m©ches
(*
¨gv
, "list") == 0)

318  
	`do_show
(
¨gc
-1, 
¨gv
+1);

319 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

320 
	`ußge
();

322  
	`do_show
(0, 
NULL
);

324 
	`Ârötf
(
°dîr
, "Command \"%s\" is unknown,Åry \"ipÅuntap help\".\n",

325 *
¨gv
);

326 
	`exô
(-1);

327 
	}
}

	@ip/ipxfrm.c

27 
	~<Æloˇ.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/sockë.h
>

33 
	~<time.h
>

34 
	~<√tdb.h
>

35 
	~<löux/√éök.h
>

36 
	~<löux/π√éök.h
>

38 
	~"utûs.h
"

39 
	~"x‰m.h
"

40 
	~"ù_comm⁄.h
"

42 
	#STRBUF_SIZE
 (128)

	)

43 
	#STRBUF_CAT
(
buf
, 
°r
) \

45 
ª°
 = (
buf
Ë- 1 - 
	`°æí
(buf); \

46 i‡(
ª°
 > 0) { \

47 
Àn
 = 
	`°æí
(
°r
); \

48 i‡(
Àn
 > 
ª°
) \

49 
Àn
 = 
ª°
; \

50 
	`°∫ˇt
(
buf
, 
°r
, 
Àn
); \

51 
buf
[(buf) - 1] = '\0'; \

53 } 0);

	)

55 
x‰m_fûãr
 
	gfûãr
;

57 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

59 
	$ußge
()

61 
	`Ârötf
(
°dîr
,

64 
	`exô
(-1);

65 
	}
}

68 
	$x‰m_addr_m©ch
(
x‰m_addªss_t
 *
x1
, x‰m_addªss_à*
x2
, 
bôs
)

70 
__u32
 *
a1
 = (__u32 *)
x1
;

71 
__u32
 *
a2
 = (__u32 *)
x2
;

72 
w‹ds
 = 
bôs
 >> 0x05;

74 
bôs
 &= 0x1f;

76 i‡(
w‹ds
)

77 i‡(
	`memcmp
(
a1
, 
a2
, 
w‹ds
 << 2))

80 i‡(
bôs
) {

81 
__u32
 
w1
, 
w2
;

82 
__u32
 
mask
;

84 
w1
 = 
a1
[
w‹ds
];

85 
w2
 = 
a2
[
w‹ds
];

87 
mask
 = 
	`ht⁄l
((0xffffffffË<< (0x20 - 
bôs
));

89 i‡((
w1
 ^ 
w2
Ë& 
mask
)

94 
	}
}

96 
	$x‰m_x‰m¥Ÿo_is_ù£c
(
__u8
 
¥Ÿo
)

98  (
¥Ÿo
 =
IPPROTO_ESP
 ||

99 
¥Ÿo
 =
IPPROTO_AH
 ||

100 
¥Ÿo
 =
IPPROTO_COMP
);

101 
	}
}

103 
	$x‰m_x‰m¥Ÿo_is_ro
(
__u8
 
¥Ÿo
)

105  (
¥Ÿo
 =
IPPROTO_ROUTING
 ||

106 
¥Ÿo
 =
IPPROTO_DSTOPTS
);

107 
	}
}

109 
	sty≥ít
 {

110 c⁄° *
	mt_«me
;

111 
	mt_ty≥
;

114 c⁄° 
ty≥ít
 
	gx‰m¥Ÿo_ty≥s
[]= {

115 { "e•", 
IPPROTO_ESP
 }, { "ah", 
IPPROTO_AH
 }, { "comp", 
IPPROTO_COMP
 },

116 { "rouã2", 
IPPROTO_ROUTING
 }, { "hao", 
IPPROTO_DSTOPTS
 },

117 { "ù£c-™y", 
IPSEC_PROTO_ANY
 },

118 { 
NULL
, -1 }

121 
	$x‰m_x‰m¥Ÿo_gëby«me
(*
«me
)

123 
i
;

125 
i
 = 0; ; i++) {

126 c⁄° 
ty≥ít
 *
t
 = &
x‰m¥Ÿo_ty≥s
[
i
];

127 i‡(!
t
->
t_«me
 ||Å->
t_ty≥
 == -1)

130 i‡(
	`°rcmp
(
t
->
t_«me
, 
«me
) == 0)

131  
t
->
t_ty≥
;

135 
	}
}

137 c⁄° *
	$°rxf_x‰m¥Ÿo
(
__u8
 
¥Ÿo
)

139 
°r
[16];

140 
i
;

142 
i
 = 0; ; i++) {

143 c⁄° 
ty≥ít
 *
t
 = &
x‰m¥Ÿo_ty≥s
[
i
];

144 i‡(!
t
->
t_«me
 ||Å->
t_ty≥
 == -1)

147 i‡(
t
->
t_ty≥
 =
¥Ÿo
)

148  
t
->
t_«me
;

151 
	`•rötf
(
°r
, "%u", 
¥Ÿo
);

152  
°r
;

153 
	}
}

155 c⁄° 
ty≥ít
 
	gÆgo_ty≥s
[]= {

156 { "íc", 
XFRMA_ALG_CRYPT
 }, { "auth", 
XFRMA_ALG_AUTH
 },

157 { "comp", 
XFRMA_ALG_COMP
 }, { "´ad", 
XFRMA_ALG_AEAD
 },

158 { "auth-åunc", 
XFRMA_ALG_AUTH_TRUNC
 },

159 { 
NULL
, -1 }

162 
	$x‰m_ÆgŸy≥_gëby«me
(*
«me
)

164 
i
;

166 
i
 = 0; ; i++) {

167 c⁄° 
ty≥ít
 *
t
 = &
Ægo_ty≥s
[
i
];

168 i‡(!
t
->
t_«me
 ||Å->
t_ty≥
 == -1)

171 i‡(
	`°rcmp
(
t
->
t_«me
, 
«me
) == 0)

172  
t
->
t_ty≥
;

176 
	}
}

178 c⁄° *
	$°rxf_ÆgŸy≥
(
ty≥
)

180 
°r
[32];

181 
i
;

183 
i
 = 0; ; i++) {

184 c⁄° 
ty≥ít
 *
t
 = &
Ægo_ty≥s
[
i
];

185 i‡(!
t
->
t_«me
 ||Å->
t_ty≥
 == -1)

188 i‡(
t
->
t_ty≥
 =
ty≥
)

189  
t
->
t_«me
;

192 
	`•rötf
(
°r
, "%d", 
ty≥
);

193  
°r
;

194 
	}
}

196 c⁄° *
	$°rxf_mask8
(
__u8
 
mask
)

198 
°r
[16];

199 c⁄° 
¢
 = (
mask
) * 8 - 1;

200 
__u8
 
b
;

201 
i
 = 0;

203 
b
 = (1 << 
¢
); b > 0; b >>= 1)

204 
°r
[
i
++] = ((
b
 & 
mask
) ? '1' : '0');

205 
°r
[
i
] = '\0';

207  
°r
;

208 
	}
}

210 c⁄° *
	$°rxf_mask32
(
__u32
 
mask
)

212 
°r
[16];

214 
	`•rötf
(
°r
, "%.8x", 
mask
);

216  
°r
;

217 
	}
}

219 c⁄° *
	$°rxf_sh¨e
(
__u8
 
sh¨e
)

221 
°r
[32];

223 
sh¨e
) {

224 
XFRM_SHARE_ANY
:

225 
	`°r˝y
(
°r
, "any");

227 
XFRM_SHARE_SESSION
:

228 
	`°r˝y
(
°r
, "session");

230 
XFRM_SHARE_USER
:

231 
	`°r˝y
(
°r
, "user");

233 
XFRM_SHARE_UNIQUE
:

234 
	`°r˝y
(
°r
, "unique");

237 
	`•rötf
(
°r
, "%u", 
sh¨e
);

241  
°r
;

242 
	}
}

244 c⁄° *
	$°rxf_¥Ÿo
(
__u8
 
¥Ÿo
)

246 
buf
[32];

247 
¥Ÿ€¡
 *
µ
;

248 c⁄° *
p
;

250 
µ
 = 
	`gë¥Ÿobynumbî
(
¥Ÿo
);

251 i‡(
µ
)

252 
p
 = 
µ
->
p_«me
;

254 
	`•rötf
(
buf
, "%u", 
¥Ÿo
);

255 
p
 = 
buf
;

258  
p
;

259 
	}
}

261 c⁄° *
	$°rxf_±y≥
(
__u8
 
±y≥
)

263 
°r
[16];

265 
±y≥
) {

266 
XFRM_POLICY_TYPE_MAIN
:

267 
	`°r˝y
(
°r
, "main");

269 
XFRM_POLICY_TYPE_SUB
:

270 
	`°r˝y
(
°r
, "sub");

273 
	`•rötf
(
°r
, "%u", 
±y≥
);

277  
°r
;

278 
	}
}

280 
	$x‰m_id_öfo_¥öt
(
x‰m_addªss_t
 *
ßddr
, 
x‰m_id
 *
id
,

281 
__u8
 
mode
, 
__u32
 
ªqid
, 
__u16
 
Ámûy
, 
f‹˚_•i
,

282 
FILE
 *
Â
, c⁄° *
¥efix
, c⁄° *
tôÀ
)

284 
abuf
[256];

286 i‡(
tôÀ
)

287 
	`Âuts
(
tôÀ
, 
Â
);

289 
	`mem£t
(
abuf
, '\0', (abuf));

290 
	`Ârötf
(
Â
, "§¯%†", 
	`π_addr_n2a
(
Ámûy
, (*
ßddr
),

291 
ßddr
, 
abuf
, (abuf)));

292 
	`mem£t
(
abuf
, '\0', (abuf));

293 
	`Ârötf
(
Â
, "d° %s", 
	`π_addr_n2a
(
Ámûy
, (
id
->
daddr
),

294 &
id
->
daddr
, 
abuf
, (abuf)));

295 
	`Ârötf
(
Â
, "%s", 
_SL_
);

297 i‡(
¥efix
)

298 
	`Âuts
(
¥efix
, 
Â
);

299 
	`Ârötf
(
Â
, "\t");

301 
	`Ârötf
(
Â
, "¥Ÿÿ%†", 
	`°rxf_x‰m¥Ÿo
(
id
->
¥Ÿo
));

303 i‡(
show_°©s
 > 0 || 
f‹˚_•i
 || 
id
->
•i
) {

304 
__u32
 
•i
 = 
	`¡ohl
(
id
->spi);

305 
	`Ârötf
(
Â
, "•ò0x%08x", 
•i
);

306 i‡(
show_°©s
 > 0)

307 
	`Ârötf
(
Â
, "(%u)", 
•i
);

308 
	`Ârötf
(
Â
, " ");

311 
	`Ârötf
(
Â
, "ªqid %u", 
ªqid
);

312 i‡(
show_°©s
 > 0)

313 
	`Ârötf
(
Â
, "(0x%08x)", 
ªqid
);

314 
	`Ârötf
(
Â
, " ");

316 
	`Ârötf
(
Â
, "mode ");

317 
mode
) {

318 
XFRM_MODE_TRANSPORT
:

319 
	`Ârötf
(
Â
, "transport");

321 
XFRM_MODE_TUNNEL
:

322 
	`Ârötf
(
Â
, "tunnel");

324 
XFRM_MODE_ROUTEOPTIMIZATION
:

325 
	`Ârötf
(
Â
, "ro");

327 
XFRM_MODE_IN_TRIGGER
:

328 
	`Ârötf
(
Â
, "in_trigger");

330 
XFRM_MODE_BEET
:

331 
	`Ârötf
(
Â
, "beet");

334 
	`Ârötf
(
Â
, "%u", 
mode
);

337 
	`Ârötf
(
Â
, "%s", 
_SL_
);

338 
	}
}

340 c⁄° *
	$°rxf_limô
(
__u64
 
limô
)

342 
°r
[32];

343 i‡(
limô
 =
XFRM_INF
)

344 
	`°r˝y
(
°r
, "(INF)");

346 
	`•rötf
(
°r
, "%Œu", (Ë
limô
);

348  
°r
;

349 
	}
}

351 
	$x‰m_°©s_¥öt
(
x‰m_°©s
 *
s
, 
FILE
 *
Â
, c⁄° *
¥efix
)

353 i‡(
¥efix
)

354 
	`Âuts
(
¥efix
, 
Â
);

355 
	`Ârötf
(
Â
, "°©s:%s", 
_SL_
);

357 i‡(
¥efix
)

358 
	`Âuts
(
¥efix
, 
Â
);

359 
	`Ârötf
(
Â
, "Ñeplay-window %uÑeplay %u failed %u%s",

360 
s
->
ª∂ay_wödow
, s->
ª∂ay
, s->
öãgrôy_Áûed
, 
_SL_
);

361 
	}
}

363 c⁄° *
	$°rxf_time
(
__u64
 
time
)

365 
°r
[32];

367 i‡(
time
 == 0)

368 
	`°r˝y
(
°r
, "-");

370 
time_t
 
t
;

371 
tm
 *
ç
;

376 
t
 = ()
time
;

377 
ç
 = 
	`loˇ…ime
(&
t
);

379 
	`°r·ime
(
°r
, (°r), "%Y-%m-%d %T", 
ç
);

382  
°r
;

383 
	}
}

385 
	$x‰m_li„time_¥öt
(
x‰m_li„time_cfg
 *
cfg
,

386 
x‰m_li„time_cur
 *
cur
,

387 
FILE
 *
Â
, c⁄° *
¥efix
)

389 i‡(
cfg
) {

390 i‡(
¥efix
)

391 
	`Âuts
(
¥efix
, 
Â
);

392 
	`Ârötf
(
Â
, "li„timêc⁄fig:%s",
_SL_
);

394 i‡(
¥efix
)

395 
	`Âuts
(
¥efix
, 
Â
);

396 
	`Ârötf
(
Â
, "Üimit: soft %s(bytes),",

397 
	`°rxf_limô
(
cfg
->
so·_byã_limô
));

398 
	`Ârötf
(
Â
, " hard %s(bytes)%s",

399 
	`°rxf_limô
(
cfg
->
h¨d_byã_limô
), 
_SL_
);

401 i‡(
¥efix
)

402 
	`Âuts
(
¥efix
, 
Â
);

403 
	`Ârötf
(
Â
, "Üimit: soft %s(packets),",

404 
	`°rxf_limô
(
cfg
->
so·_∑ckë_limô
));

405 
	`Ârötf
(
Â
, " hard %s(packets)%s",

406 
	`°rxf_limô
(
cfg
->
h¨d_∑ckë_limô
), 
_SL_
);

408 i‡(
¥efix
)

409 
	`Âuts
(
¥efix
, 
Â
);

410 
	`Ârötf
(
Â
, "Éxpireádd: soft %llu(sec), hard %llu(sec)%s",

411 (Ë
cfg
->
so·_add_expúes_£c⁄ds
,

412 (Ë
cfg
->
h¨d_add_expúes_£c⁄ds
,

413 
_SL_
);

415 i‡(
¥efix
)

416 
	`Âuts
(
¥efix
, 
Â
);

417 
	`Ârötf
(
Â
, "Éxpire use: soft %llu(sec), hard %llu(sec)%s",

418 (Ë
cfg
->
so·_u£_expúes_£c⁄ds
,

419 (Ë
cfg
->
h¨d_u£_expúes_£c⁄ds
,

420 
_SL_
);

422 i‡(
cur
) {

423 i‡(
¥efix
)

424 
	`Âuts
(
¥efix
, 
Â
);

425 
	`Ârötf
(
Â
, "li„timêcuºít:%s", 
_SL_
);

427 i‡(
¥efix
)

428 
	`Âuts
(
¥efix
, 
Â
);

429 
	`Ârötf
(
Â
, " %llu(bytes), %llu(packets)%s",

430 (Ë
cur
->
byãs
,

431 (Ë
cur
->
∑ckës
,

432 
_SL_
);

434 i‡(
¥efix
)

435 
	`Âuts
(
¥efix
, 
Â
);

436 
	`Ârötf
(
Â
, "ádd %†", 
	`°rxf_time
(
cur
->
add_time
));

437 
	`Ârötf
(
Â
, "u£ %s%s", 
	`°rxf_time
(
cur
->
u£_time
), 
_SL_
);

439 
	}
}

441 
	$x‰m_£À˘‹_¥öt
(
x‰m_£À˘‹
 *
£l
, 
__u16
 
Ámûy
,

442 
FILE
 *
Â
, c⁄° *
¥efix
)

444 
abuf
[256];

445 
__u16
 
f
;

447 
f
 = 
£l
->
Ámûy
;

448 i‡(
f
 =
AF_UNSPEC
)

449 
f
 = 
Ámûy
;

450 i‡(
f
 =
AF_UNSPEC
)

451 
f
 = 
¥e„ºed_Ámûy
;

453 i‡(
¥efix
)

454 
	`Âuts
(
¥efix
, 
Â
);

456 
	`mem£t
(
abuf
, '\0', (abuf));

457 
	`Ârötf
(
Â
, "src %s/%u ",

458 
	`π_addr_n2a
(
f
, (
£l
->
ßddr
), &sel->saddr,

459 
abuf
, (abuf)),

460 
£l
->
¥efixÀn_s
);

462 
	`mem£t
(
abuf
, '\0', (abuf));

463 
	`Ârötf
(
Â
, "dst %s/%u ",

464 
	`π_addr_n2a
(
f
, (
£l
->
daddr
), &sel->daddr,

465 
abuf
, (abuf)),

466 
£l
->
¥efixÀn_d
);

468 i‡(
£l
->
¥Ÿo
)

469 
	`Ârötf
(
Â
, "¥Ÿÿ%†", 
	`°rxf_¥Ÿo
(
£l
->
¥Ÿo
));

470 
£l
->
¥Ÿo
) {

471 
IPPROTO_TCP
:

472 
IPPROTO_UDP
:

473 
IPPROTO_SCTP
:

474 
IPPROTO_DCCP
:

476 i‡(
£l
->
•‹t_mask
)

477 
	`Ârötf
(
Â
, "•‹à%u ", 
	`¡ohs
(
£l
->
•‹t
));

478 i‡(
£l
->
dp‹t_mask
)

479 
	`Ârötf
(
Â
, "dp‹à%u ", 
	`¡ohs
(
£l
->
dp‹t
));

481 
IPPROTO_ICMP
:

482 
IPPROTO_ICMPV6
:

484 i‡(
£l
->
•‹t_mask
)

485 
	`Ârötf
(
Â
, "ty≥ %u ", 
	`¡ohs
(
£l
->
•‹t
));

486 i‡(
£l
->
dp‹t_mask
)

487 
	`Ârötf
(
Â
, "codê%u ", 
	`¡ohs
(
£l
->
dp‹t
));

489 
IPPROTO_GRE
:

490 i‡(
£l
->
•‹t_mask
 || sñ->
dp‹t_mask
)

491 
	`Ârötf
(
Â
, "key %u ",

492 (((
__u32
)
	`¡ohs
(
£l
->
•‹t
)) << 16) +

493 
	`¡ohs
(
£l
->
dp‹t
));

495 
IPPROTO_MH
:

496 i‡(
£l
->
•‹t_mask
)

497 
	`Ârötf
(
Â
, "ty≥ %u ", 
	`¡ohs
(
£l
->
•‹t
));

498 i‡(
£l
->
dp‹t_mask
) {

499 i‡(
show_°©s
 > 0)

500 
	`Ârötf
(
Â
, "(dp‹tË0x%.4x ", 
£l
->
dp‹t
);

505 i‡(
£l
->
ifödex
 > 0)

506 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
£l
->
ifödex
));

508 i‡(
show_°©s
 > 0)

509 
	`Ârötf
(
Â
, "uid %u", 
£l
->
u£r
);

511 
	`Ârötf
(
Â
, "%s", 
_SL_
);

512 
	}
}

514 
	$__x‰m_Ægo_¥öt
(
x‰m_Ægo
 *
Ægo
, 
ty≥
, 
Àn
,

515 
FILE
 *
Â
, c⁄° *
¥efix
, 
√wlöe
)

517 
keyÀn
;

518 
i
;

520 i‡(
¥efix
)

521 
	`Âuts
(
¥efix
, 
Â
);

523 
	`Ârötf
(
Â
, "%†", 
	`°rxf_ÆgŸy≥
(
ty≥
));

525 i‡(
Àn
 < (*
Ægo
)) {

526 
	`Ârötf
(
Â
, "(ERRORÅruncated)");

527 
fö
;

529 
Àn
 -(*
Ægo
);

531 
	`Ârötf
(
Â
, "%†", 
Ægo
->
Æg_«me
);

533 
keyÀn
 = 
Ægo
->
Æg_key_Àn
 / 8;

534 i‡(
Àn
 < 
keyÀn
) {

535 
	`Ârötf
(
Â
, "(ERRORÅruncated)");

536 
fö
;

539 i‡(
keyÀn
 > 0) {

540 
	`Ârötf
(
Â
, "0x");

541 
i
 = 0; i < 
keyÀn
; i ++)

542 
	`Ârötf
(
Â
, "%.2x", ()
Ægo
->
Æg_key
[
i
]);

544 i‡(
show_°©s
 > 0)

545 
	`Ârötf
(
Â
, " (%d bôs)", 
Ægo
->
Æg_key_Àn
);

548 
fö
:

549 i‡(
√wlöe
)

550 
	`Ârötf
(
Â
, "%s", 
_SL_
);

551 
	}
}

553 
ölöe
 
	$x‰m_Ægo_¥öt
(
x‰m_Ægo
 *
Ægo
, 
ty≥
, 
Àn
,

554 
FILE
 *
Â
, c⁄° *
¥efix
)

556  
	`__x‰m_Ægo_¥öt
(
Ægo
, 
ty≥
, 
Àn
, 
Â
, 
¥efix
, 1);

557 
	}
}

559 
	$x‰m_´ad_¥öt
(
x‰m_Ægo_´ad
 *
Ægo
, 
Àn
,

560 
FILE
 *
Â
, c⁄° *
¥efix
)

562 
x‰m_Ægo
 *
ba£_Ægo
 = 
	`Æloˇ
((*ba£_ÆgoË+ 
Ægo
->
Æg_key_Àn
 / 8);

564 
	`mem˝y
(
ba£_Ægo
->
Æg_«me
, 
Ægo
->alg_name, (base_algo->alg_name));

565 
ba£_Ægo
->
Æg_key_Àn
 = 
Ægo
->alg_key_len;

566 
	`mem˝y
(
ba£_Ægo
->
Æg_key
, 
Ægo
->Æg_key,álgo->
Æg_key_Àn
 / 8);

568 
	`__x‰m_Ægo_¥öt
(
ba£_Ægo
, 
XFRMA_ALG_AEAD
, 
Àn
, 
Â
, 
¥efix
, 0);

570 
	`Ârötf
(
Â
, " %d", 
Ægo
->
Æg_icv_Àn
);

572 
	`Ârötf
(
Â
, "%s", 
_SL_
);

573 
	}
}

575 
	$x‰m_auth_åunc_¥öt
(
x‰m_Ægo_auth
 *
Ægo
, 
Àn
,

576 
FILE
 *
Â
, c⁄° *
¥efix
)

578 
x‰m_Ægo
 *
ba£_Ægo
 = 
	`Æloˇ
((*ba£_ÆgoË+ 
Ægo
->
Æg_key_Àn
 / 8);

580 
	`mem˝y
(
ba£_Ægo
->
Æg_«me
, 
Ægo
->alg_name, (base_algo->alg_name));

581 
ba£_Ægo
->
Æg_key_Àn
 = 
Ægo
->alg_key_len;

582 
	`mem˝y
(
ba£_Ægo
->
Æg_key
, 
Ægo
->Æg_key,álgo->
Æg_key_Àn
 / 8);

584 
	`__x‰m_Ægo_¥öt
(
ba£_Ægo
, 
XFRMA_ALG_AUTH_TRUNC
, 
Àn
, 
Â
, 
¥efix
, 0);

586 
	`Ârötf
(
Â
, " %d", 
Ægo
->
Æg_åunc_Àn
);

588 
	`Ârötf
(
Â
, "%s", 
_SL_
);

589 
	}
}

591 
	$x‰m_tm∂_¥öt
(
x‰m_u£r_tm∂
 *
tm∂s
, 
Àn
,

592 
FILE
 *
Â
, c⁄° *
¥efix
)

594 
¡m∂s
 = 
Àn
 / (
x‰m_u£r_tm∂
);

595 
i
;

597 i‡(
¡m∂s
 <= 0) {

598 i‡(
¥efix
)

599 
	`Âuts
(
¥efix
, 
Â
);

600 
	`Ârötf
(
Â
, "(ERROR \"tmpl\"Åruncated)");

601 
	`Ârötf
(
Â
, "%s", 
_SL_
);

605 
i
 = 0; i < 
¡m∂s
; i++) {

606 
x‰m_u£r_tm∂
 *
tm∂
 = &
tm∂s
[
i
];

608 i‡(
¥efix
)

609 
	`Âuts
(
¥efix
, 
Â
);

611 
	`x‰m_id_öfo_¥öt
(&
tm∂
->
ßddr
, &tm∂->
id
,Åm∂->
mode
,

612 
tm∂
->
ªqid
,Åm∂->
Ámûy
, 0, 
Â
, 
¥efix
, "tmpl ");

614 i‡(
show_°©s
 > 0 || 
tm∂
->
›ti⁄Æ
) {

615 i‡(
¥efix
)

616 
	`Âuts
(
¥efix
, 
Â
);

617 
	`Ârötf
(
Â
, "\t");

618 
tm∂
->
›ti⁄Æ
) {

620 i‡(
show_°©s
 > 0)

621 
	`Ârötf
(
Â
, "levelÑequired ");

624 
	`Ârötf
(
Â
, "level use ");

627 
	`Ârötf
(
Â
, "Àvñ %u ", 
tm∂
->
›ti⁄Æ
);

631 i‡(
show_°©s
 > 0)

632 
	`Ârötf
(
Â
, "sh¨ê%†", 
	`°rxf_sh¨e
(
tm∂
->
sh¨e
));

634 
	`Ârötf
(
Â
, "%s", 
_SL_
);

637 i‡(
show_°©s
 > 0) {

638 i‡(
¥efix
)

639 
	`Âuts
(
¥efix
, 
Â
);

640 
	`Ârötf
(
Â
, "\t");

641 
	`Ârötf
(
Â
, "%s-mask %s ",

642 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_CRYPT
),

643 
	`°rxf_mask32
(
tm∂
->
ólgos
));

644 
	`Ârötf
(
Â
, "%s-mask %s ",

645 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AUTH
),

646 
	`°rxf_mask32
(
tm∂
->
Ølgos
));

647 
	`Ârötf
(
Â
, "%s-mask %s",

648 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_COMP
),

649 
	`°rxf_mask32
(
tm∂
->
ˇlgos
));

651 
	`Ârötf
(
Â
, "%s", 
_SL_
);

654 
	}
}

656 
	$x‰m_∑r£_m¨k
(
x‰m_m¨k
 *
m¨k
, *
¨g˝
, ***
¨gvp
)

658 
¨gc
 = *
¨g˝
;

659 **
¨gv
 = *
¨gvp
;

661 
	`NEXT_ARG
();

662 i‡(
	`gë_u32
(&
m¨k
->
v
, *
¨gv
, 0)) {

663 
	`öv¨g
("MARK vÆuêi†övÆid\n", *
¨gv
);

665 i‡(
¨gc
 > 1)

666 
	`NEXT_ARG
();

668 
m¨k
->
m
 = 0xffffffff;

669 
d⁄e
;

672 i‡(
	`°rcmp
(*
¨gv
, "mask") == 0) {

673 
	`NEXT_ARG
();

674 i‡(
	`gë_u32
(&
m¨k
->
m
, *
¨gv
, 0)) {

675 
	`öv¨g
("MASK vÆuêi†övÆid\n", *
¨gv
);

678 
m¨k
->
m
 = 0xffffffff;

679 
	`PREV_ARG
();

682 
d⁄e
:

683 *
¨g˝
 = 
¨gc
;

684 *
¨gvp
 = 
¨gv
;

687 
	}
}

689 
	$x‰m_x‰ma_¥öt
(
π©å
 *
tb
[], 
__u16
 
Ámûy
,

690 
FILE
 *
Â
, c⁄° *
¥efix
)

692 i‡(
tb
[
XFRMA_MARK
]) {

693 
π©å
 *
πa
 = 
tb
[
XFRMA_MARK
];

694 
x‰m_m¨k
 *
m
 = (x‰m_m¨k *Ë
	`RTA_DATA
(
πa
);

695 
	`Ârötf
(
Â
, "\tm¨k %#x/%#x", 
m
->
v
, m->m);

696 
	`Ârötf
(
Â
, "%s", 
_SL_
);

699 i‡(
tb
[
XFRMA_ALG_AUTH
] && !tb[
XFRMA_ALG_AUTH_TRUNC
]) {

700 
π©å
 *
πa
 = 
tb
[
XFRMA_ALG_AUTH
];

701 
	`x‰m_Ægo_¥öt
((
x‰m_Ægo
 *Ë
	`RTA_DATA
(
πa
),

702 
XFRMA_ALG_AUTH
, 
	`RTA_PAYLOAD
(
πa
), 
Â
, 
¥efix
);

705 i‡(
tb
[
XFRMA_ALG_AUTH_TRUNC
]) {

706 
π©å
 *
πa
 = 
tb
[
XFRMA_ALG_AUTH_TRUNC
];

707 
	`x‰m_auth_åunc_¥öt
((
x‰m_Ægo_auth
 *Ë
	`RTA_DATA
(
πa
),

708 
	`RTA_PAYLOAD
(
πa
), 
Â
, 
¥efix
);

711 i‡(
tb
[
XFRMA_ALG_AEAD
]) {

712 
π©å
 *
πa
 = 
tb
[
XFRMA_ALG_AEAD
];

713 
	`x‰m_´ad_¥öt
((
x‰m_Ægo_´ad
 *)
	`RTA_DATA
(
πa
),

714 
	`RTA_PAYLOAD
(
πa
), 
Â
, 
¥efix
);

717 i‡(
tb
[
XFRMA_ALG_CRYPT
]) {

718 
π©å
 *
πa
 = 
tb
[
XFRMA_ALG_CRYPT
];

719 
	`x‰m_Ægo_¥öt
((
x‰m_Ægo
 *Ë
	`RTA_DATA
(
πa
),

720 
XFRMA_ALG_CRYPT
, 
	`RTA_PAYLOAD
(
πa
), 
Â
, 
¥efix
);

723 i‡(
tb
[
XFRMA_ALG_COMP
]) {

724 
π©å
 *
πa
 = 
tb
[
XFRMA_ALG_COMP
];

725 
	`x‰m_Ægo_¥öt
((
x‰m_Ægo
 *Ë
	`RTA_DATA
(
πa
),

726 
XFRMA_ALG_COMP
, 
	`RTA_PAYLOAD
(
πa
), 
Â
, 
¥efix
);

729 i‡(
tb
[
XFRMA_ENCAP
]) {

730 
x‰m_íˇp_tm∂
 *
e
;

731 
abuf
[256];

733 i‡(
¥efix
)

734 
	`Âuts
(
¥efix
, 
Â
);

735 
	`Ârötf
(
Â
, "encap ");

737 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_ENCAP
]Ë< (*
e
)) {

738 
	`Ârötf
(
Â
, "(ERRORÅruncated)");

739 
	`Ârötf
(
Â
, "%s", 
_SL_
);

742 
e
 = (
x‰m_íˇp_tm∂
 *Ë
	`RTA_DATA
(
tb
[
XFRMA_ENCAP
]);

744 
	`Ârötf
(
Â
, "type ");

745 
e
->
íˇp_ty≥
) {

747 
	`Ârötf
(
Â
, "espinudp-nonike ");

750 
	`Ârötf
(
Â
, "espinudp ");

753 
	`Ârötf
(
Â
, "%u ", 
e
->
íˇp_ty≥
);

756 
	`Ârötf
(
Â
, "•‹à%u ", 
	`¡ohs
(
e
->
íˇp_•‹t
));

757 
	`Ârötf
(
Â
, "dp‹à%u ", 
	`¡ohs
(
e
->
íˇp_dp‹t
));

759 
	`mem£t
(
abuf
, '\0', (abuf));

760 
	`Ârötf
(
Â
, "addr %s",

761 
	`π_addr_n2a
(
Ámûy
, (
e
->
íˇp_ﬂ
), &e->encap_oa,

762 
abuf
, (abuf)));

763 
	`Ârötf
(
Â
, "%s", 
_SL_
);

766 i‡(
tb
[
XFRMA_TMPL
]) {

767 
π©å
 *
πa
 = 
tb
[
XFRMA_TMPL
];

768 
	`x‰m_tm∂_¥öt
((
x‰m_u£r_tm∂
 *Ë
	`RTA_DATA
(
πa
),

769 
	`RTA_PAYLOAD
(
πa
), 
Â
, 
¥efix
);

772 i‡(
tb
[
XFRMA_COADDR
]) {

773 
abuf
[256];

774 
x‰m_addªss_t
 *
cﬂ
;

776 i‡(
¥efix
)

777 
	`Âuts
(
¥efix
, 
Â
);

778 
	`Ârötf
(
Â
, "coa ");

780 
cﬂ
 = (
x‰m_addªss_t
 *)
	`RTA_DATA
(
tb
[
XFRMA_COADDR
]);

782 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_COADDR
]Ë< (*
cﬂ
)) {

783 
	`Ârötf
(
Â
, "(ERRORÅruncated)");

784 
	`Ârötf
(
Â
, "%s", 
_SL_
);

788 
	`mem£t
(
abuf
, '\0', (abuf));

789 
	`Ârötf
(
Â
, "%s",

790 
	`π_addr_n2a
(
Ámûy
, (*
cﬂ
), coa,

791 
abuf
, (abuf)));

792 
	`Ârötf
(
Â
, "%s", 
_SL_
);

795 i‡(
tb
[
XFRMA_LASTUSED
]) {

796 
__u64
 
œ°u£d
;

798 i‡(
¥efix
)

799 
	`Âuts
(
¥efix
, 
Â
);

800 
	`Ârötf
(
Â
, "lastused ");

802 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_LASTUSED
]Ë< (
œ°u£d
)) {

803 
	`Ârötf
(
Â
, "(ERRORÅruncated)");

804 
	`Ârötf
(
Â
, "%s", 
_SL_
);

808 
œ°u£d
 = 
	`πa_gë©å_u64
(
tb
[
XFRMA_LASTUSED
]);

810 
	`Ârötf
(
Â
, "%s", 
	`°rxf_time
(
œ°u£d
));

811 
	`Ârötf
(
Â
, "%s", 
_SL_
);

814 i‡(
tb
[
XFRMA_REPLAY_VAL
]) {

815 
x‰m_ª∂ay_°©e
 *
ª∂ay
;

817 i‡(
¥efix
)

818 
	`Âuts
(
¥efix
, 
Â
);

819 
	`Ârötf
(
Â
, "anti-replay context: ");

821 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_REPLAY_VAL
]Ë< (*
ª∂ay
)) {

822 
	`Ârötf
(
Â
, "(ERRORÅruncated)");

823 
	`Ârötf
(
Â
, "%s", 
_SL_
);

827 
ª∂ay
 = (
x‰m_ª∂ay_°©e
 *)
	`RTA_DATA
(
tb
[
XFRMA_REPLAY_VAL
]);

828 
	`Ârötf
(
Â
, "seq 0x%x, oseq 0x%x, bitmap 0x%08x",

829 
ª∂ay
->
£q
,Ñïœy->
o£q
,Ñïœy->
bôm≠
);

830 
	`Ârötf
(
Â
, "%s", 
_SL_
);

833 i‡(
tb
[
XFRMA_REPLAY_ESN_VAL
]) {

834 
x‰m_ª∂ay_°©e_e¢
 *
ª∂ay
;

835 
i
, 
j
;

837 i‡(
¥efix
)

838 
	`Âuts
(
¥efix
, 
Â
);

839 
	`Ârötf
(
Â
, "anti-replayÉsn context:");

841 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_REPLAY_ESN_VAL
]Ë< (*
ª∂ay
)) {

842 
	`Ârötf
(
Â
, "(ERRORÅruncated)");

843 
	`Ârötf
(
Â
, "%s", 
_SL_
);

846 
	`Ârötf
(
Â
, "%s", 
_SL_
);

848 
ª∂ay
 = (
x‰m_ª∂ay_°©e_e¢
 *)
	`RTA_DATA
(
tb
[
XFRMA_REPLAY_ESN_VAL
]);

849 i‡(
¥efix
)

850 
	`Âuts
(
¥efix
, 
Â
);

851 
	`Ârötf
(
Â
, " seq-hi 0x%x, seq 0x%x, oseq-hi 0x%0x, oseq 0x%0x",

852 
ª∂ay
->
£q_hi
,Ñïœy->
£q
,Ñïœy->
o£q_hi
,

853 
ª∂ay
->
o£q
);

854 
	`Ârötf
(
Â
, "%s", 
_SL_
);

855 i‡(
¥efix
)

856 
	`Âuts
(
¥efix
, 
Â
);

857 
	`Ârötf
(
Â
, "Ñeplay_window %u, bitmap-length %u",

858 
ª∂ay
->
ª∂ay_wödow
,Ñïœy->
bmp_Àn
);

859 
i
 = 
ª∂ay
->
bmp_Àn
, 
j
 = 0; i; i--) {

860 i‡(
j
++ % 8 == 0) {

861 
	`Ârötf
(
Â
, "%s", 
_SL_
);

862 i‡(
¥efix
)

863 
	`Âuts
(
¥efix
, 
Â
);

864 
	`Ârötf
(
Â
, " ");

866 
	`Ârötf
(
Â
, "%08x ", 
ª∂ay
->
bmp
[
i
 - 1]);

868 
	`Ârötf
(
Â
, "%s", 
_SL_
);

870 
	}
}

872 
	$x‰m_£À˘‹_iszîo
(
x‰m_£À˘‹
 *
s
)

874 
x‰m_£À˘‹
 
s0
;

876 
	`mem£t
(&
s0
, 0, (s0));

878  (
	`memcmp
(&
s0
, 
s
, (s0)) == 0);

879 
	}
}

881 
	$x‰m_°©e_öfo_¥öt
(
x‰m_u£rß_öfo
 *
xsöfo
,

882 
π©å
 *
tb
[], 
FILE
 *
Â
, c⁄° *
¥efix
,

883 c⁄° *
tôÀ
)

885 
buf
[
STRBUF_SIZE
];

886 
f‹˚_•i
 = 
	`x‰m_x‰m¥Ÿo_is_ù£c
(
xsöfo
->
id
.
¥Ÿo
);

888 
	`mem£t
(
buf
, '\0', (buf));

890 
	`x‰m_id_öfo_¥öt
(&
xsöfo
->
ßddr
, &xsöfo->
id
, xsöfo->
mode
,

891 
xsöfo
->
ªqid
, xsöfo->
Ámûy
, 
f‹˚_•i
, 
Â
,

892 
¥efix
, 
tôÀ
);

894 i‡(
¥efix
)

895 
	`STRBUF_CAT
(
buf
, 
¥efix
);

896 
	`STRBUF_CAT
(
buf
, "\t");

898 
	`Âuts
(
buf
, 
Â
);

899 
	`Ârötf
(
Â
, "ª∂ay-wödow %u ", 
xsöfo
->
ª∂ay_wödow
);

900 i‡(
show_°©s
 > 0)

901 
	`Ârötf
(
Â
, "£q 0x%08u ", 
xsöfo
->
£q
);

902 i‡(
show_°©s
 > 0 || 
xsöfo
->
Êags
) {

903 
__u8
 
Êags
 = 
xsöfo
->flags;

905 
	`Ârötf
(
Â
, "flag ");

906 
	`XFRM_FLAG_PRINT
(
Â
, 
Êags
, 
XFRM_STATE_NOECN
, "noecn");

907 
	`XFRM_FLAG_PRINT
(
Â
, 
Êags
, 
XFRM_STATE_DECAP_DSCP
, "decap-dscp");

908 
	`XFRM_FLAG_PRINT
(
Â
, 
Êags
, 
XFRM_STATE_NOPMTUDISC
, "nopmtudisc");

909 
	`XFRM_FLAG_PRINT
(
Â
, 
Êags
, 
XFRM_STATE_WILDRECV
, "wildrecv");

910 
	`XFRM_FLAG_PRINT
(
Â
, 
Êags
, 
XFRM_STATE_ICMP
, "icmp");

911 
	`XFRM_FLAG_PRINT
(
Â
, 
Êags
, 
XFRM_STATE_AF_UNSPEC
, "af-unspec");

912 
	`XFRM_FLAG_PRINT
(
Â
, 
Êags
, 
XFRM_STATE_ALIGN4
, "align4");

913 
	`XFRM_FLAG_PRINT
(
Â
, 
Êags
, 
XFRM_STATE_ESN
, "esn");

914 i‡(
Êags
)

915 
	`Ârötf
(
Â
, "%x", 
Êags
);

917 i‡(
show_°©s
 > 0 && 
tb
[
XFRMA_SA_EXTRA_FLAGS
]) {

918 
__u32
 
exåa_Êags
 = *(__u32 *)
	`RTA_DATA
(
tb
[
XFRMA_SA_EXTRA_FLAGS
]);

920 
	`Ârötf
(
Â
, "extra_flag ");

921 
	`XFRM_FLAG_PRINT
(
Â
, 
exåa_Êags
,

922 
XFRM_SA_XFLAG_DONT_ENCAP_DSCP
,

924 i‡(
exåa_Êags
)

925 
	`Ârötf
(
Â
, "%x", 
exåa_Êags
);

927 i‡(
show_°©s
 > 0)

928 
	`Ârötf
(
Â
, " (0x%s)", 
	`°rxf_mask8
(
xsöfo
->
Êags
));

929 
	`Ârötf
(
Â
, "%s", 
_SL_
);

931 
	`x‰m_x‰ma_¥öt
(
tb
, 
xsöfo
->
Ámûy
, 
Â
, 
buf
);

933 i‡(!
	`x‰m_£À˘‹_iszîo
(&
xsöfo
->
£l
)) {

934 
sbuf
[
STRBUF_SIZE
];

936 
	`mem˝y
(
sbuf
, 
buf
, (sbuf));

937 
	`STRBUF_CAT
(
sbuf
, "sel ");

939 
	`x‰m_£À˘‹_¥öt
(&
xsöfo
->
£l
, xsöfo->
Ámûy
, 
Â
, 
sbuf
);

942 i‡(
show_°©s
 > 0) {

943 
	`x‰m_li„time_¥öt
(&
xsöfo
->
l·
, &xsöfo->
cuæ·
, 
Â
, 
buf
);

944 
	`x‰m_°©s_¥öt
(&
xsöfo
->
°©s
, 
Â
, 
buf
);

947 i‡(
tb
[
XFRMA_SEC_CTX
]) {

948 
x‰m_u£r_£c_˘x
 *
s˘x
;

950 
	`Ârötf
(
Â
, "\tsecurity context ");

952 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_SEC_CTX
]Ë< (*
s˘x
))

953 
	`Ârötf
(
Â
, "(ERRORÅruncated)");

955 
s˘x
 = (
x‰m_u£r_£c_˘x
 *)
	`RTA_DATA
(
tb
[
XFRMA_SEC_CTX
]);

957 
	`Ârötf
(
Â
, "%†%s", (*)(
s˘x
 + 1), 
_SL_
);

960 
	}
}

962 
	$x‰m_pﬁicy_öfo_¥öt
(
x‰m_u£Ωﬁicy_öfo
 *
xpöfo
,

963 
π©å
 *
tb
[], 
FILE
 *
Â
, c⁄° *
¥efix
,

964 c⁄° *
tôÀ
)

966 
buf
[
STRBUF_SIZE
];

968 
	`mem£t
(
buf
, '\0', (buf));

970 
	`x‰m_£À˘‹_¥öt
(&
xpöfo
->
£l
, 
¥e„ºed_Ámûy
, 
Â
, 
tôÀ
);

972 i‡(
tb
[
XFRMA_SEC_CTX
]) {

973 
x‰m_u£r_£c_˘x
 *
s˘x
;

975 
	`Ârötf
(
Â
, "\tsecurity context ");

977 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_SEC_CTX
]Ë< (*
s˘x
))

978 
	`Ârötf
(
Â
, "(ERRORÅruncated)");

980 
s˘x
 = (
x‰m_u£r_£c_˘x
 *)
	`RTA_DATA
(
tb
[
XFRMA_SEC_CTX
]);

982 
	`Ârötf
(
Â
, "%†", (*)(
s˘x
 + 1));

983 
	`Ârötf
(
Â
, "%s", 
_SL_
);

986 i‡(
¥efix
)

987 
	`STRBUF_CAT
(
buf
, 
¥efix
);

988 
	`STRBUF_CAT
(
buf
, "\t");

990 
	`Âuts
(
buf
, 
Â
);

991 i‡(
xpöfo
->
dú
 >
XFRM_POLICY_MAX
) {

992 
xpöfo
->
dú
 -
XFRM_POLICY_MAX
;

993 
	`Ârötf
(
Â
, "socket ");

995 
	`Ârötf
(
Â
, "dir ");

997 
xpöfo
->
dú
) {

998 
XFRM_POLICY_IN
:

999 
	`Ârötf
(
Â
, "in");

1001 
XFRM_POLICY_OUT
:

1002 
	`Ârötf
(
Â
, "out");

1004 
XFRM_POLICY_FWD
:

1005 
	`Ârötf
(
Â
, "fwd");

1008 
	`Ârötf
(
Â
, "%u", 
xpöfo
->
dú
);

1011 
	`Ârötf
(
Â
, " ");

1013 
xpöfo
->
a˘i⁄
) {

1014 
XFRM_POLICY_ALLOW
:

1015 i‡(
show_°©s
 > 0)

1016 
	`Ârötf
(
Â
, "actionállow ");

1018 
XFRM_POLICY_BLOCK
:

1019 
	`Ârötf
(
Â
, "action block ");

1022 
	`Ârötf
(
Â
, "a˘i⁄ %u ", 
xpöfo
->
a˘i⁄
);

1026 i‡(
show_°©s
)

1027 
	`Ârötf
(
Â
, "ödex %u ", 
xpöfo
->
ödex
);

1028 
	`Ârötf
(
Â
, "¥i‹ôy %u ", 
xpöfo
->
¥i‹ôy
);

1030 i‡(
tb
[
XFRMA_POLICY_TYPE
]) {

1031 
x‰m_u£Ωﬁicy_ty≥
 *
u±
;

1033 
	`Ârötf
(
Â
, "ptype ");

1035 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_POLICY_TYPE
]Ë< (*
u±
))

1036 
	`Ârötf
(
Â
, "(ERRORÅruncated)");

1038 
u±
 = (
x‰m_u£Ωﬁicy_ty≥
 *)
	`RTA_DATA
(
tb
[
XFRMA_POLICY_TYPE
]);

1039 
	`Ârötf
(
Â
, "%†", 
	`°rxf_±y≥
(
u±
->
ty≥
));

1042 i‡(
show_°©s
 > 0)

1043 
	`Ârötf
(
Â
, "sh¨ê%†", 
	`°rxf_sh¨e
(
xpöfo
->
sh¨e
));

1045 i‡(
show_°©s
 > 0 || 
xpöfo
->
Êags
) {

1046 
__u8
 
Êags
 = 
xpöfo
->flags;

1048 
	`Ârötf
(
Â
, "flag ");

1049 
	`XFRM_FLAG_PRINT
(
Â
, 
Êags
, 
XFRM_POLICY_LOCALOK
, "localok");

1050 
	`XFRM_FLAG_PRINT
(
Â
, 
Êags
, 
XFRM_POLICY_ICMP
, "icmp");

1051 i‡(
Êags
)

1052 
	`Ârötf
(
Â
, "%x", 
Êags
);

1054 i‡(
show_°©s
 > 0)

1055 
	`Ârötf
(
Â
, " (0x%s)", 
	`°rxf_mask8
(
xpöfo
->
Êags
));

1056 
	`Ârötf
(
Â
, "%s", 
_SL_
);

1058 i‡(
show_°©s
 > 0)

1059 
	`x‰m_li„time_¥öt
(&
xpöfo
->
l·
, &xpöfo->
cuæ·
, 
Â
, 
buf
);

1061 
	`x‰m_x‰ma_¥öt
(
tb
, 
xpöfo
->
£l
.
Ámûy
, 
Â
, 
buf
);

1062 
	}
}

1064 
	$x‰m_id_∑r£
(
x‰m_addªss_t
 *
ßddr
, 
x‰m_id
 *
id
, 
__u16
 *
Ámûy
,

1065 
loo£
, *
¨g˝
, ***
¨gvp
)

1067 
¨gc
 = *
¨g˝
;

1068 **
¨gv
 = *
¨gvp
;

1069 
öë_¥efix
 
d°
;

1070 
öë_¥efix
 
§c
;

1072 
	`mem£t
(&
d°
, 0, (dst));

1073 
	`mem£t
(&
§c
, 0, (src));

1076 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

1077 
	`NEXT_ARG
();

1079 
	`gë_¥efix
(&
§c
, *
¨gv
, 
¥e„ºed_Ámûy
);

1080 i‡(
§c
.
Ámûy
 =
AF_UNSPEC
)

1081 
	`öv¨g
("vÆuêa·î \"§c\" ha†™ uƒecognizedáddªs†Ámûy", *
¨gv
);

1082 i‡(
Ámûy
)

1083 *
Ámûy
 = 
§c
.family;

1085 
	`mem˝y
(
ßddr
, &
§c
.
d©a
, (*saddr));

1087 
fûãr
.
id_§c_mask
 = 
§c
.
bôÀn
;

1089 } i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

1090 
	`NEXT_ARG
();

1092 
	`gë_¥efix
(&
d°
, *
¨gv
, 
¥e„ºed_Ámûy
);

1093 i‡(
d°
.
Ámûy
 =
AF_UNSPEC
)

1094 
	`öv¨g
("vÆuêa·î \"d°\" ha†™ uƒecognizedáddªs†Ámûy", *
¨gv
);

1095 i‡(
Ámûy
)

1096 *
Ámûy
 = 
d°
.family;

1098 
	`mem˝y
(&
id
->
daddr
, &
d°
.
d©a
, (id->daddr));

1100 
fûãr
.
id_d°_mask
 = 
d°
.
bôÀn
;

1102 } i‡(
	`°rcmp
(*
¨gv
, "proto") == 0) {

1103 
ªt
;

1105 
	`NEXT_ARG
();

1107 
ªt
 = 
	`x‰m_x‰m¥Ÿo_gëby«me
(*
¨gv
);

1108 i‡(
ªt
 < 0)

1109 
	`öv¨g
("XFRM-PROTO vÆuêi†övÆid", *
¨gv
);

1111 
id
->
¥Ÿo
 = (
__u8
)
ªt
;

1113 
fûãr
.
id_¥Ÿo_mask
 = 
XFRM_FILTER_MASK_FULL
;

1115 } i‡(
	`°rcmp
(*
¨gv
, "spi") == 0) {

1116 
__u32
 
•i
;

1118 
	`NEXT_ARG
();

1119 i‡(
	`gë_u32
(&
•i
, *
¨gv
, 0))

1120 
	`öv¨g
("SPI vÆuêi†övÆid", *
¨gv
);

1122 
•i
 = 
	`ht⁄l
(spi);

1123 
id
->
•i
 = spi;

1125 
fûãr
.
id_•i_mask
 = 
XFRM_FILTER_MASK_FULL
;

1128 
	`PREV_ARG
();

1132 i‡(!
	`NEXT_ARG_OK
())

1134 
	`NEXT_ARG
();

1137 i‡(
§c
.
Ámûy
 && 
d°
.family && (src.family != dst.family))

1138 
	`öv¨g
("thêßmêaddªs†Ámûy i†ªquúed bëwì¿vÆue†a·î \"§c\"ánd \"d°\"", *
¨gv
);

1140 i‡(
id
->
•i
 && id->
¥Ÿo
) {

1141 i‡(
	`x‰m_x‰m¥Ÿo_is_ro
(
id
->
¥Ÿo
)) {

1142 
	`Ârötf
(
°dîr
, "\"spi\" is invalid with XFRM-PROTO value \"%s\"\n",

1143 
	`°rxf_x‰m¥Ÿo
(
id
->
¥Ÿo
));

1144 
	`exô
(1);

1145 } i‡(
id
->
¥Ÿo
 =
IPPROTO_COMP
 && 
	`¡ohl
(id->
•i
) >= 0x10000) {

1146 
	`Ârötf
(
°dîr
, "SPI value isÅooÜarge with XFRM-PROTO value \"%s\"\n",

1147 
	`°rxf_x‰m¥Ÿo
(
id
->
¥Ÿo
));

1148 
	`exô
(1);

1152 i‡(
loo£
 =0 && 
id
->
¥Ÿo
 == 0)

1153 
	`misßrg
("XFRM-PROTO");

1154 i‡(
¨gc
 =*
¨g˝
)

1155 
	`misßrg
("ID");

1157 *
¨g˝
 = 
¨gc
;

1158 *
¨gvp
 = 
¨gv
;

1161 
	}
}

1163 
	$x‰m_mode_∑r£
(
__u8
 *
mode
, *
¨g˝
, ***
¨gvp
)

1165 
¨gc
 = *
¨g˝
;

1166 **
¨gv
 = *
¨gvp
;

1168 i‡(
	`m©ches
(*
¨gv
, "transport") == 0)

1169 *
mode
 = 
XFRM_MODE_TRANSPORT
;

1170 i‡(
	`m©ches
(*
¨gv
, "tunnel") == 0)

1171 *
mode
 = 
XFRM_MODE_TUNNEL
;

1172 i‡(
	`m©ches
(*
¨gv
, "ro") == 0)

1173 *
mode
 = 
XFRM_MODE_ROUTEOPTIMIZATION
;

1174 i‡(
	`m©ches
(*
¨gv
, "in_trigger") == 0)

1175 *
mode
 = 
XFRM_MODE_IN_TRIGGER
;

1176 i‡(
	`m©ches
(*
¨gv
, "beet") == 0)

1177 *
mode
 = 
XFRM_MODE_BEET
;

1179 
	`öv¨g
("MODE vÆuêi†övÆid", *
¨gv
);

1181 *
¨g˝
 = 
¨gc
;

1182 *
¨gvp
 = 
¨gv
;

1185 
	}
}

1187 
	$x‰m_íˇp_ty≥_∑r£
(
__u16
 *
ty≥
, *
¨g˝
, ***
¨gvp
)

1189 
¨gc
 = *
¨g˝
;

1190 **
¨gv
 = *
¨gvp
;

1192 i‡(
	`°rcmp
(*
¨gv
, "espinudp-nonike") == 0)

1193 *
ty≥
 = 1;

1194 i‡(
	`°rcmp
(*
¨gv
, "espinudp") == 0)

1195 *
ty≥
 = 2;

1197 
	`öv¨g
("ENCAP-TYPE vÆuêi†övÆid", *
¨gv
);

1199 *
¨g˝
 = 
¨gc
;

1200 *
¨gvp
 = 
¨gv
;

1203 
	}
}

1206 
	$x‰m_ªqid_∑r£
(
__u32
 *
ªqid
, *
¨g˝
, ***
¨gvp
)

1208 
¨gc
 = *
¨g˝
;

1209 **
¨gv
 = *
¨gvp
;

1211 i‡(
	`gë_u32
(
ªqid
, *
¨gv
, 0))

1212 
	`öv¨g
("REQID vÆuêi†övÆid", *
¨gv
);

1214 *
¨g˝
 = 
¨gc
;

1215 *
¨gvp
 = 
¨gv
;

1218 
	}
}

1220 
	$x‰m_£À˘‹_up•ec_∑r£
(
x‰m_£À˘‹
 *
£l
,

1221 *
¨g˝
, ***
¨gvp
)

1223 
¨gc
 = *
¨g˝
;

1224 **
¨gv
 = *
¨gvp
;

1225 *
•‹ç
 = 
NULL
;

1226 *
dp‹ç
 = 
NULL
;

1227 *
ty≥p
 = 
NULL
;

1228 *
codï
 = 
NULL
;

1229 *
gªkey
 = 
NULL
;

1232 i‡(
	`°rcmp
(*
¨gv
, "proto") == 0) {

1233 
__u8
 
up•ec
;

1235 
	`NEXT_ARG
();

1237 i‡(
	`°rcmp
(*
¨gv
, "any") == 0)

1238 
up•ec
 = 0;

1240 
¥Ÿ€¡
 *
µ
;

1241 
µ
 = 
	`gë¥Ÿoby«me
(*
¨gv
);

1242 i‡(
µ
)

1243 
up•ec
 = 
µ
->
p_¥Ÿo
;

1245 i‡(
	`gë_u8
(&
up•ec
, *
¨gv
, 0))

1246 
	`öv¨g
("PROTO vÆuêi†övÆid", *
¨gv
);

1249 
£l
->
¥Ÿo
 = 
up•ec
;

1251 
fûãr
.
up•ec_¥Ÿo_mask
 = 
XFRM_FILTER_MASK_FULL
;

1253 } i‡(
	`°rcmp
(*
¨gv
, "sport") == 0) {

1254 
•‹ç
 = *
¨gv
;

1256 
	`NEXT_ARG
();

1258 i‡(
	`gë_u16
(&
£l
->
•‹t
, *
¨gv
, 0))

1259 
	`öv¨g
("vÆuêa·î \"•‹t\" i†övÆid", *
¨gv
);

1260 
£l
->
•‹t
 = 
	`ht⁄s
(sel->sport);

1261 i‡(
£l
->
•‹t
)

1262 
£l
->
•‹t_mask
 = ~((
__u16
)0);

1264 
fûãr
.
up•ec_•‹t_mask
 = 
XFRM_FILTER_MASK_FULL
;

1266 } i‡(
	`°rcmp
(*
¨gv
, "dport") == 0) {

1267 
dp‹ç
 = *
¨gv
;

1269 
	`NEXT_ARG
();

1271 i‡(
	`gë_u16
(&
£l
->
dp‹t
, *
¨gv
, 0))

1272 
	`öv¨g
("vÆuêa·î \"dp‹t\" i†övÆid", *
¨gv
);

1273 
£l
->
dp‹t
 = 
	`ht⁄s
(sel->dport);

1274 i‡(
£l
->
dp‹t
)

1275 
£l
->
dp‹t_mask
 = ~((
__u16
)0);

1277 
fûãr
.
up•ec_dp‹t_mask
 = 
XFRM_FILTER_MASK_FULL
;

1279 } i‡(
	`°rcmp
(*
¨gv
, "type") == 0) {

1280 
ty≥p
 = *
¨gv
;

1282 
	`NEXT_ARG
();

1284 i‡(
	`gë_u16
(&
£l
->
•‹t
, *
¨gv
, 0) ||

1285 (
£l
->
•‹t
 & ~((
__u16
)0xff)))

1286 
	`öv¨g
("vÆuêa·î \"ty≥\" i†övÆid", *
¨gv
);

1287 
£l
->
•‹t
 = 
	`ht⁄s
(sel->sport);

1288 
£l
->
•‹t_mask
 = ~((
__u16
)0);

1290 
fûãr
.
up•ec_•‹t_mask
 = 
XFRM_FILTER_MASK_FULL
;

1293 } i‡(
	`°rcmp
(*
¨gv
, "code") == 0) {

1294 
codï
 = *
¨gv
;

1296 
	`NEXT_ARG
();

1298 i‡(
	`gë_u16
(&
£l
->
dp‹t
, *
¨gv
, 0) ||

1299 (
£l
->
dp‹t
 & ~((
__u16
)0xff)))

1300 
	`öv¨g
("vÆuêa·î \"code\" i†övÆid", *
¨gv
);

1301 
£l
->
dp‹t
 = 
	`ht⁄s
(sel->dport);

1302 
£l
->
dp‹t_mask
 = ~((
__u16
)0);

1304 
fûãr
.
up•ec_dp‹t_mask
 = 
XFRM_FILTER_MASK_FULL
;

1306 } i‡(
	`°rcmp
(*
¨gv
, "key") == 0) {

1307 
uvÆ
;

1309 
gªkey
 = *
¨gv
;

1311 
	`NEXT_ARG
();

1313 i‡(
	`°rchr
(*
¨gv
, '.'))

1314 
uvÆ
 = 
	`ht⁄l
(
	`gë_addr32
(*
¨gv
));

1316 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0)<0) {

1317 
	`Ârötf
(
°dîr
, "valueáfter \"key\" is invalid\n");

1318 
	`exô
(-1);

1322 
£l
->
•‹t
 = 
	`ht⁄s
(
uvÆ
 >> 16);

1323 
£l
->
dp‹t
 = 
	`ht⁄s
(
uvÆ
 & 0xffff);

1324 
£l
->
•‹t_mask
 = ~((
__u16
)0);

1325 
£l
->
dp‹t_mask
 = ~((
__u16
)0);

1327 
fûãr
.
up•ec_dp‹t_mask
 = 
XFRM_FILTER_MASK_FULL
;

1330 
	`PREV_ARG
();

1334 i‡(!
	`NEXT_ARG_OK
())

1336 
	`NEXT_ARG
();

1338 i‡(
¨gc
 =*
¨g˝
)

1339 
	`misßrg
("UPSPEC");

1340 i‡(
•‹ç
 || 
dp‹ç
) {

1341 
£l
->
¥Ÿo
) {

1342 
IPPROTO_TCP
:

1343 
IPPROTO_UDP
:

1344 
IPPROTO_SCTP
:

1345 
IPPROTO_DCCP
:

1346 
IPPROTO_IP
:

1349 
	`Ârötf
(
°dîr
, "\"•‹t\"ánd \"dp‹t\"áª invÆid wôh PROTO vÆuê\"%s\"\n", 
	`°rxf_¥Ÿo
(
£l
->
¥Ÿo
));

1350 
	`exô
(1);

1353 i‡(
ty≥p
 || 
codï
) {

1354 
£l
->
¥Ÿo
) {

1355 
IPPROTO_ICMP
:

1356 
IPPROTO_ICMPV6
:

1357 
IPPROTO_MH
:

1360 
	`Ârötf
(
°dîr
, "\"ty≥\"ánd \"code\"áª invÆid wôh PROTO vÆuê\"%s\"\n", 
	`°rxf_¥Ÿo
(
£l
->
¥Ÿo
));

1361 
	`exô
(1);

1364 i‡(
gªkey
) {

1365 
£l
->
¥Ÿo
) {

1366 
IPPROTO_GRE
:

1369 
	`Ârötf
(
°dîr
, "\"key\" i†övÆid wôh PROTO vÆuê\"%s\"\n", 
	`°rxf_¥Ÿo
(
£l
->
¥Ÿo
));

1370 
	`exô
(1);

1374 *
¨g˝
 = 
¨gc
;

1375 *
¨gvp
 = 
¨gv
;

1378 
	}
}

1380 
	$x‰m_£À˘‹_∑r£
(
x‰m_£À˘‹
 *
£l
, *
¨g˝
, ***
¨gvp
)

1382 
¨gc
 = *
¨g˝
;

1383 **
¨gv
 = *
¨gvp
;

1384 
öë_¥efix
 
d°
;

1385 
öë_¥efix
 
§c
;

1386 *
up•e˝
 = 
NULL
;

1388 
	`mem£t
(&
d°
, 0, (dst));

1389 
	`mem£t
(&
§c
, 0, (src));

1392 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

1393 
	`NEXT_ARG
();

1395 
	`gë_¥efix
(&
§c
, *
¨gv
, 
¥e„ºed_Ámûy
);

1396 i‡(
§c
.
Ámûy
 =
AF_UNSPEC
)

1397 
	`öv¨g
("vÆuêa·î \"§c\" ha†™ uƒecognizedáddªs†Ámûy", *
¨gv
);

1398 
£l
->
Ámûy
 = 
§c
.family;

1400 
	`mem˝y
(&
£l
->
ßddr
, &
§c
.
d©a
, (sel->saddr));

1401 
£l
->
¥efixÀn_s
 = 
§c
.
bôÀn
;

1403 
fûãr
.
£l_§c_mask
 = 
§c
.
bôÀn
;

1405 } i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

1406 
	`NEXT_ARG
();

1408 
	`gë_¥efix
(&
d°
, *
¨gv
, 
¥e„ºed_Ámûy
);

1409 i‡(
d°
.
Ámûy
 =
AF_UNSPEC
)

1410 
	`öv¨g
("vÆuêa·î \"d°\" ha†™ uƒecognizedáddªs†Ámûy", *
¨gv
);

1411 
£l
->
Ámûy
 = 
d°
.family;

1413 
	`mem˝y
(&
£l
->
daddr
, &
d°
.
d©a
, (sel->daddr));

1414 
£l
->
¥efixÀn_d
 = 
d°
.
bôÀn
;

1416 
fûãr
.
£l_d°_mask
 = 
d°
.
bôÀn
;

1418 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

1419 
ifödex
;

1421 
	`NEXT_ARG
();

1423 i‡(
	`°rcmp
(*
¨gv
, "none") == 0)

1424 
ifödex
 = 0;

1426 
ifödex
 = 
	`Œ_«me_to_ödex
(*
¨gv
);

1427 i‡(
ifödex
 <= 0)

1428 
	`öv¨g
("DEV vÆuêi†övÆid", *
¨gv
);

1430 
£l
->
ifödex
 = ifindex;

1432 
fûãr
.
£l_dev_mask
 = 
XFRM_FILTER_MASK_FULL
;

1435 i‡(
up•e˝
) {

1436 
	`PREV_ARG
();

1439 
up•e˝
 = *
¨gv
;

1440 
	`x‰m_£À˘‹_up•ec_∑r£
(
£l
, &
¨gc
, &
¨gv
);

1444 i‡(!
	`NEXT_ARG_OK
())

1447 
	`NEXT_ARG
();

1450 i‡(
§c
.
Ámûy
 && 
d°
.family && (src.family != dst.family))

1451 
	`öv¨g
("thêßmêaddªs†Ámûy i†ªquúed bëwì¿vÆue†a·î \"§c\"ánd \"d°\"", *
¨gv
);

1453 i‡(
¨gc
 =*
¨g˝
)

1454 
	`misßrg
("SELECTOR");

1456 *
¨g˝
 = 
¨gc
;

1457 *
¨gvp
 = 
¨gv
;

1460 
	}
}

1462 
	$x‰m_li„time_cfg_∑r£
(
x‰m_li„time_cfg
 *
l·
,

1463 *
¨g˝
, ***
¨gvp
)

1465 
¨gc
 = *
¨g˝
;

1466 **
¨gv
 = *
¨gvp
;

1467 
ªt
;

1469 i‡(
	`°rcmp
(*
¨gv
, "time-soft") == 0) {

1470 
	`NEXT_ARG
();

1471 
ªt
 = 
	`gë_u64
(&
l·
->
so·_add_expúes_£c⁄ds
, *
¨gv
, 0);

1472 i‡(
ªt
)

1473 
	`öv¨g
("vÆuêa·î \"time-so·\" i†övÆid", *
¨gv
);

1474 } i‡(
	`°rcmp
(*
¨gv
, "time-hard") == 0) {

1475 
	`NEXT_ARG
();

1476 
ªt
 = 
	`gë_u64
(&
l·
->
h¨d_add_expúes_£c⁄ds
, *
¨gv
, 0);

1477 i‡(
ªt
)

1478 
	`öv¨g
("vÆuêa·î \"time-h¨d\" i†övÆid", *
¨gv
);

1479 } i‡(
	`°rcmp
(*
¨gv
, "time-use-soft") == 0) {

1480 
	`NEXT_ARG
();

1481 
ªt
 = 
	`gë_u64
(&
l·
->
so·_u£_expúes_£c⁄ds
, *
¨gv
, 0);

1482 i‡(
ªt
)

1483 
	`öv¨g
("vÆuêa·î \"time-u£-so·\" i†övÆid", *
¨gv
);

1484 } i‡(
	`°rcmp
(*
¨gv
, "time-use-hard") == 0) {

1485 
	`NEXT_ARG
();

1486 
ªt
 = 
	`gë_u64
(&
l·
->
h¨d_u£_expúes_£c⁄ds
, *
¨gv
, 0);

1487 i‡(
ªt
)

1488 
	`öv¨g
("vÆuêa·î \"time-u£-h¨d\" i†övÆid", *
¨gv
);

1489 } i‡(
	`°rcmp
(*
¨gv
, "byte-soft") == 0) {

1490 
	`NEXT_ARG
();

1491 
ªt
 = 
	`gë_u64
(&
l·
->
so·_byã_limô
, *
¨gv
, 0);

1492 i‡(
ªt
)

1493 
	`öv¨g
("vÆuêa·î \"byã-so·\" i†övÆid", *
¨gv
);

1494 } i‡(
	`°rcmp
(*
¨gv
, "byte-hard") == 0) {

1495 
	`NEXT_ARG
();

1496 
ªt
 = 
	`gë_u64
(&
l·
->
h¨d_byã_limô
, *
¨gv
, 0);

1497 i‡(
ªt
)

1498 
	`öv¨g
("vÆuêa·î \"byã-h¨d\" i†övÆid", *
¨gv
);

1499 } i‡(
	`°rcmp
(*
¨gv
, "packet-soft") == 0) {

1500 
	`NEXT_ARG
();

1501 
ªt
 = 
	`gë_u64
(&
l·
->
so·_∑ckë_limô
, *
¨gv
, 0);

1502 i‡(
ªt
)

1503 
	`öv¨g
("vÆuêa·î \"∑ckë-so·\" i†övÆid", *
¨gv
);

1504 } i‡(
	`°rcmp
(*
¨gv
, "packet-hard") == 0) {

1505 
	`NEXT_ARG
();

1506 
ªt
 = 
	`gë_u64
(&
l·
->
h¨d_∑ckë_limô
, *
¨gv
, 0);

1507 i‡(
ªt
)

1508 
	`öv¨g
("vÆuêa·î \"∑ckë-h¨d\" i†övÆid", *
¨gv
);

1510 
	`öv¨g
("LIMIT vÆuêi†övÆid", *
¨gv
);

1512 *
¨g˝
 = 
¨gc
;

1513 *
¨gvp
 = 
¨gv
;

1516 
	}
}

1518 
	$do_x‰m
(
¨gc
, **
¨gv
)

1520 
	`mem£t
(&
fûãr
, 0, (filter));

1522 i‡(
¨gc
 < 1)

1523 
	`ußge
();

1525 i‡(
	`m©ches
(*
¨gv
, "state") == 0 ||

1526 
	`m©ches
(*
¨gv
, "sa") == 0)

1527  
	`do_x‰m_°©e
(
¨gc
-1, 
¨gv
+1);

1528 i‡(
	`m©ches
(*
¨gv
, "policy") == 0)

1529  
	`do_x‰m_pﬁicy
(
¨gc
-1, 
¨gv
+1);

1530 i‡(
	`m©ches
(*
¨gv
, "monitor") == 0)

1531  
	`do_x‰m_m⁄ô‹
(
¨gc
-1, 
¨gv
+1);

1532 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

1533 
	`ußge
();

1534 
	`Ârötf
(
°dîr
, "x‰m Obje˘ \"%s\" i†unknown.\n", *
¨gv
);

1535 
	`exô
(-1);

1537 
	`ußge
();

1538 
	}
}

	@ip/link_gre.c

13 
	~<°rög.h
>

14 
	~<√t/if.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<¨∑/öë.h
>

19 
	~<löux/ù.h
>

20 
	~<löux/if_tu¬ñ.h
>

21 
	~"π_«mes.h
"

22 
	~"utûs.h
"

23 
	~"ù_comm⁄.h
"

24 
	~"tu¬ñ.h
"

26 
	$¥öt_ußge
(
FILE
 *
f
)

28 
	`Ârötf
(
f
, "Usage: ipÜink {ádd | set | change |Ñeplace | del } NAME\n");

29 
	`Ârötf
(
f
, "Åype { gre | gretap } [Ñemote ADDR ] [Üocal ADDR ]\n");

30 
	`Ârötf
(
f
, " [ [i|o]seq ] [ [i|o]key KEY ] [ [i|o]csum ]\n");

31 
	`Ârötf
(
f
, " [Åtl TTL ] [Åos TOS ] [ [no]pmtudisc ] [ dev PHYS_DEV ]\n");

32 
	`Ârötf
(
f
, " [Çoencap ] [Éncap { fou | gue |Çone } ]\n");

33 
	`Ârötf
(
f
, " [Éncap-sport PORT ] [Éncap-dport PORT ]\n");

34 
	`Ârötf
(
f
, " [ [no]encap-csum ] [ [no]encap-csum6 ] [ [no]encap-remcsum ]\n");

35 
	`Ârötf
(
f
, "\n");

36 
	`Ârötf
(
f
, "Where: NAME := STRING\n");

37 
	`Ârötf
(
f
, " ADDR := { IP_ADDRESS |ány }\n");

38 
	`Ârötf
(
f
, " TOS := { NUMBER | inherit }\n");

39 
	`Ârötf
(
f
, " TTL := { 1..255 | inherit }\n");

40 
	`Ârötf
(
f
, " KEY := { DOTTED_QUAD | NUMBER }\n");

41 
	}
}

43 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

44 
	$ußge
()

46 
	`¥öt_ußge
(
°dîr
);

47 
	`exô
(-1);

48 
	}
}

50 
	$gª_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

51 
∆msghdr
 *
n
)

54 
∆msghdr
 
n
;

55 
iföfomsg
 
i
;

56 
buf
[16384];

57 } 
ªq
;

58 
iföfomsg
 *
ifi
 = (iföfomsg *)(
n
 + 1);

59 
π©å
 *
tb
[
IFLA_MAX
 + 1];

60 
π©å
 *
lököfo
[
IFLA_INFO_MAX
+1];

61 
π©å
 *
gªöfo
[
IFLA_GRE_MAX
 + 1];

62 
__u16
 
iÊags
 = 0;

63 
__u16
 
oÊags
 = 0;

64 
ikey
 = 0;

65 
okey
 = 0;

66 
ßddr
 = 0;

67 
daddr
 = 0;

68 
lök
 = 0;

69 
__u8
 
pmtudisc
 = 1;

70 
__u8
 
âl
 = 0;

71 
__u8
 
tos
 = 0;

72 
Àn
;

73 
__u16
 
íˇ±y≥
 = 0;

74 
__u16
 
íˇpÊags
 = 0;

75 
__u16
 
íˇp•‹t
 = 0;

76 
__u16
 
íˇpdp‹t
 = 0;

78 i‡(!(
n
->
∆msg_Êags
 & 
NLM_F_CREATE
)) {

79 
	`mem£t
(&
ªq
, 0, (req));

81 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((*
ifi
));

82 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

83 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETLINK
;

84 
ªq
.
i
.
ifi_Ámûy
 = 
¥e„ºed_Ámûy
;

85 
ªq
.
i
.
ifi_ödex
 = 
ifi
->ifi_index;

87 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, &req.n, (req)) < 0) {

88 
gë_Áûed
:

89 
	`Ârötf
(
°dîr
,

94 
Àn
 = 
ªq
.
n
.
∆msg_Àn
;

95 
Àn
 -
	`NLMSG_LENGTH
((*
ifi
));

96 i‡(
Àn
 < 0)

97 
gë_Áûed
;

99 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(&
ªq
.
i
), 
Àn
);

101 i‡(!
tb
[
IFLA_LINKINFO
])

102 
gë_Áûed
;

104 
	`∑r£_π©å_√°ed
(
lököfo
, 
IFLA_INFO_MAX
, 
tb
[
IFLA_LINKINFO
]);

106 i‡(!
lököfo
[
IFLA_INFO_DATA
])

107 
gë_Áûed
;

109 
	`∑r£_π©å_√°ed
(
gªöfo
, 
IFLA_GRE_MAX
,

110 
lököfo
[
IFLA_INFO_DATA
]);

112 i‡(
gªöfo
[
IFLA_GRE_IKEY
])

113 
ikey
 = 
	`πa_gë©å_u32
(
gªöfo
[
IFLA_GRE_IKEY
]);

115 i‡(
gªöfo
[
IFLA_GRE_OKEY
])

116 
okey
 = 
	`πa_gë©å_u32
(
gªöfo
[
IFLA_GRE_OKEY
]);

118 i‡(
gªöfo
[
IFLA_GRE_IFLAGS
])

119 
iÊags
 = 
	`πa_gë©å_u16
(
gªöfo
[
IFLA_GRE_IFLAGS
]);

121 i‡(
gªöfo
[
IFLA_GRE_OFLAGS
])

122 
oÊags
 = 
	`πa_gë©å_u16
(
gªöfo
[
IFLA_GRE_OFLAGS
]);

124 i‡(
gªöfo
[
IFLA_GRE_LOCAL
])

125 
ßddr
 = 
	`πa_gë©å_u32
(
gªöfo
[
IFLA_GRE_LOCAL
]);

127 i‡(
gªöfo
[
IFLA_GRE_REMOTE
])

128 
daddr
 = 
	`πa_gë©å_u32
(
gªöfo
[
IFLA_GRE_REMOTE
]);

130 i‡(
gªöfo
[
IFLA_GRE_PMTUDISC
])

131 
pmtudisc
 = 
	`πa_gë©å_u8
(

132 
gªöfo
[
IFLA_GRE_PMTUDISC
]);

134 i‡(
gªöfo
[
IFLA_GRE_TTL
])

135 
âl
 = 
	`πa_gë©å_u8
(
gªöfo
[
IFLA_GRE_TTL
]);

137 i‡(
gªöfo
[
IFLA_GRE_TOS
])

138 
tos
 = 
	`πa_gë©å_u8
(
gªöfo
[
IFLA_GRE_TOS
]);

140 i‡(
gªöfo
[
IFLA_GRE_LINK
])

141 
lök
 = 
	`πa_gë©å_u8
(
gªöfo
[
IFLA_GRE_LINK
]);

143 i‡(
gªöfo
[
IFLA_GRE_ENCAP_TYPE
])

144 
íˇ±y≥
 = 
	`πa_gë©å_u16
(
gªöfo
[
IFLA_GRE_ENCAP_TYPE
]);

145 i‡(
gªöfo
[
IFLA_GRE_ENCAP_FLAGS
])

146 
íˇpÊags
 = 
	`πa_gë©å_u16
(
gªöfo
[
IFLA_GRE_ENCAP_FLAGS
]);

147 i‡(
gªöfo
[
IFLA_GRE_ENCAP_SPORT
])

148 
íˇp•‹t
 = 
	`πa_gë©å_u16
(
gªöfo
[
IFLA_GRE_ENCAP_SPORT
]);

149 i‡(
gªöfo
[
IFLA_GRE_ENCAP_DPORT
])

150 
íˇpdp‹t
 = 
	`πa_gë©å_u16
(
gªöfo
[
IFLA_GRE_ENCAP_DPORT
]);

153 
¨gc
 > 0) {

154 i‡(!
	`m©ches
(*
¨gv
, "key")) {

155 
uvÆ
;

157 
	`NEXT_ARG
();

158 
iÊags
 |
GRE_KEY
;

159 
oÊags
 |
GRE_KEY
;

160 i‡(
	`°rchr
(*
¨gv
, '.'))

161 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

163 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0) < 0) {

164 
	`Ârötf
(
°dîr
,

165 "InvÆid vÆuêf‹ \"key\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

166 
	`exô
(-1);

168 
uvÆ
 = 
	`ht⁄l
(uval);

171 
ikey
 = 
okey
 = 
uvÆ
;

172 } i‡(!
	`m©ches
(*
¨gv
, "ikey")) {

173 
uvÆ
;

175 
	`NEXT_ARG
();

176 
iÊags
 |
GRE_KEY
;

177 i‡(
	`°rchr
(*
¨gv
, '.'))

178 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

180 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0)<0) {

181 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"ikey\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

182 
	`exô
(-1);

184 
uvÆ
 = 
	`ht⁄l
(uval);

186 
ikey
 = 
uvÆ
;

187 } i‡(!
	`m©ches
(*
¨gv
, "okey")) {

188 
uvÆ
;

190 
	`NEXT_ARG
();

191 
oÊags
 |
GRE_KEY
;

192 i‡(
	`°rchr
(*
¨gv
, '.'))

193 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

195 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0)<0) {

196 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"okey\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

197 
	`exô
(-1);

199 
uvÆ
 = 
	`ht⁄l
(uval);

201 
okey
 = 
uvÆ
;

202 } i‡(!
	`m©ches
(*
¨gv
, "seq")) {

203 
iÊags
 |
GRE_SEQ
;

204 
oÊags
 |
GRE_SEQ
;

205 } i‡(!
	`m©ches
(*
¨gv
, "iseq")) {

206 
iÊags
 |
GRE_SEQ
;

207 } i‡(!
	`m©ches
(*
¨gv
, "oseq")) {

208 
oÊags
 |
GRE_SEQ
;

209 } i‡(!
	`m©ches
(*
¨gv
, "csum")) {

210 
iÊags
 |
GRE_CSUM
;

211 
oÊags
 |
GRE_CSUM
;

212 } i‡(!
	`m©ches
(*
¨gv
, "icsum")) {

213 
iÊags
 |
GRE_CSUM
;

214 } i‡(!
	`m©ches
(*
¨gv
, "ocsum")) {

215 
oÊags
 |
GRE_CSUM
;

216 } i‡(!
	`m©ches
(*
¨gv
, "nopmtudisc")) {

217 
pmtudisc
 = 0;

218 } i‡(!
	`m©ches
(*
¨gv
, "pmtudisc")) {

219 
pmtudisc
 = 1;

220 } i‡(!
	`m©ches
(*
¨gv
, "remote")) {

221 
	`NEXT_ARG
();

222 i‡(
	`°rcmp
(*
¨gv
, "any"))

223 
daddr
 = 
	`gë_addr32
(*
¨gv
);

224 } i‡(!
	`m©ches
(*
¨gv
, "local")) {

225 
	`NEXT_ARG
();

226 i‡(
	`°rcmp
(*
¨gv
, "any"))

227 
ßddr
 = 
	`gë_addr32
(*
¨gv
);

228 } i‡(!
	`m©ches
(*
¨gv
, "dev")) {

229 
	`NEXT_ARG
();

230 
lök
 = 
	`if_«mëoödex
(*
¨gv
);

231 i‡(
lök
 == 0) {

232 
	`Ârötf
(
°dîr
, "Cannot find device \"%s\"\n",

233 *
¨gv
);

234 
	`exô
(-1);

236 } i‡(!
	`m©ches
(*
¨gv
, "ttl") ||

237 !
	`m©ches
(*
¨gv
, "hoplimit")) {

238 
uvÆ
;

240 
	`NEXT_ARG
();

241 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

242 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0))

243 
	`öv¨g
("övÆid TTL\n", *
¨gv
);

244 i‡(
uvÆ
 > 255)

245 
	`öv¨g
("TTL mu° bê<255\n", *
¨gv
);

246 
âl
 = 
uvÆ
;

248 } i‡(!
	`m©ches
(*
¨gv
, "tos") ||

249 !
	`m©ches
(*
¨gv
, "tclass") ||

250 !
	`m©ches
(*
¨gv
, "dsfield")) {

251 
__u32
 
uvÆ
;

253 
	`NEXT_ARG
();

254 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

255 i‡(
	`π∆_dsfõld_a2n
(&
uvÆ
, *
¨gv
))

256 
	`öv¨g
("bad TOS vÆue", *
¨gv
);

257 
tos
 = 
uvÆ
;

259 
tos
 = 1;

260 } i‡(
	`°rcmp
(*
¨gv
, "noencap") == 0) {

261 
íˇ±y≥
 = 
TUNNEL_ENCAP_NONE
;

262 } i‡(
	`°rcmp
(*
¨gv
, "encap") == 0) {

263 
	`NEXT_ARG
();

264 i‡(
	`°rcmp
(*
¨gv
, "fou") == 0)

265 
íˇ±y≥
 = 
TUNNEL_ENCAP_FOU
;

266 i‡(
	`°rcmp
(*
¨gv
, "gue") == 0)

267 
íˇ±y≥
 = 
TUNNEL_ENCAP_GUE
;

268 i‡(
	`°rcmp
(*
¨gv
, "none") == 0)

269 
íˇ±y≥
 = 
TUNNEL_ENCAP_NONE
;

271 
	`öv¨g
("InvÆidÉnˇ∞ty≥.", *
¨gv
);

272 } i‡(
	`°rcmp
(*
¨gv
, "encap-sport") == 0) {

273 
	`NEXT_ARG
();

274 i‡(
	`°rcmp
(*
¨gv
, "auto") == 0)

275 
íˇp•‹t
 = 0;

276 i‡(
	`gë_u16
(&
íˇp•‹t
, *
¨gv
, 0))

277 
	`öv¨g
("InvÆid sour˚Ö‹t.", *
¨gv
);

278 } i‡(
	`°rcmp
(*
¨gv
, "encap-dport") == 0) {

279 
	`NEXT_ARG
();

280 i‡(
	`gë_u16
(&
íˇpdp‹t
, *
¨gv
, 0))

281 
	`öv¨g
("InvÆid de°ö©i⁄Ö‹t.", *
¨gv
);

282 } i‡(
	`°rcmp
(*
¨gv
, "encap-csum") == 0) {

283 
íˇpÊags
 |
TUNNEL_ENCAP_FLAG_CSUM
;

284 } i‡(
	`°rcmp
(*
¨gv
, "noencap-csum") == 0) {

285 
íˇpÊags
 &~
TUNNEL_ENCAP_FLAG_CSUM
;

286 } i‡(
	`°rcmp
(*
¨gv
, "encap-udp6-csum") == 0) {

287 
íˇpÊags
 |
TUNNEL_ENCAP_FLAG_CSUM6
;

288 } i‡(
	`°rcmp
(*
¨gv
, "noencap-udp6-csum") == 0) {

289 
íˇpÊags
 |~
TUNNEL_ENCAP_FLAG_CSUM6
;

290 } i‡(
	`°rcmp
(*
¨gv
, "encap-remcsum") == 0) {

291 
íˇpÊags
 |
TUNNEL_ENCAP_FLAG_REMCSUM
;

292 } i‡(
	`°rcmp
(*
¨gv
, "noencap-remcsum") == 0) {

293 
íˇpÊags
 |~
TUNNEL_ENCAP_FLAG_REMCSUM
;

295 
	`ußge
();

296 
¨gc
--; 
¨gv
++;

299 i‡(!
ikey
 && 
	`IN_MULTICAST
(
	`¡ohl
(
daddr
))) {

300 
ikey
 = 
daddr
;

301 
iÊags
 |
GRE_KEY
;

303 i‡(!
okey
 && 
	`IN_MULTICAST
(
	`¡ohl
(
daddr
))) {

304 
okey
 = 
daddr
;

305 
oÊags
 |
GRE_KEY
;

307 i‡(
	`IN_MULTICAST
(
	`¡ohl
(
daddr
)Ë&& !
ßddr
) {

308 
	`Ârötf
(
°dîr
, "A broadcastÅunnelÑequiresá sourceáddress.\n");

312 
	`add©å32
(
n
, 1024, 
IFLA_GRE_IKEY
, 
ikey
);

313 
	`add©å32
(
n
, 1024, 
IFLA_GRE_OKEY
, 
okey
);

314 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_IFLAGS
, &
iÊags
, 2);

315 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_OFLAGS
, &
oÊags
, 2);

316 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_LOCAL
, &
ßddr
, 4);

317 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_REMOTE
, &
daddr
, 4);

318 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_PMTUDISC
, &
pmtudisc
, 1);

319 i‡(
lök
)

320 
	`add©å32
(
n
, 1024, 
IFLA_GRE_LINK
, 
lök
);

321 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_TTL
, &
âl
, 1);

322 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_TOS
, &
tos
, 1);

324 
	`add©å16
(
n
, 1024, 
IFLA_GRE_ENCAP_TYPE
, 
íˇ±y≥
);

325 
	`add©å16
(
n
, 1024, 
IFLA_GRE_ENCAP_FLAGS
, 
íˇpÊags
);

326 
	`add©å16
(
n
, 1024, 
IFLA_GRE_ENCAP_SPORT
, 
	`ht⁄s
(
íˇp•‹t
));

327 
	`add©å16
(
n
, 1024, 
IFLA_GRE_ENCAP_DPORT
, 
	`ht⁄s
(
íˇpdp‹t
));

330 
	}
}

332 
	$gª_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

334 
s1
[1024];

335 
s2
[64];

336 c⁄° *
loˇl
 = "any";

337 c⁄° *
ªmŸe
 = "any";

338 
iÊags
 = 0;

339 
oÊags
 = 0;

341 i‡(!
tb
)

344 i‡(
tb
[
IFLA_GRE_REMOTE
]) {

345 
addr
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_GRE_REMOTE
]);

347 i‡(
addr
)

348 
ªmŸe
 = 
	`f‹m©_ho°
(
AF_INET
, 4, &
addr
, 
s1
, (s1));

351 
	`Ârötf
(
f
, "ªmŸê%†", 
ªmŸe
);

353 i‡(
tb
[
IFLA_GRE_LOCAL
]) {

354 
addr
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_GRE_LOCAL
]);

356 i‡(
addr
)

357 
loˇl
 = 
	`f‹m©_ho°
(
AF_INET
, 4, &
addr
, 
s1
, (s1));

360 
	`Ârötf
(
f
, "loˇ»%†", 
loˇl
);

362 i‡(
tb
[
IFLA_GRE_LINK
] && 
	`πa_gë©å_u32
(tb[IFLA_GRE_LINK])) {

363 
lök
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_GRE_LINK
]);

364 c⁄° *
n
 = 
	`if_ödext⁄ame
(
lök
, 
s2
);

366 i‡(
n
)

367 
	`Ârötf
(
f
, "dev %†", 
n
);

369 
	`Ârötf
(
f
, "dev %u ", 
lök
);

372 i‡(
tb
[
IFLA_GRE_TTL
] && 
	`πa_gë©å_u8
(tb[IFLA_GRE_TTL]))

373 
	`Ârötf
(
f
, "â»%d ", 
	`πa_gë©å_u8
(
tb
[
IFLA_GRE_TTL
]));

375 
	`Ârötf
(
f
, "ttl inherit ");

377 i‡(
tb
[
IFLA_GRE_TOS
] && 
	`πa_gë©å_u8
(tb[IFLA_GRE_TOS])) {

378 
tos
 = 
	`πa_gë©å_u8
(
tb
[
IFLA_GRE_TOS
]);

380 
	`Âuts
("to†", 
f
);

381 i‡(
tos
 == 1)

382 
	`Âuts
("öhîô ", 
f
);

384 
	`Ârötf
(
f
, "0x%x ", 
tos
);

387 i‡(
tb
[
IFLA_GRE_PMTUDISC
] &&

388 !
	`πa_gë©å_u8
(
tb
[
IFLA_GRE_PMTUDISC
]))

389 
	`Âuts
("n›mtudis¯", 
f
);

391 i‡(
tb
[
IFLA_GRE_IFLAGS
])

392 
iÊags
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_GRE_IFLAGS
]);

394 i‡(
tb
[
IFLA_GRE_OFLAGS
])

395 
oÊags
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_GRE_OFLAGS
]);

397 i‡((
iÊags
 & 
GRE_KEY
Ë&& 
tb
[
IFLA_GRE_IKEY
]) {

398 
	`öë_¡›
(
AF_INET
, 
	`RTA_DATA
(
tb
[
IFLA_GRE_IKEY
]), 
s2
, (s2));

399 
	`Ârötf
(
f
, "ikey %†", 
s2
);

402 i‡((
oÊags
 & 
GRE_KEY
Ë&& 
tb
[
IFLA_GRE_OKEY
]) {

403 
	`öë_¡›
(
AF_INET
, 
	`RTA_DATA
(
tb
[
IFLA_GRE_OKEY
]), 
s2
, (s2));

404 
	`Ârötf
(
f
, "okey %†", 
s2
);

407 i‡(
iÊags
 & 
GRE_SEQ
)

408 
	`Âuts
("i£q ", 
f
);

409 i‡(
oÊags
 & 
GRE_SEQ
)

410 
	`Âuts
("o£q ", 
f
);

411 i‡(
iÊags
 & 
GRE_CSUM
)

412 
	`Âuts
("icsum ", 
f
);

413 i‡(
oÊags
 & 
GRE_CSUM
)

414 
	`Âuts
("ocsum ", 
f
);

416 i‡(
tb
[
IFLA_GRE_ENCAP_TYPE
] &&

417 *(
__u16
 *)
	`RTA_DATA
(
tb
[
IFLA_GRE_ENCAP_TYPE
]Ë!
TUNNEL_ENCAP_NONE
) {

418 
__u16
 
ty≥
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_GRE_ENCAP_TYPE
]);

419 
__u16
 
Êags
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_GRE_ENCAP_FLAGS
]);

420 
__u16
 
•‹t
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_GRE_ENCAP_SPORT
]);

421 
__u16
 
dp‹t
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_GRE_ENCAP_DPORT
]);

423 
	`Âuts
("íˇ∞", 
f
);

424 
ty≥
) {

425 
TUNNEL_ENCAP_FOU
:

426 
	`Âuts
("fou ", 
f
);

428 
TUNNEL_ENCAP_GUE
:

429 
	`Âuts
("guê", 
f
);

432 
	`Âuts
("unknow¿", 
f
);

436 i‡(
•‹t
 == 0)

437 
	`Âuts
("íˇp-•‹àautÿ", 
f
);

439 
	`Ârötf
(
f
, "íˇp-•‹à%u", 
	`¡ohs
(
•‹t
));

441 
	`Ârötf
(
f
, "íˇp-dp‹à%u ", 
	`¡ohs
(
dp‹t
));

443 i‡(
Êags
 & 
TUNNEL_ENCAP_FLAG_CSUM
)

444 
	`Âuts
("íˇp-csum ", 
f
);

446 
	`Âuts
("n€nˇp-csum ", 
f
);

448 i‡(
Êags
 & 
TUNNEL_ENCAP_FLAG_CSUM6
)

449 
	`Âuts
("íˇp-csum6 ", 
f
);

451 
	`Âuts
("n€nˇp-csum6 ", 
f
);

453 i‡(
Êags
 & 
TUNNEL_ENCAP_FLAG_REMCSUM
)

454 
	`Âuts
("íˇp-ªmcsum ", 
f
);

456 
	`Âuts
("n€nˇp-ªmcsum ", 
f
);

458 
	}
}

460 
	$gª_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

461 
FILE
 *
f
)

463 
	`¥öt_ußge
(
f
);

464 
	}
}

466 
lök_utû
 
	ggª_lök_utû
 = {

467 .
id
 = "gre",

468 .
	gmax©å
 = 
IFLA_GRE_MAX
,

469 .
	g∑r£_›t
 = 
gª_∑r£_›t
,

470 .
	g¥öt_›t
 = 
gª_¥öt_›t
,

471 .
	g¥öt_hñp
 = 
gª_¥öt_hñp
,

474 
lök_utû
 
	ggªèp_lök_utû
 = {

475 .
id
 = "gretap",

476 .
	gmax©å
 = 
IFLA_GRE_MAX
,

477 .
	g∑r£_›t
 = 
gª_∑r£_›t
,

478 .
	g¥öt_›t
 = 
gª_¥öt_›t
,

479 .
	g¥öt_hñp
 = 
gª_¥öt_hñp
,

	@ip/link_gre6.c

13 
	~<°rög.h
>

14 
	~<√t/if.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<¨∑/öë.h
>

19 
	~<löux/ù.h
>

20 
	~<löux/if_tu¬ñ.h
>

21 
	~<löux/ù6_tu¬ñ.h
>

23 
	~"π_«mes.h
"

24 
	~"utûs.h
"

25 
	~"ù_comm⁄.h
"

26 
	~"tu¬ñ.h
"

28 
	#IP6_FLOWINFO_TCLASS
 
	`ht⁄l
(0x0FF00000)

	)

29 
	#IP6_FLOWINFO_FLOWLABEL
 
	`ht⁄l
(0x000FFFFF)

	)

31 
	#DEFAULT_TNL_HOP_LIMIT
 (64)

	)

33 
	$¥öt_ußge
(
FILE
 *
f
)

35 
	`Ârötf
(
f
, "Usage: ipÜink {ádd | set | change |Ñeplace | del } NAME\n");

36 
	`Ârötf
(
f
, "Åype { ip6gre | ip6gretap } [Ñemote ADDR ] [Üocal ADDR ]\n");

37 
	`Ârötf
(
f
, " [ [i|o]seq ] [ [i|o]key KEY ] [ [i|o]csum ]\n");

38 
	`Ârötf
(
f
, " [ hoplimit TTL ] [Éncaplimit ELIM ]\n");

39 
	`Ârötf
(
f
, " [Åclass TCLASS ] [ flowlabel FLOWLABEL ]\n");

40 
	`Ârötf
(
f
, " [ dscp inherit ] [ dev PHYS_DEV ]\n");

41 
	`Ârötf
(
f
, "\n");

42 
	`Ârötf
(
f
, "Where: NAME := STRING\n");

43 
	`Ârötf
(
f
, " ADDR := IPV6_ADDRESS\n");

44 
	`Ârötf
(
f
, " TTL := { 0..255 } (default=%d)\n",

45 
DEFAULT_TNL_HOP_LIMIT
);

46 
	`Ârötf
(
f
, " KEY := { DOTTED_QUAD | NUMBER }\n");

47 
	`Ârötf
(
f
, " ELIM := {Çone | 0..255 }(default=%d)\n",

48 
IPV6_DEFAULT_TNL_ENCAP_LIMIT
);

49 
	`Ârötf
(
f
, " TCLASS := { 0x0..0xff | inherit }\n");

50 
	`Ârötf
(
f
, " FLOWLABEL := { 0x0..0xfffff | inherit }\n");

51 
	}
}

53 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

54 
	$ußge
()

56 
	`¥öt_ußge
(
°dîr
);

57 
	`exô
(-1);

58 
	}
}

60 
	$gª_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

61 
∆msghdr
 *
n
)

64 
∆msghdr
 
n
;

65 
iföfomsg
 
i
;

66 
buf
[1024];

67 } 
ªq
;

68 
iföfomsg
 *
ifi
 = (iföfomsg *)(
n
 + 1);

69 
π©å
 *
tb
[
IFLA_MAX
 + 1];

70 
π©å
 *
lököfo
[
IFLA_INFO_MAX
+1];

71 
π©å
 *
gªöfo
[
IFLA_GRE_MAX
 + 1];

72 
__u16
 
iÊags
 = 0;

73 
__u16
 
oÊags
 = 0;

74 
ikey
 = 0;

75 
okey
 = 0;

76 
ö6_addr
 
øddr
 = 
IN6ADDR_ANY_INIT
;

77 
ö6_addr
 
œddr
 = 
IN6ADDR_ANY_INIT
;

78 
lök
 = 0;

79 
Êowöfo
 = 0;

80 
Êags
 = 0;

81 
__u8
 
h›_limô
 = 
DEFAULT_TNL_HOP_LIMIT
;

82 
__u8
 
íˇp_limô
 = 
IPV6_DEFAULT_TNL_ENCAP_LIMIT
;

83 
Àn
;

85 i‡(!(
n
->
∆msg_Êags
 & 
NLM_F_CREATE
)) {

86 
	`mem£t
(&
ªq
, 0, (req));

88 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((*
ifi
));

89 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

90 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETLINK
;

91 
ªq
.
i
.
ifi_Ámûy
 = 
¥e„ºed_Ámûy
;

92 
ªq
.
i
.
ifi_ödex
 = 
ifi
->ifi_index;

94 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, &req.n, (req)) < 0) {

95 
gë_Áûed
:

96 
	`Ârötf
(
°dîr
,

101 
Àn
 = 
ªq
.
n
.
∆msg_Àn
;

102 
Àn
 -
	`NLMSG_LENGTH
((*
ifi
));

103 i‡(
Àn
 < 0)

104 
gë_Áûed
;

106 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(&
ªq
.
i
), 
Àn
);

108 i‡(!
tb
[
IFLA_LINKINFO
])

109 
gë_Áûed
;

111 
	`∑r£_π©å_√°ed
(
lököfo
, 
IFLA_INFO_MAX
, 
tb
[
IFLA_LINKINFO
]);

113 i‡(!
lököfo
[
IFLA_INFO_DATA
])

114 
gë_Áûed
;

116 
	`∑r£_π©å_√°ed
(
gªöfo
, 
IFLA_GRE_MAX
,

117 
lököfo
[
IFLA_INFO_DATA
]);

119 i‡(
gªöfo
[
IFLA_GRE_IKEY
])

120 
ikey
 = 
	`πa_gë©å_u32
(
gªöfo
[
IFLA_GRE_IKEY
]);

122 i‡(
gªöfo
[
IFLA_GRE_OKEY
])

123 
okey
 = 
	`πa_gë©å_u32
(
gªöfo
[
IFLA_GRE_OKEY
]);

125 i‡(
gªöfo
[
IFLA_GRE_IFLAGS
])

126 
iÊags
 = 
	`πa_gë©å_u16
(
gªöfo
[
IFLA_GRE_IFLAGS
]);

128 i‡(
gªöfo
[
IFLA_GRE_OFLAGS
])

129 
oÊags
 = 
	`πa_gë©å_u16
(
gªöfo
[
IFLA_GRE_OFLAGS
]);

131 i‡(
gªöfo
[
IFLA_GRE_LOCAL
])

132 
	`mem˝y
(&
œddr
, 
	`RTA_DATA
(
gªöfo
[
IFLA_GRE_LOCAL
]), (laddr));

134 i‡(
gªöfo
[
IFLA_GRE_REMOTE
])

135 
	`mem˝y
(&
øddr
, 
	`RTA_DATA
(
gªöfo
[
IFLA_GRE_REMOTE
]), (raddr));

137 i‡(
gªöfo
[
IFLA_GRE_TTL
])

138 
h›_limô
 = 
	`πa_gë©å_u8
(
gªöfo
[
IFLA_GRE_TTL
]);

140 i‡(
gªöfo
[
IFLA_GRE_LINK
])

141 
lök
 = 
	`πa_gë©å_u32
(
gªöfo
[
IFLA_GRE_LINK
]);

143 i‡(
gªöfo
[
IFLA_GRE_ENCAP_LIMIT
])

144 
íˇp_limô
 = 
	`πa_gë©å_u8
(
gªöfo
[
IFLA_GRE_ENCAP_LIMIT
]);

146 i‡(
gªöfo
[
IFLA_GRE_FLOWINFO
])

147 
Êowöfo
 = 
	`πa_gë©å_u32
(
gªöfo
[
IFLA_GRE_FLOWINFO
]);

149 i‡(
gªöfo
[
IFLA_GRE_FLAGS
])

150 
Êags
 = 
	`πa_gë©å_u32
(
gªöfo
[
IFLA_GRE_FLAGS
]);

153 
¨gc
 > 0) {

154 i‡(!
	`m©ches
(*
¨gv
, "key")) {

155 
uvÆ
;

157 
	`NEXT_ARG
();

158 
iÊags
 |
GRE_KEY
;

159 
oÊags
 |
GRE_KEY
;

160 i‡(
	`°rchr
(*
¨gv
, '.'))

161 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

163 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0) < 0) {

164 
	`Ârötf
(
°dîr
,

166 
	`exô
(-1);

168 
uvÆ
 = 
	`ht⁄l
(uval);

171 
ikey
 = 
okey
 = 
uvÆ
;

172 } i‡(!
	`m©ches
(*
¨gv
, "ikey")) {

173 
uvÆ
;

175 
	`NEXT_ARG
();

176 
iÊags
 |
GRE_KEY
;

177 i‡(
	`°rchr
(*
¨gv
, '.'))

178 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

180 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0)<0) {

181 
	`Ârötf
(
°dîr
, "invalid value of \"ikey\"\n");

182 
	`exô
(-1);

184 
uvÆ
 = 
	`ht⁄l
(uval);

186 
ikey
 = 
uvÆ
;

187 } i‡(!
	`m©ches
(*
¨gv
, "okey")) {

188 
uvÆ
;

190 
	`NEXT_ARG
();

191 
oÊags
 |
GRE_KEY
;

192 i‡(
	`°rchr
(*
¨gv
, '.'))

193 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

195 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0)<0) {

196 
	`Ârötf
(
°dîr
, "invalid value of \"okey\"\n");

197 
	`exô
(-1);

199 
uvÆ
 = 
	`ht⁄l
(uval);

201 
okey
 = 
uvÆ
;

202 } i‡(!
	`m©ches
(*
¨gv
, "seq")) {

203 
iÊags
 |
GRE_SEQ
;

204 
oÊags
 |
GRE_SEQ
;

205 } i‡(!
	`m©ches
(*
¨gv
, "iseq")) {

206 
iÊags
 |
GRE_SEQ
;

207 } i‡(!
	`m©ches
(*
¨gv
, "oseq")) {

208 
oÊags
 |
GRE_SEQ
;

209 } i‡(!
	`m©ches
(*
¨gv
, "csum")) {

210 
iÊags
 |
GRE_CSUM
;

211 
oÊags
 |
GRE_CSUM
;

212 } i‡(!
	`m©ches
(*
¨gv
, "icsum")) {

213 
iÊags
 |
GRE_CSUM
;

214 } i‡(!
	`m©ches
(*
¨gv
, "ocsum")) {

215 
oÊags
 |
GRE_CSUM
;

216 } i‡(!
	`m©ches
(*
¨gv
, "remote")) {

217 
öë_¥efix
 
addr
;

218 
	`NEXT_ARG
();

219 
	`gë_¥efix
(&
addr
, *
¨gv
, 
¥e„ºed_Ámûy
);

220 i‡(
addr
.
Ámûy
 =
AF_UNSPEC
)

221 
	`öv¨g
("\"ªmŸe\"áddªs†Ámûy i†AF_UNSPEC", *
¨gv
);

222 
	`mem˝y
(&
øddr
, &
addr
.
d©a
, (raddr));

223 } i‡(!
	`m©ches
(*
¨gv
, "local")) {

224 
öë_¥efix
 
addr
;

225 
	`NEXT_ARG
();

226 
	`gë_¥efix
(&
addr
, *
¨gv
, 
¥e„ºed_Ámûy
);

227 i‡(
addr
.
Ámûy
 =
AF_UNSPEC
)

228 
	`öv¨g
("\"loˇl\"áddªs†Ámûy i†AF_UNSPEC", *
¨gv
);

229 
	`mem˝y
(&
œddr
, &
addr
.
d©a
, (laddr));

230 } i‡(!
	`m©ches
(*
¨gv
, "dev")) {

231 
	`NEXT_ARG
();

232 
lök
 = 
	`if_«mëoödex
(*
¨gv
);

233 i‡(
lök
 == 0) {

234 
	`Ârötf
(
°dîr
, "Cannot find device \"%s\"\n",

235 *
¨gv
);

236 
	`exô
(-1);

238 } i‡(!
	`m©ches
(*
¨gv
, "ttl") ||

239 !
	`m©ches
(*
¨gv
, "hoplimit")) {

240 
__u8
 
uvÆ
;

241 
	`NEXT_ARG
();

242 i‡(
	`gë_u8
(&
uvÆ
, *
¨gv
, 0))

243 
	`öv¨g
("övÆid TTL", *
¨gv
);

244 
h›_limô
 = 
uvÆ
;

245 } i‡(!
	`m©ches
(*
¨gv
, "tos") ||

246 !
	`m©ches
(*
¨gv
, "tclass") ||

247 !
	`m©ches
(*
¨gv
, "dsfield")) {

248 
__u8
 
uvÆ
;

249 
	`NEXT_ARG
();

250 i‡(
	`°rcmp
(*
¨gv
, "inherit") == 0)

251 
Êags
 |
IP6_TNL_F_USE_ORIG_TCLASS
;

253 i‡(
	`gë_u8
(&
uvÆ
, *
¨gv
, 16))

254 
	`öv¨g
("övÆid TCœss", *
¨gv
);

255 
Êowöfo
 |
	`ht⁄l
((
__u32
)
uvÆ
 << 20Ë& 
IP6_FLOWINFO_TCLASS
;

256 
Êags
 &~
IP6_TNL_F_USE_ORIG_TCLASS
;

258 } i‡(
	`°rcmp
(*
¨gv
, "flowlabel") == 0 ||

259 
	`°rcmp
(*
¨gv
, "fl") == 0) {

260 
__u32
 
uvÆ
;

261 
	`NEXT_ARG
();

262 i‡(
	`°rcmp
(*
¨gv
, "inherit") == 0)

263 
Êags
 |
IP6_TNL_F_USE_ORIG_FLOWLABEL
;

265 i‡(
	`gë_u32
(&
uvÆ
, *
¨gv
, 16))

266 
	`öv¨g
("övÆid Flowœbñ", *
¨gv
);

267 i‡(
uvÆ
 > 0xFFFFF)

268 
	`öv¨g
("övÆid Flowœbñ", *
¨gv
);

269 
Êowöfo
 |
	`ht⁄l
(
uvÆ
Ë& 
IP6_FLOWINFO_FLOWLABEL
;

270 
Êags
 &~
IP6_TNL_F_USE_ORIG_FLOWLABEL
;

272 } i‡(
	`°rcmp
(*
¨gv
, "dscp") == 0) {

273 
	`NEXT_ARG
();

274 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0)

275 
	`öv¨g
("nŸ inhîô", *
¨gv
);

276 
Êags
 |
IP6_TNL_F_RCV_DSCP_COPY
;

278 
	`ußge
();

279 
¨gc
--; 
¨gv
++;

282 
	`add©å32
(
n
, 1024, 
IFLA_GRE_IKEY
, 
ikey
);

283 
	`add©å32
(
n
, 1024, 
IFLA_GRE_OKEY
, 
okey
);

284 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_IFLAGS
, &
iÊags
, 2);

285 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_OFLAGS
, &
oÊags
, 2);

286 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_LOCAL
, &
œddr
, (laddr));

287 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_REMOTE
, &
øddr
, (raddr));

288 i‡(
lök
)

289 
	`add©å32
(
n
, 1024, 
IFLA_GRE_LINK
, 
lök
);

290 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_TTL
, &
h›_limô
, 1);

291 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_ENCAP_LIMIT
, &
íˇp_limô
, 1);

292 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_FLOWINFO
, &
Êowöfo
, 4);

293 
	`add©å_l
(
n
, 1024, 
IFLA_GRE_FLAGS
, &
Êowöfo
, 4);

296 
	}
}

298 
	$gª_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

300 
s1
[1024];

301 
s2
[64];

302 c⁄° *
loˇl
 = "any";

303 c⁄° *
ªmŸe
 = "any";

304 
iÊags
 = 0;

305 
oÊags
 = 0;

306 
Êags
 = 0;

307 
Êowöfo
 = 0;

308 
ö6_addr
 
ö6_addr_™y
 = 
IN6ADDR_ANY_INIT
;

310 i‡(!
tb
)

313 i‡(
tb
[
IFLA_GRE_FLAGS
])

314 
Êags
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_GRE_FLAGS
]);

316 i‡(
tb
[
IFLA_GRE_FLOWINFO
])

317 
Êags
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_GRE_FLOWINFO
]);

319 i‡(
tb
[
IFLA_GRE_REMOTE
]) {

320 
ö6_addr
 
addr
;

321 
	`mem˝y
(&
addr
, 
	`RTA_DATA
(
tb
[
IFLA_GRE_REMOTE
]), (addr));

323 i‡(
	`memcmp
(&
addr
, &
ö6_addr_™y
, (addr)))

324 
ªmŸe
 = 
	`f‹m©_ho°
(
AF_INET6
, (
addr
), &addr, 
s1
, (s1));

327 
	`Ârötf
(
f
, "ªmŸê%†", 
ªmŸe
);

329 i‡(
tb
[
IFLA_GRE_LOCAL
]) {

330 
ö6_addr
 
addr
;

331 
	`mem˝y
(&
addr
, 
	`RTA_DATA
(
tb
[
IFLA_GRE_LOCAL
]), (addr));

333 i‡(
	`memcmp
(&
addr
, &
ö6_addr_™y
, (addr)))

334 
loˇl
 = 
	`f‹m©_ho°
(
AF_INET6
, (
addr
), &addr, 
s1
, (s1));

337 
	`Ârötf
(
f
, "loˇ»%†", 
loˇl
);

339 i‡(
tb
[
IFLA_GRE_LINK
] && 
	`πa_gë©å_u32
(tb[IFLA_GRE_LINK])) {

340 
lök
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_GRE_LINK
]);

341 c⁄° *
n
 = 
	`if_ödext⁄ame
(
lök
, 
s2
);

343 i‡(
n
)

344 
	`Ârötf
(
f
, "dev %†", 
n
);

346 
	`Ârötf
(
f
, "dev %u ", 
lök
);

349 i‡(
tb
[
IFLA_GRE_TTL
] && 
	`πa_gë©å_u8
(tb[IFLA_GRE_TTL]))

350 
	`Ârötf
(
f
, "h›limô %d ", 
	`πa_gë©å_u8
(
tb
[
IFLA_GRE_TTL
]));

352 i‡(
Êags
 & 
IP6_TNL_F_IGN_ENCAP_LIMIT
)

353 
	`Ârötf
(
f
, "encaplimitÇone ");

354 i‡(
tb
[
IFLA_GRE_ENCAP_LIMIT
]) {

355 
íˇp_limô
 = 
	`πa_gë©å_u8
(
tb
[
IFLA_GRE_ENCAP_LIMIT
]);

357 
	`Ârötf
(
f
, "íˇ∂imô %d ", 
íˇp_limô
);

360 i‡(
Êags
 & 
IP6_TNL_F_USE_ORIG_FLOWLABEL
)

361 
	`Ârötf
(
f
, "flowlabel inherit ");

363 
	`Ârötf
(
f
, "Êowœbñ 0x%05x ", 
	`¡ohl
(
Êowöfo
 & 
IP6_FLOWINFO_FLOWLABEL
));

365 i‡(
Êags
 & 
IP6_TNL_F_RCV_DSCP_COPY
)

366 
	`Ârötf
(
f
, "dscp inherit ");

368 i‡(
tb
[
IFLA_GRE_IFLAGS
])

369 
iÊags
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_GRE_IFLAGS
]);

371 i‡(
tb
[
IFLA_GRE_OFLAGS
])

372 
oÊags
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_GRE_OFLAGS
]);

374 i‡((
iÊags
 & 
GRE_KEY
Ë&& 
tb
[
IFLA_GRE_IKEY
]) {

375 
	`öë_¡›
(
AF_INET
, 
	`RTA_DATA
(
tb
[
IFLA_GRE_IKEY
]), 
s2
, (s2));

376 
	`Ârötf
(
f
, "ikey %†", 
s2
);

379 i‡((
oÊags
 & 
GRE_KEY
Ë&& 
tb
[
IFLA_GRE_OKEY
]) {

380 
	`öë_¡›
(
AF_INET
, 
	`RTA_DATA
(
tb
[
IFLA_GRE_OKEY
]), 
s2
, (s2));

381 
	`Ârötf
(
f
, "okey %†", 
s2
);

384 i‡(
iÊags
 & 
GRE_SEQ
)

385 
	`Âuts
("i£q ", 
f
);

386 i‡(
oÊags
 & 
GRE_SEQ
)

387 
	`Âuts
("o£q ", 
f
);

388 i‡(
iÊags
 & 
GRE_CSUM
)

389 
	`Âuts
("icsum ", 
f
);

390 i‡(
oÊags
 & 
GRE_CSUM
)

391 
	`Âuts
("ocsum ", 
f
);

392 
	}
}

394 
	$gª_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

395 
FILE
 *
f
)

397 
	`¥öt_ußge
(
f
);

398 
	}
}

400 
lök_utû
 
	gù6gª_lök_utû
 = {

401 .
id
 = "ip6gre",

402 .
	gmax©å
 = 
IFLA_GRE_MAX
,

403 .
	g∑r£_›t
 = 
gª_∑r£_›t
,

404 .
	g¥öt_›t
 = 
gª_¥öt_›t
,

405 .
	g¥öt_hñp
 = 
gª_¥öt_hñp
,

408 
lök_utû
 
	gù6gªèp_lök_utû
 = {

409 .
id
 = "ip6gretap",

410 .
	gmax©å
 = 
IFLA_GRE_MAX
,

411 .
	g∑r£_›t
 = 
gª_∑r£_›t
,

412 .
	g¥öt_›t
 = 
gª_¥öt_›t
,

413 .
	g¥öt_hñp
 = 
gª_¥öt_hñp
,

	@ip/link_ip6tnl.c

13 
	~<°rög.h
>

14 
	~<√t/if.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<¨∑/öë.h
>

19 
	~<löux/ù.h
>

20 
	~<löux/if_tu¬ñ.h
>

21 
	~<löux/ù6_tu¬ñ.h
>

22 
	~"π_«mes.h
"

23 
	~"utûs.h
"

24 
	~"ù_comm⁄.h
"

25 
	~"tu¬ñ.h
"

27 
	#IP6_FLOWINFO_TCLASS
 
	`ht⁄l
(0x0FF00000)

	)

28 
	#IP6_FLOWINFO_FLOWLABEL
 
	`ht⁄l
(0x000FFFFF)

	)

30 
	#DEFAULT_TNL_HOP_LIMIT
 (64)

	)

32 
	$¥öt_ußge
(
FILE
 *
f
)

34 
	`Ârötf
(
f
, "Usage: ipÜink {ádd | set | change |Ñeplace | del } NAME\n");

35 
	`Ârötf
(
f
, " [ mode { ip6ip6 | ipip6 |ány } ]\n");

36 
	`Ârötf
(
f
, "Åype ip6tnl [Ñemote ADDR ] [Üocal ADDR ]\n");

37 
	`Ârötf
(
f
, " [ dev PHYS_DEV ] [Éncaplimit ELIM ]\n");

38 
	`Ârötf
(
f
 ," [ hoplimit HLIM ] [Åclass TCLASS ] [ flowlabel FLOWLABEL ]\n");

39 
	`Ârötf
(
f
, " [ dscp inherit ] [ fwmark inherit ]\n");

40 
	`Ârötf
(
f
, "\n");

41 
	`Ârötf
(
f
, "Where: NAME := STRING\n");

42 
	`Ârötf
(
f
, " ADDR := IPV6_ADDRESS\n");

43 
	`Ârötf
(
f
, " ELIM := {Çone | 0..255 }(default=%d)\n",

44 
IPV6_DEFAULT_TNL_ENCAP_LIMIT
);

45 
	`Ârötf
(
f
, " HLIM := 0..255 (default=%d)\n",

46 
DEFAULT_TNL_HOP_LIMIT
);

47 
	`Ârötf
(
f
, " TCLASS := { 0x0..0xff | inherit }\n");

48 
	`Ârötf
(
f
, " FLOWLABEL := { 0x0..0xfffff | inherit }\n");

49 
	}
}

51 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

52 
	$ußge
()

54 
	`¥öt_ußge
(
°dîr
);

55 
	`exô
(-1);

56 
	}
}

58 
	$ù6tu¬ñ_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

59 
∆msghdr
 *
n
)

62 
∆msghdr
 
n
;

63 
iföfomsg
 
i
;

64 
buf
[2048];

65 } 
ªq
;

66 
iföfomsg
 *
ifi
 = (iföfomsg *)(
n
 + 1);

67 
π©å
 *
tb
[
IFLA_MAX
 + 1];

68 
π©å
 *
lököfo
[
IFLA_INFO_MAX
+1];

69 
π©å
 *
ùtunöfo
[
IFLA_IPTUN_MAX
 + 1];

70 
Àn
;

71 
ö6_addr
 
œddr
;

72 
ö6_addr
 
øddr
;

73 
__u8
 
h›_limô
 = 
DEFAULT_TNL_HOP_LIMIT
;

74 
__u8
 
íˇp_limô
 = 
IPV6_DEFAULT_TNL_ENCAP_LIMIT
;

75 
__u32
 
Êowöfo
 = 0;

76 
__u32
 
Êags
 = 0;

77 
__u32
 
lök
 = 0;

78 
__u8
 
¥Ÿo
 = 0;

80 
	`mem£t
(&
œddr
, 0, (laddr));

81 
	`mem£t
(&
øddr
, 0, (raddr));

83 i‡(!(
n
->
∆msg_Êags
 & 
NLM_F_CREATE
)) {

84 
	`mem£t
(&
ªq
, 0, (req));

86 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((*
ifi
));

87 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

88 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETLINK
;

89 
ªq
.
i
.
ifi_Ámûy
 = 
¥e„ºed_Ámûy
;

90 
ªq
.
i
.
ifi_ödex
 = 
ifi
->ifi_index;

92 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, &req.n, (req)) < 0) {

93 
gë_Áûed
:

94 
	`Ârötf
(
°dîr
,

99 
Àn
 = 
ªq
.
n
.
∆msg_Àn
;

100 
Àn
 -
	`NLMSG_LENGTH
((*
ifi
));

101 i‡(
Àn
 < 0)

102 
gë_Áûed
;

104 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(&
ªq
.
i
), 
Àn
);

106 i‡(!
tb
[
IFLA_LINKINFO
])

107 
gë_Áûed
;

109 
	`∑r£_π©å_√°ed
(
lököfo
, 
IFLA_INFO_MAX
, 
tb
[
IFLA_LINKINFO
]);

111 i‡(!
lököfo
[
IFLA_INFO_DATA
])

112 
gë_Áûed
;

114 
	`∑r£_π©å_√°ed
(
ùtunöfo
, 
IFLA_IPTUN_MAX
,

115 
lököfo
[
IFLA_INFO_DATA
]);

117 i‡(
ùtunöfo
[
IFLA_IPTUN_LOCAL
])

118 
	`mem˝y
(&
œddr
, 
	`RTA_DATA
(
ùtunöfo
[
IFLA_IPTUN_LOCAL
]),

119 (
œddr
));

121 i‡(
ùtunöfo
[
IFLA_IPTUN_REMOTE
])

122 
	`mem˝y
(&
øddr
, 
	`RTA_DATA
(
ùtunöfo
[
IFLA_IPTUN_REMOTE
]),

123 (
øddr
));

125 i‡(
ùtunöfo
[
IFLA_IPTUN_TTL
])

126 
h›_limô
 = 
	`πa_gë©å_u8
(
ùtunöfo
[
IFLA_IPTUN_TTL
]);

128 i‡(
ùtunöfo
[
IFLA_IPTUN_ENCAP_LIMIT
])

129 
íˇp_limô
 = 
	`πa_gë©å_u8
(
ùtunöfo
[
IFLA_IPTUN_ENCAP_LIMIT
]);

131 i‡(
ùtunöfo
[
IFLA_IPTUN_FLOWINFO
])

132 
Êowöfo
 = 
	`πa_gë©å_u32
(
ùtunöfo
[
IFLA_IPTUN_FLOWINFO
]);

134 i‡(
ùtunöfo
[
IFLA_IPTUN_FLAGS
])

135 
Êags
 = 
	`πa_gë©å_u32
(
ùtunöfo
[
IFLA_IPTUN_FLAGS
]);

137 i‡(
ùtunöfo
[
IFLA_IPTUN_LINK
])

138 
lök
 = 
	`πa_gë©å_u32
(
ùtunöfo
[
IFLA_IPTUN_LINK
]);

140 i‡(
ùtunöfo
[
IFLA_IPTUN_PROTO
])

141 
¥Ÿo
 = 
	`πa_gë©å_u8
(
ùtunöfo
[
IFLA_IPTUN_PROTO
]);

144 
¨gc
 > 0) {

145 i‡(
	`m©ches
(*
¨gv
, "mode") == 0) {

146 
	`NEXT_ARG
();

147 i‡(
	`°rcmp
(*
¨gv
, "ipv6/ipv6") == 0 ||

148 
	`°rcmp
(*
¨gv
, "ip6ip6") == 0)

149 
¥Ÿo
 = 
IPPROTO_IPV6
;

150 i‡(
	`°rcmp
(*
¨gv
, "ip/ipv6") == 0 ||

151 
	`°rcmp
(*
¨gv
, "ipv4/ipv6") == 0 ||

152 
	`°rcmp
(*
¨gv
, "ipip6") == 0 ||

153 
	`°rcmp
(*
¨gv
, "ip4ip6") == 0)

154 
¥Ÿo
 = 
IPPROTO_IPIP
;

155 i‡(
	`°rcmp
(*
¨gv
, "any/ipv6") == 0 ||

156 
	`°rcmp
(*
¨gv
, "any") == 0)

157 
¥Ÿo
 = 0;

159 
	`öv¨g
("C™nŸ gues†tu¬ñ mode.", *
¨gv
);

160 } i‡(
	`°rcmp
(*
¨gv
, "remote") == 0) {

161 
öë_¥efix
 
addr
;

162 
	`NEXT_ARG
();

163 
	`gë_¥efix
(&
addr
, *
¨gv
, 
¥e„ºed_Ámûy
);

164 i‡(
addr
.
Ámûy
 =
AF_UNSPEC
)

165 
	`öv¨g
("\"ªmŸe\"áddªs†Ámûy i†AF_UNSPEC", *
¨gv
);

166 
	`mem˝y
(&
øddr
, 
addr
.
d©a
,áddr.
byãÀn
);

167 } i‡(
	`°rcmp
(*
¨gv
, "local") == 0) {

168 
öë_¥efix
 
addr
;

169 
	`NEXT_ARG
();

170 
	`gë_¥efix
(&
addr
, *
¨gv
, 
¥e„ºed_Ámûy
);

171 i‡(
addr
.
Ámûy
 =
AF_UNSPEC
)

172 
	`öv¨g
("\"loˇl\"áddªs†Ámûy i†AF_UNSPEC", *
¨gv
);

173 
	`mem˝y
(&
œddr
, 
addr
.
d©a
,áddr.
byãÀn
);

174 } i‡(
	`m©ches
(*
¨gv
, "dev") == 0) {

175 
	`NEXT_ARG
();

176 
lök
 = 
	`if_«mëoödex
(*
¨gv
);

177 i‡(
lök
 == 0)

178 
	`öv¨g
("\"dev\" i†övÆid", *
¨gv
);

179 } i‡(
	`°rcmp
(*
¨gv
, "hoplimit") == 0 ||

180 
	`°rcmp
(*
¨gv
, "ttl") == 0 ||

181 
	`°rcmp
(*
¨gv
, "hlim") == 0) {

182 
__u8
 
uvÆ
;

183 
	`NEXT_ARG
();

184 i‡(
	`gë_u8
(&
uvÆ
, *
¨gv
, 0))

185 
	`öv¨g
("övÆid HLIM", *
¨gv
);

186 
h›_limô
 = 
uvÆ
;

187 } i‡(
	`m©ches
(*
¨gv
, "encaplimit") == 0) {

188 
	`NEXT_ARG
();

189 i‡(
	`°rcmp
(*
¨gv
, "none") == 0) {

190 
Êags
 |
IP6_TNL_F_IGN_ENCAP_LIMIT
;

192 
__u8
 
uvÆ
;

193 i‡(
	`gë_u8
(&
uvÆ
, *
¨gv
, 0) < -1)

194 
	`öv¨g
("övÆid ELIM", *
¨gv
);

195 
íˇp_limô
 = 
uvÆ
;

196 
Êags
 &~
IP6_TNL_F_IGN_ENCAP_LIMIT
;

198 } i‡(
	`°rcmp
(*
¨gv
, "tclass") == 0 ||

199 
	`°rcmp
(*
¨gv
, "tc") == 0 ||

200 
	`°rcmp
(*
¨gv
, "tos") == 0 ||

201 
	`m©ches
(*
¨gv
, "dsfield") == 0) {

202 
__u8
 
uvÆ
;

203 
	`NEXT_ARG
();

204 
Êowöfo
 &~
IP6_FLOWINFO_TCLASS
;

205 i‡(
	`°rcmp
(*
¨gv
, "inherit") == 0)

206 
Êags
 |
IP6_TNL_F_USE_ORIG_TCLASS
;

208 i‡(
	`gë_u8
(&
uvÆ
, *
¨gv
, 16))

209 
	`öv¨g
("övÆid TCœss", *
¨gv
);

210 
Êowöfo
 |
	`ht⁄l
((
__u32
)
uvÆ
 << 20Ë& 
IP6_FLOWINFO_TCLASS
;

211 
Êags
 &~
IP6_TNL_F_USE_ORIG_TCLASS
;

213 } i‡(
	`°rcmp
(*
¨gv
, "flowlabel") == 0 ||

214 
	`°rcmp
(*
¨gv
, "fl") == 0) {

215 
__u32
 
uvÆ
;

216 
	`NEXT_ARG
();

217 
Êowöfo
 &~
IP6_FLOWINFO_FLOWLABEL
;

218 i‡(
	`°rcmp
(*
¨gv
, "inherit") == 0)

219 
Êags
 |
IP6_TNL_F_USE_ORIG_FLOWLABEL
;

221 i‡(
	`gë_u32
(&
uvÆ
, *
¨gv
, 16))

222 
	`öv¨g
("övÆid Flowœbñ", *
¨gv
);

223 i‡(
uvÆ
 > 0xFFFFF)

224 
	`öv¨g
("övÆid Flowœbñ", *
¨gv
);

225 
Êowöfo
 |
	`ht⁄l
(
uvÆ
Ë& 
IP6_FLOWINFO_FLOWLABEL
;

226 
Êags
 &~
IP6_TNL_F_USE_ORIG_FLOWLABEL
;

228 } i‡(
	`°rcmp
(*
¨gv
, "dscp") == 0) {

229 
	`NEXT_ARG
();

230 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0)

231 
	`öv¨g
("nŸ inhîô", *
¨gv
);

232 
Êags
 |
IP6_TNL_F_RCV_DSCP_COPY
;

233 } i‡(
	`°rcmp
(*
¨gv
, "fwmark") == 0) {

234 
	`NEXT_ARG
();

235 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0)

236 
	`öv¨g
("nŸ inhîô", *
¨gv
);

237 
Êags
 |
IP6_TNL_F_USE_ORIG_FWMARK
;

239 
	`ußge
();

240 
¨gc
--, 
¨gv
++;

243 
	`add©å8
(
n
, 1024, 
IFLA_IPTUN_PROTO
, 
¥Ÿo
);

244 
	`add©å_l
(
n
, 1024, 
IFLA_IPTUN_LOCAL
, &
œddr
, (laddr));

245 
	`add©å_l
(
n
, 1024, 
IFLA_IPTUN_REMOTE
, &
øddr
, (raddr));

246 
	`add©å8
(
n
, 1024, 
IFLA_IPTUN_TTL
, 
h›_limô
);

247 
	`add©å8
(
n
, 1024, 
IFLA_IPTUN_ENCAP_LIMIT
, 
íˇp_limô
);

248 
	`add©å32
(
n
, 1024, 
IFLA_IPTUN_FLOWINFO
, 
Êowöfo
);

249 
	`add©å32
(
n
, 1024, 
IFLA_IPTUN_FLAGS
, 
Êags
);

250 
	`add©å32
(
n
, 1024, 
IFLA_IPTUN_LINK
, 
lök
);

253 
	}
}

255 
	$ù6tu¬ñ_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

257 
s1
[256];

258 
s2
[64];

259 
Êags
 = 0;

260 
__u32
 
Êowöfo
 = 0;

262 i‡(!
tb
)

265 i‡(
tb
[
IFLA_IPTUN_FLAGS
])

266 
Êags
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_IPTUN_FLAGS
]);

268 i‡(
tb
[
IFLA_IPTUN_FLOWINFO
])

269 
Êowöfo
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_IPTUN_FLOWINFO
]);

271 i‡(
tb
[
IFLA_IPTUN_PROTO
]) {

272 
	`πa_gë©å_u8
(
tb
[
IFLA_IPTUN_PROTO
])) {

273 
IPPROTO_IPIP
:

274 
	`Ârötf
(
f
, "ipip6 ");

276 
IPPROTO_IPV6
:

277 
	`Ârötf
(
f
, "ip6ip6 ");

280 
	`Ârötf
(
f
, "any ");

285 i‡(
tb
[
IFLA_IPTUN_REMOTE
]) {

286 
	`Ârötf
(
f
, "remote %s ",

287 
	`π_addr_n2a
(
AF_INET6
,

288 
	`RTA_PAYLOAD
(
tb
[
IFLA_IPTUN_REMOTE
]),

289 
	`RTA_DATA
(
tb
[
IFLA_IPTUN_REMOTE
]),

290 
s1
, (s1)));

293 i‡(
tb
[
IFLA_IPTUN_LOCAL
]) {

294 
	`Ârötf
(
f
, "local %s ",

295 
	`π_addr_n2a
(
AF_INET6
,

296 
	`RTA_PAYLOAD
(
tb
[
IFLA_IPTUN_LOCAL
]),

297 
	`RTA_DATA
(
tb
[
IFLA_IPTUN_LOCAL
]),

298 
s1
, (s1)));

301 i‡(
tb
[
IFLA_IPTUN_LINK
] && 
	`πa_gë©å_u32
(tb[IFLA_IPTUN_LINK])) {

302 
lök
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_IPTUN_LINK
]);

303 c⁄° *
n
 = 
	`if_ödext⁄ame
(
lök
, 
s2
);

305 i‡(
n
)

306 
	`Ârötf
(
f
, "dev %†", 
n
);

308 
	`Ârötf
(
f
, "dev %u ", 
lök
);

311 i‡(
Êags
 & 
IP6_TNL_F_IGN_ENCAP_LIMIT
)

312 
	`¥ötf
("encaplimitÇone ");

313 i‡(
tb
[
IFLA_IPTUN_ENCAP_LIMIT
])

314 
	`Ârötf
(
f
, "encaplimit %u ",

315 
	`πa_gë©å_u8
(
tb
[
IFLA_IPTUN_ENCAP_LIMIT
]));

317 i‡(
tb
[
IFLA_IPTUN_TTL
])

318 
	`Ârötf
(
f
, "h›limô %u ", 
	`πa_gë©å_u8
(
tb
[
IFLA_IPTUN_TTL
]));

320 i‡(
Êags
 & 
IP6_TNL_F_USE_ORIG_TCLASS
)

321 
	`¥ötf
("tclass inherit ");

322 i‡(
tb
[
IFLA_IPTUN_FLOWINFO
]) {

323 
__u32
 
vÆ
 = 
	`¡ohl
(
Êowöfo
 & 
IP6_FLOWINFO_TCLASS
);

325 
	`¥ötf
("t˛as†0x%02x ", (
__u8
)(
vÆ
 >> 20));

328 i‡(
Êags
 & 
IP6_TNL_F_USE_ORIG_FLOWLABEL
)

329 
	`¥ötf
("flowlabel inherit ");

331 
	`¥ötf
("Êowœbñ 0x%05x ", 
	`¡ohl
(
Êowöfo
 & 
IP6_FLOWINFO_FLOWLABEL
));

333 
	`¥ötf
("(Êowöfÿ0x%08xË", 
	`¡ohl
(
Êowöfo
));

335 i‡(
Êags
 & 
IP6_TNL_F_RCV_DSCP_COPY
)

336 
	`¥ötf
("dscp inherit ");

338 i‡(
Êags
 & 
IP6_TNL_F_MIP6_DEV
)

339 
	`Ârötf
(
f
, "mip6 ");

341 i‡(
Êags
 & 
IP6_TNL_F_USE_ORIG_FWMARK
)

342 
	`Ârötf
(
f
, "fwmark inherit ");

343 
	}
}

345 
	$ù6tu¬ñ_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

346 
FILE
 *
f
)

348 
	`¥öt_ußge
(
f
);

349 
	}
}

351 
lök_utû
 
	gù6äl_lök_utû
 = {

352 .
id
 = "ip6tnl",

353 .
	gmax©å
 = 
IFLA_IPTUN_MAX
,

354 .
	g∑r£_›t
 = 
ù6tu¬ñ_∑r£_›t
,

355 .
	g¥öt_›t
 = 
ù6tu¬ñ_¥öt_›t
,

356 .
	g¥öt_hñp
 = 
ù6tu¬ñ_¥öt_hñp
,

	@ip/link_iptnl.c

13 
	~<°rög.h
>

14 
	~<√t/if.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<¨∑/öë.h
>

19 
	~<löux/ù.h
>

20 
	~<löux/if_tu¬ñ.h
>

21 
	~"π_«mes.h
"

22 
	~"utûs.h
"

23 
	~"ù_comm⁄.h
"

24 
	~"tu¬ñ.h
"

26 
	$¥öt_ußge
(
FILE
 *
f
, 
sô
)

28 
	`Ârötf
(
f
, "Usage: ipÜink {ádd | set | change |Ñeplace | del } NAME\n");

29 
	`Ârötf
(
f
, "Åype { ipip | sit } [Ñemote ADDR ] [Üocal ADDR ]\n");

30 
	`Ârötf
(
f
, " [Åtl TTL ] [Åos TOS ] [ [no]pmtudisc ] [ dev PHYS_DEV ]\n");

31 
	`Ârötf
(
f
, " [ 6rd-prefix ADDR ] [ 6rd-relay_prefix ADDR ] [ 6rd-reset ]\n");

32 
	`Ârötf
(
f
, " [Çoencap ] [Éncap { fou | gue |Çone } ]\n");

33 
	`Ârötf
(
f
, " [Éncap-sport PORT ] [Éncap-dport PORT ]\n");

34 
	`Ârötf
(
f
, " [ [no]encap-csum ] [ [no]encap-csum6 ] [ [no]encap-remcsum ]\n");

35 i‡(
sô
) {

36 
	`Ârötf
(
f
, " [ mode { ip6ip | ipip |ány } ]\n");

37 
	`Ârötf
(
f
, " [ isatap ]\n");

39 
	`Ârötf
(
f
, "\n");

40 
	`Ârötf
(
f
, "Where: NAME := STRING\n");

41 
	`Ârötf
(
f
, " ADDR := { IP_ADDRESS |ány }\n");

42 
	`Ârötf
(
f
, " TOS := { NUMBER | inherit }\n");

43 
	`Ârötf
(
f
, " TTL := { 1..255 | inherit }\n");

44 
	}
}

46 
	$ußge
(
sô
Ë
	`__©åibuã__
((
n‹ëu∫
));

47 
	$ußge
(
sô
)

49 
	`¥öt_ußge
(
°dîr
, 
sô
);

50 
	`exô
(-1);

51 
	}
}

53 
	$ùtu¬ñ_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

54 
∆msghdr
 *
n
)

57 
∆msghdr
 
n
;

58 
iföfomsg
 
i
;

59 
buf
[2048];

60 } 
ªq
;

61 
iföfomsg
 *
ifi
 = (iföfomsg *)(
n
 + 1);

62 
π©å
 *
tb
[
IFLA_MAX
 + 1];

63 
π©å
 *
lököfo
[
IFLA_INFO_MAX
+1];

64 
π©å
 *
ùtunöfo
[
IFLA_IPTUN_MAX
 + 1];

65 
Àn
;

66 
__u32
 
lök
 = 0;

67 
__u32
 
œddr
 = 0;

68 
__u32
 
øddr
 = 0;

69 
__u8
 
âl
 = 0;

70 
__u8
 
tos
 = 0;

71 
__u8
 
pmtudisc
 = 1;

72 
__u16
 
iÊags
 = 0;

73 
__u8
 
¥Ÿo
 = 0;

74 
ö6_addr
 
ù6rd¥efix
;

75 
__u16
 
ù6rd¥efixÀn
 = 0;

76 
__u32
 
ù6rdªœy¥efix
 = 0;

77 
__u16
 
ù6rdªœy¥efixÀn
 = 0;

78 
__u16
 
íˇ±y≥
 = 0;

79 
__u16
 
íˇpÊags
 = 0;

80 
__u16
 
íˇp•‹t
 = 0;

81 
__u16
 
íˇpdp‹t
 = 0;

83 
	`mem£t
(&
ù6rd¥efix
, 0, (ip6rdprefix));

85 i‡(!(
n
->
∆msg_Êags
 & 
NLM_F_CREATE
)) {

86 
	`mem£t
(&
ªq
, 0, (req));

88 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((*
ifi
));

89 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

90 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETLINK
;

91 
ªq
.
i
.
ifi_Ámûy
 = 
¥e„ºed_Ámûy
;

92 
ªq
.
i
.
ifi_ödex
 = 
ifi
->ifi_index;

94 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, &req.n, (req)) < 0) {

95 
gë_Áûed
:

96 
	`Ârötf
(
°dîr
,

101 
Àn
 = 
ªq
.
n
.
∆msg_Àn
;

102 
Àn
 -
	`NLMSG_LENGTH
((*
ifi
));

103 i‡(
Àn
 < 0)

104 
gë_Áûed
;

106 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(&
ªq
.
i
), 
Àn
);

108 i‡(!
tb
[
IFLA_LINKINFO
])

109 
gë_Áûed
;

111 
	`∑r£_π©å_√°ed
(
lököfo
, 
IFLA_INFO_MAX
, 
tb
[
IFLA_LINKINFO
]);

113 i‡(!
lököfo
[
IFLA_INFO_DATA
])

114 
gë_Áûed
;

116 
	`∑r£_π©å_√°ed
(
ùtunöfo
, 
IFLA_IPTUN_MAX
,

117 
lököfo
[
IFLA_INFO_DATA
]);

119 i‡(
ùtunöfo
[
IFLA_IPTUN_LOCAL
])

120 
œddr
 = 
	`πa_gë©å_u32
(
ùtunöfo
[
IFLA_IPTUN_LOCAL
]);

122 i‡(
ùtunöfo
[
IFLA_IPTUN_REMOTE
])

123 
øddr
 = 
	`πa_gë©å_u32
(
ùtunöfo
[
IFLA_IPTUN_REMOTE
]);

125 i‡(
ùtunöfo
[
IFLA_IPTUN_TTL
])

126 
âl
 = 
	`πa_gë©å_u8
(
ùtunöfo
[
IFLA_IPTUN_TTL
]);

128 i‡(
ùtunöfo
[
IFLA_IPTUN_TOS
])

129 
tos
 = 
	`πa_gë©å_u8
(
ùtunöfo
[
IFLA_IPTUN_TOS
]);

131 i‡(
ùtunöfo
[
IFLA_IPTUN_PMTUDISC
])

132 
pmtudisc
 =

133 
	`πa_gë©å_u8
(
ùtunöfo
[
IFLA_IPTUN_PMTUDISC
]);

135 i‡(
ùtunöfo
[
IFLA_IPTUN_FLAGS
])

136 
iÊags
 = 
	`πa_gë©å_u16
(
ùtunöfo
[
IFLA_IPTUN_FLAGS
]);

138 i‡(
ùtunöfo
[
IFLA_IPTUN_LINK
])

139 
lök
 = 
	`πa_gë©å_u32
(
ùtunöfo
[
IFLA_IPTUN_LINK
]);

141 i‡(
ùtunöfo
[
IFLA_IPTUN_PROTO
])

142 
¥Ÿo
 = 
	`πa_gë©å_u8
(
ùtunöfo
[
IFLA_IPTUN_PROTO
]);

144 i‡(
ùtunöfo
[
IFLA_IPTUN_ENCAP_TYPE
])

145 
íˇ±y≥
 = 
	`πa_gë©å_u16
(
ùtunöfo
[
IFLA_IPTUN_ENCAP_TYPE
]);

146 i‡(
ùtunöfo
[
IFLA_IPTUN_ENCAP_FLAGS
])

147 
íˇpÊags
 = 
	`πa_gë©å_u16
(
ùtunöfo
[
IFLA_IPTUN_ENCAP_FLAGS
]);

148 i‡(
ùtunöfo
[
IFLA_IPTUN_ENCAP_SPORT
])

149 
íˇp•‹t
 = 
	`πa_gë©å_u16
(
ùtunöfo
[
IFLA_IPTUN_ENCAP_SPORT
]);

150 i‡(
ùtunöfo
[
IFLA_IPTUN_ENCAP_DPORT
])

151 
íˇpdp‹t
 = 
	`πa_gë©å_u16
(
ùtunöfo
[
IFLA_IPTUN_ENCAP_DPORT
]);

152 i‡(
ùtunöfo
[
IFLA_IPTUN_6RD_PREFIX
])

153 
	`mem˝y
(&
ù6rd¥efix
,

154 
	`RTA_DATA
(
ùtunöfo
[
IFLA_IPTUN_6RD_PREFIX
]),

155 (
œddr
));

157 i‡(
ùtunöfo
[
IFLA_IPTUN_6RD_PREFIXLEN
])

158 
ù6rd¥efixÀn
 =

159 
	`πa_gë©å_u16
(
ùtunöfo
[
IFLA_IPTUN_6RD_PREFIXLEN
]);

161 i‡(
ùtunöfo
[
IFLA_IPTUN_6RD_RELAY_PREFIX
])

162 
ù6rdªœy¥efix
 =

163 
	`πa_gë©å_u32
(
ùtunöfo
[
IFLA_IPTUN_6RD_RELAY_PREFIX
]);

165 i‡(
ùtunöfo
[
IFLA_IPTUN_6RD_RELAY_PREFIXLEN
])

166 
ù6rdªœy¥efixÀn
 =

167 
	`πa_gë©å_u16
(
ùtunöfo
[
IFLA_IPTUN_6RD_RELAY_PREFIXLEN
]);

170 
¨gc
 > 0) {

171 i‡(
	`°rcmp
(*
¨gv
, "remote") == 0) {

172 
	`NEXT_ARG
();

173 i‡(
	`°rcmp
(*
¨gv
, "any"))

174 
øddr
 = 
	`gë_addr32
(*
¨gv
);

176 
øddr
 = 0;

177 } i‡(
	`°rcmp
(*
¨gv
, "local") == 0) {

178 
	`NEXT_ARG
();

179 i‡(
	`°rcmp
(*
¨gv
, "any"))

180 
œddr
 = 
	`gë_addr32
(*
¨gv
);

182 
œddr
 = 0;

183 } i‡(
	`m©ches
(*
¨gv
, "dev") == 0) {

184 
	`NEXT_ARG
();

185 
lök
 = 
	`if_«mëoödex
(*
¨gv
);

186 i‡(
lök
 == 0)

187 
	`öv¨g
("\"dev\" i†övÆid", *
¨gv
);

188 } i‡(
	`°rcmp
(*
¨gv
, "ttl") == 0 ||

189 
	`°rcmp
(*
¨gv
, "hoplimit") == 0) {

190 
	`NEXT_ARG
();

191 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

192 i‡(
	`gë_u8
(&
âl
, *
¨gv
, 0))

193 
	`öv¨g
("övÆid TTL\n", *
¨gv
);

195 
âl
 = 0;

196 } i‡(
	`°rcmp
(*
¨gv
, "tos") == 0 ||

197 
	`°rcmp
(*
¨gv
, "tclass") == 0 ||

198 
	`m©ches
(*
¨gv
, "dsfield") == 0) {

199 
__u32
 
uvÆ
;

200 
	`NEXT_ARG
();

201 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

202 i‡(
	`π∆_dsfõld_a2n
(&
uvÆ
, *
¨gv
))

203 
	`öv¨g
("bad TOS vÆue", *
¨gv
);

204 
tos
 = 
uvÆ
;

206 
tos
 = 1;

207 } i‡(
	`°rcmp
(*
¨gv
, "nopmtudisc") == 0) {

208 
pmtudisc
 = 0;

209 } i‡(
	`°rcmp
(*
¨gv
, "pmtudisc") == 0) {

210 
pmtudisc
 = 1;

211 } i‡(
	`°rcmp
(
lu
->
id
, "sit") == 0 &&

212 
	`°rcmp
(*
¨gv
, "isatap") == 0) {

213 
iÊags
 |
SIT_ISATAP
;

214 } i‡(
	`°rcmp
(
lu
->
id
, "sit") == 0 &&

215 
	`°rcmp
(*
¨gv
, "mode") == 0) {

216 
	`NEXT_ARG
();

217 i‡(
	`°rcmp
(*
¨gv
, "ipv6/ipv4") == 0 ||

218 
	`°rcmp
(*
¨gv
, "ip6ip") == 0)

219 
¥Ÿo
 = 
IPPROTO_IPV6
;

220 i‡(
	`°rcmp
(*
¨gv
, "ipv4/ipv4") == 0 ||

221 
	`°rcmp
(*
¨gv
, "ipip") == 0 ||

222 
	`°rcmp
(*
¨gv
, "ip4ip4") == 0)

223 
¥Ÿo
 = 
IPPROTO_IPIP
;

224 i‡(
	`°rcmp
(*
¨gv
, "any/ipv4") == 0 ||

225 
	`°rcmp
(*
¨gv
, "any") == 0)

226 
¥Ÿo
 = 0;

228 
	`öv¨g
("C™nŸ gues†tu¬ñ mode.", *
¨gv
);

229 } i‡(
	`°rcmp
(*
¨gv
, "noencap") == 0) {

230 
íˇ±y≥
 = 
TUNNEL_ENCAP_NONE
;

231 } i‡(
	`°rcmp
(*
¨gv
, "encap") == 0) {

232 
	`NEXT_ARG
();

233 i‡(
	`°rcmp
(*
¨gv
, "fou") == 0)

234 
íˇ±y≥
 = 
TUNNEL_ENCAP_FOU
;

235 i‡(
	`°rcmp
(*
¨gv
, "gue") == 0)

236 
íˇ±y≥
 = 
TUNNEL_ENCAP_GUE
;

237 i‡(
	`°rcmp
(*
¨gv
, "none") == 0)

238 
íˇ±y≥
 = 
TUNNEL_ENCAP_NONE
;

240 
	`öv¨g
("InvÆidÉnˇ∞ty≥.", *
¨gv
);

241 } i‡(
	`°rcmp
(*
¨gv
, "encap-sport") == 0) {

242 
	`NEXT_ARG
();

243 i‡(
	`°rcmp
(*
¨gv
, "auto") == 0)

244 
íˇp•‹t
 = 0;

245 i‡(
	`gë_u16
(&
íˇp•‹t
, *
¨gv
, 0))

246 
	`öv¨g
("InvÆid sour˚Ö‹t.", *
¨gv
);

247 } i‡(
	`°rcmp
(*
¨gv
, "encap-dport") == 0) {

248 
	`NEXT_ARG
();

249 i‡(
	`gë_u16
(&
íˇpdp‹t
, *
¨gv
, 0))

250 
	`öv¨g
("InvÆid de°ö©i⁄Ö‹t.", *
¨gv
);

251 } i‡(
	`°rcmp
(*
¨gv
, "encap-csum") == 0) {

252 
íˇpÊags
 |
TUNNEL_ENCAP_FLAG_CSUM
;

253 } i‡(
	`°rcmp
(*
¨gv
, "noencap-csum") == 0) {

254 
íˇpÊags
 &~
TUNNEL_ENCAP_FLAG_CSUM
;

255 } i‡(
	`°rcmp
(*
¨gv
, "encap-udp6-csum") == 0) {

256 
íˇpÊags
 |
TUNNEL_ENCAP_FLAG_CSUM6
;

257 } i‡(
	`°rcmp
(*
¨gv
, "noencap-udp6-csum") == 0) {

258 
íˇpÊags
 &~
TUNNEL_ENCAP_FLAG_CSUM6
;

259 } i‡(
	`°rcmp
(*
¨gv
, "encap-remcsum") == 0) {

260 
íˇpÊags
 |
TUNNEL_ENCAP_FLAG_REMCSUM
;

261 } i‡(
	`°rcmp
(*
¨gv
, "noencap-remcsum") == 0) {

262 
íˇpÊags
 &~
TUNNEL_ENCAP_FLAG_REMCSUM
;

263 } i‡(
	`°rcmp
(*
¨gv
, "6rd-prefix") == 0) {

264 
öë_¥efix
 
¥efix
;

265 
	`NEXT_ARG
();

266 i‡(
	`gë_¥efix
(&
¥efix
, *
¨gv
, 
AF_INET6
))

267 
	`öv¨g
("övÆid 6rd_¥efix\n", *
¨gv
);

268 
	`mem˝y
(&
ù6rd¥efix
, 
¥efix
.
d©a
, 16);

269 
ù6rd¥efixÀn
 = 
¥efix
.
bôÀn
;

270 } i‡(
	`°rcmp
(*
¨gv
, "6rd-relay_prefix") == 0) {

271 
öë_¥efix
 
¥efix
;

272 
	`NEXT_ARG
();

273 i‡(
	`gë_¥efix
(&
¥efix
, *
¨gv
, 
AF_INET
))

274 
	`öv¨g
("övÆid 6rd-ªœy_¥efix\n", *
¨gv
);

275 
	`mem˝y
(&
ù6rdªœy¥efix
, 
¥efix
.
d©a
, 4);

276 
ù6rdªœy¥efixÀn
 = 
¥efix
.
bôÀn
;

277 } i‡(
	`°rcmp
(*
¨gv
, "6rd-reset") == 0) {

278 
öë_¥efix
 
¥efix
;

279 
	`gë_¥efix
(&
¥efix
, "2002::", 
AF_INET6
);

280 
	`mem˝y
(&
ù6rd¥efix
, 
¥efix
.
d©a
, 16);

281 
ù6rd¥efixÀn
 = 16;

282 
ù6rdªœy¥efix
 = 0;

283 
ù6rdªœy¥efixÀn
 = 0;

285 
	`ußge
(
	`°rcmp
(
lu
->
id
, "sit") == 0);

286 
¨gc
--, 
¨gv
++;

289 i‡(
âl
 && 
pmtudisc
 == 0) {

290 
	`Ârötf
(
°dîr
, "ttl != 0ándÇopmtudiscáre incompatible\n");

291 
	`exô
(-1);

294 
	`add©å32
(
n
, 1024, 
IFLA_IPTUN_LINK
, 
lök
);

295 
	`add©å32
(
n
, 1024, 
IFLA_IPTUN_LOCAL
, 
œddr
);

296 
	`add©å32
(
n
, 1024, 
IFLA_IPTUN_REMOTE
, 
øddr
);

297 
	`add©å8
(
n
, 1024, 
IFLA_IPTUN_TTL
, 
âl
);

298 
	`add©å8
(
n
, 1024, 
IFLA_IPTUN_TOS
, 
tos
);

299 
	`add©å8
(
n
, 1024, 
IFLA_IPTUN_PMTUDISC
, 
pmtudisc
);

301 
	`add©å16
(
n
, 1024, 
IFLA_IPTUN_ENCAP_TYPE
, 
íˇ±y≥
);

302 
	`add©å16
(
n
, 1024, 
IFLA_IPTUN_ENCAP_FLAGS
, 
íˇpÊags
);

303 
	`add©å16
(
n
, 1024, 
IFLA_IPTUN_ENCAP_SPORT
, 
	`ht⁄s
(
íˇp•‹t
));

304 
	`add©å16
(
n
, 1024, 
IFLA_IPTUN_ENCAP_DPORT
, 
	`ht⁄s
(
íˇpdp‹t
));

306 i‡(
	`°rcmp
(
lu
->
id
, "sit") == 0) {

307 
	`add©å16
(
n
, 1024, 
IFLA_IPTUN_FLAGS
, 
iÊags
);

308 
	`add©å8
(
n
, 1024, 
IFLA_IPTUN_PROTO
, 
¥Ÿo
);

309 i‡(
ù6rd¥efixÀn
) {

310 
	`add©å_l
(
n
, 1024, 
IFLA_IPTUN_6RD_PREFIX
,

311 &
ù6rd¥efix
, (ip6rdprefix));

312 
	`add©å16
(
n
, 1024, 
IFLA_IPTUN_6RD_PREFIXLEN
,

313 
ù6rd¥efixÀn
);

314 
	`add©å32
(
n
, 1024, 
IFLA_IPTUN_6RD_RELAY_PREFIX
,

315 
ù6rdªœy¥efix
);

316 
	`add©å16
(
n
, 1024, 
IFLA_IPTUN_6RD_RELAY_PREFIXLEN
,

317 
ù6rdªœy¥efixÀn
);

322 
	}
}

324 
	$ùtu¬ñ_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

326 
s1
[1024];

327 
s2
[64];

328 c⁄° *
loˇl
 = "any";

329 c⁄° *
ªmŸe
 = "any";

331 i‡(!
tb
)

334 i‡(
tb
[
IFLA_IPTUN_REMOTE
]) {

335 
addr
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_IPTUN_REMOTE
]);

337 i‡(
addr
)

338 
ªmŸe
 = 
	`f‹m©_ho°
(
AF_INET
, 4, &
addr
, 
s1
, (s1));

341 
	`Ârötf
(
f
, "ªmŸê%†", 
ªmŸe
);

343 i‡(
tb
[
IFLA_IPTUN_LOCAL
]) {

344 
addr
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_IPTUN_LOCAL
]);

346 i‡(
addr
)

347 
loˇl
 = 
	`f‹m©_ho°
(
AF_INET
, 4, &
addr
, 
s1
, (s1));

350 
	`Ârötf
(
f
, "loˇ»%†", 
loˇl
);

352 i‡(
tb
[
IFLA_IPTUN_LINK
] && 
	`πa_gë©å_u32
(tb[IFLA_IPTUN_LINK])) {

353 
lök
 = 
	`πa_gë©å_u32
(
tb
[
IFLA_IPTUN_LINK
]);

354 c⁄° *
n
 = 
	`if_ödext⁄ame
(
lök
, 
s2
);

356 i‡(
n
)

357 
	`Ârötf
(
f
, "dev %†", 
n
);

359 
	`Ârötf
(
f
, "dev %u ", 
lök
);

362 i‡(
tb
[
IFLA_IPTUN_TTL
] && 
	`πa_gë©å_u8
(tb[IFLA_IPTUN_TTL]))

363 
	`Ârötf
(
f
, "â»%d ", 
	`πa_gë©å_u8
(
tb
[
IFLA_IPTUN_TTL
]));

365 
	`Ârötf
(
f
, "ttl inherit ");

367 i‡(
tb
[
IFLA_IPTUN_TOS
] && 
	`πa_gë©å_u8
(tb[IFLA_IPTUN_TOS])) {

368 
tos
 = 
	`πa_gë©å_u8
(
tb
[
IFLA_IPTUN_TOS
]);

370 
	`Âuts
("to†", 
f
);

371 i‡(
tos
 == 1)

372 
	`Âuts
("öhîô ", 
f
);

374 
	`Ârötf
(
f
, "0x%x ", 
tos
);

377 i‡(
tb
[
IFLA_IPTUN_PMTUDISC
] && 
	`πa_gë©å_u8
(tb[IFLA_IPTUN_PMTUDISC]))

378 
	`Ârötf
(
f
, "pmtudisc ");

380 
	`Ârötf
(
f
, "nopmtudisc ");

382 i‡(
tb
[
IFLA_IPTUN_FLAGS
]) {

383 
__u16
 
iÊags
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_IPTUN_FLAGS
]);

385 i‡(
iÊags
 & 
SIT_ISATAP
)

386 
	`Ârötf
(
f
, "isatap ");

389 i‡(
tb
[
IFLA_IPTUN_6RD_PREFIXLEN
] &&

390 *(
__u16
 *)
	`RTA_DATA
(
tb
[
IFLA_IPTUN_6RD_PREFIXLEN
])) {

391 
__u16
 
¥efixÀn
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_IPTUN_6RD_PREFIXLEN
]);

392 
__u16
 
ªœy¥efixÀn
 =

393 
	`πa_gë©å_u16
(
tb
[
IFLA_IPTUN_6RD_RELAY_PREFIXLEN
]);

394 
__u32
 
ªœy¥efix
 =

395 
	`πa_gë©å_u32
(
tb
[
IFLA_IPTUN_6RD_RELAY_PREFIX
]);

397 
	`¥ötf
("6rd-prefix %s/%u ",

398 
	`öë_¡›
(
AF_INET6
, 
	`RTA_DATA
(
tb
[
IFLA_IPTUN_6RD_PREFIX
]),

399 
s1
, (s1)),

400 
¥efixÀn
);

401 i‡(
ªœy¥efix
) {

402 
	`¥ötf
("6rd-relay_prefix %s/%u ",

403 
	`f‹m©_ho°
(
AF_INET
, 4, &
ªœy¥efix
, 
s1
,

404 (
s1
)),

405 
ªœy¥efixÀn
);

409 i‡(
tb
[
IFLA_IPTUN_ENCAP_TYPE
] &&

410 *(
__u16
 *)
	`RTA_DATA
(
tb
[
IFLA_IPTUN_ENCAP_TYPE
]Ë!
TUNNEL_ENCAP_NONE
) {

411 
__u16
 
ty≥
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_IPTUN_ENCAP_TYPE
]);

412 
__u16
 
Êags
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_IPTUN_ENCAP_FLAGS
]);

413 
__u16
 
•‹t
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_IPTUN_ENCAP_SPORT
]);

414 
__u16
 
dp‹t
 = 
	`πa_gë©å_u16
(
tb
[
IFLA_IPTUN_ENCAP_DPORT
]);

416 
	`Âuts
("íˇ∞", 
f
);

417 
ty≥
) {

418 
TUNNEL_ENCAP_FOU
:

419 
	`Âuts
("fou ", 
f
);

421 
TUNNEL_ENCAP_GUE
:

422 
	`Âuts
("guê", 
f
);

425 
	`Âuts
("unknow¿", 
f
);

429 i‡(
•‹t
 == 0)

430 
	`Âuts
("íˇp-•‹àautÿ", 
f
);

432 
	`Ârötf
(
f
, "íˇp-•‹à%u", 
	`¡ohs
(
•‹t
));

434 
	`Ârötf
(
f
, "íˇp-dp‹à%u ", 
	`¡ohs
(
dp‹t
));

436 i‡(
Êags
 & 
TUNNEL_ENCAP_FLAG_CSUM
)

437 
	`Âuts
("íˇp-csum ", 
f
);

439 
	`Âuts
("n€nˇp-csum ", 
f
);

441 i‡(
Êags
 & 
TUNNEL_ENCAP_FLAG_CSUM6
)

442 
	`Âuts
("íˇp-csum6 ", 
f
);

444 
	`Âuts
("n€nˇp-csum6 ", 
f
);

446 i‡(
Êags
 & 
TUNNEL_ENCAP_FLAG_REMCSUM
)

447 
	`Âuts
("íˇp-ªmcsum ", 
f
);

449 
	`Âuts
("n€nˇp-ªmcsum ", 
f
);

451 
	}
}

453 
	$ùtu¬ñ_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

454 
FILE
 *
f
)

456 
	`¥öt_ußge
(
f
, 
	`°rcmp
(
lu
->
id
, "sit") == 0);

457 
	}
}

459 
lök_utû
 
	gùù_lök_utû
 = {

460 .
id
 = "ipip",

461 .
	gmax©å
 = 
IFLA_IPTUN_MAX
,

462 .
	g∑r£_›t
 = 
ùtu¬ñ_∑r£_›t
,

463 .
	g¥öt_›t
 = 
ùtu¬ñ_¥öt_›t
,

464 .
	g¥öt_hñp
 = 
ùtu¬ñ_¥öt_hñp
,

467 
lök_utû
 
	gsô_lök_utû
 = {

468 .
id
 = "sit",

469 .
	gmax©å
 = 
IFLA_IPTUN_MAX
,

470 .
	g∑r£_›t
 = 
ùtu¬ñ_∑r£_›t
,

471 .
	g¥öt_›t
 = 
ùtu¬ñ_¥öt_›t
,

472 .
	g¥öt_hñp
 = 
ùtu¬ñ_¥öt_hñp
,

	@ip/link_veth.c

13 
	~<°rög.h
>

14 
	~<√t/if.h
>

15 
	~<löux/vëh.h
>

17 
	~"utûs.h
"

18 
	~"ù_comm⁄.h
"

20 
	$¥öt_ußge
(
FILE
 *
f
)

22 
	`¥ötf
("Usage: ipÜink <options>Åype veth [peer <options>]\n"

24 
	}
}

26 
	$ußge
()

28 
	`¥öt_ußge
(
°dîr
);

29 
	}
}

31 
	$vëh_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

32 
∆msghdr
 *
hdr
)

34 *
dev
 = 
NULL
;

35 *
«me
 = 
NULL
;

36 *
lök
 = 
NULL
;

37 *
ty≥
 = 
NULL
;

38 
ödex
 = 0;

39 
îr
, 
Àn
;

40 
π©å
 * 
d©a
;

41 
group
;

42 
iföfomsg
 *
ifm
, *
≥î_ifm
;

43 
ifi_Êags
, 
ifi_ch™ge
;

45 i‡(
	`°rcmp
(
¨gv
[0], "peer") != 0) {

46 
	`ußge
();

50 
ifm
 = 
	`NLMSG_DATA
(
hdr
);

51 
ifi_Êags
 = 
ifm
->ifi_flags;

52 
ifi_ch™ge
 = 
ifm
->ifi_change;

53 
ifm
->
ifi_Êags
 = 0;

54 
ifm
->
ifi_ch™ge
 = 0;

56 
d©a
 = 
	`NLMSG_TAIL
(
hdr
);

57 
	`add©å_l
(
hdr
, 1024, 
VETH_INFO_PEER
, 
NULL
, 0);

59 
hdr
->
∆msg_Àn
 +(
iföfomsg
);

61 
îr
 = 
	`ùlök_∑r£
(
¨gc
 - 1, 
¨gv
 + 1, (
ùlök_ªq
 *)
hdr
,

62 &
«me
, &
ty≥
, &
lök
, &
dev
, &
group
, &
ödex
);

63 i‡(
îr
 < 0)

64  
îr
;

66 i‡(
«me
) {

67 
Àn
 = 
	`°æí
(
«me
) + 1;

68 i‡(
Àn
 > 
IFNAMSIZ
)

69 
	`öv¨g
("\"«me\"Åoÿl⁄g\n", *
¨gv
);

70 
	`add©å_l
(
hdr
, 1024, 
IFLA_IFNAME
, 
«me
, 
Àn
);

73 
≥î_ifm
 = 
	`RTA_DATA
(
d©a
);

74 
≥î_ifm
->
ifi_ödex
 = 
ödex
;

75 
≥î_ifm
->
ifi_Êags
 = 
ifm
->ifi_flags;

76 
≥î_ifm
->
ifi_ch™ge
 = 
ifm
->ifi_change;

77 
ifm
->
ifi_Êags
 = ifi_flags;

78 
ifm
->
ifi_ch™ge
 = ifi_change;

80 i‡(
group
 != -1)

81 
	`add©å32
(
hdr
, 1024, 
IFLA_GROUP
, 
group
);

83 
d©a
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
hdr
) - (*)data;

84  
¨gc
 - 1 - 
îr
;

85 
	}
}

87 
	$vëh_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

88 
FILE
 *
f
)

90 
	`¥öt_ußge
(
f
);

91 
	}
}

93 
lök_utû
 
	gvëh_lök_utû
 = {

94 .
id
 = "veth",

95 .
	g∑r£_›t
 = 
vëh_∑r£_›t
,

96 .
	g¥öt_hñp
 = 
vëh_¥öt_hñp
,

	@ip/link_vti.c

13 
	~<°rög.h
>

14 
	~<√t/if.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<¨∑/öë.h
>

19 
	~<löux/ù.h
>

20 
	~<löux/if_tu¬ñ.h
>

21 
	~"π_«mes.h
"

22 
	~"utûs.h
"

23 
	~"ù_comm⁄.h
"

24 
	~"tu¬ñ.h
"

27 
	$¥öt_ußge
(
FILE
 *
f
)

29 
	`Ârötf
(
f
, "Usage: ipÜink {ádd | set | change |Ñeplace | del } NAME\n");

30 
	`Ârötf
(
f
, "Åype { vti } [Ñemote ADDR ] [Üocal ADDR ]\n");

31 
	`Ârötf
(
f
, " [ [i|o]key KEY ]\n");

32 
	`Ârötf
(
f
, " [ dev PHYS_DEV ]\n");

33 
	`Ârötf
(
f
, "\n");

34 
	`Ârötf
(
f
, "Where: NAME := STRING\n");

35 
	`Ârötf
(
f
, " ADDR := { IP_ADDRESS }\n");

36 
	`Ârötf
(
f
, " KEY := { DOTTED_QUAD | NUMBER }\n");

37 
	}
}

39 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

40 
	$ußge
()

42 
	`¥öt_ußge
(
°dîr
);

43 
	`exô
(-1);

44 
	}
}

46 
	$vti_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

47 
∆msghdr
 *
n
)

50 
∆msghdr
 
n
;

51 
iföfomsg
 
i
;

52 
buf
[1024];

53 } 
ªq
;

54 
iföfomsg
 *
ifi
 = (iföfomsg *)(
n
 + 1);

55 
π©å
 *
tb
[
IFLA_MAX
 + 1];

56 
π©å
 *
lököfo
[
IFLA_INFO_MAX
+1];

57 
π©å
 *
vtiöfo
[
IFLA_VTI_MAX
 + 1];

58 
ikey
 = 0;

59 
okey
 = 0;

60 
ßddr
 = 0;

61 
daddr
 = 0;

62 
lök
 = 0;

63 
Àn
;

65 i‡(!(
n
->
∆msg_Êags
 & 
NLM_F_CREATE
)) {

66 
	`mem£t
(&
ªq
, 0, (req));

68 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((*
ifi
));

69 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

70 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETLINK
;

71 
ªq
.
i
.
ifi_Ámûy
 = 
¥e„ºed_Ámûy
;

72 
ªq
.
i
.
ifi_ödex
 = 
ifi
->ifi_index;

74 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, &req.n, (req)) < 0) {

75 
gë_Áûed
:

76 
	`Ârötf
(
°dîr
,

81 
Àn
 = 
ªq
.
n
.
∆msg_Àn
;

82 
Àn
 -
	`NLMSG_LENGTH
((*
ifi
));

83 i‡(
Àn
 < 0)

84 
gë_Áûed
;

86 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(&
ªq
.
i
), 
Àn
);

88 i‡(!
tb
[
IFLA_LINKINFO
])

89 
gë_Áûed
;

91 
	`∑r£_π©å_√°ed
(
lököfo
, 
IFLA_INFO_MAX
, 
tb
[
IFLA_LINKINFO
]);

93 i‡(!
lököfo
[
IFLA_INFO_DATA
])

94 
gë_Áûed
;

96 
	`∑r£_π©å_√°ed
(
vtiöfo
, 
IFLA_VTI_MAX
,

97 
lököfo
[
IFLA_INFO_DATA
]);

99 i‡(
vtiöfo
[
IFLA_VTI_IKEY
])

100 
ikey
 = *(
__u32
 *)
	`RTA_DATA
(
vtiöfo
[
IFLA_VTI_IKEY
]);

102 i‡(
vtiöfo
[
IFLA_VTI_OKEY
])

103 
okey
 = *(
__u32
 *)
	`RTA_DATA
(
vtiöfo
[
IFLA_VTI_OKEY
]);

105 i‡(
vtiöfo
[
IFLA_VTI_LOCAL
])

106 
ßddr
 = *(
__u32
 *)
	`RTA_DATA
(
vtiöfo
[
IFLA_VTI_LOCAL
]);

108 i‡(
vtiöfo
[
IFLA_VTI_REMOTE
])

109 
daddr
 = *(
__u32
 *)
	`RTA_DATA
(
vtiöfo
[
IFLA_VTI_REMOTE
]);

111 i‡(
vtiöfo
[
IFLA_VTI_LINK
])

112 
lök
 = *(
__u8
 *)
	`RTA_DATA
(
vtiöfo
[
IFLA_VTI_LINK
]);

115 
¨gc
 > 0) {

116 i‡(!
	`m©ches
(*
¨gv
, "key")) {

117 
uvÆ
;

119 
	`NEXT_ARG
();

120 i‡(
	`°rchr
(*
¨gv
, '.'))

121 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

123 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0) < 0) {

124 
	`Ârötf
(
°dîr
,

125 "InvÆid vÆuêf‹ \"key\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

126 
	`exô
(-1);

128 
uvÆ
 = 
	`ht⁄l
(uval);

131 
ikey
 = 
okey
 = 
uvÆ
;

132 } i‡(!
	`m©ches
(*
¨gv
, "ikey")) {

133 
uvÆ
;

135 
	`NEXT_ARG
();

136 i‡(
	`°rchr
(*
¨gv
, '.'))

137 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

139 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0) < 0) {

140 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"ikey\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

141 
	`exô
(-1);

143 
uvÆ
 = 
	`ht⁄l
(uval);

145 
ikey
 = 
uvÆ
;

146 } i‡(!
	`m©ches
(*
¨gv
, "okey")) {

147 
uvÆ
;

149 
	`NEXT_ARG
();

150 i‡(
	`°rchr
(*
¨gv
, '.'))

151 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

153 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0) < 0) {

154 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"okey\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

155 
	`exô
(-1);

157 
uvÆ
 = 
	`ht⁄l
(uval);

159 
okey
 = 
uvÆ
;

160 } i‡(!
	`m©ches
(*
¨gv
, "remote")) {

161 
	`NEXT_ARG
();

162 i‡(!
	`°rcmp
(*
¨gv
, "any")) {

163 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"ªmŸe\": \"%s\"\n", *
¨gv
);

164 
	`exô
(-1);

166 
daddr
 = 
	`gë_addr32
(*
¨gv
);

168 } i‡(!
	`m©ches
(*
¨gv
, "local")) {

169 
	`NEXT_ARG
();

170 i‡(!
	`°rcmp
(*
¨gv
, "any")) {

171 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"loˇl\": \"%s\"\n", *
¨gv
);

172 
	`exô
(-1);

174 
ßddr
 = 
	`gë_addr32
(*
¨gv
);

176 } i‡(!
	`m©ches
(*
¨gv
, "dev")) {

177 
	`NEXT_ARG
();

178 
lök
 = 
	`if_«mëoödex
(*
¨gv
);

179 i‡(
lök
 == 0) {

180 
	`Ârötf
(
°dîr
, "Cannot find device \"%s\"\n",

181 *
¨gv
);

182 
	`exô
(-1);

185 
	`ußge
();

186 
¨gc
--; 
¨gv
++;

189 
	`add©å32
(
n
, 1024, 
IFLA_VTI_IKEY
, 
ikey
);

190 
	`add©å32
(
n
, 1024, 
IFLA_VTI_OKEY
, 
okey
);

191 
	`add©å_l
(
n
, 1024, 
IFLA_VTI_LOCAL
, &
ßddr
, 4);

192 
	`add©å_l
(
n
, 1024, 
IFLA_VTI_REMOTE
, &
daddr
, 4);

193 i‡(
lök
)

194 
	`add©å32
(
n
, 1024, 
IFLA_VTI_LINK
, 
lök
);

197 
	}
}

199 
	$vti_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

201 
s1
[1024];

202 
s2
[64];

203 c⁄° *
loˇl
 = "any";

204 c⁄° *
ªmŸe
 = "any";

206 i‡(!
tb
)

209 i‡(
tb
[
IFLA_VTI_REMOTE
]) {

210 
addr
 = *(
__u32
 *)
	`RTA_DATA
(
tb
[
IFLA_VTI_REMOTE
]);

212 i‡(
addr
)

213 
ªmŸe
 = 
	`f‹m©_ho°
(
AF_INET
, 4, &
addr
, 
s1
, (s1));

216 
	`Ârötf
(
f
, "ªmŸê%†", 
ªmŸe
);

218 i‡(
tb
[
IFLA_VTI_LOCAL
]) {

219 
addr
 = *(
__u32
 *)
	`RTA_DATA
(
tb
[
IFLA_VTI_LOCAL
]);

221 i‡(
addr
)

222 
loˇl
 = 
	`f‹m©_ho°
(
AF_INET
, 4, &
addr
, 
s1
, (s1));

225 
	`Ârötf
(
f
, "loˇ»%†", 
loˇl
);

227 i‡(
tb
[
IFLA_VTI_LINK
] && *(
__u32
 *)
	`RTA_DATA
(tb[IFLA_VTI_LINK])) {

228 
lök
 = *(
__u32
 *)
	`RTA_DATA
(
tb
[
IFLA_VTI_LINK
]);

229 c⁄° *
n
 = 
	`if_ödext⁄ame
(
lök
, 
s2
);

231 i‡(
n
)

232 
	`Ârötf
(
f
, "dev %†", 
n
);

234 
	`Ârötf
(
f
, "dev %u ", 
lök
);

237 i‡(
tb
[
IFLA_VTI_IKEY
]) {

238 
	`öë_¡›
(
AF_INET
, 
	`RTA_DATA
(
tb
[
IFLA_VTI_IKEY
]), 
s2
, (s2));

239 
	`Ârötf
(
f
, "ikey %†", 
s2
);

242 i‡(
tb
[
IFLA_VTI_OKEY
]) {

243 
	`öë_¡›
(
AF_INET
, 
	`RTA_DATA
(
tb
[
IFLA_VTI_OKEY
]), 
s2
, (s2));

244 
	`Ârötf
(
f
, "okey %†", 
s2
);

246 
	}
}

248 
	$vti_¥öt_hñp
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

249 
FILE
 *
f
)

251 
	`¥öt_ußge
(
f
);

252 
	}
}

254 
lök_utû
 
	gvti_lök_utû
 = {

255 .
id
 = "vti",

256 .
	gmax©å
 = 
IFLA_VTI_MAX
,

257 .
	g∑r£_›t
 = 
vti_∑r£_›t
,

258 .
	g¥öt_›t
 = 
vti_¥öt_›t
,

259 .
	g¥öt_hñp
 = 
vti_¥öt_hñp
,

	@ip/link_vti6.c

14 
	~<°rög.h
>

15 
	~<√t/if.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/sockë.h
>

18 
	~<¨∑/öë.h
>

20 
	~<löux/ù.h
>

21 
	~<löux/if_tu¬ñ.h
>

22 
	~"π_«mes.h
"

23 
	~"utûs.h
"

24 
	~"ù_comm⁄.h
"

25 
	~"tu¬ñ.h
"

28 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

29 
	$ußge
()

31 
	`Ârötf
(
°dîr
, "Usage: ipÜink {ádd | set | change |Ñeplace | del } NAME\n");

32 
	`Ârötf
(
°dîr
, "Åype { vti6 } [Ñemote ADDR ] [Üocal ADDR ]\n");

33 
	`Ârötf
(
°dîr
, " [ [i|o]key KEY ]\n");

34 
	`Ârötf
(
°dîr
, " [ dev PHYS_DEV ]\n");

35 
	`Ârötf
(
°dîr
, "\n");

36 
	`Ârötf
(
°dîr
, "Where: NAME := STRING\n");

37 
	`Ârötf
(
°dîr
, " ADDR := { IPV6_ADDRESS }\n");

38 
	`Ârötf
(
°dîr
, " KEY := { DOTTED_QUAD | NUMBER }\n");

39 
	`exô
(-1);

40 
	}
}

42 
	$vti6_∑r£_›t
(
lök_utû
 *
lu
, 
¨gc
, **
¨gv
,

43 
∆msghdr
 *
n
)

46 
∆msghdr
 
n
;

47 
iföfomsg
 
i
;

48 
buf
[1024];

49 } 
ªq
;

50 
iföfomsg
 *
ifi
 = (iföfomsg *)(
n
 + 1);

51 
π©å
 *
tb
[
IFLA_MAX
 + 1];

52 
π©å
 *
lököfo
[
IFLA_INFO_MAX
+1];

53 
π©å
 *
vtiöfo
[
IFLA_VTI_MAX
 + 1];

54 
ö6_addr
 
ßddr
;

55 
ö6_addr
 
daddr
;

56 
ikey
 = 0;

57 
okey
 = 0;

58 
lök
 = 0;

59 
Àn
;

61 i‡(!(
n
->
∆msg_Êags
 & 
NLM_F_CREATE
)) {

62 
	`mem£t
(&
ªq
, 0, (req));

64 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((*
ifi
));

65 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

66 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_GETLINK
;

67 
ªq
.
i
.
ifi_Ámûy
 = 
¥e„ºed_Ámûy
;

68 
ªq
.
i
.
ifi_ödex
 = 
ifi
->ifi_index;

70 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, &req.n, (req)) < 0) {

71 
gë_Áûed
:

72 
	`Ârötf
(
°dîr
,

77 
Àn
 = 
ªq
.
n
.
∆msg_Àn
;

78 
Àn
 -
	`NLMSG_LENGTH
((*
ifi
));

79 i‡(
Àn
 < 0)

80 
gë_Áûed
;

82 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(&
ªq
.
i
), 
Àn
);

84 i‡(!
tb
[
IFLA_LINKINFO
])

85 
gë_Áûed
;

87 
	`∑r£_π©å_√°ed
(
lököfo
, 
IFLA_INFO_MAX
, 
tb
[
IFLA_LINKINFO
]);

89 i‡(!
lököfo
[
IFLA_INFO_DATA
])

90 
gë_Áûed
;

92 
	`∑r£_π©å_√°ed
(
vtiöfo
, 
IFLA_VTI_MAX
,

93 
lököfo
[
IFLA_INFO_DATA
]);

95 i‡(
vtiöfo
[
IFLA_VTI_IKEY
])

96 
ikey
 = 
	`πa_gë©å_u32
(
vtiöfo
[
IFLA_VTI_IKEY
]);

98 i‡(
vtiöfo
[
IFLA_VTI_OKEY
])

99 
okey
 = 
	`πa_gë©å_u32
(
vtiöfo
[
IFLA_VTI_OKEY
]);

101 i‡(
vtiöfo
[
IFLA_VTI_LOCAL
])

102 
	`mem˝y
(&
ßddr
, 
	`RTA_DATA
(
vtiöfo
[
IFLA_VTI_LOCAL
]), (saddr));

104 i‡(
vtiöfo
[
IFLA_VTI_REMOTE
])

105 
	`mem˝y
(&
daddr
, 
	`RTA_DATA
(
vtiöfo
[
IFLA_VTI_REMOTE
]), (daddr));

107 i‡(
vtiöfo
[
IFLA_VTI_LINK
])

108 
lök
 = 
	`πa_gë©å_u8
(
vtiöfo
[
IFLA_VTI_LINK
]);

111 
¨gc
 > 0) {

112 i‡(!
	`m©ches
(*
¨gv
, "key")) {

113 
uvÆ
;

115 
	`NEXT_ARG
();

116 i‡(
	`°rchr
(*
¨gv
, '.'))

117 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

119 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0) < 0) {

120 
	`Ârötf
(
°dîr
,

121 "InvÆid vÆuêf‹ \"key\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

122 
	`exô
(-1);

124 
uvÆ
 = 
	`ht⁄l
(uval);

127 
ikey
 = 
okey
 = 
uvÆ
;

128 } i‡(!
	`m©ches
(*
¨gv
, "ikey")) {

129 
uvÆ
;

131 
	`NEXT_ARG
();

132 i‡(
	`°rchr
(*
¨gv
, '.'))

133 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

135 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0) < 0) {

136 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"ikey\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

137 
	`exô
(-1);

139 
uvÆ
 = 
	`ht⁄l
(uval);

141 
ikey
 = 
uvÆ
;

142 } i‡(!
	`m©ches
(*
¨gv
, "okey")) {

143 
uvÆ
;

145 
	`NEXT_ARG
();

146 i‡(
	`°rchr
(*
¨gv
, '.'))

147 
uvÆ
 = 
	`gë_addr32
(*
¨gv
);

149 i‡(
	`gë_unsig√d
(&
uvÆ
, *
¨gv
, 0) < 0) {

150 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"okey\": \"%s\"; iàshould bê™ unsig√d i¡egî\n", *
¨gv
);

151 
	`exô
(-1);

153 
uvÆ
 = 
	`ht⁄l
(uval);

155 
okey
 = 
uvÆ
;

156 } i‡(!
	`m©ches
(*
¨gv
, "remote")) {

157 
	`NEXT_ARG
();

158 i‡(!
	`°rcmp
(*
¨gv
, "any")) {

159 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"ªmŸe\": \"%s\"\n", *
¨gv
);

160 
	`exô
(-1);

162 
öë_¥efix
 
addr
;

163 
	`gë_¥efix
(&
addr
, *
¨gv
, 
AF_INET6
);

164 
	`mem˝y
(&
daddr
, 
addr
.
d©a
,áddr.
byãÀn
);

166 } i‡(!
	`m©ches
(*
¨gv
, "local")) {

167 
	`NEXT_ARG
();

168 i‡(!
	`°rcmp
(*
¨gv
, "any")) {

169 
	`Ârötf
(
°dîr
, "övÆid vÆuêf‹ \"loˇl\": \"%s\"\n", *
¨gv
);

170 
	`exô
(-1);

172 
öë_¥efix
 
addr
;

173 
	`gë_¥efix
(&
addr
, *
¨gv
, 
AF_INET6
);

174 
	`mem˝y
(&
ßddr
, 
addr
.
d©a
,áddr.
byãÀn
);

176 } i‡(!
	`m©ches
(*
¨gv
, "dev")) {

177 
	`NEXT_ARG
();

178 
lök
 = 
	`if_«mëoödex
(*
¨gv
);

179 i‡(
lök
 == 0)

180 
	`exô
(-1);

182 
	`ußge
();

183 
¨gc
--; 
¨gv
++;

186 
	`add©å32
(
n
, 1024, 
IFLA_VTI_IKEY
, 
ikey
);

187 
	`add©å32
(
n
, 1024, 
IFLA_VTI_OKEY
, 
okey
);

188 
	`add©å_l
(
n
, 1024, 
IFLA_VTI_LOCAL
, &
ßddr
, (saddr));

189 
	`add©å_l
(
n
, 1024, 
IFLA_VTI_REMOTE
, &
daddr
, (daddr));

190 i‡(
lök
)

191 
	`add©å32
(
n
, 1024, 
IFLA_VTI_LINK
, 
lök
);

194 
	}
}

196 
	$vti6_¥öt_›t
(
lök_utû
 *
lu
, 
FILE
 *
f
, 
π©å
 *
tb
[])

198 
s1
[1024];

199 
s2
[64];

200 c⁄° *
loˇl
 = "any";

201 c⁄° *
ªmŸe
 = "any";

202 
ö6_addr
 
ßddr
;

203 
ö6_addr
 
daddr
;

205 i‡(!
tb
)

208 i‡(
tb
[
IFLA_VTI_REMOTE
]) {

209 
	`mem˝y
(&
daddr
, 
	`RTA_DATA
(
tb
[
IFLA_VTI_REMOTE
]), (daddr));

211 
ªmŸe
 = 
	`f‹m©_ho°
(
AF_INET6
, 16, &
daddr
, 
s1
, (s1));

214 
	`Ârötf
(
f
, "ªmŸê%†", 
ªmŸe
);

216 i‡(
tb
[
IFLA_VTI_LOCAL
]) {

217 
	`mem˝y
(&
ßddr
, 
	`RTA_DATA
(
tb
[
IFLA_VTI_LOCAL
]), (saddr));

219 
loˇl
 = 
	`f‹m©_ho°
(
AF_INET6
, 16, &
ßddr
, 
s1
, (s1));

222 
	`Ârötf
(
f
, "loˇ»%†", 
loˇl
);

224 i‡(
tb
[
IFLA_VTI_LINK
] && *(
__u32
 *)
	`RTA_DATA
(tb[IFLA_VTI_LINK])) {

225 
lök
 = *(
__u32
 *)
	`RTA_DATA
(
tb
[
IFLA_VTI_LINK
]);

226 c⁄° *
n
 = 
	`if_ödext⁄ame
(
lök
, 
s2
);

228 i‡(
n
)

229 
	`Ârötf
(
f
, "dev %†", 
n
);

231 
	`Ârötf
(
f
, "dev %u ", 
lök
);

234 i‡(
tb
[
IFLA_VTI_IKEY
]) {

235 
	`öë_¡›
(
AF_INET
, 
	`RTA_DATA
(
tb
[
IFLA_VTI_IKEY
]), 
s2
, (s2));

236 
	`Ârötf
(
f
, "ikey %†", 
s2
);

239 i‡(
tb
[
IFLA_VTI_OKEY
]) {

240 
	`öë_¡›
(
AF_INET
, 
	`RTA_DATA
(
tb
[
IFLA_VTI_OKEY
]), 
s2
, (s2));

241 
	`Ârötf
(
f
, "okey %†", 
s2
);

243 
	}
}

245 
lök_utû
 
	gvti6_lök_utû
 = {

246 .
id
 = "vti6",

247 .
	gmax©å
 = 
IFLA_VTI_MAX
,

248 .
	g∑r£_›t
 = 
vti6_∑r£_›t
,

249 .
	g¥öt_›t
 = 
vti6_¥öt_›t
,

	@ip/rtm_map.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<°rög.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

22 
	~"π_«mes.h
"

23 
	~"utûs.h
"

25 *
	$π∆_π¡y≥_n2a
(
id
, *
buf
, 
Àn
)

27 
id
) {

28 
RTN_UNSPEC
:

30 
RTN_UNICAST
:

32 
RTN_LOCAL
:

34 
RTN_BROADCAST
:

36 
RTN_ANYCAST
:

38 
RTN_MULTICAST
:

40 
RTN_BLACKHOLE
:

42 
RTN_UNREACHABLE
:

44 
RTN_PROHIBIT
:

46 
RTN_THROW
:

48 
RTN_NAT
:

50 
RTN_XRESOLVE
:

53 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
id
);

54  
buf
;

56 
	}
}

59 
	$π∆_π¡y≥_a2n
(*
id
, *
¨g
)

61 *
íd
;

62 
ªs
;

64 i‡(
	`°rcmp
(
¨g
, "local") == 0)

65 
ªs
 = 
RTN_LOCAL
;

66 i‡(
	`°rcmp
(
¨g
, "nat") == 0)

67 
ªs
 = 
RTN_NAT
;

68 i‡(
	`m©ches
(
¨g
, "broadcast") == 0 ||

69 
	`°rcmp
(
¨g
, "brd") == 0)

70 
ªs
 = 
RTN_BROADCAST
;

71 i‡(
	`m©ches
(
¨g
, "anycast") == 0)

72 
ªs
 = 
RTN_ANYCAST
;

73 i‡(
	`m©ches
(
¨g
, "multicast") == 0)

74 
ªs
 = 
RTN_MULTICAST
;

75 i‡(
	`m©ches
(
¨g
, "prohibit") == 0)

76 
ªs
 = 
RTN_PROHIBIT
;

77 i‡(
	`m©ches
(
¨g
, "unreachable") == 0)

78 
ªs
 = 
RTN_UNREACHABLE
;

79 i‡(
	`m©ches
(
¨g
, "blackhole") == 0)

80 
ªs
 = 
RTN_BLACKHOLE
;

81 i‡(
	`m©ches
(
¨g
, "xresolve") == 0)

82 
ªs
 = 
RTN_XRESOLVE
;

83 i‡(
	`m©ches
(
¨g
, "unicast") == 0)

84 
ªs
 = 
RTN_UNICAST
;

85 i‡(
	`°rcmp
(
¨g
, "throw") == 0)

86 
ªs
 = 
RTN_THROW
;

88 
ªs
 = 
	`°πoul
(
¨g
, &
íd
, 0);

89 i‡(!
íd
 ||Énd =
¨g
 || *íd || 
ªs
 > 255)

92 *
id
 = 
ªs
;

94 
	}
}

96 
	$gë_π_ªÆms
(
__u32
 *
ªÆms
, *
¨g
)

98 
__u32
 
ªÆm
 = 0;

99 *
p
 = 
	`°rchr
(
¨g
, '/');

101 *
ªÆms
 = 0;

102 i‡(
p
) {

103 *
p
 = 0;

104 i‡(
	`π∆_πªÆm_a2n
(
ªÆms
, 
¨g
)) {

105 *
p
 = '/';

108 *
ªÆms
 <<= 16;

109 *
p
 = '/';

110 
¨g
 = 
p
+1;

112 i‡(*
¨g
 && 
	`π∆_πªÆm_a2n
(&
ªÆm
,árg))

114 *
ªÆms
 |
ªÆm
;

116 
	}
}

118 
	$gë_π_ªÆms_‹_øw
(
__u32
 *
ªÆms
, *
¨g
)

120 i‡(!
	`gë_π_ªÆms
(
ªÆms
, 
¨g
))

123  
	`gë_unsig√d
(
ªÆms
, 
¨g
, 0);

124 
	}
}

	@ip/rtmon.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<sys/time.h
>

20 
	~<√töë/ö.h
>

21 
	~<°rög.h
>

23 
	~"SNAPSHOT.h
"

25 
	~"utûs.h
"

26 
	~"lib√éök.h
"

28 
	gªsﬁve_ho°s
 = 0;

29 
	göô_pha£
 = 1;

31 
	$wrôe_°amp
(
FILE
 *
Â
)

33 
buf
[128];

34 
∆msghdr
 *
n1
 = (*)
buf
;

35 
timevÆ
 
tv
;

37 
n1
->
∆msg_ty≥
 = 
NLMSG_TSTAMP
;

38 
n1
->
∆msg_Êags
 = 0;

39 
n1
->
∆msg_£q
 = 0;

40 
n1
->
∆msg_pid
 = 0;

41 
n1
->
∆msg_Àn
 = 
	`NLMSG_LENGTH
(4*2);

42 
	`gëtimeofday
(&
tv
, 
NULL
);

43 ((
__u32
*)
	`NLMSG_DATA
(
n1
))[0] = 
tv
.
tv_£c
;

44 ((
__u32
*)
	`NLMSG_DATA
(
n1
))[1] = 
tv
.
tv_u£c
;

45 
	`fwrôe
((*)
n1
, 1, 
	`NLMSG_ALIGN
“1->
∆msg_Àn
), 
Â
);

46 
	}
}

48 
	$dump_msg
(c⁄° 
sockaddr_∆
 *
who
, 
π∆_˘æ_d©a
 *
˘æ
,

49 
∆msghdr
 *
n
, *
¨g
)

51 
FILE
 *
Â
 = (FILE*)
¨g
;

52 i‡(!
öô_pha£
)

53 
	`wrôe_°amp
(
Â
);

54 
	`fwrôe
((*)
n
, 1, 
	`NLMSG_ALIGN
“->
∆msg_Àn
), 
Â
);

55 
	`fÊush
(
Â
);

57 
	}
}

59 
	$dump_msg2
(c⁄° 
sockaddr_∆
 *
who
,

60 
∆msghdr
 *
n
, *
¨g
)

62  
	`dump_msg
(
who
, 
NULL
, 
n
, 
¨g
);

63 
	}
}

65 
	$ußge
()

67 
	`Ârötf
(
°dîr
, "Usage:Ñtmon file FILE [áll | LISTofOBJECTS]\n");

68 
	`Ârötf
(
°dîr
, "LISTofOBJECTS := [Üink ] [áddress ] [Ñoute ]\n");

69 
	`exô
(-1);

70 
	}
}

73 
	$maö
(
¨gc
, **
¨gv
)

75 
FILE
 *
Â
;

76 
π∆_h™dÀ
 
πh
;

77 
Ámûy
 = 
AF_UNSPEC
;

78 
groups
 = ~0U;

79 
Œök
 = 0;

80 
œddr
 = 0;

81 
Ãouã
 = 0;

82 *
fûe
 = 
NULL
;

84 
¨gc
 > 1) {

85 i‡(
	`m©ches
(
¨gv
[1], "-family") == 0) {

86 
¨gc
--;

87 
¨gv
++;

88 i‡(
¨gc
 <= 1)

89 
	`ußge
();

90 i‡(
	`°rcmp
(
¨gv
[1], "inet") == 0)

91 
Ámûy
 = 
AF_INET
;

92 i‡(
	`°rcmp
(
¨gv
[1], "inet6") == 0)

93 
Ámûy
 = 
AF_INET6
;

94 i‡(
	`°rcmp
(
¨gv
[1], "link") == 0)

95 
Ámûy
 = 
AF_INET6
;

96 i‡(
	`°rcmp
(
¨gv
[1], "help") == 0)

97 
	`ußge
();

99 
	`Ârötf
(
°dîr
, "PrŸocﬁ ID \"%s\" i†unknown,Åry \"πm⁄ hñp\".\n", 
¨gv
[1]);

100 
	`exô
(-1);

102 } i‡(
	`°rcmp
(
¨gv
[1], "-4") == 0) {

103 
Ámûy
 = 
AF_INET
;

104 } i‡(
	`°rcmp
(
¨gv
[1], "-6") == 0) {

105 
Ámûy
 = 
AF_INET6
;

106 } i‡(
	`°rcmp
(
¨gv
[1], "-0") == 0) {

107 
Ámûy
 = 
AF_PACKET
;

108 } i‡(
	`m©ches
(
¨gv
[1], "-Version") == 0) {

109 
	`¥ötf
("πm⁄ utûôy, i¥ouã2-ss%s\n", 
SNAPSHOT
);

110 
	`exô
(0);

111 } i‡(
	`m©ches
(
¨gv
[1], "file") == 0) {

112 
¨gc
--;

113 
¨gv
++;

114 i‡(
¨gc
 <= 1)

115 
	`ußge
();

116 
fûe
 = 
¨gv
[1];

117 } i‡(
	`m©ches
(
¨gv
[1], "link") == 0) {

118 
Œök
=1;

119 
groups
 = 0;

120 } i‡(
	`m©ches
(
¨gv
[1], "address") == 0) {

121 
œddr
=1;

122 
groups
 = 0;

123 } i‡(
	`m©ches
(
¨gv
[1], "route") == 0) {

124 
Ãouã
=1;

125 
groups
 = 0;

126 } i‡(
	`°rcmp
(
¨gv
[1], "all") == 0) {

127 
groups
 = ~0U;

128 } i‡(
	`m©ches
(
¨gv
[1], "help") == 0) {

129 
	`ußge
();

131 
	`Ârötf
(
°dîr
, "Argumíà\"%s\" i†unknown,Åry \"πm⁄ hñp\".\n", 
¨gv
[1]);

132 
	`exô
(-1);

134 
¨gc
--; 
¨gv
++;

137 i‡(
fûe
 =
NULL
) {

138 
	`Ârötf
(
°dîr
, "NotÉnough information:árgument \"file\" isÑequired\n");

139 
	`exô
(-1);

141 i‡(
Œök
)

142 
groups
 |
	`∆_mgΩ
(
RTNLGRP_LINK
);

143 i‡(
œddr
) {

144 i‡(!
Ámûy
 || famûy =
AF_INET
)

145 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_IFADDR
);

146 i‡(!
Ámûy
 || famûy =
AF_INET6
)

147 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_IFADDR
);

149 i‡(
Ãouã
) {

150 i‡(!
Ámûy
 || famûy =
AF_INET
)

151 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV4_ROUTE
);

152 i‡(!
Ámûy
 || famûy =
AF_INET6
)

153 
groups
 |
	`∆_mgΩ
(
RTNLGRP_IPV6_ROUTE
);

156 
Â
 = 
	`f›í
(
fûe
, "w");

157 i‡(
Â
 =
NULL
) {

158 
	`≥º‹
("Cannot fopen");

159 
	`exô
(-1);

162 i‡(
	`π∆_›í
(&
πh
, 
groups
) < 0)

163 
	`exô
(1);

165 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
AF_UNSPEC
, 
RTM_GETLINK
) < 0) {

166 
	`≥º‹
("Cannot send dumpÑequest");

167 
	`exô
(1);

170 
	`wrôe_°amp
(
Â
);

172 i‡(
	`π∆_dump_fûãr
(&
πh
, 
dump_msg2
, 
Â
) < 0) {

173 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

177 
öô_pha£
 = 0;

179 i‡(
	`π∆_li°í
(&
πh
, 
dump_msg
, (*)
Â
) < 0)

180 
	`exô
(2);

182 
	`exô
(0);

183 
	}
}

	@ip/static-syms.c

7 
	~<°rög.h
>

8 
	~"dlf˙.h
"

10 *
	$_dlsym
(c⁄° *
sym
)

12 
	~"°©ic-syms.h
"

13  
NULL
;

14 
	}
}

	@ip/tcp_metrics.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<uni°d.h
>

15 
	~<î∫o.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/sockë.h
>

18 
	~<¨∑/öë.h
>

19 
	~<sys/io˘l.h
>

20 
	~<löux/if.h
>

22 
	~<löux/gíëlök.h
>

23 
	~<löux/t˝_mërics.h
>

25 
	~"utûs.h
"

26 
	~"ù_comm⁄.h
"

27 
	~"libgíl.h
"

29 
	$ußge
()

31 
	`Ârötf
(
°dîr
, "Usage: ipÅcp_metrics/tcpmetrics { COMMAND | help }\n");

32 
	`Ârötf
(
°dîr
, " ipÅcp_metrics { show | flush } SELECTOR\n");

33 
	`Ârötf
(
°dîr
, " ipÅcp_metrics delete [áddress ] ADDRESS\n");

34 
	`Ârötf
(
°dîr
, "SELECTOR := [ [áddress ] PREFIX ]\n");

35 
	`exô
(-1);

36 
	}
}

39 
π∆_h™dÀ
 
	ggπh
 = { .
fd
 = -1 };

40 
	ggíl_Ámûy
 = -1;

42 
	#TCPM_REQUEST
(
_ªq
, 
_bufsiz
, 
_cmd
, 
_Êags
) \

43 
	`GENL_REQUEST
(
_ªq
, 
_bufsiz
, 
gíl_Ámûy
, 0, \

44 
TCP_METRICS_GENL_VERSION
, 
_cmd
, 
_Êags
)

	)

46 
	#CMD_LIST
 0x0001

	)

47 
	#CMD_DEL
 0x0002

	)

48 
	#CMD_FLUSH
 0x0004

	)

51 *
	m«me
;

52 
	mcode
;

53 } 
	gcmds
[] = {

54 { "li°", 
CMD_LIST
 },

55 { "l°", 
CMD_LIST
 },

56 { "show", 
CMD_LIST
 },

57 { "dñëe", 
CMD_DEL
 },

58 { "ªmove", 
CMD_DEL
 },

59 { "Êush", 
CMD_FLUSH
 },

62 *
	gmëric_«me
[
TCP_METRIC_MAX
 + 1] = {

63 [
TCP_METRIC_RTT
] = "rtt",

64 [
TCP_METRIC_RTTVAR
] = "rttvar",

65 [
TCP_METRIC_SSTHRESH
] = "ssthresh",

66 [
TCP_METRIC_CWND
] = "cwnd",

67 [
TCP_METRIC_REORDERING
] = "reordering",

72 
	mÊushed
;

73 *
	mÊushb
;

74 
	mÊushp
;

75 
	mÊushe
;

76 
	mcmd
;

77 
öë_¥efix
 
	mdaddr
;

78 
öë_¥efix
 
	mßddr
;

79 } 
	gf
;

81 
	$Êush_upd©e
()

83 i‡(
	`π∆_£nd_check
(&
gπh
, 
f
.
Êushb
, f.
Êushp
) < 0) {

84 
	`≥º‹
("FailedÅo send flushÑequest\n");

87 
f
.
Êushp
 = 0;

89 
	}
}

91 
	$¥o˚ss_msg
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
,

92 *
¨g
)

94 
FILE
 *
Â
 = (FILE *Ë
¨g
;

95 
gílmsghdr
 *
ghdr
;

96 
π©å
 *
©ås
[
TCP_METRICS_ATTR_MAX
 + 1], *
a
;

97 
Àn
 = 
n
->
∆msg_Àn
;

98 
abuf
[256];

99 
öë_¥efix
 
daddr
, 
ßddr
;

100 
Ámûy
, 
i
, 
©y≥
, 
°y≥
, 
dÀn
 = 0, 
¶í
 = 0;

102 i‡(
n
->
∆msg_ty≥
 !
gíl_Ámûy
)

105 
Àn
 -
	`NLMSG_LENGTH
(
GENL_HDRLEN
);

106 i‡(
Àn
 < 0)

109 
ghdr
 = 
	`NLMSG_DATA
(
n
);

110 i‡(
ghdr
->
cmd
 !
TCP_METRICS_CMD_GET
)

113 
	`∑r£_π©å
(
©ås
, 
TCP_METRICS_ATTR_MAX
, (*Ë
ghdr
 + 
GENL_HDRLEN
,

114 
Àn
);

116 
a
 = 
©ås
[
TCP_METRICS_ATTR_ADDR_IPV4
];

117 i‡(
a
) {

118 i‡(
f
.
daddr
.
Ámûy
 && f.daddr.Ámûy !
AF_INET
)

120 
	`mem˝y
(&
daddr
.
d©a
, 
	`RTA_DATA
(
a
), 4);

121 
daddr
.
byãÀn
 = 4;

122 
Ámûy
 = 
AF_INET
;

123 
©y≥
 = 
TCP_METRICS_ATTR_ADDR_IPV4
;

124 
dÀn
 = 
	`RTA_PAYLOAD
(
a
);

126 
a
 = 
©ås
[
TCP_METRICS_ATTR_ADDR_IPV6
];

127 i‡(
a
) {

128 i‡(
f
.
daddr
.
Ámûy
 && f.daddr.Ámûy !
AF_INET6
)

130 
	`mem˝y
(&
daddr
.
d©a
, 
	`RTA_DATA
(
a
), 16);

131 
daddr
.
byãÀn
 = 16;

132 
Ámûy
 = 
AF_INET6
;

133 
©y≥
 = 
TCP_METRICS_ATTR_ADDR_IPV6
;

134 
dÀn
 = 
	`RTA_PAYLOAD
(
a
);

139 
a
 = 
©ås
[
TCP_METRICS_ATTR_SADDR_IPV4
];

140 i‡(
a
) {

141 i‡(
f
.
ßddr
.
Ámûy
 && f.ßddr.Ámûy !
AF_INET
)

143 
	`mem˝y
(&
ßddr
.
d©a
, 
	`RTA_DATA
(
a
), 4);

144 
ßddr
.
byãÀn
 = 4;

145 
°y≥
 = 
TCP_METRICS_ATTR_SADDR_IPV4
;

146 
¶í
 = 
	`RTA_PAYLOAD
(
a
);

148 
a
 = 
©ås
[
TCP_METRICS_ATTR_SADDR_IPV6
];

149 i‡(
a
) {

150 i‡(
f
.
ßddr
.
Ámûy
 && f.ßddr.Ámûy !
AF_INET6
)

152 
	`mem˝y
(&
ßddr
.
d©a
, 
	`RTA_DATA
(
a
), 16);

153 
ßddr
.
byãÀn
 = 16;

154 
°y≥
 = 
TCP_METRICS_ATTR_SADDR_IPV6
;

155 
¶í
 = 
	`RTA_PAYLOAD
(
a
);

159 i‡(
f
.
daddr
.
Ámûy
 && f.daddr.
bôÀn
 >= 0 &&

160 
	`öë_addr_m©ch
(&
daddr
, &
f
.daddr, f.daddr.
bôÀn
))

165 i‡(
¶í
 && 
f
.
ßddr
.
Ámûy
 && f.ßddr.
bôÀn
 >= 0 &&

166 
	`öë_addr_m©ch
(&
ßddr
, &
f
.ßddr, f.ßddr.
bôÀn
))

169 i‡(
f
.
Êushb
) {

170 
∆msghdr
 *
‚
;

171 
	`TCPM_REQUEST
(
ªq2
, 128, 
TCP_METRICS_CMD_DEL
, 
NLM_F_REQUEST
);

173 
	`add©å_l
(&
ªq2
.
n
, ‘eq2), 
©y≥
, &
daddr
.
d©a
,

174 
daddr
.
byãÀn
);

175 i‡(
¶í
)

176 
	`add©å_l
(&
ªq2
.
n
, ‘eq2), 
°y≥
, &
ßddr
.
d©a
,

177 
ßddr
.
byãÀn
);

179 i‡(
	`NLMSG_ALIGN
(
f
.
Êushp
Ë+ 
ªq2
.
n
.
∆msg_Àn
 > f.
Êushe
) {

180 i‡(
	`Êush_upd©e
())

183 
‚
 = (
∆msghdr
 *Ë(
f
.
Êushb
 + 
	`NLMSG_ALIGN
(f.
Êushp
));

184 
	`mem˝y
(
‚
, &
ªq2
.
n
,Ñeq2.n.
∆msg_Àn
);

185 
‚
->
∆msg_£q
 = ++
gπh
.
£q
;

186 
f
.
Êushp
 = (((*Ë
‚
Ë+ 
ªq2
.
n
.
∆msg_Àn
Ë- f.
Êushb
;

187 
f
.
Êushed
++;

188 i‡(
show_°©s
 < 2)

192 i‡(
f
.
cmd
 & (
CMD_DEL
 | 
CMD_FLUSH
))

193 
	`Ârötf
(
Â
, "Deleted ");

195 
	`Ârötf
(
Â
, "%s",

196 
	`f‹m©_ho°
(
Ámûy
, 
dÀn
, &
daddr
.
d©a
, 
abuf
, (abuf)));

198 
a
 = 
©ås
[
TCP_METRICS_ATTR_AGE
];

199 i‡(
a
) {

200 
vÆ
 = 
	`πa_gë©å_u64
(
a
);

202 
	`Ârötf
(
Â
, "áge %llu.%03llusec",

203 
vÆ
 / 1000, val % 1000);

206 
a
 = 
©ås
[
TCP_METRICS_ATTR_TW_TS_STAMP
];

207 i‡(
a
) {

208 
__s32
 
vÆ
 = (__s32Ë
	`πa_gë©å_u32
(
a
);

209 
__u32
 
tsvÆ
;

211 
a
 = 
©ås
[
TCP_METRICS_ATTR_TW_TSVAL
];

212 
tsvÆ
 = 
a
 ? 
	`πa_gë©å_u32
(a) : 0;

213 
	`Ârötf
(
Â
, "Åw_t†%u/%d£¯ago", 
tsvÆ
, 
vÆ
);

216 
a
 = 
©ås
[
TCP_METRICS_ATTR_VALS
];

217 i‡(
a
) {

218 
π©å
 *
m
[
TCP_METRIC_MAX
 + 1 + 1];

219 
πt
 = 0, 
πtv¨
 = 0;

221 
	`∑r£_π©å_√°ed
(
m
, 
TCP_METRIC_MAX
 + 1, 
a
);

223 
i
 = 0; i < 
TCP_METRIC_MAX
 + 1; i++) {

224 
vÆ
;

226 
a
 = 
m
[
i
 + 1];

227 i‡(!
a
)

229 i‡(
i
 !
TCP_METRIC_RTT
 &&

230 
i
 !
TCP_METRIC_RTT_US
 &&

231 
i
 !
TCP_METRIC_RTTVAR
 &&

232 
i
 !
TCP_METRIC_RTTVAR_US
) {

233 i‡(
mëric_«me
[
i
])

234 
	`Ârötf
(
Â
, " %†", 
mëric_«me
[
i
]);

236 
	`Ârötf
(
Â
, " mëric_%d ", 
i
);

238 
vÆ
 = 
	`πa_gë©å_u32
(
a
);

239 
i
) {

240 
TCP_METRIC_RTT
:

241 i‡(!
πt
)

242 
πt
 = (
vÆ
 * 1000UL) >> 3;

244 
TCP_METRIC_RTTVAR
:

245 i‡(!
πtv¨
)

246 
πtv¨
 = (
vÆ
 * 1000UL) >> 2;

248 
TCP_METRIC_RTT_US
:

249 
πt
 = 
vÆ
 >> 3;

251 
TCP_METRIC_RTTVAR_US
:

252 
πtv¨
 = 
vÆ
 >> 2;

254 
TCP_METRIC_SSTHRESH
:

255 
TCP_METRIC_CWND
:

256 
TCP_METRIC_REORDERING
:

258 
	`Ârötf
(
Â
, "%lu", 
vÆ
);

262 i‡(
πt
)

263 
	`Ârötf
(
Â
, "Ñâ %luus", 
πt
);

264 i‡(
πtv¨
)

265 
	`Ârötf
(
Â
, "Ñâv¨ %luus", 
πtv¨
);

268 
a
 = 
©ås
[
TCP_METRICS_ATTR_FOPEN_MSS
];

269 i‡(
a
)

270 
	`Ârötf
(
Â
, " fo_ms†%u", 
	`πa_gë©å_u16
(
a
));

272 
a
 = 
©ås
[
TCP_METRICS_ATTR_FOPEN_SYN_DROPS
];

273 i‡(
a
) {

274 
__u16
 
syn_loss
 = 
	`πa_gë©å_u16
(
a
);

275 
ts
;

277 
a
 = 
©ås
[
TCP_METRICS_ATTR_FOPEN_SYN_DROP_TS
];

278 
ts
 = 
a
 ? 
	`πa_gë©å_u64
(a) : 0;

280 
	`Ârötf
(
Â
, " fo_syn_drops %u/%llu.%03llusecágo",

281 
syn_loss
, 
ts
 / 1000,Ås % 1000);

284 
a
 = 
©ås
[
TCP_METRICS_ATTR_FOPEN_COOKIE
];

285 i‡(
a
) {

286 
cookõ
[32 + 1];

287 *
±r
 = 
	`RTA_DATA
(
a
);

288 
i
, 
max
 = 
	`RTA_PAYLOAD
(
a
);

290 i‡(
max
 > 16)

291 
max
 = 16;

292 
cookõ
[0] = 0;

293 
i
 = 0; i < 
max
; i++)

294 
	`•rötf
(
cookõ
 + 
i
 + i, "%02x", 
±r
[i]);

295 
	`Ârötf
(
Â
, " fo_cookõ %s", 
cookõ
);

298 i‡(
¶í
) {

299 
	`Ârötf
(
Â
, " source %s",

300 
	`f‹m©_ho°
(
Ámûy
, 
¶í
, &
ßddr
.
d©a
, 
abuf
,

301 (
abuf
)));

304 
	`Ârötf
(
Â
, "\n");

306 
	`fÊush
(
Â
);

308 
	}
}

310 
	$t˝m_do_cmd
(
cmd
, 
¨gc
, **
¨gv
)

312 
	`TCPM_REQUEST
(
ªq
, 1024, 
TCP_METRICS_CMD_GET
, 
NLM_F_REQUEST
);

313 
©y≥
 = -1, 
°y≥
 = -1;

314 
ack
;

316 
	`mem£t
(&
f
, 0, (f));

317 
f
.
daddr
.
bôÀn
 = -1;

318 
f
.
daddr
.
Ámûy
 = 
¥e„ºed_Ámûy
;

319 
f
.
ßddr
.
bôÀn
 = -1;

320 
f
.
ßddr
.
Ámûy
 = 
¥e„ºed_Ámûy
;

322 
¥e„ºed_Ámûy
) {

323 
AF_UNSPEC
:

324 
AF_INET
:

325 
AF_INET6
:

328 
	`Ârötf
(
°dîr
, "Unsuµ‹ãdÖrŸocﬁ famûy: %d\n", 
¥e„ºed_Ámûy
);

332 ; 
¨gc
 > 0;árgc--, 
¨gv
++) {

333 i‡(
	`°rcmp
(*
¨gv
, "src") == 0 ||

334 
	`°rcmp
(*
¨gv
, "source") == 0) {

335 *
who
 = *
¨gv
;

336 
	`NEXT_ARG
();

337 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

338 
	`ußge
();

339 i‡(
f
.
ßddr
.
bôÀn
 >= 0)

340 
	`du∑rg2
(
who
, *
¨gv
);

342 
	`gë_¥efix
(&
f
.
ßddr
, *
¨gv
, 
¥e„ºed_Ámûy
);

343 i‡(
f
.
ßddr
.
byãÀn
 && f.ßddr.byãÀ¿* 8 =f.ßddr.
bôÀn
) {

344 i‡(
f
.
ßddr
.
Ámûy
 =
AF_INET
)

345 
°y≥
 = 
TCP_METRICS_ATTR_SADDR_IPV4
;

346 i‡(
f
.
ßddr
.
Ámûy
 =
AF_INET6
)

347 
°y≥
 = 
TCP_METRICS_ATTR_SADDR_IPV6
;

350 i‡(
°y≥
 < 0) {

351 
	`Ârötf
(
°dîr
, "Error:á specific IPáddress isÉxpectedÑatherÅhan \"%s\"\n",

352 *
¨gv
);

356 *
who
 = "address";

357 i‡(
	`°rcmp
(*
¨gv
, "addr") == 0 ||

358 
	`°rcmp
(*
¨gv
, "address") == 0) {

359 
who
 = *
¨gv
;

360 
	`NEXT_ARG
();

362 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

363 
	`ußge
();

364 i‡(
f
.
daddr
.
bôÀn
 >= 0)

365 
	`du∑rg2
(
who
, *
¨gv
);

367 
	`gë_¥efix
(&
f
.
daddr
, *
¨gv
, 
¥e„ºed_Ámûy
);

368 i‡(
f
.
daddr
.
byãÀn
 && f.daddr.byãÀ¿* 8 =f.daddr.
bôÀn
) {

369 i‡(
f
.
daddr
.
Ámûy
 =
AF_INET
)

370 
©y≥
 = 
TCP_METRICS_ATTR_ADDR_IPV4
;

371 i‡(
f
.
daddr
.
Ámûy
 =
AF_INET6
)

372 
©y≥
 = 
TCP_METRICS_ATTR_ADDR_IPV6
;

374 i‡((
CMD_DEL
 & 
cmd
Ë&& 
©y≥
 < 0) {

375 
	`Ârötf
(
°dîr
, "Error:á specific IPáddress isÉxpectedÑatherÅhan \"%s\"\n",

376 *
¨gv
);

380 
¨gc
--; 
¨gv
++;

383 i‡(
cmd
 =
CMD_DEL
 && 
©y≥
 < 0)

384 
	`misßrg
("address");

387 i‡(
cmd
 =
CMD_FLUSH
 && 
©y≥
 >= 0)

388 
cmd
 = 
CMD_DEL
;

391 i‡(
cmd
 =
CMD_FLUSH
 && 
f
.
daddr
.
bôÀn
 <= 0 &&

392 
f
.
ßddr
.
bôÀn
 <0 && 
¥e„ºed_Ámûy
 =
AF_UNSPEC
) {

393 
cmd
 = 
CMD_DEL
;

394 
ªq
.
g
.
cmd
 = 
TCP_METRICS_CMD_DEL
;

395 
ack
 = 1;

396 } i‡(
cmd
 =
CMD_DEL
) {

397 
ªq
.
g
.
cmd
 = 
TCP_METRICS_CMD_DEL
;

398 
ack
 = 1;

400 
ack
 = 0;

403 i‡(
gíl_Ámûy
 < 0) {

404 i‡(
	`π∆_›í_by¥Ÿo
(&
gπh
, 0, 
NETLINK_GENERIC
) < 0) {

405 
	`Ârötf
(
°dîr
, "Cannot open genericÇetlink socket\n");

406 
	`exô
(1);

408 
gíl_Ámûy
 = 
	`gíl_ªsﬁve_Ámûy
(&
gπh
,

409 
TCP_METRICS_GENL_NAME
);

410 i‡(
gíl_Ámûy
 < 0)

411 
	`exô
(1);

412 
ªq
.
n
.
∆msg_ty≥
 = 
gíl_Ámûy
;

415 i‡(!(
cmd
 & 
CMD_FLUSH
Ë&& (
©y≥
 >0 || (cmd & 
CMD_DEL
))) {

416 i‡(
ack
)

417 
ªq
.
n
.
∆msg_Êags
 |
NLM_F_ACK
;

418 i‡(
©y≥
 >= 0)

419 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
©y≥
, &
f
.
daddr
.
d©a
,

420 
f
.
daddr
.
byãÀn
);

421 i‡(
°y≥
 >= 0)

422 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
°y≥
, &
f
.
ßddr
.
d©a
,

423 
f
.
ßddr
.
byãÀn
);

425 
ªq
.
n
.
∆msg_Êags
 |
NLM_F_DUMP
;

428 
f
.
cmd
 = cmd;

429 i‡(
cmd
 & 
CMD_FLUSH
) {

430 
round
 = 0;

431 
Êushb
[4096-512];

433 
f
.
Êushb
 = flushb;

434 
f
.
Êushp
 = 0;

435 
f
.
Êushe
 = (
Êushb
);

438 
ªq
.
n
.
∆msg_£q
 = 
gπh
.
dump
 = ++gπh.
£q
;

439 i‡(
	`π∆_£nd
(&
gπh
, &
ªq
,Ñeq.
n
.
∆msg_Àn
) < 0) {

440 
	`≥º‹
("FailedÅo send flushÑequest");

441 
	`exô
(1);

443 
f
.
Êushed
 = 0;

444 i‡(
	`π∆_dump_fûãr
(&
gπh
, 
¥o˚ss_msg
, 
°dout
) < 0) {

445 
	`Ârötf
(
°dîr
, "FlushÅerminated\n");

446 
	`exô
(1);

448 i‡(
f
.
Êushed
 == 0) {

449 i‡(
round
 == 0) {

450 
	`Ârötf
(
°dîr
, "NothingÅo flush.\n");

451 } i‡(
show_°©s
)

452 
	`¥ötf
("*** Flush is completeáfter %dÑound%s ***\n",

453 
round
,Ñound > 1 ? "s" : "");

454 
	`fÊush
(
°dout
);

457 
round
++;

458 i‡(
	`Êush_upd©e
() < 0)

459 
	`exô
(1);

460 i‡(
show_°©s
) {

461 
	`¥ötf
("\n*** Round %d, deleting %dÉntries ***\n",

462 
round
, 
f
.
Êushed
);

463 
	`fÊush
(
°dout
);

469 i‡(
ack
) {

470 i‡(
	`π∆_èlk
(&
gπh
, &
ªq
.
n
, 
NULL
, 0) < 0)

472 } i‡(
©y≥
 >= 0) {

473 i‡(
	`π∆_èlk
(&
gπh
, &
ªq
.
n
, &req.n, (req)) < 0)

475 i‡(
	`¥o˚ss_msg
(
NULL
, &
ªq
.
n
, 
°dout
) < 0) {

476 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

477 
	`exô
(1);

480 
ªq
.
n
.
∆msg_£q
 = 
gπh
.
dump
 = ++gπh.
£q
;

481 i‡(
	`π∆_£nd
(&
gπh
, &
ªq
,Ñeq.
n
.
∆msg_Àn
) < 0) {

482 
	`≥º‹
("FailedÅo send dumpÑequest");

483 
	`exô
(1);

486 i‡(
	`π∆_dump_fûãr
(&
gπh
, 
¥o˚ss_msg
, 
°dout
) < 0) {

487 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

488 
	`exô
(1);

492 
	}
}

494 
	$do_t˝_mërics
(
¨gc
, **
¨gv
)

496 
i
;

498 i‡(
¨gc
 < 1)

499  
	`t˝m_do_cmd
(
CMD_LIST
, 0, 
NULL
);

500 
i
 = 0; i < 
	`ARRAY_SIZE
(
cmds
); i++) {

501 i‡(
	`m©ches
(
¨gv
[0], 
cmds
[
i
].
«me
) == 0)

502  
	`t˝m_do_cmd
(
cmds
[
i
].
code
, 
¨gc
-1, 
¨gv
+1);

504 i‡(
	`m©ches
(
¨gv
[0], "help") == 0)

505 
	`ußge
();

507 
	`Ârötf
(
°dîr
, "Command \"%s\" is unknown, "

508 "åy \"ùÅ˝_mëric†hñp\".\n", *
¨gv
);

509 
	`exô
(-1);

510 
	}
}

	@ip/tunnel.c

25 
	~<°dio.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

28 
	~<î∫o.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/sockë.h
>

31 
	~<sys/io˘l.h
>

32 
	~<√töë/ö.h
>

33 
	~<löux/if.h
>

34 
	~<löux/ù.h
>

35 
	~<löux/if_tu¬ñ.h
>

37 
	~"utûs.h
"

38 
	~"tu¬ñ.h
"

40 c⁄° *
	$äl_°ΩrŸo
(
__u8
 
¥Ÿo
)

42 
buf
[16];

44 
¥Ÿo
) {

45 
IPPROTO_IPIP
:

46 
	`°r˝y
(
buf
, "ip");

48 
IPPROTO_GRE
:

49 
	`°r˝y
(
buf
, "gre");

51 
IPPROTO_IPV6
:

52 
	`°r˝y
(
buf
, "ipv6");

54 
IPPROTO_ESP
:

55 
	`°r˝y
(
buf
, "esp");

58 
	`°r˝y
(
buf
, "any");

61 
	`°r˝y
(
buf
, "unknown");

65  
buf
;

66 
	}
}

68 
	$äl_gë_io˘l
(c⁄° *
ba£dev
, *
p
)

70 
i‰eq
 
i‰
;

71 
fd
;

72 
îr
;

74 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ba£dev
, 
IFNAMSIZ
);

75 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = (*)
p
;

77 
fd
 = 
	`sockë
(
¥e„ºed_Ámûy
, 
SOCK_DGRAM
, 0);

78 i‡(
fd
 < 0) {

79 
	`Ârötf
(
°dîr
, "¸óã sockë faûed: %s\n", 
	`°ªº‹
(
î∫o
));

83 
îr
 = 
	`io˘l
(
fd
, 
SIOCGETTUNNEL
, &
i‰
);

84 i‡(
îr
)

85 
	`Ârötf
(
°dîr
, "gëÅu¬ñ \"%s\" faûed: %s\n", 
ba£dev
,

86 
	`°ªº‹
(
î∫o
));

88 
	`˛o£
(
fd
);

89  
îr
;

90 
	}
}

92 
	$äl_add_io˘l
(
cmd
, c⁄° *
ba£dev
, c⁄° *
«me
, *
p
)

94 
i‰eq
 
i‰
;

95 
fd
;

96 
îr
;

98 i‡(
cmd
 =
SIOCCHGTUNNEL
 && 
«me
[0])

99 
	`°∫˝y
(
i‰
.
i‰_«me
, 
«me
, 
IFNAMSIZ
);

101 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ba£dev
, 
IFNAMSIZ
);

102 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = 
p
;

104 
fd
 = 
	`sockë
(
¥e„ºed_Ámûy
, 
SOCK_DGRAM
, 0);

105 i‡(
fd
 < 0) {

106 
	`Ârötf
(
°dîr
, "¸óã sockë faûed: %s\n", 
	`°ªº‹
(
î∫o
));

110 
îr
 = 
	`io˘l
(
fd
, 
cmd
, &
i‰
);

111 i‡(
îr
)

112 
	`Ârötf
(
°dîr
, "addÅu¬ñ \"%s\" faûed: %s\n", 
i‰
.
i‰_«me
,

113 
	`°ªº‹
(
î∫o
));

114 
	`˛o£
(
fd
);

115  
îr
;

116 
	}
}

118 
	$äl_dñ_io˘l
(c⁄° *
ba£dev
, c⁄° *
«me
, *
p
)

120 
i‰eq
 
i‰
;

121 
fd
;

122 
îr
;

124 i‡(
«me
[0])

125 
	`°∫˝y
(
i‰
.
i‰_«me
, 
«me
, 
IFNAMSIZ
);

127 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ba£dev
, 
IFNAMSIZ
);

129 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = 
p
;

131 
fd
 = 
	`sockë
(
¥e„ºed_Ámûy
, 
SOCK_DGRAM
, 0);

132 i‡(
fd
 < 0) {

133 
	`Ârötf
(
°dîr
, "¸óã sockë faûed: %s\n", 
	`°ªº‹
(
î∫o
));

137 
îr
 = 
	`io˘l
(
fd
, 
SIOCDELTUNNEL
, &
i‰
);

138 i‡(
îr
)

139 
	`Ârötf
(
°dîr
, "deleteÅunnel \"%s\" failed: %s\n",

140 
i‰
.
i‰_«me
, 
	`°ªº‹
(
î∫o
));

141 
	`˛o£
(
fd
);

142  
îr
;

143 
	}
}

145 
	$äl_gí_io˘l
(
cmd
, c⁄° *
«me
,

146 *
p
, 
skùîr
)

148 
i‰eq
 
i‰
;

149 
fd
;

150 
îr
;

152 
	`°∫˝y
(
i‰
.
i‰_«me
, 
«me
, 
IFNAMSIZ
);

153 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = 
p
;

155 
fd
 = 
	`sockë
(
¥e„ºed_Ámûy
, 
SOCK_DGRAM
, 0);

156 i‡(
fd
 < 0) {

157 
	`Ârötf
(
°dîr
, "¸óã sockë faûed: %s\n", 
	`°ªº‹
(
î∫o
));

161 
îr
 = 
	`io˘l
(
fd
, 
cmd
, &
i‰
);

162 i‡(
îr
 && 
î∫o
 !
skùîr
)

163 
	`Ârötf
(
°dîr
, "%s: io˘»%x faûed: %s\n", 
«me
,

164 
cmd
, 
	`°ªº‹
(
î∫o
));

165 
	`˛o£
(
fd
);

166  
îr
;

167 
	}
}

169 
	$äl_¥l_io˘l
(
cmd
, c⁄° *
«me
, *
p
)

171  
	`äl_gí_io˘l
(
cmd
, 
«me
, 
p
, -1);

172 
	}
}

174 
	$äl_6rd_io˘l
(
cmd
, c⁄° *
«me
, *
p
)

176  
	`äl_gí_io˘l
(
cmd
, 
«me
, 
p
, -1);

177 
	}
}

179 
	$äl_io˘l_gë_6rd
(c⁄° *
«me
, *
p
)

181  
	`äl_gí_io˘l
(
SIOCGET6RD
, 
«me
, 
p
, 
EINVAL
);

182 
	}
}

	@ip/tunnel.h

21 #i‚de‡
__TUNNEL_H__


22 
	#__TUNNEL_H__
 1

	)

24 
	~<löux/ty≥s.h
>

26 c⁄° *
äl_°ΩrŸo
(
__u8
 
¥Ÿo
);

28 
äl_gë_io˘l
(c⁄° *
ba£dev
, *
p
);

29 
äl_add_io˘l
(
cmd
, c⁄° *
ba£dev
, c⁄° *
«me
, *
p
);

30 
äl_dñ_io˘l
(c⁄° *
ba£dev
, c⁄° *
«me
, *
p
);

31 
äl_¥l_io˘l
(
cmd
, c⁄° *
«me
, *
p
);

32 
äl_6rd_io˘l
(
cmd
, c⁄° *
«me
, *
p
);

33 
äl_io˘l_gë_6rd
(c⁄° *
«me
, *
p
);

	@ip/xfrm.h

24 #i‚de‡
__XFRM_H__


25 
	#__XFRM_H__
 1

	)

27 
	~<°dio.h
>

28 
	~<sys/sockë.h
>

29 
	~<löux/x‰m.h
>

31 #i‚de‡
IPPROTO_SCTP


32 
	#IPPROTO_SCTP
 132

	)

34 #i‚de‡
IPPROTO_DCCP


35 
	#IPPROTO_DCCP
 33

	)

37 #i‚de‡
IPPROTO_MH


38 
	#IPPROTO_MH
 135

	)

41 
	#XFRMS_RTA
(
x
Ë((
π©å
*)(((*)(x)Ë+ 
	`NLMSG_ALIGN
((
x‰m_u£rß_öfo
))))

	)

42 
	#XFRMS_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
x‰m_u£rß_öfo
))

	)

44 
	#XFRMP_RTA
(
x
Ë((
π©å
*)(((*)(x)Ë+ 
	`NLMSG_ALIGN
((
x‰m_u£Ωﬁicy_öfo
))))

	)

45 
	#XFRMP_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
x‰m_u£Ωoûcy_öfo
))

	)

47 
	#XFRMSID_RTA
(
x
Ë((
π©å
*)(((*)(x)Ë+ 
	`NLMSG_ALIGN
((
x‰m_u£rß_id
))))

	)

48 
	#XFRMSID_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
x‰m_u£rß_id
))

	)

50 
	#XFRMPID_RTA
(
x
Ë((
π©å
*)(((*)(x)Ë+ 
	`NLMSG_ALIGN
((
x‰m_u£Ωﬁicy_id
))))

	)

51 
	#XFRMPID_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
x‰m_u£Ωoûcy_id
))

	)

53 
	#XFRMACQ_RTA
(
x
Ë((
π©å
*)(((*)(x)Ë+ 
	`NLMSG_ALIGN
((
x‰m_u£r_acquúe
))))

	)

54 
	#XFRMEXP_RTA
(
x
Ë((
π©å
*)(((*)(x)Ë+ 
	`NLMSG_ALIGN
((
x‰m_u£r_expúe
))))

	)

55 
	#XFRMPEXP_RTA
(
x
Ë((
π©å
*)(((*)(x)Ë+ 
	`NLMSG_ALIGN
((
x‰m_u£r_pﬁexpúe
))))

	)

57 
	#XFRMREP_RTA
(
x
Ë((
π©å
*)(((*)(x)Ë+ 
	`NLMSG_ALIGN
((
x‰m_u£r_ªp‹t
))))

	)

59 
	#XFRMSAPD_RTA
(
x
Ë((
π©å
*)(((*)(x)Ë+ 
	`NLMSG_ALIGN
((
__u32
))))

	)

60 
	#XFRM_FLAG_PRINT
(
Â
, 
Êags
, 
f
, 
s
) \

62 i‡(
Êags
 & 
f
) { \

63 
Êags
 &~
f
; \

64 
	`Ârötf
(
Â
, 
s
 "%s", (
Êags
 ? " " : "")); \

66 } 0)

	)

68 
	sx‰m_buf„r
 {

69 *
	mbuf
;

70 
	msize
;

71 
	moff£t
;

73 
	m∆msg_cou¡
;

74 
π∆_h™dÀ
 *
	mπh
;

77 
	sx‰m_fûãr
 {

78 
	mu£
;

80 
x‰m_u£rß_öfo
 
	mxsöfo
;

81 
__u8
 
	mid_§c_mask
;

82 
__u8
 
	mid_d°_mask
;

83 
__u8
 
	mid_¥Ÿo_mask
;

84 
__u32
 
	mid_•i_mask
;

85 
__u8
 
	mmode_mask
;

86 
__u32
 
	mªqid_mask
;

87 
__u8
 
	m°©e_Êags_mask
;

89 
x‰m_u£Ωﬁicy_öfo
 
	mxpöfo
;

90 
__u8
 
	mdú_mask
;

91 
__u8
 
	m£l_§c_mask
;

92 
__u8
 
	m£l_d°_mask
;

93 
__u32
 
	m£l_dev_mask
;

94 
__u8
 
	mup•ec_¥Ÿo_mask
;

95 
__u16
 
	mup•ec_•‹t_mask
;

96 
__u16
 
	mup•ec_dp‹t_mask
;

97 
__u32
 
	mödex_mask
;

98 
__u8
 
	ma˘i⁄_mask
;

99 
__u32
 
	m¥i‹ôy_mask
;

100 
__u8
 
	mpﬁicy_Êags_mask
;

102 
__u8
 
	m±y≥
;

103 
__u8
 
	m±y≥_mask
;

106 
	#XFRM_FILTER_MASK_FULL
 (~0)

	)

108 
x‰m_fûãr
 
fûãr
;

110 
x‰m_°©e_¥öt
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
,

111 *
¨g
);

112 
x‰m_pﬁicy_¥öt
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
,

113 *
¨g
);

114 
do_x‰m_°©e
(
¨gc
, **
¨gv
);

115 
do_x‰m_pﬁicy
(
¨gc
, **
¨gv
);

116 
do_x‰m_m⁄ô‹
(
¨gc
, **
¨gv
);

118 
x‰m_addr_m©ch
(
x‰m_addªss_t
 *
x1
, x‰m_addªss_à*
x2
, 
bôs
);

119 
x‰m_x‰m¥Ÿo_is_ù£c
(
__u8
 
¥Ÿo
);

120 
x‰m_x‰m¥Ÿo_is_ro
(
__u8
 
¥Ÿo
);

121 
x‰m_x‰m¥Ÿo_gëby«me
(*
«me
);

122 
x‰m_ÆgŸy≥_gëby«me
(*
«me
);

123 
x‰m_∑r£_m¨k
(
x‰m_m¨k
 *
m¨k
, *
¨g˝
, ***
¨gvp
);

124 c⁄° *
°rxf_x‰m¥Ÿo
(
__u8
 
¥Ÿo
);

125 c⁄° *
°rxf_ÆgŸy≥
(
ty≥
);

126 c⁄° *
°rxf_mask8
(
__u8
 
mask
);

127 c⁄° *
°rxf_mask32
(
__u32
 
mask
);

128 c⁄° *
°rxf_sh¨e
(
__u8
 
sh¨e
);

129 c⁄° *
°rxf_¥Ÿo
(
__u8
 
¥Ÿo
);

130 c⁄° *
°rxf_±y≥
(
__u8
 
±y≥
);

131 
x‰m_id_öfo_¥öt
(
x‰m_addªss_t
 *
ßddr
, 
x‰m_id
 *
id
,

132 
__u8
 
mode
, 
__u32
 
ªqid
, 
__u16
 
Ámûy
, 
f‹˚_•i
,

133 
FILE
 *
Â
, c⁄° *
¥efix
, c⁄° *
tôÀ
);

134 
x‰m_°©s_¥öt
(
x‰m_°©s
 *
s
, 
FILE
 *
Â
, c⁄° *
¥efix
);

135 
x‰m_li„time_¥öt
(
x‰m_li„time_cfg
 *
cfg
,

136 
x‰m_li„time_cur
 *
cur
,

137 
FILE
 *
Â
, c⁄° *
¥efix
);

138 
x‰m_£À˘‹_¥öt
(
x‰m_£À˘‹
 *
£l
, 
__u16
 
Ámûy
,

139 
FILE
 *
Â
, c⁄° *
¥efix
);

140 
x‰m_x‰ma_¥öt
(
π©å
 *
tb
[], 
__u16
 
Ámûy
,

141 
FILE
 *
Â
, c⁄° *
¥efix
);

142 
x‰m_°©e_öfo_¥öt
(
x‰m_u£rß_öfo
 *
xsöfo
,

143 
π©å
 *
tb
[], 
FILE
 *
Â
, c⁄° *
¥efix
,

144 c⁄° *
tôÀ
);

145 
x‰m_pﬁicy_öfo_¥öt
(
x‰m_u£Ωﬁicy_öfo
 *
xpöfo
,

146 
π©å
 *
tb
[], 
FILE
 *
Â
, c⁄° *
¥efix
,

147 c⁄° *
tôÀ
);

148 
x‰m_id_∑r£
(
x‰m_addªss_t
 *
ßddr
, 
x‰m_id
 *
id
, 
__u16
 *
Ámûy
,

149 
loo£
, *
¨g˝
, ***
¨gvp
);

150 
x‰m_mode_∑r£
(
__u8
 *
mode
, *
¨g˝
, ***
¨gvp
);

151 
x‰m_íˇp_ty≥_∑r£
(
__u16
 *
ty≥
, *
¨g˝
, ***
¨gvp
);

152 
x‰m_ªqid_∑r£
(
__u32
 *
ªqid
, *
¨g˝
, ***
¨gvp
);

153 
x‰m_£À˘‹_∑r£
(
x‰m_£À˘‹
 *
£l
, *
¨g˝
, ***
¨gvp
);

154 
x‰m_li„time_cfg_∑r£
(
x‰m_li„time_cfg
 *
l·
,

155 *
¨g˝
, ***
¨gvp
);

156 
x‰m_s˘x_∑r£
(*
˘x°r
, *
c⁄ãxt
,

157 
x‰m_u£r_£c_˘x
 *
s˘x
);

	@ip/xfrm_monitor.c

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<√töë/ö.h
>

32 
	~"utûs.h
"

33 
	~"x‰m.h
"

34 
	~"ù_comm⁄.h
"

36 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

37 
li°í_Æl_nsid
;

39 
	$ußge
()

41 
	`Ârötf
(
°dîr
, "Usage: ip xfrm monitor [all-nsid] [áll | OBJECTS | help ]\n");

42 
	`Ârötf
(
°dîr
, "OBJECTS := {ácquire |Éxpire | SA |áevent |Öolicy |Ñeport }\n");

43 
	`exô
(-1);

44 
	}
}

46 
	$x‰m_acquúe_¥öt
(c⁄° 
sockaddr_∆
 *
who
,

47 
∆msghdr
 *
n
, *
¨g
)

49 
FILE
 *
Â
 = (FILE*)
¨g
;

50 
x‰m_u£r_acquúe
 *
xacq
 = 
	`NLMSG_DATA
(
n
);

51 
Àn
 = 
n
->
∆msg_Àn
;

52 
π©å
 * 
tb
[
XFRMA_MAX
+1];

53 
__u16
 
Ámûy
;

55 
Àn
 -
	`NLMSG_LENGTH
((*
xacq
));

56 i‡(
Àn
 < 0) {

57 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

61 
	`∑r£_π©å
(
tb
, 
XFRMA_MAX
, 
	`XFRMACQ_RTA
(
xacq
), 
Àn
);

63 
Ámûy
 = 
xacq
->
£l
.family;

64 i‡(
Ámûy
 =
AF_UNSPEC
)

65 
Ámûy
 = 
xacq
->
pﬁicy
.
£l
.family;

66 i‡(
Ámûy
 =
AF_UNSPEC
)

67 
Ámûy
 = 
¥e„ºed_Ámûy
;

69 
	`Ârötf
(
Â
, "acquire ");

71 
	`Ârötf
(
Â
, "¥Ÿÿ%†", 
	`°rxf_x‰m¥Ÿo
(
xacq
->
id
.
¥Ÿo
));

72 i‡(
show_°©s
 > 0 || 
xacq
->
id
.
•i
) {

73 
__u32
 
•i
 = 
	`¡ohl
(
xacq
->
id
.spi);

74 
	`Ârötf
(
Â
, "•ò0x%08x", 
•i
);

75 i‡(
show_°©s
 > 0)

76 
	`Ârötf
(
Â
, "(%u)", 
•i
);

77 
	`Ârötf
(
Â
, " ");

79 
	`Ârötf
(
Â
, "%s", 
_SL_
);

81 
	`x‰m_£À˘‹_¥öt
(&
xacq
->
£l
, 
Ámûy
, 
Â
, " sel ");

83 
	`x‰m_pﬁicy_öfo_¥öt
(&
xacq
->
pﬁicy
, 
tb
, 
Â
, " ", "Öolicy ");

85 i‡(
show_°©s
 > 0)

86 
	`Ârötf
(
Â
, " seq 0x%08u ", 
xacq
->
£q
);

87 i‡(
show_°©s
 > 0) {

88 
	`Ârötf
(
Â
, "%s-mask %s ",

89 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_CRYPT
),

90 
	`°rxf_mask32
(
xacq
->
ólgos
));

91 
	`Ârötf
(
Â
, "%s-mask %s ",

92 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AUTH
),

93 
	`°rxf_mask32
(
xacq
->
Ølgos
));

94 
	`Ârötf
(
Â
, "%s-mask %s",

95 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_COMP
),

96 
	`°rxf_mask32
(
xacq
->
ˇlgos
));

98 
	`Ârötf
(
Â
, "%s", 
_SL_
);

100 i‡(
⁄ñöe
)

101 
	`Ârötf
(
Â
, "\n");

102 
	`fÊush
(
Â
);

105 
	}
}

107 
	$x‰m_°©e_Êush_¥öt
(c⁄° 
sockaddr_∆
 *
who
,

108 
∆msghdr
 *
n
, *
¨g
)

110 
FILE
 *
Â
 = (FILE*)
¨g
;

111 
x‰m_u£rß_Êush
 *
xsf
 = 
	`NLMSG_DATA
(
n
);

112 
Àn
 = 
n
->
∆msg_Àn
;

113 c⁄° *
°r
;

115 
Àn
 -
	`NLMSG_SPACE
((*
xsf
));

116 i‡(
Àn
 < 0) {

117 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

121 
	`Ârötf
(
Â
, "Flushed state ");

123 
°r
 = 
	`°rxf_x‰m¥Ÿo
(
xsf
->
¥Ÿo
);

124 i‡(
°r
)

125 
	`Ârötf
(
Â
, "¥Ÿÿ%s", 
°r
);

127 
	`Ârötf
(
Â
, "¥Ÿÿ%u", 
xsf
->
¥Ÿo
);

128 
	`Ârötf
(
Â
, "%s", 
_SL_
);

130 i‡(
⁄ñöe
)

131 
	`Ârötf
(
Â
, "\n");

132 
	`fÊush
(
Â
);

135 
	}
}

137 
	$x‰m_pﬁicy_Êush_¥öt
(c⁄° 
sockaddr_∆
 *
who
,

138 
∆msghdr
 *
n
, *
¨g
)

140 
π©å
 * 
tb
[
XFRMA_MAX
+1];

141 
FILE
 *
Â
 = (FILE*)
¨g
;

142 
Àn
 = 
n
->
∆msg_Àn
;

144 
Àn
 -
	`NLMSG_SPACE
(0);

145 i‡(
Àn
 < 0) {

146 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

150 
	`Ârötf
(
Â
, "FlushedÖolicy ");

152 
	`∑r£_π©å
(
tb
, 
XFRMA_MAX
, 
	`NLMSG_DATA
(
n
), 
Àn
);

154 i‡(
tb
[
XFRMA_POLICY_TYPE
]) {

155 
x‰m_u£Ωﬁicy_ty≥
 *
u±
;

157 
	`Ârötf
(
Â
, "ptype ");

159 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_POLICY_TYPE
]Ë< (*
u±
))

160 
	`Ârötf
(
Â
, "(ERRORÅruncated)");

162 
u±
 = (
x‰m_u£Ωﬁicy_ty≥
 *)
	`RTA_DATA
(
tb
[
XFRMA_POLICY_TYPE
]);

163 
	`Ârötf
(
Â
, "%†", 
	`°rxf_±y≥
(
u±
->
ty≥
));

166 
	`Ârötf
(
Â
, "%s", 
_SL_
);

168 i‡(
⁄ñöe
)

169 
	`Ârötf
(
Â
, "\n");

170 
	`fÊush
(
Â
);

173 
	}
}

175 
	$x‰m_ªp‹t_¥öt
(c⁄° 
sockaddr_∆
 *
who
,

176 
∆msghdr
 *
n
, *
¨g
)

178 
FILE
 *
Â
 = (FILE*)
¨g
;

179 
x‰m_u£r_ªp‹t
 *
xªp
 = 
	`NLMSG_DATA
(
n
);

180 
Àn
 = 
n
->
∆msg_Àn
;

181 
π©å
 * 
tb
[
XFRMA_MAX
+1];

182 
__u16
 
Ámûy
;

184 
Àn
 -
	`NLMSG_LENGTH
((*
xªp
));

185 i‡(
Àn
 < 0) {

186 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

190 
Ámûy
 = 
xªp
->
£l
.family;

191 i‡(
Ámûy
 =
AF_UNSPEC
)

192 
Ámûy
 = 
¥e„ºed_Ámûy
;

194 
	`Ârötf
(
Â
, "report ");

196 
	`Ârötf
(
Â
, "¥Ÿÿ%†", 
	`°rxf_x‰m¥Ÿo
(
xªp
->
¥Ÿo
));

197 
	`Ârötf
(
Â
, "%s", 
_SL_
);

199 
	`x‰m_£À˘‹_¥öt
(&
xªp
->
£l
, 
Ámûy
, 
Â
, " sel ");

201 
	`∑r£_π©å
(
tb
, 
XFRMA_MAX
, 
	`XFRMREP_RTA
(
xªp
), 
Àn
);

203 
	`x‰m_x‰ma_¥öt
(
tb
, 
Ámûy
, 
Â
, " ");

205 i‡(
⁄ñöe
)

206 
	`Ârötf
(
Â
, "\n");

209 
	}
}

211 
	$x‰m_´_Êags_¥öt
(
__u32
 
Êags
, *
¨g
)

213 
FILE
 *
Â
 = (FILE*)
¨g
;

214 
	`Ârötf
(
Â
, " (0x%xË", 
Êags
);

215 i‡(!
Êags
)

217 i‡(
Êags
 & 
XFRM_AE_CR
)

218 
	`Ârötf
(
Â
, "Ñeplay update ");

219 i‡(
Êags
 & 
XFRM_AE_CE
)

220 
	`Ârötf
(
Â
, "ÅimerÉxpired ");

221 i‡(
Êags
 & 
XFRM_AE_CU
)

222 
	`Ârötf
(
Â
, "Öolicy updated ");

224 
	}
}

226 
	$x‰m_u£rß_¥öt
(c⁄° 
x‰m_u£rß_id
 *
ß_id
, 
__u32
 
ªqid
, 
FILE
 *
Â
)

228 
buf
[256];

230 
buf
[0] = 0;

231 
	`Ârötf
(
Â
, "dst %s ",

232 
	`π_addr_n2a
(
ß_id
->
Ámûy
, (ß_id->
daddr
), &sa_id->daddr,

233 
buf
, (buf)));

235 
	`Ârötf
(
Â
, "Ñeqid 0x%x", 
ªqid
);

237 
	`Ârötf
(
Â
, "ÖrŸocﬁ %†", 
	`°rxf_¥Ÿo
(
ß_id
->
¥Ÿo
));

238 
	`Ârötf
(
Â
, " SPI 0x%x", 
	`¡ohl
(
ß_id
->
•i
));

239 
	}
}

241 
	$x‰m_´_¥öt
(c⁄° 
sockaddr_∆
 *
who
,

242 
∆msghdr
 *
n
, *
¨g
)

244 
FILE
 *
Â
 = (FILE*)
¨g
;

245 
x‰m_´vít_id
 *
id
 = 
	`NLMSG_DATA
(
n
);

246 
abuf
[256];

248 
	`Ârötf
(
Â
, "AsyncÉvent ");

249 
	`x‰m_´_Êags_¥öt
(
id
->
Êags
, 
¨g
);

250 
	`Ârötf
(
Â
,"\n\t");

251 
	`mem£t
(
abuf
, '\0', (abuf));

252 
	`Ârötf
(
Â
, "§¯%†", 
	`π_addr_n2a
(
id
->
ß_id
.
Ámûy
,

253 (
id
->
ßddr
), &id->saddr,

254 
abuf
, (abuf)));

256 
	`x‰m_u£rß_¥öt
(&
id
->
ß_id
, id->
ªqid
, 
Â
);

258 
	`Ârötf
(
Â
, "\n");

259 
	`fÊush
(
Â
);

262 
	}
}

264 
	$x‰m_¥öt_addr
(
FILE
 *
Â
, 
Ámûy
, 
x‰m_addªss_t
 *
a
)

266 
buf
[256];

268 
buf
[0] = 0;

269 
	`Ârötf
(
Â
, "%s", 
	`π_addr_n2a
(
Ámûy
, (*
a
),á, 
buf
, (buf)));

270 
	}
}

272 
	$x‰m_m≠pög_¥öt
(c⁄° 
sockaddr_∆
 *
who
,

273 
∆msghdr
 *
n
, *
¨g
)

275 
FILE
 *
Â
 = (FILE*)
¨g
;

276 
x‰m_u£r_m≠pög
 *
m≠
 = 
	`NLMSG_DATA
(
n
);

278 
	`Ârötf
(
Â
, "Mapping change ");

279 
	`x‰m_¥öt_addr
(
Â
, 
m≠
->
id
.
Ámûy
, &m≠->
ﬁd_ßddr
);

281 
	`Ârötf
(
Â
, ":%d -> ", 
	`¡ohs
(
m≠
->
ﬁd_•‹t
));

282 
	`x‰m_¥öt_addr
(
Â
, 
m≠
->
id
.
Ámûy
, &m≠->
√w_ßddr
);

283 
	`Ârötf
(
Â
, ":%d\n\t", 
	`¡ohs
(
m≠
->
√w_•‹t
));

285 
	`x‰m_u£rß_¥öt
(&
m≠
->
id
, m≠->
ªqid
, 
Â
);

287 
	`Ârötf
(
Â
, "\n");

288 
	`fÊush
(
Â
);

290 
	}
}

292 
	$x‰m_ac˚±_msg
(c⁄° 
sockaddr_∆
 *
who
,

293 
π∆_˘æ_d©a
 *
˘æ
,

294 
∆msghdr
 *
n
, *
¨g
)

296 
FILE
 *
Â
 = (FILE*)
¨g
;

298 i‡(
time°amp
)

299 
	`¥öt_time°amp
(
Â
);

301 i‡(
li°í_Æl_nsid
) {

302 i‡(
˘æ
 =
NULL
 || cål->
nsid
 < 0)

303 
	`Ârötf
(
Â
, "[nsid current]");

305 
	`Ârötf
(
Â
, "[nsid %d]", 
˘æ
->
nsid
);

308 
n
->
∆msg_ty≥
) {

309 
XFRM_MSG_NEWSA
:

310 
XFRM_MSG_DELSA
:

311 
XFRM_MSG_UPDSA
:

312 
XFRM_MSG_EXPIRE
:

313 
	`x‰m_°©e_¥öt
(
who
, 
n
, 
¨g
);

315 
XFRM_MSG_NEWPOLICY
:

316 
XFRM_MSG_DELPOLICY
:

317 
XFRM_MSG_UPDPOLICY
:

318 
XFRM_MSG_POLEXPIRE
:

319 
	`x‰m_pﬁicy_¥öt
(
who
, 
n
, 
¨g
);

321 
XFRM_MSG_ACQUIRE
:

322 
	`x‰m_acquúe_¥öt
(
who
, 
n
, 
¨g
);

324 
XFRM_MSG_FLUSHSA
:

325 
	`x‰m_°©e_Êush_¥öt
(
who
, 
n
, 
¨g
);

327 
XFRM_MSG_FLUSHPOLICY
:

328 
	`x‰m_pﬁicy_Êush_¥öt
(
who
, 
n
, 
¨g
);

330 
XFRM_MSG_REPORT
:

331 
	`x‰m_ªp‹t_¥öt
(
who
, 
n
, 
¨g
);

333 
XFRM_MSG_NEWAE
:

334 
	`x‰m_´_¥öt
(
who
, 
n
, 
¨g
);

336 
XFRM_MSG_MAPPING
:

337 
	`x‰m_m≠pög_¥öt
(
who
, 
n
, 
¨g
);

343 i‡(
n
->
∆msg_ty≥
 !
NLMSG_ERROR
 &&Ç->∆msg_ty≥ !
NLMSG_NOOP
 &&

344 
n
->
∆msg_ty≥
 !
NLMSG_DONE
) {

345 
	`Ârötf
(
Â
, "Unknown message: %08d 0x%08x 0x%08x\n",

346 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

349 
	}
}

351 
π∆_h™dÀ
 
πh
;

353 
	$do_x‰m_m⁄ô‹
(
¨gc
, **
¨gv
)

355 *
fûe
 = 
NULL
;

356 
groups
 = ~(()0);

357 
œcquúe
=0;

358 
Àxpúe
=0;

359 
œevít
=0;

360 
Õﬁicy
=0;

361 
lß
=0;

362 
Ãï‹t
=0;

364 
	`π∆_˛o£
(&
πh
);

366 
¨gc
 > 0) {

367 i‡(
	`m©ches
(*
¨gv
, "file") == 0) {

368 
	`NEXT_ARG
();

369 
fûe
 = *
¨gv
;

370 } i‡(
	`m©ches
(*
¨gv
, "all-nsid") == 0) {

371 
li°í_Æl_nsid
 = 1;

372 } i‡(
	`m©ches
(*
¨gv
, "acquire") == 0) {

373 
œcquúe
=1;

374 
groups
 = 0;

375 } i‡(
	`m©ches
(*
¨gv
, "expire") == 0) {

376 
Àxpúe
=1;

377 
groups
 = 0;

378 } i‡(
	`m©ches
(*
¨gv
, "SA") == 0) {

379 
lß
=1;

380 
groups
 = 0;

381 } i‡(
	`m©ches
(*
¨gv
, "aevent") == 0) {

382 
œevít
=1;

383 
groups
 = 0;

384 } i‡(
	`m©ches
(*
¨gv
, "policy") == 0) {

385 
Õﬁicy
=1;

386 
groups
 = 0;

387 } i‡(
	`m©ches
(*
¨gv
, "report") == 0) {

388 
Ãï‹t
=1;

389 
groups
 = 0;

390 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

391 
	`ußge
();

392 } i‡(
	`°rcmp
(*
¨gv
, "all")) {

393 
	`Ârötf
(
°dîr
, "Argumíà\"%s\" i†unknown,Åry \"ù x‰m m⁄ô‹ hñp\".\n", *
¨gv
);

394 
	`exô
(-1);

396 
¨gc
--; 
¨gv
++;

399 i‡(
œcquúe
)

400 
groups
 |
	`∆_mgΩ
(
XFRMNLGRP_ACQUIRE
);

401 i‡(
Àxpúe
)

402 
groups
 |
	`∆_mgΩ
(
XFRMNLGRP_EXPIRE
);

403 i‡(
lß
)

404 
groups
 |
	`∆_mgΩ
(
XFRMNLGRP_SA
);

405 i‡(
Õﬁicy
)

406 
groups
 |
	`∆_mgΩ
(
XFRMNLGRP_POLICY
);

407 i‡(
œevít
)

408 
groups
 |
	`∆_mgΩ
(
XFRMNLGRP_AEVENTS
);

409 i‡(
Ãï‹t
)

410 
groups
 |
	`∆_mgΩ
(
XFRMNLGRP_REPORT
);

412 i‡(
fûe
) {

413 
FILE
 *
Â
;

414 
Â
 = 
	`f›í
(
fûe
, "r");

415 i‡(
Â
 =
NULL
) {

416 
	`≥º‹
("Cannot fopen");

417 
	`exô
(-1);

419  
	`π∆_‰om_fûe
(
Â
, 
x‰m_ac˚±_msg
, (*)
°dout
);

422 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 
groups
, 
NETLINK_XFRM
) < 0)

423 
	`exô
(1);

424 i‡(
li°í_Æl_nsid
 && 
	`π∆_li°í_Æl_nsid
(&
πh
) < 0)

425 
	`exô
(1);

427 i‡(
	`π∆_li°í
(&
πh
, 
x‰m_ac˚±_msg
, (*)
°dout
) < 0)

428 
	`exô
(2);

431 
	}
}

	@ip/xfrm_policy.c

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<√tdb.h
>

31 
	~<löux/√éök.h
>

32 
	~"utûs.h
"

33 
	~"x‰m.h
"

34 
	~"ù_comm⁄.h
"

37 
	#NLMSG_DELETEALL_BUF_SIZE
 8192

	)

46 
	#NLMSG_BUF_SIZE
 4096

	)

47 
	#RTA_BUF_SIZE
 2048

	)

48 
	#XFRM_TMPLS_BUF_SIZE
 1024

	)

49 
	#CTX_BUF_SIZE
 256

	)

51 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

53 
	$ußge
()

55 
	`Ârötf
(
°dîr
, "Usage: ip xfrmÖolicy {ádd | update } SELECTOR dir DIR [ ctx CTX ]\n");

56 
	`Ârötf
(
°dîr
, " [ mark MARK [ mask MASK ] ] [ index INDEX ] [Ötype PTYPE ]\n");

57 
	`Ârötf
(
°dîr
, " [áction ACTION ] [Öriority PRIORITY ] [ flag FLAG-LIST ]\n");

58 
	`Ârötf
(
°dîr
, " [ LIMIT-LIST ] [ TMPL-LIST ]\n");

59 
	`Ârötf
(
°dîr
, "Usage: ip xfrmÖolicy { delete | get } { SELECTOR | index INDEX } dir DIR\n");

60 
	`Ârötf
(
°dîr
, " [ ctx CTX ] [ mark MARK [ mask MASK ] ] [Ötype PTYPE ]\n");

61 
	`Ârötf
(
°dîr
, "Usage: ip xfrmÖolicy { deleteall |Üist } [ SELECTOR ] [ dir DIR ]\n");

62 
	`Ârötf
(
°dîr
, " [ index INDEX ] [Ötype PTYPE ] [áction ACTION ] [Öriority PRIORITY ]\n");

63 
	`Ârötf
(
°dîr
, " [ flag FLAG-LIST ]\n");

64 
	`Ârötf
(
°dîr
, "Usage: ip xfrmÖolicy flush [Ötype PTYPE ]\n");

65 
	`Ârötf
(
°dîr
, "Usage: ip xfrmÖolicy count\n");

66 
	`Ârötf
(
°dîr
, "Usage: ip xfrmÖolicy set [ hthresh4 LBITS RBITS ] [ hthresh6 LBITS RBITS ]\n");

67 
	`Ârötf
(
°dîr
, "SELECTOR := [ src ADDR[/PLEN] ] [ dst ADDR[/PLEN] ] [ dev DEV ] [ UPSPEC ]\n");

68 
	`Ârötf
(
°dîr
, "UPSPEC :=Öroto { { ");

69 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_¥Ÿo
(
IPPROTO_TCP
));

70 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_¥Ÿo
(
IPPROTO_UDP
));

71 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_¥Ÿo
(
IPPROTO_SCTP
));

72 
	`Ârötf
(
°dîr
, "%s", 
	`°rxf_¥Ÿo
(
IPPROTO_DCCP
));

73 
	`Ârötf
(
°dîr
, " } [ sport PORT ] [ dport PORT ] |\n");

74 
	`Ârötf
(
°dîr
, " { ");

75 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_¥Ÿo
(
IPPROTO_ICMP
));

76 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_¥Ÿo
(
IPPROTO_ICMPV6
));

77 
	`Ârötf
(
°dîr
, "%s", 
	`°rxf_¥Ÿo
(
IPPROTO_MH
));

78 
	`Ârötf
(
°dîr
, " } [Åype NUMBER ] [ code NUMBER ] |\n");

79 
	`Ârötf
(
°dîr
, " %s", 
	`°rxf_¥Ÿo
(
IPPROTO_GRE
));

80 
	`Ârötf
(
°dîr
, " [ key { DOTTED-QUAD | NUMBER } ] | PROTO }\n");

81 
	`Ârötf
(
°dîr
, "DIR := in | out | fwd\n");

82 
	`Ârötf
(
°dîr
, "PTYPE := main | sub\n");

83 
	`Ârötf
(
°dîr
, "ACTION :=állow | block\n");

84 
	`Ârötf
(
°dîr
, "FLAG-LIST := [ FLAG-LIST ] FLAG\n");

85 
	`Ârötf
(
°dîr
, "FLAG :=Üocalok | icmp\n");

86 
	`Ârötf
(
°dîr
, "LIMIT-LIST := [ LIMIT-LIST ]Üimit LIMIT\n");

87 
	`Ârötf
(
°dîr
, "LIMIT := {Åime-soft |Åime-hard |Åime-use-soft |Åime-use-hard } SECONDS |\n");

88 
	`Ârötf
(
°dîr
, " { byte-soft | byte-hard } SIZE | {Öacket-soft |Öacket-hard } COUNT\n");

89 
	`Ârötf
(
°dîr
, "TMPL-LIST := [ TMPL-LIST ]Åmpl TMPL\n");

90 
	`Ârötf
(
°dîr
, "TMPL := ID [ mode MODE ] [Ñeqid REQID ] [Üevel LEVEL ]\n");

91 
	`Ârötf
(
°dîr
, "ID := [ src ADDR ] [ dst ADDR ] [Öroto XFRM-PROTO ] [ spi SPI ]\n");

92 
	`Ârötf
(
°dîr
, "XFRM-PROTO := ");

93 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_x‰m¥Ÿo
(
IPPROTO_ESP
));

94 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_x‰m¥Ÿo
(
IPPROTO_AH
));

95 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_x‰m¥Ÿo
(
IPPROTO_COMP
));

96 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_x‰m¥Ÿo
(
IPPROTO_ROUTING
));

97 
	`Ârötf
(
°dîr
, "%s\n", 
	`°rxf_x‰m¥Ÿo
(
IPPROTO_DSTOPTS
));

98 
	`Ârötf
(
°dîr
, "MODE :=Åransport |Åunnel | beet |Ño | in_trigger\n");

99 
	`Ârötf
(
°dîr
, "LEVEL :=Ñequired | use\n");

101 
	`exô
(-1);

102 
	}
}

104 
	$x‰m_pﬁicy_dú_∑r£
(
__u8
 *
dú
, *
¨g˝
, ***
¨gvp
)

106 
¨gc
 = *
¨g˝
;

107 **
¨gv
 = *
¨gvp
;

109 i‡(
	`°rcmp
(*
¨gv
, "in") == 0)

110 *
dú
 = 
XFRM_POLICY_IN
;

111 i‡(
	`°rcmp
(*
¨gv
, "out") == 0)

112 *
dú
 = 
XFRM_POLICY_OUT
;

113 i‡(
	`°rcmp
(*
¨gv
, "fwd") == 0)

114 *
dú
 = 
XFRM_POLICY_FWD
;

116 
	`öv¨g
("DIR vÆuêi†övÆid", *
¨gv
);

118 *
¨g˝
 = 
¨gc
;

119 *
¨gvp
 = 
¨gv
;

122 
	}
}

124 
	$x‰m_pﬁicy_±y≥_∑r£
(
__u8
 *
±y≥
, *
¨g˝
, ***
¨gvp
)

126 
¨gc
 = *
¨g˝
;

127 **
¨gv
 = *
¨gvp
;

129 i‡(
	`°rcmp
(*
¨gv
, "main") == 0)

130 *
±y≥
 = 
XFRM_POLICY_TYPE_MAIN
;

131 i‡(
	`°rcmp
(*
¨gv
, "sub") == 0)

132 *
±y≥
 = 
XFRM_POLICY_TYPE_SUB
;

134 
	`öv¨g
("PTYPE vÆuêi†övÆid", *
¨gv
);

136 *
¨g˝
 = 
¨gc
;

137 *
¨gvp
 = 
¨gv
;

140 
	}
}

142 
	$x‰m_pﬁicy_Êag_∑r£
(
__u8
 *
Êags
, *
¨g˝
, ***
¨gvp
)

144 
¨gc
 = *
¨g˝
;

145 **
¨gv
 = *
¨gvp
;

146 
Àn
 = 
	`°æí
(*
¨gv
);

148 i‡(
Àn
 > 2 && 
	`°∫cmp
(*
¨gv
, "0x", 2) == 0) {

149 
__u8
 
vÆ
 = 0;

151 i‡(
	`gë_u8
(&
vÆ
, *
¨gv
, 16))

152 
	`öv¨g
("FLAG vÆuêi†övÆid", *
¨gv
);

153 *
Êags
 = 
vÆ
;

156 i‡(
	`°rcmp
(*
¨gv
, "localok") == 0)

157 *
Êags
 |
XFRM_POLICY_LOCALOK
;

158 i‡(
	`°rcmp
(*
¨gv
, "icmp") == 0)

159 *
Êags
 |
XFRM_POLICY_ICMP
;

161 
	`PREV_ARG
();

165 i‡(!
	`NEXT_ARG_OK
())

167 
	`NEXT_ARG
();

171 *
¨g˝
 = 
¨gc
;

172 *
¨gvp
 = 
¨gv
;

175 
	}
}

177 
	$x‰m_tm∂_∑r£
(
x‰m_u£r_tm∂
 *
tm∂
,

178 *
¨g˝
, ***
¨gvp
)

180 
¨gc
 = *
¨g˝
;

181 **
¨gv
 = *
¨gvp
;

182 *
idp
 = 
NULL
;

185 i‡(
	`°rcmp
(*
¨gv
, "mode") == 0) {

186 
	`NEXT_ARG
();

187 
	`x‰m_mode_∑r£
(&
tm∂
->
mode
, &
¨gc
, &
¨gv
);

188 } i‡(
	`°rcmp
(*
¨gv
, "reqid") == 0) {

189 
	`NEXT_ARG
();

190 
	`x‰m_ªqid_∑r£
(&
tm∂
->
ªqid
, &
¨gc
, &
¨gv
);

191 } i‡(
	`°rcmp
(*
¨gv
, "level") == 0) {

192 
	`NEXT_ARG
();

194 i‡(
	`°rcmp
(*
¨gv
, "required") == 0)

195 
tm∂
->
›ti⁄Æ
 = 0;

196 i‡(
	`°rcmp
(*
¨gv
, "use") == 0)

197 
tm∂
->
›ti⁄Æ
 = 1;

199 
	`öv¨g
("LEVEL vÆuêi†övÆid\n", *
¨gv
);

202 i‡(
idp
) {

203 
	`PREV_ARG
();

206 
idp
 = *
¨gv
;

207 
¥e„ºed_Ámûy
 = 
AF_UNSPEC
;

208 
	`x‰m_id_∑r£
(&
tm∂
->
ßddr
, &tm∂->
id
, &tm∂->
Ámûy
,

209 0, &
¨gc
, &
¨gv
);

210 
¥e„ºed_Ámûy
 = 
tm∂
->
Ámûy
;

213 i‡(!
	`NEXT_ARG_OK
())

216 
	`NEXT_ARG
();

218 i‡(
¨gc
 =*
¨g˝
)

219 
	`misßrg
("TMPL");

221 *
¨g˝
 = 
¨gc
;

222 *
¨gvp
 = 
¨gv
;

225 
	}
}

227 
	$x‰m_s˘x_∑r£
(*
˘x°r
, *
s
,

228 
x‰m_u£r_£c_˘x
 *
s˘x
)

230 
¶í
;

232 
¶í
 = 
	`°æí
(
s
) + 1;

234 
s˘x
->
exây≥
 = 
XFRMA_SEC_CTX
;

235 
s˘x
->
˘x_doi
 = 1;

236 
s˘x
->
˘x_Æg
 = 1;

237 
s˘x
->
˘x_Àn
 = 
¶í
;

238 
s˘x
->
Àn
 = (
x‰m_u£r_£c_˘x
Ë+ 
¶í
;

239 
	`mem˝y
(
˘x°r
, 
s
, 
¶í
);

242 
	}
}

244 
	$x‰m_pﬁicy_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

246 
π∆_h™dÀ
 
πh
;

248 
∆msghdr
 
n
;

249 
x‰m_u£Ωﬁicy_öfo
 
xpöfo
;

250 
buf
[
RTA_BUF_SIZE
];

251 } 
ªq
;

252 *
dúp
 = 
NULL
;

253 *
£Õ
 = 
NULL
;

254 *
±y≥p
 = 
NULL
;

255 *
s˘xp
 = 
NULL
;

256 
x‰m_u£Ωﬁicy_ty≥
 
u±
;

257 
tm∂s_buf
[
XFRM_TMPLS_BUF_SIZE
];

258 
tm∂s_Àn
 = 0;

259 
x‰m_m¨k
 
m¨k
 = {0, 0};

261 
x‰m_u£r_£c_˘x
 
s˘x
;

262 
°r
[
CTX_BUF_SIZE
];

263 } 
˘x
;

265 
	`mem£t
(&
ªq
, 0, (req));

266 
	`mem£t
(&
u±
, 0, (upt));

267 
	`mem£t
(&
tm∂s_buf
, 0, (tmpls_buf));

268 
	`mem£t
(&
˘x
, 0, (ctx));

270 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
(‘eq.
xpöfo
));

271 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

272 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

273 
ªq
.
xpöfo
.
£l
.
Ámûy
 = 
¥e„ºed_Ámûy
;

275 
ªq
.
xpöfo
.
l·
.
so·_byã_limô
 = 
XFRM_INF
;

276 
ªq
.
xpöfo
.
l·
.
h¨d_byã_limô
 = 
XFRM_INF
;

277 
ªq
.
xpöfo
.
l·
.
so·_∑ckë_limô
 = 
XFRM_INF
;

278 
ªq
.
xpöfo
.
l·
.
h¨d_∑ckë_limô
 = 
XFRM_INF
;

280 
¨gc
 > 0) {

281 i‡(
	`°rcmp
(*
¨gv
, "dir") == 0) {

282 i‡(
dúp
)

283 
	`du∑rg
("dú", *
¨gv
);

284 
dúp
 = *
¨gv
;

286 
	`NEXT_ARG
();

287 
	`x‰m_pﬁicy_dú_∑r£
(&
ªq
.
xpöfo
.
dú
, &
¨gc
, &
¨gv
);

288 } i‡(
	`°rcmp
(*
¨gv
, "ctx") == 0) {

289 *
c⁄ãxt
;

291 i‡(
s˘xp
)

292 
	`du∑rg
("˘x", *
¨gv
);

293 
s˘xp
 = *
¨gv
;

294 
	`NEXT_ARG
();

295 
c⁄ãxt
 = *
¨gv
;

296 
	`x‰m_s˘x_∑r£
((*)&
˘x
.
°r
, 
c⁄ãxt
, &˘x.
s˘x
);

297 } i‡(
	`°rcmp
(*
¨gv
, "mark") == 0) {

298 
	`x‰m_∑r£_m¨k
(&
m¨k
, &
¨gc
, &
¨gv
);

299 } i‡(
	`°rcmp
(*
¨gv
, "index") == 0) {

300 
	`NEXT_ARG
();

301 i‡(
	`gë_u32
(&
ªq
.
xpöfo
.
ödex
, *
¨gv
, 0))

302 
	`öv¨g
("INDEX vÆuêi†övÆid", *
¨gv
);

303 } i‡(
	`°rcmp
(*
¨gv
, "ptype") == 0) {

304 i‡(
±y≥p
)

305 
	`du∑rg
("±y≥", *
¨gv
);

306 
±y≥p
 = *
¨gv
;

308 
	`NEXT_ARG
();

309 
	`x‰m_pﬁicy_±y≥_∑r£
(&
u±
.
ty≥
, &
¨gc
, &
¨gv
);

310 } i‡(
	`°rcmp
(*
¨gv
, "action") == 0) {

311 
	`NEXT_ARG
();

312 i‡(
	`°rcmp
(*
¨gv
, "allow") == 0)

313 
ªq
.
xpöfo
.
a˘i⁄
 = 
XFRM_POLICY_ALLOW
;

314 i‡(
	`°rcmp
(*
¨gv
, "block") == 0)

315 
ªq
.
xpöfo
.
a˘i⁄
 = 
XFRM_POLICY_BLOCK
;

317 
	`öv¨g
("ACTION vÆuêi†övÆid\n", *
¨gv
);

318 } i‡(
	`°rcmp
(*
¨gv
, "priority") == 0) {

319 
	`NEXT_ARG
();

320 i‡(
	`gë_u32
(&
ªq
.
xpöfo
.
¥i‹ôy
, *
¨gv
, 0))

321 
	`öv¨g
("PRIORITY vÆuêi†övÆid", *
¨gv
);

322 } i‡(
	`°rcmp
(*
¨gv
, "flag") == 0) {

323 
	`NEXT_ARG
();

324 
	`x‰m_pﬁicy_Êag_∑r£
(&
ªq
.
xpöfo
.
Êags
, &
¨gc
,

325 &
¨gv
);

326 } i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

327 
	`NEXT_ARG
();

328 
	`x‰m_li„time_cfg_∑r£
(&
ªq
.
xpöfo
.
l·
, &
¨gc
, &
¨gv
);

329 } i‡(
	`°rcmp
(*
¨gv
, "tmpl") == 0) {

330 
x‰m_u£r_tm∂
 *
tm∂
;

332 i‡(
tm∂s_Àn
 + (*
tm∂
Ë> (
tm∂s_buf
)) {

333 
	`Ârötf
(
°dîr
, "Too manyÅmpls: buffer overflow\n");

334 
	`exô
(1);

336 
tm∂
 = (
x‰m_u£r_tm∂
 *)((*)
tm∂s_buf
 + 
tm∂s_Àn
);

338 
tm∂
->
Ámûy
 = 
¥e„ºed_Ámûy
;

339 
tm∂
->
Ølgos
 = (~(
__u32
)0);

340 
tm∂
->
ólgos
 = (~(
__u32
)0);

341 
tm∂
->
ˇlgos
 = (~(
__u32
)0);

343 
	`NEXT_ARG
();

344 
	`x‰m_tm∂_∑r£
(
tm∂
, &
¨gc
, &
¨gv
);

346 
tm∂s_Àn
 +(*
tm∂
);

348 i‡(
£Õ
)

349 
	`du∑rg
("unknown", *
¨gv
);

350 
£Õ
 = *
¨gv
;

352 
	`x‰m_£À˘‹_∑r£
(&
ªq
.
xpöfo
.
£l
, &
¨gc
, &
¨gv
);

353 i‡(
¥e„ºed_Ámûy
 =
AF_UNSPEC
)

354 
¥e„ºed_Ámûy
 = 
ªq
.
xpöfo
.
£l
.
Ámûy
;

357 
¨gc
--; 
¨gv
++;

360 i‡(!
dúp
) {

361 
	`Ârötf
(
°dîr
, "NotÉnough information: DIR isÑequired.\n");

362 
	`exô
(1);

365 i‡(
±y≥p
) {

366 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
XFRMA_POLICY_TYPE
,

367 (*)&
u±
, (upt));

370 i‡(
tm∂s_Àn
 > 0) {

371 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
XFRMA_TMPL
,

372 (*)
tm∂s_buf
, 
tm∂s_Àn
);

375 i‡(
m¨k
.
m
) {

376 
r
 = 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_MARK
,

377 (*)&
m¨k
, (mark));

378 i‡(
r
 < 0) {

379 
	`Ârötf
(
°dîr
, "%s: XFRMA_MARK faûed\n",
__func__
);

380 
	`exô
(1);

384 i‡(
s˘xp
) {

385 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
XFRMA_SEC_CTX
,

386 (*)&
˘x
, ctx.
s˘x
.
Àn
);

389 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

390 
	`exô
(1);

392 i‡(
ªq
.
xpöfo
.
£l
.
Ámûy
 =
AF_UNSPEC
)

393 
ªq
.
xpöfo
.
£l
.
Ámûy
 = 
AF_INET
;

395 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

396 
	`exô
(2);

398 
	`π∆_˛o£
(&
πh
);

401 
	}
}

403 
	$x‰m_pﬁicy_fûãr_m©ch
(
x‰m_u£Ωﬁicy_öfo
 *
xpöfo
,

404 
__u8
 
±y≥
)

406 i‡(!
fûãr
.
u£
)

409 i‡((
xpöfo
->
dú
^
fûãr
.xpöfo.dú)&fûãr.
dú_mask
)

412 i‡((
±y≥
^
fûãr
.±y≥)&fûãr.
±y≥_mask
)

415 i‡(
fûãr
.
£l_§c_mask
) {

416 i‡(
	`x‰m_addr_m©ch
(&
xpöfo
->
£l
.
ßddr
, &
fûãr
.xpinfo.sel.saddr,

417 
fûãr
.
£l_§c_mask
))

421 i‡(
fûãr
.
£l_d°_mask
) {

422 i‡(
	`x‰m_addr_m©ch
(&
xpöfo
->
£l
.
daddr
, &
fûãr
.xpinfo.sel.daddr,

423 
fûãr
.
£l_d°_mask
))

427 i‡((
xpöfo
->
£l
.
ifödex
^
fûãr
.xpöfo.£l.ifödex)&fûãr.
£l_dev_mask
)

430 i‡((
xpöfo
->
£l
.
¥Ÿo
^
fûãr
.xpöfo.£l.¥Ÿo)&fûãr.
up•ec_¥Ÿo_mask
)

433 i‡(
fûãr
.
up•ec_•‹t_mask
) {

434 i‡((
xpöfo
->
£l
.
•‹t
^
fûãr
.xpöfo.£l.•‹t)&fûãr.
up•ec_•‹t_mask
)

438 i‡(
fûãr
.
up•ec_dp‹t_mask
) {

439 i‡((
xpöfo
->
£l
.
dp‹t
^
fûãr
.xpöfo.£l.dp‹t)&fûãr.
up•ec_dp‹t_mask
)

443 i‡((
xpöfo
->
ödex
^
fûãr
.xpöfo.ödex)&fûãr.
ödex_mask
)

446 i‡((
xpöfo
->
a˘i⁄
^
fûãr
.xpöfo.a˘i⁄)&fûãr.
a˘i⁄_mask
)

449 i‡((
xpöfo
->
¥i‹ôy
^
fûãr
.xpöfo.¥i‹ôy)&fûãr.
¥i‹ôy_mask
)

452 i‡(
fûãr
.
pﬁicy_Êags_mask
)

453 i‡((
xpöfo
->
Êags
 & 
fûãr
.xpinfo.flags) == 0)

457 
	}
}

459 
	$x‰m_pﬁicy_¥öt
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
,

460 *
¨g
)

462 
π©å
 * 
tb
[
XFRMA_MAX
+1];

463 
π©å
 * 
πa
;

464 
x‰m_u£Ωﬁicy_öfo
 *
xpöfo
 = 
NULL
;

465 
x‰m_u£r_pﬁexpúe
 *
x≥xp
 = 
NULL
;

466 
x‰m_u£Ωﬁicy_id
 *
xpid
 = 
NULL
;

467 
__u8
 
±y≥
 = 
XFRM_POLICY_TYPE_MAIN
;

468 
FILE
 *
Â
 = (FILE*)
¨g
;

469 
Àn
 = 
n
->
∆msg_Àn
;

471 i‡(
n
->
∆msg_ty≥
 !
XFRM_MSG_NEWPOLICY
 &&

472 
n
->
∆msg_ty≥
 !
XFRM_MSG_DELPOLICY
 &&

473 
n
->
∆msg_ty≥
 !
XFRM_MSG_UPDPOLICY
 &&

474 
n
->
∆msg_ty≥
 !
XFRM_MSG_POLEXPIRE
) {

475 
	`Ârötf
(
°dîr
, "NotáÖolicy: %08x %08x %08x\n",

476 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

480 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_DELPOLICY
) {

481 
xpid
 = 
	`NLMSG_DATA
(
n
);

482 
Àn
 -
	`NLMSG_SPACE
((*
xpid
));

483 } i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_POLEXPIRE
) {

484 
x≥xp
 = 
	`NLMSG_DATA
(
n
);

485 
xpöfo
 = &
x≥xp
->
pﬁ
;

486 
Àn
 -
	`NLMSG_SPACE
((*
x≥xp
));

488 
x≥xp
 = 
NULL
;

489 
xpöfo
 = 
	`NLMSG_DATA
(
n
);

490 
Àn
 -
	`NLMSG_SPACE
((*
xpöfo
));

493 i‡(
Àn
 < 0) {

494 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

498 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_DELPOLICY
)

499 
πa
 = 
	`XFRMPID_RTA
(
xpid
);

500 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_POLEXPIRE
)

501 
πa
 = 
	`XFRMPEXP_RTA
(
x≥xp
);

503 
πa
 = 
	`XFRMP_RTA
(
xpöfo
);

505 
	`∑r£_π©å
(
tb
, 
XFRMA_MAX
, 
πa
, 
Àn
);

507 i‡(
tb
[
XFRMA_POLICY_TYPE
]) {

508 
x‰m_u£Ωﬁicy_ty≥
 *
u±
;

510 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_POLICY_TYPE
]Ë< (*
u±
)) {

511 
	`Ârötf
(
°dîr
, "too short XFRMA_POLICY_TYPEÜen\n");

514 
u±
 = (
x‰m_u£Ωﬁicy_ty≥
 *)
	`RTA_DATA
(
tb
[
XFRMA_POLICY_TYPE
]);

515 
±y≥
 = 
u±
->
ty≥
;

518 i‡(
xpöfo
 && !
	`x‰m_pﬁicy_fûãr_m©ch
(xpöfo, 
±y≥
))

521 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_DELPOLICY
)

522 
	`Ârötf
(
Â
, "Deleted ");

523 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_UPDPOLICY
)

524 
	`Ârötf
(
Â
, "Updated ");

525 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_POLEXPIRE
)

526 
	`Ârötf
(
Â
, "Expired ");

528 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_DELPOLICY
) {

530 i‡(!
tb
[
XFRMA_POLICY
]) {

531 
	`Ârötf
(
°dîr
, "Buggy XFRM_MSG_DELPOLICY:Ço XFRMA_POLICY\n");

534 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_POLICY
]Ë< (*
xpöfo
)) {

535 
	`Ârötf
(
°dîr
, "Buggy XFRM_MSG_DELPOLICY:Åoo short XFRMA_POLICYÜen\n");

538 
xpöfo
 = (
x‰m_u£Ωﬁicy_öfo
 *)
	`RTA_DATA
(
tb
[
XFRMA_POLICY
]);

541 
	`x‰m_pﬁicy_öfo_¥öt
(
xpöfo
, 
tb
, 
Â
, 
NULL
, NULL);

543 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_POLEXPIRE
) {

544 
	`Ârötf
(
Â
, "\t");

545 
	`Ârötf
(
Â
, "h¨d %u", 
x≥xp
->
h¨d
);

546 
	`Ârötf
(
Â
, "%s", 
_SL_
);

549 i‡(
⁄ñöe
)

550 
	`Ârötf
(
Â
, "\n");

551 
	`fÊush
(
Â
);

554 
	}
}

556 
	$x‰m_pﬁicy_gë_‹_dñëe
(
¨gc
, **
¨gv
, 
dñëe
,

557 *
ªs_∆buf
, 
size_t
 
ªs_size
)

559 
π∆_h™dÀ
 
πh
;

561 
∆msghdr
 
n
;

562 
x‰m_u£Ωﬁicy_id
 
xpid
;

563 
buf
[
RTA_BUF_SIZE
];

564 } 
ªq
;

565 *
dúp
 = 
NULL
;

566 *
£Õ
 = 
NULL
;

567 *
ödexp
 = 
NULL
;

568 *
±y≥p
 = 
NULL
;

569 *
s˘xp
 = 
NULL
;

570 
x‰m_u£Ωﬁicy_ty≥
 
u±
;

571 
x‰m_m¨k
 
m¨k
 = {0, 0};

573 
x‰m_u£r_£c_˘x
 
s˘x
;

574 
°r
[
CTX_BUF_SIZE
];

575 } 
˘x
;

578 
	`mem£t
(&
ªq
, 0, (req));

579 
	`mem£t
(&
u±
, 0, (upt));

580 
	`mem£t
(&
˘x
, 0, (ctx));

582 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
(‘eq.
xpid
));

583 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

584 
ªq
.
n
.
∆msg_ty≥
 = 
dñëe
 ? 
XFRM_MSG_DELPOLICY
 : 
XFRM_MSG_GETPOLICY
;

586 
¨gc
 > 0) {

587 i‡(
	`°rcmp
(*
¨gv
, "dir") == 0) {

588 i‡(
dúp
)

589 
	`du∑rg
("dú", *
¨gv
);

590 
dúp
 = *
¨gv
;

592 
	`NEXT_ARG
();

593 
	`x‰m_pﬁicy_dú_∑r£
(&
ªq
.
xpid
.
dú
, &
¨gc
, &
¨gv
);

595 } i‡(
	`°rcmp
(*
¨gv
, "ctx") == 0) {

596 *
c⁄ãxt
;

598 i‡(
s˘xp
)

599 
	`du∑rg
("˘x", *
¨gv
);

600 
s˘xp
 = *
¨gv
;

601 
	`NEXT_ARG
();

602 
c⁄ãxt
 = *
¨gv
;

603 
	`x‰m_s˘x_∑r£
((*)&
˘x
.
°r
, 
c⁄ãxt
, &˘x.
s˘x
);

604 } i‡(
	`°rcmp
(*
¨gv
, "mark") == 0) {

605 
	`x‰m_∑r£_m¨k
(&
m¨k
, &
¨gc
, &
¨gv
);

606 } i‡(
	`°rcmp
(*
¨gv
, "index") == 0) {

607 i‡(
ödexp
)

608 
	`du∑rg
("ödex", *
¨gv
);

609 
ödexp
 = *
¨gv
;

611 
	`NEXT_ARG
();

612 i‡(
	`gë_u32
(&
ªq
.
xpid
.
ödex
, *
¨gv
, 0))

613 
	`öv¨g
("INDEX vÆuêi†övÆid", *
¨gv
);

615 } i‡(
	`°rcmp
(*
¨gv
, "ptype") == 0) {

616 i‡(
±y≥p
)

617 
	`du∑rg
("±y≥", *
¨gv
);

618 
±y≥p
 = *
¨gv
;

620 
	`NEXT_ARG
();

621 
	`x‰m_pﬁicy_±y≥_∑r£
(&
u±
.
ty≥
, &
¨gc
, &
¨gv
);

624 i‡(
£Õ
)

625 
	`öv¨g
("unknown", *
¨gv
);

626 
£Õ
 = *
¨gv
;

628 
	`x‰m_£À˘‹_∑r£
(&
ªq
.
xpid
.
£l
, &
¨gc
, &
¨gv
);

629 i‡(
¥e„ºed_Ámûy
 =
AF_UNSPEC
)

630 
¥e„ºed_Ámûy
 = 
ªq
.
xpid
.
£l
.
Ámûy
;

634 
¨gc
--; 
¨gv
++;

637 i‡(!
dúp
) {

638 
	`Ârötf
(
°dîr
, "NotÉnough information: DIR isÑequired.\n");

639 
	`exô
(1);

641 i‡(
±y≥p
) {

642 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
XFRMA_POLICY_TYPE
,

643 (*)&
u±
, (upt));

645 i‡(!
£Õ
 && !
ödexp
) {

646 
	`Ârötf
(
°dîr
, "NotÉnough information:Éither SELECTOR or INDEX isÑequired.\n");

647 
	`exô
(1);

649 i‡(
£Õ
 && 
ödexp
)

650 
	`du∑rg2
("SELECTOR", "INDEX");

652 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

653 
	`exô
(1);

655 i‡(
ªq
.
xpid
.
£l
.
Ámûy
 =
AF_UNSPEC
)

656 
ªq
.
xpid
.
£l
.
Ámûy
 = 
AF_INET
;

658 i‡(
m¨k
.
m
 & m¨k.
v
) {

659 
r
 = 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_MARK
,

660 (*)&
m¨k
, (mark));

661 i‡(
r
 < 0) {

662 
	`Ârötf
(
°dîr
, "%s: XFRMA_MARK faûed\n",
__func__
);

663 
	`exô
(1);

667 i‡(
s˘xp
) {

668 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
XFRMA_SEC_CTX
,

669 (*)&
˘x
, ctx.
s˘x
.
Àn
);

672 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
ªs_∆buf
, 
ªs_size
) < 0)

673 
	`exô
(2);

675 
	`π∆_˛o£
(&
πh
);

678 
	}
}

680 
	$x‰m_pﬁicy_dñëe
(
¨gc
, **
¨gv
)

682  
	`x‰m_pﬁicy_gë_‹_dñëe
(
¨gc
, 
¨gv
, 1, 
NULL
, 0);

683 
	}
}

685 
	$x‰m_pﬁicy_gë
(
¨gc
, **
¨gv
)

687 
buf
[
NLMSG_BUF_SIZE
];

688 
∆msghdr
 *
n
 = (∆msghd∏*)
buf
;

690 
	`mem£t
(
buf
, 0, (buf));

692 
	`x‰m_pﬁicy_gë_‹_dñëe
(
¨gc
, 
¨gv
, 0, 
n
, (
buf
));

694 i‡(
	`x‰m_pﬁicy_¥öt
(
NULL
, 
n
, (*)
°dout
) < 0) {

695 
	`Ârötf
(
°dîr
, "AnÉrror :-)\n");

696 
	`exô
(1);

700 
	}
}

706 
	$x‰m_pﬁicy_kìp
(c⁄° 
sockaddr_∆
 *
who
,

707 
∆msghdr
 *
n
,

708 *
¨g
)

710 
x‰m_buf„r
 *
xb
 = (x‰m_buf„∏*)
¨g
;

711 
π∆_h™dÀ
 *
πh
 = 
xb
->rth;

712 
x‰m_u£Ωﬁicy_öfo
 *
xpöfo
 = 
	`NLMSG_DATA
(
n
);

713 
Àn
 = 
n
->
∆msg_Àn
;

714 
π©å
 *
tb
[
XFRMA_MAX
+1];

715 
__u8
 
±y≥
 = 
XFRM_POLICY_TYPE_MAIN
;

716 
∆msghdr
 *
√w_n
;

717 
x‰m_u£Ωﬁicy_id
 *
xpid
;

719 i‡(
n
->
∆msg_ty≥
 !
XFRM_MSG_NEWPOLICY
) {

720 
	`Ârötf
(
°dîr
, "NotáÖolicy: %08x %08x %08x\n",

721 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

725 
Àn
 -
	`NLMSG_LENGTH
((*
xpöfo
));

726 i‡(
Àn
 < 0) {

727 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

731 
	`∑r£_π©å
(
tb
, 
XFRMA_MAX
, 
	`XFRMP_RTA
(
xpöfo
), 
Àn
);

733 i‡(
tb
[
XFRMA_POLICY_TYPE
]) {

734 
x‰m_u£Ωﬁicy_ty≥
 *
u±
;

736 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_POLICY_TYPE
]Ë< (*
u±
)) {

737 
	`Ârötf
(
°dîr
, "too short XFRMA_POLICY_TYPEÜen\n");

740 
u±
 = (
x‰m_u£Ωﬁicy_ty≥
 *)
	`RTA_DATA
(
tb
[
XFRMA_POLICY_TYPE
]);

741 
±y≥
 = 
u±
->
ty≥
;

744 i‡(!
	`x‰m_pﬁicy_fûãr_m©ch
(
xpöfo
, 
±y≥
))

747 i‡(
xb
->
off£t
 > xb->
size
) {

748 
	`Ârötf
(
°dîr
, "Policy buffer overflow\n");

752 
√w_n
 = (
∆msghdr
 *)(
xb
->
buf
 + xb->
off£t
);

753 
√w_n
->
∆msg_Àn
 = 
	`NLMSG_LENGTH
((*
xpid
));

754 
√w_n
->
∆msg_Êags
 = 
NLM_F_REQUEST
;

755 
√w_n
->
∆msg_ty≥
 = 
XFRM_MSG_DELPOLICY
;

756 
√w_n
->
∆msg_£q
 = ++
πh
->
£q
;

758 
xpid
 = 
	`NLMSG_DATA
(
√w_n
);

759 
	`mem˝y
(&
xpid
->
£l
, &
xpöfo
->sel, (xpid->sel));

760 
xpid
->
dú
 = 
xpöfo
->dir;

761 
xpid
->
ödex
 = 
xpöfo
->index;

763 
xb
->
off£t
 +
√w_n
->
∆msg_Àn
;

764 
xb
->
∆msg_cou¡
 ++;

767 
	}
}

769 
	$x‰m_pﬁicy_li°_‹_dñëóŒ
(
¨gc
, **
¨gv
, 
dñëóŒ
)

771 *
£Õ
 = 
NULL
;

772 
π∆_h™dÀ
 
πh
;

774 i‡(
¨gc
 > 0)

775 
fûãr
.
u£
 = 1;

776 
fûãr
.
xpöfo
.
£l
.
Ámûy
 = 
¥e„ºed_Ámûy
;

778 
¨gc
 > 0) {

779 i‡(
	`°rcmp
(*
¨gv
, "dir") == 0) {

780 
	`NEXT_ARG
();

781 
	`x‰m_pﬁicy_dú_∑r£
(&
fûãr
.
xpöfo
.
dú
, &
¨gc
, &
¨gv
);

783 
fûãr
.
dú_mask
 = 
XFRM_FILTER_MASK_FULL
;

785 } i‡(
	`°rcmp
(*
¨gv
, "index") == 0) {

786 
	`NEXT_ARG
();

787 i‡(
	`gë_u32
(&
fûãr
.
xpöfo
.
ödex
, *
¨gv
, 0))

788 
	`öv¨g
("INDEX vÆuêi†övÆid", *
¨gv
);

790 
fûãr
.
ödex_mask
 = 
XFRM_FILTER_MASK_FULL
;

792 } i‡(
	`°rcmp
(*
¨gv
, "ptype") == 0) {

793 
	`NEXT_ARG
();

794 
	`x‰m_pﬁicy_±y≥_∑r£
(&
fûãr
.
±y≥
, &
¨gc
, &
¨gv
);

796 
fûãr
.
±y≥_mask
 = 
XFRM_FILTER_MASK_FULL
;

798 } i‡(
	`°rcmp
(*
¨gv
, "action") == 0) {

799 
	`NEXT_ARG
();

800 i‡(
	`°rcmp
(*
¨gv
, "allow") == 0)

801 
fûãr
.
xpöfo
.
a˘i⁄
 = 
XFRM_POLICY_ALLOW
;

802 i‡(
	`°rcmp
(*
¨gv
, "block") == 0)

803 
fûãr
.
xpöfo
.
a˘i⁄
 = 
XFRM_POLICY_BLOCK
;

805 
	`öv¨g
("ACTION vÆuêi†övÆid\n", *
¨gv
);

807 
fûãr
.
a˘i⁄_mask
 = 
XFRM_FILTER_MASK_FULL
;

809 } i‡(
	`°rcmp
(*
¨gv
, "priority") == 0) {

810 
	`NEXT_ARG
();

811 i‡(
	`gë_u32
(&
fûãr
.
xpöfo
.
¥i‹ôy
, *
¨gv
, 0))

812 
	`öv¨g
("PRIORITY vÆuêi†övÆid", *
¨gv
);

814 
fûãr
.
¥i‹ôy_mask
 = 
XFRM_FILTER_MASK_FULL
;

816 } i‡(
	`°rcmp
(*
¨gv
, "flag") == 0) {

817 
	`NEXT_ARG
();

818 
	`x‰m_pﬁicy_Êag_∑r£
(&
fûãr
.
xpöfo
.
Êags
, &
¨gc
,

819 &
¨gv
);

821 
fûãr
.
pﬁicy_Êags_mask
 = 
XFRM_FILTER_MASK_FULL
;

824 i‡(
£Õ
)

825 
	`öv¨g
("unknown", *
¨gv
);

826 
£Õ
 = *
¨gv
;

828 
	`x‰m_£À˘‹_∑r£
(&
fûãr
.
xpöfo
.
£l
, &
¨gc
, &
¨gv
);

829 i‡(
¥e„ºed_Ámûy
 =
AF_UNSPEC
)

830 
¥e„ºed_Ámûy
 = 
fûãr
.
xpöfo
.
£l
.
Ámûy
;

834 
¨gc
--; 
¨gv
++;

837 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

838 
	`exô
(1);

840 i‡(
dñëóŒ
) {

841 
x‰m_buf„r
 
xb
;

842 
buf
[
NLMSG_DELETEALL_BUF_SIZE
];

843 
i
;

845 
xb
.
buf
 = buf;

846 
xb
.
size
 = (
buf
);

847 
xb
.
πh
 = &rth;

849 
i
 = 0; ; i++) {

851 
∆msghdr
 
n
;

852 
buf
[
NLMSG_BUF_SIZE
];

853 } 
ªq
 = {

854 .
n
.
∆msg_Àn
 = 
NLMSG_HDRLEN
,

855 .
n
.
∆msg_Êags
 = 
NLM_F_DUMP
 | 
NLM_F_REQUEST
,

856 .
n
.
∆msg_ty≥
 = 
XFRM_MSG_GETPOLICY
,

857 .
n
.
∆msg_£q
 = 
πh
.
dump
 = ++πh.
£q
,

860 
xb
.
off£t
 = 0;

861 
xb
.
∆msg_cou¡
 = 0;

863 i‡(
show_°©s
 > 1)

864 
	`Ârötf
(
°dîr
, "Dñëe-Æ»round = %d\n", 
i
);

866 i‡(
	`π∆_£nd
(&
πh
, (*)&
ªq
,Ñeq.
n
.
∆msg_Àn
) < 0) {

867 
	`≥º‹
("Cannot send dumpÑequest");

868 
	`exô
(1);

871 i‡(
	`π∆_dump_fûãr
(&
πh
, 
x‰m_pﬁicy_kìp
, &
xb
) < 0) {

872 
	`Ârötf
(
°dîr
, "Delete-allÅerminated\n");

873 
	`exô
(1);

875 i‡(
xb
.
∆msg_cou¡
 == 0) {

876 i‡(
show_°©s
 > 1)

877 
	`Ârötf
(
°dîr
, "Delete-all completed\n");

881 i‡(
	`π∆_£nd_check
(&
πh
, 
xb
.
buf
, xb.
off£t
) < 0) {

882 
	`≥º‹
("FailedÅo send delete-allÑequest");

883 
	`exô
(1);

885 i‡(
show_°©s
 > 1)

886 
	`Ârötf
(
°dîr
, "Dñëe-Æ»∆msg cou¡ = %d\n", 
xb
.
∆msg_cou¡
);

888 
xb
.
off£t
 = 0;

889 
xb
.
∆msg_cou¡
 = 0;

893 
∆msghdr
 
n
;

894 
buf
[
NLMSG_BUF_SIZE
];

895 } 
ªq
 = {

896 .
n
.
∆msg_Àn
 = 
NLMSG_HDRLEN
,

897 .
n
.
∆msg_Êags
 = 
NLM_F_DUMP
 | 
NLM_F_REQUEST
,

898 .
n
.
∆msg_ty≥
 = 
XFRM_MSG_GETPOLICY
,

899 .
n
.
∆msg_£q
 = 
πh
.
dump
 = ++πh.
£q
,

902 i‡(
	`π∆_£nd
(&
πh
, (*)&
ªq
,Ñeq.
n
.
∆msg_Àn
) < 0) {

903 
	`≥º‹
("Cannot send dumpÑequest");

904 
	`exô
(1);

907 i‡(
	`π∆_dump_fûãr
(&
πh
, 
x‰m_pﬁicy_¥öt
, 
°dout
) < 0) {

908 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

909 
	`exô
(1);

913 
	`π∆_˛o£
(&
πh
);

915 
	`exô
(0);

916 
	}
}

918 
	$¥öt_•döfo
–
∆msghdr
 *
n
, *
¨g
)

920 
FILE
 *
Â
 = (FILE*)
¨g
;

921 
__u32
 *
f
 = 
	`NLMSG_DATA
(
n
);

922 
π©å
 * 
tb
[
XFRMA_SPD_MAX
+1];

923 
π©å
 * 
πa
;

925 
Àn
 = 
n
->
∆msg_Àn
;

927 
Àn
 -
	`NLMSG_LENGTH
((
__u32
));

928 i‡(
Àn
 < 0) {

929 
	`Ârötf
(
°dîr
, "SPDöfo: Wr⁄gÜí %d\n", 
Àn
);

933 
πa
 = 
	`XFRMSAPD_RTA
(
f
);

934 
	`∑r£_π©å
(
tb
, 
XFRMA_SPD_MAX
, 
πa
, 
Àn
);

936 
	`Ârötf
(
Â
,"\t SPD");

937 i‡(
tb
[
XFRMA_SPD_INFO
]) {

938 
x‰mu_•döfo
 *
si
;

940 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_SPD_INFO
]Ë< (*
si
)) {

941 
	`Ârötf
(
°dîr
, "SPDöfo: Wr⁄gÜí %d\n", 
Àn
);

944 
si
 = 
	`RTA_DATA
(
tb
[
XFRMA_SPD_INFO
]);

945 
	`Ârötf
(
Â
," IN %d", 
si
->
ö˙t
);

946 
	`Ârötf
(
Â
," OUT %d", 
si
->
out˙t
);

947 
	`Ârötf
(
Â
," FWD %d", 
si
->
fwd˙t
);

949 i‡(
show_°©s
) {

950 
	`Ârötf
(
Â
," (Sock:");

951 
	`Ârötf
(
Â
," IN %d", 
si
->
ös˙t
);

952 
	`Ârötf
(
Â
," OUT %d", 
si
->
outs˙t
);

953 
	`Ârötf
(
Â
," FWD %d", 
si
->
fwds˙t
);

954 
	`Ârötf
(
Â
,")");

957 
	`Ârötf
(
Â
, "%s", 
_SL_
);

959 i‡(
show_°©s
 > 1) {

960 
x‰mu_•dhöfo
 *
sh
;

962 i‡(
tb
[
XFRMA_SPD_HINFO
]) {

963 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_SPD_HINFO
]Ë< (*
sh
)) {

964 
	`Ârötf
(
°dîr
, "SPDöfo: Wr⁄gÜí %d\n", 
Àn
);

967 
sh
 = 
	`RTA_DATA
(
tb
[
XFRMA_SPD_HINFO
]);

968 
	`Ârötf
(
Â
,"\t SPD buckets:");

969 
	`Ârötf
(
Â
," cou¡ %d", 
sh
->
•dh˙t
);

970 
	`Ârötf
(
Â
," Max %d", 
sh
->
•dhm˙t
);

971 
	`Ârötf
(
Â
, "%s", 
_SL_
);

973 i‡(
tb
[
XFRMA_SPD_IPV4_HTHRESH
]) {

974 
x‰mu_•dhthªsh
 *
th
;

975 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_SPD_IPV4_HTHRESH
]Ë< (*
th
)) {

976 
	`Ârötf
(
°dîr
, "SPDöfo: Wr⁄gÜí %d\n", 
Àn
);

979 
th
 = 
	`RTA_DATA
(
tb
[
XFRMA_SPD_IPV4_HTHRESH
]);

980 
	`Ârötf
(
Â
,"\t SPD IPv4Åhresholds:");

981 
	`Ârötf
(
Â
,"Üoˇ»%d", 
th
->
lbôs
);

982 
	`Ârötf
(
Â
,"ÑemŸê%d", 
th
->
rbôs
);

983 
	`Ârötf
(
Â
, "%s", 
_SL_
);

986 i‡(
tb
[
XFRMA_SPD_IPV6_HTHRESH
]) {

987 
x‰mu_•dhthªsh
 *
th
;

988 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_SPD_IPV6_HTHRESH
]Ë< (*
th
)) {

989 
	`Ârötf
(
°dîr
, "SPDöfo: Wr⁄gÜí %d\n", 
Àn
);

992 
th
 = 
	`RTA_DATA
(
tb
[
XFRMA_SPD_IPV6_HTHRESH
]);

993 
	`Ârötf
(
Â
,"\t SPD IPv6Åhresholds:");

994 
	`Ârötf
(
Â
,"Üoˇ»%d", 
th
->
lbôs
);

995 
	`Ârötf
(
Â
,"ÑemŸê%d", 
th
->
rbôs
);

996 
	`Ârötf
(
Â
, "%s", 
_SL_
);

1000 i‡(
⁄ñöe
)

1001 
	`Ârötf
(
Â
, "\n");

1004 
	}
}

1006 
	$x‰m_•d_£töfo
(
¨gc
, **
¨gv
)

1008 
π∆_h™dÀ
 
πh
;

1010 
∆msghdr
 
n
;

1011 
__u32
 
Êags
;

1012 
buf
[
RTA_BUF_SIZE
];

1013 } 
ªq
;

1015 *
thr4
 = 
NULL
;

1016 *
thr6
 = 
NULL
;

1018 
	`mem£t
(&
ªq
, 0, (req));

1020 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
__u32
));

1021 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

1022 
ªq
.
n
.
∆msg_ty≥
 = 
XFRM_MSG_NEWSPDINFO
;

1023 
ªq
.
Êags
 = 0XFFFFFFFF;

1025 
¨gc
 > 0) {

1026 i‡(
	`°rcmp
(*
¨gv
, "hthresh4") == 0) {

1027 
x‰mu_•dhthªsh
 
thr
;

1029 i‡(
thr4
)

1030 
	`du∑rg
("hthªsh4", *
¨gv
);

1031 
thr4
 = *
¨gv
;

1032 
	`NEXT_ARG
();

1033 i‡(
	`gë_u8
(&
thr
.
lbôs
, *
¨gv
, 0) ||Åhr.lbits > 32)

1034 
	`öv¨g
("hthªsh4 LBITS vÆuêi†övÆid", *
¨gv
);

1035 
	`NEXT_ARG
();

1036 i‡(
	`gë_u8
(&
thr
.
rbôs
, *
¨gv
, 0) ||Åhr.rbits > 32)

1037 
	`öv¨g
("hthªsh4 RBITS vÆuêi†övÆid", *
¨gv
);

1039 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
XFRMA_SPD_IPV4_HTHRESH
,

1040 (*)&
thr
, (thr));

1041 } i‡(
	`°rcmp
(*
¨gv
, "hthresh6") == 0) {

1042 
x‰mu_•dhthªsh
 
thr
;

1044 i‡(
thr6
)

1045 
	`du∑rg
("hthªsh6", *
¨gv
);

1046 
thr6
 = *
¨gv
;

1047 
	`NEXT_ARG
();

1048 i‡(
	`gë_u8
(&
thr
.
lbôs
, *
¨gv
, 0) ||Åhr.lbits > 128)

1049 
	`öv¨g
("hthªsh6 LBITS vÆuêi†övÆid", *
¨gv
);

1050 
	`NEXT_ARG
();

1051 i‡(
	`gë_u8
(&
thr
.
rbôs
, *
¨gv
, 0) ||Åhr.rbits > 128)

1052 
	`öv¨g
("hthªsh6 RBITS vÆuêi†övÆid", *
¨gv
);

1054 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
XFRMA_SPD_IPV6_HTHRESH
,

1055 (*)&
thr
, (thr));

1057 
	`öv¨g
("unknown", *
¨gv
);

1060 
¨gc
--; 
¨gv
++;

1063 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

1064 
	`exô
(1);

1066 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

1067 
	`exô
(2);

1069 
	`π∆_˛o£
(&
πh
);

1072 
	}
}

1074 
	$x‰m_•d_gëöfo
(
¨gc
, **
¨gv
)

1076 
π∆_h™dÀ
 
πh
;

1078 
∆msghdr
 
n
;

1079 
__u32
 
Êags
;

1080 
™s
[128];

1081 } 
ªq
;

1083 
	`mem£t
(&
ªq
, 0, (req));

1085 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
__u32
));

1086 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

1087 
ªq
.
n
.
∆msg_ty≥
 = 
XFRM_MSG_GETSPDINFO
;

1088 
ªq
.
Êags
 = 0XFFFFFFFF;

1090 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

1091 
	`exô
(1);

1093 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, &req.n, (req)) < 0)

1094 
	`exô
(2);

1096 
	`¥öt_•döfo
(&
ªq
.
n
, (*)
°dout
);

1098 
	`π∆_˛o£
(&
πh
);

1101 
	}
}

1103 
	$x‰m_pﬁicy_Êush
(
¨gc
, **
¨gv
)

1105 
π∆_h™dÀ
 
πh
;

1107 
∆msghdr
 
n
;

1108 
buf
[
RTA_BUF_SIZE
];

1109 } 
ªq
;

1110 *
±y≥p
 = 
NULL
;

1111 
x‰m_u£Ωﬁicy_ty≥
 
u±
;

1113 
	`mem£t
(&
ªq
, 0, (req));

1114 
	`mem£t
(&
u±
, 0, (upt));

1116 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
(0);

1117 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

1118 
ªq
.
n
.
∆msg_ty≥
 = 
XFRM_MSG_FLUSHPOLICY
;

1120 
¨gc
 > 0) {

1121 i‡(
	`°rcmp
(*
¨gv
, "ptype") == 0) {

1122 i‡(
±y≥p
)

1123 
	`du∑rg
("±y≥", *
¨gv
);

1124 
±y≥p
 = *
¨gv
;

1126 
	`NEXT_ARG
();

1127 
	`x‰m_pﬁicy_±y≥_∑r£
(&
u±
.
ty≥
, &
¨gc
, &
¨gv
);

1129 
	`öv¨g
("unknown", *
¨gv
);

1131 
¨gc
--; 
¨gv
++;

1134 i‡(
±y≥p
) {

1135 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
XFRMA_POLICY_TYPE
,

1136 (*)&
u±
, (upt));

1139 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

1140 
	`exô
(1);

1142 i‡(
show_°©s
 > 1)

1143 
	`Ârötf
(
°dîr
, "FlushÖolicy\n");

1145 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

1146 
	`exô
(2);

1148 
	`π∆_˛o£
(&
πh
);

1151 
	}
}

1153 
	$do_x‰m_pﬁicy
(
¨gc
, **
¨gv
)

1155 i‡(
¨gc
 < 1)

1156  
	`x‰m_pﬁicy_li°_‹_dñëóŒ
(0, 
NULL
, 0);

1158 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

1159  
	`x‰m_pﬁicy_modify
(
XFRM_MSG_NEWPOLICY
, 0,

1160 
¨gc
-1, 
¨gv
+1);

1161 i‡(
	`m©ches
(*
¨gv
, "update") == 0)

1162  
	`x‰m_pﬁicy_modify
(
XFRM_MSG_UPDPOLICY
, 0,

1163 
¨gc
-1, 
¨gv
+1);

1164 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

1165  
	`x‰m_pﬁicy_dñëe
(
¨gc
-1, 
¨gv
+1);

1166 i‡(
	`m©ches
(*
¨gv
, "deleteall") == 0 || matches(*argv, "delall") == 0)

1167  
	`x‰m_pﬁicy_li°_‹_dñëóŒ
(
¨gc
-1, 
¨gv
+1, 1);

1168 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

1169 || 
	`m©ches
(*
¨gv
, "lst") == 0)

1170  
	`x‰m_pﬁicy_li°_‹_dñëóŒ
(
¨gc
-1, 
¨gv
+1, 0);

1171 i‡(
	`m©ches
(*
¨gv
, "get") == 0)

1172  
	`x‰m_pﬁicy_gë
(
¨gc
-1, 
¨gv
+1);

1173 i‡(
	`m©ches
(*
¨gv
, "flush") == 0)

1174  
	`x‰m_pﬁicy_Êush
(
¨gc
-1, 
¨gv
+1);

1175 i‡(
	`m©ches
(*
¨gv
, "count") == 0)

1176  
	`x‰m_•d_gëöfo
(
¨gc
, 
¨gv
);

1177 i‡(
	`m©ches
(*
¨gv
, "set") == 0)

1178  
	`x‰m_•d_£töfo
(
¨gc
-1, 
¨gv
+1);

1179 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

1180 
	`ußge
();

1181 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ù x‰mÖﬁicy hñp\".\n", *
¨gv
);

1182 
	`exô
(-1);

1183 
	}
}

	@ip/xfrm_state.c

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<√tdb.h
>

31 
	~"utûs.h
"

32 
	~"x‰m.h
"

33 
	~"ù_comm⁄.h
"

36 
	#NLMSG_DELETEALL_BUF_SIZE
 8192

	)

48 
	#NLMSG_BUF_SIZE
 4096

	)

49 
	#RTA_BUF_SIZE
 2048

	)

50 
	#XFRM_ALGO_KEY_BUF_SIZE
 512

	)

51 
	#CTX_BUF_SIZE
 256

	)

53 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

55 
	$ußge
()

57 
	`Ârötf
(
°dîr
, "Usage: ip xfrm state {ádd | update } ID [ ALGO-LIST ] [ mode MODE ]\n");

58 
	`Ârötf
(
°dîr
, " [ mark MARK [ mask MASK ] ] [Ñeqid REQID ] [ seq SEQ ]\n");

59 
	`Ârötf
(
°dîr
, " [Ñeplay-window SIZE ] [Ñeplay-seq SEQ ] [Ñeplay-oseq SEQ ]\n");

60 
	`Ârötf
(
°dîr
, " [Ñeplay-seq-hi SEQ ] [Ñeplay-oseq-hi SEQ ]\n");

61 
	`Ârötf
(
°dîr
, " [ flag FLAG-LIST ] [ sel SELECTOR ] [ LIMIT-LIST ] [Éncap ENCAP ]\n");

62 
	`Ârötf
(
°dîr
, " [ coa ADDR[/PLEN] ] [ ctx CTX ] [Éxtra-flag EXTRA-FLAG-LIST ]\n");

63 
	`Ârötf
(
°dîr
, "Usage: ip xfrm stateállocspi ID [ mode MODE ] [ mark MARK [ mask MASK ] ]\n");

64 
	`Ârötf
(
°dîr
, " [Ñeqid REQID ] [ seq SEQ ] [ min SPI max SPI ]\n");

65 
	`Ârötf
(
°dîr
, "Usage: ip xfrm state { delete | get } ID [ mark MARK [ mask MASK ] ]\n");

66 
	`Ârötf
(
°dîr
, "Usage: ip xfrm state { deleteall |Üist } [ ID ] [ mode MODE ] [Ñeqid REQID ]\n");

67 
	`Ârötf
(
°dîr
, " [ flag FLAG-LIST ]\n");

68 
	`Ârötf
(
°dîr
, "Usage: ip xfrm state flush [Öroto XFRM-PROTO ]\n");

69 
	`Ârötf
(
°dîr
, "Usage: ip xfrm state count\n");

70 
	`Ârötf
(
°dîr
, "ID := [ src ADDR ] [ dst ADDR ] [Öroto XFRM-PROTO ] [ spi SPI ]\n");

71 
	`Ârötf
(
°dîr
, "XFRM-PROTO := ");

72 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_x‰m¥Ÿo
(
IPPROTO_ESP
));

73 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_x‰m¥Ÿo
(
IPPROTO_AH
));

74 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_x‰m¥Ÿo
(
IPPROTO_COMP
));

75 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_x‰m¥Ÿo
(
IPPROTO_ROUTING
));

76 
	`Ârötf
(
°dîr
, "%s\n", 
	`°rxf_x‰m¥Ÿo
(
IPPROTO_DSTOPTS
));

77 
	`Ârötf
(
°dîr
, "ALGO-LIST := [ ALGO-LIST ] ALGO\n");

78 
	`Ârötf
(
°dîr
, "ALGO := { ");

79 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_CRYPT
));

80 
	`Ârötf
(
°dîr
, "%s", 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AUTH
));

81 
	`Ârötf
(
°dîr
, " } ALGO-NAME ALGO-KEYMAT |\n");

82 
	`Ârötf
(
°dîr
, " %s", 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AUTH_TRUNC
));

83 
	`Ârötf
(
°dîr
, " ALGO-NAME ALGO-KEYMAT ALGO-TRUNC-LEN |\n");

84 
	`Ârötf
(
°dîr
, " %s", 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AEAD
));

85 
	`Ârötf
(
°dîr
, " ALGO-NAME ALGO-KEYMAT ALGO-ICV-LEN |\n");

86 
	`Ârötf
(
°dîr
, " %s", 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_COMP
));

87 
	`Ârötf
(
°dîr
, " ALGO-NAME\n");

88 
	`Ârötf
(
°dîr
, "MODE :=Åransport |Åunnel | beet |Ño | in_trigger\n");

89 
	`Ârötf
(
°dîr
, "FLAG-LIST := [ FLAG-LIST ] FLAG\n");

90 
	`Ârötf
(
°dîr
, "FLAG :=Çoecn | decap-dscp |Çopmtudisc | wildrecv | icmp |áf-unspec |álign4 |Ésn\n");

91 
	`Ârötf
(
°dîr
, "EXTRA-FLAG-LIST := [ EXTRA-FLAG-LIST ] EXTRA-FLAG\n");

92 
	`Ârötf
(
°dîr
, "EXTRA-FLAG := dont-encap-dscp\n");

93 
	`Ârötf
(
°dîr
, "SELECTOR := [ src ADDR[/PLEN] ] [ dst ADDR[/PLEN] ] [ dev DEV ] [ UPSPEC ]\n");

94 
	`Ârötf
(
°dîr
, "UPSPEC :=Öroto { { ");

95 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_¥Ÿo
(
IPPROTO_TCP
));

96 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_¥Ÿo
(
IPPROTO_UDP
));

97 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_¥Ÿo
(
IPPROTO_SCTP
));

98 
	`Ârötf
(
°dîr
, "%s", 
	`°rxf_¥Ÿo
(
IPPROTO_DCCP
));

99 
	`Ârötf
(
°dîr
, " } [ sport PORT ] [ dport PORT ] |\n");

100 
	`Ârötf
(
°dîr
, " { ");

101 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_¥Ÿo
(
IPPROTO_ICMP
));

102 
	`Ârötf
(
°dîr
, "%†| ", 
	`°rxf_¥Ÿo
(
IPPROTO_ICMPV6
));

103 
	`Ârötf
(
°dîr
, "%s", 
	`°rxf_¥Ÿo
(
IPPROTO_MH
));

104 
	`Ârötf
(
°dîr
, " } [Åype NUMBER ] [ code NUMBER ] |\n");

105 
	`Ârötf
(
°dîr
, " %s", 
	`°rxf_¥Ÿo
(
IPPROTO_GRE
));

106 
	`Ârötf
(
°dîr
, " [ key { DOTTED-QUAD | NUMBER } ] | PROTO }\n");

107 
	`Ârötf
(
°dîr
, "LIMIT-LIST := [ LIMIT-LIST ]Üimit LIMIT\n");

108 
	`Ârötf
(
°dîr
, "LIMIT := {Åime-soft |Åime-hard |Åime-use-soft |Åime-use-hard } SECONDS |\n");

109 
	`Ârötf
(
°dîr
, " { byte-soft | byte-hard } SIZE | {Öacket-soft |Öacket-hard } COUNT\n");

110 
	`Ârötf
(
°dîr
, "ENCAP := {Éspinudp |Éspinudp-nonike } SPORT DPORT OADDR\n");

112 
	`exô
(-1);

113 
	}
}

115 
	$x‰m_Ægo_∑r£
(
x‰m_Ægo
 *
Æg
, 
x‰m_©å_ty≥_t
 
ty≥
,

116 *
«me
, *
key
, *
buf
, 
max
)

118 
Àn
;

119 
¶í
 = 
	`°æí
(
key
);

123 
	`Ârötf
(
°dîr
, "warning: ALGO-NAME/ALGO-KEYMAT values will be sentÅoÅhe kernelÖromiscuously! (verifyingÅhem isn't implemented yet)\n");

126 
	`°∫˝y
(
Æg
->
Æg_«me
, 
«me
, (alg->alg_name));

128 i‡(
¶í
 > 2 && 
	`°∫cmp
(
key
, "0x", 2) == 0) {

130 *
p
 = 
key
 + 2;

131 
∂í
 = 
¶í
 - 2;

132 
i
;

133 
j
;

141 
Àn
 = (
∂í
 + 1) / 2;

142 i‡(
Àn
 > 
max
)

143 
	`öv¨g
("ALGO-KEYMAT vÆuêmake†buf„∏ovîÊow\n", 
key
);

145 
i
 = - (
∂í
 % 2), 
j
 = 0; j < 
Àn
; i += 2, j++) {

146 
vbuf
[3];

147 
__u8
 
vÆ
;

149 
vbuf
[0] = 
i
 >0 ? 
p
[i] : '0';

150 
vbuf
[1] = 
p
[
i
 + 1];

151 
vbuf
[2] = '\0';

153 i‡(
	`gë_u8
(&
vÆ
, 
vbuf
, 16))

154 
	`öv¨g
("ALGO-KEYMAT vÆuêi†övÆid", 
key
);

156 
buf
[
j
] = 
vÆ
;

159 
Àn
 = 
¶í
;

160 i‡(
Àn
 > 0) {

161 i‡(
Àn
 > 
max
)

162 
	`öv¨g
("ALGO-KEYMAT vÆuêmake†buf„∏ovîÊow\n", 
key
);

164 
	`mem˝y
(
buf
, 
key
, 
Àn
);

168 
Æg
->
Æg_key_Àn
 = 
Àn
 * 8;

171 
	}
}

173 
	$x‰m_£q_∑r£
(
__u32
 *
£q
, *
¨g˝
, ***
¨gvp
)

175 
¨gc
 = *
¨g˝
;

176 **
¨gv
 = *
¨gvp
;

178 i‡(
	`gë_u32
(
£q
, *
¨gv
, 0))

179 
	`öv¨g
("SEQ vÆuêi†övÆid", *
¨gv
);

181 *
£q
 = 
	`ht⁄l
(*seq);

183 *
¨g˝
 = 
¨gc
;

184 *
¨gvp
 = 
¨gv
;

187 
	}
}

189 
	$x‰m_°©e_Êag_∑r£
(
__u8
 *
Êags
, *
¨g˝
, ***
¨gvp
)

191 
¨gc
 = *
¨g˝
;

192 **
¨gv
 = *
¨gvp
;

193 
Àn
 = 
	`°æí
(*
¨gv
);

195 i‡(
Àn
 > 2 && 
	`°∫cmp
(*
¨gv
, "0x", 2) == 0) {

196 
__u8
 
vÆ
 = 0;

198 i‡(
	`gë_u8
(&
vÆ
, *
¨gv
, 16))

199 
	`öv¨g
("FLAG vÆuêi†övÆid", *
¨gv
);

200 *
Êags
 = 
vÆ
;

203 i‡(
	`°rcmp
(*
¨gv
, "noecn") == 0)

204 *
Êags
 |
XFRM_STATE_NOECN
;

205 i‡(
	`°rcmp
(*
¨gv
, "decap-dscp") == 0)

206 *
Êags
 |
XFRM_STATE_DECAP_DSCP
;

207 i‡(
	`°rcmp
(*
¨gv
, "nopmtudisc") == 0)

208 *
Êags
 |
XFRM_STATE_NOPMTUDISC
;

209 i‡(
	`°rcmp
(*
¨gv
, "wildrecv") == 0)

210 *
Êags
 |
XFRM_STATE_WILDRECV
;

211 i‡(
	`°rcmp
(*
¨gv
, "icmp") == 0)

212 *
Êags
 |
XFRM_STATE_ICMP
;

213 i‡(
	`°rcmp
(*
¨gv
, "af-unspec") == 0)

214 *
Êags
 |
XFRM_STATE_AF_UNSPEC
;

215 i‡(
	`°rcmp
(*
¨gv
, "align4") == 0)

216 *
Êags
 |
XFRM_STATE_ALIGN4
;

217 i‡(
	`°rcmp
(*
¨gv
, "esn") == 0)

218 *
Êags
 |
XFRM_STATE_ESN
;

220 
	`PREV_ARG
();

224 i‡(!
	`NEXT_ARG_OK
())

226 
	`NEXT_ARG
();

230 *
¨g˝
 = 
¨gc
;

231 *
¨gvp
 = 
¨gv
;

234 
	}
}

236 
	$x‰m_°©e_exåa_Êag_∑r£
(
__u32
 *
exåa_Êags
, *
¨g˝
, ***
¨gvp
)

238 
¨gc
 = *
¨g˝
;

239 **
¨gv
 = *
¨gvp
;

240 
Àn
 = 
	`°æí
(*
¨gv
);

242 i‡(
Àn
 > 2 && 
	`°∫cmp
(*
¨gv
, "0x", 2) == 0) {

243 
__u32
 
vÆ
 = 0;

245 i‡(
	`gë_u32
(&
vÆ
, *
¨gv
, 16))

246 
	`öv¨g
("\"EXTRA-FLAG\" i†övÆid", *
¨gv
);

247 *
exåa_Êags
 = 
vÆ
;

250 i‡(
	`°rcmp
(*
¨gv
, "dont-encap-dscp") == 0)

251 *
exåa_Êags
 |
XFRM_SA_XFLAG_DONT_ENCAP_DSCP
;

253 
	`PREV_ARG
();

257 i‡(!
	`NEXT_ARG_OK
())

259 
	`NEXT_ARG
();

263 *
¨g˝
 = 
¨gc
;

264 *
¨gvp
 = 
¨gv
;

267 
	}
}

269 
	$x‰m_°©e_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

271 
π∆_h™dÀ
 
πh
;

273 
∆msghdr
 
n
;

274 
x‰m_u£rß_öfo
 
xsöfo
;

275 
buf
[
RTA_BUF_SIZE
];

276 } 
ªq
;

277 
x‰m_ª∂ay_°©e
 
ª∂ay
;

278 
x‰m_ª∂ay_°©e_e¢
 
ª∂ay_e¢
;

279 
__u32
 
ª∂ay_wödow
 = 0;

280 
__u32
 
£q
 = 0, 
o£q
 = 0, 
£q_hi
 = 0, 
o£q_hi
 = 0;

281 *
idp
 = 
NULL
;

282 *
´ad›
 = 
NULL
;

283 *
ólg›
 = 
NULL
;

284 *
Ølg›
 = 
NULL
;

285 *
ˇlg›
 = 
NULL
;

286 *
cﬂp
 = 
NULL
;

287 *
s˘xp
 = 
NULL
;

288 
__u32
 
exåa_Êags
 = 0;

289 
x‰m_m¨k
 
m¨k
 = {0, 0};

291 
x‰m_u£r_£c_˘x
 
s˘x
;

292 
°r
[
CTX_BUF_SIZE
];

293 } 
˘x
;

295 
	`mem£t
(&
ªq
, 0, (req));

296 
	`mem£t
(&
ª∂ay
, 0, (replay));

297 
	`mem£t
(&
ª∂ay_e¢
, 0, (replay_esn));

298 
	`mem£t
(&
˘x
, 0, (ctx));

300 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
(‘eq.
xsöfo
));

301 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

302 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

303 
ªq
.
xsöfo
.
Ámûy
 = 
¥e„ºed_Ámûy
;

305 
ªq
.
xsöfo
.
l·
.
so·_byã_limô
 = 
XFRM_INF
;

306 
ªq
.
xsöfo
.
l·
.
h¨d_byã_limô
 = 
XFRM_INF
;

307 
ªq
.
xsöfo
.
l·
.
so·_∑ckë_limô
 = 
XFRM_INF
;

308 
ªq
.
xsöfo
.
l·
.
h¨d_∑ckë_limô
 = 
XFRM_INF
;

310 
¨gc
 > 0) {

311 i‡(
	`°rcmp
(*
¨gv
, "mode") == 0) {

312 
	`NEXT_ARG
();

313 
	`x‰m_mode_∑r£
(&
ªq
.
xsöfo
.
mode
, &
¨gc
, &
¨gv
);

314 } i‡(
	`°rcmp
(*
¨gv
, "mark") == 0) {

315 
	`x‰m_∑r£_m¨k
(&
m¨k
, &
¨gc
, &
¨gv
);

316 } i‡(
	`°rcmp
(*
¨gv
, "reqid") == 0) {

317 
	`NEXT_ARG
();

318 
	`x‰m_ªqid_∑r£
(&
ªq
.
xsöfo
.
ªqid
, &
¨gc
, &
¨gv
);

319 } i‡(
	`°rcmp
(*
¨gv
, "seq") == 0) {

320 
	`NEXT_ARG
();

321 
	`x‰m_£q_∑r£
(&
ªq
.
xsöfo
.
£q
, &
¨gc
, &
¨gv
);

322 } i‡(
	`°rcmp
(*
¨gv
, "replay-window") == 0) {

323 
	`NEXT_ARG
();

324 i‡(
	`gë_u32
(&
ª∂ay_wödow
, *
¨gv
, 0))

325 
	`öv¨g
("vÆuêa·î \"ª∂ay-wödow\" i†övÆid", *
¨gv
);

326 } i‡(
	`°rcmp
(*
¨gv
, "replay-seq") == 0) {

327 
	`NEXT_ARG
();

328 i‡(
	`gë_u32
(&
£q
, *
¨gv
, 0))

329 
	`öv¨g
("vÆuêa·î \"ª∂ay-£q\" i†övÆid", *
¨gv
);

330 } i‡(
	`°rcmp
(*
¨gv
, "replay-seq-hi") == 0) {

331 
	`NEXT_ARG
();

332 i‡(
	`gë_u32
(&
£q_hi
, *
¨gv
, 0))

333 
	`öv¨g
("vÆuêa·î \"ª∂ay-£q-hi\" i†övÆid", *
¨gv
);

334 } i‡(
	`°rcmp
(*
¨gv
, "replay-oseq") == 0) {

335 
	`NEXT_ARG
();

336 i‡(
	`gë_u32
(&
o£q
, *
¨gv
, 0))

337 
	`öv¨g
("vÆuêa·î \"ª∂ay-o£q\" i†övÆid", *
¨gv
);

338 } i‡(
	`°rcmp
(*
¨gv
, "replay-oseq-hi") == 0) {

339 
	`NEXT_ARG
();

340 i‡(
	`gë_u32
(&
o£q_hi
, *
¨gv
, 0))

341 
	`öv¨g
("vÆuêa·î \"ª∂ay-o£q-hi\" i†övÆid", *
¨gv
);

342 } i‡(
	`°rcmp
(*
¨gv
, "flag") == 0) {

343 
	`NEXT_ARG
();

344 
	`x‰m_°©e_Êag_∑r£
(&
ªq
.
xsöfo
.
Êags
, &
¨gc
, &
¨gv
);

345 } i‡(
	`°rcmp
(*
¨gv
, "extra-flag") == 0) {

346 
	`NEXT_ARG
();

347 
	`x‰m_°©e_exåa_Êag_∑r£
(&
exåa_Êags
, &
¨gc
, &
¨gv
);

348 } i‡(
	`°rcmp
(*
¨gv
, "sel") == 0) {

349 
	`NEXT_ARG
();

350 
¥e„ºed_Ámûy
 = 
AF_UNSPEC
;

351 
	`x‰m_£À˘‹_∑r£
(&
ªq
.
xsöfo
.
£l
, &
¨gc
, &
¨gv
);

352 
¥e„ºed_Ámûy
 = 
ªq
.
xsöfo
.
£l
.
Ámûy
;

353 } i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

354 
	`NEXT_ARG
();

355 
	`x‰m_li„time_cfg_∑r£
(&
ªq
.
xsöfo
.
l·
, &
¨gc
, &
¨gv
);

356 } i‡(
	`°rcmp
(*
¨gv
, "encap") == 0) {

357 
x‰m_íˇp_tm∂
 
íˇp
;

358 
öë_¥efix
 
ﬂ
;

359 
	`NEXT_ARG
();

360 
	`x‰m_íˇp_ty≥_∑r£
(&
íˇp
.
íˇp_ty≥
, &
¨gc
, &
¨gv
);

361 
	`NEXT_ARG
();

362 i‡(
	`gë_u16
(&
íˇp
.
íˇp_•‹t
, *
¨gv
, 0))

363 
	`öv¨g
("SPORT vÆuêa·î \"íˇp\" i†övÆid", *
¨gv
);

364 
íˇp
.
íˇp_•‹t
 = 
	`ht⁄s
(encap.encap_sport);

365 
	`NEXT_ARG
();

366 i‡(
	`gë_u16
(&
íˇp
.
íˇp_dp‹t
, *
¨gv
, 0))

367 
	`öv¨g
("DPORT vÆuêa·î \"íˇp\" i†övÆid", *
¨gv
);

368 
íˇp
.
íˇp_dp‹t
 = 
	`ht⁄s
(encap.encap_dport);

369 
	`NEXT_ARG
();

370 
	`gë_addr
(&
ﬂ
, *
¨gv
, 
AF_UNSPEC
);

371 
	`mem˝y
(&
íˇp
.
íˇp_ﬂ
, &
ﬂ
.
d©a
, (encap.encap_oa));

372 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_ENCAP
,

373 (*)&
íˇp
, (encap));

374 } i‡(
	`°rcmp
(*
¨gv
, "coa") == 0) {

375 
öë_¥efix
 
cﬂ
;

376 
x‰m_addªss_t
 
xcﬂ
;

378 i‡(
cﬂp
)

379 
	`du∑rg
("cﬂ", *
¨gv
);

380 
cﬂp
 = *
¨gv
;

382 
	`NEXT_ARG
();

384 
	`gë_¥efix
(&
cﬂ
, *
¨gv
, 
¥e„ºed_Ámûy
);

385 i‡(
cﬂ
.
Ámûy
 =
AF_UNSPEC
)

386 
	`öv¨g
("vÆuêa·î \"cﬂ\" ha†™ uƒecognizedáddªs†Ámûy", *
¨gv
);

387 i‡(
cﬂ
.
byãÀn
 > (
xcﬂ
))

388 
	`öv¨g
("vÆuêa·î \"cﬂ\" i†toÿœrge", *
¨gv
);

390 
	`mem£t
(&
xcﬂ
, 0, (xcoa));

391 
	`mem˝y
(&
xcﬂ
, &
cﬂ
.
d©a
, cﬂ.
byãÀn
);

393 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_COADDR
,

394 (*)&
xcﬂ
, (xcoa));

395 } i‡(
	`°rcmp
(*
¨gv
, "ctx") == 0) {

396 *
c⁄ãxt
;

398 i‡(
s˘xp
)

399 
	`du∑rg
("˘x", *
¨gv
);

400 
s˘xp
 = *
¨gv
;

402 
	`NEXT_ARG
();

403 
c⁄ãxt
 = *
¨gv
;

405 
	`x‰m_s˘x_∑r£
((*)&
˘x
.
°r
, 
c⁄ãxt
, &˘x.
s˘x
);

406 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_SEC_CTX
,

407 (*)&
˘x
, ctx.
s˘x
.
Àn
);

410 
ty≥
 = 
	`x‰m_ÆgŸy≥_gëby«me
(*
¨gv
);

411 
ty≥
) {

412 
XFRMA_ALG_AEAD
:

413 
XFRMA_ALG_CRYPT
:

414 
XFRMA_ALG_AUTH
:

415 
XFRMA_ALG_AUTH_TRUNC
:

416 
XFRMA_ALG_COMP
:

421 
x‰m_Ægo
 
Æg
;

422 
x‰m_Ægo_´ad
 
´ad
;

423 
x‰m_Ægo_auth
 
auth
;

424 } 
u
;

425 
buf
[
XFRM_ALGO_KEY_BUF_SIZE
];

426 } 
Æg
 = {};

427 
Àn
;

428 
__u32
 
icvÀn
, 
åun˛í
;

429 *
«me
;

430 *
key
 = "";

431 *
buf
;

433 
ty≥
) {

434 
XFRMA_ALG_AEAD
:

435 i‡(
ólg›
 || 
Ølg›
 || 
´ad›
)

436 
	`du∑rg
("ALGO-TYPE", *
¨gv
);

437 
´ad›
 = *
¨gv
;

439 
XFRMA_ALG_CRYPT
:

440 i‡(
ólg›
 || 
´ad›
)

441 
	`du∑rg
("ALGO-TYPE", *
¨gv
);

442 
ólg›
 = *
¨gv
;

444 
XFRMA_ALG_AUTH
:

445 
XFRMA_ALG_AUTH_TRUNC
:

446 i‡(
Ølg›
 || 
´ad›
)

447 
	`du∑rg
("ALGO-TYPE", *
¨gv
);

448 
Ølg›
 = *
¨gv
;

450 
XFRMA_ALG_COMP
:

451 i‡(
ˇlg›
)

452 
	`du∑rg
("ALGO-TYPE", *
¨gv
);

453 
ˇlg›
 = *
¨gv
;

457 
	`öv¨g
("ALGO-TYPE vÆuêi†övÆid\n", *
¨gv
);

460 i‡(!
	`NEXT_ARG_OK
())

461 
	`misßrg
("ALGO-NAME");

462 
	`NEXT_ARG
();

463 
«me
 = *
¨gv
;

465 
ty≥
) {

466 
XFRMA_ALG_AEAD
:

467 
XFRMA_ALG_CRYPT
:

468 
XFRMA_ALG_AUTH
:

469 
XFRMA_ALG_AUTH_TRUNC
:

470 i‡(!
	`NEXT_ARG_OK
())

471 
	`misßrg
("ALGO-KEYMAT");

472 
	`NEXT_ARG
();

473 
key
 = *
¨gv
;

477 
buf
 = 
Æg
.
u
.Æg.
Æg_key
;

478 
Àn
 = (
Æg
.
u
.alg);

480 
ty≥
) {

481 
XFRMA_ALG_AEAD
:

482 i‡(!
	`NEXT_ARG_OK
())

483 
	`misßrg
("ALGO-ICV-LEN");

484 
	`NEXT_ARG
();

485 i‡(
	`gë_u32
(&
icvÀn
, *
¨gv
, 0))

486 
	`öv¨g
("ALGO-ICV-LEN value is invalid",

487 *
¨gv
);

488 
Æg
.
u
.
´ad
.
Æg_icv_Àn
 = 
icvÀn
;

490 
buf
 = 
Æg
.
u
.
´ad
.
Æg_key
;

491 
Àn
 = (
Æg
.
u
.
´ad
);

493 
XFRMA_ALG_AUTH_TRUNC
:

494 i‡(!
	`NEXT_ARG_OK
())

495 
	`misßrg
("ALGO-TRUNC-LEN");

496 
	`NEXT_ARG
();

497 i‡(
	`gë_u32
(&
åun˛í
, *
¨gv
, 0))

498 
	`öv¨g
("ALGO-TRUNC-LEN value is invalid",

499 *
¨gv
);

500 
Æg
.
u
.
auth
.
Æg_åunc_Àn
 = 
åun˛í
;

502 
buf
 = 
Æg
.
u
.
auth
.
Æg_key
;

503 
Àn
 = (
Æg
.
u
.
auth
);

507 
	`x‰m_Ægo_∑r£
((*)&
Æg
, 
ty≥
, 
«me
, 
key
,

508 
buf
, (
Æg
.buf));

509 
Àn
 +
Æg
.
u
.Æg.
Æg_key_Àn
;

511 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
ty≥
,

512 (*)&
Æg
, 
Àn
);

517 i‡(
idp
)

518 
	`öv¨g
("unknown", *
¨gv
);

519 
idp
 = *
¨gv
;

522 
	`x‰m_id_∑r£
(&
ªq
.
xsöfo
.
ßddr
, &ªq.xsöfo.
id
,

523 &
ªq
.
xsöfo
.
Ámûy
, 0, &
¨gc
, &
¨gv
);

524 i‡(
¥e„ºed_Ámûy
 =
AF_UNSPEC
)

525 
¥e„ºed_Ámûy
 = 
ªq
.
xsöfo
.
Ámûy
;

528 
¨gc
--; 
¨gv
++;

531 i‡(
ªq
.
xsöfo
.
Êags
 & 
XFRM_STATE_ESN
 &&

532 
ª∂ay_wödow
 == 0) {

533 
	`Ârötf
(
°dîr
, "Error:Ésn flag set withoutÑeplay-window.\n");

534 
	`exô
(-1);

537 i‡(
ª∂ay_wödow
 > 
XFRMA_REPLAY_ESN_MAX
) {

538 
	`Ârötf
(
°dîr
,

540 
ª∂ay_wödow
, 
XFRMA_REPLAY_ESN_MAX
);

541 
	`exô
(-1);

544 i‡(
ªq
.
xsöfo
.
Êags
 & 
XFRM_STATE_ESN
 ||

545 
ª∂ay_wödow
 > ((
ª∂ay
.
bôm≠
) * 8)) {

546 
ª∂ay_e¢
.
£q
 = seq;

547 
ª∂ay_e¢
.
o£q
 = oseq;

548 
ª∂ay_e¢
.
£q_hi
 = seq_hi;

549 
ª∂ay_e¢
.
o£q_hi
 = oseq_hi;

550 
ª∂ay_e¢
.
ª∂ay_wödow
 =Ñeplay_window;

551 
ª∂ay_e¢
.
bmp_Àn
 = (
ª∂ay_wödow
 + (
__u32
) * 8 - 1) /

552 ((
__u32
) * 8);

553 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_REPLAY_ESN_VAL
,

554 &
ª∂ay_e¢
, (replay_esn));

556 i‡(
£q
 || 
o£q
) {

557 
ª∂ay
.
£q
 = seq;

558 
ª∂ay
.
o£q
 = oseq;

559 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_REPLAY_VAL
,

560 &
ª∂ay
, (replay));

562 
ªq
.
xsöfo
.
ª∂ay_wödow
 =Ñeplay_window;

565 i‡(
exåa_Êags
)

566 
	`add©å32
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_SA_EXTRA_FLAGS
,

567 
exåa_Êags
);

569 i‡(!
idp
) {

570 
	`Ârötf
(
°dîr
, "NotÉnough information: ID isÑequired\n");

571 
	`exô
(1);

574 i‡(
m¨k
.
m
) {

575 
r
 = 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_MARK
,

576 (*)&
m¨k
, (mark));

577 i‡(
r
 < 0) {

578 
	`Ârötf
(
°dîr
, "XFRMA_MARK failed\n");

579 
	`exô
(1);

583 i‡(
	`x‰m_x‰m¥Ÿo_is_ù£c
(
ªq
.
xsöfo
.
id
.
¥Ÿo
)) {

584 
ªq
.
xsöfo
.
mode
) {

585 
XFRM_MODE_TRANSPORT
:

586 
XFRM_MODE_TUNNEL
:

588 
XFRM_MODE_BEET
:

589 i‡(
ªq
.
xsöfo
.
id
.
¥Ÿo
 =
IPPROTO_ESP
)

592 
	`Ârötf
(
°dîr
, "MODE value is invalid with XFRM-PROTO value \"%s\"\n",

593 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

594 
	`exô
(1);

597 
ªq
.
xsöfo
.
id
.
¥Ÿo
) {

598 
IPPROTO_ESP
:

599 i‡(
ˇlg›
) {

600 
	`Ârötf
(
°dîr
, "ALGO-TYPE value \"%s\" is invalid with XFRM-PROTO value \"%s\"\n",

601 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_COMP
),

602 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

603 
	`exô
(1);

605 i‡(!
ólg›
 && !
´ad›
) {

606 
	`Ârötf
(
°dîr
, "ALGO-TYPE value \"%s\" or \"%s\" isÑequired with XFRM-PROTO value \"%s\"\n",

607 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_CRYPT
),

608 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AEAD
),

609 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

610 
	`exô
(1);

613 
IPPROTO_AH
:

614 i‡(
ólg›
 || 
´ad›
 || 
ˇlg›
) {

615 
	`Ârötf
(
°dîr
, "ALGO-TYPE values \"%s\", \"%s\",ánd \"%s\"áre invalid with XFRM-PROTO value \"%s\"\n",

616 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_CRYPT
),

617 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AEAD
),

618 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_COMP
),

619 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

620 
	`exô
(1);

622 i‡(!
Ølg›
) {

623 
	`Ârötf
(
°dîr
, "ALGO-TYPE value \"%s\" or \"%s\" isÑequired with XFRM-PROTO value \"%s\"\n",

624 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AUTH
),

625 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AUTH_TRUNC
),

626 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

627 
	`exô
(1);

630 
IPPROTO_COMP
:

631 i‡(
ólg›
 || 
Ølg›
 || 
´ad›
) {

632 
	`Ârötf
(
°dîr
, "ALGO-TYPE values \"%s\", \"%s\", \"%s\",ánd \"%s\"áre invalid with XFRM-PROTO value \"%s\"\n",

633 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_CRYPT
),

634 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AUTH
),

635 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AUTH_TRUNC
),

636 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_AEAD
),

637 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

638 
	`exô
(1);

640 i‡(!
ˇlg›
) {

641 
	`Ârötf
(
°dîr
, "ALGO-TYPE value \"%s\" isÑequired with XFRM-PROTO value \"%s\"\n",

642 
	`°rxf_ÆgŸy≥
(
XFRMA_ALG_COMP
),

643 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

644 
	`exô
(1);

649 i‡(
ólg›
 || 
Ølg›
 || 
´ad›
 || 
ˇlg›
) {

650 
	`Ârötf
(
°dîr
, "ALGO is invalid with XFRM-PROTO value \"%s\"\n",

651 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

652 
	`exô
(1);

656 i‡(
	`x‰m_x‰m¥Ÿo_is_ro
(
ªq
.
xsöfo
.
id
.
¥Ÿo
)) {

657 
ªq
.
xsöfo
.
mode
) {

658 
XFRM_MODE_ROUTEOPTIMIZATION
:

659 
XFRM_MODE_IN_TRIGGER
:

662 
	`Ârötf
(
°dîr
, "\"mode\" isÑequired with XFRM-PROTO value \"%s\"\n",

663 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

664 
	`exô
(1);

666 
	`Ârötf
(
°dîr
, "MODE value is invalid with XFRM-PROTO value \"%s\"\n",

667 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

668 
	`exô
(1);

671 i‡(!
cﬂp
) {

672 
	`Ârötf
(
°dîr
, "\"coa\" isÑequired with XFRM-PROTO value \"%s\"\n",

673 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

674 
	`exô
(1);

677 i‡(
cﬂp
) {

678 
	`Ârötf
(
°dîr
, "\"coa\" is invalid with XFRM-PROTO value \"%s\"\n",

679 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsöfo
.
id
.
¥Ÿo
));

680 
	`exô
(1);

684 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

685 
	`exô
(1);

687 i‡(
ªq
.
xsöfo
.
Ámûy
 =
AF_UNSPEC
)

688 
ªq
.
xsöfo
.
Ámûy
 = 
AF_INET
;

690 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

691 
	`exô
(2);

693 
	`π∆_˛o£
(&
πh
);

696 
	}
}

698 
	$x‰m_°©e_Æloc•i
(
¨gc
, **
¨gv
)

700 
π∆_h™dÀ
 
πh
;

702 
∆msghdr
 
n
;

703 
x‰m_u£r•i_öfo
 
x•i
;

704 
buf
[
RTA_BUF_SIZE
];

705 } 
ªq
;

706 *
idp
 = 
NULL
;

707 *
möp
 = 
NULL
;

708 *
maxp
 = 
NULL
;

709 
x‰m_m¨k
 
m¨k
 = {0, 0};

710 
ªs_buf
[
NLMSG_BUF_SIZE
];

711 
∆msghdr
 *
ªs_n
 = (∆msghd∏*)
ªs_buf
;

713 
	`mem£t
(
ªs_buf
, 0, (res_buf));

715 
	`mem£t
(&
ªq
, 0, (req));

717 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
(‘eq.
x•i
));

718 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

719 
ªq
.
n
.
∆msg_ty≥
 = 
XFRM_MSG_ALLOCSPI
;

720 
ªq
.
x•i
.
öfo
.
Ámûy
 = 
¥e„ºed_Ámûy
;

723 
ªq
.
xsöfo
.
l·
.
so·_byã_limô
 = 
XFRM_INF
;

724 
ªq
.
xsöfo
.
l·
.
h¨d_byã_limô
 = 
XFRM_INF
;

725 
ªq
.
xsöfo
.
l·
.
so·_∑ckë_limô
 = 
XFRM_INF
;

726 
ªq
.
xsöfo
.
l·
.
h¨d_∑ckë_limô
 = 
XFRM_INF
;

729 
¨gc
 > 0) {

730 i‡(
	`°rcmp
(*
¨gv
, "mode") == 0) {

731 
	`NEXT_ARG
();

732 
	`x‰m_mode_∑r£
(&
ªq
.
x•i
.
öfo
.
mode
, &
¨gc
, &
¨gv
);

733 } i‡(
	`°rcmp
(*
¨gv
, "mark") == 0) {

734 
	`x‰m_∑r£_m¨k
(&
m¨k
, &
¨gc
, &
¨gv
);

735 } i‡(
	`°rcmp
(*
¨gv
, "reqid") == 0) {

736 
	`NEXT_ARG
();

737 
	`x‰m_ªqid_∑r£
(&
ªq
.
x•i
.
öfo
.
ªqid
, &
¨gc
, &
¨gv
);

738 } i‡(
	`°rcmp
(*
¨gv
, "seq") == 0) {

739 
	`NEXT_ARG
();

740 
	`x‰m_£q_∑r£
(&
ªq
.
x•i
.
öfo
.
£q
, &
¨gc
, &
¨gv
);

741 } i‡(
	`°rcmp
(*
¨gv
, "min") == 0) {

742 i‡(
möp
)

743 
	`du∑rg
("mö", *
¨gv
);

744 
möp
 = *
¨gv
;

746 
	`NEXT_ARG
();

748 i‡(
	`gë_u32
(&
ªq
.
x•i
.
mö
, *
¨gv
, 0))

749 
	`öv¨g
("vÆuêa·î \"mö\" i†övÆid", *
¨gv
);

750 } i‡(
	`°rcmp
(*
¨gv
, "max") == 0) {

751 i‡(
maxp
)

752 
	`du∑rg
("max", *
¨gv
);

753 
maxp
 = *
¨gv
;

755 
	`NEXT_ARG
();

757 i‡(
	`gë_u32
(&
ªq
.
x•i
.
max
, *
¨gv
, 0))

758 
	`öv¨g
("vÆuêa·î \"max\" i†övÆid", *
¨gv
);

761 i‡(
idp
)

762 
	`öv¨g
("unknown", *
¨gv
);

763 
idp
 = *
¨gv
;

766 
	`x‰m_id_∑r£
(&
ªq
.
x•i
.
öfo
.
ßddr
, &ªq.x•i.öfo.
id
,

767 &
ªq
.
x•i
.
öfo
.
Ámûy
, 0, &
¨gc
, &
¨gv
);

768 i‡(
ªq
.
x•i
.
öfo
.
id
.
•i
) {

769 
	`Ârötf
(
°dîr
, "\"spi\" is invalid\n");

770 
	`exô
(1);

772 i‡(
¥e„ºed_Ámûy
 =
AF_UNSPEC
)

773 
¥e„ºed_Ámûy
 = 
ªq
.
x•i
.
öfo
.
Ámûy
;

775 
¨gc
--; 
¨gv
++;

778 i‡(!
idp
) {

779 
	`Ârötf
(
°dîr
, "NotÉnough information: ID isÑequired\n");

780 
	`exô
(1);

783 i‡(
möp
) {

784 i‡(!
maxp
) {

785 
	`Ârötf
(
°dîr
, "\"max\" is missing\n");

786 
	`exô
(1);

788 i‡(
ªq
.
x•i
.
mö
 >Ñeq.x•i.
max
) {

789 
	`Ârötf
(
°dîr
, "valueáfter \"min\" isÜargerÅhan valueáfter \"max\"\n");

790 
	`exô
(1);

793 i‡(
maxp
) {

794 
	`Ârötf
(
°dîr
, "\"min\" is missing\n");

795 
	`exô
(1);

801 
ªq
.
x•i
.
mö
 = 0x100;

802 
ªq
.
x•i
.
max
 = 0x0fffffff;

807 i‡(
ªq
.
x•i
.
öfo
.
id
.
¥Ÿo
 =
IPPROTO_COMP
)

808 
ªq
.
x•i
.
max
 = 0xffff;

811 i‡(
m¨k
.
m
 & m¨k.
v
) {

812 
r
 = 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_MARK
,

813 (*)&
m¨k
, (mark));

814 i‡(
r
 < 0) {

815 
	`Ârötf
(
°dîr
, "XFRMA_MARK failed\n");

816 
	`exô
(1);

820 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

821 
	`exô
(1);

823 i‡(
ªq
.
x•i
.
öfo
.
Ámûy
 =
AF_UNSPEC
)

824 
ªq
.
x•i
.
öfo
.
Ámûy
 = 
AF_INET
;

827 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
ªs_n
, (
ªs_buf
)) < 0)

828 
	`exô
(2);

830 i‡(
	`x‰m_°©e_¥öt
(
NULL
, 
ªs_n
, (*)
°dout
) < 0) {

831 
	`Ârötf
(
°dîr
, "AnÉrror :-)\n");

832 
	`exô
(1);

835 
	`π∆_˛o£
(&
πh
);

838 
	}
}

840 
	$x‰m_°©e_fûãr_m©ch
(
x‰m_u£rß_öfo
 *
xsöfo
)

842 i‡(!
fûãr
.
u£
)

845 i‡(
fûãr
.
id_§c_mask
)

846 i‡(
	`x‰m_addr_m©ch
(&
xsöfo
->
ßddr
, &
fûãr
.xsinfo.saddr,

847 
fûãr
.
id_§c_mask
))

849 i‡(
fûãr
.
id_d°_mask
)

850 i‡(
	`x‰m_addr_m©ch
(&
xsöfo
->
id
.
daddr
, &
fûãr
.xsinfo.id.daddr,

851 
fûãr
.
id_d°_mask
))

853 i‡((
xsöfo
->
id
.
¥Ÿo
^
fûãr
.xsöfo.id.¥Ÿo)&fûãr.
id_¥Ÿo_mask
)

855 i‡((
xsöfo
->
id
.
•i
^
fûãr
.xsöfo.id.•i)&fûãr.
id_•i_mask
)

857 i‡((
xsöfo
->
mode
^
fûãr
.xsöfo.mode)&fûãr.
mode_mask
)

859 i‡((
xsöfo
->
ªqid
^
fûãr
.xsöfo.ªqid)&fûãr.
ªqid_mask
)

861 i‡(
fûãr
.
°©e_Êags_mask
)

862 i‡((
xsöfo
->
Êags
 & 
fûãr
.xsinfo.flags) == 0)

866 
	}
}

868 
	$x‰m_°©e_¥öt
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
,

869 *
¨g
)

871 
FILE
 *
Â
 = (FILE*)
¨g
;

872 
π©å
 * 
tb
[
XFRMA_MAX
+1];

873 
π©å
 * 
πa
;

874 
x‰m_u£rß_öfo
 *
xsöfo
 = 
NULL
;

875 
x‰m_u£r_expúe
 *
xexp
 = 
NULL
;

876 
x‰m_u£rß_id
 *
xsid
 = 
NULL
;

877 
Àn
 = 
n
->
∆msg_Àn
;

879 i‡(
n
->
∆msg_ty≥
 !
XFRM_MSG_NEWSA
 &&

880 
n
->
∆msg_ty≥
 !
XFRM_MSG_DELSA
 &&

881 
n
->
∆msg_ty≥
 !
XFRM_MSG_UPDSA
 &&

882 
n
->
∆msg_ty≥
 !
XFRM_MSG_EXPIRE
) {

883 
	`Ârötf
(
°dîr
, "Notá state: %08x %08x %08x\n",

884 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

888 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_DELSA
) {

890 
xsid
 = 
	`NLMSG_DATA
(
n
);

891 
Àn
 -
	`NLMSG_SPACE
((*
xsid
));

892 } i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_EXPIRE
) {

893 
xexp
 = 
	`NLMSG_DATA
(
n
);

894 
xsöfo
 = &
xexp
->
°©e
;

895 
Àn
 -
	`NLMSG_SPACE
((*
xexp
));

897 
xexp
 = 
NULL
;

898 
xsöfo
 = 
	`NLMSG_DATA
(
n
);

899 
Àn
 -
	`NLMSG_SPACE
((*
xsöfo
));

902 i‡(
Àn
 < 0) {

903 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

907 i‡(
xsöfo
 && !
	`x‰m_°©e_fûãr_m©ch
(xsinfo))

910 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_DELSA
)

911 
	`Ârötf
(
Â
, "Deleted ");

912 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_UPDSA
)

913 
	`Ârötf
(
Â
, "Updated ");

914 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_EXPIRE
)

915 
	`Ârötf
(
Â
, "Expired ");

917 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_DELSA
)

918 
πa
 = 
	`XFRMSID_RTA
(
xsid
);

919 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_EXPIRE
)

920 
πa
 = 
	`XFRMEXP_RTA
(
xexp
);

922 
πa
 = 
	`XFRMS_RTA
(
xsöfo
);

924 
	`∑r£_π©å
(
tb
, 
XFRMA_MAX
, 
πa
, 
Àn
);

926 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_DELSA
) {

929 i‡(!
tb
[
XFRMA_SA
]) {

930 
	`Ârötf
(
°dîr
, "Buggy XFRM_MSG_DELSA:Ço XFRMA_SA\n");

933 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_SA
]Ë< (*
xsöfo
)) {

934 
	`Ârötf
(
°dîr
, "Buggy XFRM_MSG_DELPOLICY:Åoo short XFRMA_POLICYÜen\n");

937 
xsöfo
 = 
	`RTA_DATA
(
tb
[
XFRMA_SA
]);

940 
	`x‰m_°©e_öfo_¥öt
(
xsöfo
, 
tb
, 
Â
, 
NULL
, NULL);

942 i‡(
n
->
∆msg_ty≥
 =
XFRM_MSG_EXPIRE
) {

943 
	`Ârötf
(
Â
, "\t");

944 
	`Ârötf
(
Â
, "h¨d %u", 
xexp
->
h¨d
);

945 
	`Ârötf
(
Â
, "%s", 
_SL_
);

948 i‡(
⁄ñöe
)

949 
	`Ârötf
(
Â
, "\n");

950 
	`fÊush
(
Â
);

953 
	}
}

955 
	$x‰m_°©e_gë_‹_dñëe
(
¨gc
, **
¨gv
, 
dñëe
)

957 
π∆_h™dÀ
 
πh
;

959 
∆msghdr
 
n
;

960 
x‰m_u£rß_id
 
xsid
;

961 
buf
[
RTA_BUF_SIZE
];

962 } 
ªq
;

963 
x‰m_id
 
id
;

964 *
idp
 = 
NULL
;

965 
x‰m_m¨k
 
m¨k
 = {0, 0};

967 
	`mem£t
(&
ªq
, 0, (req));

969 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
(‘eq.
xsid
));

970 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

971 
ªq
.
n
.
∆msg_ty≥
 = 
dñëe
 ? 
XFRM_MSG_DELSA
 : 
XFRM_MSG_GETSA
;

972 
ªq
.
xsid
.
Ámûy
 = 
¥e„ºed_Ámûy
;

974 
¨gc
 > 0) {

975 
x‰m_addªss_t
 
ßddr
;

977 i‡(
	`°rcmp
(*
¨gv
, "mark") == 0) {

978 
	`x‰m_∑r£_m¨k
(&
m¨k
, &
¨gc
, &
¨gv
);

980 i‡(
idp
)

981 
	`öv¨g
("unknown", *
¨gv
);

982 
idp
 = *
¨gv
;

985 
	`mem£t
(&
id
, 0, (id));

986 
	`mem£t
(&
ßddr
, 0, (saddr));

987 
	`x‰m_id_∑r£
(&
ßddr
, &
id
, &
ªq
.
xsid
.
Ámûy
, 0,

988 &
¨gc
, &
¨gv
);

990 
	`mem˝y
(&
ªq
.
xsid
.
daddr
, &
id
.daddr, (req.xsid.daddr));

991 
ªq
.
xsid
.
•i
 = 
id
.spi;

992 
ªq
.
xsid
.
¥Ÿo
 = 
id
.proto;

994 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_SRCADDR
,

995 (*)&
ßddr
, (saddr));

998 
¨gc
--; 
¨gv
++;

1001 i‡(
m¨k
.
m
 & m¨k.
v
) {

1002 
r
 = 
	`add©å_l
(&
ªq
.
n
, ‘eq.
buf
), 
XFRMA_MARK
,

1003 (*)&
m¨k
, (mark));

1004 i‡(
r
 < 0) {

1005 
	`Ârötf
(
°dîr
, "XFRMA_MARK failed\n");

1006 
	`exô
(1);

1010 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

1011 
	`exô
(1);

1013 i‡(
ªq
.
xsid
.
Ámûy
 =
AF_UNSPEC
)

1014 
ªq
.
xsid
.
Ámûy
 = 
AF_INET
;

1016 i‡(
dñëe
) {

1017 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

1018 
	`exô
(2);

1020 
buf
[
NLMSG_BUF_SIZE
];

1021 
∆msghdr
 *
ªs_n
 = (∆msghd∏*)
buf
;

1023 
	`mem£t
(
buf
, 0, (buf));

1025 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
ªs_n
, (req)) < 0)

1026 
	`exô
(2);

1028 i‡(
	`x‰m_°©e_¥öt
(
NULL
, 
ªs_n
, (*)
°dout
) < 0) {

1029 
	`Ârötf
(
°dîr
, "AnÉrror :-)\n");

1030 
	`exô
(1);

1034 
	`π∆_˛o£
(&
πh
);

1037 
	}
}

1043 
	$x‰m_°©e_kìp
(c⁄° 
sockaddr_∆
 *
who
,

1044 
∆msghdr
 *
n
,

1045 *
¨g
)

1047 
x‰m_buf„r
 *
xb
 = (x‰m_buf„∏*)
¨g
;

1048 
π∆_h™dÀ
 *
πh
 = 
xb
->rth;

1049 
x‰m_u£rß_öfo
 *
xsöfo
 = 
	`NLMSG_DATA
(
n
);

1050 
Àn
 = 
n
->
∆msg_Àn
;

1051 
∆msghdr
 *
√w_n
;

1052 
x‰m_u£rß_id
 *
xsid
;

1054 i‡(
n
->
∆msg_ty≥
 !
XFRM_MSG_NEWSA
) {

1055 
	`Ârötf
(
°dîr
, "Notá state: %08x %08x %08x\n",

1056 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

1060 
Àn
 -
	`NLMSG_LENGTH
((*
xsöfo
));

1061 i‡(
Àn
 < 0) {

1062 
	`Ârötf
(
°dîr
, "BUG: wr⁄gÇlmsgÜí %d\n", 
Àn
);

1066 i‡(!
	`x‰m_°©e_fûãr_m©ch
(
xsöfo
))

1069 i‡(
xb
->
off£t
 > xb->
size
) {

1070 
	`Ârötf
(
°dîr
, "State buffer overflow\n");

1074 
√w_n
 = (
∆msghdr
 *)(
xb
->
buf
 + xb->
off£t
);

1075 
√w_n
->
∆msg_Àn
 = 
	`NLMSG_LENGTH
((*
xsid
));

1076 
√w_n
->
∆msg_Êags
 = 
NLM_F_REQUEST
;

1077 
√w_n
->
∆msg_ty≥
 = 
XFRM_MSG_DELSA
;

1078 
√w_n
->
∆msg_£q
 = ++
πh
->
£q
;

1080 
xsid
 = 
	`NLMSG_DATA
(
√w_n
);

1081 
xsid
->
Ámûy
 = 
xsöfo
->family;

1082 
	`mem˝y
(&
xsid
->
daddr
, &
xsöfo
->
id
.daddr, (xsid->daddr));

1083 
xsid
->
•i
 = 
xsöfo
->
id
.spi;

1084 
xsid
->
¥Ÿo
 = 
xsöfo
->
id
.proto;

1086 
	`add©å_l
(
√w_n
, 
xb
->
size
, 
XFRMA_SRCADDR
, &
xsöfo
->
ßddr
,

1087 (
xsid
->
daddr
));

1089 
xb
->
off£t
 +
√w_n
->
∆msg_Àn
;

1090 
xb
->
∆msg_cou¡
 ++;

1093 
	}
}

1095 
	$x‰m_°©e_li°_‹_dñëóŒ
(
¨gc
, **
¨gv
, 
dñëóŒ
)

1097 *
idp
 = 
NULL
;

1098 
π∆_h™dÀ
 
πh
;

1100 if(
¨gc
 > 0)

1101 
fûãr
.
u£
 = 1;

1102 
fûãr
.
xsöfo
.
Ámûy
 = 
¥e„ºed_Ámûy
;

1104 
¨gc
 > 0) {

1105 i‡(
	`°rcmp
(*
¨gv
, "mode") == 0) {

1106 
	`NEXT_ARG
();

1107 
	`x‰m_mode_∑r£
(&
fûãr
.
xsöfo
.
mode
, &
¨gc
, &
¨gv
);

1109 
fûãr
.
mode_mask
 = 
XFRM_FILTER_MASK_FULL
;

1111 } i‡(
	`°rcmp
(*
¨gv
, "reqid") == 0) {

1112 
	`NEXT_ARG
();

1113 
	`x‰m_ªqid_∑r£
(&
fûãr
.
xsöfo
.
ªqid
, &
¨gc
, &
¨gv
);

1115 
fûãr
.
ªqid_mask
 = 
XFRM_FILTER_MASK_FULL
;

1117 } i‡(
	`°rcmp
(*
¨gv
, "flag") == 0) {

1118 
	`NEXT_ARG
();

1119 
	`x‰m_°©e_Êag_∑r£
(&
fûãr
.
xsöfo
.
Êags
, &
¨gc
, &
¨gv
);

1121 
fûãr
.
°©e_Êags_mask
 = 
XFRM_FILTER_MASK_FULL
;

1124 i‡(
idp
)

1125 
	`öv¨g
("unknown", *
¨gv
);

1126 
idp
 = *
¨gv
;

1129 
	`x‰m_id_∑r£
(&
fûãr
.
xsöfo
.
ßddr
, &fûãr.xsöfo.
id
,

1130 &
fûãr
.
xsöfo
.
Ámûy
, 1, &
¨gc
, &
¨gv
);

1131 i‡(
¥e„ºed_Ámûy
 =
AF_UNSPEC
)

1132 
¥e„ºed_Ámûy
 = 
fûãr
.
xsöfo
.
Ámûy
;

1134 
¨gc
--; 
¨gv
++;

1137 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

1138 
	`exô
(1);

1140 i‡(
dñëóŒ
) {

1141 
x‰m_buf„r
 
xb
;

1142 
buf
[
NLMSG_DELETEALL_BUF_SIZE
];

1143 
i
;

1145 
xb
.
buf
 = buf;

1146 
xb
.
size
 = (
buf
);

1147 
xb
.
πh
 = &rth;

1149 
i
 = 0; ; i++) {

1151 
∆msghdr
 
n
;

1152 
buf
[
NLMSG_BUF_SIZE
];

1153 } 
ªq
 = {

1154 .
n
.
∆msg_Àn
 = 
NLMSG_HDRLEN
,

1155 .
n
.
∆msg_Êags
 = 
NLM_F_DUMP
 | 
NLM_F_REQUEST
,

1156 .
n
.
∆msg_ty≥
 = 
XFRM_MSG_GETSA
,

1157 .
n
.
∆msg_£q
 = 
πh
.
dump
 = ++πh.
£q
,

1160 
xb
.
off£t
 = 0;

1161 
xb
.
∆msg_cou¡
 = 0;

1163 i‡(
show_°©s
 > 1)

1164 
	`Ârötf
(
°dîr
, "Dñëe-Æ»round = %d\n", 
i
);

1166 i‡(
	`π∆_£nd
(&
πh
, (*)&
ªq
,Ñeq.
n
.
∆msg_Àn
) < 0) {

1167 
	`≥º‹
("Cannot send dumpÑequest");

1168 
	`exô
(1);

1171 i‡(
	`π∆_dump_fûãr
(&
πh
, 
x‰m_°©e_kìp
, &
xb
) < 0) {

1172 
	`Ârötf
(
°dîr
, "Delete-allÅerminated\n");

1173 
	`exô
(1);

1175 i‡(
xb
.
∆msg_cou¡
 == 0) {

1176 i‡(
show_°©s
 > 1)

1177 
	`Ârötf
(
°dîr
, "Delete-all completed\n");

1181 i‡(
	`π∆_£nd_check
(&
πh
, 
xb
.
buf
, xb.
off£t
) < 0) {

1182 
	`≥º‹
("FailedÅo send delete-allÑequest\n");

1183 
	`exô
(1);

1185 i‡(
show_°©s
 > 1)

1186 
	`Ârötf
(
°dîr
, "Dñëe-Æ»∆msg cou¡ = %d\n", 
xb
.
∆msg_cou¡
);

1188 
xb
.
off£t
 = 0;

1189 
xb
.
∆msg_cou¡
 = 0;

1193 
x‰m_addªss_fûãr
 
addrfûãr
 = {

1194 .
ßddr
 = 
fûãr
.
xsöfo
.saddr,

1195 .
daddr
 = 
fûãr
.
xsöfo
.
id
.daddr,

1196 .
Ámûy
 = 
fûãr
.
xsöfo
.family,

1197 .
•Àn
 = 
fûãr
.
id_§c_mask
,

1198 .
d∂í
 = 
fûãr
.
id_d°_mask
,

1201 
∆msghdr
 
n
;

1202 
buf
[
NLMSG_BUF_SIZE
];

1203 } 
ªq
 = {

1204 .
n
.
∆msg_Àn
 = 
NLMSG_HDRLEN
,

1205 .
n
.
∆msg_Êags
 = 
NLM_F_DUMP
 | 
NLM_F_REQUEST
,

1206 .
n
.
∆msg_ty≥
 = 
XFRM_MSG_GETSA
,

1207 .
n
.
∆msg_£q
 = 
πh
.
dump
 = ++πh.
£q
,

1210 i‡(
fûãr
.
xsöfo
.
id
.
¥Ÿo
)

1211 
	`add©å8
(&
ªq
.
n
, ‘eq), 
XFRMA_PROTO
,

1212 
fûãr
.
xsöfo
.
id
.
¥Ÿo
);

1213 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
XFRMA_ADDRESS_FILTER
,

1214 &
addrfûãr
, (addrfilter));

1216 i‡(
	`π∆_£nd
(&
πh
, (*)&
ªq
,Ñeq.
n
.
∆msg_Àn
) < 0) {

1217 
	`≥º‹
("Cannot send dumpÑequest");

1218 
	`exô
(1);

1221 i‡(
	`π∆_dump_fûãr
(&
πh
, 
x‰m_°©e_¥öt
, 
°dout
) < 0) {

1222 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

1223 
	`exô
(1);

1227 
	`π∆_˛o£
(&
πh
);

1229 
	`exô
(0);

1230 
	}
}

1232 
	$¥öt_ßdöfo
(
∆msghdr
 *
n
, *
¨g
)

1234 
FILE
 *
Â
 = (FILE*)
¨g
;

1235 
__u32
 *
f
 = 
	`NLMSG_DATA
(
n
);

1236 
π©å
 *
tb
[
XFRMA_SAD_MAX
+1];

1237 
π©å
 *
πa
;

1238 
__u32
 *
˙t
;

1240 
Àn
 = 
n
->
∆msg_Àn
;

1242 
Àn
 -
	`NLMSG_LENGTH
((
__u32
));

1243 i‡(
Àn
 < 0) {

1244 
	`Ârötf
(
°dîr
, "SADöfo: Wr⁄gÜí %d\n", 
Àn
);

1248 
πa
 = 
	`XFRMSAPD_RTA
(
f
);

1249 
	`∑r£_π©å
(
tb
, 
XFRMA_SAD_MAX
, 
πa
, 
Àn
);

1251 i‡(
tb
[
XFRMA_SAD_CNT
]) {

1252 
	`Ârötf
(
Â
,"\t SAD");

1253 
˙t
 = (
__u32
 *)
	`RTA_DATA
(
tb
[
XFRMA_SAD_CNT
]);

1254 
	`Ârötf
(
Â
," cou¡ %d", *
˙t
);

1256 
	`Ârötf
(
Â
,"BAD SAD infoÑeturned\n");

1260 i‡(
show_°©s
) {

1261 i‡(
tb
[
XFRMA_SAD_HINFO
]) {

1262 
x‰mu_ßdhöfo
 *
si
;

1264 i‡(
	`RTA_PAYLOAD
(
tb
[
XFRMA_SAD_HINFO
]Ë< (*
si
)) {

1265 
	`Ârötf
(
Â
,"BAD SADÜengthÑeturned\n");

1269 
si
 = 
	`RTA_DATA
(
tb
[
XFRMA_SAD_HINFO
]);

1270 
	`Ârötf
(
Â
," (buckets ");

1271 
	`Ârötf
(
Â
,"cou¡ %d", 
si
->
ßdh˙t
);

1272 
	`Ârötf
(
Â
," Max %d", 
si
->
ßdhm˙t
);

1273 
	`Ârötf
(
Â
,")");

1276 
	`Ârötf
(
Â
,"\n");

1279 
	}
}

1281 
	$x‰m_ßd_gëöfo
(
¨gc
, **
¨gv
)

1283 
π∆_h™dÀ
 
πh
;

1285 
∆msghdr
 
n
;

1286 
__u32
 
Êags
;

1287 
™s
[64];

1288 } 
ªq
;

1290 
	`mem£t
(&
ªq
, 0, (req));

1291 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
(‘eq.
Êags
));

1292 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

1293 
ªq
.
n
.
∆msg_ty≥
 = 
XFRM_MSG_GETSADINFO
;

1294 
ªq
.
Êags
 = 0XFFFFFFFF;

1296 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

1297 
	`exô
(1);

1299 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, &req.n, (req)) < 0)

1300 
	`exô
(2);

1302 
	`¥öt_ßdöfo
(&
ªq
.
n
, (*)
°dout
);

1304 
	`π∆_˛o£
(&
πh
);

1307 
	}
}

1309 
	$x‰m_°©e_Êush
(
¨gc
, **
¨gv
)

1311 
π∆_h™dÀ
 
πh
;

1313 
∆msghdr
 
n
;

1314 
x‰m_u£rß_Êush
 
xsf
;

1315 } 
ªq
;

1316 *
¥Ÿ›
 = 
NULL
;

1318 
	`mem£t
(&
ªq
, 0, (req));

1320 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
(‘eq.
xsf
));

1321 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

1322 
ªq
.
n
.
∆msg_ty≥
 = 
XFRM_MSG_FLUSHSA
;

1323 
ªq
.
xsf
.
¥Ÿo
 = 0;

1325 
¨gc
 > 0) {

1326 i‡(
	`°rcmp
(*
¨gv
, "proto") == 0) {

1327 
ªt
;

1329 i‡(
¥Ÿ›
)

1330 
	`du∑rg
("¥Ÿo", *
¨gv
);

1331 
¥Ÿ›
 = *
¨gv
;

1333 
	`NEXT_ARG
();

1335 
ªt
 = 
	`x‰m_x‰m¥Ÿo_gëby«me
(*
¨gv
);

1336 i‡(
ªt
 < 0)

1337 
	`öv¨g
("XFRM-PROTO vÆuêi†övÆid", *
¨gv
);

1339 
ªq
.
xsf
.
¥Ÿo
 = (
__u8
)
ªt
;

1341 
	`öv¨g
("unknown", *
¨gv
);

1343 
¨gc
--; 
¨gv
++;

1346 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_XFRM
) < 0)

1347 
	`exô
(1);

1349 i‡(
show_°©s
 > 1)

1350 
	`Ârötf
(
°dîr
, "Flush state with XFRM-PROTO value \"%s\"\n",

1351 
	`°rxf_x‰m¥Ÿo
(
ªq
.
xsf
.
¥Ÿo
));

1353 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

1354 
	`exô
(2);

1356 
	`π∆_˛o£
(&
πh
);

1359 
	}
}

1361 
	$do_x‰m_°©e
(
¨gc
, **
¨gv
)

1363 i‡(
¨gc
 < 1)

1364  
	`x‰m_°©e_li°_‹_dñëóŒ
(0, 
NULL
, 0);

1366 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

1367  
	`x‰m_°©e_modify
(
XFRM_MSG_NEWSA
, 0,

1368 
¨gc
-1, 
¨gv
+1);

1369 i‡(
	`m©ches
(*
¨gv
, "update") == 0)

1370  
	`x‰m_°©e_modify
(
XFRM_MSG_UPDSA
, 0,

1371 
¨gc
-1, 
¨gv
+1);

1372 i‡(
	`m©ches
(*
¨gv
, "allocspi") == 0)

1373  
	`x‰m_°©e_Æloc•i
(
¨gc
-1, 
¨gv
+1);

1374 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

1375  
	`x‰m_°©e_gë_‹_dñëe
(
¨gc
-1, 
¨gv
+1, 1);

1376 i‡(
	`m©ches
(*
¨gv
, "deleteall") == 0 || matches(*argv, "delall") == 0)

1377  
	`x‰m_°©e_li°_‹_dñëóŒ
(
¨gc
-1, 
¨gv
+1, 1);

1378 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

1379 || 
	`m©ches
(*
¨gv
, "lst") == 0)

1380  
	`x‰m_°©e_li°_‹_dñëóŒ
(
¨gc
-1, 
¨gv
+1, 0);

1381 i‡(
	`m©ches
(*
¨gv
, "get") == 0)

1382  
	`x‰m_°©e_gë_‹_dñëe
(
¨gc
-1, 
¨gv
+1, 0);

1383 i‡(
	`m©ches
(*
¨gv
, "flush") == 0)

1384  
	`x‰m_°©e_Êush
(
¨gc
-1, 
¨gv
+1);

1385 i‡(
	`m©ches
(*
¨gv
, "count") == 0) {

1386  
	`x‰m_ßd_gëöfo
(
¨gc
, 
¨gv
);

1388 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

1389 
	`ußge
();

1390 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"ù x‰m sèã hñp\".\n", *
¨gv
);

1391 
	`exô
(-1);

1392 
	}
}

	@lib/color.c

1 
	~<°dio.h
>

2 
	~<°d¨g.h
>

4 
	~"cﬁ‹.h
"

6 
	ecﬁ‹
 {

7 
	mC_RED
,

8 
	mC_GREEN
,

9 
	mC_YELLOW
,

10 
	mC_BLUE
,

11 
	mC_MAGENTA
,

12 
	mC_CYAN
,

13 
	mC_WHITE
,

14 
	mC_CLEAR


17 c⁄° * c⁄° 
	gcﬁ‹_codes
[] = {

26 
NULL
,

29 
cﬁ‹
 
	g©å_cﬁ‹s
[] = {

30 
C_CYAN
,

31 
C_YELLOW
,

32 
C_MAGENTA
,

33 
C_BLUE
,

34 
C_GREEN
,

35 
C_RED


38 
	gcﬁ‹_is_íabÀd
;

40 
	$íabÀ_cﬁ‹
()

42 
cﬁ‹_is_íabÀd
 = 1;

43 
	}
}

45 
	$cﬁ‹_Ârötf
(
FILE
 *
Â
, 
cﬁ‹_©å
 
©å
, c⁄° *
fmt
, ...)

47 
ªt
 = 0;

48 
va_li°
 
¨gs
;

50 
	`va_°¨t
(
¨gs
, 
fmt
);

52 i‡(!
cﬁ‹_is_íabÀd
) {

53 
ªt
 = 
	`vÂrötf
(
Â
, 
fmt
, 
¨gs
);

54 
íd
;

57 
ªt
 +
	`Ârötf
(
Â
, "%s", 
cﬁ‹_codes
[
©å_cﬁ‹s
[
©å
]]);

58 
ªt
 +
	`vÂrötf
(
Â
, 
fmt
, 
¨gs
);

59 
ªt
 +
	`Ârötf
(
Â
, "%s", 
cﬁ‹_codes
[
C_CLEAR
]);

61 
íd
:

62 
	`va_íd
(
¨gs
);

63  
ªt
;

64 
	}
}

	@lib/dnet_ntop.c

1 
	~<î∫o.h
>

2 
	~<°rög.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<√töë/ö.h
>

6 
	~"utûs.h
"

8 
__ölöe__
 
u_öt16_t
 
	$dn_¡ohs
(
u_öt16_t
 
addr
)

11 
u_öt8_t
 
byã
[2];

12 
u_öt16_t
 
w‹d
;

13 } 
u
;

15 
u
.
w‹d
 = 
addr
;

16  ((
u_öt16_t
)
u
.
byã
[0]) | (((u_int16_t)u.byte[1]) << 8);

17 
	}
}

19 
__ölöe__
 
	$do_digô
(*
°r
, 
u_öt16_t
 *
addr
, u_öt16_à
sˇÀ
, 
size_t
 *
pos
, size_à
Àn
, *
°¨ãd
)

21 
u_öt16_t
 
tmp
 = *
addr
 / 
sˇÀ
;

23 i‡(*
pos
 =
Àn
)

26 i‡(((
tmp
Ë> 0Ë|| *
°¨ãd
 || (
sˇÀ
 == 1)) {

27 *
°r
 = 
tmp
 + '0';

28 *
°¨ãd
 = 1;

29 (*
pos
)++;

30 *
addr
 -(
tmp
 * 
sˇÀ
);

34 
	}
}

37 c⁄° *
	$d√t_¡›1
(c⁄° 
dn_«ddr
 *
d«
, *
°r
, 
size_t
 
Àn
)

39 
u_öt16_t
 
addr
, 
¨ó
;

40 
size_t
 
pos
 = 0;

41 
°¨ãd
 = 0;

43 
	`mem˝y
(&
addr
, 
d«
->
a_addr
, (addr));

44 
addr
 = 
	`dn_¡ohs
(addr);

45 
¨ó
 = 
addr
 >> 10;

47 i‡(
d«
->
a_Àn
 != 2)

48  
NULL
;

50 
addr
 &= 0x03ff;

52 i‡(
Àn
 == 0)

53  
°r
;

55 i‡(
	`do_digô
(
°r
 + 
pos
, &
¨ó
, 10, &pos, 
Àn
, &
°¨ãd
))

56  
°r
;

58 i‡(
	`do_digô
(
°r
 + 
pos
, &
¨ó
, 1, &pos, 
Àn
, &
°¨ãd
))

59  
°r
;

61 i‡(
pos
 =
Àn
)

62  
°r
;

64 *(
°r
 + 
pos
) = '.';

65 
pos
++;

66 
°¨ãd
 = 0;

68 i‡(
	`do_digô
(
°r
 + 
pos
, &
addr
, 1000, &pos, 
Àn
, &
°¨ãd
))

69  
°r
;

71 i‡(
	`do_digô
(
°r
 + 
pos
, &
addr
, 100, &pos, 
Àn
, &
°¨ãd
))

72  
°r
;

74 i‡(
	`do_digô
(
°r
 + 
pos
, &
addr
, 10, &pos, 
Àn
, &
°¨ãd
))

75  
°r
;

77 i‡(
	`do_digô
(
°r
 + 
pos
, &
addr
, 1, &pos, 
Àn
, &
°¨ãd
))

78  
°r
;

80 i‡(
pos
 =
Àn
)

81  
°r
;

83 *(
°r
 + 
pos
) = 0;

85  
°r
;

86 
	}
}

89 c⁄° *
	$d√t_¡›
(
af
, c⁄° *
addr
, *
°r
, 
size_t
 
Àn
)

91 
af
) {

92 
AF_DEC√t
:

93 
î∫o
 = 0;

94  
	`d√t_¡›1
((
dn_«ddr
 *)
addr
, 
°r
, 
Àn
);

96 
î∫o
 = 
EAFNOSUPPORT
;

99  
NULL
;

100 
	}
}

	@lib/dnet_pton.c

1 
	~<î∫o.h
>

2 
	~<°rög.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<√töë/ö.h
>

6 
	~"utûs.h
"

8 
__ölöe__
 
u_öt16_t
 
	$dn_ht⁄s
(
u_öt16_t
 
addr
)

11 
u_öt8_t
 
byã
[2];

12 
u_öt16_t
 
w‹d
;

13 } 
u
;

15 
u
.
w‹d
 = 
addr
;

16  ((
u_öt16_t
)
u
.
byã
[0]) | (((u_int16_t)u.byte[1]) << 8);

17 
	}
}

20 
	$d√t_num
(c⁄° *
§c
, 
u_öt16_t
 * 
d°
)

22 
rv
 = 0;

23 
tmp
;

24 *
d°
 = 0;

26 (
tmp
 = *
§c
++) != 0) {

27 
tmp
 -= '0';

28 i‡((
tmp
 < 0) || (tmp > 9))

29  
rv
;

31 
rv
++;

32 (*
d°
) *= 10;

33 (*
d°
Ë+
tmp
;

36  
rv
;

37 
	}
}

39 
	$d√t_±⁄1
(c⁄° *
§c
, 
dn_«ddr
 *
d«
)

41 
u_öt16_t
 
addr
;

42 
u_öt16_t
 
¨ó
 = 0;

43 
u_öt16_t
 
node
 = 0;

44 
pos
;

46 
pos
 = 
	`d√t_num
(
§c
, &
¨ó
);

47 i‡((
pos
 =0Ë|| (
¨ó
 > 63Ë|| (*(
§c
 +Öos) != '.'))

49 
pos
 = 
	`d√t_num
(
§c
 +Öo†+ 1, &
node
);

50 i‡((
pos
 =0Ë|| (
node
 > 1023))

52 
d«
->
a_Àn
 = 2;

53 
addr
 = 
	`dn_ht⁄s
((
¨ó
 << 10Ë| 
node
);

54 
	`mem˝y
(
d«
->
a_addr
, &
addr
, (addr));

57 
	}
}

59 
	$d√t_±⁄
(
af
, c⁄° *
§c
, *
addr
)

61 
îr
;

63 
af
) {

64 
AF_DEC√t
:

65 
î∫o
 = 0;

66 
îr
 = 
	`d√t_±⁄1
(
§c
, (
dn_«ddr
 *)
addr
);

69 
î∫o
 = 
EAFNOSUPPORT
;

70 
îr
 = -1;

73  
îr
;

74 
	}
}

	@lib/inet_proto.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<√tdb.h
>

21 
	~<°rög.h
>

23 
	~"π_«mes.h
"

24 
	~"utûs.h
"

26 c⁄° *
	$öë_¥Ÿo_n2a
(
¥Ÿo
, *
buf
, 
Àn
)

28 
nˇche
[16];

29 
iˇche
 = -1;

30 
¥Ÿ€¡
 *
≥
;

32 i‡(
¥Ÿo
 =
iˇche
)

33  
nˇche
;

35 
≥
 = 
	`gë¥Ÿobynumbî
(
¥Ÿo
);

36 i‡(
≥
) {

37 
iˇche
 = 
¥Ÿo
;

38 
	`°∫˝y
(
nˇche
, 
≥
->
p_«me
, 16);

39 
	`°∫˝y
(
buf
, 
≥
->
p_«me
, 
Àn
);

40  
buf
;

42 
	`¢¥ötf
(
buf
, 
Àn
, "ù¥Ÿo-%d", 
¥Ÿo
);

43  
buf
;

44 
	}
}

46 
	$öë_¥Ÿo_a2n
(c⁄° *
buf
)

48 
nˇche
[16];

49 
iˇche
 = -1;

50 
¥Ÿ€¡
 *
≥
;

52 i‡(
iˇche
>=0 && 
	`°rcmp
(
nˇche
, 
buf
) == 0)

53  
iˇche
;

55 i‡(
buf
[0] >= '0' && buf[0] <= '9') {

56 
__u8
 
ªt
;

57 i‡(
	`gë_u8
(&
ªt
, 
buf
, 10))

59  
ªt
;

62 
≥
 = 
	`gë¥Ÿoby«me
(
buf
);

63 i‡(
≥
) {

64 
iˇche
 = 
≥
->
p_¥Ÿo
;

65 
	`°∫˝y
(
nˇche
, 
≥
->
p_«me
, 16);

66  
≥
->
p_¥Ÿo
;

69 
	}
}

	@lib/ipx_ntop.c

1 
	~<î∫o.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/sockë.h
>

4 
	~<√töë/ö.h
>

6 
	~"utûs.h
"

8 
__ölöe__
 
	$do_digô
(*
°r
, 
u_öt32_t
 
addr
, u_öt32_à
sˇÀ
, 
size_t
 *
pos
, size_à
Àn
)

10 
u_öt32_t
 
tmp
 = 
addr
 >> (
sˇÀ
 * 4);

12 i‡(*
pos
 =
Àn
)

15 
tmp
 &= 0x0f;

16 i‡(
tmp
 > 9)

17 *
°r
 = 
tmp
 + 'A' - 10;

19 *
°r
 = 
tmp
 + '0';

20 (*
pos
)++;

23 
	}
}

25 c⁄° *
	$ùx_¡›1
(c⁄° 
ùx_addr
 *
addr
, *
°r
, 
size_t
 
Àn
)

27 
i
;

28 
size_t
 
pos
 = 0;

30 i‡(
Àn
 == 0)

31  
°r
;

33 
i
 = 7; i >= 0; i--)

34 i‡(
	`do_digô
(
°r
 + 
pos
, 
	`¡ohl
(
addr
->
ùx_√t
), 
i
, &pos, 
Àn
))

35  
°r
;

37 i‡(
pos
 =
Àn
)

38  
°r
;

40 *(
°r
 + 
pos
) = '.';

41 
pos
++;

43 
i
 = 0; i < 6; i++) {

44 i‡(
	`do_digô
(
°r
 + 
pos
, 
addr
->
ùx_node
[
i
], 1, &pos, 
Àn
))

45  
°r
;

46 i‡(
	`do_digô
(
°r
 + 
pos
, 
addr
->
ùx_node
[
i
], 0, &pos, 
Àn
))

47  
°r
;

50 i‡(
pos
 =
Àn
)

51  
°r
;

53 *(
°r
 + 
pos
) = 0;

55  
°r
;

56 
	}
}

59 c⁄° *
	$ùx_¡›
(
af
, c⁄° *
addr
, *
°r
, 
size_t
 
Àn
)

61 
af
) {

62 
AF_IPX
:

63 
î∫o
 = 0;

64  
	`ùx_¡›1
((
ùx_addr
 *)
addr
, 
°r
, 
Àn
);

66 
î∫o
 = 
EAFNOSUPPORT
;

69  
NULL
;

70 
	}
}

	@lib/ipx_pton.c

1 
	~<î∫o.h
>

2 
	~<°rög.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<sys/sockë.h
>

5 
	~<√töë/ö.h
>

7 
	~"utûs.h
"

9 
u_öt32_t
 
	$hexgë
(
c
)

11 i‡(
c
 >= 'A' && c <= 'F')

12  
c
 - 'A' + 10;

13 i‡(
c
 >= 'a' && c <= 'f')

14  
c
 - 'a' + 10;

15 i‡(
c
 >= '0' && c <= '9')

16  
c
 - '0';

19 
	}
}

21 
	$ùx_gë√t
(
u_öt32_t
 *
√t
, c⁄° *
°r
)

23 
i
;

24 
u_öt32_t
 
tmp
;

26 
i
 = 0; *
°r
 && (i < 8); i++) {

28 i‡((
tmp
 = 
	`hexgë
(*
°r
)) & 0xf0) {

29 i‡(*
°r
 == '.')

35 
°r
++;

36 (*
√t
) <<= 4;

37 (*
√t
Ë|
tmp
;

40 i‡(*
°r
 == 0)

44 
	}
}

46 
	$ùx_gënode
(
u_öt8_t
 *
node
, c⁄° *
°r
)

48 
i
;

49 
u_öt32_t
 
tmp
;

51 
i
 = 0; i < 6; i++) {

52 i‡((
tmp
 = 
	`hexgë
(*
°r
++)) & 0xf0)

54 
node
[
i
] = (
u_öt8_t
)
tmp
;

55 
node
[
i
] <<= 4;

56 i‡((
tmp
 = 
	`hexgë
(*
°r
++)) & 0xf0)

58 
node
[
i
] |(
u_öt8_t
)
tmp
;

59 i‡(*
°r
 == ':')

60 
°r
++;

64 
	}
}

66 
	$ùx_±⁄1
(c⁄° *
§c
, 
ùx_addr
 *
addr
)

68 *
£p
 = (*)
§c
;

69 
no_node
 = 0;

71 
	`mem£t
(
addr
, 0, (
ùx_addr
));

73 *
£p
 && (*sep != '.'))

74 
£p
++;

76 i‡(*
£p
 != '.')

77 
no_node
 = 1;

79 i‡(
	`ùx_gë√t
(&
addr
->
ùx_√t
, 
§c
))

82 
addr
->
ùx_√t
 = 
	`ht⁄l
(addr->ipx_net);

84 i‡(
no_node
)

87 i‡(
	`ùx_gënode
(
addr
->
ùx_node
, 
£p
 + 1))

91 
	}
}

93 
	$ùx_±⁄
(
af
, c⁄° *
§c
, *
addr
)

95 
îr
;

97 
af
) {

98 
AF_IPX
:

99 
î∫o
 = 0;

100 
îr
 = 
	`ùx_±⁄1
(
§c
, (
ùx_addr
 *)
addr
);

103 
î∫o
 = 
EAFNOSUPPORT
;

104 
îr
 = -1;

107  
îr
;

108 
	}
}

	@lib/json_writer.c

15 
	~<°dio.h
>

16 
	~<°dboﬁ.h
>

17 
	~<°d¨g.h
>

18 
	~<as£π.h
>

19 
	~<mÆloc.h
>

20 
	~<öây≥s.h
>

21 
	~<°döt.h
>

23 
	~"js⁄_wrôî.h
"

25 
	sjs⁄_wrôî
 {

26 
FILE
 *
	mout
;

27 
	mdïth
;

28 
boﬁ
 
	m¥ëty
;

29 
	m£p
;

33 
	$js⁄w_ödít
(
js⁄_wrôî_t
 *
£lf
)

35 
i
;

36 
i
 = 0; i <
£lf
->
dïth
; ++i)

37 
	`Âuts
(" ", 
£lf
->
out
);

38 
	}
}

41 
	$js⁄w_eﬁ
(
js⁄_wrôî_t
 *
£lf
)

43 i‡(!
£lf
->
¥ëty
)

46 
	`putc
('\n', 
£lf
->
out
);

47 
	`js⁄w_ödít
(
£lf
);

48 
	}
}

51 
	$js⁄w_e‹
(
js⁄_wrôî_t
 *
£lf
)

53 i‡(
£lf
->
£p
 != '\0')

54 
	`putc
(
£lf
->
£p
, sñf->
out
);

55 
£lf
->
£p
 = ',';

56 
	}
}

61 
	$js⁄w_puts
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
°r
)

63 
	`putc
('"', 
£lf
->
out
);

64 ; *
°r
; ++str)

65 *
°r
) {

67 
	`Âuts
("\\t", 
£lf
->
out
);

70 
	`Âuts
("\\n", 
£lf
->
out
);

73 
	`Âuts
("\\r", 
£lf
->
out
);

76 
	`Âuts
("\\f", 
£lf
->
out
);

79 
	`Âuts
("\\b", 
£lf
->
out
);

82 
	`Âuts
("\\n", 
£lf
->
out
);

85 
	`Âuts
("\\\"", 
£lf
->
out
);

88 
	`Âuts
("\\\'", 
£lf
->
out
);

91 
	`putc
(*
°r
, 
£lf
->
out
);

93 
	`putc
('"', 
£lf
->
out
);

94 
	}
}

97 
js⁄_wrôî_t
 *
	$js⁄w_√w
(
FILE
 *
f
)

99 
js⁄_wrôî_t
 *
£lf
 = 
	`mÆloc
((*self));

100 i‡(
£lf
) {

101 
£lf
->
out
 = 
f
;

102 
£lf
->
dïth
 = 0;

103 
£lf
->
¥ëty
 = 
Ál£
;

104 
£lf
->
£p
 = '\0';

105 
	`putc
('{', 
£lf
->
out
);

107  
£lf
;

108 
	}
}

111 
	$js⁄w_de°roy
(
js⁄_wrôî_t
 **
£lf_p
)

113 
js⁄_wrôî_t
 *
£lf
 = *
£lf_p
;

115 
	`as£π
(
£lf
->
dïth
 == 0);

116 
	`js⁄w_eﬁ
(
£lf
);

117 
	`Âuts
("}\n", 
£lf
->
out
);

118 
	`fÊush
(
£lf
->
out
);

119 
	`‰ì
(
£lf
);

120 *
£lf_p
 = 
NULL
;

121 
	}
}

123 
	$js⁄w_¥ëty
(
js⁄_wrôî_t
 *
£lf
, 
boﬁ
 
⁄
)

125 
£lf
->
¥ëty
 = 
⁄
;

126 
	}
}

129 
	$js⁄w_begö
(
js⁄_wrôî_t
 *
£lf
, 
c
)

131 
	`js⁄w_e‹
(
£lf
);

132 
	`putc
(
c
, 
£lf
->
out
);

133 ++
£lf
->
dïth
;

134 
£lf
->
£p
 = '\0';

135 
	}
}

137 
	$js⁄w_íd
(
js⁄_wrôî_t
 *
£lf
, 
c
)

139 
	`as£π
(
£lf
->
dïth
 > 0);

141 --
£lf
->
dïth
;

142 i‡(
£lf
->
£p
 != '\0')

143 
	`js⁄w_eﬁ
(
£lf
);

144 
	`putc
(
c
, 
£lf
->
out
);

145 
£lf
->
£p
 = ',';

146 
	}
}

150 
	$js⁄w_«me
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
«me
)

152 
	`js⁄w_e‹
(
£lf
);

153 
	`js⁄w_eﬁ
(
£lf
);

154 
£lf
->
£p
 = '\0';

155 
	`js⁄w_puts
(
£lf
, 
«me
);

156 
	`putc
(':', 
£lf
->
out
);

157 i‡(
£lf
->
¥ëty
)

158 
	`putc
(' ', 
£lf
->
out
);

159 
	}
}

161 
	$js⁄w_¥ötf
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
fmt
, ...)

163 
va_li°
 
≠
;

165 
	`va_°¨t
(
≠
, 
fmt
);

166 
	`js⁄w_e‹
(
£lf
);

167 
	`vÂrötf
(
£lf
->
out
, 
fmt
, 
≠
);

168 
	`va_íd
(
≠
);

169 
	}
}

172 
	$js⁄w_°¨t_obje˘
(
js⁄_wrôî_t
 *
£lf
)

174 
	`js⁄w_begö
(
£lf
, '{');

175 
	}
}

177 
	$js⁄w_íd_obje˘
(
js⁄_wrôî_t
 *
£lf
)

179 
	`js⁄w_íd
(
£lf
, '}');

180 
	}
}

182 
	$js⁄w_°¨t_¨øy
(
js⁄_wrôî_t
 *
£lf
)

184 
	`js⁄w_begö
(
£lf
, '[');

185 
	}
}

187 
	$js⁄w_íd_¨øy
(
js⁄_wrôî_t
 *
£lf
)

189 
	`js⁄w_íd
(
£lf
, ']');

190 
	}
}

193 
	$js⁄w_°rög
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
vÆue
)

195 
	`js⁄w_e‹
(
£lf
);

196 
	`js⁄w_puts
(
£lf
, 
vÆue
);

197 
	}
}

199 
	$js⁄w_boﬁ
(
js⁄_wrôî_t
 *
£lf
, 
boﬁ
 
vÆ
)

201 
	`js⁄w_¥ötf
(
£lf
, "%s", 
vÆ
 ? "true" : "false");

202 
	}
}

204 #ifde‡
nŸu£d


205 
	$js⁄w_nuŒ
(
js⁄_wrôî_t
 *
£lf
)

207 
	`js⁄w_¥ötf
(
£lf
, "null");

208 
	}
}

210 
	$js⁄w_Êﬂt
(
js⁄_wrôî_t
 *
£lf
, 
num
)

212 
	`js⁄w_¥ötf
(
£lf
, "%g", 
num
);

213 
	}
}

216 
	$js⁄w_uöt
(
js⁄_wrôî_t
 *
£lf
, 
uöt64_t
 
num
)

218 
	`js⁄w_¥ötf
(
£lf
, "%"
PRIu64
, 
num
);

219 
	}
}

221 
	$js⁄w_öt
(
js⁄_wrôî_t
 *
£lf
, 
öt64_t
 
num
)

223 
	`js⁄w_¥ötf
(
£lf
, "%"
PRId64
, 
num
);

224 
	}
}

227 
	$js⁄w_°rög_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
, c⁄° *
vÆ
)

229 
	`js⁄w_«me
(
£lf
, 
¥›
);

230 
	`js⁄w_°rög
(
£lf
, 
vÆ
);

231 
	}
}

233 
	$js⁄w_boﬁ_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
, 
boﬁ
 
vÆ
)

235 
	`js⁄w_«me
(
£lf
, 
¥›
);

236 
	`js⁄w_boﬁ
(
£lf
, 
vÆ
);

237 
	}
}

239 #ifde‡
nŸu£d


240 
	$js⁄w_Êﬂt_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
, 
vÆ
)

242 
	`js⁄w_«me
(
£lf
, 
¥›
);

243 
	`js⁄w_Êﬂt
(
£lf
, 
vÆ
);

244 
	}
}

247 
	$js⁄w_uöt_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
, 
uöt64_t
 
num
)

249 
	`js⁄w_«me
(
£lf
, 
¥›
);

250 
	`js⁄w_uöt
(
£lf
, 
num
);

251 
	}
}

253 
	$js⁄w_öt_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
, 
öt64_t
 
num
)

255 
	`js⁄w_«me
(
£lf
, 
¥›
);

256 
	`js⁄w_öt
(
£lf
, 
num
);

257 
	}
}

259 #ifde‡
nŸu£d


260 
	$js⁄w_nuŒ_fõld
(
js⁄_wrôî_t
 *
£lf
, c⁄° *
¥›
)

262 
	`js⁄w_«me
(
£lf
, 
¥›
);

263 
	`js⁄w_nuŒ
(
£lf
);

264 
	}
}

267 #ifde‡
TEST


268 
	$maö
(
¨gc
, **
¨gv
)

270 
js⁄_wrôî_t
 *
wr
 = 
	`js⁄w_√w
(
°dout
);

272 
	`js⁄w_¥ëty
(
wr
, 
åue
);

273 
	`js⁄w_«me
(
wr
, "Vyatta");

274 
	`js⁄w_°¨t_obje˘
(
wr
);

275 
	`js⁄w_°rög_fõld
(
wr
, "url", "http://vyatta.com");

276 
	`js⁄w_uöt_fõld
(
wr
, "downloads", 2000000ul);

277 
	`js⁄w_Êﬂt_fõld
(
wr
, "stock", 8.16);

279 
	`js⁄w_«me
(
wr
, "ARGV");

280 
	`js⁄w_°¨t_¨øy
(
wr
);

281 --
¨gc
)

282 
	`js⁄w_°rög
(
wr
, *++
¨gv
);

283 
	`js⁄w_íd_¨øy
(
wr
);

285 
	`js⁄w_«me
(
wr
, "empty");

286 
	`js⁄w_°¨t_¨øy
(
wr
);

287 
	`js⁄w_íd_¨øy
(
wr
);

289 
	`js⁄w_«me
(
wr
, "NIL");

290 
	`js⁄w_°¨t_obje˘
(
wr
);

291 
	`js⁄w_íd_obje˘
(
wr
);

293 
	`js⁄w_nuŒ_fõld
(
wr
, "my_null");

295 
	`js⁄w_«me
(
wr
, "special chars");

296 
	`js⁄w_°¨t_¨øy
(
wr
);

297 
	`js⁄w_°rög_fõld
(
wr
, "slash", "/");

298 
	`js⁄w_°rög_fõld
(
wr
, "newline", "\n");

299 
	`js⁄w_°rög_fõld
(
wr
, "tab", "\t");

300 
	`js⁄w_°rög_fõld
(
wr
, "ff", "\f");

301 
	`js⁄w_°rög_fõld
(
wr
, "quote", "\"");

302 
	`js⁄w_°rög_fõld
(
wr
, "tick", "\'");

303 
	`js⁄w_°rög_fõld
(
wr
, "backslash", "\\");

304 
	`js⁄w_íd_¨øy
(
wr
);

306 
	`js⁄w_íd_obje˘
(
wr
);

308 
	`js⁄w_de°roy
(&
wr
);

310 
	}
}

	@lib/libgenl.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<uni°d.h
>

9 
	~<löux/gíëlök.h
>

10 
	~"libgíl.h
"

12 
	$gíl_∑r£_gëÁmûy
(
∆msghdr
 *
∆h
)

14 
π©å
 *
tb
[
CTRL_ATTR_MAX
 + 1];

15 
gílmsghdr
 *
ghdr
 = 
	`NLMSG_DATA
(
∆h
);

16 
Àn
 = 
∆h
->
∆msg_Àn
;

17 
π©å
 *
©ås
;

19 i‡(
∆h
->
∆msg_ty≥
 !
GENL_ID_CTRL
) {

20 
	`Ârötf
(
°dîr
, "Notá controller message,Çlmsg_len=%d "

21 "∆msg_ty≥=0x%x\n", 
∆h
->
∆msg_Àn
,Çlh->
∆msg_ty≥
);

25 
Àn
 -
	`NLMSG_LENGTH
(
GENL_HDRLEN
);

27 i‡(
Àn
 < 0) {

28 
	`Ârötf
(
°dîr
, "wr⁄g c⁄åﬁÀ∏mesßgêÀ¿%d\n", 
Àn
);

32 i‡(
ghdr
->
cmd
 !
CTRL_CMD_NEWFAMILY
) {

33 
	`Ârötf
(
°dîr
, "Unknow¿c⁄åﬁÀ∏comm™d %d\n", 
ghdr
->
cmd
);

37 
©ås
 = (
π©å
 *Ë((*Ë
ghdr
 + 
GENL_HDRLEN
);

38 
	`∑r£_π©å
(
tb
, 
CTRL_ATTR_MAX
, 
©ås
, 
Àn
);

40 i‡(
tb
[
CTRL_ATTR_FAMILY_ID
] =
NULL
) {

41 
	`Ârötf
(
°dîr
, "Missing family id TLV\n");

45  
	`πa_gë©å_u16
(
tb
[
CTRL_ATTR_FAMILY_ID
]);

46 
	}
}

48 
	$gíl_ªsﬁve_Ámûy
(
π∆_h™dÀ
 *
gπh
, c⁄° *
Ámûy
)

50 
	`GENL_REQUEST
(
ªq
, 1024, 
GENL_ID_CTRL
, 0, 0, 
CTRL_CMD_GETFAMILY
,

51 
NLM_F_REQUEST
);

53 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
CTRL_ATTR_FAMILY_NAME
,

54 
Ámûy
, 
	`°æí
(family) + 1);

56 i‡(
	`π∆_èlk
(
gπh
, &
ªq
.
n
, &req.n, (req)) < 0) {

57 
	`Ârötf
(
°dîr
, "ErrorÅalkingÅoÅhe kernel\n");

61  
	`gíl_∑r£_gëÁmûy
(&
ªq
.
n
);

62 
	}
}

	@lib/libnetlink.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<√t/if_¨p.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<°rög.h
>

22 
	~<î∫o.h
>

23 
	~<time.h
>

24 
	~<sys/uio.h
>

26 
	~"lib√éök.h
"

28 #i‚de‡
SOL_NETLINK


29 
	#SOL_NETLINK
 270

	)

32 #i‚de‡
MIN


33 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

36 
	grcvbuf
 = 1024 * 1024;

38 
	$π∆_˛o£
(
π∆_h™dÀ
 *
πh
)

40 i‡(
πh
->
fd
 >= 0) {

41 
	`˛o£
(
πh
->
fd
);

42 
πh
->
fd
 = -1;

44 
	}
}

46 
	$π∆_›í_by¥Ÿo
(
π∆_h™dÀ
 *
πh
, 
subs¸ùti⁄s
,

47 
¥Ÿocﬁ
)

49 
sockÀn_t
 
addr_Àn
;

50 
¢dbuf
 = 32768;

52 
	`mem£t
(
πh
, 0, (*rth));

54 
πh
->
¥Ÿo
 = 
¥Ÿocﬁ
;

55 
πh
->
fd
 = 
	`sockë
(
AF_NETLINK
, 
SOCK_RAW
 | 
SOCK_CLOEXEC
, 
¥Ÿocﬁ
);

56 i‡(
πh
->
fd
 < 0) {

57 
	`≥º‹
("Cannot openÇetlink socket");

61 i‡(
	`£tsock›t
(
πh
->
fd
,
SOL_SOCKET
,
SO_SNDBUF
,&
¢dbuf
,(sndbuf)) < 0) {

62 
	`≥º‹
("SO_SNDBUF");

66 i‡(
	`£tsock›t
(
πh
->
fd
,
SOL_SOCKET
,
SO_RCVBUF
,&
rcvbuf
,(rcvbuf)) < 0) {

67 
	`≥º‹
("SO_RCVBUF");

71 
	`mem£t
(&
πh
->
loˇl
, 0, (rth->local));

72 
πh
->
loˇl
.
∆_Ámûy
 = 
AF_NETLINK
;

73 
πh
->
loˇl
.
∆_groups
 = 
subs¸ùti⁄s
;

75 i‡(
	`böd
(
πh
->
fd
, (
sockaddr
*)&πh->
loˇl
, (rth->local)) < 0) {

76 
	`≥º‹
("Cannot bindÇetlink socket");

79 
addr_Àn
 = (
πh
->
loˇl
);

80 i‡(
	`gësock«me
(
πh
->
fd
, (
sockaddr
*)&πh->
loˇl
, &
addr_Àn
) < 0) {

81 
	`≥º‹
("Cannot getsockname");

84 i‡(
addr_Àn
 !(
πh
->
loˇl
)) {

85 
	`Ârötf
(
°dîr
, "Wr⁄gáddªs†Àngth %d\n", 
addr_Àn
);

88 i‡(
πh
->
loˇl
.
∆_Ámûy
 !
AF_NETLINK
) {

89 
	`Ârötf
(
°dîr
, "Wr⁄gáddªs†Ámûy %d\n", 
πh
->
loˇl
.
∆_Ámûy
);

92 
πh
->
£q
 = 
	`time
(
NULL
);

94 
	}
}

96 
	$π∆_›í
(
π∆_h™dÀ
 *
πh
, 
subs¸ùti⁄s
)

98  
	`π∆_›í_by¥Ÿo
(
πh
, 
subs¸ùti⁄s
, 
NETLINK_ROUTE
);

99 
	}
}

101 
	$π∆_wûddump_ªque°
(
π∆_h™dÀ
 *
πh
, 
Ámûy
, 
ty≥
)

103  
	`π∆_wûddump_ªq_fûãr
(
πh
, 
Ámûy
, 
ty≥
, 
RTEXT_FILTER_VF
);

104 
	}
}

106 
	$π∆_wûddump_ªq_fûãr
(
π∆_h™dÀ
 *
πh
, 
Ámûy
, 
ty≥
,

107 
__u32
 
fût_mask
)

110 
∆msghdr
 
∆h
;

111 
iföfomsg
 
ifm
;

113 
π©å
 
ext_ªq
 
	`__©åibuã__
 ((
	`Æig√d
(
NLMSG_ALIGNTO
)));

114 
__u32
 
ext_fûãr_mask
;

115 } 
ªq
;

117 
	`mem£t
(&
ªq
, 0, (req));

118 
ªq
.
∆h
.
∆msg_Àn
 = (req);

119 
ªq
.
∆h
.
∆msg_ty≥
 = 
ty≥
;

120 
ªq
.
∆h
.
∆msg_Êags
 = 
NLM_F_DUMP
|
NLM_F_REQUEST
;

121 
ªq
.
∆h
.
∆msg_pid
 = 0;

122 
ªq
.
∆h
.
∆msg_£q
 = 
πh
->
dump
 = ++πh->
£q
;

123 
ªq
.
ifm
.
ifi_Ámûy
 = 
Ámûy
;

125 
ªq
.
ext_ªq
.
πa_ty≥
 = 
IFLA_EXT_MASK
;

126 
ªq
.
ext_ªq
.
πa_Àn
 = 
	`RTA_LENGTH
((
__u32
));

127 
ªq
.
ext_fûãr_mask
 = 
fût_mask
;

129  
	`£nd
(
πh
->
fd
, (*)&
ªq
, (req), 0);

130 
	}
}

132 
	$π∆_£nd
(
π∆_h™dÀ
 *
πh
, c⁄° *
buf
, 
Àn
)

134  
	`£nd
(
πh
->
fd
, 
buf
, 
Àn
, 0);

135 
	}
}

137 
	$π∆_£nd_check
(
π∆_h™dÀ
 *
πh
, c⁄° *
buf
, 
Àn
)

139 
∆msghdr
 *
h
;

140 
°©us
;

141 
ª•
[1024];

143 
°©us
 = 
	`£nd
(
πh
->
fd
, 
buf
, 
Àn
, 0);

144 i‡(
°©us
 < 0)

145  
°©us
;

148 
°©us
 = 
	`ªcv
(
πh
->
fd
, 
ª•
, ‘e•), 
MSG_DONTWAIT
|
MSG_PEEK
);

149 i‡(
°©us
 < 0) {

150 i‡(
î∫o
 =
EAGAIN
)

155 
h
 = (
∆msghdr
 *)
ª•
; 
	`NLMSG_OK
(h, 
°©us
);

156 
h
 = 
	`NLMSG_NEXT
(h, 
°©us
)) {

157 i‡(
h
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

158 
∆msgîr
 *
îr
 = (∆msgîr*)
	`NLMSG_DATA
(
h
);

159 i‡(
h
->
∆msg_Àn
 < 
	`NLMSG_LENGTH
((
∆msgîr
)))

160 
	`Ârötf
(
°dîr
, "ERRORÅruncated\n");

162 
î∫o
 = -
îr
->
îr‹
;

168 
	}
}

170 
	$π∆_dump_ªque°
(
π∆_h™dÀ
 *
πh
, 
ty≥
, *
ªq
, 
Àn
)

172 
∆msghdr
 
∆h
;

173 
sockaddr_∆
 
∆addr
 = { .
∆_Ámûy
 = 
AF_NETLINK
 };

174 
iovec
 
iov
[2] = {

175 { .
iov_ba£
 = &
∆h
, .
iov_Àn
 = (nlh) },

176 { .
iov_ba£
 = 
ªq
, .
iov_Àn
 = 
Àn
 }

178 
msghdr
 
msg
 = {

179 .
msg_«me
 = &
∆addr
,

180 .
msg_«mñí
 = (
∆addr
),

181 .
msg_iov
 = 
iov
,

182 .
msg_iovÀn
 = 2,

185 
∆h
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
(
Àn
);

186 
∆h
.
∆msg_ty≥
 = 
ty≥
;

187 
∆h
.
∆msg_Êags
 = 
NLM_F_DUMP
|
NLM_F_REQUEST
;

188 
∆h
.
∆msg_pid
 = 0;

189 
∆h
.
∆msg_£q
 = 
πh
->
dump
 = ++πh->
£q
;

191  
	`£ndmsg
(
πh
->
fd
, &
msg
, 0);

192 
	}
}

194 
	$π∆_dump_fûãr_l
(
π∆_h™dÀ
 *
πh
,

195 c⁄° 
π∆_dump_fûãr_¨g
 *
¨g
)

197 
sockaddr_∆
 
∆addr
;

198 
iovec
 
iov
;

199 
msghdr
 
msg
 = {

200 .
msg_«me
 = &
∆addr
,

201 .
msg_«mñí
 = (
∆addr
),

202 .
msg_iov
 = &
iov
,

203 .
msg_iovÀn
 = 1,

205 
buf
[16384];

206 
dump_öå
 = 0;

208 
iov
.
iov_ba£
 = 
buf
;

210 
°©us
;

211 c⁄° 
π∆_dump_fûãr_¨g
 *
a
;

212 
found_d⁄e
 = 0;

213 
msgÀn
 = 0;

215 
iov
.
iov_Àn
 = (
buf
);

216 
°©us
 = 
	`ªcvmsg
(
πh
->
fd
, &
msg
, 0);

218 i‡(
°©us
 < 0) {

219 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)

221 
	`Ârötf
(
°dîr
, "netlinkÑeceiveÉrror %s (%d)\n",

222 
	`°ªº‹
(
î∫o
),Érrno);

226 i‡(
°©us
 == 0) {

227 
	`Ârötf
(
°dîr
, "EOF onÇetlink\n");

231 i‡(
πh
->
dump_Â
)

232 
	`fwrôe
(
buf
, 1, 
	`NLMSG_ALIGN
(
°©us
), 
πh
->
dump_Â
);

234 
a
 = 
¨g
;á->
fûãr
;á++) {

235 
∆msghdr
 *
h
 = (∆msghdr*)
buf
;

236 
msgÀn
 = 
°©us
;

238 
	`NLMSG_OK
(
h
, 
msgÀn
)) {

239 
îr
 = 0;

241 i‡(
∆addr
.
∆_pid
 != 0 ||

242 
h
->
∆msg_pid
 !
πh
->
loˇl
.
∆_pid
 ||

243 
h
->
∆msg_£q
 !
πh
->
dump
)

244 
skù_ô
;

246 i‡(
h
->
∆msg_Êags
 & 
NLM_F_DUMP_INTR
)

247 
dump_öå
 = 1;

249 i‡(
h
->
∆msg_ty≥
 =
NLMSG_DONE
) {

250 
found_d⁄e
 = 1;

253 i‡(
h
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

254 
∆msgîr
 *
îr
 = (∆msgîr*)
	`NLMSG_DATA
(
h
);

255 i‡(
h
->
∆msg_Àn
 < 
	`NLMSG_LENGTH
((
∆msgîr
))) {

256 
	`Ârötf
(
°dîr
,

259 
î∫o
 = -
îr
->
îr‹
;

260 i‡(
πh
->
¥Ÿo
 =
NETLINK_SOCK_DIAG
 &&

261 (
î∫o
 =
ENOENT
 ||

262 
î∫o
 =
EOPNOTSUPP
))

265 
	`≥º‹
("RTNETLINKánswers");

270 i‡(!
πh
->
dump_Â
) {

271 
îr
 = 
a
->
	`fûãr
(&
∆addr
, 
h
,á->
¨g1
);

272 i‡(
îr
 < 0)

273  
îr
;

276 
skù_ô
:

277 
h
 = 
	`NLMSG_NEXT
(h, 
msgÀn
);

281 i‡(
found_d⁄e
) {

282 i‡(
dump_öå
)

283 
	`Ârötf
(
°dîr
,

288 i‡(
msg
.
msg_Êags
 & 
MSG_TRUNC
) {

289 
	`Ârötf
(
°dîr
, "MessageÅruncated\n");

292 i‡(
msgÀn
) {

293 
	`Ârötf
(
°dîr
, "!!!Rem«¡ o‡sizê%d\n", 
msgÀn
);

294 
	`exô
(1);

297 
	}
}

299 
	$π∆_dump_fûãr
(
π∆_h™dÀ
 *
πh
,

300 
π∆_fûãr_t
 
fûãr
,

301 *
¨g1
)

303 c⁄° 
π∆_dump_fûãr_¨g
 
a
[2] = {

304 { .
fûãr
 = fûãr, .
¨g1
 =árg1, },

305 { .
fûãr
 = 
NULL
, .
¨g1
 = NULL, },

308  
	`π∆_dump_fûãr_l
(
πh
, 
a
);

309 
	}
}

311 
	$π∆_èlk
(
π∆_h™dÀ
 *
π∆
, 
∆msghdr
 *
n
,

312 
∆msghdr
 *
™swî
, 
size_t
 
Àn
)

314 
°©us
;

315 
£q
;

316 
∆msghdr
 *
h
;

317 
sockaddr_∆
 
∆addr
;

318 
iovec
 
iov
 = {

319 .
iov_ba£
 = (*Ë
n
,

320 .
iov_Àn
 = 
n
->
∆msg_Àn


322 
msghdr
 
msg
 = {

323 .
msg_«me
 = &
∆addr
,

324 .
msg_«mñí
 = (
∆addr
),

325 .
msg_iov
 = &
iov
,

326 .
msg_iovÀn
 = 1,

328 
buf
[32768];

330 
	`mem£t
(&
∆addr
, 0, (nladdr));

331 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

333 
n
->
∆msg_£q
 = 
£q
 = ++
π∆
->seq;

335 i‡(
™swî
 =
NULL
)

336 
n
->
∆msg_Êags
 |
NLM_F_ACK
;

338 
°©us
 = 
	`£ndmsg
(
π∆
->
fd
, &
msg
, 0);

339 i‡(
°©us
 < 0) {

340 
	`≥º‹
("CannotÅalkÅoÑtnetlink");

344 
	`mem£t
(
buf
,0,(buf));

346 
iov
.
iov_ba£
 = 
buf
;

348 
iov
.
iov_Àn
 = (
buf
);

349 
°©us
 = 
	`ªcvmsg
(
π∆
->
fd
, &
msg
, 0);

351 i‡(
°©us
 < 0) {

352 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)

354 
	`Ârötf
(
°dîr
, "netlinkÑeceiveÉrror %s (%d)\n",

355 
	`°ªº‹
(
î∫o
),Érrno);

358 i‡(
°©us
 == 0) {

359 
	`Ârötf
(
°dîr
, "EOF onÇetlink\n");

362 i‡(
msg
.
msg_«mñí
 !(
∆addr
)) {

363 
	`Ârötf
(
°dîr
, "£ndîáddªs†Àngth =%d\n", 
msg
.
msg_«mñí
);

364 
	`exô
(1);

366 
h
 = (
∆msghdr
*)
buf
; 
°©us
 >= (*h); ) {

367 
Àn
 = 
h
->
∆msg_Àn
;

368 
l
 = 
Àn
 - (*
h
);

370 i‡(
l
 < 0 || 
Àn
>
°©us
) {

371 i‡(
msg
.
msg_Êags
 & 
MSG_TRUNC
) {

372 
	`Ârötf
(
°dîr
, "Truncated message\n");

375 
	`Ârötf
(
°dîr
, "!!!mÆf‹med mesßge:Üí=%d\n", 
Àn
);

376 
	`exô
(1);

379 i‡(
∆addr
.
∆_pid
 != 0 ||

380 
h
->
∆msg_pid
 !
π∆
->
loˇl
.
∆_pid
 ||

381 
h
->
∆msg_£q
 !
£q
) {

383 
°©us
 -
	`NLMSG_ALIGN
(
Àn
);

384 
h
 = (
∆msghdr
*)((*)h + 
	`NLMSG_ALIGN
(
Àn
));

388 i‡(
h
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

389 
∆msgîr
 *
îr
 = (∆msgîr*)
	`NLMSG_DATA
(
h
);

390 i‡(
l
 < (
∆msgîr
)) {

391 
	`Ârötf
(
°dîr
, "ERRORÅruncated\n");

392 } i‡(!
îr
->
îr‹
) {

393 i‡(
™swî
)

394 
	`mem˝y
(
™swî
, 
h
,

395 
	`MIN
(
Àn
, 
h
->
∆msg_Àn
));

399 
	`Ârötf
(
°dîr
, "RTNETLINKánswers: %s\n",

400 
	`°ªº‹
(-
îr
->
îr‹
));

401 
î∫o
 = -
îr
->
îr‹
;

405 i‡(
™swî
) {

406 
	`mem˝y
(
™swî
, 
h
,

407 
	`MIN
(
Àn
, 
h
->
∆msg_Àn
));

411 
	`Ârötf
(
°dîr
, "UnexpectedÑeply!!!\n");

413 
°©us
 -
	`NLMSG_ALIGN
(
Àn
);

414 
h
 = (
∆msghdr
*)((*)h + 
	`NLMSG_ALIGN
(
Àn
));

417 i‡(
msg
.
msg_Êags
 & 
MSG_TRUNC
) {

418 
	`Ârötf
(
°dîr
, "MessageÅruncated\n");

422 i‡(
°©us
) {

423 
	`Ârötf
(
°dîr
, "!!!Rem«¡ o‡sizê%d\n", 
°©us
);

424 
	`exô
(1);

427 
	}
}

429 
	$π∆_li°í_Æl_nsid
(
π∆_h™dÀ
 *
πh
)

431 
⁄
 = 1;

433 i‡(
	`£tsock›t
(
πh
->
fd
, 
SOL_NETLINK
, 
NETLINK_LISTEN_ALL_NSID
, &
⁄
,

434 (
⁄
)) < 0) {

435 
	`≥º‹
("NETLINK_LISTEN_ALL_NSID");

438 
πh
->
Êags
 |
RTNL_HANDLE_F_LISTEN_ALL_NSID
;

440 
	}
}

442 
	$π∆_li°í
(
π∆_h™dÀ
 *
π∆
,

443 
π∆_li°í_fûãr_t
 
h™dÀr
,

444 *
j¨g
)

446 
°©us
;

447 
∆msghdr
 *
h
;

448 
sockaddr_∆
 
∆addr
;

449 
iovec
 
iov
;

450 
msghdr
 
msg
 = {

451 .
msg_«me
 = &
∆addr
,

452 .
msg_«mñí
 = (
∆addr
),

453 .
msg_iov
 = &
iov
,

454 .
msg_iovÀn
 = 1,

456 
buf
[16384];

457 
cmsgbuf
[
BUFSIZ
];

459 i‡(
π∆
->
Êags
 & 
RTNL_HANDLE_F_LISTEN_ALL_NSID
) {

460 
msg
.
msg_c⁄åﬁ
 = &
cmsgbuf
;

461 
msg
.
msg_c⁄åﬁÀn
 = (
cmsgbuf
);

464 
	`mem£t
(&
∆addr
, 0, (nladdr));

465 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

466 
∆addr
.
∆_pid
 = 0;

467 
∆addr
.
∆_groups
 = 0;

469 
iov
.
iov_ba£
 = 
buf
;

471 
π∆_˘æ_d©a
 
˘æ
;

472 
cmsghdr
 *
cmsg
;

474 
iov
.
iov_Àn
 = (
buf
);

475 
°©us
 = 
	`ªcvmsg
(
π∆
->
fd
, &
msg
, 0);

477 i‡(
°©us
 < 0) {

478 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)

480 
	`Ârötf
(
°dîr
, "netlinkÑeceiveÉrror %s (%d)\n",

481 
	`°ªº‹
(
î∫o
),Érrno);

482 i‡(
î∫o
 =
ENOBUFS
)

486 i‡(
°©us
 == 0) {

487 
	`Ârötf
(
°dîr
, "EOF onÇetlink\n");

490 i‡(
msg
.
msg_«mñí
 !(
∆addr
)) {

491 
	`Ârötf
(
°dîr
, "Sídîáddªs†Àngth =%d\n", 
msg
.
msg_«mñí
);

492 
	`exô
(1);

495 i‡(
π∆
->
Êags
 & 
RTNL_HANDLE_F_LISTEN_ALL_NSID
) {

496 
	`mem£t
(&
˘æ
, 0, (ctrl));

497 
˘æ
.
nsid
 = -1;

498 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
); cmsg;

499 
cmsg
 = 
	`CMSG_NXTHDR
(&
msg
, cmsg))

500 i‡(
cmsg
->
cmsg_Àvñ
 =
SOL_NETLINK
 &&

501 
cmsg
->
cmsg_ty≥
 =
NETLINK_LISTEN_ALL_NSID
 &&

502 
cmsg
->
cmsg_Àn
 =
	`CMSG_LEN
(())) {

503 *
d©a
 = (*)
	`CMSG_DATA
(
cmsg
);

505 
˘æ
.
nsid
 = *
d©a
;

509 
h
 = (
∆msghdr
*)
buf
; 
°©us
 >= (*h); ) {

510 
îr
;

511 
Àn
 = 
h
->
∆msg_Àn
;

512 
l
 = 
Àn
 - (*
h
);

514 i‡(
l
<0 || 
Àn
>
°©us
) {

515 i‡(
msg
.
msg_Êags
 & 
MSG_TRUNC
) {

516 
	`Ârötf
(
°dîr
, "Truncated message\n");

519 
	`Ârötf
(
°dîr
, "!!!mÆf‹med mesßge:Üí=%d\n", 
Àn
);

520 
	`exô
(1);

523 
îr
 = 
	`h™dÀr
(&
∆addr
, &
˘æ
, 
h
, 
j¨g
);

524 i‡(
îr
 < 0)

525  
îr
;

527 
°©us
 -
	`NLMSG_ALIGN
(
Àn
);

528 
h
 = (
∆msghdr
*)((*)h + 
	`NLMSG_ALIGN
(
Àn
));

530 i‡(
msg
.
msg_Êags
 & 
MSG_TRUNC
) {

531 
	`Ârötf
(
°dîr
, "MessageÅruncated\n");

534 i‡(
°©us
) {

535 
	`Ârötf
(
°dîr
, "!!!Rem«¡ o‡sizê%d\n", 
°©us
);

536 
	`exô
(1);

539 
	}
}

541 
	$π∆_‰om_fûe
(
FILE
 *
π∆
, 
π∆_li°í_fûãr_t
 
h™dÀr
,

542 *
j¨g
)

544 
°©us
;

545 
sockaddr_∆
 
∆addr
;

546 
buf
[16384];

547 
∆msghdr
 *
h
 = (*)
buf
;

549 
	`mem£t
(&
∆addr
, 0, (nladdr));

550 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

551 
∆addr
.
∆_pid
 = 0;

552 
∆addr
.
∆_groups
 = 0;

555 
îr
, 
Àn
;

556 
l
;

558 
°©us
 = 
	`‰ód
(&
buf
, 1, (*
h
), 
π∆
);

560 i‡(
°©us
 < 0) {

561 i‡(
î∫o
 =
EINTR
)

563 
	`≥º‹
("rtnl_from_file: fread");

566 i‡(
°©us
 == 0)

569 
Àn
 = 
h
->
∆msg_Àn
;

570 
l
 = 
Àn
 - (*
h
);

572 i‡(
l
<0 || 
Àn
>(
buf
)) {

573 
	`Ârötf
(
°dîr
, "!!!malformed message:Üen=%d @%lu\n",

574 
Àn
, 
	`·ñl
(
π∆
));

578 
°©us
 = 
	`‰ód
(
	`NLMSG_DATA
(
h
), 1, 
	`NLMSG_ALIGN
(
l
), 
π∆
);

580 i‡(
°©us
 < 0) {

581 
	`≥º‹
("rtnl_from_file: fread");

584 i‡(
°©us
 < 
l
) {

585 
	`Ârötf
(
°dîr
, "rtnl-from_file:Åruncated message\n");

589 
îr
 = 
	`h™dÀr
(&
∆addr
, 
NULL
, 
h
, 
j¨g
);

590 i‡(
îr
 < 0)

591  
îr
;

593 
	}
}

595 
	$add©å
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
)

597  
	`add©å_l
(
n
, 
maxÀn
, 
ty≥
, 
NULL
, 0);

598 
	}
}

600 
	$add©å8
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
, 
__u8
 
d©a
)

602  
	`add©å_l
(
n
, 
maxÀn
, 
ty≥
, &
d©a
, (
__u8
));

603 
	}
}

605 
	$add©å16
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
, 
__u16
 
d©a
)

607  
	`add©å_l
(
n
, 
maxÀn
, 
ty≥
, &
d©a
, (
__u16
));

608 
	}
}

610 
	$add©å32
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
, 
__u32
 
d©a
)

612  
	`add©å_l
(
n
, 
maxÀn
, 
ty≥
, &
d©a
, (
__u32
));

613 
	}
}

615 
	$add©å64
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
, 
__u64
 
d©a
)

617  
	`add©å_l
(
n
, 
maxÀn
, 
ty≥
, &
d©a
, (
__u64
));

618 
	}
}

620 
	$add©å°rz
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
, c⁄° *
°r
)

622  
	`add©å_l
(
n
, 
maxÀn
, 
ty≥
, 
°r
, 
	`°æí
(str)+1);

623 
	}
}

625 
	$add©å_l
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
, c⁄° *
d©a
,

626 
Æí
)

628 
Àn
 = 
	`RTA_LENGTH
(
Æí
);

629 
π©å
 *
πa
;

631 i‡(
	`NLMSG_ALIGN
(
n
->
∆msg_Àn
Ë+ 
	`RTA_ALIGN
(
Àn
Ë> 
maxÀn
) {

632 
	`Ârötf
(
°dîr
, "add©å_»ERROR: mesßgêex˚eded bound o‡%d\n",
maxÀn
);

635 
πa
 = 
	`NLMSG_TAIL
(
n
);

636 
πa
->
πa_ty≥
 = 
ty≥
;

637 
πa
->
πa_Àn
 = 
Àn
;

638 
	`mem˝y
(
	`RTA_DATA
(
πa
), 
d©a
, 
Æí
);

639 
n
->
∆msg_Àn
 = 
	`NLMSG_ALIGN
“->∆msg_ÀnË+ 
	`RTA_ALIGN
(
Àn
);

641 
	}
}

643 
	$addøw_l
(
∆msghdr
 *
n
, 
maxÀn
, c⁄° *
d©a
, 
Àn
)

645 i‡(
	`NLMSG_ALIGN
(
n
->
∆msg_Àn
Ë+ NLMSG_ALIGN(
Àn
Ë> 
maxÀn
) {

646 
	`Ârötf
(
°dîr
, "addøw_»ERROR: mesßgêex˚eded bound o‡%d\n",
maxÀn
);

650 
	`mem˝y
(
	`NLMSG_TAIL
(
n
), 
d©a
, 
Àn
);

651 
	`mem£t
((*Ë
	`NLMSG_TAIL
(
n
Ë+ 
Àn
, 0, 
	`NLMSG_ALIGN
(len) -Üen);

652 
n
->
∆msg_Àn
 = 
	`NLMSG_ALIGN
“->∆msg_ÀnË+ NLMSG_ALIGN(
Àn
);

654 
	}
}

656 
π©å
 *
	$add©å_√°
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
)

658 
π©å
 *
√°
 = 
	`NLMSG_TAIL
(
n
);

660 
	`add©å_l
(
n
, 
maxÀn
, 
ty≥
, 
NULL
, 0);

661  
√°
;

662 
	}
}

664 
	$add©å_√°_íd
(
∆msghdr
 *
n
, 
π©å
 *
√°
)

666 
√°
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)nest;

667  
n
->
∆msg_Àn
;

668 
	}
}

670 
π©å
 *
	$add©å_√°_com∑t
(
∆msghdr
 *
n
, 
maxÀn
, 
ty≥
,

671 c⁄° *
d©a
, 
Àn
)

673 
π©å
 *
°¨t
 = 
	`NLMSG_TAIL
(
n
);

675 
	`add©å_l
(
n
, 
maxÀn
, 
ty≥
, 
d©a
, 
Àn
);

676 
	`add©å_√°
(
n
, 
maxÀn
, 
ty≥
);

677  
°¨t
;

678 
	}
}

680 
	$add©å_√°_com∑t_íd
(
∆msghdr
 *
n
, 
π©å
 *
°¨t
)

682 
π©å
 *
√°
 = (*)
°¨t
 + 
	`NLMSG_ALIGN
(°¨t->
πa_Àn
);

684 
°¨t
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)start;

685 
	`add©å_√°_íd
(
n
, 
√°
);

686  
n
->
∆msg_Àn
;

687 
	}
}

689 
	$πa_add©å32
(
π©å
 *
πa
, 
maxÀn
, 
ty≥
, 
__u32
 
d©a
)

691 
Àn
 = 
	`RTA_LENGTH
(4);

692 
π©å
 *
subπa
;

694 i‡(
	`RTA_ALIGN
(
πa
->
πa_Àn
Ë+ 
Àn
 > 
maxÀn
) {

695 
	`Ârötf
(
°dîr
,"πa_add©å32: Eº‹! maxáŒowed bound %dÉx˚eded\n",
maxÀn
);

698 
subπa
 = (
π©å
*)(((*)
πa
Ë+ 
	`RTA_ALIGN
‘è->
πa_Àn
));

699 
subπa
->
πa_ty≥
 = 
ty≥
;

700 
subπa
->
πa_Àn
 = 
Àn
;

701 
	`mem˝y
(
	`RTA_DATA
(
subπa
), &
d©a
, 4);

702 
πa
->
πa_Àn
 = 
	`NLMSG_ALIGN
‘è->πa_ÀnË+ 
Àn
;

704 
	}
}

706 
	$πa_add©å_l
(
π©å
 *
πa
, 
maxÀn
, 
ty≥
,

707 c⁄° *
d©a
, 
Æí
)

709 
π©å
 *
subπa
;

710 
Àn
 = 
	`RTA_LENGTH
(
Æí
);

712 i‡(
	`RTA_ALIGN
(
πa
->
πa_Àn
Ë+ RTA_ALIGN(
Àn
Ë> 
maxÀn
) {

713 
	`Ârötf
(
°dîr
,"πa_add©å_l: Eº‹! maxáŒowed bound %dÉx˚eded\n",
maxÀn
);

716 
subπa
 = (
π©å
*)(((*)
πa
Ë+ 
	`RTA_ALIGN
‘è->
πa_Àn
));

717 
subπa
->
πa_ty≥
 = 
ty≥
;

718 
subπa
->
πa_Àn
 = 
Àn
;

719 
	`mem˝y
(
	`RTA_DATA
(
subπa
), 
d©a
, 
Æí
);

720 
πa
->
πa_Àn
 = 
	`NLMSG_ALIGN
‘è->πa_ÀnË+ 
	`RTA_ALIGN
(
Àn
);

722 
	}
}

724 
	$πa_add©å8
(
π©å
 *
πa
, 
maxÀn
, 
ty≥
, 
__u8
 
d©a
)

726  
	`πa_add©å_l
(
πa
, 
maxÀn
, 
ty≥
, &
d©a
, (
__u8
));

727 
	}
}

729 
	$πa_add©å16
(
π©å
 *
πa
, 
maxÀn
, 
ty≥
, 
__u16
 
d©a
)

731  
	`πa_add©å_l
(
πa
, 
maxÀn
, 
ty≥
, &
d©a
, (
__u16
));

732 
	}
}

734 
	$πa_add©å64
(
π©å
 *
πa
, 
maxÀn
, 
ty≥
, 
__u64
 
d©a
)

736  
	`πa_add©å_l
(
πa
, 
maxÀn
, 
ty≥
, &
d©a
, (
__u64
));

737 
	}
}

739 
π©å
 *
	$πa_√°
(
π©å
 *
πa
, 
maxÀn
, 
ty≥
)

741 
π©å
 *
√°
 = 
	`RTA_TAIL
(
πa
);

743 
	`πa_add©å_l
(
πa
, 
maxÀn
, 
ty≥
, 
NULL
, 0);

745  
√°
;

746 
	}
}

748 
	$πa_√°_íd
(
π©å
 *
πa
, π©å *
√°
)

750 
√°
->
πa_Àn
 = (*)
	`RTA_TAIL
(
πa
) - (*)nest;

752  
πa
->
πa_Àn
;

753 
	}
}

755 
	$∑r£_π©å
(
π©å
 *
tb
[], 
max
, π©å *
πa
, 
Àn
)

757  
	`∑r£_π©å_Êags
(
tb
, 
max
, 
πa
, 
Àn
, 0);

758 
	}
}

760 
	$∑r£_π©å_Êags
(
π©å
 *
tb
[], 
max
, π©å *
πa
,

761 
Àn
, 
Êags
)

763 
ty≥
;

765 
	`mem£t
(
tb
, 0, (
π©å
 *Ë* (
max
 + 1));

766 
	`RTA_OK
(
πa
, 
Àn
)) {

767 
ty≥
 = 
πa
->
πa_ty≥
 & ~
Êags
;

768 i‡((
ty≥
 <
max
Ë&& (!
tb
[type]))

769 
tb
[
ty≥
] = 
πa
;

770 
πa
 = 
	`RTA_NEXT
‘è,
Àn
);

772 i‡(
Àn
)

773 
	`Ârötf
(
°dîr
, "!!!Deficô %d,Ñè_Àn=%d\n", 
Àn
, 
πa
->
πa_Àn
);

775 
	}
}

777 
	$∑r£_π©å_byödex
(
π©å
 *
tb
[], 
max
, π©å *
πa
, 
Àn
)

779 
i
 = 0;

781 
	`mem£t
(
tb
, 0, (
π©å
 *Ë* 
max
);

782 
	`RTA_OK
(
πa
, 
Àn
)) {

783 i‡(
πa
->
πa_ty≥
 <
max
 && 
i
 < max)

784 
tb
[
i
++] = 
πa
;

785 
πa
 = 
	`RTA_NEXT
‘è,
Àn
);

787 i‡(
Àn
)

788 
	`Ârötf
(
°dîr
, "!!!Deficô %d,Ñè_Àn=%d\n", 
Àn
, 
πa
->
πa_Àn
);

789  
i
;

790 
	}
}

792 
π©å
 *
	$∑r£_π©å_⁄e
(
ty≥
, 
π©å
 *
πa
, 
Àn
)

794 
	`RTA_OK
(
πa
, 
Àn
)) {

795 i‡(
πa
->
πa_ty≥
 =
ty≥
)

796  
πa
;

797 
πa
 = 
	`RTA_NEXT
‘è, 
Àn
);

799 i‡(
Àn
)

800 
	`Ârötf
(
°dîr
, "!!!Deficô %d,Ñè_Àn=%d\n", 
Àn
, 
πa
->
πa_Àn
);

801  
NULL
;

802 
	}
}

804 
	$__∑r£_π©å_√°ed_com∑t
(
π©å
 *
tb
[], 
max
, π©å *
πa
,

805 
Àn
)

807 i‡(
	`RTA_PAYLOAD
(
πa
Ë< 
Àn
)

809 i‡(
	`RTA_PAYLOAD
(
πa
Ë>
	`RTA_ALIGN
(
Àn
Ë+ (
π©å
)) {

810 
πa
 = 
	`RTA_DATA
‘èË+ 
	`RTA_ALIGN
(
Àn
);

811  
	`∑r£_π©å_√°ed
(
tb
, 
max
, 
πa
);

813 
	`mem£t
(
tb
, 0, (
π©å
 *Ë* (
max
 + 1));

815 
	}
}

	@lib/ll_addr.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/io˘l.h
>

18 
	~<sys/sockë.h
>

19 
	~<sys/io˘l.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~<löux/√tdevi˚.h
>

25 
	~<löux/if_¨p.h
>

26 
	~<löux/sockios.h
>

28 
	~"π_«mes.h
"

29 
	~"utûs.h
"

32 c⁄° *
	$Œ_addr_n2a
(c⁄° *
addr
, 
Æí
, 
ty≥
, *
buf
, 
bÀn
)

34 
i
;

35 
l
;

37 i‡(
Æí
 == 4 &&

38 (
ty≥
 =
ARPHRD_TUNNEL
 ||Åy≥ =
ARPHRD_SIT
 ||Åy≥ =
ARPHRD_IPGRE
)) {

39  
	`öë_¡›
(
AF_INET
, 
addr
, 
buf
, 
bÀn
);

41 i‡(
Æí
 =16 && 
ty≥
 =
ARPHRD_TUNNEL6
) {

42  
	`öë_¡›
(
AF_INET6
, 
addr
, 
buf
, 
bÀn
);

44 
l
 = 0;

45 
i
=0; i<
Æí
; i++) {

46 i‡(
i
==0) {

47 
	`¢¥ötf
(
buf
+
l
, 
bÀn
, "%02x", 
addr
[
i
]);

48 
bÀn
 -= 2;

49 
l
 += 2;

51 
	`¢¥ötf
(
buf
+
l
, 
bÀn
, ":%02x", 
addr
[
i
]);

52 
bÀn
 -= 3;

53 
l
 += 3;

56  
buf
;

57 
	}
}

60 
	$Œ_addr_a2n
(*
Œaddr
, 
Àn
, c⁄° *
¨g
)

62 i‡(
	`°rchr
(
¨g
, '.')) {

63 
öë_¥efix
 
pfx
;

64 i‡(
	`gë_addr_1
(&
pfx
, 
¨g
, 
AF_INET
)) {

65 
	`Ârötf
(
°dîr
, "\"%s\" i†övÆidÜœddr.\n", 
¨g
);

68 i‡(
Àn
 < 4)

70 
	`mem˝y
(
Œaddr
, 
pfx
.
d©a
, 4);

73 
i
;

75 
i
=0; i<
Àn
; i++) {

76 
ãmp
;

77 *
˝
 = 
	`°rchr
(
¨g
, ':');

78 i‡(
˝
) {

79 *
˝
 = 0;

80 
˝
++;

82 i‡(
	`ssˇnf
(
¨g
, "%x", &
ãmp
) != 1) {

83 
	`Ârötf
(
°dîr
, "\"%s\" i†övÆidÜœddr.\n", 
¨g
);

86 i‡(
ãmp
 < 0 ||Åemp > 255) {

87 
	`Ârötf
(
°dîr
, "\"%s\" i†övÆidÜœddr.\n", 
¨g
);

90 
Œaddr
[
i
] = 
ãmp
;

91 i‡(!
˝
)

93 
¨g
 = 
˝
;

95  
i
+1;

97 
	}
}

	@lib/ll_map.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<°rög.h
>

21 
	~<√t/if.h
>

23 
	~"lib√éök.h
"

24 
	~"Œ_m≠.h
"

25 
	~"hli°.h
"

27 
	sŒ_ˇche
 {

28 
hli°_node
 
	midx_hash
;

29 
hli°_node
 
	m«me_hash
;

30 
	mÊags
;

31 
	mödex
;

32 
	mty≥
;

33 
	m«me
[
IFNAMSIZ
];

36 
	#IDXMAP_SIZE
 1024

	)

37 
hli°_hód
 
	gidx_hód
[
IDXMAP_SIZE
];

38 
hli°_hód
 
	g«me_hód
[
IDXMAP_SIZE
];

40 
Œ_ˇche
 *
	$Œ_gë_by_ödex
(
ödex
)

42 
hli°_node
 *
n
;

43 
h
 = 
ödex
 & (
IDXMAP_SIZE
 - 1);

45 
	`hli°_f‹_óch
(
n
, &
idx_hód
[
h
]) {

46 
Œ_ˇche
 *
im


47 
	`c⁄èöî_of
(
n
, 
Œ_ˇche
, 
idx_hash
);

48 i‡(
im
->
ödex
 == index)

49  
im
;

52  
NULL
;

53 
	}
}

55 
	$«mehash
(c⁄° *
°r
)

57 
hash
 = 5381;

59 *
°r
)

60 
hash
 = ((hash << 5Ë+ hashË+ *
°r
++;

62  
hash
;

63 
	}
}

65 
Œ_ˇche
 *
	$Œ_gë_by_«me
(c⁄° *
«me
)

67 
hli°_node
 *
n
;

68 
h
 = 
	`«mehash
(
«me
Ë& (
IDXMAP_SIZE
 - 1);

70 
	`hli°_f‹_óch
(
n
, &
«me_hód
[
h
]) {

71 
Œ_ˇche
 *
im


72 
	`c⁄èöî_of
(
n
, 
Œ_ˇche
, 
«me_hash
);

74 i‡(
	`°∫cmp
(
im
->
«me
,Çame, 
IFNAMSIZ
) == 0)

75  
im
;

78  
NULL
;

79 
	}
}

81 
	$Œ_ªmembî_ödex
(c⁄° 
sockaddr_∆
 *
who
,

82 
∆msghdr
 *
n
, *
¨g
)

84 
h
;

85 c⁄° *
i‚ame
;

86 
iföfomsg
 *
ifi
 = 
	`NLMSG_DATA
(
n
);

87 
Œ_ˇche
 *
im
;

88 
π©å
 *
tb
[
IFLA_MAX
+1];

90 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWLINK
 &&Ç->∆msg_ty≥ !
RTM_DELLINK
)

93 i‡(
n
->
∆msg_Àn
 < 
	`NLMSG_LENGTH
((
ifi
)))

96 
im
 = 
	`Œ_gë_by_ödex
(
ifi
->
ifi_ödex
);

97 i‡(
n
->
∆msg_ty≥
 =
RTM_DELLINK
) {

98 i‡(
im
) {

99 
	`hli°_dñ
(&
im
->
«me_hash
);

100 
	`hli°_dñ
(&
im
->
idx_hash
);

101 
	`‰ì
(
im
);

106 
	`mem£t
(
tb
, 0, (tb));

107 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(
ifi
), 
	`IFLA_PAYLOAD
(
n
));

108 
i‚ame
 = 
	`πa_gë©å_°r
(
tb
[
IFLA_IFNAME
]);

109 i‡(
i‚ame
 =
NULL
)

112 i‡(
im
) {

114 i‡(
	`°rcmp
(
im
->
«me
, 
i‚ame
) != 0) {

115 
	`hli°_dñ
(&
im
->
«me_hash
);

116 
h
 = 
	`«mehash
(
i‚ame
Ë& (
IDXMAP_SIZE
 - 1);

117 
	`hli°_add_hód
(&
im
->
«me_hash
, &
«me_hód
[
h
]);

120 
im
->
Êags
 = 
ifi
->
ifi_Êags
;

124 
im
 = 
	`mÆloc
((*im));

125 i‡(
im
 =
NULL
)

127 
im
->
ödex
 = 
ifi
->
ifi_ödex
;

128 
	`°r˝y
(
im
->
«me
, 
i‚ame
);

129 
im
->
ty≥
 = 
ifi
->
ifi_ty≥
;

130 
im
->
Êags
 = 
ifi
->
ifi_Êags
;

132 
h
 = 
ifi
->
ifi_ödex
 & (
IDXMAP_SIZE
 - 1);

133 
	`hli°_add_hód
(&
im
->
idx_hash
, &
idx_hód
[
h
]);

135 
h
 = 
	`«mehash
(
i‚ame
Ë& (
IDXMAP_SIZE
 - 1);

136 
	`hli°_add_hód
(&
im
->
«me_hash
, &
«me_hód
[
h
]);

139 
	}
}

141 c⁄° *
	$Œ_idx_n2a
(
idx
, *
buf
)

143 c⁄° 
Œ_ˇche
 *
im
;

145 i‡(
idx
 == 0)

148 
im
 = 
	`Œ_gë_by_ödex
(
idx
);

149 i‡(
im
)

150  
im
->
«me
;

152 i‡(
	`if_ödext⁄ame
(
idx
, 
buf
Ë=
NULL
)

153 
	`¢¥ötf
(
buf
, 
IFNAMSIZ
, "if%d", 
idx
);

155  
buf
;

156 
	}
}

158 c⁄° *
	$Œ_ödex_to_«me
(
idx
)

160 
nbuf
[
IFNAMSIZ
];

162  
	`Œ_idx_n2a
(
idx
, 
nbuf
);

163 
	}
}

165 
	$Œ_ödex_to_ty≥
(
idx
)

167 c⁄° 
Œ_ˇche
 *
im
;

169 i‡(
idx
 == 0)

172 
im
 = 
	`Œ_gë_by_ödex
(
idx
);

173  
im
 ? im->
ty≥
 : -1;

174 
	}
}

176 
	$Œ_ödex_to_Êags
(
idx
)

178 c⁄° 
Œ_ˇche
 *
im
;

180 i‡(
idx
 == 0)

183 
im
 = 
	`Œ_gë_by_ödex
(
idx
);

184  
im
 ? im->
Êags
 : -1;

185 
	}
}

187 
	$Œ_«me_to_ödex
(c⁄° *
«me
)

189 c⁄° 
Œ_ˇche
 *
im
;

190 
idx
;

192 i‡(
«me
 =
NULL
)

195 
im
 = 
	`Œ_gë_by_«me
(
«me
);

196 i‡(
im
)

197  
im
->
ödex
;

199 
idx
 = 
	`if_«mëoödex
(
«me
);

200 i‡(
idx
 == 0)

201 
	`ssˇnf
(
«me
, "if%u", &
idx
);

202  
idx
;

203 
	}
}

205 
	$Œ_öô_m≠
(
π∆_h™dÀ
 *
πh
)

207 
öôülized
;

209 i‡(
öôülized
)

212 i‡(
	`π∆_wûddump_ªque°
(
πh
, 
AF_UNSPEC
, 
RTM_GETLINK
) < 0) {

213 
	`≥º‹
("Cannot send dumpÑequest");

214 
	`exô
(1);

217 i‡(
	`π∆_dump_fûãr
(
πh
, 
Œ_ªmembî_ödex
, 
NULL
) < 0) {

218 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

219 
	`exô
(1);

222 
öôülized
 = 1;

223 
	}
}

	@lib/ll_proto.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/io˘l.h
>

18 
	~<sys/sockë.h
>

19 
	~<sys/io˘l.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~<löux/√tdevi˚.h
>

25 
	~<löux/if_¨p.h
>

26 
	~<löux/sockios.h
>

28 
	~"utûs.h
"

29 
	~"π_«mes.h
"

32 
	#__PF
(
f
,
n
Ë{ 
ETH_P_
##f, #¿},

	)

34 
	mid
;

35 c⁄° *
	m«me
;

36 } 
	gŒ¥Ÿo_«mes
[] = {

37 
__PF
(
LOOP
,
lo›
)

38 
__PF
(
PUP
,
pup
)

39 
__PF
(
PUPAT
,
pu∑t
)

40 
__PF
(
IP
,
ù
)

41 
__PF
(
X25
,
x25
)

42 
__PF
(
ARP
,
¨p
)

43 
__PF
(
BPQ
,
bpq
)

44 
__PF
(
IEEEPUP
,
õìpup
)

45 
__PF
(
IEEEPUPAT
,
õìpu∑t
)

46 
__PF
(
DEC
,
dec
)

47 
__PF
(
DNA_DL
,
d«_dl
)

48 
__PF
(
DNA_RC
,
d«_rc
)

49 
__PF
(
DNA_RT
,
d«_π
)

50 
__PF
(
LAT
,
œt
)

51 
__PF
(
DIAG
,
düg
)

52 
__PF
(
CUST
,
cu°
)

53 
__PF
(
SCA
,
sˇ
)

54 
__PF
(
RARP
,
øΩ
)

55 
__PF
(
ATALK
,
©Æk
)

56 
__PF
(
AARP
,
ØΩ
)

57 
__PF
(
IPX
,
ùx
)

58 
__PF
(
IPV6
,
ùv6
)

59 
__PF
(
PPP_DISC
,
µp_disc
)

60 
__PF
(
PPP_SES
,
µp_£s
)

61 
__PF
(
ATMMPOA
,
©mmpﬂ
)

62 
__PF
(
ATMFATE
,
©mÁã
)

63 
__PF
(802
_3
,802_3)

64 
__PF
(
AX25
,
ax25
)

65 
__PF
(
ALL
,
Æl
)

66 
__PF
(802
_2
,802_2)

67 
__PF
(
SNAP
,
¢≠
)

68 
__PF
(
DDCMP
,
ddcmp
)

69 
__PF
(
WAN_PPP
,
w™_µp
)

70 
__PF
(
PPP_MP
,
µp_mp
)

71 
__PF
(
LOCALTALK
,
loˇ…Æk
)

72 
__PF
(
CAN
,
ˇn
)

73 
__PF
(
PPPTALK
,
µ±Æk
)

74 
__PF
(
TR_802_2
,
å_802_2
)

75 
__PF
(
MOBITEX
,
mobôex
)

76 
__PF
(
CONTROL
,
c⁄åﬁ
)

77 
__PF
(
IRDA
,
úda
)

78 
__PF
(
ECONET
,
ec⁄ë
)

79 
__PF
(
TIPC
,
tùc
)

80 
__PF
(
AOE
,
a€
)

81 
__PF
(8021
Q
,802.1Q)

82 
__PF
(8021AD,802.1ad)

86 { 
ETH_P_IP
, "ipv4" },

88 #unde‡
__PF


91 c⁄° * 
	$Œ_¥Ÿo_n2a
(
id
, *
buf
, 
Àn
)

93 
i
;

95 
id
 = 
	`¡ohs
(id);

97 
i
=0; i<(
Œ¥Ÿo_«mes
)/(llproto_names[0]); i++) {

98 i‡(
Œ¥Ÿo_«mes
[
i
].
id
 == id)

99  
Œ¥Ÿo_«mes
[
i
].
«me
;

101 
	`¢¥ötf
(
buf
, 
Àn
, "[%d]", 
id
);

102  
buf
;

103 
	}
}

105 
	$Œ_¥Ÿo_a2n
(*
id
, c⁄° *
buf
)

107 
i
;

108 
i
=0; i < (
Œ¥Ÿo_«mes
)/(llproto_names[0]); i++) {

109 i‡(
	`°rˇ£cmp
(
Œ¥Ÿo_«mes
[
i
].
«me
, 
buf
) == 0) {

110 *
id
 = 
	`ht⁄s
(
Œ¥Ÿo_«mes
[
i
].id);

114 i‡(
	`gë_u16
(
id
, 
buf
, 0))

116 *
id
 = 
	`ht⁄s
(*id);

118 
	}
}

	@lib/ll_types.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/io˘l.h
>

18 
	~<sys/sockë.h
>

19 
	~<sys/io˘l.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~<löux/√tdevi˚.h
>

25 
	~<löux/if_¨p.h
>

26 
	~<löux/sockios.h
>

28 
	~"π_«mes.h
"

30 c⁄° * 
	$Œ_ty≥_n2a
(
ty≥
, *
buf
, 
Àn
)

32 
	#__PF
(
f
,
n
Ë{ 
ARPHRD_
##f, #¿},

	)

34 
ty≥
;

35 c⁄° *
«me
;

36 } 
¨phrd_«mes
[] = {

38 
	`__PF
(
ETHER
,
ëhî
)

39 
	`__PF
(
EETHER
,
ìthî
)

40 
	`__PF
(
AX25
,
ax25
)

41 
	`__PF
(
PRONET
,
¥⁄ë
)

42 
	`__PF
(
CHAOS
,
chaos
)

43 
	`__PF
(
IEEE802
,
õì802
)

44 
	`__PF
(
ARCNET
,
¨˙ë
)

45 
	`__PF
(
APPLETLK
,
©Æk
)

46 
	`__PF
(
DLCI
,
dlci
)

47 
	`__PF
(
ATM
,
©m
)

48 
	`__PF
(
METRICOM
,
mëricom
)

49 
	`__PF
(
IEEE1394
,
õì1394
)

50 
	`__PF
(
INFINIBAND
,
öföib™d
)

51 
	`__PF
(
SLIP
,
¶ù
)

52 
	`__PF
(
CSLIP
,
c¶ù
)

53 
	`__PF
(
SLIP6
,
¶ù6
)

54 
	`__PF
(
CSLIP6
,
c¶ù6
)

55 
	`__PF
(
RSRVD
,
r§vd
)

56 
	`__PF
(
ADAPT
,
ad≠t
)

57 
	`__PF
(
ROSE
,
ro£
)

58 
	`__PF
(
X25
,
x25
)

59 
	`__PF
(
HWX25
,
hwx25
)

60 
	`__PF
(
CAN
,
ˇn
)

61 
	`__PF
(
PPP
,
µp
)

62 
	`__PF
(
HDLC
,
hdlc
)

63 
	`__PF
(
LAPB
,
œpb
)

64 
	`__PF
(
DDCMP
,
ddcmp
)

65 
	`__PF
(
RAWHDLC
,
øwhdlc
)

66 
	`__PF
(
TUNNEL
,
ùù
)

67 
	`__PF
(
TUNNEL6
,
tu¬ñ6
)

68 
	`__PF
(
FRAD
,
‰ad
)

69 
	`__PF
(
SKIP
,
skù
)

70 
	`__PF
(
LOOPBACK
,
lo›back
)

71 
	`__PF
(
LOCALTLK
,
…Æk
)

72 
	`__PF
(
FDDI
,
fddi
)

73 
	`__PF
(
BIF
,
bif
)

74 
	`__PF
(
SIT
,
sô
)

75 
	`__PF
(
IPDDP
,
ù
/
ddp
)

76 
	`__PF
(
IPGRE
,
gª
)

77 
	`__PF
(
PIMREG
,
pimªg
)

78 
	`__PF
(
HIPPI
,
hùpi
)

79 
	`__PF
(
ASH
,
ash
)

80 
	`__PF
(
ECONET
,
ec⁄ë
)

81 
	`__PF
(
IRDA
,
úda
)

82 
	`__PF
(
FCPP
,
f˝p
)

83 
	`__PF
(
FCAL
,
fˇl
)

84 
	`__PF
(
FCPL
,
f˝l
)

85 
	`__PF
(
FCFABRIC
,
fcfb0
)

86 
	`__PF
(
FCFABRIC
+1,
fcfb1
)

87 
	`__PF
(
FCFABRIC
+2,
fcfb2
)

88 
	`__PF
(
FCFABRIC
+3,
fcfb3
)

89 
	`__PF
(
FCFABRIC
+4,
fcfb4
)

90 
	`__PF
(
FCFABRIC
+5,
fcfb5
)

91 
	`__PF
(
FCFABRIC
+6,
fcfb6
)

92 
	`__PF
(
FCFABRIC
+7,
fcfb7
)

93 
	`__PF
(
FCFABRIC
+8,
fcfb8
)

94 
	`__PF
(
FCFABRIC
+9,
fcfb9
)

95 
	`__PF
(
FCFABRIC
+10,
fcfb10
)

96 
	`__PF
(
FCFABRIC
+11,
fcfb11
)

97 
	`__PF
(
FCFABRIC
+12,
fcfb12
)

98 
	`__PF
(
IEEE802_TR
,
å
)

99 
	`__PF
(
IEEE80211
,
õì802
.11)

100 
	`__PF
(
IEEE80211_PRISM
,
õì802
.11/
¥ism
)

101 
	`__PF
(
IEEE80211_RADIOTAP
,
õì802
.11/
ødiŸ≠
)

102 
	`__PF
(
IEEE802154
, 
õì802
.15.4)

103 
	`__PF
(
PHONET
, 
ph⁄ë
)

104 
	`__PF
(
PHONET_PIPE
, 
ph⁄ë_pùe
)

105 
	`__PF
(
CAIF
, 
ˇif
)

106 
	`__PF
(
IP6GRE
, 
gª6
)

107 
	`__PF
(
NETLINK
, 
√éök
)

109 
	`__PF
(
NONE
, 
n⁄e
)

110 
	`__PF
(
VOID
,)

112 #unde‡
__PF


114 
i
;

115 
i
=0; i<(
¨phrd_«mes
)/(arphrd_names[0]); i++) {

116 i‡(
¨phrd_«mes
[
i
].
ty≥
 ==Åype)

117  
¨phrd_«mes
[
i
].
«me
;

119 
	`¢¥ötf
(
buf
, 
Àn
, "[%d]", 
ty≥
);

120  
buf
;

121 
	}
}

	@lib/mpls_ntop.c

1 
	~<î∫o.h
>

2 
	~<°rög.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<√töë/ö.h
>

5 
	~<löux/m∂s.h
>

7 
	~"utûs.h
"

9 c⁄° *
	$m∂s_¡›1
(c⁄° 
m∂s_œbñ
 *
addr
, *
buf
, 
size_t
 
buÊí
)

11 
size_t
 
de°Àn
 = 
buÊí
;

12 *
de°
 = 
buf
;

13 
cou¡
;

15 
cou¡
 = 0; cou¡ < 
MPLS_MAX_LABELS
; count++) {

16 
uöt32_t
 
íåy
 = 
	`¡ohl
(
addr
[
cou¡
].entry);

17 
uöt32_t
 
œbñ
 = (
íåy
 & 
MPLS_LS_LABEL_MASK
Ë>> 
MPLS_LS_LABEL_SHIFT
;

18 
Àn
 = 
	`¢¥ötf
(
de°
, 
de°Àn
, "%u", 
œbñ
);

21 i‡(
íåy
 & 
MPLS_LS_S_MASK
)

22  
buf
;

25 
de°
 +
Àn
;

26 
de°Àn
 -
Àn
;

27 i‡(
de°Àn
) {

28 *
de°
 = '/';

29 
de°
++;

30 
de°Àn
--;

33 
î∫o
 = -
E2BIG
;

34  
NULL
;

35 
	}
}

37 c⁄° *
	$m∂s_¡›
(
af
, c⁄° *
addr
, *
buf
, 
size_t
 
buÊí
)

39 
af
) {

40 
AF_MPLS
:

41 
î∫o
 = 0;

42  
	`m∂s_¡›1
((
m∂s_œbñ
 *)
addr
, 
buf
, 
buÊí
);

44 
î∫o
 = 
EAFNOSUPPORT
;

47  
NULL
;

48 
	}
}

	@lib/mpls_pton.c

1 
	~<î∫o.h
>

2 
	~<°rög.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<√töë/ö.h
>

5 
	~<löux/m∂s.h
>

7 
	~"utûs.h
"

10 
	$m∂s_±⁄1
(c⁄° *
«me
, 
m∂s_œbñ
 *
addr
)

12 *
ídp
;

13 
cou¡
;

15 
cou¡
 = 0; cou¡ < 
MPLS_MAX_LABELS
; count++) {

16 
œbñ
;

18 
œbñ
 = 
	`°πoul
(
«me
, &
ídp
, 0);

20 i‡(
œbñ
 >= (1 << 20))

23 i‡(
ídp
 =
«me
)

26 
addr
->
íåy
 = 
	`ht⁄l
(
œbñ
 << 
MPLS_LS_LABEL_SHIFT
);

27 i‡(*
ídp
 == '\0') {

28 
addr
->
íåy
 |
	`ht⁄l
(1 << 
MPLS_LS_S_SHIFT
);

33 i‡(*
ídp
 != '/')

36 
«me
 = 
ídp
 + 1;

37 
addr
 += 1;

41 
	}
}

43 
	$m∂s_±⁄
(
af
, c⁄° *
§c
, *
addr
)

45 
îr
;

47 
af
) {

48 
AF_MPLS
:

49 
î∫o
 = 0;

50 
îr
 = 
	`m∂s_±⁄1
(
§c
, (
m∂s_œbñ
 *)
addr
);

53 
î∫o
 = 
EAFNOSUPPORT
;

54 
îr
 = -1;

57  
îr
;

58 
	}
}

	@lib/names.c

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~<î∫o.h
>

16 
	~"«mes.h
"

17 
	~"utûs.h
"

19 
	#MAX_ENTRIES
 256

	)

20 
	#NAME_MAX_LEN
 512

	)

22 
	$ªad_id_«me
(
FILE
 *
Â
, *
id
, *
«me
)

24 
buf
[
NAME_MAX_LEN
];

25 
mö
, 
maj
;

27 
	`fgës
(
buf
, (buf), 
Â
)) {

28 *
p
 = 
buf
;

30 *
p
 == ' ' || *p == '\t')

31 
p
++;

33 i‡(*
p
 == '#' || *p == '\n' || *p == 0)

36 i‡(
	`ssˇnf
(
p
, "%x:%x %s\n", &
maj
, &
mö
, 
«me
) == 3) {

37 *
id
 = (
maj
 << 16Ë| 
mö
;

38 } i‡(
	`ssˇnf
(
p
, "%x:%x %†#", &
maj
, &
mö
, 
«me
) == 3) {

39 *
id
 = (
maj
 << 16Ë| 
mö
;

40 } i‡(
	`ssˇnf
(
p
, "0x%x %s\n", 
id
, 
«me
) != 2 &&

41 
	`ssˇnf
(
p
, "0x%x %†#", 
id
, 
«me
) != 2 &&

42 
	`ssˇnf
(
p
, "%d %s\n", 
id
, 
«me
) != 2 &&

43 
	`ssˇnf
(
p
, "%d %†#", 
id
, 
«me
) != 2) {

44 
	`°r˝y
(
«me
, 
p
);

51 
	}
}

53 
db_«mes
 *
	$db_«mes_Æloc
()

55 
db_«mes
 *
db
;

57 
db
 = 
	`mÆloc
((*db));

58 i‡(!
db
)

59  
NULL
;

61 
	`mem£t
(
db
, 0, (*db));

63 
db
->
size
 = 
MAX_ENTRIES
;

64 
db
->
hash
 = 
	`mÆloc
((
db_íåy
 *Ë* db->
size
);

65 
	`mem£t
(
db
->
hash
, 0, (
db_íåy
 *Ë* db->
size
);

67  
db
;

68 
	}
}

70 
	$db_«mes_lﬂd
(
db_«mes
 *
db
, c⁄° *
∑th
)

72 
db_íåy
 *
íåy
;

73 
FILE
 *
Â
;

74 
id
;

75 
«mebuf
[
NAME_MAX_LEN
] = {0};

76 
ªt
 = -1;

78 
Â
 = 
	`f›í
(
∑th
, "r");

79 i‡(!
Â
)

80  -
ENOENT
;

82 (
ªt
 = 
	`ªad_id_«me
(
Â
, &
id
, &
«mebuf
[0]))) {

83 i‡(
ªt
 == -1) {

84 
	`Ârötf
(
°dîr
, "Database %s is corruptedát %s\n",

85 
∑th
, 
«mebuf
);

86 
Exô
;

88 
ªt
 = -1;

90 i‡(
id
 < 0)

93 
íåy
 = 
	`mÆloc
((*entry));

94 i‡(!
íåy
)

95 
Exô
;

97 
íåy
->
«me
 = 
	`°rdup
(
«mebuf
);

98 i‡(!
íåy
->
«me
) {

99 
	`‰ì
(
íåy
);

100 
Exô
;

103 
íåy
->
id
 = id;

104 
íåy
->
√xt
 = 
db
->
hash
[
id
 & (db->
size
 - 1)];

105 
db
->
hash
[
id
 & (db->
size
 - 1)] = 
íåy
;

107 
ªt
 = 0;

109 
Exô
:

110 
	`f˛o£
(
Â
);

111  
ªt
;

112 
	}
}

114 
	$db_«mes_‰ì
(
db_«mes
 *
db
)

116 
i
;

118 i‡(!
db
)

121 
i
 = 0; i < 
db
->
size
; i++) {

122 
db_íåy
 *
íåy
 = 
db
->
hash
[
i
];

124 
íåy
) {

125 
db_íåy
 *
√xt
 = 
íåy
->next;

127 
	`‰ì
(
íåy
->
«me
);

128 
	`‰ì
(
íåy
);

129 
íåy
 = 
√xt
;

133 
	`‰ì
(
db
->
hash
);

134 
	`‰ì
(
db
);

135 
	}
}

137 *
	$id_to_«me
(
db_«mes
 *
db
, 
id
, *
«me
)

139 
db_íåy
 *
íåy
;

141 i‡(!
db
)

142  
NULL
;

144 
íåy
 = 
db
->
hash
[
id
 & (db->
size
 - 1)];

145 
íåy
 &&É¡ry->
id
 != id)

146 
íåy
 =É¡ry->
√xt
;

148 i‡(
íåy
) {

149 
	`°∫˝y
(
«me
, 
íåy
->«me, 
IDNAME_MAX
);

150  
«me
;

153 
	`¢¥ötf
(
«me
, 
IDNAME_MAX
, "%d", 
id
);

154  
NULL
;

155 
	}
}

157 
	$«me_to_id
(
db_«mes
 *
db
, *
id
, c⁄° *
«me
)

159 
db_íåy
 *
íåy
;

160 
i
;

162 i‡(!
db
)

165 i‡(
db
->
ˇched
 && 
	`°rcmp
(db->ˇched->
«me
,Çame) == 0) {

166 *
id
 = 
db
->
ˇched
->id;

170 
i
 = 0; i < 
db
->
size
; i++) {

171 
íåy
 = 
db
->
hash
[
i
];

172 
íåy
 && 
	`°rcmp
”¡ry->
«me
,Çame))

173 
íåy
 =É¡ry->
√xt
;

175 i‡(
íåy
) {

176 
db
->
ˇched
 = 
íåy
;

177 *
id
 = 
íåy
->id;

183 
	}
}

	@lib/namespace.c

10 
	~<f˙é.h
>

11 
	~<dúít.h
>

12 
	~<limôs.h
>

14 
	~"utûs.h
"

15 
	~"«me•a˚.h
"

17 
	$böd_ëc
(c⁄° *
«me
)

19 
ëc_√äs_∑th
[
PATH_MAX
];

20 
√äs_«me
[
PATH_MAX
];

21 
ëc_«me
[
PATH_MAX
];

22 
dúít
 *
íåy
;

23 
DIR
 *
dú
;

25 
	`¢¥ötf
(
ëc_√äs_∑th
, ”tc_√äs_∑th), "%s/%s", 
NETNS_ETC_DIR
, 
«me
);

26 
dú
 = 
	`›ídú
(
ëc_√äs_∑th
);

27 i‡(!
dú
)

30 (
íåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

31 i‡(
	`°rcmp
(
íåy
->
d_«me
, ".") == 0)

33 i‡(
	`°rcmp
(
íåy
->
d_«me
, "..") == 0)

35 
	`¢¥ötf
(
√äs_«me
, “ëns_«me), "%s/%s", 
ëc_√äs_∑th
, 
íåy
->
d_«me
);

36 
	`¢¥ötf
(
ëc_«me
, ”tc_«me), "/ëc/%s", 
íåy
->
d_«me
);

37 i‡(
	`mou¡
(
√äs_«me
, 
ëc_«me
, "n⁄e", 
MS_BIND
, 
NULL
) < 0) {

38 
	`Ârötf
(
°dîr
, "Bind %s -> %s failed: %s\n",

39 
√äs_«me
, 
ëc_«me
, 
	`°ªº‹
(
î∫o
));

42 
	`˛o£dú
(
dú
);

43 
	}
}

45 
	$√äs_swôch
(*
«me
)

47 
√t_∑th
[
PATH_MAX
];

48 
√äs
;

50 
	`¢¥ötf
(
√t_∑th
, “ë_∑th), "%s/%s", 
NETNS_RUN_DIR
, 
«me
);

51 
√äs
 = 
	`›í
(
√t_∑th
, 
O_RDONLY
 | 
O_CLOEXEC
);

52 i‡(
√äs
 < 0) {

53 
	`Ârötf
(
°dîr
, "Cannot openÇetworkÇamespace \"%s\": %s\n",

54 
«me
, 
	`°ªº‹
(
î∫o
));

58 i‡(
	`£äs
(
√äs
, 
CLONE_NEWNET
) < 0) {

59 
	`Ârötf
(
°dîr
, "settingÅheÇetworkÇamespace \"%s\" failed: %s\n",

60 
«me
, 
	`°ªº‹
(
î∫o
));

61 
	`˛o£
(
√äs
);

64 
	`˛o£
(
√äs
);

66 i‡(
	`unsh¨e
(
CLONE_NEWNS
) < 0) {

67 
	`Ârötf
(
°dîr
, "unsh¨êÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

71 i‡(
	`mou¡
("", "/", "n⁄e", 
MS_SLAVE
 | 
MS_REC
, 
NULL
)) {

72 
	`Ârötf
(
°dîr
, "\"mount --make-rslave /\" failed: %s\n",

73 
	`°ªº‹
(
î∫o
));

77 i‡(
	`umou¡2
("/sys", 
MNT_DETACH
) < 0) {

78 
	`Ârötf
(
°dîr
, "umou¡ o‡/sy†Áûed: %s\n", 
	`°ªº‹
(
î∫o
));

81 i‡(
	`mou¡
(
«me
, "/sys", "sysfs", 0, 
NULL
) < 0) {

82 
	`Ârötf
(
°dîr
, "mou¡ o‡/sy†Áûed: %s\n",
	`°ªº‹
(
î∫o
));

87 
	`böd_ëc
(
«me
);

89 
	}
}

91 
	$√äs_gë_fd
(c⁄° *
«me
)

93 
∑thbuf
[
PATH_MAX
];

94 c⁄° *
∑th
, *
±r
;

96 
∑th
 = 
«me
;

97 
±r
 = 
	`°rchr
(
«me
, '/');

98 i‡(!
±r
) {

99 
	`¢¥ötf
(
∑thbuf
, (pathbuf), "%s/%s",

100 
NETNS_RUN_DIR
, 
«me
 );

101 
∑th
 = 
∑thbuf
;

103  
	`›í
(
∑th
, 
O_RDONLY
);

104 
	}
}

106 
√äs_f‹óch
((*
func
)(*
n¢ame
, *
¨g
), *arg)

108 
DIR
 *
dú
;

109 
dúít
 *
íåy
;

111 
dú
 = 
	`›ídú
(
NETNS_RUN_DIR
);

112 i‡(!
dú
)

115 (
íåy
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

116 i‡(
	`°rcmp
(
íåy
->
d_«me
, ".") == 0)

118 i‡(
	`°rcmp
(
íåy
->
d_«me
, "..") == 0)

120 i‡(
	`func
(
íåy
->
d_«me
, 
¨g
))

124 
	`˛o£dú
(
dú
);

126 
	}
}

	@lib/rt_names.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<°rög.h
>

18 
	~<sys/time.h
>

19 
	~<sys/sockë.h
>

21 
	~<asm/ty≥s.h
>

22 
	~<löux/π√éök.h
>

24 
	~"π_«mes.h
"

26 #i‚de‡
CONFDIR


27 
	#CONFDIR
 "/ëc/ùrouã2"

	)

30 
	#NAME_MAX_LEN
 512

	)

32 
	sπ∆_hash_íåy
 {

33 
π∆_hash_íåy
 *
	m√xt
;

34 c⁄° * 
	m«me
;

35 
	mid
;

38 
	$‰ód_id_«me
(
FILE
 *
Â
, *
id
, *
«mebuf
)

40 
buf
[
NAME_MAX_LEN
];

42 
	`fgës
(
buf
, (buf), 
Â
)) {

43 *
p
 = 
buf
;

45 *
p
 == ' ' || *p == '\t')

46 
p
++;

48 i‡(*
p
 == '#' || *p == '\n' || *p == 0)

51 i‡(
	`ssˇnf
(
p
, "0x%x %s\n", 
id
, 
«mebuf
) != 2 &&

52 
	`ssˇnf
(
p
, "0x%x %†#", 
id
, 
«mebuf
) != 2 &&

53 
	`ssˇnf
(
p
, "%d %s\n", 
id
, 
«mebuf
) != 2 &&

54 
	`ssˇnf
(
p
, "%d %†#", 
id
, 
«mebuf
) != 2) {

55 
	`°r˝y
(
«mebuf
, 
p
);

61 
	}
}

64 
	$π∆_hash_öôülize
(c⁄° *
fûe
, 
π∆_hash_íåy
 **
hash
, 
size
)

66 
π∆_hash_íåy
 *
íåy
;

67 
FILE
 *
Â
;

68 
id
;

69 
«mebuf
[
NAME_MAX_LEN
] = {0};

70 
ªt
;

72 
Â
 = 
	`f›í
(
fûe
, "r");

73 i‡(!
Â
)

76 (
ªt
 = 
	`‰ód_id_«me
(
Â
, &
id
, &
«mebuf
[0]))) {

77 i‡(
ªt
 == -1) {

78 
	`Ârötf
(
°dîr
, "Database %s is corruptedát %s\n",

79 
fûe
, 
«mebuf
);

80 
	`f˛o£
(
Â
);

84 i‡(
id
<0)

87 
íåy
 = 
	`mÆloc
((*entry));

88 
íåy
->
id
 = id;

89 
íåy
->
«me
 = 
	`°rdup
(
«mebuf
);

90 
íåy
->
√xt
 = 
hash
[
id
 & (
size
 - 1)];

91 
hash
[
id
 & (
size
 - 1)] = 
íåy
;

93 
	`f˛o£
(
Â
);

94 
	}
}

96 
	$π∆_èb_öôülize
(c⁄° *
fûe
, **
èb
, 
size
)

98 
FILE
 *
Â
;

99 
id
;

100 
«mebuf
[
NAME_MAX_LEN
] = {0};

101 
ªt
;

103 
Â
 = 
	`f›í
(
fûe
, "r");

104 i‡(!
Â
)

107 (
ªt
 = 
	`‰ód_id_«me
(
Â
, &
id
, &
«mebuf
[0]))) {

108 i‡(
ªt
 == -1) {

109 
	`Ârötf
(
°dîr
, "Database %s is corruptedát %s\n",

110 
fûe
, 
«mebuf
);

111 
	`f˛o£
(
Â
);

114 i‡(
id
<0 || id>
size
)

117 
èb
[
id
] = 
	`°rdup
(
«mebuf
);

119 
	`f˛o£
(
Â
);

120 
	}
}

122 * 
	gπ∆_π¥Ÿ_èb
[256] = {

123 [
RTPROT_UNSPEC
] = "none",

124 [
RTPROT_REDIRECT
] ="redirect",

125 [
RTPROT_KERNEL
] = "kernel",

126 [
RTPROT_BOOT
] = "boot",

127 [
RTPROT_STATIC
] = "static",

129 [
RTPROT_GATED
] = "gated",

130 [
RTPROT_RA
] = "ra",

131 [
RTPROT_MRT
] = "mrt",

132 [
RTPROT_ZEBRA
] ="zebra",

133 [
RTPROT_BIRD
] = "bird",

134 [
RTPROT_BABEL
] = "babel",

135 [
RTPROT_DNROUTED
] = "dnrouted",

136 [
RTPROT_XORP
] = "xorp",

137 [
RTPROT_NTK
] = "ntk",

138 [
RTPROT_DHCP
] = "dhcp",

142 
	gπ∆_π¥Ÿ_öô
;

144 
	$π∆_π¥Ÿ_öôülize
()

146 
π∆_π¥Ÿ_öô
 = 1;

147 
	`π∆_èb_öôülize
(
CONFDIR
 "/rt_protos",

148 
π∆_π¥Ÿ_èb
, 256);

149 
	}
}

151 c⁄° * 
	$π∆_π¥Ÿ_n2a
(
id
, *
buf
, 
Àn
)

153 i‡(
id
<0 || id>=256) {

154 
	`¢¥ötf
(
buf
, 
Àn
, "%u", 
id
);

155  
buf
;

157 i‡(!
π∆_π¥Ÿ_èb
[
id
]) {

158 i‡(!
π∆_π¥Ÿ_öô
)

159 
	`π∆_π¥Ÿ_öôülize
();

161 i‡(
π∆_π¥Ÿ_èb
[
id
])

162  
π∆_π¥Ÿ_èb
[
id
];

163 
	`¢¥ötf
(
buf
, 
Àn
, "%u", 
id
);

164  
buf
;

165 
	}
}

167 
	$π∆_π¥Ÿ_a2n
(
__u32
 *
id
, c⁄° *
¨g
)

169 *
ˇche
 = 
NULL
;

170 
ªs
;

171 *
íd
;

172 
i
;

174 i‡(
ˇche
 && 
	`°rcmp
(ˇche, 
¨g
) == 0) {

175 *
id
 = 
ªs
;

179 i‡(!
π∆_π¥Ÿ_öô
)

180 
	`π∆_π¥Ÿ_öôülize
();

182 
i
=0; i<256; i++) {

183 i‡(
π∆_π¥Ÿ_èb
[
i
] &&

184 
	`°rcmp
(
π∆_π¥Ÿ_èb
[
i
], 
¨g
) == 0) {

185 
ˇche
 = 
π∆_π¥Ÿ_èb
[
i
];

186 
ªs
 = 
i
;

187 *
id
 = 
ªs
;

192 
ªs
 = 
	`°πoul
(
¨g
, &
íd
, 0);

193 i‡(!
íd
 ||Énd =
¨g
 || *íd || 
ªs
 > 255)

195 *
id
 = 
ªs
;

197 
	}
}

199 * 
	gπ∆_πsc›e_èb
[256] = {

203 
	gπ∆_πsc›e_öô
;

205 
	$π∆_πsc›e_öôülize
()

207 
π∆_πsc›e_öô
 = 1;

208 
π∆_πsc›e_èb
[
RT_SCOPE_NOWHERE
] = "nowhere";

209 
π∆_πsc›e_èb
[
RT_SCOPE_HOST
] = "host";

210 
π∆_πsc›e_èb
[
RT_SCOPE_LINK
] = "link";

211 
π∆_πsc›e_èb
[
RT_SCOPE_SITE
] = "site";

212 
	`π∆_èb_öôülize
(
CONFDIR
 "/rt_scopes",

213 
π∆_πsc›e_èb
, 256);

214 
	}
}

216 c⁄° *
	$π∆_πsc›e_n2a
(
id
, *
buf
, 
Àn
)

218 i‡(
id
<0 || id>=256) {

219 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
id
);

220  
buf
;

222 i‡(!
π∆_πsc›e_èb
[
id
]) {

223 i‡(!
π∆_πsc›e_öô
)

224 
	`π∆_πsc›e_öôülize
();

226 i‡(
π∆_πsc›e_èb
[
id
])

227  
π∆_πsc›e_èb
[
id
];

228 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
id
);

229  
buf
;

230 
	}
}

232 
	$π∆_πsc›e_a2n
(
__u32
 *
id
, c⁄° *
¨g
)

234 c⁄° *
ˇche
 = 
NULL
;

235 
ªs
;

236 *
íd
;

237 
i
;

239 i‡(
ˇche
 && 
	`°rcmp
(ˇche, 
¨g
) == 0) {

240 *
id
 = 
ªs
;

244 i‡(!
π∆_πsc›e_öô
)

245 
	`π∆_πsc›e_öôülize
();

247 
i
=0; i<256; i++) {

248 i‡(
π∆_πsc›e_èb
[
i
] &&

249 
	`°rcmp
(
π∆_πsc›e_èb
[
i
], 
¨g
) == 0) {

250 
ˇche
 = 
π∆_πsc›e_èb
[
i
];

251 
ªs
 = 
i
;

252 *
id
 = 
ªs
;

257 
ªs
 = 
	`°πoul
(
¨g
, &
íd
, 0);

258 i‡(!
íd
 ||Énd =
¨g
 || *íd || 
ªs
 > 255)

260 *
id
 = 
ªs
;

262 
	}
}

265 * 
	gπ∆_πªÆm_èb
[256] = {

269 
	gπ∆_πªÆm_öô
;

271 
	$π∆_πªÆm_öôülize
()

273 
π∆_πªÆm_öô
 = 1;

274 
	`π∆_èb_öôülize
(
CONFDIR
 "/rt_realms",

275 
π∆_πªÆm_èb
, 256);

276 
	}
}

278 c⁄° *
	$π∆_πªÆm_n2a
(
id
, *
buf
, 
Àn
)

280 i‡(
id
<0 || id>=256) {

281 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
id
);

282  
buf
;

284 i‡(!
π∆_πªÆm_èb
[
id
]) {

285 i‡(!
π∆_πªÆm_öô
)

286 
	`π∆_πªÆm_öôülize
();

288 i‡(
π∆_πªÆm_èb
[
id
])

289  
π∆_πªÆm_èb
[
id
];

290 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
id
);

291  
buf
;

292 
	}
}

295 
	$π∆_πªÆm_a2n
(
__u32
 *
id
, c⁄° *
¨g
)

297 *
ˇche
 = 
NULL
;

298 
ªs
;

299 *
íd
;

300 
i
;

302 i‡(
ˇche
 && 
	`°rcmp
(ˇche, 
¨g
) == 0) {

303 *
id
 = 
ªs
;

307 i‡(!
π∆_πªÆm_öô
)

308 
	`π∆_πªÆm_öôülize
();

310 
i
=0; i<256; i++) {

311 i‡(
π∆_πªÆm_èb
[
i
] &&

312 
	`°rcmp
(
π∆_πªÆm_èb
[
i
], 
¨g
) == 0) {

313 
ˇche
 = 
π∆_πªÆm_èb
[
i
];

314 
ªs
 = 
i
;

315 *
id
 = 
ªs
;

320 
ªs
 = 
	`°πoul
(
¨g
, &
íd
, 0);

321 i‡(!
íd
 ||Énd =
¨g
 || *íd || 
ªs
 > 255)

323 *
id
 = 
ªs
;

325 
	}
}

328 
π∆_hash_íåy
 
	gdÊt_èbÀ_íåy
 = { .
«me
 = "default" };

329 
π∆_hash_íåy
 
	gmaö_èbÀ_íåy
 = { .
«me
 = "main" };

330 
π∆_hash_íåy
 
	gloˇl_èbÀ_íåy
 = { .
«me
 = "local" };

332 
π∆_hash_íåy
 * 
	gπ∆_πèbÀ_hash
[256] = {

333 [
RT_TABLE_DEFAULT
] = &
dÊt_èbÀ_íåy
,

334 [
RT_TABLE_MAIN
] = &
maö_èbÀ_íåy
,

335 [
RT_TABLE_LOCAL
] = &
loˇl_èbÀ_íåy
,

338 
	gπ∆_πèbÀ_öô
;

340 
	$π∆_πèbÀ_öôülize
()

342 
i
;

344 
π∆_πèbÀ_öô
 = 1;

345 
i
 = 0; i < 256; i++) {

346 i‡(
π∆_πèbÀ_hash
[
i
])

347 
π∆_πèbÀ_hash
[
i
]->
id
 = i;

349 
	`π∆_hash_öôülize
(
CONFDIR
 "/rt_tables",

350 
π∆_πèbÀ_hash
, 256);

351 
	}
}

353 c⁄° * 
	$π∆_πèbÀ_n2a
(
__u32
 
id
, *
buf
, 
Àn
)

355 
π∆_hash_íåy
 *
íåy
;

357 i‡(
id
 > 
RT_TABLE_MAX
) {

358 
	`¢¥ötf
(
buf
, 
Àn
, "%u", 
id
);

359  
buf
;

361 i‡(!
π∆_πèbÀ_öô
)

362 
	`π∆_πèbÀ_öôülize
();

363 
íåy
 = 
π∆_πèbÀ_hash
[
id
 & 255];

364 
íåy
 &&É¡ry->
id
 != id)

365 
íåy
 =É¡ry->
√xt
;

366 i‡(
íåy
)

367  
íåy
->
«me
;

368 
	`¢¥ötf
(
buf
, 
Àn
, "%u", 
id
);

369  
buf
;

370 
	}
}

372 
	$π∆_πèbÀ_a2n
(
__u32
 *
id
, c⁄° *
¨g
)

374 c⁄° *
ˇche
 = 
NULL
;

375 
ªs
;

376 
π∆_hash_íåy
 *
íåy
;

377 *
íd
;

378 
__u32
 
i
;

380 i‡(
ˇche
 && 
	`°rcmp
(ˇche, 
¨g
) == 0) {

381 *
id
 = 
ªs
;

385 i‡(!
π∆_πèbÀ_öô
)

386 
	`π∆_πèbÀ_öôülize
();

388 
i
=0; i<256; i++) {

389 
íåy
 = 
π∆_πèbÀ_hash
[
i
];

390 
íåy
 && 
	`°rcmp
”¡ry->
«me
, 
¨g
))

391 
íåy
 =É¡ry->
√xt
;

392 i‡(
íåy
) {

393 
ˇche
 = 
íåy
->
«me
;

394 
ªs
 = 
íåy
->
id
;

395 *
id
 = 
ªs
;

400 
i
 = 
	`°πoul
(
¨g
, &
íd
, 0);

401 i‡(!
íd
 ||Énd =
¨g
 || *íd || 
i
 > 
RT_TABLE_MAX
)

403 *
id
 = 
i
;

405 
	}
}

408 * 
	gπ∆_πdsfõld_èb
[256] = {

412 
	gπ∆_πdsfõld_öô
;

414 
	$π∆_πdsfõld_öôülize
()

416 
π∆_πdsfõld_öô
 = 1;

417 
	`π∆_èb_öôülize
(
CONFDIR
 "/rt_dsfield",

418 
π∆_πdsfõld_èb
, 256);

419 
	}
}

421 c⁄° *
	$π∆_dsfõld_n2a
(
id
, *
buf
, 
Àn
)

423 i‡(
id
<0 || id>=256) {

424 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
id
);

425  
buf
;

427 i‡(!
π∆_πdsfõld_èb
[
id
]) {

428 i‡(!
π∆_πdsfõld_öô
)

429 
	`π∆_πdsfõld_öôülize
();

431 i‡(
π∆_πdsfõld_èb
[
id
])

432  
π∆_πdsfõld_èb
[
id
];

433 
	`¢¥ötf
(
buf
, 
Àn
, "0x%02x", 
id
);

434  
buf
;

435 
	}
}

438 
	$π∆_dsfõld_a2n
(
__u32
 *
id
, c⁄° *
¨g
)

440 *
ˇche
 = 
NULL
;

441 
ªs
;

442 *
íd
;

443 
i
;

445 i‡(
ˇche
 && 
	`°rcmp
(ˇche, 
¨g
) == 0) {

446 *
id
 = 
ªs
;

450 i‡(!
π∆_πdsfõld_öô
)

451 
	`π∆_πdsfõld_öôülize
();

453 
i
=0; i<256; i++) {

454 i‡(
π∆_πdsfõld_èb
[
i
] &&

455 
	`°rcmp
(
π∆_πdsfõld_èb
[
i
], 
¨g
) == 0) {

456 
ˇche
 = 
π∆_πdsfõld_èb
[
i
];

457 
ªs
 = 
i
;

458 *
id
 = 
ªs
;

463 
ªs
 = 
	`°πoul
(
¨g
, &
íd
, 16);

464 i‡(!
íd
 ||Énd =
¨g
 || *íd || 
ªs
 > 255)

466 *
id
 = 
ªs
;

468 
	}
}

471 
π∆_hash_íåy
 
	gdÊt_group_íåy
 = { .
id
 = 0, .
	g«me
 = "default" };

473 
π∆_hash_íåy
 * 
	gπ∆_group_hash
[256] = {

474 [0] = &
dÊt_group_íåy
,

477 
	gπ∆_group_öô
;

479 
	$π∆_group_öôülize
()

481 
π∆_group_öô
 = 1;

482 
	`π∆_hash_öôülize
(
CONFDIR
 "/group",

483 
π∆_group_hash
, 256);

484 
	}
}

486 
	$π∆_group_a2n
(*
id
, c⁄° *
¨g
)

488 c⁄° *
ˇche
 = 
NULL
;

489 
ªs
;

490 
π∆_hash_íåy
 *
íåy
;

491 *
íd
;

492 
i
;

494 i‡(
ˇche
 && 
	`°rcmp
(ˇche, 
¨g
) == 0) {

495 *
id
 = 
ªs
;

499 i‡(!
π∆_group_öô
)

500 
	`π∆_group_öôülize
();

502 
i
=0; i<256; i++) {

503 
íåy
 = 
π∆_group_hash
[
i
];

504 
íåy
 && 
	`°rcmp
”¡ry->
«me
, 
¨g
))

505 
íåy
 =É¡ry->
√xt
;

506 i‡(
íåy
) {

507 
ˇche
 = 
íåy
->
«me
;

508 
ªs
 = 
íåy
->
id
;

509 *
id
 = 
ªs
;

514 
i
 = 
	`°πﬁ
(
¨g
, &
íd
, 0);

515 i‡(!
íd
 ||Énd =
¨g
 || *íd || 
i
 < 0)

517 *
id
 = 
i
;

519 
	}
}

521 c⁄° *
	$π∆_group_n2a
(
id
, *
buf
, 
Àn
)

523 
π∆_hash_íåy
 *
íåy
;

524 
i
;

526 i‡(!
π∆_group_öô
)

527 
	`π∆_group_öôülize
();

529 
i
=0; i<256; i++) {

530 
íåy
 = 
π∆_group_hash
[
i
];

531 i‡(
íåy
 &&É¡ry->
id
 == id) {

532  
íåy
->
«me
;

536 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
id
);

537  
buf
;

538 
	}
}

540 *
	g∆_¥Ÿo_èb
[256] = {

541 [
NETLINK_ROUTE
] = "rtnl",

542 [
NETLINK_UNUSED
] = "unused",

543 [
NETLINK_USERSOCK
] = "usersock",

544 [
NETLINK_FIREWALL
] = "fw",

545 [
NETLINK_SOCK_DIAG
] = "tcpdiag",

546 [
NETLINK_NFLOG
] = "nflog",

547 [
NETLINK_XFRM
] = "xfrm",

548 [
NETLINK_SELINUX
] = "selinux",

549 [
NETLINK_ISCSI
] = "iscsi",

550 [
NETLINK_AUDIT
] = "audit",

551 [
NETLINK_FIB_LOOKUP
] = "fiblookup",

552 [
NETLINK_CONNECTOR
] = "connector",

553 [
NETLINK_NETFILTER
] = "nft",

554 [
NETLINK_IP6_FW
] = "ip6fw",

555 [
NETLINK_DNRTMSG
] = "dec-rt",

556 [
NETLINK_KOBJECT_UEVENT
] = "uevent",

557 [
NETLINK_GENERIC
] = "genl",

558 [
NETLINK_SCSITRANSPORT
] = "scsi-trans",

559 [
NETLINK_ECRYPTFS
] = "ecryptfs",

560 [
NETLINK_RDMA
] = "rdma",

561 [
NETLINK_CRYPTO
] = "crypto",

564 
	g∆_¥Ÿo_öô
;

566 
	$∆_¥Ÿo_öôülize
()

568 
∆_¥Ÿo_öô
 = 1;

569 
	`π∆_èb_öôülize
(
CONFDIR
 "/nl_protos",

570 
∆_¥Ÿo_èb
, 256);

571 
	}
}

573 c⁄° *
	$∆_¥Ÿo_n2a
(
id
, *
buf
, 
Àn
)

575 i‡(
id
 < 0 || id >= 256) {

576 
	`¢¥ötf
(
buf
, 
Àn
, "%u", 
id
);

577  
buf
;

580 i‡(!
∆_¥Ÿo_öô
)

581 
	`∆_¥Ÿo_öôülize
();

583 i‡(
∆_¥Ÿo_èb
[
id
])

584  
∆_¥Ÿo_èb
[
id
];

586 
	`¢¥ötf
(
buf
, 
Àn
, "%u", 
id
);

587  
buf
;

588 
	}
}

590 
	$∆_¥Ÿo_a2n
(
__u32
 *
id
, c⁄° *
¨g
)

592 *
ˇche
 = 
NULL
;

593 
ªs
;

594 *
íd
;

595 
i
;

597 i‡(
ˇche
 && 
	`°rcmp
(ˇche, 
¨g
) == 0) {

598 *
id
 = 
ªs
;

602 i‡(!
∆_¥Ÿo_öô
)

603 
	`∆_¥Ÿo_öôülize
();

605 
i
 = 0; i < 256; i++) {

606 i‡(
∆_¥Ÿo_èb
[
i
] &&

607 
	`°rcmp
(
∆_¥Ÿo_èb
[
i
], 
¨g
) == 0) {

608 
ˇche
 = 
∆_¥Ÿo_èb
[
i
];

609 
ªs
 = 
i
;

610 *
id
 = 
ªs
;

615 
ªs
 = 
	`°πoul
(
¨g
, &
íd
, 0);

616 i‡(!
íd
 ||Énd =
¨g
 || *íd || 
ªs
 > 255)

618 *
id
 = 
ªs
;

620 
	}
}

	@lib/utils.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<m©h.h
>

16 
	~<uni°d.h
>

17 
	~<sy¶og.h
>

18 
	~<f˙é.h
>

19 
	~<limôs.h
>

20 
	~<sys/sockë.h
>

21 
	~<√töë/ö.h
>

22 
	~<°rög.h
>

23 
	~<√tdb.h
>

24 
	~<¨∑/öë.h
>

25 
	~<asm/ty≥s.h
>

26 
	~<löux/pkt_sched.h
>

27 
	~<löux/∑øm.h
>

28 
	~<löux/if_¨p.h
>

29 
	~<löux/m∂s.h
>

30 
	~<time.h
>

31 
	~<sys/time.h
>

32 
	~<î∫o.h
>

34 
	~"π_«mes.h
"

35 
	~"utûs.h
"

36 
	~"«me•a˚.h
"

38 
	gtime°amp_sh‹t
 = 0;

40 
	$gë_öãgî
(*
vÆ
, c⁄° *
¨g
, 
ba£
)

42 
ªs
;

43 *
±r
;

45 i‡(!
¨g
 || !*arg)

48 
ªs
 = 
	`°πﬁ
(
¨g
, &
±r
, 
ba£
);

55 i‡(!
±r
 ||Öå =
¨g
 || *ptr)

62 i‡((
ªs
 =
LONG_MAX
 ||Ñe†=
LONG_MIN
Ë&& 
î∫o
 =
ERANGE
)

66 i‡(
ªs
 < 
INT_MIN
 ||Ñe†> 
INT_MAX
)

69 *
vÆ
 = 
ªs
;

71 
	}
}

73 
	$mask2bôs
(
__u32
 
√tmask
)

75 
bôs
 = 0;

76 
__u32
 
mask
 = 
	`¡ohl
(
√tmask
);

77 
__u32
 
ho°
 = ~
mask
;

80 i‡((
ho°
 & (host + 1)) != 0)

83 ; 
mask
; mask <<= 1)

84 ++
bôs
;

85  
bôs
;

86 
	}
}

88 
	$gë_√tmask
(*
vÆ
, c⁄° *
¨g
, 
ba£
)

90 
öë_¥efix
 
addr
;

92 i‡(!
	`gë_unsig√d
(
vÆ
, 
¨g
, 
ba£
))

96 i‡(!
	`gë_addr_1
(&
addr
, 
¨g
, 
AF_INET
Ë&&áddr.
Ámûy
 == AF_INET) {

97 
b
 = 
	`mask2bôs
(
addr
.
d©a
[0]);

99 i‡(
b
 >= 0) {

100 *
vÆ
 = 
b
;

106 
	}
}

108 
	$gë_unsig√d
(*
vÆ
, c⁄° *
¨g
, 
ba£
)

110 
ªs
;

111 *
±r
;

113 i‡(!
¨g
 || !*arg)

116 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

119 i‡(!
±r
 ||Öå =
¨g
 || *ptr)

123 i‡(
ªs
 =
ULONG_MAX
 && 
î∫o
 =
ERANGE
)

127 i‡(
ªs
 > 
UINT_MAX
)

130 *
vÆ
 = 
ªs
;

132 
	}
}

141 
	$gë_time_πt
(*
vÆ
, c⁄° *
¨g
, *
øw
)

143 
t
;

144 
ªs
;

145 *
p
;

147 i‡(
	`°rchr
(
¨g
, '.'Ë!
NULL
) {

148 
t
 = 
	`°πod
(
¨g
, &
p
);

149 i‡(
t
 < 0.0)

153 i‡(!
p
 ||Ö =
¨g
)

157 i‡((
t
 =
HUGE_VALF
 ||Å =
HUGE_VALL
Ë&& 
î∫o
 =
ERANGE
)

160 
ªs
 = 
	`°πoul
(
¨g
, &
p
, 0);

163 i‡(!
p
 ||Ö =
¨g
)

167 i‡(
ªs
 =
ULONG_MAX
 && 
î∫o
 =
ERANGE
)

170 
t
 = ()
ªs
;

173 i‡(
p
 =
¨g
)

175 *
øw
 = 1;

177 i‡(*
p
) {

178 *
øw
 = 0;

179 i‡(
	`°rˇ£cmp
(
p
, "s") == 0 || strcasecmp(p, "sec")==0 ||

180 
	`°rˇ£cmp
(
p
, "secs")==0)

181 
t
 *= 1000;

182 i‡(
	`°rˇ£cmp
(
p
, "ms") == 0 || strcasecmp(p, "msec")==0 ||

183 
	`°rˇ£cmp
(
p
, "msecs") == 0)

184 
t
 *= 1.0;

191 *
vÆ
 = 
t
;

192 i‡(*
vÆ
 < 
t
)

193 *
vÆ
 += 1;

197 
	}
}

199 
	$gë_u64
(
__u64
 *
vÆ
, c⁄° *
¨g
, 
ba£
)

201 
ªs
;

202 *
±r
;

204 i‡(!
¨g
 || !*arg)

207 
ªs
 = 
	`°πouŒ
(
¨g
, &
±r
, 
ba£
);

210 i‡(!
±r
 ||Öå =
¨g
 || *ptr)

214 i‡(
ªs
 =
ULLONG_MAX
 && 
î∫o
 =
ERANGE
)

218 i‡(
ªs
 > 0xFFFFFFFFFFFFFFFFULL)

221 *
vÆ
 = 
ªs
;

223 
	}
}

225 
	$gë_u32
(
__u32
 *
vÆ
, c⁄° *
¨g
, 
ba£
)

227 
ªs
;

228 *
±r
;

230 i‡(!
¨g
 || !*arg)

232 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

235 i‡(!
±r
 ||Öå =
¨g
 || *ptr)

239 i‡(
ªs
 =
ULONG_MAX
 && 
î∫o
 =
ERANGE
)

243 i‡(
ªs
 > 0xFFFFFFFFUL)

246 *
vÆ
 = 
ªs
;

248 
	}
}

250 
	$gë_u16
(
__u16
 *
vÆ
, c⁄° *
¨g
, 
ba£
)

252 
ªs
;

253 *
±r
;

255 i‡(!
¨g
 || !*arg)

257 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

260 i‡(!
±r
 ||Öå =
¨g
 || *ptr)

264 i‡(
ªs
 =
ULONG_MAX
 && 
î∫o
 =
ERANGE
)

267 i‡(
ªs
 > 0xFFFFUL)

270 *
vÆ
 = 
ªs
;

272 
	}
}

274 
	$gë_u8
(
__u8
 *
vÆ
, c⁄° *
¨g
, 
ba£
)

276 
ªs
;

277 *
±r
;

279 i‡(!
¨g
 || !*arg)

282 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

284 i‡(!
±r
 ||Öå =
¨g
 || *ptr)

288 i‡(
ªs
 =
ULONG_MAX
 && 
î∫o
 =
ERANGE
)

291 i‡(
ªs
 > 0xFFUL)

294 *
vÆ
 = 
ªs
;

296 
	}
}

298 
	$gë_s32
(
__s32
 *
vÆ
, c⁄° *
¨g
, 
ba£
)

300 
ªs
;

301 *
±r
;

303 
î∫o
 = 0;

305 i‡(!
¨g
 || !*arg)

307 
ªs
 = 
	`°πﬁ
(
¨g
, &
±r
, 
ba£
);

308 i‡(!
±r
 ||Öå =
¨g
 || *ptr)

310 i‡((
ªs
 =
LONG_MIN
 ||Ñe†=
LONG_MAX
Ë&& 
î∫o
 =
ERANGE
)

312 i‡(
ªs
 > 
INT32_MAX
 ||Ñe†< 
INT32_MIN
)

315 *
vÆ
 = 
ªs
;

317 
	}
}

319 
	$gë_s16
(
__s16
 *
vÆ
, c⁄° *
¨g
, 
ba£
)

321 
ªs
;

322 *
±r
;

324 i‡(!
¨g
 || !*arg)

326 
ªs
 = 
	`°πﬁ
(
¨g
, &
±r
, 
ba£
);

327 i‡(!
±r
 ||Öå =
¨g
 || *ptr)

329 i‡((
ªs
 =
LONG_MIN
 ||Ñe†=
LONG_MAX
Ë&& 
î∫o
 =
ERANGE
)

331 i‡(
ªs
 > 0x7FFF ||Ñes < -0x8000)

334 *
vÆ
 = 
ªs
;

336 
	}
}

338 
	$gë_s8
(
__s8
 *
vÆ
, c⁄° *
¨g
, 
ba£
)

340 
ªs
;

341 *
±r
;

343 i‡(!
¨g
 || !*arg)

345 
ªs
 = 
	`°πﬁ
(
¨g
, &
±r
, 
ba£
);

346 i‡(!
±r
 ||Öå =
¨g
 || *ptr)

348 i‡((
ªs
 =
LONG_MIN
 ||Ñe†=
LONG_MAX
Ë&& 
î∫o
 =
ERANGE
)

350 i‡(
ªs
 > 0x7F ||Ñes < -0x80)

352 *
vÆ
 = 
ªs
;

354 
	}
}

359 
	$gë_addr_ùv4
(
__u8
 *
≠
, c⁄° *
˝
)

361 
i
;

363 
i
 = 0; i < 4; i++) {

364 
n
;

365 *
ídp
;

367 
n
 = 
	`°πoul
(
˝
, &
ídp
, 0);

368 i‡(
n
 > 255)

371 i‡(
ídp
 =
˝
)

374 
≠
[
i
] = 
n
;

376 i‡(*
ídp
 == '\0')

379 i‡(
i
 =3 || *
ídp
 != '.')

381 
˝
 = 
ídp
 + 1;

385 
	}
}

387 
	$gë_addr_1
(
öë_¥efix
 *
addr
, c⁄° *
«me
, 
Ámûy
)

389 
	`mem£t
(
addr
, 0, (*addr));

391 i‡(
	`°rcmp
(
«me
, "default") == 0 ||

392 
	`°rcmp
(
«me
, "all") == 0 ||

393 
	`°rcmp
(
«me
, "any") == 0) {

394 i‡((
Ámûy
 =
AF_DEC√t
Ë|| (Ámûy =
AF_MPLS
))

396 
addr
->
Ámûy
 = family;

397 
addr
->
byãÀn
 = (
Ámûy
 =
AF_INET6
 ? 16 : 4);

398 
addr
->
bôÀn
 = -1;

402 i‡(
Ámûy
 =
AF_PACKET
) {

403 
Àn
;

404 
Àn
 = 
	`Œ_addr_a2n
((*)&
addr
->
d©a
, ◊ddr->d©a), 
«me
);

405 i‡(
Àn
 < 0)

408 
addr
->
Ámûy
 = 
AF_PACKET
;

409 
addr
->
byãÀn
 = 
Àn
;

410 
addr
->
bôÀn
 = 
Àn
 * 8;

414 i‡(
	`°rchr
(
«me
, ':')) {

415 
addr
->
Ámûy
 = 
AF_INET6
;

416 i‡(
Ámûy
 !
AF_UNSPEC
 && famûy !
AF_INET6
)

418 i‡(
	`öë_±⁄
(
AF_INET6
, 
«me
, 
addr
->
d©a
) <= 0)

420 
addr
->
byãÀn
 = 16;

421 
addr
->
bôÀn
 = -1;

425 i‡(
Ámûy
 =
AF_DEC√t
) {

426 
dn_«ddr
 
d«
;

427 
addr
->
Ámûy
 = 
AF_DEC√t
;

428 i‡(
	`d√t_±⁄
(
AF_DEC√t
, 
«me
, &
d«
) <= 0)

430 
	`mem˝y
(
addr
->
d©a
, 
d«
.
a_addr
, 2);

431 
addr
->
byãÀn
 = 2;

432 
addr
->
bôÀn
 = -1;

436 i‡(
Ámûy
 =
AF_MPLS
) {

437 
i
;

438 
addr
->
Ámûy
 = 
AF_MPLS
;

439 i‡(
	`m∂s_±⁄
(
AF_MPLS
, 
«me
, 
addr
->
d©a
) <= 0)

441 
addr
->
byãÀn
 = 4;

442 
addr
->
bôÀn
 = 20;

444 
i
 = 0; i < 8; i++) {

445 i‡(
	`¡ohl
(
addr
->
d©a
[
i
]Ë& 
MPLS_LS_S_MASK
) {

446 
addr
->
byãÀn
 = (
i
 + 1)*4;

453 
addr
->
Ámûy
 = 
AF_INET
;

454 i‡(
Ámûy
 !
AF_UNSPEC
 && famûy !
AF_INET
)

457 i‡(
	`gë_addr_ùv4
((
__u8
 *)
addr
->
d©a
, 
«me
) <= 0)

460 
addr
->
byãÀn
 = 4;

461 
addr
->
bôÀn
 = -1;

463 
	}
}

465 
	$af_bô_Àn
(
af
)

467 
af
) {

468 
AF_INET6
:

470 
AF_INET
:

472 
AF_DEC√t
:

474 
AF_IPX
:

476 
AF_MPLS
:

481 
	}
}

483 
	$af_byã_Àn
(
af
)

485  
	`af_bô_Àn
(
af
) / 8;

486 
	}
}

488 
	$gë_¥efix_1
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
)

490 
îr
;

491 
∂í
;

492 *
¶ash
;

494 
	`mem£t
(
d°
, 0, (*dst));

496 i‡(
	`°rcmp
(
¨g
, "default") == 0 ||

497 
	`°rcmp
(
¨g
, "any") == 0 ||

498 
	`°rcmp
(
¨g
, "all") == 0) {

499 i‡((
Ámûy
 =
AF_DEC√t
Ë|| (Ámûy =
AF_MPLS
))

501 
d°
->
Ámûy
 = family;

502 
d°
->
byãÀn
 = 0;

503 
d°
->
bôÀn
 = 0;

507 
¶ash
 = 
	`°rchr
(
¨g
, '/');

508 i‡(
¶ash
)

509 *
¶ash
 = 0;

511 
îr
 = 
	`gë_addr_1
(
d°
, 
¨g
, 
Ámûy
);

512 i‡(
îr
 == 0) {

513 
d°
->
bôÀn
 = 
	`af_bô_Àn
(d°->
Ámûy
);

515 i‡(
¶ash
) {

516 i‡(
	`gë_√tmask
(&
∂í
, 
¶ash
+1, 0)

517 || 
∂í
 > 
d°
->
bôÀn
) {

518 
îr
 = -1;

519 
d⁄e
;

521 
d°
->
Êags
 |
PREFIXLEN_SPECIFIED
;

522 
d°
->
bôÀn
 = 
∂í
;

525 
d⁄e
:

526 i‡(
¶ash
)

527 *
¶ash
 = '/';

528  
îr
;

529 
	}
}

531 
	$gë_addr
(
öë_¥efix
 *
d°
, c⁄° *
¨g
, 
Ámûy
)

533 i‡(
	`gë_addr_1
(
d°
, 
¨g
, 
Ámûy
)) {

534 
	`Ârötf
(
°dîr
, "Error: %sáddress isÉxpectedÑatherÅhan \"%s\".\n",

535 
	`Ámûy_«me
(
Ámûy
Ë,
¨g
);

536 
	`exô
(1);

539 
	}
}

541 
	$gë_¥efix
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
)

543 i‡(
Ámûy
 =
AF_PACKET
) {

544 
	`Ârötf
(
°dîr
, "Eº‹: \"%s\" may bêöëÖªfix, buàô i†nŸáŒowed i¿thi†c⁄ãxt.\n", 
¨g
);

545 
	`exô
(1);

547 i‡(
	`gë_¥efix_1
(
d°
, 
¨g
, 
Ámûy
)) {

548 
	`Ârötf
(
°dîr
, "Error: %sÖrefix isÉxpectedÑatherÅhan \"%s\".\n",

549 
	`Ámûy_«me
(
Ámûy
Ë,
¨g
);

550 
	`exô
(1);

553 
	}
}

555 
__u32
 
	$gë_addr32
(c⁄° *
«me
)

557 
öë_¥efix
 
addr
;

558 i‡(
	`gë_addr_1
(&
addr
, 
«me
, 
AF_INET
)) {

559 
	`Ârötf
(
°dîr
, "Eº‹:á¿IPáddªs†i†ex≥˘edÑ©hîÅh™ \"%s\"\n", 
«me
);

560 
	`exô
(1);

562  
addr
.
d©a
[0];

563 
	}
}

565 
	$öcom∂ëe_comm™d
()

567 
	`Ârötf
(
°dîr
, "CommandÜine isÇot complete. Try option \"help\"\n");

568 
	`exô
(-1);

569 
	}
}

571 
	$misßrg
(c⁄° *
key
)

573 
	`Ârötf
(
°dîr
, "Eº‹:árgumíà\"%s\" i†ªquúed\n", 
key
);

574 
	`exô
(-1);

575 
	}
}

577 
	$öv¨g
(c⁄° *
msg
, c⁄° *
¨g
)

579 
	`Ârötf
(
°dîr
, "Eº‹:árgumíà\"%s\" i†wr⁄g: %s\n", 
¨g
, 
msg
);

580 
	`exô
(-1);

581 
	}
}

583 
	$du∑rg
(c⁄° *
key
, c⁄° *
¨g
)

585 
	`Ârötf
(
°dîr
, "Eº‹: du∂iˇã \"%s\": \"%s\" i†thê£c⁄d vÆue.\n", 
key
, 
¨g
);

586 
	`exô
(-1);

587 
	}
}

589 
	$du∑rg2
(c⁄° *
key
, c⁄° *
¨g
)

591 
	`Ârötf
(
°dîr
, "Eº‹:Éôhî \"%s\" i†du∂iˇã, o∏\"%s\" i†®g¨bage.\n", 
key
, 
¨g
);

592 
	`exô
(-1);

593 
	}
}

595 
	$m©ches
(c⁄° *
cmd
, c⁄° *
∑âîn
)

597 
Àn
 = 
	`°æí
(
cmd
);

598 i‡(
Àn
 > 
	`°æí
(
∑âîn
))

600  
	`memcmp
(
∑âîn
, 
cmd
, 
Àn
);

601 
	}
}

603 
	$öë_addr_m©ch
(c⁄° 
öë_¥efix
 *
a
, c⁄° i√t_¥efix *
b
, 
bôs
)

605 c⁄° 
__u32
 *
a1
 = 
a
->
d©a
;

606 c⁄° 
__u32
 *
a2
 = 
b
->
d©a
;

607 
w‹ds
 = 
bôs
 >> 0x05;

609 
bôs
 &= 0x1f;

611 i‡(
w‹ds
)

612 i‡(
	`memcmp
(
a1
, 
a2
, 
w‹ds
 << 2))

615 i‡(
bôs
) {

616 
__u32
 
w1
, 
w2
;

617 
__u32
 
mask
;

619 
w1
 = 
a1
[
w‹ds
];

620 
w2
 = 
a2
[
w‹ds
];

622 
mask
 = 
	`ht⁄l
((0xffffffffË<< (0x20 - 
bôs
));

624 i‡((
w1
 ^ 
w2
Ë& 
mask
)

629 
	}
}

631 
	g__ùrouã2_hz_öã∫Æ
;

633 
	$__gë_hz
()

635 
«me
[1024];

636 
hz
 = 0;

637 
FILE
 *
Â
;

639 i‡(
	`gëív
("HZ"))

640  
	`©oi
(
	`gëív
("HZ")Ë? : 
HZ
;

642 i‡(
	`gëív
("PROC_NET_PSCHED")) {

643 
	`¢¥ötf
(
«me
, “ame)-1, "%s", 
	`gëív
("PROC_NET_PSCHED"));

644 } i‡(
	`gëív
("PROC_ROOT")) {

645 
	`¢¥ötf
(
«me
, “ame)-1, "%s/√t/psched", 
	`gëív
("PROC_ROOT"));

647 
	`°r˝y
(
«me
, "/proc/net/psched");

649 
Â
 = 
	`f›í
(
«me
, "r");

651 i‡(
Â
) {

652 
nom
, 
díom
;

653 i‡(
	`fsˇnf
(
Â
, "%*08x%*08x%08x%08x", &
nom
, &
díom
) == 2)

654 i‡(
nom
 == 1000000)

655 
hz
 = 
díom
;

656 
	`f˛o£
(
Â
);

658 i‡(
hz
)

659  
hz
;

660  
HZ
;

661 
	}
}

663 
	g__ùrouã2_u£r_hz_öã∫Æ
;

665 
	$__gë_u£r_hz
()

667  
	`sysc⁄f
(
_SC_CLK_TCK
);

668 
	}
}

670 c⁄° *
	$π_addr_n2a
(
af
, 
Àn
, c⁄° *
addr
, *
buf
, 
buÊí
)

672 
af
) {

673 
AF_INET
:

674 
AF_INET6
:

675  
	`öë_¡›
(
af
, 
addr
, 
buf
, 
buÊí
);

676 
AF_MPLS
:

677  
	`m∂s_¡›
(
af
, 
addr
, 
buf
, 
buÊí
);

678 
AF_IPX
:

679  
	`ùx_¡›
(
af
, 
addr
, 
buf
, 
buÊí
);

680 
AF_DEC√t
:

682 
dn_«ddr
 
d«
 = { 2, { 0, 0, }};

683 
	`mem˝y
(
d«
.
a_addr
, 
addr
, 2);

684  
	`d√t_¡›
(
af
, &
d«
, 
buf
, 
buÊí
);

686 
AF_PACKET
:

687  
	`Œ_addr_n2a
(
addr
, 
Àn
, 
ARPHRD_VOID
, 
buf
, 
buÊí
);

691 
	}
}

693 
	$ªad_Ámûy
(c⁄° *
«me
)

695 
Ámûy
 = 
AF_UNSPEC
;

696 i‡(
	`°rcmp
(
«me
, "inet") == 0)

697 
Ámûy
 = 
AF_INET
;

698 i‡(
	`°rcmp
(
«me
, "inet6") == 0)

699 
Ámûy
 = 
AF_INET6
;

700 i‡(
	`°rcmp
(
«me
, "dnet") == 0)

701 
Ámûy
 = 
AF_DEC√t
;

702 i‡(
	`°rcmp
(
«me
, "link") == 0)

703 
Ámûy
 = 
AF_PACKET
;

704 i‡(
	`°rcmp
(
«me
, "ipx") == 0)

705 
Ámûy
 = 
AF_IPX
;

706 i‡(
	`°rcmp
(
«me
, "mpls") == 0)

707 
Ámûy
 = 
AF_MPLS
;

708 i‡(
	`°rcmp
(
«me
, "bridge") == 0)

709 
Ámûy
 = 
AF_BRIDGE
;

710  
Ámûy
;

711 
	}
}

713 c⁄° *
	$Ámûy_«me
(
Ámûy
)

715 i‡(
Ámûy
 =
AF_INET
)

717 i‡(
Ámûy
 =
AF_INET6
)

719 i‡(
Ámûy
 =
AF_DEC√t
)

721 i‡(
Ámûy
 =
AF_PACKET
)

723 i‡(
Ámûy
 =
AF_IPX
)

725 i‡(
Ámûy
 =
AF_MPLS
)

727 i‡(
Ámûy
 =
AF_BRIDGE
)

730 
	}
}

732 #ifde‡
RESOLVE_HOSTNAMES


733 
	s«mîec


735 
«mîec
 *
	m√xt
;

736 c⁄° *
	m«me
;

737 
öë_¥efix
 
	maddr
;

740 
	#NHASH
 257

	)

741 
«mîec
 *
	gnht
[
NHASH
];

743 c⁄° *
	$ªsﬁve_addªss
(c⁄° *
addr
, 
Àn
, 
af
)

745 
«mîec
 *
n
;

746 
ho°ít
 *
h_ít
;

747 
hash
;

748 
nŸfú°
;

751 i‡(
af
 =
AF_INET6
 && ((
__u32
*)
addr
)[0] == 0 &&

752 ((
__u32
*)
addr
)[1] =0 && ((__u32*Ôddr)[2] =
	`ht⁄l
(0xffff)) {

753 
af
 = 
AF_INET
;

754 
addr
 += 12;

755 
Àn
 = 4;

758 
hash
 = *(
__u32
 *)(
addr
 + 
Àn
 - 4Ë% 
NHASH
;

760 
n
 = 
nht
[
hash
];Ç;Ç =Ç->
√xt
) {

761 i‡(
n
->
addr
.
Ámûy
 =
af
 &&

762 
n
->
addr
.
byãÀn
 =
Àn
 &&

763 
	`memcmp
(
n
->
addr
.
d©a
,áddr, 
Àn
) == 0)

764  
n
->
«me
;

766 i‡((
n
 = 
	`mÆloc
((*n))Ë=
NULL
)

767  
NULL
;

768 
n
->
addr
.
Ámûy
 = 
af
;

769 
n
->
addr
.
byãÀn
 = 
Àn
;

770 
n
->
«me
 = 
NULL
;

771 
	`mem˝y
(
n
->
addr
.
d©a
,áddr, 
Àn
);

772 
n
->
√xt
 = 
nht
[
hash
];

773 
nht
[
hash
] = 
n
;

774 i‡(++
nŸfú°
 == 1)

775 
	`£tho°ít
(1);

776 
	`fÊush
(
°dout
);

778 i‡((
h_ít
 = 
	`gëho°byaddr
(
addr
, 
Àn
, 
af
)Ë!
NULL
)

779 
n
->
«me
 = 
	`°rdup
(
h_ít
->
h_«me
);

782  
n
->
«me
;

783 
	}
}

786 c⁄° *
	$f‹m©_ho°
(
af
, 
Àn
, c⁄° *
addr
,

787 *
buf
, 
buÊí
)

789 #ifde‡
RESOLVE_HOSTNAMES


790 i‡(
ªsﬁve_ho°s
) {

791 c⁄° *
n
;

793 
Àn
 =Üí <0 ? 
	`af_byã_Àn
(
af
) :Üen;

795 i‡(
Àn
 > 0 &&

796 (
n
 = 
	`ªsﬁve_addªss
(
addr
, 
Àn
, 
af
)Ë!
NULL
)

797  
n
;

800  
	`π_addr_n2a
(
af
, 
Àn
, 
addr
, 
buf
, 
buÊí
);

801 
	}
}

804 *
	$hex°rög_n2a
(c⁄° 
__u8
 *
°r
, 
Àn
, *
buf
, 
bÀn
)

806 *
±r
 = 
buf
;

807 
i
;

809 
i
=0; i<
Àn
; i++) {

810 i‡(
bÀn
 < 3)

812 
	`•rötf
(
±r
, "%02x", 
°r
[
i
]);

813 
±r
 += 2;

814 
bÀn
 -= 2;

816  
buf
;

817 
	}
}

819 
__u8
* 
	$hex°rög_a2n
(c⁄° *
°r
, 
__u8
 *
buf
, 
bÀn
)

821 
˙t
 = 0;

822 *
íd±r
;

824 i‡(
	`°æí
(
°r
) % 2)

825  
NULL
;

826 
˙t
 < 
bÀn
 && 
	`°æí
(
°r
) > 1) {

827 
tmp
;

828 
tmp°r
[3];

830 
	`°∫˝y
(
tmp°r
, 
°r
, 2);

831 
tmp°r
[2] = '\0';

832 
tmp
 = 
	`°πoul
(
tmp°r
, &
íd±r
, 16);

833 i‡(
î∫o
 !0 || 
tmp
 > 0xFF || *
íd±r
 != '\0')

834  
NULL
;

835 
buf
[
˙t
++] = 
tmp
;

836 
°r
 += 2;

838  
buf
;

839 
	}
}

841 
	$¥öt_time°amp
(
FILE
 *
Â
)

843 
timevÆ
 
tv
;

844 
tm
 *tm;

846 
	`gëtimeofday
(&
tv
, 
NULL
);

847 
tm
 = 
	`loˇ…ime
(&
tv
.
tv_£c
);

849 i‡(
time°amp_sh‹t
) {

850 
tsh‹t
[40];

852 
	`°r·ime
(
tsh‹t
, —sh‹t), "%Y-%m-%dT%H:%M:%S", 
tm
);

853 
	`Ârötf
(
Â
, "[%s.%06ld] ", 
tsh‹t
, 
tv
.
tv_u£c
);

855 *
t°r
 = 
	`as˘ime
(
tm
);

857 
t°r
[
	`°æí
(tstr)-1] = 0;

858 
	`Ârötf
(
Â
, "Timestamp: %s %ld usec\n",

859 
t°r
, 
tv
.
tv_u£c
);

863 
	}
}

865 
	gcmdlöío
;

868 
ssize_t
 
	$gëcmdlöe
(**
löï
, 
size_t
 *
À≈
, 
FILE
 *
ö
)

870 
ssize_t
 
cc
;

871 *
˝
;

873 i‡((
cc
 = 
	`gëlöe
(
löï
, 
À≈
, 
ö
)) < 0)

874  
cc
;

875 ++
cmdlöío
;

877 
˝
 = 
	`°rchr
(*
löï
, '#');

878 i‡(
˝
)

879 *
˝
 = '\0';

881 (
˝
 = 
	`°r°r
(*
löï
, "\\\n")Ë!
NULL
) {

882 *
löe1
 = 
NULL
;

883 
size_t
 
Àn1
 = 0;

884 
ssize_t
 
cc1
;

886 i‡((
cc1
 = 
	`gëlöe
(&
löe1
, &
Àn1
, 
ö
)) < 0) {

887 
	`Ârötf
(
°dîr
, "Missing continuationÜine\n");

888  
cc1
;

891 ++
cmdlöío
;

892 *
˝
 = 0;

894 
˝
 = 
	`°rchr
(
löe1
, '#');

895 i‡(
˝
)

896 *
˝
 = '\0';

898 *
À≈
 = 
	`°æí
(*
löï
Ë+ såÀn(
löe1
) + 1;

899 *
löï
 = 
	`ªÆloc
(*löï, *
À≈
);

900 i‡(!*
löï
) {

901 
	`Ârötf
(
°dîr
, "Out of memory\n");

902 *
À≈
 = 0;

905 
cc
 +
cc1
 - 2;

906 
	`°rˇt
(*
löï
, 
löe1
);

907 
	`‰ì
(
löe1
);

909  
cc
;

910 
	}
}

913 
	$makórgs
(*
löe
, *
¨gv
[], 
max¨gs
)

915 c⁄° 
ws
[] = " \t\r\n";

916 *
˝
;

917 
¨gc
 = 0;

919 
˝
 = 
löe
 + 
	`°r•n
÷öe, 
ws
); *cp; cp += strspn(cp, ws)) {

920 i‡(
¨gc
 >(
max¨gs
 - 1)) {

921 
	`Ârötf
(
°dîr
, "Too manyárgumentsÅo command\n");

922 
	`exô
(1);

926 i‡(*
˝
 == '\'' || *cp == '"') {

927 
quŸe
 = *
˝
++;

929 
¨gv
[
¨gc
++] = 
˝
;

931 
˝
 = 
	`°rchr
(˝, 
quŸe
);

932 i‡(
˝
 =
NULL
) {

933 
	`Ârötf
(
°dîr
, "Unterminated quoted string\n");

934 
	`exô
(1);

936 *
˝
++ = 0;

940 
¨gv
[
¨gc
++] = 
˝
;

942 
˝
 +
	`°rc•n
(˝, 
ws
);

943 *
˝
++ = 0;

945 
¨gv
[
¨gc
] = 
NULL
;

947  
¨gc
;

948 
	}
}

950 
	$öë_gë_addr
(c⁄° *
§c
, 
__u32
 *
d°
, 
ö6_addr
 *
d°6
)

952 i‡(
	`°rchr
(
§c
, ':'))

953  
	`öë_±⁄
(
AF_INET6
, 
§c
, 
d°6
);

955  
	`öë_±⁄
(
AF_INET
, 
§c
, 
d°
);

956 
	}
}

958 
	$¥öt_∆msg_time°amp
(
FILE
 *
Â
, c⁄° 
∆msghdr
 *
n
)

960 *
t°r
;

961 
time_t
 
£cs
 = ((
__u32
*)
	`NLMSG_DATA
(
n
))[0];

962 
u£cs
 = ((
__u32
*)
	`NLMSG_DATA
(
n
))[1];

963 
t°r
 = 
	`as˘ime
(
	`loˇ…ime
(&
£cs
));

964 
t°r
[
	`°æí
(tstr)-1] = 0;

965 
	`Ârötf
(
Â
, "Time°amp: %†%lu us\n", 
t°r
, 
u£cs
);

966 
	}
}

968 
	$⁄_√äs
(*
n¢ame
, *
¨g
)

970 
√äs_func
 *
f
 = 
¨g
;

972 i‡(
	`√äs_swôch
(
n¢ame
))

975  
f
->
	`func
(
n¢ame
, f->
¨g
);

976 
	}
}

978 
	$⁄_√äs_œbñ
(*
n¢ame
, *
¨g
)

980 
	`¥ötf
("\¬ëns: %s\n", 
n¢ame
);

981  
	`⁄_√äs
(
n¢ame
, 
¨g
);

982 
	}
}

984 
do_óch_√äs
((*
func
)(*
n¢ame
, *
¨g
), *arg,

985 
boﬁ
 
show_œbñ
)

987 
√äs_func
 
nsf
 = { .
func
 = func, .
¨g
 =árg };

989 i‡(
show_œbñ
)

990  
	`√äs_f‹óch
(
⁄_√äs_œbñ
, &
nsf
);

992  
	`√äs_f‹óch
(
⁄_√äs
, &
nsf
);

993 
	}
}

995 *
	$öt_to_°r
(
vÆ
, *
buf
)

997 
	`•rötf
(
buf
, "%d", 
vÆ
);

998  
buf
;

999 
	}
}

	@misc/arpd.c

12 
	~<°dio.h
>

13 
	~<sy¶og.h
>

14 
	~<mÆloc.h
>

15 
	~<°rög.h
>

16 
	~<uni°d.h
>

17 
	~<°dlib.h
>

18 
	~<√tdb.h
>

19 
	~<db_185.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/pﬁl.h
>

22 
	~<î∫o.h
>

23 
	~<f˙é.h
>

24 
	~<sys/uio.h
>

25 
	~<sys/sockë.h
>

26 
	~<sys/time.h
>

27 
	~<time.h
>

28 
	~<sig«l.h
>

29 
	~<löux/if.h
>

30 
	~<löux/if_ëhî.h
>

31 
	~<löux/if_¨p.h
>

32 
	~<√töë/ö.h
>

33 
	~<¨∑/öë.h
>

34 
	~<löux/if_∑ckë.h
>

35 
	~<löux/fûãr.h
>

37 
	~"lib√éök.h
"

38 
	~"utûs.h
"

39 
	~"π_«mes.h
"

41 
	gªsﬁve_ho°s
;

43 
DB
 *
	gdba£
;

44 *
	gdb«me
 = "/var/lib/arpd/arpd.db";

46 
	gi‚um
;

47 *
	gifvec
;

48 **
	gi‚ames
;

50 
	sdbkey


52 
__u32
 
	miÁ˚
;

53 
__u32
 
	maddr
;

56 
	#IS_NEG
(
x
Ë(((
__u8
*)(x))[0] =0xFF)

	)

57 
	#NEG_TIME
(
x
Ë(((x)[2]<<24)|((x)[3]<<16)|((x)[4]<<8)|(x)[5])

	)

58 
	#NEG_AGE
(
x
Ë((
__u32
)
	`time
(
NULL
Ë- 
	`NEG_TIME
((
__u8
*)x))

	)

59 
	#NEG_VALID
(
x
Ë(
	`NEG_AGE
(xË< 
√g©ive_timeout
)

	)

60 
	#NEG_CNT
(
x
Ë(((
__u8
*)(x))[1])

	)

62 
π∆_h™dÀ
 
	gπh
;

64 
pﬁlfd
 
	gp£t
[2];

65 
	gudp_sock
 = -1;

67 vﬁ©ûê
	gdo_exô
;

68 vﬁ©ûê
	gdo_sync
;

69 vﬁ©ûê
	gdo_°©s
;

72 
	m¨p_√w
;

73 
	m¨p_ch™ge
;

75 
	m≠p_ªcv
;

76 
	m≠p_suc˚ss
;

77 
	m≠p_bad
;

78 
	m≠p_√g
;

79 
	m≠p_suµªs£d
;

81 
	mkîn_√g
;

82 
	mkîn_√w
;

83 
	mkîn_ch™ge
;

85 
	m¥obes_£¡
;

86 
	m¥obes_suµªs£d
;

87 } 
	g°©s
;

89 
	ga˘ive_¥obög
;

90 
	g√g©ive_timeout
 = 60;

91 
	gno_kî√l_brﬂdˇ°s
;

92 
	gbrﬂdˇ°_øã
 = 1000;

93 
	gbrﬂdˇ°_bur°
 = 3000;

94 
	gpﬁl_timeout
 = 30000;

96 
	$ußge
()

98 
	`Ârötf
(
°dîr
,

101 
	`exô
(1);

102 
	}
}

104 
	$h™dÀ_if
(
ifödex
)

106 
i
;

108 i‡(
i‚um
 == 0)

111 
i
=0; i<
i‚um
; i++)

112 i‡(
ifvec
[
i
] =
ifödex
)

115 
	}
}

117 
	gsys˘l_adju°ed
;

119 
	$do_sys˘l_adju°míts
()

121 
i
;

123 i‡(!
i‚um
)

126 
i
=0; i<
i‚um
; i++) {

127 
buf
[128];

128 
FILE
 *
Â
;

130 i‡(
a˘ive_¥obög
) {

131 
	`•rötf
(
buf
, "/¥oc/sys/√t/ùv4/√igh/%s/mˇ°_sﬁicô", 
i‚ames
[
i
]);

132 i‡((
Â
 = 
	`f›í
(
buf
, "w")Ë!
NULL
) {

133 i‡(
no_kî√l_brﬂdˇ°s
)

134 
	`°r˝y
(
buf
, "0\n");

136 
	`•rötf
(
buf
, "%d\n", 
a˘ive_¥obög
>=2 ? 1 : 3-active_probing);

137 
	`Âuts
(
buf
, 
Â
);

138 
	`f˛o£
(
Â
);

142 
	`•rötf
(
buf
, "/¥oc/sys/√t/ùv4/√igh/%s/≠p_sﬁicô", 
i‚ames
[
i
]);

143 i‡((
Â
 = 
	`f›í
(
buf
, "w")Ë!
NULL
) {

144 
	`•rötf
(
buf
, "%d\n", 
a˘ive_¥obög
<=1 ? 1 :áctive_probing);

145 
	`Âuts
(
buf
, 
Â
);

146 
	`f˛o£
(
Â
);

149 
sys˘l_adju°ed
 = 1;

150 
	}
}

152 
	$undo_sys˘l_adju°míts
()

154 
i
;

156 i‡(!
sys˘l_adju°ed
)

159 
i
=0; i<
i‚um
; i++) {

160 
buf
[128];

161 
FILE
 *
Â
;

163 i‡(
a˘ive_¥obög
) {

164 
	`•rötf
(
buf
, "/¥oc/sys/√t/ùv4/√igh/%s/mˇ°_sﬁicô", 
i‚ames
[
i
]);

165 i‡((
Â
 = 
	`f›í
(
buf
, "w")Ë!
NULL
) {

166 
	`°r˝y
(
buf
, "3\n");

167 
	`Âuts
(
buf
, 
Â
);

168 
	`f˛o£
(
Â
);

171 
	`•rötf
(
buf
, "/¥oc/sys/√t/ùv4/√igh/%s/≠p_sﬁicô", 
i‚ames
[
i
]);

172 i‡((
Â
 = 
	`f›í
(
buf
, "w")Ë!
NULL
) {

173 
	`°r˝y
(
buf
, "0\n");

174 
	`Âuts
(
buf
, 
Â
);

175 
	`f˛o£
(
Â
);

178 
sys˘l_adju°ed
 = 0;

179 
	}
}

182 
	$£nd_¥obe
(
ifödex
, 
__u32
 
addr
)

184 
i‰eq
 
i‰
;

185 
sockaddr_ö
 
d°
;

186 
sockÀn_t
 
Àn
;

187 
buf
[256];

188 
¨phdr
 *
ah
 = (¨phdr*)
buf
;

189 *
p
 = (*)(
ah
+1);

190 
sockaddr_Œ
 
¶l
;

192 
	`mem£t
(&
i‰
, 0, (ifr));

193 
i‰
.
i‰_ifödex
 = 
ifödex
;

194 i‡(
	`io˘l
(
udp_sock
, 
SIOCGIFNAME
, &
i‰
))

196 i‡(
	`io˘l
(
udp_sock
, 
SIOCGIFHWADDR
, &
i‰
))

198 i‡(
i‰
.
i‰_hwaddr
.
ß_Ámûy
 !
ARPHRD_ETHER
)

200 i‡(
	`£tsock›t
(
udp_sock
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
i‰
.
i‰_«me
, 
	`°æí
(ifr.ifr_name)+1) < 0)

203 
d°
.
sö_Ámûy
 = 
AF_INET
;

204 
d°
.
sö_p‹t
 = 
	`ht⁄s
(1025);

205 
d°
.
sö_addr
.
s_addr
 = 
addr
;

206 i‡(
	`c⁄√˘
(
udp_sock
, (
sockaddr
*)&
d°
, (dst)) < 0)

208 
Àn
 = (
d°
);

209 i‡(
	`gësock«me
(
udp_sock
, (
sockaddr
*)&
d°
, &
Àn
) < 0)

212 
ah
->
¨_hrd
 = 
	`ht⁄s
(
i‰
.
i‰_hwaddr
.
ß_Ámûy
);

213 
ah
->
¨_¥o
 = 
	`ht⁄s
(
ETH_P_IP
);

214 
ah
->
¨_h 
 = 6;

215 
ah
->
¨_∂n
 = 4;

216 
ah
->
¨_›
 = 
	`ht⁄s
(
ARPOP_REQUEST
);

218 
	`mem˝y
(
p
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 
ah
->
¨_h 
);

219 
p
 +
ah
->
¨_h 
;

221 
	`mem˝y
(
p
, &
d°
.
sö_addr
, 4);

222 
p
+=4;

224 
¶l
.
¶l_Ámûy
 = 
AF_PACKET
;

225 
	`mem£t
(
¶l
.
¶l_addr
, 0xFF, (sll.sll_addr));

226 
¶l
.
¶l_ifödex
 = 
ifödex
;

227 
¶l
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_ARP
);

228 
	`mem˝y
(
p
, &
¶l
.
¶l_addr
, 
ah
->
¨_h 
);

229 
p
+=
ah
->
¨_h 
;

231 
	`mem˝y
(
p
, &
addr
, 4);

232 
p
+=4;

234 i‡(
	`£ndto
(
p£t
[0].
fd
, 
buf
, 
p
-buf, 0, (
sockaddr
*)&
¶l
, (sll)) < 0)

236 
°©s
.
¥obes_£¡
++;

238 
	}
}

242 
	$queue_a˘ive_¥obe
(
ifödex
, 
__u32
 
addr
)

244 
timevÆ
 
¥ev
;

245 
buckës
;

246 
timevÆ
 
now
;

248 
	`gëtimeofday
(&
now
, 
NULL
);

249 i‡(
¥ev
.
tv_£c
) {

250 
diff
 = (
now
.
tv_£c
-
¥ev
.tv_£c)*1000+“ow.
tv_u£c
-prev.tv_usec)/1000;

251 
buckës
 +
diff
;

253 
buckës
 = 
brﬂdˇ°_bur°
;

255 i‡(
buckës
 > 
brﬂdˇ°_bur°
)

256 
buckës
 = 
brﬂdˇ°_bur°
;

257 i‡(
buckës
 >
brﬂdˇ°_øã
 && !
	`£nd_¥obe
(
ifödex
, 
addr
)) {

258 
buckës
 -
brﬂdˇ°_øã
;

259 
¥ev
 = 
now
;

262 
°©s
.
¥obes_suµªs£d
++;

264 
	}
}

266 
	$ª•⁄d_to_kî√l
(
ifödex
, 
__u32
 
addr
, *
Œa
, 
ŒÆí
)

269 
∆msghdr
 
n
;

270 
ndmsg
 
ndm
;

271 
buf
[256];

272 } 
ªq
;

274 
	`mem£t
(&
ªq
.
n
, 0, (req.n));

275 
	`mem£t
(&
ªq
.
ndm
, 0, (req.ndm));

277 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
ndmsg
));

278 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

279 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_NEWNEIGH
;

280 
ªq
.
ndm
.
ndm_Ámûy
 = 
AF_INET
;

281 
ªq
.
ndm
.
ndm_°©e
 = 
NUD_STALE
;

282 
ªq
.
ndm
.
ndm_ifödex
 = 
ifödex
;

283 
ªq
.
ndm
.
ndm_ty≥
 = 
RTN_UNICAST
;

285 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
NDA_DST
, &
addr
, 4);

286 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
NDA_LLADDR
, 
Œa
, 
ŒÆí
);

287  
	`π∆_£nd
(&
πh
, &
ªq
,Ñeq.
n
.
∆msg_Àn
) <= 0;

288 
	}
}

290 
	$¥ï¨e_√g_íåy
(
__u8
 *
nd©a
, 
__u32
 
°amp
)

292 
nd©a
[0] = 0xFF;

293 
nd©a
[1] = 0;

294 
nd©a
[2] = 
°amp
>>24;

295 
nd©a
[3] = 
°amp
>>16;

296 
nd©a
[4] = 
°amp
>>8;

297 
nd©a
[5] = 
°amp
;

298 
	}
}

301 
	$do_⁄e_ªque°
(
∆msghdr
 *
n
)

303 
ndmsg
 *
ndm
 = 
	`NLMSG_DATA
(
n
);

304 
Àn
 = 
n
->
∆msg_Àn
;

305 
π©å
 * 
tb
[
NDA_MAX
+1];

306 
dbkey
 
key
;

307 
DBT
 
dbkey
, 
dbd©
;

308 
do_ac˘
 = 0;

310 i‡(
n
->
∆msg_ty≥
 =
NLMSG_DONE
) {

311 
dba£
->
	`sync
(dbase, 0);

316 
	`do_sys˘l_adju°míts
();

320 i‡(
n
->
∆msg_ty≥
 !
RTM_GETNEIGH
 &&Ç->∆msg_ty≥ !
RTM_NEWNEIGH
)

323 
Àn
 -
	`NLMSG_LENGTH
((*
ndm
));

324 i‡(
Àn
 < 0)

327 i‡(
ndm
->
ndm_Ámûy
 !
AF_INET
 ||

328 (
i‚um
 && !
	`h™dÀ_if
(
ndm
->
ndm_ifödex
)) ||

329 
ndm
->
ndm_Êags
 ||

330 
ndm
->
ndm_ty≥
 !
RTN_UNICAST
 ||

331 !(
ndm
->
ndm_°©e
&~
NUD_NOARP
))

334 
	`∑r£_π©å
(
tb
, 
NDA_MAX
, 
	`NDA_RTA
(
ndm
), 
Àn
);

336 i‡(!
tb
[
NDA_DST
])

339 
key
.
iÁ˚
 = 
ndm
->
ndm_ifödex
;

340 
	`mem˝y
(&
key
.
addr
, 
	`RTA_DATA
(
tb
[
NDA_DST
]), 4);

341 
dbkey
.
d©a
 = &
key
;

342 
dbkey
.
size
 = (
key
);

344 i‡(
dba£
->
	`gë
(dba£, &
dbkey
, &
dbd©
, 0) != 0) {

345 
dbd©
.
d©a
 = 0;

346 
dbd©
.
size
 = 0;

349 i‡(
n
->
∆msg_ty≥
 =
RTM_GETNEIGH
) {

350 i‡(!(
n
->
∆msg_Êags
&
NLM_F_REQUEST
))

353 i‡(!(
ndm
->
ndm_°©e
&(
NUD_PROBE
|
NUD_INCOMPLETE
))) {

354 
°©s
.
≠p_bad
++;

358 i‡(
ndm
->
ndm_°©e
&
NUD_PROBE
) {

365 i‡(
dbd©
.
d©a
 && !
	`IS_NEG
(dbdat.data))

366 
°©s
.
≠p_√g
++;

368 
dba£
->
	`dñ
(dba£, &
dbkey
, 0);

372 
°©s
.
≠p_ªcv
++;

373 i‡(
dbd©
.
d©a
 && !
	`IS_NEG
(dbdat.data)) {

374 
°©s
.
≠p_suc˚ss
++;

375 
	`ª•⁄d_to_kî√l
(
key
.
iÁ˚
, key.
addr
, 
dbd©
.
d©a
, dbd©.
size
);

381 i‡(
dbd©
.
d©a
 && 
	`NEG_VALID
(dbdat.data)) {

382 i‡(
	`NEG_CNT
(
dbd©
.
d©a
Ë>
a˘ive_¥obög
) {

383 
°©s
.
≠p_suµªs£d
++;

386 
do_ac˘
 = 1;

390 i‡(
a˘ive_¥obög
 &&

391 
	`queue_a˘ive_¥obe
(
ndm
->
ndm_ifödex
, 
key
.
addr
) == 0 &&

392 
do_ac˘
) {

393 
	`NEG_CNT
(
dbd©
.
d©a
)++;

394 
dba£
->
	`put
(dba£, &
dbkey
, &
dbd©
, 0);

396 } i‡(
n
->
∆msg_ty≥
 =
RTM_NEWNEIGH
) {

397 i‡(
n
->
∆msg_Êags
&
NLM_F_REQUEST
)

400 i‡(
ndm
->
ndm_°©e
&
NUD_FAILED
) {

404 i‡(!
dbd©
.
d©a
 ||

405 !
	`IS_NEG
(
dbd©
.
d©a
) ||

406 !
	`NEG_VALID
(
dbd©
.
d©a
)) {

407 
__u8
 
nd©a
[6];

408 
°©s
.
kîn_√g
++;

409 
	`¥ï¨e_√g_íåy
(
nd©a
, 
	`time
(
NULL
));

410 
dbd©
.
d©a
 = 
nd©a
;

411 
dbd©
.
size
 = (
nd©a
);

412 
dba£
->
	`put
(dba£, &
dbkey
, &
dbd©
, 0);

414 } i‡(
tb
[
NDA_LLADDR
]) {

415 i‡(
dbd©
.
d©a
 && !
	`IS_NEG
(dbdat.data)) {

416 i‡(
	`memcmp
(
	`RTA_DATA
(
tb
[
NDA_LLADDR
]), 
dbd©
.
d©a
, dbd©.
size
) == 0)

418 
°©s
.
kîn_ch™ge
++;

420 
°©s
.
kîn_√w
++;

422 
dbd©
.
d©a
 = 
	`RTA_DATA
(
tb
[
NDA_LLADDR
]);

423 
dbd©
.
size
 = 
	`RTA_PAYLOAD
(
tb
[
NDA_LLADDR
]);

424 
dba£
->
	`put
(dba£, &
dbkey
, &
dbd©
, 0);

428 
	}
}

430 
	$lﬂd_öôül_èbÀ
()

432 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
AF_INET
, 
RTM_GETNEIGH
) < 0) {

433 
	`≥º‹
("dumpÑequest failed");

434 
	`exô
(1);

437 
	}
}

439 
	$gë_kîn_msg
()

441 
°©us
;

442 
∆msghdr
 *
h
;

443 
sockaddr_∆
 
∆addr
;

444 
iovec
 
iov
;

445 
buf
[8192];

446 
msghdr
 
msg
 = {

447 (*)&
∆addr
, (nladdr),

448 &
iov
, 1,

449 
NULL
, 0,

453 
	`mem£t
(&
∆addr
, 0, (nladdr));

455 
iov
.
iov_ba£
 = 
buf
;

456 
iov
.
iov_Àn
 = (
buf
);

458 
°©us
 = 
	`ªcvmsg
(
πh
.
fd
, &
msg
, 
MSG_DONTWAIT
);

460 i‡(
°©us
 <= 0)

463 i‡(
msg
.
msg_«mñí
 !(
∆addr
))

466 i‡(
∆addr
.
∆_pid
)

469 
h
 = (
∆msghdr
*)
buf
; 
°©us
 >= (*h); ) {

470 
Àn
 = 
h
->
∆msg_Àn
;

471 
l
 = 
Àn
 - (*
h
);

473 i‡(
l
 < 0 || 
Àn
 > 
°©us
)

476 i‡(
	`do_⁄e_ªque°
(
h
) < 0)

479 
°©us
 -
	`NLMSG_ALIGN
(
Àn
);

480 
h
 = (
∆msghdr
*)((*)h + 
	`NLMSG_ALIGN
(
Àn
));

482 
	}
}

485 
	$gë_¨p_pkt
()

487 
buf
[1024];

488 
sockaddr_Œ
 
¶l
;

489 
sockÀn_t
 
¶l_Àn
 = (
¶l
);

490 
¨phdr
 *
a
 = (¨phdr*)
buf
;

491 
dbkey
 
key
;

492 
DBT
 
dbkey
, 
dbd©
;

493 
n
;

495 
n
 = 
	`ªcv‰om
(
p£t
[0].
fd
, 
buf
, (buf), 
MSG_DONTWAIT
,

496 (
sockaddr
*)&
¶l
, &
¶l_Àn
);

497 i‡(
n
 < 0) {

498 i‡(
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
)

499 
	`sy¶og
(
LOG_ERR
, "recvfrom: %m");

503 i‡(
i‚um
 && !
	`h™dÀ_if
(
¶l
.
¶l_ifödex
))

508 i‡(
n
 < (*
a
) ||

509 (
a
->
¨_›
 !
	`ht⁄s
(
ARPOP_REQUEST
) &&

510 
a
->
¨_›
 !
	`ht⁄s
(
ARPOP_REPLY
)) ||

511 
a
->
¨_∂n
 != 4 ||

512 
a
->
¨_¥o
 !
	`ht⁄s
(
ETH_P_IP
) ||

513 
a
->
¨_h 
 !
¶l
.
¶l_hÆí
 ||

514 (*
a
Ë+ 2*4 + 2*a->
¨_h 
 > 
n
)

517 
key
.
iÁ˚
 = 
¶l
.
¶l_ifödex
;

518 
	`mem˝y
(&
key
.
addr
, (*)(
a
+1Ë+á->
¨_h 
, 4);

521 i‡(
key
.
addr
 == 0)

524 
dbkey
.
d©a
 = &
key
;

525 
dbkey
.
size
 = (
key
);

527 i‡(
dba£
->
	`gë
(dba£, &
dbkey
, &
dbd©
, 0Ë=0 && !
	`IS_NEG
(dbd©.
d©a
)) {

528 i‡(
	`memcmp
(
dbd©
.
d©a
, 
a
+1, dbd©.
size
) == 0)

530 
°©s
.
¨p_ch™ge
++;

532 
°©s
.
¨p_√w
++;

535 
dbd©
.
d©a
 = 
a
+1;

536 
dbd©
.
size
 = 
a
->
¨_h 
;

537 
dba£
->
	`put
(dba£, &
dbkey
, &
dbd©
, 0);

538 
	}
}

540 
ˇtch_sig«l
(
sig
, (*
h™dÀr
)())

542 
siga˘i⁄
 
ß
;

544 
	`mem£t
(&
ß
, 0, (sa));

545 
ß
.
ß_h™dÀr
 = 
h™dÀr
;

546 #ifde‡
SA_INTERRUPT


547 
ß
.
ß_Êags
 = 
SA_INTERRUPT
;

549 
	`siga˘i⁄
(
sig
, &
ß
, 
NULL
);

550 
	}
}

552 
	~<£tjmp.h
>

553 
sigjmp_buf
 
	gív
;

554 vﬁ©ûê
	gö_pﬁl
;

556 
	$sig_exô
(
signo
)

558 
do_exô
 = 1;

559 i‡(
ö_pﬁl
)

560 
	`sigl⁄gjmp
(
ív
, 1);

561 
	}
}

563 
	$sig_sync
(
signo
)

565 
do_sync
 = 1;

566 i‡(
ö_pﬁl
)

567 
	`sigl⁄gjmp
(
ív
, 1);

568 
	}
}

570 
	$sig_°©s
(
signo
)

572 
do_sync
 = 1;

573 
do_°©s
 = 1;

574 i‡(
ö_pﬁl
)

575 
	`sigl⁄gjmp
(
ív
, 1);

576 
	}
}

578 
	$£nd_°©s
()

580 
	`sy¶og
(
LOG_INFO
, "arp_rcv:Ç%lu c%luápp_rcv:Åot %lu hits %lu bad %luÇeg %lu sup %lu",

581 
°©s
.
¨p_√w
, sèts.
¨p_ch™ge
,

583 
°©s
.
≠p_ªcv
, sèts.
≠p_suc˚ss
,

584 
°©s
.
≠p_bad
, sèts.
≠p_√g
, sèts.
≠p_suµªs£d


586 
	`sy¶og
(
LOG_INFO
, "kern:Ç%lu c%luÇeg %luárp_send: %luÑlim %lu",

587 
°©s
.
kîn_√w
, sèts.
kîn_ch™ge
, sèts.
kîn_√g
,

589 
°©s
.
¥obes_£¡
, sèts.
¥obes_suµªs£d


591 
do_°©s
 = 0;

592 
	}
}

595 
	$maö
(
¨gc
, **
¨gv
)

597 
›t
;

598 
do_li°
 = 0;

599 *
do_lﬂd
 = 
NULL
;

601 (
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "h?b:lf:a:n:p:kR:B:")Ë!
EOF
) {

602 
›t
) {

604 
db«me
 = 
›èrg
;

607 i‡(
do_lﬂd
) {

608 
	`Ârötf
(
°dîr
, "Duplicate option -f\n");

609 
	`ußge
();

611 
do_lﬂd
 = 
›èrg
;

614 
do_li°
 = 1;

617 
a˘ive_¥obög
 = 
	`©oi
(
›èrg
);

620 
√g©ive_timeout
 = 
	`©oi
(
›èrg
);

623 
no_kî√l_brﬂdˇ°s
 = 1;

626 i‡((
pﬁl_timeout
 = 1000 * 
	`°πod
(
›èrg
, 
NULL
)) < 100) {

627 
	`Ârötf
(
°dîr
,"InvalidÖollÅimeout\n");

628 
	`exô
(-1);

632 i‡((
brﬂdˇ°_øã
 = 
	`©oi
(
›èrg
)) <= 0 ||

633 (
brﬂdˇ°_øã
 = 1000/broadcast_rate) <= 0) {

634 
	`Ârötf
(
°dîr
, "Invalid ARPÑate\n");

635 
	`exô
(-1);

639 i‡((
brﬂdˇ°_bur°
 = 
	`©oi
(
›èrg
)) <= 0 ||

640 (
brﬂdˇ°_bur°
 = 1000*broadcast_burst) <= 0) {

641 
	`Ârötf
(
°dîr
, "Invalid ARP burst\n");

642 
	`exô
(-1);

648 
	`ußge
();

651 
¨gc
 -
›töd
;

652 
¨gv
 +
›töd
;

654 i‡(
¨gc
 > 0) {

655 
i‚um
 = 
¨gc
;

656 
i‚ames
 = 
¨gv
;

657 
ifvec
 = 
	`mÆloc
(
¨gc
*());

658 i‡(!
ifvec
) {

659 
	`≥º‹
("malloc");

660 
	`exô
(-1);

664 i‡((
udp_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

665 
	`≥º‹
("socket");

666 
	`exô
(-1);

669 i‡(
i‚um
) {

670 
i
;

671 
i‰eq
 
i‰
;

672 
	`mem£t
(&
i‰
, 0, (ifr));

673 
i
=0; i<
i‚um
; i++) {

674 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ames
[
i
], 
IFNAMSIZ
);

675 i‡(
	`io˘l
(
udp_sock
, 
SIOCGIFINDEX
, &
i‰
)) {

676 
	`≥º‹
("ioctl(SIOCGIFINDEX)");

677 
	`exô
(-1);;

679 
ifvec
[
i
] = 
i‰
.
i‰_ifödex
;

683 
dba£
 = 
	`db›í
(
db«me
, 
O_CREAT
|
O_RDWR
, 0644, 
DB_HASH
, 
NULL
);

684 i‡(
dba£
 =
NULL
) {

685 
	`≥º‹
("db_open");

686 
	`exô
(-1);

689 i‡(
do_lﬂd
) {

690 
buf
[128];

691 
FILE
 *
Â
;

692 
dbkey
 
k
;

693 
DBT
 
dbkey
, 
dbd©
;

695 
dbkey
.
d©a
 = &
k
;

696 
dbkey
.
size
 = (
k
);

698 i‡(
	`°rcmp
(
do_lﬂd
, "-") == 0 || strcmp(do_load, "--") == 0) {

699 
Â
 = 
°dö
;

700 } i‡((
Â
 = 
	`f›í
(
do_lﬂd
, "r")Ë=
NULL
) {

701 
	`≥º‹
("fopen");

702 
do_ab‹t
;

705 
buf
[(buf)-1] = 0;

706 
	`fgës
(
buf
, (buf)-1, 
Â
)) {

707 
__u8
 
b1
[6];

708 
ùbuf
[128];

709 
macbuf
[128];

711 i‡(
buf
[0] == '#')

714 i‡(
	`ssˇnf
(
buf
, "%u%s%s", &
k
.
iÁ˚
, 
ùbuf
, 
macbuf
) != 3) {

715 
	`Ârötf
(
°dîr
, "Wr⁄g f‹m© o‡öpuàfûê\"%s\"\n", 
do_lﬂd
);

716 
do_ab‹t
;

718 i‡(
	`°∫cmp
(
macbuf
, "FAILED:", 7) == 0)

720 i‡(!
	`öë_©⁄
(
ùbuf
, (
ö_addr
*)&
k
.
addr
)) {

721 
	`Ârötf
(
°dîr
, "InvÆid IPáddªss: \"%s\"\n", 
ùbuf
);

722 
do_ab‹t
;

725 i‡(
	`Œ_addr_a2n
((*Ë
b1
, 6, 
macbuf
) != 6)

726 
do_ab‹t
;

727 
dbd©
.
size
 = 6;

729 i‡(
dba£
->
	`put
(dba£, &
dbkey
, &
dbd©
, 0)) {

730 
	`≥º‹
("hash->put");

731 
do_ab‹t
;

734 
dba£
->
	`sync
(dbase, 0);

735 i‡(
Â
 !
°dö
)

736 
	`f˛o£
(
Â
);

739 i‡(
do_li°
) {

740 
DBT
 
dbkey
, 
dbd©
;

741 
	`¥ötf
("%-8s %-15s %s\n", "#Ifindex", "IP", "MAC");

742 
dba£
->
	`£q
(dba£, &
dbkey
, &
dbd©
, 
R_NEXT
) == 0) {

743 
dbkey
 *
key
 = dbkey.
d©a
;

744 i‡(
	`h™dÀ_if
(
key
->
iÁ˚
)) {

745 i‡(!
	`IS_NEG
(
dbd©
.
d©a
)) {

746 
b1
[18];

747 
	`¥ötf
("%-8d %-15s %s\n",

748 
key
->
iÁ˚
,

749 
	`öë_¡ﬂ
(*(
ö_addr
*)&
key
->
addr
),

750 
	`Œ_addr_n2a
(
dbd©
.
d©a
, 6, 
ARPHRD_ETHER
, 
b1
, 18));

752 
	`¥ötf
("%-8d %-15s FAILED: %dsecágo\n",

753 
key
->
iÁ˚
,

754 
	`öë_¡ﬂ
(*(
ö_addr
*)&
key
->
addr
),

755 
	`NEG_AGE
(
dbd©
.
d©a
));

761 i‡(
do_lﬂd
 || 
do_li°
)

762 
out
;

764 
p£t
[0].
fd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 0);

765 i‡(
p£t
[0].
fd
 < 0) {

766 
	`≥º‹
("socket");

767 
	`exô
(-1);

771 
sockaddr_Œ
 
¶l
;

772 
	`mem£t
(&
¶l
, 0, (sll));

773 
¶l
.
¶l_Ámûy
 = 
AF_PACKET
;

774 
¶l
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_ARP
);

775 
¶l
.
¶l_ifödex
 = (
i‚um
 =1 ? 
ifvec
[0] : 0);

776 i‡(
	`böd
(
p£t
[0].
fd
, (
sockaddr
*)&
¶l
, (sll)) < 0) {

777 
	`≥º‹
("bind");

778 
do_ab‹t
;

782 i‡(
	`π∆_›í
(&
πh
, 
RTMGRP_NEIGH
) < 0) {

783 
	`≥º‹
("rtnl_open");

784 
do_ab‹t
;

786 
p£t
[1].
fd
 = 
πh
.fd;

788 
	`lﬂd_öôül_èbÀ
();

790 i‡(
	`d´m⁄
(0, 0)) {

791 
	`≥º‹
("arpd: daemon");

792 
do_ab‹t
;

795 
	`›ílog
("¨pd", 
LOG_PID
 | 
LOG_CONS
, 
LOG_DAEMON
);

796 
	`ˇtch_sig«l
(
SIGINT
, 
sig_exô
);

797 
	`ˇtch_sig«l
(
SIGTERM
, 
sig_exô
);

798 
	`ˇtch_sig«l
(
SIGHUP
, 
sig_sync
);

799 
	`ˇtch_sig«l
(
SIGUSR1
, 
sig_°©s
);

801 
	#EVENTS
 (
POLLIN
|
POLLPRI
|
POLLERR
|
POLLHUP
)

	)

802 
p£t
[0].
evíts
 = 
EVENTS
;

803 
p£t
[0].
ªvíts
 = 0;

804 
p£t
[1].
evíts
 = 
EVENTS
;

805 
p£t
[1].
ªvíts
 = 0;

807 
	`sig£tjmp
(
ív
, 1);

810 
ö_pﬁl
 = 1;

812 i‡(
do_exô
)

814 i‡(
do_sync
) {

815 
ö_pﬁl
 = 0;

816 
dba£
->
	`sync
(dbase, 0);

817 
do_sync
 = 0;

818 
ö_pﬁl
 = 1;

820 i‡(
do_°©s
)

821 
	`£nd_°©s
();

822 i‡(
	`pﬁl
(
p£t
, 2, 
pﬁl_timeout
) > 0) {

823 
ö_pﬁl
 = 0;

824 i‡(
p£t
[0].
ªvíts
&
EVENTS
)

825 
	`gë_¨p_pkt
();

826 i‡(
p£t
[1].
ªvíts
&
EVENTS
)

827 
	`gë_kîn_msg
();

829 
do_sync
 = 1;

833 
	`undo_sys˘l_adju°míts
();

834 
out
:

835 
dba£
->
	`˛o£
(dbase);

836 
	`exô
(0);

838 
do_ab‹t
:

839 
dba£
->
	`˛o£
(dbase);

840 
	`exô
(-1);

841 
	}
}

	@misc/ifstat.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<f˙é.h
>

16 
	~<°rög.h
>

17 
	~<î∫o.h
>

18 
	~<time.h
>

19 
	~<sys/time.h
>

20 
	~<‚m©ch.h
>

21 
	~<sys/fûe.h
>

22 
	~<sys/sockë.h
>

23 
	~<sys/un.h
>

24 
	~<sys/pﬁl.h
>

25 
	~<sys/waô.h
>

26 
	~<sys/°©.h
>

27 
	~<sig«l.h
>

28 
	~<m©h.h
>

29 
	~<gë›t.h
>

31 
	~<lib√éök.h
>

32 
	~<js⁄_wrôî.h
>

33 
	~<löux/if.h
>

34 
	~<löux/if_lök.h
>

36 
	~<SNAPSHOT.h
>

38 
	gdump_zîos
 = 0;

39 
	gª£t_hi°‹y
 = 0;

40 
	gign‹e_hi°‹y
 = 0;

41 
	gno_ouçut
 = 0;

42 
	gjs⁄_ouçut
 = 0;

43 
	gno_upd©e
 = 0;

44 
	gsˇn_öãrvÆ
 = 0;

45 
	gtime_c⁄°™t
 = 0;

46 
	gshow_îr‹s
 = 0;

47 
	g¥ëty
;

48 
	gW
;

49 **
	g∑âîns
;

50 
	g≈©ã∫s
;

52 
	göfo_sour˚
[128];

53 
	gsour˚_mism©ch
;

55 
	#MAXS
 ((
π∆_lök_°©s
)/(
__u32
))

	)

57 
	sif°©_ít


59 
if°©_ít
 *
	m√xt
;

60 *
	m«me
;

61 
	mifödex
;

62 
	mvÆ
[
MAXS
];

63 
	møã
[
MAXS
];

64 
__u32
 
	mivÆ
[
MAXS
];

67 c⁄° *
	g°©s
[
MAXS
] = {

93 
if°©_ít
 *
	gkîn_db
;

94 
if°©_ít
 *
	ghi°_db
;

96 
	$m©ch
(c⁄° *
id
)

98 
i
;

100 i‡(
≈©ã∫s
 == 0)

103 
i
=0; i<
≈©ã∫s
; i++) {

104 i‡(!
	`‚m©ch
(
∑âîns
[
i
], 
id
, 0))

108 
	}
}

110 
	$gë_∆msg
(c⁄° 
sockaddr_∆
 *
who
,

111 
∆msghdr
 *
m
, *
¨g
)

113 
iföfomsg
 *
ifi
 = 
	`NLMSG_DATA
(
m
);

114 
π©å
 * 
tb
[
IFLA_MAX
+1];

115 
Àn
 = 
m
->
∆msg_Àn
;

116 
if°©_ít
 *
n
;

117 
i
;

119 i‡(
m
->
∆msg_ty≥
 !
RTM_NEWLINK
)

122 
Àn
 -
	`NLMSG_LENGTH
((*
ifi
));

123 i‡(
Àn
 < 0)

126 i‡(!(
ifi
->
ifi_Êags
&
IFF_UP
))

129 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(
ifi
), 
Àn
);

130 i‡(
tb
[
IFLA_IFNAME
] =
NULL
 ||Åb[
IFLA_STATS
] == NULL)

133 
n
 = 
	`mÆloc
((*n));

134 i‡(!
n
)

135 
	`ab‹t
();

136 
n
->
ifödex
 = 
ifi
->
ifi_ödex
;

137 
n
->
«me
 = 
	`°rdup
(
	`RTA_DATA
(
tb
[
IFLA_IFNAME
]));

138 
	`mem˝y
(&
n
->
ivÆ
, 
	`RTA_DATA
(
tb
[
IFLA_STATS
]), (n->ival));

139 
	`mem£t
(&
n
->
øã
, 0, (n->rate));

140 
i
=0; i<
MAXS
; i++)

141 
n
->
vÆ
[
i
] =Ç->
ivÆ
[i];

142 
n
->
√xt
 = 
kîn_db
;

143 
kîn_db
 = 
n
;

145 
	}
}

147 
	$lﬂd_öfo
()

149 
if°©_ít
 *
db
, *
n
;

150 
π∆_h™dÀ
 
πh
;

152 i‡(
	`π∆_›í
(&
πh
, 0) < 0)

153 
	`exô
(1);

155 i‡(
	`π∆_wûddump_ªque°
(&
πh
, 
AF_INET
, 
RTM_GETLINK
) < 0) {

156 
	`≥º‹
("Cannot send dumpÑequest");

157 
	`exô
(1);

160 i‡(
	`π∆_dump_fûãr
(&
πh
, 
gë_∆msg
, 
NULL
) < 0) {

161 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

162 
	`exô
(1);

165 
	`π∆_˛o£
(&
πh
);

167 
db
 = 
kîn_db
;

168 
kîn_db
 = 
NULL
;

170 
db
) {

171 
n
 = 
db
;

172 
db
 = db->
√xt
;

173 
n
->
√xt
 = 
kîn_db
;

174 
kîn_db
 = 
n
;

176 
	}
}

178 
	$lﬂd_øw_èbÀ
(
FILE
 *
Â
)

180 
buf
[4096];

181 
if°©_ít
 *
db
 = 
NULL
;

182 
if°©_ít
 *
n
;

184 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

185 *
p
;

186 *
√xt
;

187 
i
;

189 i‡(
buf
[0] == '#') {

190 
buf
[
	`°æí
(buf)-1] = 0;

191 i‡(
öfo_sour˚
[0] && 
	`°rcmp
(öfo_sour˚, 
buf
+1))

192 
sour˚_mism©ch
 = 1;

193 
	`°∫˝y
(
öfo_sour˚
, 
buf
+1, (info_source)-1);

196 i‡((
n
 = 
	`mÆloc
((*n))Ë=
NULL
)

197 
	`ab‹t
();

199 i‡(!(
p
 = 
	`°rchr
(
buf
, ' ')))

200 
	`ab‹t
();

201 *
p
++ = 0;

203 i‡(
	`ssˇnf
(
buf
, "%d", &
n
->
ifödex
) != 1)

204 
	`ab‹t
();

205 i‡(!(
√xt
 = 
	`°rchr
(
p
, ' ')))

206 
	`ab‹t
();

207 *
√xt
++ = 0;

209 
n
->
«me
 = 
	`°rdup
(
p
);

210 
p
 = 
√xt
;

212 
i
=0; i<
MAXS
; i++) {

213 
øã
;

214 i‡(!(
√xt
 = 
	`°rchr
(
p
, ' ')))

215 
	`ab‹t
();

216 *
√xt
++ = 0;

217 i‡(
	`ssˇnf
(
p
, "%Œu", 
n
->
vÆ
+
i
) != 1)

218 
	`ab‹t
();

219 
n
->
ivÆ
[
i
] = (
__u32
Í->
vÆ
[i];

220 
p
 = 
√xt
;

221 i‡(!(
√xt
 = 
	`°rchr
(
p
, ' ')))

222 
	`ab‹t
();

223 *
√xt
++ = 0;

224 i‡(
	`ssˇnf
(
p
, "%u", &
øã
) != 1)

225 
	`ab‹t
();

226 
n
->
øã
[
i
] =Ñate;

227 
p
 = 
√xt
;

229 
n
->
√xt
 = 
db
;

230 
db
 = 
n
;

233 
db
) {

234 
n
 = 
db
;

235 
db
 = db->
√xt
;

236 
n
->
√xt
 = 
kîn_db
;

237 
kîn_db
 = 
n
;

239 
	}
}

241 
	$dump_øw_db
(
FILE
 *
Â
, 
to_hi°
)

243 
js⁄_wrôî_t
 *
jw
 = 
js⁄_ouçut
 ? 
	`js⁄w_√w
(
Â
Ë: 
NULL
;

244 
if°©_ít
 *
n
, *
h
;

246 
h
 = 
hi°_db
;

247 i‡(
jw
) {

248 
	`js⁄w_¥ëty
(
jw
, 
¥ëty
);

249 
	`js⁄w_«me
(
jw
, 
öfo_sour˚
);

250 
	`js⁄w_°¨t_obje˘
(
jw
);

252 
	`Ârötf
(
Â
, "#%s\n", 
öfo_sour˚
);

254 
n
=
kîn_db
;Ç;ÇÚ->
√xt
) {

255 
i
;

256 *
vÆs
 = 
n
->
vÆ
;

257 *
øãs
 = 
n
->
øã
;

258 i‡(!
	`m©ch
(
n
->
«me
)) {

259 
if°©_ít
 *
h1
;

260 i‡(!
to_hi°
)

262 
h1
 = 
h
; h1; h1 = h1->
√xt
) {

263 i‡(
h1
->
ifödex
 =
n
->ifindex) {

264 
vÆs
 = 
h1
->
vÆ
;

265 
øãs
 = 
h1
->
øã
;

266 
h
 = 
h1
->
√xt
;

272 i‡(
jw
) {

273 
	`js⁄w_«me
(
jw
, 
n
->
«me
);

274 
	`js⁄w_°¨t_obje˘
(
jw
);

276 
i
=0; i<
MAXS
 && 
°©s
[i]; i++)

277 
	`js⁄w_uöt_fõld
(
jw
, 
°©s
[
i
], 
vÆs
[i]);

278 
	`js⁄w_íd_obje˘
(
jw
);

280 
	`Ârötf
(
Â
, "%d %†", 
n
->
ifödex
,Ç->
«me
);

281 
i
=0; i<
MAXS
; i++)

282 
	`Ârötf
(
Â
, "%Œu %u ", 
vÆs
[
i
],

283 ()
øãs
[
i
]);

284 
	`Ârötf
(
Â
, "\n");

287 i‡(
jw
) {

288 
	`js⁄w_íd_obje˘
(
jw
);

289 
	`js⁄w_de°roy
(&
jw
);

291 
	}
}

294 c⁄° 
	ggiga
 = 1000000000ull;

295 c⁄° 
	gmega
 = 1000000;

296 c⁄° 
	gkûo
 = 1000;

298 
	$f‹m©_øã
(
FILE
 *
Â
, c⁄° *
vÆs
,

299 c⁄° *
øãs
, 
i
)

301 
ãmp
[64];

303 i‡(
vÆs
[
i
] > 
giga
)

304 
	`Ârötf
(
Â
, "%7ŒuM ", 
vÆs
[
i
]/
mega
);

305 i‡(
vÆs
[
i
] > 
mega
)

306 
	`Ârötf
(
Â
, "%7ŒuK ", 
vÆs
[
i
]/
kûo
);

308 
	`Ârötf
(
Â
, "%8Œu ", 
vÆs
[
i
]);

310 i‡(
øãs
[
i
] > 
mega
) {

311 
	`•rötf
(
ãmp
, "%uM", ()(
øãs
[
i
]/
mega
));

312 
	`Ârötf
(
Â
, "%-6†", 
ãmp
);

313 } i‡(
øãs
[
i
] > 
kûo
) {

314 
	`•rötf
(
ãmp
, "%uK", ()(
øãs
[
i
]/
kûo
));

315 
	`Ârötf
(
Â
, "%-6†", 
ãmp
);

317 
	`Ârötf
(
Â
, "%-6u ", ()
øãs
[
i
]);

318 
	}
}

320 
	$f‹m©_∑ú
(
FILE
 *
Â
, c⁄° *
vÆs
, 
i
, 
k
)

322 
ãmp
[64];

323 i‡(
vÆs
[
i
] > 
giga
)

324 
	`Ârötf
(
Â
, "%7ŒuM ", 
vÆs
[
i
]/
mega
);

325 i‡(
vÆs
[
i
] > 
mega
)

326 
	`Ârötf
(
Â
, "%7ŒuK ", 
vÆs
[
i
]/
kûo
);

328 
	`Ârötf
(
Â
, "%8Œu ", 
vÆs
[
i
]);

330 i‡(
vÆs
[
k
] > 
giga
) {

331 
	`•rötf
(
ãmp
, "%uM", ()(
vÆs
[
k
]/
mega
));

332 
	`Ârötf
(
Â
, "%-6†", 
ãmp
);

333 } i‡(
vÆs
[
k
] > 
mega
) {

334 
	`•rötf
(
ãmp
, "%uK", ()(
vÆs
[
k
]/
kûo
));

335 
	`Ârötf
(
Â
, "%-6†", 
ãmp
);

337 
	`Ârötf
(
Â
, "%-6u ", ()
vÆs
[
k
]);

338 
	}
}

340 
	$¥öt_hód
(
FILE
 *
Â
)

342 
	`Ârötf
(
Â
, "#%s\n", 
öfo_sour˚
);

343 
	`Ârötf
(
Â
, "%-15s ", "Interface");

345 
	`Ârötf
(
Â
, "%8s/%-6s ", "RX Pkts", "Rate");

346 
	`Ârötf
(
Â
, "%8s/%-6s ", "TX Pkts", "Rate");

347 
	`Ârötf
(
Â
, "%8s/%-6s ", "RX Data", "Rate");

348 
	`Ârötf
(
Â
, "%8s/%-6s\n","TX Data", "Rate");

350 i‡(!
show_îr‹s
) {

351 
	`Ârötf
(
Â
, "%-15s ", "");

352 
	`Ârötf
(
Â
, "%8s/%-6s ", "RX Errs", "Drop");

353 
	`Ârötf
(
Â
, "%8s/%-6s ", "TX Errs", "Drop");

354 
	`Ârötf
(
Â
, "%8s/%-6s ", "RX Over", "Rate");

355 
	`Ârötf
(
Â
, "%8s/%-6s\n","TX Coll", "Rate");

357 
	`Ârötf
(
Â
, "%-15s ", "");

358 
	`Ârötf
(
Â
, "%8s/%-6s ", "RX Errs", "Rate");

359 
	`Ârötf
(
Â
, "%8s/%-6s ", "RX Drop", "Rate");

360 
	`Ârötf
(
Â
, "%8s/%-6s ", "RX Over", "Rate");

361 
	`Ârötf
(
Â
, "%8s/%-6s\n","RX Leng", "Rate");

363 
	`Ârötf
(
Â
, "%-15s ", "");

364 
	`Ârötf
(
Â
, "%8s/%-6s ", "RX Crc", "Rate");

365 
	`Ârötf
(
Â
, "%8s/%-6s ", "RX Frm", "Rate");

366 
	`Ârötf
(
Â
, "%8s/%-6s ", "RX Fifo", "Rate");

367 
	`Ârötf
(
Â
, "%8s/%-6s\n","RX Miss", "Rate");

369 
	`Ârötf
(
Â
, "%-15s ", "");

370 
	`Ârötf
(
Â
, "%8s/%-6s ", "TX Errs", "Rate");

371 
	`Ârötf
(
Â
, "%8s/%-6s ", "TX Drop", "Rate");

372 
	`Ârötf
(
Â
, "%8s/%-6s ", "TX Coll", "Rate");

373 
	`Ârötf
(
Â
, "%8s/%-6s\n","TX Carr", "Rate");

375 
	`Ârötf
(
Â
, "%-15s ", "");

376 
	`Ârötf
(
Â
, "%8s/%-6s ", "TX Abrt", "Rate");

377 
	`Ârötf
(
Â
, "%8s/%-6s ", "TX Fifo", "Rate");

378 
	`Ârötf
(
Â
, "%8s/%-6s ", "TX Hear", "Rate");

379 
	`Ârötf
(
Â
, "%8s/%-6s\n","TX Wind", "Rate");

381 
	}
}

383 
	$¥öt_⁄e_js⁄
(
js⁄_wrôî_t
 *
jw
, c⁄° 
if°©_ít
 *
n
,

384 c⁄° *
vÆs
)

386 
i
, 
m
 = 
show_îr‹s
 ? 20 : 10;

388 
	`js⁄w_«me
(
jw
, 
n
->
«me
);

389 
	`js⁄w_°¨t_obje˘
(
jw
);

391 
i
=0; i < 
m
 && 
°©s
[i]; i++)

392 
	`js⁄w_uöt_fõld
(
jw
, 
°©s
[
i
], 
vÆs
[i]);

394 
	`js⁄w_íd_obje˘
(
jw
);

395 
	}
}

397 
	$¥öt_⁄e_if
(
FILE
 *
Â
, c⁄° 
if°©_ít
 *
n
,

398 c⁄° *
vÆs
)

400 
i
;

402 
	`Ârötf
(
Â
, "%-15†", 
n
->
«me
);

403 
i
=0; i<4; i++)

404 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 
i
);

405 
	`Ârötf
(
Â
, "\n");

407 i‡(!
show_îr‹s
) {

408 
	`Ârötf
(
Â
, "%-15s ", "");

409 
	`f‹m©_∑ú
(
Â
, 
vÆs
, 4, 6);

410 
	`f‹m©_∑ú
(
Â
, 
vÆs
, 5, 7);

411 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 11);

412 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 9);

413 
	`Ârötf
(
Â
, "\n");

415 
	`Ârötf
(
Â
, "%-15s ", "");

416 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 4);

417 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 6);

418 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 11);

419 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 10);

420 
	`Ârötf
(
Â
, "\n");

422 
	`Ârötf
(
Â
, "%-15s ", "");

423 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 12);

424 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 13);

425 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 14);

426 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 15);

427 
	`Ârötf
(
Â
, "\n");

429 
	`Ârötf
(
Â
, "%-15s ", "");

430 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 5);

431 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 7);

432 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 9);

433 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 17);

434 
	`Ârötf
(
Â
, "\n");

436 
	`Ârötf
(
Â
, "%-15s ", "");

437 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 16);

438 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 18);

439 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 19);

440 
	`f‹m©_øã
(
Â
, 
vÆs
, 
n
->
øã
, 20);

441 
	`Ârötf
(
Â
, "\n");

443 
	}
}

445 
	$dump_kîn_db
(
FILE
 *
Â
)

447 
js⁄_wrôî_t
 *
jw
 = 
js⁄_ouçut
 ? 
	`js⁄w_√w
(
Â
Ë: 
NULL
;

448 
if°©_ít
 *
n
;

450 i‡(
jw
) {

451 
	`js⁄w_¥ëty
(
jw
, 
¥ëty
);

452 
	`js⁄w_«me
(
jw
, 
öfo_sour˚
);

453 
	`js⁄w_°¨t_obje˘
(
jw
);

455 
	`¥öt_hód
(
Â
);

457 
n
=
kîn_db
;Ç;ÇÚ->
√xt
) {

458 i‡(!
	`m©ch
(
n
->
«me
))

461 i‡(
jw
)

462 
	`¥öt_⁄e_js⁄
(
jw
, 
n
,Ç->
vÆ
);

464 
	`¥öt_⁄e_if
(
Â
, 
n
,Ç->
vÆ
);

466 i‡(
js⁄_ouçut
)

467 
	`Ârötf
(
Â
, "\n} }\n");

468 
	}
}

470 
	$dump_ö¸_db
(
FILE
 *
Â
)

472 
if°©_ít
 *
n
, *
h
;

473 
js⁄_wrôî_t
 *
jw
 = 
js⁄_ouçut
 ? 
	`js⁄w_√w
(
Â
Ë: 
NULL
;

475 
h
 = 
hi°_db
;

476 i‡(
jw
) {

477 
	`js⁄w_¥ëty
(
jw
, 
¥ëty
);

478 
	`js⁄w_«me
(
jw
, 
öfo_sour˚
);

479 
	`js⁄w_°¨t_obje˘
(
jw
);

481 
	`¥öt_hód
(
Â
);

483 
n
=
kîn_db
;Ç;ÇÚ->
√xt
) {

484 
i
;

485 
vÆs
[
MAXS
];

486 
if°©_ít
 *
h1
;

488 
	`mem˝y
(
vÆs
, 
n
->
vÆ
, (vals));

490 
h1
 = 
h
; h1; h1 = h1->
√xt
) {

491 i‡(
h1
->
ifödex
 =
n
->ifindex) {

492 
i
 = 0; i < 
MAXS
; i++)

493 
vÆs
[
i
] -
h1
->
vÆ
[i];

494 
h
 = 
h1
->
√xt
;

498 i‡(!
	`m©ch
(
n
->
«me
))

501 i‡(
jw
)

502 
	`¥öt_⁄e_js⁄
(
jw
, 
n
,Ç->
vÆ
);

504 
	`¥öt_⁄e_if
(
Â
, 
n
, 
vÆs
);

507 i‡(
jw
) {

508 
	`js⁄w_íd_obje˘
(
jw
);

509 
	`js⁄w_de°roy
(&
jw
);

511 
	}
}

513 
	gchûdªn
;

515 
	$sigchûd
(
signo
)

517 
	}
}

519 
	$upd©e_db
(
öãrvÆ
)

521 
if°©_ít
 *
n
, *
h
;

523 
n
 = 
kîn_db
;

524 
kîn_db
 = 
NULL
;

526 
	`lﬂd_öfo
();

528 
h
 = 
kîn_db
;

529 
kîn_db
 = 
n
;

531 
n
 = 
kîn_db
;Ç;Ç =Ç->
√xt
) {

532 
if°©_ít
 *
h1
;

533 
h1
 = 
h
; h1; h1 = h1->
√xt
) {

534 i‡(
h1
->
ifödex
 =
n
->ifindex) {

535 
i
;

536 
i
 = 0; i < 
MAXS
; i++) {

537 i‡(()(
h1
->
ivÆ
[
i
] - 
n
->ival[i]) < 0) {

538 
	`mem£t
(
n
->
ivÆ
, 0, (n->ival));

542 
i
 = 0; i < 
MAXS
; i++) {

543 
ßm∂e
;

544 
ö¸
 = 
h1
->
ivÆ
[
i
] - 
n
->ival[i];

545 
n
->
vÆ
[
i
] +
ö¸
;

546 
n
->
ivÆ
[
i
] = 
h1
->ival[i];

547 
ßm∂e
 = ()(
ö¸
*1000)/
öãrvÆ
;

548 i‡(
öãrvÆ
 >
sˇn_öãrvÆ
) {

549 
n
->
øã
[
i
] +
W
*(
ßm∂e
-n->rate[i]);

550 } i‡(
öãrvÆ
 >= 1000) {

551 i‡(
öãrvÆ
 >
time_c⁄°™t
) {

552 
n
->
øã
[
i
] = 
ßm∂e
;

554 
w
 = 
W
*()
öãrvÆ
/
sˇn_öãrvÆ
;

555 
n
->
øã
[
i
] +
w
*(
ßm∂e
-n->rate[i]);

560 
h
 !
h1
) {

561 
if°©_ít
 *
tmp
 = 
h
;

562 
h
 = h->
√xt
;

563 
	`‰ì
(
tmp
->
«me
);

564 
	`‰ì
(
tmp
);

566 
h
 = 
h1
->
√xt
;

567 
	`‰ì
(
h1
->
«me
);

568 
	`‰ì
(
h1
);

573 
	}
}

575 
	#T_DIFF
(
a
,
b
Ë((◊).
tv_£c
-(b).tv_£c)*1000 + (◊).
tv_u£c
-(b).tv_u£c)/1000)

	)

578 
	$£rvî_lo›
(
fd
)

580 
timevÆ
 
¢≠time
 = { 0 };

581 
pﬁlfd
 
p
;

582 
p
.
fd
 = fd;

583 
p
.
evíts
 =Ö.
ªvíts
 = 
POLLIN
;

585 
	`•rötf
(
öfo_sour˚
, "%d.%lu sampling_interval=%dÅime_const=%d",

586 
	`gëpid
(), ()
	`øndom
(), 
sˇn_öãrvÆ
/1000, 
time_c⁄°™t
/1000);

588 
	`lﬂd_öfo
();

591 
°©us
;

592 
tdiff
;

593 
timevÆ
 
now
;

595 
	`gëtimeofday
(&
now
, 
NULL
);

596 
tdiff
 = 
	`T_DIFF
(
now
, 
¢≠time
);

597 i‡(
tdiff
 >
sˇn_öãrvÆ
) {

598 
	`upd©e_db
(
tdiff
);

599 
¢≠time
 = 
now
;

600 
tdiff
 = 0;

603 i‡(
	`pﬁl
(&
p
, 1, 
tdiff
 + 
sˇn_öãrvÆ
) > 0

604 && (
p
.
ªvíts
&
POLLIN
)) {

605 
˛¡
 = 
	`ac˚±
(
fd
, 
NULL
, NULL);

606 i‡(
˛¡
 >= 0) {

607 
pid_t
 
pid
;

608 i‡(
chûdªn
 >= 5) {

609 
	`˛o£
(
˛¡
);

610 } i‡((
pid
 = 
	`f‹k
()) != 0) {

611 i‡(
pid
>0)

612 
chûdªn
++;

613 
	`˛o£
(
˛¡
);

615 
FILE
 *
Â
 = 
	`fd›í
(
˛¡
, "w");

616 i‡(
Â
) {

617 i‡(
tdiff
 > 0)

618 
	`upd©e_db
(
tdiff
);

619 
	`dump_øw_db
(
Â
, 0);

621 
	`exô
(0);

625 
chûdªn
 && 
	`waôpid
(-1, &
°©us
, 
WNOHANG
) > 0)

626 
chûdªn
--;

628 
	}
}

630 
	$vîify_f‹gög
(
fd
)

632 
u¸ed
 
¸ed
;

633 
sockÀn_t
 
ﬁí
 = (
¸ed
);

635 i‡(
	`gësock›t
(
fd
, 
SOL_SOCKET
, 
SO_PEERCRED
, (*)&
¸ed
, &
ﬁí
) ||

636 
ﬁí
 < (
¸ed
))

638 i‡(
¸ed
.
uid
 =
	`gëuid
() || cred.uid == 0)

641 
	}
}

643 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

645 
	$ußge
()

647 
	`Ârötf
(
°dîr
,

662 
	`exô
(-1);

663 
	}
}

665 c⁄° 
›ti⁄
 
	gl⁄g›ts
[] = {

681 
	$maö
(
¨gc
, *
¨gv
[])

683 
hi°_«me
[128];

684 
sockaddr_un
 
sun
;

685 
FILE
 *
hi°_Â
 = 
NULL
;

686 
ch
;

687 
fd
;

689 (
ch
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hjpvVzrnasd:t:e",

690 
l⁄g›ts
, 
NULL
)Ë!
EOF
) {

691 
ch
) {

693 
dump_zîos
 = 1;

696 
ª£t_hi°‹y
 = 1;

699 
ign‹e_hi°‹y
 = 1;

702 
no_upd©e
 = 1;

705 
no_ouçut
 = 1;

708 
show_îr‹s
 = 1;

711 
js⁄_ouçut
 = 1;

714 
¥ëty
 = 1;

717 
sˇn_öãrvÆ
 = 
	`©oi
(
›èrg
) * 1000;

718 i‡(
sˇn_öãrvÆ
 <= 0) {

719 
	`Ârötf
(
°dîr
, "ifstat: invalid scan interval\n");

720 
	`exô
(-1);

724 
time_c⁄°™t
 = 
	`©oi
(
›èrg
);

725 i‡(
time_c⁄°™t
 <= 0) {

726 
	`Ârötf
(
°dîr
, "ifstat: invalidÅime constant divisor\n");

727 
	`exô
(-1);

732 
	`¥ötf
("if°© utûôy, i¥ouã2-ss%s\n", 
SNAPSHOT
);

733 
	`exô
(0);

737 
	`ußge
();

741 
¨gc
 -
›töd
;

742 
¨gv
 +
›töd
;

744 
sun
.
sun_Ámûy
 = 
AF_UNIX
;

745 
sun
.
sun_∑th
[0] = 0;

746 
	`•rötf
(
sun
.
sun_∑th
+1, "if°©%d", 
	`gëuid
());

748 i‡(
sˇn_öãrvÆ
 > 0) {

749 i‡(
time_c⁄°™t
 == 0)

750 
time_c⁄°™t
 = 60;

751 
time_c⁄°™t
 *= 1000;

752 
W
 = 1 - 1/
	`exp
(
	`log
(10)*()
sˇn_öãrvÆ
/
time_c⁄°™t
);

753 i‡((
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) < 0) {

754 
	`≥º‹
("ifstat: socket");

755 
	`exô
(-1);

757 i‡(
	`böd
(
fd
, (
sockaddr
*)&
sun
, 2+1+
	`°æí
(sun.
sun_∑th
+1)) < 0) {

758 
	`≥º‹
("ifstat: bind");

759 
	`exô
(-1);

761 i‡(
	`li°í
(
fd
, 5) < 0) {

762 
	`≥º‹
("ifstat:Üisten");

763 
	`exô
(-1);

765 i‡(
	`d´m⁄
(0, 0)) {

766 
	`≥º‹
("ifstat: daemon");

767 
	`exô
(-1);

769 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

770 
	`sig«l
(
SIGCHLD
, 
sigchûd
);

771 
	`£rvî_lo›
(
fd
);

772 
	`exô
(0);

775 
∑âîns
 = 
¨gv
;

776 
≈©ã∫s
 = 
¨gc
;

778 i‡(
	`gëív
("IFSTAT_HISTORY"))

779 
	`¢¥ötf
(
hi°_«me
, (hist_name),

780 "%s", 
	`gëív
("IFSTAT_HISTORY"));

782 
	`¢¥ötf
(
hi°_«me
, (hist_name),

783 "%s/.if°©.u%d", 
P_tmpdú
, 
	`gëuid
());

785 i‡(
ª£t_hi°‹y
)

786 
	`u∆ök
(
hi°_«me
);

788 i‡(!
ign‹e_hi°‹y
 || !
no_upd©e
) {

789 
°©
 
°b
;

791 
fd
 = 
	`›í
(
hi°_«me
, 
O_RDWR
|
O_CREAT
|
O_NOFOLLOW
, 0600);

792 i‡(
fd
 < 0) {

793 
	`≥º‹
("ifstat: open history file");

794 
	`exô
(-1);

796 i‡((
hi°_Â
 = 
	`fd›í
(
fd
, "r+")Ë=
NULL
) {

797 
	`≥º‹
("ifstat: fdopen history file");

798 
	`exô
(-1);

800 i‡(
	`Êock
(
	`fûío
(
hi°_Â
), 
LOCK_EX
)) {

801 
	`≥º‹
("ifstat: flock history file");

802 
	`exô
(-1);

804 i‡(
	`f°©
(
	`fûío
(
hi°_Â
), &
°b
) != 0) {

805 
	`≥º‹
("ifstat: fstat history file");

806 
	`exô
(-1);

808 i‡(
°b
.
°_∆ök
 !1 || stb.
°_uid
 !
	`gëuid
()) {

809 
	`Ârötf
(
°dîr
, "ifstat: something is so wrong with history file,Åhat IÖreferÇotÅoÖroceed.\n");

810 
	`exô
(-1);

812 i‡(!
ign‹e_hi°‹y
) {

813 
FILE
 *
tÂ
;

814 
u±ime
 = -1;

815 i‡((
tÂ
 = 
	`f›í
("/¥oc/u±ime", "r")Ë!
NULL
) {

816 i‡(
	`fsˇnf
(
tÂ
, "%ld", &
u±ime
) != 1)

817 
u±ime
 = -1;

818 
	`f˛o£
(
tÂ
);

820 i‡(
u±ime
 >0 && 
	`time
(
NULL
Ë>
°b
.
°_mtime
+uptime) {

821 
	`Ârötf
(
°dîr
, "ifstat: history iságed out,Ñesetting\n");

822 
	`·runˇã
(
	`fûío
(
hi°_Â
), 0);

826 
	`lﬂd_øw_èbÀ
(
hi°_Â
);

828 
hi°_db
 = 
kîn_db
;

829 
kîn_db
 = 
NULL
;

832 i‡((
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) >= 0 &&

833 (
	`c⁄√˘
(
fd
, (
sockaddr
*)&
sun
, 2+1+
	`°æí
(sun.
sun_∑th
+1)) == 0

834 || (
	`°r˝y
(
sun
.
sun_∑th
+1, "ifstat0"),

835 
	`c⁄√˘
(
fd
, (
sockaddr
*)&
sun
, 2+1+
	`°æí
(sun.
sun_∑th
+1)) == 0))

836 && 
	`vîify_f‹gög
(
fd
) == 0) {

837 
FILE
 *
sÂ
 = 
	`fd›í
(
fd
, "r");

838 
	`lﬂd_øw_èbÀ
(
sÂ
);

839 i‡(
hi°_db
 && 
sour˚_mism©ch
) {

840 
	`Ârötf
(
°dîr
, "ifstat: history is stale, ignoring it.\n");

841 
hi°_db
 = 
NULL
;

843 
	`f˛o£
(
sÂ
);

845 i‡(
fd
 >= 0)

846 
	`˛o£
(
fd
);

847 i‡(
hi°_db
 && 
öfo_sour˚
[0] && 
	`°rcmp
(info_source, "kernel")) {

848 
	`Ârötf
(
°dîr
, "ifstat: history is stale, ignoring it.\n");

849 
hi°_db
 = 
NULL
;

850 
öfo_sour˚
[0] = 0;

852 
	`lﬂd_öfo
();

853 i‡(
öfo_sour˚
[0] == 0)

854 
	`°r˝y
(
öfo_sour˚
, "kernel");

857 i‡(!
no_ouçut
) {

858 i‡(
ign‹e_hi°‹y
 || 
hi°_db
 =
NULL
)

859 
	`dump_kîn_db
(
°dout
);

861 
	`dump_ö¸_db
(
°dout
);

864 i‡(!
no_upd©e
) {

865 
	`·runˇã
(
	`fûío
(
hi°_Â
), 0);

866 
	`ªwöd
(
hi°_Â
);

868 
js⁄_ouçut
 = 0;

869 
	`dump_øw_db
(
hi°_Â
, 1);

870 
	`f˛o£
(
hi°_Â
);

872 
	`exô
(0);

873 
	}
}

	@misc/lnstat.c

20 
	#MAX_FIELDS
 128

	)

23 
	#HDR_LINES
 10

	)

26 
	#FIELD_WIDTH_DEFAULT
 8

	)

27 
	#FIELD_WIDTH_MAX
 20

	)

29 
	#DEFAULT_INTERVAL
 2

	)

31 
	#HDR_LINE_LENGTH
 (
MAX_FIELDS
*
FIELD_WIDTH_MAX
)

	)

33 
	~<uni°d.h
>

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<gë›t.h
>

39 
	~<js⁄_wrôî.h
>

40 
	~" °©.h
"

42 
›ti⁄
 
	g›ts
[] = {

43 { "vîsi⁄", 0, 
NULL
, 'V' },

44 { "cou¡", 1, 
NULL
, 'c' },

45 { "dump", 0, 
NULL
, 'd' },

46 { "js⁄", 0, 
NULL
, 'j' },

47 { "fûe", 1, 
NULL
, 'f' },

48 { "hñp", 0, 
NULL
, 'h' },

49 { "öãrvÆ", 1, 
NULL
, 'i' },

50 { "keys", 1, 
NULL
, 'k' },

51 { "subje˘", 1, 
NULL
, 's' },

52 { "width", 1, 
NULL
, 'w' },

53 { "⁄ñöe", 0, 
NULL
, 0 },

56 
	$ußge
(*
«me
, 
exô_code
)

58 
	`Ârötf
(
°dîr
, "%†Vîsi⁄ %s\n", 
«me
, 
LNSTAT_VERSION
);

59 
	`Ârötf
(
°dîr
, "Copyright (C) 2004 by Harald Welte "

61 
	`Ârötf
(
°dîr
, "ThisÖrogram is free softwareÜicensed under GNU GPLv2"

63 
	`Ârötf
(
°dîr
, "Parameters:\n");

64 
	`Ârötf
(
°dîr
, "\t-V --version\t\tPrint Version of Program\n");

65 
	`Ârötf
(
°dîr
, "\t-c --count <count>\t"

67 
	`Ârötf
(
°dîr
, "\t-d --dump\t\t"

69 
	`Ârötf
(
°dîr
, "\t-j --json\t\t"

71 
	`Ârötf
(
°dîr
, "\t-f --file <file>\tStatistics fileÅo use\n");

72 
	`Ârötf
(
°dîr
, "\t-h --help\t\tThis help message\n");

73 
	`Ârötf
(
°dîr
, "\t-i --interval <intv>\t"

75 
	`Ârötf
(
°dîr
, "\t-k --keys k,k,k,...\tDisplay only keys specified\n");

76 
	`Ârötf
(
°dîr
, "\t-s --subject [0-2]\t?\n");

77 
	`Ârötf
(
°dîr
, "\t-w --widthÇ,n,n,...\tWidth forÉach field\n");

78 
	`Ârötf
(
°dîr
, "\n");

80 
	`exô
(
exô_code
);

81 
	}
}

83 
	sfõld_∑øm
 {

84 c⁄° *
	m«me
;

85 
 °©_fõld
 *
	mlf
;

87 
	mwidth
;

88 } 
	m¥öt
;

91 
	sfõld_∑øms
 {

92 
	mnum
;

93 
fõld_∑øm
 
	m∑øms
[
MAX_FIELDS
];

96 
	$¥öt_löe
(
FILE
 *
of
, c⁄° 
 °©_fûe
 *
 °©_fûes
,

97 c⁄° 
fõld_∑øms
 *
Â
)

99 
i
;

101 
i
 = 0; i < 
Â
->
num
; i++) {

102 c⁄° 
 °©_fõld
 *
lf
 = 
Â
->
∑øms
[
i
].lf;

104 
	`Ârötf
(
of
, "%*lu|", 
Â
->
∑øms
[
i
].
¥öt
.
width
, 
lf
->
ªsu…
);

106 
	`Âutc
('\n', 
of
);

107 
	}
}

109 
	$¥öt_js⁄
(
FILE
 *
of
, c⁄° 
 °©_fûe
 *
 °©_fûes
,

110 c⁄° 
fõld_∑øms
 *
Â
)

112 
js⁄_wrôî_t
 *
jw
 = 
	`js⁄w_√w
(
of
);

113 
i
;

115 
	`js⁄w_°¨t_obje˘
(
jw
);

116 
i
 = 0; i < 
Â
->
num
; i++) {

117 c⁄° 
 °©_fõld
 *
lf
 = 
Â
->
∑øms
[
i
].lf;

119 
	`js⁄w_uöt_fõld
(
jw
, 
lf
->
«me
,Üf->
ªsu…
);

121 
	`js⁄w_íd_obje˘
(
jw
);

122 
	`js⁄w_de°roy
(&
jw
);

123 
	}
}

126 
	$m≠_fõld_∑øms
(
 °©_fûe
 *
 °©_fûes
,

127 
fõld_∑øms
 *
Âs
, 
öãrvÆ
)

129 
i
, 
j
 = 0;

130 
 °©_fûe
 *
lf
;

133 i‡(!
Âs
->
num
) {

134 
lf
 = 
 °©_fûes
;Üf;Ü‡lf->
√xt
) {

135 
i
 = 0; i < 
lf
->
num_fõlds
; i++) {

136 
Âs
->
∑øms
[
j
].
lf
 = &lf->
fõlds
[
i
];

137 
Âs
->
∑øms
[
j
].
lf
->
fûe
->
öãrvÆ
.
tv_£c
 =

138 
öãrvÆ
;

139 i‡(!
Âs
->
∑øms
[
j
].
¥öt
.
width
)

140 
Âs
->
∑øms
[
j
].
¥öt
.
width
 =

141 
FIELD_WIDTH_DEFAULT
;

143 i‡(++
j
 >
MAX_FIELDS
 - 1) {

144 
	`Ârötf
(
°dîr
,

147 
MAX_FIELDS
);

148 
fuŒ
;

152 
fuŒ
:

153 
Âs
->
num
 = 
j
;

157 
i
 = 0; i < 
Âs
->
num
; i++) {

158 
Âs
->
∑øms
[
i
].
lf
 = 
	` °©_föd_fõld
(
 °©_fûes
,

159 
Âs
->
∑øms
[
i
].
«me
);

160 i‡(!
Âs
->
∑øms
[
i
].
lf
) {

161 
	`Ârötf
(
°dîr
, "Field `%s' unknown\n",

162 
Âs
->
∑øms
[
i
].
«me
);

165 
Âs
->
∑øms
[
i
].
lf
->
fûe
->
öãrvÆ
.
tv_£c
 = interval;

166 i‡(!
Âs
->
∑øms
[
i
].
¥öt
.
width
)

167 
Âs
->
∑øms
[
i
].
¥öt
.
width
 = 
FIELD_WIDTH_DEFAULT
;

170 
	}
}

172 
	sèbÀ_hdr
 {

173 
	mnum_löes
;

174 *
	mhdr
[
HDR_LINES
];

177 
èbÀ_hdr
 *
	$buûd_hdr_°rög
(
 °©_fûe
 *
 °©_fûes
,

178 
fõld_∑øms
 *
Âs
,

179 
löewidth
)

181 
h
,
i
;

182 
èbÀ_hdr
 
th
;

183 
ofs
 = 0;

185 
i
 = 0; i < 
HDR_LINES
; i++) {

186 
th
.
hdr
[
i
] = 
	`mÆloc
(
HDR_LINE_LENGTH
);

187 
	`mem£t
(
th
.
hdr
[
i
], 0, 
HDR_LINE_LENGTH
);

190 
i
 = 0; i < 
Âs
->
num
; i++) {

191 *
˙ame
, *
‚ame
 = 
Âs
->
∑øms
[
i
].
lf
->
«me
;

192 
width
 = 
Âs
->
∑øms
[
i
].
¥öt
.width;

194 
	`¢¥ötf
(
th
.
hdr
[0]+
ofs
, 
width
+2, "%*.*s|", width, width,

195 
Âs
->
∑øms
[
i
].
lf
->
fûe
->
ba£«me
);

197 
˙ame
 = 
‚ame
;

198 
h
 = 1; h < 
HDR_LINES
; h++) {

199 i‡(
˙ame
 - 
‚ame
 >
	`°æí
(fname))

200 
	`¢¥ötf
(
th
.
hdr
[
h
]+
ofs
, 
width
+2,

201 "%*.*s|", 
width
, width, "");

203 
th
.
num_löes
 = 
h
+1;

204 
	`¢¥ötf
(
th
.
hdr
[
h
]+
ofs
, 
width
+2,

205 "%*.*s|", 
width
, width, 
˙ame
);

207 
˙ame
 +
width
;

209 
ofs
 +
width
+1;

212 
h
 = 1; h <
th
.
num_löes
; h++) {

213 
i
 = 0; i < 
ofs
; i++) {

214 i‡(
th
.
hdr
[
h
][
i
] == '\0')

215 
th
.
hdr
[
h
][
i
] = ' ';

219  &
th
;

220 
	}
}

222 
	$¥öt_hdr
(
FILE
 *
of
, 
èbÀ_hdr
 *
th
)

224 
i
;

226 
i
 = 0; i < 
th
->
num_löes
; i++) {

227 
	`Âuts
(
th
->
hdr
[
i
], 
of
);

228 
	`Âutc
('\n', 
of
);

231 
	}
}

234 
	$maö
(
¨gc
, **
¨gv
)

236 
 °©_fûe
 *
 °©_fûes
;

237 c⁄° *
ba£«me
;

238 
i
, 
c
;

239 
öãrvÆ
 = 
DEFAULT_INTERVAL
;

240 
hdr
 = 2;

242 
MODE_DUMP
,

243 
MODE_JSON
,

244 
MODE_NORMAL
,

245 } 
mode
 = 
MODE_NORMAL
;

246 
cou¡
 = 0;

247 
èbÀ_hdr
 *
hódî
;

248 
fõld_∑øms
 
Â
;

249 
num_ªq_fûes
 = 0;

250 *
ªq_fûes
[
LNSTAT_MAX_FILES
];

253 
ba£«me
 = 
	`°ºchr
(
¨gv
[0], '/');

254 i‡(
ba£«me
)

255 
ba£«me
 += 1;

257 
ba£«me
 = 
¨gv
[0];

259 i‡(!
	`°rcmp
(
ba£«me
, "rtstat")) {

261 
ªq_fûes
[0] = "rt_cache";

262 
num_ªq_fûes
 = 1;

263 } i‡(!
	`°rcmp
(
ba£«me
, "ctstat")) {

265 
ªq_fûes
[0] = "ip_conntrack";

266 
num_ªq_fûes
 = 1;

269 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
,"Vc:djpf:h?i:k:s:w:",

270 
›ts
, 
NULL
)) != -1) {

271 
Àn
 = 0;

272 *
tmp
, *
tok
;

274 
c
) {

276 
cou¡
 = 
	`°πoul
(
›èrg
, 
NULL
, 0);

279 
mode
 = 
MODE_DUMP
;

282 
mode
 = 
MODE_JSON
;

285 
ªq_fûes
[
num_ªq_fûes
++] = 
	`°rdup
(
›èrg
);

289 
	`ußge
(
¨gv
[0], 0);

292 
	`ssˇnf
(
›èrg
, "%u", &
öãrvÆ
);

295 
tmp
 = 
	`°rdup
(
›èrg
);

296 i‡(!
tmp
)

298 
tok
 = 
	`°πok
(
tmp
, ",");

299 
tok
;

300 
tok
 = 
	`°πok
(
NULL
, ",")) {

301 i‡(
Â
.
num
 >
MAX_FIELDS
) {

302 
	`Ârötf
(
°dîr
,

305 
MAX_FIELDS
);

308 
Â
.
∑øms
[Â.
num
++].
«me
 = 
tok
;

312 
	`ssˇnf
(
›èrg
, "%u", &
hdr
);

315 
tmp
 = 
	`°rdup
(
›èrg
);

316 i‡(!
tmp
)

318 
i
 = 0;

319 
tok
 = 
	`°πok
(
tmp
, ",");

320 
tok
;

321 
tok
 = 
	`°πok
(
NULL
, ",")) {

322 
Àn
 = 
	`°πoul
(
tok
, 
NULL
, 0);

323 i‡(
Àn
 > 
FIELD_WIDTH_MAX
)

324 
Àn
 = 
FIELD_WIDTH_MAX
;

325 
Â
.
∑øms
[
i
].
¥öt
.
width
 = 
Àn
;

326 
i
++;

328 i‡(
i
 == 1) {

329 
i
 = 0; i < 
MAX_FIELDS
; i++)

330 
Â
.
∑øms
[
i
].
¥öt
.
width
 = 
Àn
;

334 
	`ußge
(
¨gv
[0], 1);

339 
 °©_fûes
 = 
	` °©_sˇn_dú
(
PROC_NET_STAT
, 
num_ªq_fûes
,

340 (c⁄° **Ë
ªq_fûes
);

342 
mode
) {

343 
MODE_DUMP
:

344 
	` °©_dump
(
°dout
, 
 °©_fûes
);

347 
MODE_NORMAL
:

348 
MODE_JSON
:

349 i‡(!
	`m≠_fõld_∑øms
(
 °©_fûes
, &
Â
, 
öãrvÆ
))

350 
	`exô
(1);

352 
hódî
 = 
	`buûd_hdr_°rög
(
 °©_fûes
, &
Â
, 80);

353 i‡(!
hódî
)

354 
	`exô
(1);

356 i‡(
öãrvÆ
 < 1 )

357 
öãrvÆ
 = 1;

359 
i
 = 0; i < 
cou¡
 || !count; ) {

360 
	` °©_upd©e
(
 °©_fûes
);

361 i‡(
mode
 =
MODE_JSON
)

362 
	`¥öt_js⁄
(
°dout
, 
 °©_fûes
, &
Â
);

364 i‡((
hdr
 > 1 &&

365 (! (
i
 % 20))Ë|| (
hdr
 == 1 && i == 0))

366 
	`¥öt_hdr
(
°dout
, 
hódî
);

367 
	`¥öt_löe
(
°dout
, 
 °©_fûes
, &
Â
);

369 
	`fÊush
(
°dout
);

370 i‡(
i
 < 
cou¡
 - 1 || !count)

371 
	`¶ìp
(
öãrvÆ
);

372 i‡(
cou¡
)

373 ++
i
;

379 
	}
}

	@misc/lnstat.h

1 #i‚de‡
_LNSTAT_H


2 
	#_LNSTAT_H


	)

4 
	~<limôs.h
>

5 
	~<sys/£À˘.h
>

7 
	#LNSTAT_VERSION
 "0.02 041002"

	)

9 
	#PROC_NET_STAT
 "/¥oc/√t/°©"

	)

11 
	#LNSTAT_MAX_FILES
 32

	)

12 
	#LNSTAT_MAX_FIELDS_PER_LINE
 32

	)

13 
	#LNSTAT_MAX_FIELD_NAME_LEN
 32

	)

15 
	g °©_fûe
;

17 
	s °©_fõld
 {

18 
 °©_fûe
 *
	mfûe
;

19 
	mnum
;

20 
	m«me
[
LNSTAT_MAX_FIELD_NAME_LEN
+1];

21 
	mvÆues
[2];

22 
	mªsu…
;

25 
	s °©_fûe
 {

26 
 °©_fûe
 *
	m√xt
;

27 
	m∑th
[
PATH_MAX
+1];

28 
	mba£«me
[
NAME_MAX
+1];

29 
timevÆ
 
	mœ°_ªad
;

30 
timevÆ
 
	möãrvÆ
;

31 
	mcom∑t
;

32 
FILE
 *
	mÂ
;

33 
	mnum_fõlds
;

34 
 °©_fõld
 
	mfõlds
[
LNSTAT_MAX_FIELDS_PER_LINE
];

38 
 °©_fûe
 *
 °©_sˇn_dú
(c⁄° *
∑th
, c⁄° 
num_ªq_fûes
,

39 c⁄° **
ªq_fûes
);

40 
 °©_upd©e
(
 °©_fûe
 *
 °©_fûes
);

41 
 °©_dump
(
FILE
 *
outfd
, 
 °©_fûe
 *
 °©_fûes
);

42 
 °©_fõld
 *
 °©_föd_fõld
(
 °©_fûe
 *
 °©_fûes
,

43 c⁄° *
«me
);

	@misc/lnstat_util.c

19 
	~<uni°d.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<dúít.h
>

24 
	~<limôs.h
>

25 
	~<time.h
>

27 
	~<sys/time.h
>

28 
	~<sys/ty≥s.h
>

30 
	~" °©.h
"

33 
	#FGETS_BUF_SIZE
 1024

	)

36 
	#RTSTAT_COMPAT_LINE
 "íåõ† in_hô in_¶ow_tŸ in_no_rouã in_brd in_m¨tün_d° in_m¨tün_§¯ out_hô out_¶ow_tŸ out_¶ow_m¯ gc_tŸÆ gc_ign‹ed gc_gﬂl_mis†gc_d°_ovîÊow in_hli°_£¨ch out_hli°_£¨ch\n"

	)

39 
	$sˇn_löes
(
 °©_fûe
 *
lf
, 
i
)

41 
j
, 
num_löes
 = 0;

43 
j
 = 0; j < 
lf
->
num_fõlds
; j++)

44 
lf
->
fõlds
[
j
].
vÆues
[
i
] = 0;

46 !
	`„of
(
lf
->
Â
)) {

47 
buf
[
FGETS_BUF_SIZE
];

48 *
±r
 = 
buf
;

50 
num_löes
++;

52 
	`fgës
(
buf
, (buf)-1, 
lf
->
Â
);

53 
	`gëtimeofday
(&
lf
->
œ°_ªad
, 
NULL
);

55 
j
 = 0; j < 
lf
->
num_fõlds
; j++) {

56 
f
 = 
	`°πoul
(
±r
, &ptr, 16);

57 i‡(
j
 == 0)

58 
lf
->
fõlds
[
j
].
vÆues
[
i
] = 
f
;

60 
lf
->
fõlds
[
j
].
vÆues
[
i
] +
f
;

63  
num_löes
;

64 
	}
}

66 
	$time_a·î
(
timevÆ
 *
œ°
,

67 
timevÆ
 *
tout
,

68 
timevÆ
 *
now
)

70 i‡(
now
->
tv_£c
 > 
œ°
->tv_£¯+ 
tout
->tv_sec)

73 i‡(
now
->
tv_£c
 =
œ°
->tv_£¯+ 
tout
->tv_sec) {

74 i‡(
now
->
tv_u£c
 > 
œ°
->tv_u£¯+ 
tout
->tv_usec)

79 
	}
}

81 
	$ °©_upd©e
(
 °©_fûe
 *
 °©_fûes
)

83 
 °©_fûe
 *
lf
;

84 
buf
[
FGETS_BUF_SIZE
];

85 
timevÆ
 
tv
;

87 
	`gëtimeofday
(&
tv
, 
NULL
);

89 
lf
 = 
 °©_fûes
;Üf;Ü‡lf->
√xt
) {

90 i‡(
	`time_a·î
(&
lf
->
œ°_ªad
, &lf->
öãrvÆ
, &
tv
)) {

91 
i
;

92 
 °©_fõld
 *
lfi
;

94 
	`ªwöd
(
lf
->
Â
);

95 i‡(!
lf
->
com∑t
) {

97 
	`fgës
(
buf
, (buf)-1, 
lf
->
Â
);

99 
	`sˇn_löes
(
lf
, 1);

101 
i
 = 0, 
lfi
 = &
lf
->
fõlds
[i];

102 
i
 < 
lf
->
num_fõlds
; i++, 
lfi
 = &lf->
fõlds
[i]) {

103 i‡(
i
 == 0)

104 
lfi
->
ªsu…
 =Üfi->
vÆues
[1];

106 
lfi
->
ªsu…
 = (lfi->
vÆues
[1]-lfi->values[0])

107 / 
lf
->
öãrvÆ
.
tv_£c
;

110 
	`ªwöd
(
lf
->
Â
);

111 
	`fgës
(
buf
, (buf)-1, 
lf
->
Â
);

112 
	`sˇn_löes
(
lf
, 0);

117 
	}
}

120 
	$__ °©_sˇn_fõlds
(
 °©_fûe
 *
lf
, *
buf
)

122 *
tok
;

123 
i
;

125 
tok
 = 
	`°πok
(
buf
, " \t\n");

126 
i
 = 0; i < 
LNSTAT_MAX_FIELDS_PER_LINE
; i++) {

127 
lf
->
fõlds
[
i
].
fûe
 =Üf;

128 
	`°∫˝y
(
lf
->
fõlds
[
i
].
«me
, 
tok
, 
LNSTAT_MAX_FIELD_NAME_LEN
);

131 
tok
 = 
	`°πok
(
NULL
, " \t\n");

132 i‡(!
tok
) {

133 
lf
->
num_fõlds
 = 
i
+1;

138 
	}
}

140 
	$ °©_sˇn_fõlds
(
 °©_fûe
 *
lf
)

142 
buf
[
FGETS_BUF_SIZE
];

144 
	`ªwöd
(
lf
->
Â
);

145 
	`fgës
(
buf
, (buf)-1, 
lf
->
Â
);

147  
	`__ °©_sˇn_fõlds
(
lf
, 
buf
);

148 
	}
}

151 
	$ °©_sˇn_com∑t_π°©_fõlds
(
 °©_fûe
 *
lf
)

153 
buf
[
FGETS_BUF_SIZE
];

155 
	`°∫˝y
(
buf
, 
RTSTAT_COMPAT_LINE
, (buf)-1);

157  
	`__ °©_sˇn_fõlds
(
lf
, 
buf
);

158 
	}
}

161 
	$«me_ö_¨øy
(c⁄° 
num
, c⁄° **
¨r
, c⁄° *
«me
)

163 
i
;

164 
i
 = 0; i < 
num
; i++) {

165 i‡(!
	`°rcmp
(
¨r
[
i
], 
«me
))

169 
	}
}

172 
 °©_fûe
 *
	$Æloc_™d_›í
(c⁄° *
∑th
, c⁄° *
fûe
)

174 
 °©_fûe
 *
lf
;

177 
lf
 = 
	`mÆloc
((*lf));

178 i‡(!
lf
)

179  
NULL
;

182 
	`mem£t
(
lf
, 0, (*lf));

185 
	`°r˝y
(
lf
->
ba£«me
, 
fûe
);

186 
	`°r˝y
(
lf
->
∑th
,Öath);

187 
	`°rˇt
(
lf
->
∑th
, "/");

188 
	`°rˇt
(
lf
->
∑th
,Üf->
ba£«me
);

191 
lf
->
öãrvÆ
.
tv_£c
 = 1;

194 
lf
->
Â
 = 
	`f›í
÷f->
∑th
, "r");

195 i‡(!
lf
->
Â
) {

196 
	`‰ì
(
lf
);

197  
NULL
;

200  
lf
;

201 
	}
}

205 
 °©_fûe
 *
	$ °©_sˇn_dú
(c⁄° *
∑th
, c⁄° 
num_ªq_fûes
,

206 c⁄° **
ªq_fûes
)

208 
DIR
 *
dú
;

209 
 °©_fûe
 *
 °©_fûes
 = 
NULL
;

210 
dúít
 *
de
;

212 i‡(!
∑th
)

213 
∑th
 = 
PROC_NET_STAT
;

215 
dú
 = 
	`›ídú
(
∑th
);

216 i‡(!
dú
) {

217 
 °©_fûe
 *
lf
;

219 
	`Ârötf
(
°dîr
, "Your kernel doesn't haveÜnstat support. ");

222 i‡(
num_ªq_fûes
 >= 2) {

223 
	`Âutc
('\n', 
°dîr
);

224  
NULL
;

228 i‡(
num_ªq_fûes
 && !
	`«me_ö_¨øy
(num_req_files,

229 
ªq_fûes
, "rt_cache")) {

230 
	`Âutc
('\n', 
°dîr
);

231  
NULL
;

234 
	`Ârötf
(
°dîr
, "FallbackÅo oldÑtstat-only operation\n");

236 
lf
 = 
	`Æloc_™d_›í
("/proc/net", "rt_cache_stat");

237 i‡(!
lf
)

238  
NULL
;

239 
lf
->
com∑t
 = 1;

240 
	`°∫˝y
(
lf
->
ba£«me
, "rt_cache", (lf->basename));

243 i‡(
	` °©_sˇn_com∑t_π°©_fõlds
(
lf
) < 0)

244  
NULL
;

246 
lf
->
√xt
 = 
 °©_fûes
;

247 
 °©_fûes
 = 
lf
;

248  
 °©_fûes
;

251 (
de
 = 
	`ªaddú
(
dú
))) {

252 
 °©_fûe
 *
lf
;

254 i‡(
de
->
d_ty≥
 !
DT_REG
)

257 i‡(
num_ªq_fûes
 && !
	`«me_ö_¨øy
(num_req_files,

258 
ªq_fûes
, 
de
->
d_«me
))

261 
lf
 = 
	`Æloc_™d_›í
(
∑th
, 
de
->
d_«me
);

262 i‡(!
lf
)

263  
NULL
;

266 i‡(
	` °©_sˇn_fõlds
(
lf
) < 0)

267  
NULL
;

270 
lf
->
√xt
 = 
 °©_fûes
;

271 
 °©_fûes
 = 
lf
;

273 
	`˛o£dú
(
dú
);

275  
 °©_fûes
;

276 
	}
}

278 
	$ °©_dump
(
FILE
 *
outfd
, 
 °©_fûe
 *
 °©_fûes
)

280 
 °©_fûe
 *
lf
;

282 
lf
 = 
 °©_fûes
;Üf;Ü‡lf->
√xt
) {

283 
i
;

285 
	`Ârötf
(
outfd
, "%s:\n", 
lf
->
∑th
);

287 
i
 = 0; i < 
lf
->
num_fõlds
; i++)

288 
	`Ârötf
(
outfd
, "\t%2u: %s\n", 
i
+1, 
lf
->
fõlds
[i].
«me
);

292 
	}
}

294 
 °©_fõld
 *
	$ °©_föd_fõld
(
 °©_fûe
 *
 °©_fûes
,

295 c⁄° *
«me
)

297 
 °©_fûe
 *
lf
;

298 
 °©_fõld
 *
ªt
 = 
NULL
;

299 c⁄° *
cﬁ⁄
 = 
	`°rchr
(
«me
, ':');

300 *
fûe
;

301 c⁄° *
fõld
;

303 i‡(
cﬁ⁄
) {

304 
fûe
 = 
	`°∫dup
(
«me
, 
cﬁ⁄
-name);

305 
fõld
 = 
cﬁ⁄
+1;

307 
fûe
 = 
NULL
;

308 
fõld
 = 
«me
;

311 
lf
 = 
 °©_fûes
;Üf;Ü‡lf->
√xt
) {

312 
i
;

314 i‡(
fûe
 && 
	`°rcmp
(fûe, 
lf
->
ba£«me
))

317 
i
 = 0; i < 
lf
->
num_fõlds
; i++) {

318 i‡(!
	`°rcmp
(
fõld
, 
lf
->
fõlds
[
i
].
«me
)) {

319 
ªt
 = &
lf
->
fõlds
[
i
];

320 
out
;

324 
out
:

325 
	`‰ì
(
fûe
);

327  
ªt
;

328 
	}
}

	@misc/nstat.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<f˙é.h
>

16 
	~<°rög.h
>

17 
	~<î∫o.h
>

18 
	~<time.h
>

19 
	~<sys/time.h
>

20 
	~<‚m©ch.h
>

21 
	~<sys/fûe.h
>

22 
	~<sys/sockë.h
>

23 
	~<sys/un.h
>

24 
	~<sys/pﬁl.h
>

25 
	~<sys/waô.h
>

26 
	~<sys/°©.h
>

27 
	~<sig«l.h
>

28 
	~<m©h.h
>

29 
	~<gë›t.h
>

31 
	~<js⁄_wrôî.h
>

32 
	~<SNAPSHOT.h
>

34 
	gdump_zîos
 = 0;

35 
	gª£t_hi°‹y
 = 0;

36 
	gign‹e_hi°‹y
 = 0;

37 
	gno_ouçut
 = 0;

38 
	gjs⁄_ouçut
 = 0;

39 
	g¥ëty
 = 0;

40 
	gno_upd©e
 = 0;

41 
	gsˇn_öãrvÆ
 = 0;

42 
	gtime_c⁄°™t
 = 0;

43 
	gW
;

44 **
	g∑âîns
;

45 
	g≈©ã∫s
;

47 
	göfo_sour˚
[128];

48 
	gsour˚_mism©ch
;

50 
	$gíîic_¥oc_›í
(c⁄° *
ív
, *
«me
)

52 
°‹e
[128];

53 *
p
 = 
	`gëív
(
ív
);

54 i‡(!
p
) {

55 
p
 = 
	`gëív
("PROC_ROOT") ? : "/proc";

56 
	`¢¥ötf
(
°‹e
, (°‹e)-1, "%s/%s", 
p
, 
«me
);

57 
p
 = 
°‹e
;

59  
	`›í
(
p
, 
O_RDONLY
);

60 
	}
}

62 
	$√t_√t°©_›í
()

64  
	`gíîic_¥oc_›í
("PROC_NET_NETSTAT", "net/netstat");

65 
	}
}

67 
	$√t_¢mp_›í
()

69  
	`gíîic_¥oc_›í
("PROC_NET_SNMP", "net/snmp");

70 
	}
}

72 
	$√t_¢mp6_›í
()

74  
	`gíîic_¥oc_›í
("PROC_NET_SNMP6", "net/snmp6");

75 
	}
}

77 
	sn°©_ít


79 
n°©_ít
 *
	m√xt
;

80 *
	mid
;

81 
	mvÆ
;

82 
	møã
;

85 
n°©_ít
 *
	gkîn_db
;

86 
n°©_ít
 *
	ghi°_db
;

88 c⁄° *
	gu£Àss_numbîs
[] = {

94 
	$u£Àss_numbî
(c⁄° *
id
)

96 
i
;

97 
i
=0; i<(
u£Àss_numbîs
)/(*useless_numbers); i++)

98 i‡(
	`°rcmp
(
id
, 
u£Àss_numbîs
[
i
]) == 0)

101 
	}
}

103 
	$m©ch
(c⁄° *
id
)

105 
i
;

107 i‡(
≈©ã∫s
 == 0)

110 
i
=0; i<
≈©ã∫s
; i++) {

111 i‡(!
	`‚m©ch
(
∑âîns
[
i
], 
id
, 0))

115 
	}
}

117 
	$lﬂd_good_èbÀ
(
FILE
 *
Â
)

119 
buf
[4096];

120 
n°©_ít
 *
db
 = 
NULL
;

121 
n°©_ít
 *
n
;

123 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

124 
ƒ
;

125 
vÆ
;

126 
øã
;

127 
idbuf
[(
buf
)];

128 i‡(
buf
[0] == '#') {

129 
buf
[
	`°æí
(buf)-1] = 0;

130 i‡(
öfo_sour˚
[0] && 
	`°rcmp
(öfo_sour˚, 
buf
+1))

131 
sour˚_mism©ch
 = 1;

132 
öfo_sour˚
[0] = 0;

133 
	`°∫ˇt
(
öfo_sour˚
, 
buf
+1, (info_source)-1);

137 
ƒ
 = 
	`ssˇnf
(
buf
, "%s%Œu%lg", 
idbuf
, &
vÆ
, &
øã
);

138 i‡(
ƒ
 < 2)

139 
	`ab‹t
();

140 i‡(
ƒ
 < 3)

141 
øã
 = 0;

142 i‡(
	`u£Àss_numbî
(
idbuf
))

144 i‡((
n
 = 
	`mÆloc
((*n))Ë=
NULL
)

145 
	`ab‹t
();

146 
n
->
id
 = 
	`°rdup
(
idbuf
);

147 
n
->
vÆ
 = val;

148 
n
->
øã
 =Ñate;

149 
n
->
√xt
 = 
db
;

150 
db
 = 
n
;

153 
db
) {

154 
n
 = 
db
;

155 
db
 = db->
√xt
;

156 
n
->
√xt
 = 
kîn_db
;

157 
kîn_db
 = 
n
;

159 
	}
}

161 
	$cou¡_•a˚s
(c⁄° *
löe
)

163 
cou¡
 = 0;

164 
c
;

166 (
c
 = *
löe
++) != 0)

167 
cou¡
 +
c
 == ' ' || c == '\n';

168  
cou¡
;

169 
	}
}

171 
	$lﬂd_ugly_èbÀ
(
FILE
 *
Â
)

173 
buf
[4096];

174 
n°©_ít
 *
db
 = 
NULL
;

175 
n°©_ít
 *
n
;

177 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

178 
idbuf
[(
buf
)];

179 
off
;

180 *
p
;

181 
cou¡1
, 
cou¡2
, 
skù
 = 0;

183 
p
 = 
	`°rchr
(
buf
, ':');

184 i‡(!
p
)

185 
	`ab‹t
();

186 
cou¡1
 = 
	`cou¡_•a˚s
(
buf
);

187 *
p
 = 0;

188 
idbuf
[0] = 0;

189 
	`°∫ˇt
(
idbuf
, 
buf
, (idbuf) - 1);

190 
off
 = 
p
 - 
buf
;

191 
p
 += 2;

193 *
p
) {

194 *
√xt
;

195 i‡((
√xt
 = 
	`°rchr
(
p
, ' ')Ë!
NULL
)

196 *
√xt
++ = 0;

197 i‡((
√xt
 = 
	`°rchr
(
p
, '\n')Ë!
NULL
)

198 *
√xt
++ = 0;

199 i‡(
off
 < (
idbuf
)) {

200 
idbuf
[
off
] = 0;

201 
	`°∫ˇt
(
idbuf
, 
p
, (idbufË- 
off
 - 1);

203 
n
 = 
	`mÆloc
((*n));

204 i‡(!
n
)

205 
	`ab‹t
();

206 
n
->
id
 = 
	`°rdup
(
idbuf
);

207 
n
->
øã
 = 0;

208 
n
->
√xt
 = 
db
;

209 
db
 = 
n
;

210 
p
 = 
√xt
;

212 
n
 = 
db
;

213 i‡(
	`fgës
(
buf
, (buf), 
Â
Ë=
NULL
)

214 
	`ab‹t
();

215 
cou¡2
 = 
	`cou¡_•a˚s
(
buf
);

216 i‡(
cou¡2
 > 
cou¡1
)

217 
skù
 = 
cou¡2
 - 
cou¡1
;

219 
p
 = 
	`°ºchr
(
buf
, ' ');

220 i‡(!
p
)

221 
	`ab‹t
();

222 *
p
 = 0;

223 i‡(
	`ssˇnf
(
p
+1, "%Œu", &
n
->
vÆ
) != 1)

224 
	`ab‹t
();

226 i‡(
skù
)

227 
skù
--;

229 
n
 =Ç->
√xt
;

230 } 
p
 > 
buf
 + 
off
 + 2);

233 
db
) {

234 
n
 = 
db
;

235 
db
 = db->
√xt
;

236 i‡(
	`u£Àss_numbî
(
n
->
id
)) {

237 
	`‰ì
(
n
->
id
);

238 
	`‰ì
(
n
);

240 
n
->
√xt
 = 
kîn_db
;

241 
kîn_db
 = 
n
;

244 
	}
}

246 
	$lﬂd_¢mp
()

248 
FILE
 *
Â
 = 
	`fd›í
(
	`√t_¢mp_›í
(), "r");

249 i‡(
Â
) {

250 
	`lﬂd_ugly_èbÀ
(
Â
);

251 
	`f˛o£
(
Â
);

253 
	}
}

255 
	$lﬂd_¢mp6
()

257 
FILE
 *
Â
 = 
	`fd›í
(
	`√t_¢mp6_›í
(), "r");

258 i‡(
Â
) {

259 
	`lﬂd_good_èbÀ
(
Â
);

260 
	`f˛o£
(
Â
);

262 
	}
}

264 
	$lﬂd_√t°©
()

266 
FILE
 *
Â
 = 
	`fd›í
(
	`√t_√t°©_›í
(), "r");

267 i‡(
Â
) {

268 
	`lﬂd_ugly_èbÀ
(
Â
);

269 
	`f˛o£
(
Â
);

271 
	}
}

274 
	$dump_kîn_db
(
FILE
 *
Â
, 
to_hi°
)

276 
js⁄_wrôî_t
 *
jw
 = 
js⁄_ouçut
 ? 
	`js⁄w_√w
(
Â
Ë: 
NULL
;

277 
n°©_ít
 *
n
, *
h
;

279 
h
 = 
hi°_db
;

280 i‡(
jw
) {

281 
	`js⁄w_¥ëty
(
jw
, 
¥ëty
);

282 
	`js⁄w_«me
(
jw
, 
öfo_sour˚
);

283 
	`js⁄w_°¨t_obje˘
(
jw
);

285 
	`Ârötf
(
Â
, "#%s\n", 
öfo_sour˚
);

287 
n
=
kîn_db
;Ç;ÇÚ->
√xt
) {

288 
vÆ
 = 
n
->val;

289 i‡(!
dump_zîos
 && !
vÆ
 && !
n
->
øã
)

291 i‡(!
	`m©ch
(
n
->
id
)) {

292 
n°©_ít
 *
h1
;

293 i‡(!
to_hi°
)

295 
h1
 = 
h
; h1; h1 = h1->
√xt
) {

296 i‡(
	`°rcmp
(
h1
->
id
, 
n
->id) == 0) {

297 
vÆ
 = 
h1
->val;

298 
h
 = 
h1
->
√xt
;

304 i‡(
jw
)

305 
	`js⁄w_uöt_fõld
(
jw
, 
n
->
id
, 
vÆ
);

307 
	`Ârötf
(
Â
, "%-32s%-16Œu%6.1f\n", 
n
->
id
, 
vÆ
,Ç->
øã
);

310 i‡(
jw
) {

311 
	`js⁄w_íd_obje˘
(
jw
);

312 
	`js⁄w_de°roy
(&
jw
);

314 
	}
}

316 
	$dump_ö¸_db
(
FILE
 *
Â
)

318 
js⁄_wrôî_t
 *
jw
 = 
js⁄_ouçut
 ? 
	`js⁄w_√w
(
Â
Ë: 
NULL
;

319 
n°©_ít
 *
n
, *
h
;

321 
h
 = 
hi°_db
;

322 i‡(
jw
) {

323 
	`js⁄w_¥ëty
(
jw
, 
¥ëty
);

324 
	`js⁄w_«me
(
jw
, 
öfo_sour˚
);

325 
	`js⁄w_°¨t_obje˘
(
jw
);

327 
	`Ârötf
(
Â
, "#%s\n", 
öfo_sour˚
);

329 
n
=
kîn_db
;Ç;ÇÚ->
√xt
) {

330 
ovÊ
 = 0;

331 
vÆ
 = 
n
->val;

332 
n°©_ít
 *
h1
;

333 
h1
 = 
h
; h1; h1 = h1->
√xt
) {

334 i‡(
	`°rcmp
(
h1
->
id
, 
n
->id) == 0) {

335 i‡(
vÆ
 < 
h1
->val) {

336 
ovÊ
 = 1;

337 
vÆ
 = 
h1
->val;

339 
vÆ
 -
h1
->val;

340 
h
 = 
h1
->
√xt
;

344 i‡(!
dump_zîos
 && !
vÆ
 && !
n
->
øã
)

346 i‡(!
	`m©ch
(
n
->
id
))

349 i‡(
jw
)

350 
	`js⁄w_uöt_fõld
(
jw
, 
n
->
id
, 
vÆ
);

352 
	`Ârötf
(
Â
, "%-32s%-16Œu%6.1f%s\n", 
n
->
id
, 
vÆ
,

353 
n
->
øã
, 
ovÊ
?" (overflow)":"");

356 i‡(
jw
) {

357 
	`js⁄w_íd_obje˘
(
jw
);

358 
	`js⁄w_de°roy
(&
jw
);

360 
	}
}

362 
	gchûdªn
;

364 
	$sigchûd
(
signo
)

366 
	}
}

368 
	$upd©e_db
(
öãrvÆ
)

370 
n°©_ít
 *
n
, *
h
;

372 
n
 = 
kîn_db
;

373 
kîn_db
 = 
NULL
;

375 
	`lﬂd_√t°©
();

376 
	`lﬂd_¢mp6
();

377 
	`lﬂd_¢mp
();

379 
h
 = 
kîn_db
;

380 
kîn_db
 = 
n
;

382 
n
 = 
kîn_db
;Ç;Ç =Ç->
√xt
) {

383 
n°©_ít
 *
h1
;

384 
h1
 = 
h
; h1; h1 = h1->
√xt
) {

385 i‡(
	`°rcmp
(
h1
->
id
, 
n
->id) == 0) {

386 
ßm∂e
;

387 
ö¸
 = 
h1
->
vÆ
 - 
n
->val;

389 
n
->
vÆ
 = 
h1
->val;

390 
ßm∂e
 = ()
ö¸
 * 1000.0 / 
öãrvÆ
;

391 i‡(
öãrvÆ
 >
sˇn_öãrvÆ
) {

392 
n
->
øã
 +
W
*(
ßm∂e
-n->rate);

393 } i‡(
öãrvÆ
 >= 1000) {

394 i‡(
öãrvÆ
 >
time_c⁄°™t
) {

395 
n
->
øã
 = 
ßm∂e
;

397 
w
 = 
W
*()
öãrvÆ
/
sˇn_öãrvÆ
;

398 
n
->
øã
 +
w
*(
ßm∂e
-n->rate);

402 
h
 !
h1
) {

403 
n°©_ít
 *
tmp
 = 
h
;

404 
h
 = h->
√xt
;

405 
	`‰ì
(
tmp
->
id
);

406 
	`‰ì
(
tmp
);

408 
h
 = 
h1
->
√xt
;

409 
	`‰ì
(
h1
->
id
);

410 
	`‰ì
(
h1
);

415 
	}
}

417 
	#T_DIFF
(
a
,
b
Ë((◊).
tv_£c
-(b).tv_£c)*1000 + (◊).
tv_u£c
-(b).tv_u£c)/1000)

	)

420 
	$£rvî_lo›
(
fd
)

422 
timevÆ
 
¢≠time
 = { 0 };

423 
pﬁlfd
 
p
;

424 
p
.
fd
 = fd;

425 
p
.
evíts
 =Ö.
ªvíts
 = 
POLLIN
;

427 
	`•rötf
(
öfo_sour˚
, "%d.%lu sampling_interval=%dÅime_const=%d",

428 
	`gëpid
(), ()
	`øndom
(), 
sˇn_öãrvÆ
/1000, 
time_c⁄°™t
/1000);

430 
	`lﬂd_√t°©
();

431 
	`lﬂd_¢mp6
();

432 
	`lﬂd_¢mp
();

435 
°©us
;

436 
tdiff
;

437 
timevÆ
 
now
;

438 
	`gëtimeofday
(&
now
, 
NULL
);

439 
tdiff
 = 
	`T_DIFF
(
now
, 
¢≠time
);

440 i‡(
tdiff
 >
sˇn_öãrvÆ
) {

441 
	`upd©e_db
(
tdiff
);

442 
¢≠time
 = 
now
;

443 
tdiff
 = 0;

445 i‡(
	`pﬁl
(&
p
, 1, 
tdiff
 + 
sˇn_öãrvÆ
) > 0

446 && (
p
.
ªvíts
&
POLLIN
)) {

447 
˛¡
 = 
	`ac˚±
(
fd
, 
NULL
, NULL);

448 i‡(
˛¡
 >= 0) {

449 
pid_t
 
pid
;

450 i‡(
chûdªn
 >= 5) {

451 
	`˛o£
(
˛¡
);

452 } i‡((
pid
 = 
	`f‹k
()) != 0) {

453 i‡(
pid
>0)

454 
chûdªn
++;

455 
	`˛o£
(
˛¡
);

457 
FILE
 *
Â
 = 
	`fd›í
(
˛¡
, "w");

458 i‡(
Â
) {

459 i‡(
tdiff
 > 0)

460 
	`upd©e_db
(
tdiff
);

461 
	`dump_kîn_db
(
Â
, 0);

463 
	`exô
(0);

467 
chûdªn
 && 
	`waôpid
(-1, &
°©us
, 
WNOHANG
) > 0)

468 
chûdªn
--;

470 
	}
}

472 
	$vîify_f‹gög
(
fd
)

474 
u¸ed
 
¸ed
;

475 
sockÀn_t
 
ﬁí
 = (
¸ed
);

477 i‡(
	`gësock›t
(
fd
, 
SOL_SOCKET
, 
SO_PEERCRED
, (*)&
¸ed
, &
ﬁí
) ||

478 
ﬁí
 < (
¸ed
))

480 i‡(
¸ed
.
uid
 =
	`gëuid
() || cred.uid == 0)

483 
	}
}

485 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

487 
	$ußge
()

489 
	`Ârötf
(
°dîr
,

502 
	`exô
(-1);

503 
	}
}

505 c⁄° 
›ti⁄
 
	gl⁄g›ts
[] = {

520 
	$maö
(
¨gc
, *
¨gv
[])

522 *
hi°_«me
;

523 
sockaddr_un
 
sun
;

524 
FILE
 *
hi°_Â
 = 
NULL
;

525 
ch
;

526 
fd
;

528 (
ch
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?vVzrnasd:t:jp",

529 
l⁄g›ts
, 
NULL
)Ë!
EOF
) {

530 
ch
) {

532 
dump_zîos
 = 1;

535 
ª£t_hi°‹y
 = 1;

538 
ign‹e_hi°‹y
 = 1;

541 
no_upd©e
 = 1;

544 
no_ouçut
 = 1;

547 
sˇn_öãrvÆ
 = 1000*
	`©oi
(
›èrg
);

550 i‡(
	`ssˇnf
(
›èrg
, "%d", &
time_c⁄°™t
) != 1 ||

551 
time_c⁄°™t
 <= 0) {

552 
	`Ârötf
(
°dîr
, "nstat: invalidÅime constant divisor\n");

553 
	`exô
(-1);

557 
js⁄_ouçut
 = 1;

560 
¥ëty
 = 1;

564 
	`¥ötf
("n°© utûôy, i¥ouã2-ss%s\n", 
SNAPSHOT
);

565 
	`exô
(0);

569 
	`ußge
();

573 
¨gc
 -
›töd
;

574 
¨gv
 +
›töd
;

576 
sun
.
sun_Ámûy
 = 
AF_UNIX
;

577 
sun
.
sun_∑th
[0] = 0;

578 
	`•rötf
(
sun
.
sun_∑th
+1, "n°©%d", 
	`gëuid
());

580 i‡(
sˇn_öãrvÆ
 > 0) {

581 i‡(
time_c⁄°™t
 == 0)

582 
time_c⁄°™t
 = 60;

583 
time_c⁄°™t
 *= 1000;

584 
W
 = 1 - 1/
	`exp
(
	`log
(10)*()
sˇn_öãrvÆ
/
time_c⁄°™t
);

585 i‡((
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) < 0) {

586 
	`≥º‹
("nstat: socket");

587 
	`exô
(-1);

589 i‡(
	`böd
(
fd
, (
sockaddr
*)&
sun
, 2+1+
	`°æí
(sun.
sun_∑th
+1)) < 0) {

590 
	`≥º‹
("nstat: bind");

591 
	`exô
(-1);

593 i‡(
	`li°í
(
fd
, 5) < 0) {

594 
	`≥º‹
("nstat:Üisten");

595 
	`exô
(-1);

597 i‡(
	`d´m⁄
(0, 0)) {

598 
	`≥º‹
("nstat: daemon");

599 
	`exô
(-1);

601 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

602 
	`sig«l
(
SIGCHLD
, 
sigchûd
);

603 
	`£rvî_lo›
(
fd
);

604 
	`exô
(0);

607 
∑âîns
 = 
¨gv
;

608 
≈©ã∫s
 = 
¨gc
;

610 i‡((
hi°_«me
 = 
	`gëív
("NSTAT_HISTORY")Ë=
NULL
) {

611 
hi°_«me
 = 
	`mÆloc
(128);

612 
	`•rötf
(
hi°_«me
, "/tmp/.n°©.u%d", 
	`gëuid
());

615 i‡(
ª£t_hi°‹y
)

616 
	`u∆ök
(
hi°_«me
);

618 i‡(!
ign‹e_hi°‹y
 || !
no_upd©e
) {

619 
°©
 
°b
;

621 
fd
 = 
	`›í
(
hi°_«me
, 
O_RDWR
|
O_CREAT
|
O_NOFOLLOW
, 0600);

622 i‡(
fd
 < 0) {

623 
	`≥º‹
("nstat: open history file");

624 
	`exô
(-1);

626 i‡((
hi°_Â
 = 
	`fd›í
(
fd
, "r+")Ë=
NULL
) {

627 
	`≥º‹
("nstat: fdopen history file");

628 
	`exô
(-1);

630 i‡(
	`Êock
(
	`fûío
(
hi°_Â
), 
LOCK_EX
)) {

631 
	`≥º‹
("nstat: flock history file");

632 
	`exô
(-1);

634 i‡(
	`f°©
(
	`fûío
(
hi°_Â
), &
°b
) != 0) {

635 
	`≥º‹
("nstat: fstat history file");

636 
	`exô
(-1);

638 i‡(
°b
.
°_∆ök
 !1 || stb.
°_uid
 !
	`gëuid
()) {

639 
	`Ârötf
(
°dîr
, "nstat: something is so wrong with history file,Åhat IÖreferÇotÅoÖroceed.\n");

640 
	`exô
(-1);

642 i‡(!
ign‹e_hi°‹y
) {

643 
FILE
 *
tÂ
;

644 
u±ime
 = -1;

645 i‡((
tÂ
 = 
	`f›í
("/¥oc/u±ime", "r")Ë!
NULL
) {

646 i‡(
	`fsˇnf
(
tÂ
, "%ld", &
u±ime
) != 1)

647 
u±ime
 = -1;

648 
	`f˛o£
(
tÂ
);

650 i‡(
u±ime
 >0 && 
	`time
(
NULL
Ë>
°b
.
°_mtime
+uptime) {

651 
	`Ârötf
(
°dîr
, "nstat: history iságed out,Ñesetting\n");

652 
	`·runˇã
(
	`fûío
(
hi°_Â
), 0);

656 
	`lﬂd_good_èbÀ
(
hi°_Â
);

658 
hi°_db
 = 
kîn_db
;

659 
kîn_db
 = 
NULL
;

662 i‡((
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) >= 0 &&

663 (
	`c⁄√˘
(
fd
, (
sockaddr
*)&
sun
, 2+1+
	`°æí
(sun.
sun_∑th
+1)) == 0

664 || (
	`°r˝y
(
sun
.
sun_∑th
+1, "nstat0"),

665 
	`c⁄√˘
(
fd
, (
sockaddr
*)&
sun
, 2+1+
	`°æí
(sun.
sun_∑th
+1)) == 0))

666 && 
	`vîify_f‹gög
(
fd
) == 0) {

667 
FILE
 *
sÂ
 = 
	`fd›í
(
fd
, "r");

668 
	`lﬂd_good_èbÀ
(
sÂ
);

669 i‡(
hi°_db
 && 
sour˚_mism©ch
) {

670 
	`Ârötf
(
°dîr
, "nstat: history is stale, ignoring it.\n");

671 
hi°_db
 = 
NULL
;

673 
	`f˛o£
(
sÂ
);

675 i‡(
fd
 >= 0)

676 
	`˛o£
(
fd
);

677 i‡(
hi°_db
 && 
öfo_sour˚
[0] && 
	`°rcmp
(info_source, "kernel")) {

678 
	`Ârötf
(
°dîr
, "nstat: history is stale, ignoring it.\n");

679 
hi°_db
 = 
NULL
;

680 
öfo_sour˚
[0] = 0;

682 
	`lﬂd_√t°©
();

683 
	`lﬂd_¢mp6
();

684 
	`lﬂd_¢mp
();

685 i‡(
öfo_sour˚
[0] == 0)

686 
	`°r˝y
(
öfo_sour˚
, "kernel");

689 i‡(!
no_ouçut
) {

690 i‡(
ign‹e_hi°‹y
 || 
hi°_db
 =
NULL
)

691 
	`dump_kîn_db
(
°dout
, 0);

693 
	`dump_ö¸_db
(
°dout
);

695 i‡(!
no_upd©e
) {

696 
	`·runˇã
(
	`fûío
(
hi°_Â
), 0);

697 
	`ªwöd
(
hi°_Â
);

699 
js⁄_ouçut
 = 0;

700 
	`dump_kîn_db
(
hi°_Â
, 1);

701 
	`f˛o£
(
hi°_Â
);

703 
	`exô
(0);

704 
	}
}

	@misc/rtacct.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<f˙é.h
>

17 
	~<°rög.h
>

18 
	~<î∫o.h
>

19 
	~<time.h
>

20 
	~<sys/time.h
>

21 
	~<‚m©ch.h
>

22 
	~<sys/fûe.h
>

23 
	~<sys/sockë.h
>

24 
	~<sys/un.h
>

25 
	~<sys/pﬁl.h
>

26 
	~<sys/waô.h
>

27 
	~<sys/°©.h
>

28 
	~<sys/mm™.h
>

29 
	~<sig«l.h
>

30 
	~<m©h.h
>

32 
	~"π_«mes.h
"

34 
	~<SNAPSHOT.h
>

36 
	gª£t_hi°‹y
 = 0;

37 
	gign‹e_hi°‹y
 = 0;

38 
	gno_ouçut
 = 0;

39 
	gno_upd©e
 = 0;

40 
	gsˇn_öãrvÆ
 = 0;

41 
	gtime_c⁄°™t
 = 0;

42 
	gdump_zîos
 = 0;

43 
	gmagic_numbî
 = 0;

44 
	gW
;

46 
	$gíîic_¥oc_›í
(c⁄° *
ív
, c⁄° *
«me
)

48 
°‹e
[1024];

49 *
p
 = 
	`gëív
(
ív
);

50 i‡(!
p
) {

51 
p
 = 
	`gëív
("PROC_ROOT") ? : "/proc";

52 
	`¢¥ötf
(
°‹e
, (°‹e)-1, "%s/%s", 
p
, 
«me
);

53 
p
 = 
°‹e
;

55  
	`›í
(
p
, 
O_RDONLY
);

56 
	}
}

58 
	$√t_πac˘_›í
()

60  
	`gíîic_¥oc_›í
("PROC_NET_RTACCT", "net/rt_acct");

61 
	}
}

63 
__u32
 
	grm≠
[256/4];

65 
	sπac˘_d©a


67 
__u32
 
	mivÆ
[256*4];

69 
	mvÆ
[256*4];

70 
	møã
[256*4];

71 
	msig«tuª
[128];

74 
πac˘_d©a
 
	gkîn_db_°©ic
;

76 
πac˘_d©a
 *
	gkîn_db
 = &
kîn_db_°©ic
;

77 
πac˘_d©a
 *
	ghi°_db
;

79 
	$ƒód
(
fd
, *
buf
, 
tŸ
)

81 
cou¡
 = 0;

83 
cou¡
 < 
tŸ
) {

84 
n
 = 
	`ªad
(
fd
, 
buf
+
cou¡
, 
tŸ
-count);

85 i‡(
n
 < 0) {

86 i‡(
î∫o
 =
EINTR
)

88 
	`exô
(-1);

90 i‡(
n
 == 0)

91 
	`exô
(-1);

92 
cou¡
 +
n
;

94 
	}
}

96 
__u32
 *
	$ªad_kîn_èbÀ
(
__u32
 *
tbl
)

98 
__u32
 *
tbl_±r
;

99 
fd
;

101 i‡(
magic_numbî
) {

102 i‡(
tbl_±r
 !
NULL
)

103  
tbl_±r
;

105 
fd
 = 
	`›í
("/dev/mem", 
O_RDONLY
);

106 i‡(
fd
 < 0) {

107 
	`≥º‹
("magic open");

108 
	`exô
(-1);

110 
tbl_±r
 = 
	`mm≠
(
NULL
, 4096,

111 
PROT_READ
,

112 
MAP_SHARED
,

113 
fd
, 
magic_numbî
);

114 i‡(()
tbl_±r
 == ~0UL) {

115 
	`≥º‹
("magic mmap");

116 
	`exô
(-1);

118 
	`˛o£
(
fd
);

119  
tbl_±r
;

122 
fd
 = 
	`√t_πac˘_›í
();

123 i‡(
fd
 >= 0) {

124 
	`ƒód
(
fd
, (*)
tbl
, 256*16);

125 
	`˛o£
(
fd
);

127 
	`mem£t
(
tbl
, 0, 256*16);

129  
tbl
;

130 
	}
}

132 
	$f‹m©_øã
(
FILE
 *
Â
, 
øã
)

134 
ãmp
[64];

136 i‡(
øã
 > 1024*1024) {

137 
	`•rötf
(
ãmp
, "%uM", ()
	`röt
(
øã
/(1024*1024)));

138 
	`Ârötf
(
Â
, " %-10s", 
ãmp
);

139 } i‡(
øã
 > 1024) {

140 
	`•rötf
(
ãmp
, "%uK", ()
	`röt
(
øã
/1024));

141 
	`Ârötf
(
Â
, " %-10s", 
ãmp
);

143 
	`Ârötf
(
Â
, " %-10u", ()
øã
);

144 
	}
}

146 
	$f‹m©_cou¡
(
FILE
 *
Â
, 
vÆ
)

148 i‡(
vÆ
 > 1024*1024*1024)

149 
	`Ârötf
(
Â
, " %10ŒuM", 
vÆ
/(1024*1024));

150 i‡(
vÆ
 > 1024*1024)

151 
	`Ârötf
(
Â
, " %10ŒuK", 
vÆ
/1024);

153 
	`Ârötf
(
Â
, " %10Œu", 
vÆ
);

154 
	}
}

156 
	$dump_abs_db
(
FILE
 *
Â
)

158 
ªÆm
;

159 
b1
[16];

161 i‡(!
no_ouçut
) {

162 
	`Ârötf
(
Â
, "#%s\n", 
kîn_db
->
sig«tuª
);

163 
	`Ârötf
(
Â
,

171 
	`Ârötf
(
Â
,

182 
ªÆm
=0;Ñealm<256;Ñealm++) {

183 
i
;

184 *
vÆ
;

185 *
øã
;

187 i‡(!(
rm≠
[
ªÆm
>>5] & (1<<(realm&0x1f))))

190 
vÆ
 = &
kîn_db
->vÆ[
ªÆm
*4];

191 
øã
 = &
kîn_db
->øã[
ªÆm
*4];

193 i‡(!
dump_zîos
 &&

194 !
vÆ
[0] && !
øã
[0] &&

195 !
vÆ
[1] && !
øã
[1] &&

196 !
vÆ
[2] && !
øã
[2] &&

197 !
vÆ
[3] && !
øã
[3])

200 i‡(
hi°_db
) {

201 
	`mem˝y
(&
hi°_db
->
vÆ
[
ªÆm
*4], val, (*val)*4);

204 i‡(
no_ouçut
)

207 
	`Ârötf
(
Â
, "%-10s", 
	`π∆_πªÆm_n2a
(
ªÆm
, 
b1
, (b1)));

208 
i
 = 0; i < 4; i++)

209 
	`f‹m©_cou¡
(
Â
, 
vÆ
[
i
]);

210 
	`Ârötf
(
Â
, "\n%-10s", "");

211 
i
 = 0; i < 4; i++)

212 
	`f‹m©_øã
(
Â
, 
øã
[
i
]);

213 
	`Ârötf
(
Â
, "\n");

215 
	}
}

218 
	$dump_ö¸_db
(
FILE
 *
Â
)

220 
k
, 
ªÆm
;

221 
b1
[16];

223 i‡(!
no_ouçut
) {

224 
	`Ârötf
(
Â
, "#%s\n", 
kîn_db
->
sig«tuª
);

225 
	`Ârötf
(
Â
,

233 
	`Ârötf
(
Â
,

243 
ªÆm
=0;Ñealm<256;Ñealm++) {

244 
ovÊ
 = 0;

245 
i
;

246 *
vÆ
;

247 *
øã
;

248 
rvÆ
[4];

250 i‡(!(
rm≠
[
ªÆm
>>5] & (1<<(realm&0x1f))))

253 
vÆ
 = &
kîn_db
->vÆ[
ªÆm
*4];

254 
øã
 = &
kîn_db
->øã[
ªÆm
*4];

256 
k
=0; k<4; k++) {

257 
rvÆ
[
k
] = 
vÆ
[k];

258 i‡(
rvÆ
[
k
] < 
hi°_db
->
vÆ
[
ªÆm
*4+k])

259 
ovÊ
 = 1;

261 
rvÆ
[
k
] -
hi°_db
->
vÆ
[
ªÆm
*4+k];

263 i‡(
ovÊ
) {

264 
k
=0; k<4; k++)

265 
rvÆ
[
k
] = 
vÆ
[k];

267 i‡(
hi°_db
) {

268 
	`mem˝y
(&
hi°_db
->
vÆ
[
ªÆm
*4], val, (*val)*4);

271 i‡(
no_ouçut
)

274 i‡(!
dump_zîos
 &&

275 !
rvÆ
[0] && !
øã
[0] &&

276 !
rvÆ
[1] && !
øã
[1] &&

277 !
rvÆ
[2] && !
øã
[2] &&

278 !
rvÆ
[3] && !
øã
[3])

282 
	`Ârötf
(
Â
, "%-10s", 
	`π∆_πªÆm_n2a
(
ªÆm
, 
b1
, (b1)));

283 
i
 = 0; i < 4; i++)

284 
	`f‹m©_cou¡
(
Â
, 
rvÆ
[
i
]);

285 
	`Ârötf
(
Â
, "\n%-10s", "");

286 
i
 = 0; i < 4; i++)

287 
	`f‹m©_øã
(
Â
, 
øã
[
i
]);

288 
	`Ârötf
(
Â
, "\n");

290 
	}
}

293 
	gchûdªn
;

295 
	$sigchûd
(
signo
)

297 
	}
}

301 
	$upd©e_db
(
öãrvÆ
)

303 
i
;

304 
__u32
 *
ivÆ
;

305 
__u32
 
_ivÆ
[256*4];

307 
ivÆ
 = 
	`ªad_kîn_èbÀ
(
_ivÆ
);

309 
i
=0; i<256*4; i++) {

310 
ßm∂e
;

311 
__u32
 
ö¸
 = 
ivÆ
[
i
] - 
kîn_db
->ival[i];

313 i‡(
ivÆ
[
i
] =0 && 
ö¸
 == 0 &&

314 
kîn_db
->
vÆ
[
i
] =0 && kîn_db->
øã
[i] == 0)

317 
kîn_db
->
vÆ
[
i
] +
ö¸
;

318 
kîn_db
->
ivÆ
[
i
] = ival[i];

319 
ßm∂e
 = ()(
ö¸
*1000)/
öãrvÆ
;

320 i‡(
öãrvÆ
 >
sˇn_öãrvÆ
) {

321 
kîn_db
->
øã
[
i
] +
W
*(
ßm∂e
-kern_db->rate[i]);

322 } i‡(
öãrvÆ
 >= 1000) {

323 i‡(
öãrvÆ
 >
time_c⁄°™t
) {

324 
kîn_db
->
øã
[
i
] = 
ßm∂e
;

326 
w
 = 
W
*()
öãrvÆ
/
sˇn_öãrvÆ
;

327 
kîn_db
->
øã
[
i
] +
w
*(
ßm∂e
-kern_db->rate[i]);

331 
	}
}

333 
	$£nd_db
(
fd
)

335 
tŸ
 = 0;

337 
tŸ
 < (*
kîn_db
)) {

338 
n
 = 
	`wrôe
(
fd
, ((*)
kîn_db
Ë+ 
tŸ
, (*kern_db)-tot);

339 i‡(
n
 < 0) {

340 i‡(
î∫o
 =
EINTR
)

344 
tŸ
 +
n
;

346 
	}
}

350 
	#T_DIFF
(
a
,
b
Ë((◊).
tv_£c
-(b).tv_£c)*1000 + (◊).
tv_u£c
-(b).tv_u£c)/1000)

	)

353 
	$∑d_kîn_èbÀ
(
πac˘_d©a
 *
d©
, 
__u32
 *
ivÆ
)

355 
i
;

356 
	`mem£t
(
d©
->
øã
, 0, (dat->rate));

357 i‡(
d©
->
ivÆ
 != ival)

358 
	`mem˝y
(
d©
->
ivÆ
, ival, (dat->ival));

359 
i
=0; i<256*4; i++)

360 
d©
->
vÆ
[
i
] = 
ivÆ
[i];

361 
	}
}

363 
	$£rvî_lo›
(
fd
)

365 
timevÆ
 
¢≠time
 = { 0 };

366 
pﬁlfd
 
p
;

367 
p
.
fd
 = fd;

368 
p
.
evíts
 =Ö.
ªvíts
 = 
POLLIN
;

370 
	`•rötf
(
kîn_db
->
sig«tuª
,

372 (Ë
	`gëpid
(), ()
	`øndom
(),

373 
sˇn_öãrvÆ
/1000, 
time_c⁄°™t
/1000);

375 
	`∑d_kîn_èbÀ
(
kîn_db
, 
	`ªad_kîn_èbÀ
(kîn_db->
ivÆ
));

378 
°©us
;

379 
tdiff
;

380 
timevÆ
 
now
;

381 
	`gëtimeofday
(&
now
, 
NULL
);

382 
tdiff
 = 
	`T_DIFF
(
now
, 
¢≠time
);

383 i‡(
tdiff
 >
sˇn_öãrvÆ
) {

384 
	`upd©e_db
(
tdiff
);

385 
¢≠time
 = 
now
;

386 
tdiff
 = 0;

388 i‡(
	`pﬁl
(&
p
, 1, 
tdiff
 + 
sˇn_öãrvÆ
) > 0

389 && (
p
.
ªvíts
&
POLLIN
)) {

390 
˛¡
 = 
	`ac˚±
(
fd
, 
NULL
, NULL);

391 i‡(
˛¡
 >= 0) {

392 
pid_t
 
pid
;

393 i‡(
chûdªn
 >= 5) {

394 
	`˛o£
(
˛¡
);

395 } i‡((
pid
 = 
	`f‹k
()) != 0) {

396 i‡(
pid
>0)

397 
chûdªn
++;

398 
	`˛o£
(
˛¡
);

400 i‡(
tdiff
 > 0)

401 
	`upd©e_db
(
tdiff
);

402 
	`£nd_db
(
˛¡
);

403 
	`exô
(0);

407 
chûdªn
 && 
	`waôpid
(-1, &
°©us
, 
WNOHANG
) > 0)

408 
chûdªn
--;

410 
	}
}

412 
	$vîify_f‹gög
(
fd
)

414 
u¸ed
 
¸ed
;

415 
sockÀn_t
 
ﬁí
 = (
¸ed
);

417 i‡(
	`gësock›t
(
fd
, 
SOL_SOCKET
, 
SO_PEERCRED
, (*)&
¸ed
, &
ﬁí
) ||

418 
ﬁí
 < (
¸ed
))

420 i‡(
¸ed
.
uid
 =
	`gëuid
() || cred.uid == 0)

423 
	}
}

425 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

427 
	$ußge
()

429 
	`Ârötf
(
°dîr
,

432 
	`exô
(-1);

433 
	}
}

435 
	$maö
(
¨gc
, *
¨gv
[])

437 
hi°_«me
[128];

438 
sockaddr_un
 
sun
;

439 
ch
;

440 
fd
;

442 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "h?vVzrM:«sd:t:")Ë!
EOF
) {

443 
ch
) {

445 
dump_zîos
 = 1;

448 
ª£t_hi°‹y
 = 1;

451 
ign‹e_hi°‹y
 = 1;

454 
no_upd©e
 = 1;

457 
no_ouçut
 = 1;

460 
sˇn_öãrvÆ
 = 1000*
	`©oi
(
›èrg
);

463 i‡(
	`ssˇnf
(
›èrg
, "%d", &
time_c⁄°™t
) != 1 ||

464 
time_c⁄°™t
 <= 0) {

465 
	`Ârötf
(
°dîr
, "rtacct: invalidÅime constant divisor\n");

466 
	`exô
(-1);

471 
	`¥ötf
("πac˘ utûôy, i¥ouã2-ss%s\n", 
SNAPSHOT
);

472 
	`exô
(0);

477 
	`ssˇnf
(
›èrg
, "%lx", &
magic_numbî
);

482 
	`ußge
();

486 
¨gc
 -
›töd
;

487 
¨gv
 +
›töd
;

489 i‡(
¨gc
) {

490 
¨gc
 > 0) {

491 
__u32
 
ªÆm
;

492 i‡(
	`π∆_πªÆm_a2n
(&
ªÆm
, 
¨gv
[0])) {

493 
	`Ârötf
(
°dîr
, "W¨nög:Ñólm \"%s\" d€†nŸÉxi°.\n", 
¨gv
[0]);

494 
	`exô
(-1);

496 
rm≠
[
ªÆm
>>5] |= (1<<(realm&0x1f));

497 
¨gc
--; 
¨gv
++;

500 
	`mem£t
(
rm≠
, ~0, (rmap));

502 
dump_zîos
 = 0;

505 
sun
.
sun_Ámûy
 = 
AF_UNIX
;

506 
sun
.
sun_∑th
[0] = 0;

507 
	`•rötf
(
sun
.
sun_∑th
+1, "πac˘%d", 
	`gëuid
());

509 i‡(
sˇn_öãrvÆ
 > 0) {

510 i‡(
time_c⁄°™t
 == 0)

511 
time_c⁄°™t
 = 60;

512 
time_c⁄°™t
 *= 1000;

513 
W
 = 1 - 1/
	`exp
(
	`log
(10)*()
sˇn_öãrvÆ
/
time_c⁄°™t
);

514 i‡((
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) < 0) {

515 
	`≥º‹
("rtacct: socket");

516 
	`exô
(-1);

518 i‡(
	`böd
(
fd
, (
sockaddr
*)&
sun
, 2+1+
	`°æí
(sun.
sun_∑th
+1)) < 0) {

519 
	`≥º‹
("rtacct: bind");

520 
	`exô
(-1);

522 i‡(
	`li°í
(
fd
, 5) < 0) {

523 
	`≥º‹
("rtacct:Üisten");

524 
	`exô
(-1);

526 i‡(
	`d´m⁄
(0, 0)) {

527 
	`≥º‹
("rtacct: daemon");

528 
	`exô
(-1);

530 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

531 
	`sig«l
(
SIGCHLD
, 
sigchûd
);

532 
	`£rvî_lo›
(
fd
);

533 
	`exô
(0);

536 i‡(
	`gëív
("RTACCT_HISTORY"))

537 
	`¢¥ötf
(
hi°_«me
, (hi°_«me), "%s", 
	`gëív
("RTACCT_HISTORY"));

539 
	`•rötf
(
hi°_«me
, "/tmp/.πac˘.u%d", 
	`gëuid
());

541 i‡(
ª£t_hi°‹y
)

542 
	`u∆ök
(
hi°_«me
);

544 i‡(!
ign‹e_hi°‹y
 || !
no_upd©e
) {

545 
°©
 
°b
;

547 
fd
 = 
	`›í
(
hi°_«me
, 
O_RDWR
|
O_CREAT
|
O_NOFOLLOW
, 0600);

548 i‡(
fd
 < 0) {

549 
	`≥º‹
("rtacct: open history file");

550 
	`exô
(-1);

552 i‡(
	`Êock
(
fd
, 
LOCK_EX
)) {

553 
	`≥º‹
("rtacct: flock history file");

554 
	`exô
(-1);

556 i‡(
	`f°©
(
fd
, &
°b
) != 0) {

557 
	`≥º‹
("rtacct: fstat history file");

558 
	`exô
(-1);

560 i‡(
°b
.
°_∆ök
 !1 || stb.
°_uid
 !
	`gëuid
()) {

561 
	`Ârötf
(
°dîr
, "rtacct: something is so wrong with history file,Åhat IÖreferÇotÅoÖroceed.\n");

562 
	`exô
(-1);

564 i‡(
°b
.
°_size
 !(*
hi°_db
))

565 i‡(
	`wrôe
(
fd
, 
kîn_db
, (*
hi°_db
)) < 0) {

566 
	`≥º‹
("rtacct: write history file");

567 
	`exô
(-1);

570 
hi°_db
 = 
	`mm≠
(
NULL
, (*hist_db),

571 
PROT_READ
|
PROT_WRITE
,

572 
no_upd©e
 ? 
MAP_PRIVATE
 : 
MAP_SHARED
,

573 
fd
, 0);

575 i‡(()
hi°_db
 == ~0UL) {

576 
	`≥º‹
("mmap");

577 
	`exô
(-1);

580 i‡(!
ign‹e_hi°‹y
) {

581 
FILE
 *
tÂ
;

582 
u±ime
 = -1;

583 i‡((
tÂ
 = 
	`f›í
("/¥oc/u±ime", "r")Ë!
NULL
) {

584 i‡(
	`fsˇnf
(
tÂ
, "%ld", &
u±ime
) != 1)

585 
u±ime
 = -1;

586 
	`f˛o£
(
tÂ
);

589 i‡(
u±ime
 >0 && 
	`time
(
NULL
Ë>
°b
.
°_mtime
+uptime) {

590 
	`Ârötf
(
°dîr
, "rtacct: history iságed out,Ñesetting\n");

591 
	`mem£t
(
hi°_db
, 0, (*hist_db));

595 
	`˛o£
(
fd
);

598 i‡((
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) >= 0 &&

599 (
	`c⁄√˘
(
fd
, (
sockaddr
*)&
sun
, 2+1+
	`°æí
(sun.
sun_∑th
+1)) == 0

600 || (
	`°r˝y
(
sun
.
sun_∑th
+1, "rtacct0"),

601 
	`c⁄√˘
(
fd
, (
sockaddr
*)&
sun
, 2+1+
	`°æí
(sun.
sun_∑th
+1)) == 0))

602 && 
	`vîify_f‹gög
(
fd
) == 0) {

603 
	`ƒód
(
fd
, (*)
kîn_db
, (*kern_db));

604 i‡(
hi°_db
 && hi°_db->
sig«tuª
[0] &&

605 
	`°rcmp
(
kîn_db
->
sig«tuª
, 
hi°_db
->signature)) {

606 
	`Ârötf
(
°dîr
, "rtacct: history is stale, ignoring it.\n");

607 
hi°_db
 = 
NULL
;

609 
	`˛o£
(
fd
);

611 i‡(
fd
 >= 0)

612 
	`˛o£
(
fd
);

614 i‡(
hi°_db
 && hi°_db->
sig«tuª
[0] &&

615 
	`°rcmp
(
hi°_db
->
sig«tuª
, "kernel")) {

616 
	`Ârötf
(
°dîr
, "rtacct: history is stale, ignoring it.\n");

617 
hi°_db
 = 
NULL
;

620 
	`∑d_kîn_èbÀ
(
kîn_db
, 
	`ªad_kîn_èbÀ
(kîn_db->
ivÆ
));

621 
	`°r˝y
(
kîn_db
->
sig«tuª
, "kernel");

624 i‡(
ign‹e_hi°‹y
 || 
hi°_db
 =
NULL
)

625 
	`dump_abs_db
(
°dout
);

627 
	`dump_ö¸_db
(
°dout
);

629 
	`exô
(0);

630 
	}
}

	@misc/ss.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/io˘l.h
>

18 
	~<sys/sockë.h
>

19 
	~<sys/uio.h
>

20 
	~<√töë/ö.h
>

21 
	~<°rög.h
>

22 
	~<î∫o.h
>

23 
	~<√tdb.h
>

24 
	~<¨∑/öë.h
>

25 
	~<dúít.h
>

26 
	~<‚m©ch.h
>

27 
	~<gë›t.h
>

28 
	~<°dboﬁ.h
>

30 
	~"utûs.h
"

31 
	~"π_«mes.h
"

32 
	~"Œ_m≠.h
"

33 
	~"lib√éök.h
"

34 
	~"«me•a˚.h
"

35 
	~"SNAPSHOT.h
"

37 
	~<löux/t˝.h
>

38 
	~<löux/sock_düg.h
>

39 
	~<löux/öë_düg.h
>

40 
	~<löux/unix_düg.h
>

41 
	~<löux/√tdevi˚.h
>

42 
	~<löux/fûãr.h
>

43 
	~<löux/∑ckë_düg.h
>

44 
	~<löux/√éök_düg.h
>

46 
	#MAGIC_SEQ
 123456

	)

48 
	#DIAG_REQUEST
(
_ªq
, 
_r
) \

50 
∆msghdr
 
∆h
; \

51 
_r
; \

52 } 
_ªq
 = { \

53 .
∆h
 = { \

54 .
∆msg_ty≥
 = 
SOCK_DIAG_BY_FAMILY
, \

55 .
∆msg_Êags
 = 
NLM_F_ROOT
|
NLM_F_MATCH
|
NLM_F_REQUEST
,\

56 .
∆msg_£q
 = 
MAGIC_SEQ
, \

57 .
∆msg_Àn
 = (
_ªq
), \

59 }

	)

61 #i‡
HAVE_SELINUX


62 
	~<£löux/£löux.h
>

65 
	$is_£löux_íabÀd
()

68 
	}
}

70 
	$gëpidc⁄
(
pid_t
 
pid
, **
c⁄ãxt
)

72 *
c⁄ãxt
 = 
NULL
;

74 
	}
}

76 
	$gëfûec⁄
(*
∑th
, **
c⁄ãxt
)

78 *
c⁄ãxt
 = 
NULL
;

80 
	}
}

82 
	$£curôy_gë_öôül_c⁄ãxt
(*
«me
, **
c⁄ãxt
)

84 *
c⁄ãxt
 = 
NULL
;

86 
	}
}

89 
	gªsﬁve_ho°s
 = 0;

90 
	gªsﬁve_£rvi˚s
 = 1;

91 
	g¥e„ºed_Ámûy
 = 
AF_UNSPEC
;

92 
	gshow_›ti⁄s
 = 0;

93 
	gshow_dëaûs
 = 0;

94 
	gshow_u£rs
 = 0;

95 
	gshow_mem
 = 0;

96 
	gshow_t˝öfo
 = 0;

97 
	gshow_bpf
 = 0;

98 
	gshow_¥oc_˘x
 = 0;

99 
	gshow_sock_˘x
 = 0;

101 
	gu£r_ít_hash_buûd_öô
 = 0;

102 
	gfﬁlow_evíts
 = 0;

104 
	g√tid_width
;

105 
	g°©e_width
;

106 
	gaddΩ_width
;

107 
	gaddr_width
;

108 
	g£rv_width
;

109 
	gs¸ìn_width
;

111 c⁄° *
	gTCP_PROTO
 = "tcp";

112 c⁄° *
	gUDP_PROTO
 = "udp";

113 c⁄° *
	gRAW_PROTO
 = "raw";

114 c⁄° *
	gdg_¥Ÿo
 = 
NULL
;

118 
	mTCP_DB
,

119 
	mDCCP_DB
,

120 
	mUDP_DB
,

121 
	mRAW_DB
,

122 
	mUNIX_DG_DB
,

123 
	mUNIX_ST_DB
,

124 
	mUNIX_SQ_DB
,

125 
	mPACKET_DG_DB
,

126 
	mPACKET_R_DB
,

127 
	mNETLINK_DB
,

128 
	mMAX_DB


131 
	#PACKET_DBM
 ((1<<
PACKET_DG_DB
)|(1<<
PACKET_R_DB
))

	)

132 
	#UNIX_DBM
 ((1<<
UNIX_DG_DB
)|(1<<
UNIX_ST_DB
)|(1<<
UNIX_SQ_DB
))

	)

133 
	#ALL_DB
 ((1<<
MAX_DB
)-1)

	)

134 
	#INET_DBM
 ((1<<
TCP_DB
)|(1<<
UDP_DB
)|(1<<
DCCP_DB
)|(1<<
RAW_DB
))

	)

137 
	mSS_UNKNOWN
,

138 
	mSS_ESTABLISHED
,

139 
	mSS_SYN_SENT
,

140 
	mSS_SYN_RECV
,

141 
	mSS_FIN_WAIT1
,

142 
	mSS_FIN_WAIT2
,

143 
	mSS_TIME_WAIT
,

144 
	mSS_CLOSE
,

145 
	mSS_CLOSE_WAIT
,

146 
	mSS_LAST_ACK
,

147 
	mSS_LISTEN
,

148 
	mSS_CLOSING
,

149 
	mSS_MAX


152 
	#SS_ALL
 ((1 << 
SS_MAX
Ë- 1)

	)

153 
	#SS_CONN
 (
SS_ALL
 & ~((1<<
SS_LISTEN
)|(1<<
SS_CLOSE
)|(1<<
SS_TIME_WAIT
)|(1<<
SS_SYN_RECV
)))

	)

155 
	~"ssfûãr.h
"

157 
	sfûãr


159 
	mdbs
;

160 
	m°©es
;

161 
	mÁmûõs
;

162 
ssfûãr
 *
	mf
;

165 c⁄° 
fûãr
 
	gdeÁu…_dbs
[
MAX_DB
] = {

166 [
TCP_DB
] = {

167 .
°©es
 = 
SS_CONN
,

168 .
	gÁmûõs
 = (1 << 
AF_INET
Ë| (1 << 
AF_INET6
),

170 [
DCCP_DB
] = {

171 .
°©es
 = 
SS_CONN
,

172 .
	gÁmûõs
 = (1 << 
AF_INET
Ë| (1 << 
AF_INET6
),

174 [
UDP_DB
] = {

175 .
°©es
 = (1 << 
SS_ESTABLISHED
),

176 .
	gÁmûõs
 = (1 << 
AF_INET
Ë| (1 << 
AF_INET6
),

178 [
RAW_DB
] = {

179 .
°©es
 = (1 << 
SS_ESTABLISHED
),

180 .
	gÁmûõs
 = (1 << 
AF_INET
Ë| (1 << 
AF_INET6
),

182 [
UNIX_DG_DB
] = {

183 .
°©es
 = (1 << 
SS_CLOSE
),

184 .
	gÁmûõs
 = (1 << 
AF_UNIX
),

186 [
UNIX_ST_DB
] = {

187 .
°©es
 = 
SS_CONN
,

188 .
	gÁmûõs
 = (1 << 
AF_UNIX
),

190 [
UNIX_SQ_DB
] = {

191 .
°©es
 = 
SS_CONN
,

192 .
	gÁmûõs
 = (1 << 
AF_UNIX
),

194 [
PACKET_DG_DB
] = {

195 .
°©es
 = (1 << 
SS_CLOSE
),

196 .
	gÁmûõs
 = (1 << 
AF_PACKET
),

198 [
PACKET_R_DB
] = {

199 .
°©es
 = (1 << 
SS_CLOSE
),

200 .
	gÁmûõs
 = (1 << 
AF_PACKET
),

202 [
NETLINK_DB
] = {

203 .
°©es
 = (1 << 
SS_CLOSE
),

204 .
	gÁmûõs
 = (1 << 
AF_NETLINK
),

208 c⁄° 
fûãr
 
	gdeÁu…_afs
[
AF_MAX
] = {

209 [
AF_INET
] = {

210 .
dbs
 = 
INET_DBM
,

211 .
	g°©es
 = 
SS_CONN
,

213 [
AF_INET6
] = {

214 .
dbs
 = 
INET_DBM
,

215 .
	g°©es
 = 
SS_CONN
,

217 [
AF_UNIX
] = {

218 .
dbs
 = 
UNIX_DBM
,

219 .
	g°©es
 = 
SS_CONN
,

221 [
AF_PACKET
] = {

222 .
dbs
 = 
PACKET_DBM
,

223 .
	g°©es
 = (1 << 
SS_CLOSE
),

225 [
AF_NETLINK
] = {

226 .
dbs
 = (1 << 
NETLINK_DB
),

227 .
	g°©es
 = (1 << 
SS_CLOSE
),

231 
	gdo_deÁu…
 = 1;

232 
fûãr
 
	gcuºít_fûãr
;

234 
	$fûãr_db_£t
(
fûãr
 *
f
, 
db
)

236 
f
->
°©es
 |
deÁu…_dbs
[
db
].states;

237 
f
->
dbs
 |1 << 
db
;

238 
do_deÁu…
 = 0;

239 
	}
}

241 
	$fûãr_af_£t
(
fûãr
 *
f
, 
af
)

243 
f
->
°©es
 |
deÁu…_afs
[
af
].states;

244 
f
->
Ámûõs
 |1 << 
af
;

245 
do_deÁu…
 = 0;

246 
¥e„ºed_Ámûy
 = 
af
;

247 
	}
}

249 
	$fûãr_af_gë
(
fûãr
 *
f
, 
af
)

251  
f
->
Ámûõs
 & (1 << 
af
);

252 
	}
}

254 
	$fûãr_deÁu…_dbs
(
fûãr
 *
f
)

256 
	`fûãr_db_£t
(
f
, 
UDP_DB
);

257 
	`fûãr_db_£t
(
f
, 
DCCP_DB
);

258 
	`fûãr_db_£t
(
f
, 
TCP_DB
);

259 
	`fûãr_db_£t
(
f
, 
RAW_DB
);

260 
	`fûãr_db_£t
(
f
, 
UNIX_ST_DB
);

261 
	`fûãr_db_£t
(
f
, 
UNIX_DG_DB
);

262 
	`fûãr_db_£t
(
f
, 
UNIX_SQ_DB
);

263 
	`fûãr_db_£t
(
f
, 
PACKET_R_DB
);

264 
	`fûãr_db_£t
(
f
, 
PACKET_DG_DB
);

265 
	`fûãr_db_£t
(
f
, 
NETLINK_DB
);

266 
	}
}

268 
	$fûãr_°©es_£t
(
fûãr
 *
f
, 
°©es
)

270 i‡(
°©es
)

271 
f
->
°©es
 = (f->states | states) & states;

272 
	}
}

274 
	$fûãr_mîge_deÁu…s
(
fûãr
 *
f
)

276 
db
;

277 
af
;

279 
db
 = 0; db < 
MAX_DB
; db++) {

280 i‡(!(
f
->
dbs
 & (1 << 
db
)))

283 i‡(!(
deÁu…_dbs
[
db
].
Ámûõs
 & 
f
->families))

284 
f
->
Ámûõs
 |
deÁu…_dbs
[
db
].families;

286 
af
 = 0;á‡< 
AF_MAX
;áf++) {

287 i‡(!(
f
->
Ámûõs
 & (1 << 
af
)))

290 i‡(!(
deÁu…_afs
[
af
].
dbs
 & 
f
->dbs))

291 
f
->
dbs
 |
deÁu…_afs
[
af
].dbs;

293 
	}
}

295 
FILE
 *
	$gíîic_¥oc_›í
(c⁄° *
ív
, c⁄° *
«me
)

297 c⁄° *
p
 = 
	`gëív
(
ív
);

298 
°‹e
[128];

300 i‡(!
p
) {

301 
p
 = 
	`gëív
("PROC_ROOT") ? : "/proc";

302 
	`¢¥ötf
(
°‹e
, (°‹e)-1, "%s/%s", 
p
, 
«me
);

303 
p
 = 
°‹e
;

306  
	`f›í
(
p
, "r");

307 
	}
}

309 
FILE
 *
	$√t_t˝_›í
()

311  
	`gíîic_¥oc_›í
("PROC_NET_TCP", "net/tcp");

312 
	}
}

314 
FILE
 *
	$√t_t˝6_›í
()

316  
	`gíîic_¥oc_›í
("PROC_NET_TCP6", "net/tcp6");

317 
	}
}

319 
FILE
 *
	$√t_udp_›í
()

321  
	`gíîic_¥oc_›í
("PROC_NET_UDP", "net/udp");

322 
	}
}

324 
FILE
 *
	$√t_udp6_›í
()

326  
	`gíîic_¥oc_›í
("PROC_NET_UDP6", "net/udp6");

327 
	}
}

329 
FILE
 *
	$√t_øw_›í
()

331  
	`gíîic_¥oc_›í
("PROC_NET_RAW", "net/raw");

332 
	}
}

334 
FILE
 *
	$√t_øw6_›í
()

336  
	`gíîic_¥oc_›í
("PROC_NET_RAW6", "net/raw6");

337 
	}
}

339 
FILE
 *
	$√t_unix_›í
()

341  
	`gíîic_¥oc_›í
("PROC_NET_UNIX", "net/unix");

342 
	}
}

344 
FILE
 *
	$√t_∑ckë_›í
()

346  
	`gíîic_¥oc_›í
("PROC_NET_PACKET", "net/packet");

347 
	}
}

349 
FILE
 *
	$√t_√éök_›í
()

351  
	`gíîic_¥oc_›í
("PROC_NET_NETLINK", "net/netlink");

352 
	}
}

354 
FILE
 *
	$¶aböfo_›í
()

356  
	`gíîic_¥oc_›í
("PROC_SLABINFO", "slabinfo");

357 
	}
}

359 
FILE
 *
	$√t_sock°©_›í
()

361  
	`gíîic_¥oc_›í
("PROC_NET_SOCKSTAT", "net/sockstat");

362 
	}
}

364 
FILE
 *
	$√t_sock°©6_›í
()

366  
	`gíîic_¥oc_›í
("PROC_NET_SOCKSTAT6", "net/sockstat6");

367 
	}
}

369 
FILE
 *
	$√t_¢mp_›í
()

371  
	`gíîic_¥oc_›í
("PROC_NET_SNMP", "net/snmp");

372 
	}
}

374 
FILE
 *
	$ïhemîÆ_p‹ts_›í
()

376  
	`gíîic_¥oc_›í
("PROC_IP_LOCAL_PORT_RANGE", "sys/net/ipv4/ip_local_port_range");

377 
	}
}

379 
	su£r_ít
 {

380 
u£r_ít
 *
	m√xt
;

381 
	möo
;

382 
	mpid
;

383 
	mfd
;

384 *
	m¥o˚ss
;

385 *
	m¥o˚ss_˘x
;

386 *
	msockë_˘x
;

389 
	#USER_ENT_HASH_SIZE
 256

	)

390 
u£r_ít
 *
	gu£r_ít_hash
[
USER_ENT_HASH_SIZE
];

392 
	$u£r_ít_hash‚
(
öo
)

394 
vÆ
 = (
öo
 >> 24) ^ (ino >> 16) ^ (ino >> 8) ^ ino;

396  
vÆ
 & (
USER_ENT_HASH_SIZE
 - 1);

397 
	}
}

399 
	$u£r_ít_add
(
öo
, *
¥o˚ss
,

400 
pid
, 
fd
,

401 *
¥oc_˘x
,

402 *
sock_˘x
)

404 
u£r_ít
 *
p
, **
µ
;

406 
p
 = 
	`mÆloc
((
u£r_ít
));

407 i‡(!
p
) {

408 
	`Ârötf
(
°dîr
, "ss: failedÅo malloc buffer\n");

409 
	`ab‹t
();

411 
p
->
√xt
 = 
NULL
;

412 
p
->
öo
 = ino;

413 
p
->
pid
 =Öid;

414 
p
->
fd
 = fd;

415 
p
->
¥o˚ss
 = 
	`°rdup
(process);

416 
p
->
¥o˚ss_˘x
 = 
	`°rdup
(
¥oc_˘x
);

417 
p
->
sockë_˘x
 = 
	`°rdup
(
sock_˘x
);

419 
µ
 = &
u£r_ít_hash
[
	`u£r_ít_hash‚
(
öo
)];

420 
p
->
√xt
 = *
µ
;

421 *
µ
 = 
p
;

422 
	}
}

424 
	$u£r_ít_de°roy
()

426 
u£r_ít
 *
p
, *
p_√xt
;

427 
˙t
 = 0;

429 
˙t
 !
USER_ENT_HASH_SIZE
) {

430 
p
 = 
u£r_ít_hash
[
˙t
];

431 
p
) {

432 
	`‰ì
(
p
->
¥o˚ss
);

433 
	`‰ì
(
p
->
¥o˚ss_˘x
);

434 
	`‰ì
(
p
->
sockë_˘x
);

435 
p_√xt
 = 
p
->
√xt
;

436 
	`‰ì
(
p
);

437 
p
 = 
p_√xt
;

439 
˙t
++;

441 
	}
}

443 
	$u£r_ít_hash_buûd
()

445 c⁄° *
roŸ
 = 
	`gëív
("PROC_ROOT") ? : "/proc/";

446 
dúít
 *
d
;

447 
«me
[1024];

448 
«meoff
;

449 
DIR
 *
dú
;

450 *
pid_c⁄ãxt
;

451 *
sock_c⁄ãxt
;

452 c⁄° *
no_˘x
 = "unavailable";

455 i‡(
u£r_ít_hash_buûd_öô
 != 0)

458 
u£r_ít_hash_buûd_öô
 = 1;

460 
	`°∫˝y
(
«me
, 
roŸ
, (name)-1);

461 
«me
[(name)-1] = 0;

463 i‡(
	`°æí
(
«me
) == 0 ||Çame[strlen(name)-1] != '/')

464 
	`°rˇt
(
«me
, "/");

466 
«meoff
 = 
	`°æí
(
«me
);

468 
dú
 = 
	`›ídú
(
«me
);

469 i‡(!
dú
)

472 (
d
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

473 
dúít
 *
d1
;

474 
¥o˚ss
[16];

475 *
p
;

476 
pid
, 
pos
;

477 
DIR
 *
dú1
;

478 
¸≠
;

480 i‡(
	`ssˇnf
(
d
->
d_«me
, "%d%c", &
pid
, &
¸≠
) != 1)

483 i‡(
	`gëpidc⁄
(
pid
, &
pid_c⁄ãxt
) != 0)

484 
pid_c⁄ãxt
 = 
	`°rdup
(
no_˘x
);

486 
	`¢¥ötf
(
«me
 + 
«meoff
, “ameË-Çameoff, "%d/fd/", 
pid
);

487 
pos
 = 
	`°æí
(
«me
);

488 i‡((
dú1
 = 
	`›ídú
(
«me
)Ë=
NULL
) {

489 
	`‰ì
(
pid_c⁄ãxt
);

493 
¥o˚ss
[0] = '\0';

494 
p
 = 
¥o˚ss
;

496 (
d1
 = 
	`ªaddú
(
dú1
)Ë!
NULL
) {

497 c⁄° *
∑âîn
 = "socket:[";

498 
öo
;

499 
 k
[64];

500 
fd
;

501 
ssize_t
 
lök_Àn
;

502 
tmp
[1024];

504 i‡(
	`ssˇnf
(
d1
->
d_«me
, "%d%c", &
fd
, &
¸≠
) != 1)

507 
	`¢¥ötf
(
«me
+
pos
, “ameË-Öos, "%d", 
fd
);

509 
lök_Àn
 = 
	`ªadlök
(
«me
, 
 k
, (lnk)-1);

510 i‡(
lök_Àn
 == -1)

512 
 k
[
lök_Àn
] = '\0';

514 i‡(
	`°∫cmp
(
 k
, 
∑âîn
, 
	`°æí
(pattern)))

517 
	`ssˇnf
(
 k
, "sockë:[%u]", &
öo
);

519 
	`¢¥ötf
(
tmp
, (tmp), "%s/%d/fd/%s",

520 
roŸ
, 
pid
, 
d1
->
d_«me
);

522 i‡(
	`gëfûec⁄
(
tmp
, &
sock_c⁄ãxt
) <= 0)

523 
sock_c⁄ãxt
 = 
	`°rdup
(
no_˘x
);

525 i‡(*
p
 == '\0') {

526 
FILE
 *
Â
;

528 
	`¢¥ötf
(
tmp
, (tmp), "%s/%d/stat",

529 
roŸ
, 
pid
);

530 i‡((
Â
 = 
	`f›í
(
tmp
, "r")Ë!
NULL
) {

531 
	`fsˇnf
(
Â
, "%*d (%[^)])", 
p
);

532 
	`f˛o£
(
Â
);

535 
	`u£r_ít_add
(
öo
, 
p
, 
pid
, 
fd
,

536 
pid_c⁄ãxt
, 
sock_c⁄ãxt
);

537 
	`‰ì
(
sock_c⁄ãxt
);

539 
	`‰ì
(
pid_c⁄ãxt
);

540 
	`˛o£dú
(
dú1
);

542 
	`˛o£dú
(
dú
);

543 
	}
}

545 
	eíåy_ty≥s
 {

546 
	mUSERS
,

547 
	mPROC_CTX
,

548 
	mPROC_SOCK_CTX


551 
	#ENTRY_BUF_SIZE
 512

	)

552 
	$föd_íåy
(
öo
, **
buf
, 
ty≥
)

554 
u£r_ít
 *
p
;

555 
˙t
 = 0;

556 *
±r
;

557 *
√w_buf
;

558 
Àn
, 
√w_buf_Àn
;

559 
buf_u£d
 = 0;

560 
buf_Àn
 = 0;

562 i‡(!
öo
)

565 
p
 = 
u£r_ít_hash
[
	`u£r_ít_hash‚
(
öo
)];

566 
±r
 = *
buf
 = 
NULL
;

567 
p
) {

568 i‡(
p
->
öo
 != ino)

569 
√xt
;

572 
±r
 = *
buf
 + 
buf_u£d
;

573 
ty≥
) {

574 
USERS
:

575 
Àn
 = 
	`¢¥ötf
(
±r
, 
buf_Àn
 - 
buf_u£d
,

577 
p
->
¥o˚ss
,Ö->
pid
,Ö->
fd
);

579 
PROC_CTX
:

580 
Àn
 = 
	`¢¥ötf
(
±r
, 
buf_Àn
 - 
buf_u£d
,

582 
p
->
¥o˚ss
,Ö->
pid
,

583 
p
->
¥o˚ss_˘x
,Ö->
fd
);

585 
PROC_SOCK_CTX
:

586 
Àn
 = 
	`¢¥ötf
(
±r
, 
buf_Àn
 - 
buf_u£d
,

588 
p
->
¥o˚ss
,Ö->
pid
,

589 
p
->
¥o˚ss_˘x
,Ö->
fd
,

590 
p
->
sockë_˘x
);

593 
	`Ârötf
(
°dîr
, "ss: invÆidÅy≥: %d\n", 
ty≥
);

594 
	`ab‹t
();

597 i‡(
Àn
 < 0 ||Üí >
buf_Àn
 - 
buf_u£d
) {

598 
√w_buf_Àn
 = 
buf_Àn
 + 
ENTRY_BUF_SIZE
;

599 
√w_buf
 = 
	`ªÆloc
(*
buf
, 
√w_buf_Àn
);

600 i‡(!
√w_buf
) {

601 
	`Ârötf
(
°dîr
, "ss: failedÅo malloc buffer\n");

602 
	`ab‹t
();

604 *
buf
 = 
√w_buf
;

605 
buf_Àn
 = 
√w_buf_Àn
;

608 
buf_u£d
 +
Àn
;

612 
˙t
++;

613 
√xt
:

614 
p
 =Ö->
√xt
;

616 i‡(
buf_u£d
) {

617 
±r
 = *
buf
 + 
buf_u£d
;

618 
±r
[-1] = '\0';

620  
˙t
;

621 
	}
}

625 
	s¶ab°©


627 
	msocks
;

628 
	mt˝_p‹ts
;

629 
	mt˝_tws
;

630 
	mt˝_syns
;

631 
	mskbs
;

634 
¶ab°©
 
	g¶ab°©
;

636 c⁄° *
	g¶ab°©_ids
[] =

645 
	$gë_¶ab°©
(
¶ab°©
 *
s
)

647 
buf
[256];

648 
FILE
 *
Â
;

649 
˙t
;

650 
¶ab°©_vÆid
;

652 i‡(
¶ab°©_vÆid
)

655 
	`mem£t
(
s
, 0, (*s));

657 
Â
 = 
	`¶aböfo_›í
();

658 i‡(!
Â
)

661 
˙t
 = (*
s
)/();

663 
	`fgës
(
buf
, (buf), 
Â
);

664 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

665 
i
;

666 
i
=0; i<(
¶ab°©_ids
)/(slabstat_ids[0]); i++) {

667 i‡(
	`memcmp
(
buf
, 
¶ab°©_ids
[
i
], 
	`°æí
(slabstat_ids[i])) == 0) {

668 
	`ssˇnf
(
buf
, "%*s%d", ((*)
s
Ë+ 
i
);

669 
˙t
--;

673 i‡(
˙t
 <= 0)

677 
¶ab°©_vÆid
 = 1;

679 
	`f˛o£
(
Â
);

681 
	}
}

683 
	$cookõ_sk_gë
(c⁄° 
uöt32_t
 *
cookõ
)

685  ((()
cookõ
[1] << 31) << 1) | cookie[0];

686 
	}
}

688 c⁄° *
	gs°©e_«me
[] = {

690 [
SS_ESTABLISHED
] = "ESTAB",

691 [
SS_SYN_SENT
] = "SYN-SENT",

692 [
SS_SYN_RECV
] = "SYN-RECV",

693 [
SS_FIN_WAIT1
] = "FIN-WAIT-1",

694 [
SS_FIN_WAIT2
] = "FIN-WAIT-2",

695 [
SS_TIME_WAIT
] = "TIME-WAIT",

696 [
SS_CLOSE
] = "UNCONN",

697 [
SS_CLOSE_WAIT
] = "CLOSE-WAIT",

698 [
SS_LAST_ACK
] = "LAST-ACK",

699 [
SS_LISTEN
] = "LISTEN",

700 [
SS_CLOSING
] = "CLOSING",

703 c⁄° *
	gs°©e_«mñ
[] = {

705 [
SS_ESTABLISHED
] = "established",

706 [
SS_SYN_SENT
] = "syn-sent",

707 [
SS_SYN_RECV
] = "syn-recv",

708 [
SS_FIN_WAIT1
] = "fin-wait-1",

709 [
SS_FIN_WAIT2
] = "fin-wait-2",

710 [
SS_TIME_WAIT
] = "time-wait",

711 [
SS_CLOSE
] = "unconnected",

712 [
SS_CLOSE_WAIT
] = "close-wait",

713 [
SS_LAST_ACK
] = "last-ack",

714 [
SS_LISTEN
] = "listening",

715 [
SS_CLOSING
] = "closing",

718 
	ssock°©


720 
sock°©
 *
	m√xt
;

721 
	mty≥
;

722 
uöt16_t
 
	m¥Ÿ
;

723 
öë_¥efix
 
	mloˇl
;

724 
öë_¥efix
 
	mªmŸe
;

725 
	mÕ‹t
;

726 
	mΩ‹t
;

727 
	m°©e
;

728 
	mrq
, 
	mwq
;

729 
	möo
;

730 
	muid
;

731 
	mªf˙t
;

732 
	miÁ˚
;

733 
	msk
;

734 *
	m«me
;

735 *
	m≥î_«me
;

738 
	sd˘˝°©


740 
	m˚_°©e
;

741 
	mÆpha
;

742 
	mab_e˙
;

743 
	mab_tŸ
;

744 
boﬁ
 
	míabÀd
;

747 
	st˝°©


749 
sock°©
 
	mss
;

750 
	mtimî
;

751 
	mtimeout
;

752 
	m¥obes
;

753 
	mc⁄g_Æg
[16];

754 
	mπo
, 
	m©o
, 
	mπt
, 
	mπtv¨
;

755 
	mqack
, 
	mcwnd
, 
	ms°hªsh
, 
	mbackoff
;

756 
	m£nd_bps
;

757 
	m¢d_wsˇÀ
;

758 
	mrcv_wsˇÀ
;

759 
	mmss
;

760 
	mœ°¢d
;

761 
	mœ°rcv
;

762 
	mœ°ack
;

763 
	m∑cög_øã
;

764 
	m∑cög_øã_max
;

765 
	mbyãs_acked
;

766 
	mbyãs_ª˚ived
;

767 
	m£gs_out
;

768 
	m£gs_ö
;

769 
	mu«cked
;

770 
	mªå™s
;

771 
	mªå™s_tŸÆ
;

772 
	mlo°
;

773 
	mßcked
;

774 
	mÁckës
;

775 
	mª‹dîög
;

776 
	mrcv_πt
;

777 
	mrcv_•a˚
;

778 
boﬁ
 
	mhas_ts_›t
;

779 
boﬁ
 
	mhas_ßck_›t
;

780 
boﬁ
 
	mhas_e˙_›t
;

781 
boﬁ
 
	mhas_e˙£í_›t
;

782 
boﬁ
 
	mhas_Á°›í_›t
;

783 
boﬁ
 
	mhas_wsˇÀ_›t
;

784 
d˘˝°©
 *
	md˘˝
;

787 
	$sock_°©e_¥öt
(
sock°©
 *
s
, c⁄° *
sock_«me
)

789 i‡(
√tid_width
)

790 
	`¥ötf
("%-*†", 
√tid_width
, 
sock_«me
);

791 i‡(
°©e_width
)

792 
	`¥ötf
("%-*†", 
°©e_width
, 
s°©e_«me
[
s
->
°©e
]);

794 
	`¥ötf
("%-6d %-6d ", 
s
->
rq
, s->
wq
);

795 
	}
}

797 
	$sock_dëaûs_¥öt
(
sock°©
 *
s
)

799 i‡(
s
->
uid
)

800 
	`¥ötf
(" uid:%u", 
s
->
uid
);

802 
	`¥ötf
(" ino:%u", 
s
->
öo
);

803 
	`¥ötf
(" sk:%Œx", 
s
->
sk
);

804 
	}
}

806 
	$sock_addr_¥öt_width
(
addr_Àn
, c⁄° *
addr
, *
dñim
,

807 
p‹t_Àn
, c⁄° *
p‹t
, c⁄° *
i‚ame
)

809 i‡(
i‚ame
) {

810 
	`¥ötf
("%*s%%%s%s%-*†", 
addr_Àn
, 
addr
, 
i‚ame
, 
dñim
,

811 
p‹t_Àn
, 
p‹t
);

814 
	`¥ötf
("%*s%s%-*†", 
addr_Àn
, 
addr
, 
dñim
, 
p‹t_Àn
, 
p‹t
);

816 
	}
}

818 
	$sock_addr_¥öt
(c⁄° *
addr
, *
dñim
, c⁄° *
p‹t
,

819 c⁄° *
i‚ame
)

821 
	`sock_addr_¥öt_width
(
addr_width
, 
addr
, 
dñim
, 
£rv_width
, 
p‹t
, 
i‚ame
);

822 
	}
}

824 c⁄° *
	gtmr_«me
[] = {

833 c⁄° *
	$¥öt_ms_timî
(
timeout
)

835 
buf
[64];

836 
£cs
, 
m£cs
, 
möuãs
;

837 i‡(
timeout
 < 0)

838 
timeout
 = 0;

839 
£cs
 = 
timeout
/1000;

840 
möuãs
 = 
£cs
/60;

841 
£cs
 = secs%60;

842 
m£cs
 = 
timeout
%1000;

843 
buf
[0] = 0;

844 i‡(
möuãs
) {

845 
m£cs
 = 0;

846 
	`¢¥ötf
(
buf
, (buf)-16, "%dmö", 
möuãs
);

847 i‡(
möuãs
 > 9)

848 
£cs
 = 0;

850 i‡(
£cs
) {

851 i‡(
£cs
 > 9)

852 
m£cs
 = 0;

853 
	`•rötf
(
buf
+
	`°æí
(buf), "%d%s", 
£cs
, 
m£cs
 ? "." : "sec");

855 i‡(
m£cs
)

856 
	`•rötf
(
buf
+
	`°æí
(buf), "%03dms", 
m£cs
);

857  
buf
;

858 
	}
}

860 
	ssˇche
 {

861 
sˇche
 *
	m√xt
;

862 
	mp‹t
;

863 *
	m«me
;

864 c⁄° *
	m¥Ÿo
;

867 
sˇche
 *
	gæi°
;

869 
	$öô_£rvi˚_ªsﬁvî
()

871 
buf
[128];

872 
FILE
 *
Â
 = 
	`p›í
("/usr/sbin/rpcinfo -p 2>/dev/null", "r");

873 i‡(
Â
) {

874 
	`fgës
(
buf
, (buf), 
Â
);

875 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

876 
¥ogn
, 
p‹t
;

877 
¥Ÿo
[128], 
¥og
[128];

878 i‡(
	`ssˇnf
(
buf
, "%u %*d %†%u %s", &
¥ogn
, 
¥Ÿo
,

879 &
p‹t
, 
¥og
+4) == 4) {

880 
sˇche
 *
c
 = 
	`mÆloc
((*c));

881 i‡(
c
) {

882 
c
->
p‹t
 =Öort;

883 
	`mem˝y
(
¥og
, "rpc.", 4);

884 
c
->
«me
 = 
	`°rdup
(
¥og
);

885 i‡(
	`°rcmp
(
¥Ÿo
, 
TCP_PROTO
) == 0)

886 
c
->
¥Ÿo
 = 
TCP_PROTO
;

887 i‡(
	`°rcmp
(
¥Ÿo
, 
UDP_PROTO
) == 0)

888 
c
->
¥Ÿo
 = 
UDP_PROTO
;

890 
c
->
¥Ÿo
 = 
NULL
;

891 
c
->
√xt
 = 
æi°
;

892 
æi°
 = 
c
;

896 
	`p˛o£
(
Â
);

898 
	}
}

900 
	gù_loˇl_p‹t_mö
, 
	gù_loˇl_p‹t_max
;

908 
	$is_ïhemîÆ
(
p‹t
)

910 i‡(!
ù_loˇl_p‹t_mö
) {

911 
FILE
 *
f
 = 
	`ïhemîÆ_p‹ts_›í
();

912 i‡(
f
) {

913 
	`fsˇnf
(
f
, "%d %d",

914 &
ù_loˇl_p‹t_mö
, &
ù_loˇl_p‹t_max
);

915 
	`f˛o£
(
f
);

917 
ù_loˇl_p‹t_mö
 = 1024;

918 
ù_loˇl_p‹t_max
 = 4999;

922  (
p‹t
 >
ù_loˇl_p‹t_mö
 &&Ö‹t<
ù_loˇl_p‹t_max
);

923 
	}
}

926 c⁄° *
	$__ªsﬁve_£rvi˚
(
p‹t
)

928 
sˇche
 *
c
;

930 
c
 = 
æi°
; c; c = c->
√xt
) {

931 i‡(
c
->
p‹t
 =p‹à&& c->
¥Ÿo
 =
dg_¥Ÿo
)

932  
c
->
«me
;

935 i‡(!
	`is_ïhemîÆ
(
p‹t
)) {

936 
nŸfú°
;

937 
£rvít
 *
£
;

938 i‡(!
nŸfú°
) {

939 
	`£t£rvít
(1);

940 
nŸfú°
 = 1;

942 
£
 = 
	`gë£rvbyp‹t
(
	`ht⁄s
(
p‹t
), 
dg_¥Ÿo
);

943 i‡(
£
)

944  
£
->
s_«me
;

947  
NULL
;

948 
	}
}

950 
	#SCACHE_BUCKETS
 1024

	)

951 
sˇche
 *
	gˇche_hèb
[
SCACHE_BUCKETS
];

953 c⁄° *
	$ªsﬁve_£rvi˚
(
p‹t
)

955 
buf
[128];

956 
sˇche
 *
c
;

957 c⁄° *
ªs
;

958 
hash
;

960 i‡(
p‹t
 == 0) {

961 
buf
[0] = '*';

962 
buf
[1] = 0;

963  
buf
;

966 i‡(!
ªsﬁve_£rvi˚s
)

967 
do_numîic
;

969 i‡(
dg_¥Ÿo
 =
RAW_PROTO
)

970  
	`öë_¥Ÿo_n2a
(
p‹t
, 
buf
, (buf));

973 
hash
 = (
p‹t
^((()
dg_¥Ÿo
)>>2)Ë% 
SCACHE_BUCKETS
;

975 
c
 = 
ˇche_hèb
[
hash
]; c; c = c->
√xt
) {

976 i‡(
c
->
p‹t
 =p‹à&& c->
¥Ÿo
 =
dg_¥Ÿo
)

977 
do_ˇche
;

980 
c
 = 
	`mÆloc
((*c));

981 i‡(!
c
)

982 
do_numîic
;

983 
ªs
 = 
	`__ªsﬁve_£rvi˚
(
p‹t
);

984 
c
->
p‹t
 =Öort;

985 
c
->
«me
 = 
ªs
 ? 
	`°rdup
‘esË: 
NULL
;

986 
c
->
¥Ÿo
 = 
dg_¥Ÿo
;

987 
c
->
√xt
 = 
ˇche_hèb
[
hash
];

988 
ˇche_hèb
[
hash
] = 
c
;

990 
do_ˇche
:

991 i‡(
c
->
«me
)

992  
c
->
«me
;

994 
do_numîic
:

995 
	`•rötf
(
buf
, "%u", 
p‹t
);

996  
buf
;

997 
	}
}

999 
	$öë_addr_¥öt
(c⁄° 
öë_¥efix
 *
a
, 
p‹t
, 
ifödex
)

1001 
buf
[1024];

1002 c⁄° *
≠
 = 
buf
;

1003 
e°_Àn
 = 
addr_width
;

1004 c⁄° *
i‚ame
 = 
NULL
;

1006 i‡(
a
->
Ámûy
 =
AF_INET
) {

1007 i‡(
a
->
d©a
[0] == 0) {

1008 
buf
[0] = '*';

1009 
buf
[1] = 0;

1011 
≠
 = 
	`f‹m©_ho°
(
AF_INET
, 4, 
a
->
d©a
, 
buf
, (buf));

1014 
≠
 = 
	`f‹m©_ho°
(
a
->
Ámûy
, 16,á->
d©a
, 
buf
, (buf));

1015 
e°_Àn
 = 
	`°æí
(
≠
);

1016 i‡(
e°_Àn
 <
addr_width
)

1017 
e°_Àn
 = 
addr_width
;

1019 
e°_Àn
 = 
addr_width
 + ((est_len-addr_width+3)/4)*4;

1022 i‡(
ifödex
) {

1023 
i‚ame
 = 
	`Œ_ödex_to_«me
(
ifödex
);

1024 
e°_Àn
 -
	`°æí
(
i‚ame
) + 1;

1025 i‡(
e°_Àn
 < 0)

1026 
e°_Àn
 = 0;

1029 
	`sock_addr_¥öt_width
(
e°_Àn
, 
≠
, ":", 
£rv_width
, 
	`ªsﬁve_£rvi˚
(
p‹t
),

1030 
i‚ame
);

1031 
	}
}

1033 
	sØfûãr


1035 
öë_¥efix
 
	maddr
;

1036 
	mp‹t
;

1037 
Øfûãr
 *
	m√xt
;

1040 
	$öë2_addr_m©ch
(c⁄° 
öë_¥efix
 *
a
, c⁄° i√t_¥efix *
p
,

1041 
∂í
)

1043 i‡(!
	`öë_addr_m©ch
(
a
, 
p
, 
∂í
))

1049 i‡(
p
->
Ámûy
 =
AF_INET
 && 
a
->Ámûy =
AF_INET6
) {

1050 i‡(
a
->
d©a
[0] == 0 &&á->data[1] == 0 &&

1051 
a
->
d©a
[2] =
	`ht⁄l
(0xffff)) {

1052 
öë_¥efix
 
tmp
 = *
a
;

1053 
tmp
.
d©a
[0] = 
a
->data[3];

1054  
	`öë_addr_m©ch
(&
tmp
, 
p
, 
∂í
);

1058 
	}
}

1060 
	$unix_m©ch
(c⁄° 
öë_¥efix
 *
a
, c⁄° i√t_¥efix *
p
)

1062 *
addr
, *
∑âîn
;

1063 
	`mem˝y
(&
addr
, 
a
->
d©a
, (addr));

1064 
	`mem˝y
(&
∑âîn
, 
p
->
d©a
, (pattern));

1065 i‡(
∑âîn
 =
NULL
)

1067 i‡(
addr
 =
NULL
)

1068 
addr
 = "";

1069  !
	`‚m©ch
(
∑âîn
, 
addr
, 0);

1070 
	}
}

1072 
	$run_ssfûãr
(
ssfûãr
 *
f
, 
sock°©
 *
s
)

1074 
f
->
ty≥
) {

1075 
SSF_S_AUTO
:

1077 
low
, 
high
=65535;

1079 i‡(
s
->
loˇl
.
Ámûy
 =
AF_UNIX
) {

1080 *
p
;

1081 
	`mem˝y
(&
p
, 
s
->
loˇl
.
d©a
, (p));

1082  
p
 =
NULL
 || (p[0] ='@' && 
	`°æí
(p) == 6 &&

1083 
	`°r•n
(
p
+1, "0123456789abcdef") == 5);

1085 i‡(
s
->
loˇl
.
Ámûy
 =
AF_PACKET
)

1086  
s
->
Õ‹t
 =0 && s->
loˇl
.
d©a
[0] == 0;

1087 i‡(
s
->
loˇl
.
Ámûy
 =
AF_NETLINK
)

1088  
s
->
Õ‹t
 < 0;

1090 i‡(!
low
) {

1091 
FILE
 *
Â
 = 
	`ïhemîÆ_p‹ts_›í
();

1092 i‡(
Â
) {

1093 
	`fsˇnf
(
Â
, "%d%d", &
low
, &
high
);

1094 
	`f˛o£
(
Â
);

1097  
s
->
Õ‹t
 >
low
 && s->Õ‹à<
high
;

1099 
SSF_DCOND
:

1101 
Øfûãr
 *
a
 = (*)
f
->
¥ed
;

1102 i‡(
a
->
addr
.
Ámûy
 =
AF_UNIX
)

1103  
	`unix_m©ch
(&
s
->
ªmŸe
, &
a
->
addr
);

1104 i‡(
a
->
p‹t
 !-1 &&á->p‹à!
s
->
Ω‹t
)

1106 i‡(
a
->
addr
.
bôÀn
) {

1108 i‡(!
	`öë2_addr_m©ch
(&
s
->
ªmŸe
, &
a
->
addr
,á->addr.
bôÀn
))

1110 } (
a
 =á->
√xt
Ë!
NULL
);

1115 
SSF_SCOND
:

1117 
Øfûãr
 *
a
 = (*)
f
->
¥ed
;

1118 i‡(
a
->
addr
.
Ámûy
 =
AF_UNIX
)

1119  
	`unix_m©ch
(&
s
->
loˇl
, &
a
->
addr
);

1120 i‡(
a
->
p‹t
 !-1 &&á->p‹à!
s
->
Õ‹t
)

1122 i‡(
a
->
addr
.
bôÀn
) {

1124 i‡(!
	`öë2_addr_m©ch
(&
s
->
loˇl
, &
a
->
addr
,á->addr.
bôÀn
))

1126 } (
a
 =á->
√xt
Ë!
NULL
);

1131 
SSF_D_GE
:

1133 
Øfûãr
 *
a
 = (*)
f
->
¥ed
;

1134  
s
->
Ω‹t
 >
a
->
p‹t
;

1136 
SSF_D_LE
:

1138 
Øfûãr
 *
a
 = (*)
f
->
¥ed
;

1139  
s
->
Ω‹t
 <
a
->
p‹t
;

1141 
SSF_S_GE
:

1143 
Øfûãr
 *
a
 = (*)
f
->
¥ed
;

1144  
s
->
Õ‹t
 >
a
->
p‹t
;

1146 
SSF_S_LE
:

1148 
Øfûãr
 *
a
 = (*)
f
->
¥ed
;

1149  
s
->
Õ‹t
 <
a
->
p‹t
;

1153 
SSF_AND
:

1154  
	`run_ssfûãr
(
f
->
¥ed
, 
s
Ë&&Ñun_ssfûãr(f->
po°
, s);

1155 
SSF_OR
:

1156  
	`run_ssfûãr
(
f
->
¥ed
, 
s
Ë||Ñun_ssfûãr(f->
po°
, s);

1157 
SSF_NOT
:

1158  !
	`run_ssfûãr
(
f
->
¥ed
, 
s
);

1160 
	`ab‹t
();

1162 
	}
}

1165 
	$ssfûãr_∑tch
(*
a
, 
Àn
, 
ªloc
)

1167 
Àn
 > 0) {

1168 
öë_düg_bc_›
 *
›
 = (öë_düg_bc_›*)
a
;

1169 i‡(
›
->
no
 =
Àn
+4)

1170 
›
->
no
 +
ªloc
;

1171 
Àn
 -
›
->
yes
;

1172 
a
 +
›
->
yes
;

1174 i‡(
Àn
 < 0)

1175 
	`ab‹t
();

1176 
	}
}

1178 
	$ssfûãr_byãcompûe
(
ssfûãr
 *
f
, **
byãcode
)

1180 
f
->
ty≥
) {

1181 
SSF_S_AUTO
:

1183 i‡(!(*
byãcode
=
	`mÆloc
(4))Ë
	`ab‹t
();

1184 ((
öë_düg_bc_›
*)*
byãcode
)[0] = (öë_düg_bc_›){ 
INET_DIAG_BC_AUTO
, 4, 8 };

1187 
SSF_DCOND
:

1188 
SSF_SCOND
:

1190 
Øfûãr
 *
a
 = (*)
f
->
¥ed
;

1191 
Øfûãr
 *
b
;

1192 *
±r
;

1193 
code
 = (
f
->
ty≥
 =
SSF_DCOND
 ? 
INET_DIAG_BC_D_COND
 : 
INET_DIAG_BC_S_COND
);

1194 
Àn
 = 0;

1196 
b
=
a
; b; b=b->
√xt
) {

1197 
Àn
 +4 + (
öë_düg_ho°c⁄d
);

1198 i‡(
a
->
addr
.
Ámûy
 =
AF_INET6
)

1199 
Àn
 += 16;

1201 
Àn
 += 4;

1202 i‡(
b
->
√xt
)

1203 
Àn
 += 4;

1205 i‡(!(
±r
 = 
	`mÆloc
(
Àn
))Ë
	`ab‹t
();

1206 *
byãcode
 = 
±r
;

1207 
b
=
a
; b; b=b->
√xt
) {

1208 
öë_düg_bc_›
 *
›
 = (öë_düg_bc_› *)
±r
;

1209 
Æí
 = (
a
->
addr
.
Ámûy
 =
AF_INET6
 ? 16 : 4);

1210 
›Àn
 = 
Æí
 + 4 + (
öë_düg_ho°c⁄d
);

1211 
öë_düg_ho°c⁄d
 *
c⁄d
 = (öë_düg_ho°c⁄d*)(
±r
+4);

1213 *
›
 = (
öë_düg_bc_›
){ 
code
, 
›Àn
, oplen+4 };

1214 
c⁄d
->
Ámûy
 = 
a
->
addr
.family;

1215 
c⁄d
->
p‹t
 = 
a
->port;

1216 
c⁄d
->
¥efix_Àn
 = 
a
->
addr
.
bôÀn
;

1217 
	`mem˝y
(
c⁄d
->
addr
, 
a
->addr.
d©a
, 
Æí
);

1218 
±r
 +
›Àn
;

1219 i‡(
b
->
√xt
) {

1220 
›
 = (
öë_düg_bc_›
 *)
±r
;

1221 *
›
 = (
öë_düg_bc_›
){ 
INET_DIAG_BC_JMP
, 4, 
Àn
 - (
±r
-*
byãcode
)};

1222 
±r
 += 4;

1225  
±r
 - *
byãcode
;

1227 
SSF_D_GE
:

1229 
Øfûãr
 *
x
 = (*)
f
->
¥ed
;

1230 i‡(!(*
byãcode
=
	`mÆloc
(8))Ë
	`ab‹t
();

1231 ((
öë_düg_bc_›
*)*
byãcode
)[0] = (öë_düg_bc_›){ 
INET_DIAG_BC_D_GE
, 8, 12 };

1232 ((
öë_düg_bc_›
*)*
byãcode
)[1] = (öë_düg_bc_›){ 0, 0, 
x
->
p‹t
 };

1235 
SSF_D_LE
:

1237 
Øfûãr
 *
x
 = (*)
f
->
¥ed
;

1238 i‡(!(*
byãcode
=
	`mÆloc
(8))Ë
	`ab‹t
();

1239 ((
öë_düg_bc_›
*)*
byãcode
)[0] = (öë_düg_bc_›){ 
INET_DIAG_BC_D_LE
, 8, 12 };

1240 ((
öë_düg_bc_›
*)*
byãcode
)[1] = (öë_düg_bc_›){ 0, 0, 
x
->
p‹t
 };

1243 
SSF_S_GE
:

1245 
Øfûãr
 *
x
 = (*)
f
->
¥ed
;

1246 i‡(!(*
byãcode
=
	`mÆloc
(8))Ë
	`ab‹t
();

1247 ((
öë_düg_bc_›
*)*
byãcode
)[0] = (öë_düg_bc_›){ 
INET_DIAG_BC_S_GE
, 8, 12 };

1248 ((
öë_düg_bc_›
*)*
byãcode
)[1] = (öë_düg_bc_›){ 0, 0, 
x
->
p‹t
 };

1251 
SSF_S_LE
:

1253 
Øfûãr
 *
x
 = (*)
f
->
¥ed
;

1254 i‡(!(*
byãcode
=
	`mÆloc
(8))Ë
	`ab‹t
();

1255 ((
öë_düg_bc_›
*)*
byãcode
)[0] = (öë_düg_bc_›){ 
INET_DIAG_BC_S_LE
, 8, 12 };

1256 ((
öë_düg_bc_›
*)*
byãcode
)[1] = (öë_düg_bc_›){ 0, 0, 
x
->
p‹t
 };

1260 
SSF_AND
:

1262 *
a1
, *
a2
, *
a
;

1263 
l1
, 
l2
;

1264 
l1
 = 
	`ssfûãr_byãcompûe
(
f
->
¥ed
, &
a1
);

1265 
l2
 = 
	`ssfûãr_byãcompûe
(
f
->
po°
, &
a2
);

1266 i‡(!(
a
 = 
	`mÆloc
(
l1
+
l2
))Ë
	`ab‹t
();

1267 
	`mem˝y
(
a
, 
a1
, 
l1
);

1268 
	`mem˝y
(
a
+
l1
, 
a2
, 
l2
);

1269 
	`‰ì
(
a1
); fªe(
a2
);

1270 
	`ssfûãr_∑tch
(
a
, 
l1
, 
l2
);

1271 *
byãcode
 = 
a
;

1272  
l1
+
l2
;

1274 
SSF_OR
:

1276 *
a1
, *
a2
, *
a
;

1277 
l1
, 
l2
;

1278 
l1
 = 
	`ssfûãr_byãcompûe
(
f
->
¥ed
, &
a1
);

1279 
l2
 = 
	`ssfûãr_byãcompûe
(
f
->
po°
, &
a2
);

1280 i‡(!(
a
 = 
	`mÆloc
(
l1
+
l2
+4))Ë
	`ab‹t
();

1281 
	`mem˝y
(
a
, 
a1
, 
l1
);

1282 
	`mem˝y
(
a
+
l1
+4, 
a2
, 
l2
);

1283 
	`‰ì
(
a1
); fªe(
a2
);

1284 *(
öë_düg_bc_›
*)(
a
+
l1
Ë(öë_düg_bc_›){ 
INET_DIAG_BC_JMP
, 4, 
l2
+4 };

1285 *
byãcode
 = 
a
;

1286  
l1
+
l2
+4;

1288 
SSF_NOT
:

1290 *
a1
, *
a
;

1291 
l1
;

1292 
l1
 = 
	`ssfûãr_byãcompûe
(
f
->
¥ed
, &
a1
);

1293 i‡(!(
a
 = 
	`mÆloc
(
l1
+4))Ë
	`ab‹t
();

1294 
	`mem˝y
(
a
, 
a1
, 
l1
);

1295 
	`‰ì
(
a1
);

1296 *(
öë_düg_bc_›
*)(
a
+
l1
Ë(öë_düg_bc_›){ 
INET_DIAG_BC_JMP
, 4, 8 };

1297 *
byãcode
 = 
a
;

1298  
l1
+4;

1301 
	`ab‹t
();

1303 
	}
}

1305 
	$ªmembî_he
(
Øfûãr
 *
a
, 
ho°ít
 *
he
)

1307 **
±r
 = 
he
->
h_addr_li°
;

1308 
˙t
 = 0;

1309 
Àn
;

1311 i‡(
he
->
h_addπy≥
 =
AF_INET
)

1312 
Àn
 = 4;

1313 i‡(
he
->
h_addπy≥
 =
AF_INET6
)

1314 
Àn
 = 16;

1318 *
±r
) {

1319 
Øfûãr
 *
b
 = 
a
;

1320 i‡(
a
->
addr
.
bôÀn
) {

1321 i‡((
b
 = 
	`mÆloc
((*b))Ë=
NULL
)

1322  
˙t
;

1323 *
b
 = *
a
;

1324 
b
->
√xt
 = 
a
->next;

1325 
a
->
√xt
 = 
b
;

1327 
	`mem˝y
(
b
->
addr
.
d©a
, *
±r
, 
Àn
);

1328 
b
->
addr
.
byãÀn
 = 
Àn
;

1329 
b
->
addr
.
bôÀn
 = 
Àn
*8;

1330 
b
->
addr
.
Ámûy
 = 
he
->
h_addπy≥
;

1331 
±r
++;

1332 
˙t
++;

1334  
˙t
;

1335 
	}
}

1337 
	$gë_dns_ho°
(
Øfûãr
 *
a
, c⁄° *
addr
, 
Ám
)

1339 
nŸfú°
;

1340 
˙t
 = 0;

1341 
ho°ít
 *
he
;

1343 
a
->
addr
.
bôÀn
 = 0;

1344 i‡(!
nŸfú°
) {

1345 
	`£tho°ít
(1);

1346 
nŸfú°
 = 1;

1348 
he
 = 
	`gëho°by«me2
(
addr
, 
Ám
 =
AF_UNSPEC
 ? 
AF_INET
 : fam);

1349 i‡(
he
)

1350 
˙t
 = 
	`ªmembî_he
(
a
, 
he
);

1351 i‡(
Ám
 =
AF_UNSPEC
) {

1352 
he
 = 
	`gëho°by«me2
(
addr
, 
AF_INET6
);

1353 i‡(
he
)

1354 
˙t
 +
	`ªmembî_he
(
a
, 
he
);

1356  !
˙t
;

1357 
	}
}

1359 
	gxŒ_öôãd
 = 0;

1361 
	$xŒ_öô
()

1363 
π∆_h™dÀ
 
πh
;

1364 i‡(
	`π∆_›í
(&
πh
, 0) < 0)

1365 
	`exô
(1);

1367 
	`Œ_öô_m≠
(&
πh
);

1368 
	`π∆_˛o£
(&
πh
);

1369 
xŒ_öôãd
 = 1;

1370 
	}
}

1372 c⁄° *
	$xŒ_ödex_to_«me
(
ödex
)

1374 i‡(!
xŒ_öôãd
)

1375 
	`xŒ_öô
();

1376  
	`Œ_ödex_to_«me
(
ödex
);

1377 
	}
}

1379 
	$xŒ_«me_to_ödex
(c⁄° *
dev
)

1381 i‡(!
xŒ_öôãd
)

1382 
	`xŒ_öô
();

1383  
	`Œ_«me_to_ödex
(
dev
);

1384 
	}
}

1386 *
	$∑r£_ho°c⁄d
(*
addr
, 
boﬁ
 
is_p‹t
)

1388 *
p‹t
 = 
NULL
;

1389 
Øfûãr
 
a
 = { .
p‹t
 = -1 };

1390 
Øfûãr
 *
ªs
;

1391 
Ám
 = 
¥e„ºed_Ámûy
;

1392 
fûãr
 *
f
 = &
cuºít_fûãr
;

1394 i‡(
Ám
 =
AF_UNIX
 || 
	`°∫cmp
(
addr
, "unix:", 5) == 0) {

1395 *
p
;

1396 
a
.
addr
.
Ámûy
 = 
AF_UNIX
;

1397 i‡(
	`°∫cmp
(
addr
, "unix:", 5) == 0)

1398 
addr
+=5;

1399 
p
 = 
	`°rdup
(
addr
);

1400 
a
.
addr
.
bôÀn
 = 8*
	`°æí
(
p
);

1401 
	`mem˝y
(
a
.
addr
.
d©a
, &
p
, (p));

1402 
Ám
 = 
AF_UNIX
;

1403 
out
;

1406 i‡(
Ám
 =
AF_PACKET
 || 
	`°∫cmp
(
addr
, "link:", 5) == 0) {

1407 
a
.
addr
.
Ámûy
 = 
AF_PACKET
;

1408 
a
.
addr
.
bôÀn
 = 0;

1409 i‡(
	`°∫cmp
(
addr
, "link:", 5) == 0)

1410 
addr
+=5;

1411 
p‹t
 = 
	`°rchr
(
addr
, ':');

1412 i‡(
p‹t
) {

1413 *
p‹t
 = 0;

1414 i‡(
p‹t
[1] && 
	`°rcmp
(port+1, "*")) {

1415 i‡(
	`gë_öãgî
(&
a
.
p‹t
,Öort+1, 0)) {

1416 i‡((
a
.
p‹t
 = 
	`xŒ_«me_to_ödex
(port+1)) <= 0)

1417  
NULL
;

1421 i‡(
addr
[0] && 
	`°rcmp
(addr, "*")) {

1422 
tmp
;

1423 
a
.
addr
.
bôÀn
 = 32;

1424 i‡(
	`Œ_¥Ÿo_a2n
(&
tmp
, 
addr
))

1425  
NULL
;

1426 
a
.
addr
.
d©a
[0] = 
	`¡ohs
(
tmp
);

1428 
Ám
 = 
AF_PACKET
;

1429 
out
;

1432 i‡(
Ám
 =
AF_NETLINK
 || 
	`°∫cmp
(
addr
, "netlink:", 8) == 0) {

1433 
a
.
addr
.
Ámûy
 = 
AF_NETLINK
;

1434 
a
.
addr
.
bôÀn
 = 0;

1435 i‡(
	`°∫cmp
(
addr
, "netlink:", 8) == 0)

1436 
addr
+=8;

1437 
p‹t
 = 
	`°rchr
(
addr
, ':');

1438 i‡(
p‹t
) {

1439 *
p‹t
 = 0;

1440 i‡(
p‹t
[1] && 
	`°rcmp
(port+1, "*")) {

1441 i‡(
	`gë_öãgî
(&
a
.
p‹t
,Öort+1, 0)) {

1442 i‡(
	`°rcmp
(
p‹t
+1, "kernel") == 0)

1443 
a
.
p‹t
 = 0;

1445  
NULL
;

1449 i‡(
addr
[0] && 
	`°rcmp
(addr, "*")) {

1450 
a
.
addr
.
bôÀn
 = 32;

1451 i‡(
	`∆_¥Ÿo_a2n
(&
a
.
addr
.
d©a
[0],áddr) == -1)

1452  
NULL
;

1454 
Ám
 = 
AF_NETLINK
;

1455 
out
;

1458 i‡(
Ám
 =
AF_INET
 || !
	`°∫cmp
(
addr
, "inet:", 5)) {

1459 
Ám
 = 
AF_INET
;

1460 i‡(!
	`°∫cmp
(
addr
, "inet:", 5))

1461 
addr
 += 5;

1462 } i‡(
Ám
 =
AF_INET6
 || !
	`°∫cmp
(
addr
, "inet6:", 6)) {

1463 
Ám
 = 
AF_INET6
;

1464 i‡(!
	`°∫cmp
(
addr
, "inet6:", 6))

1465 
addr
 += 6;

1469 i‡(
addr
[0] == '[') {

1470 
addr
++;

1471 i‡((
p‹t
 = 
	`°rchr
(
addr
, ']')Ë=
NULL
)

1472  
NULL
;

1473 *
p‹t
++ = 0;

1474 } i‡(
addr
[0] == '*') {

1475 
p‹t
 = 
addr
+1;

1477 
p‹t
 = 
	`°ºchr
(
	`°rchr
(
addr
, '/') ? :áddr, ':');

1480 i‡(
is_p‹t
)

1481 
p‹t
 = 
addr
;

1483 i‡(
p‹t
 && *port) {

1484 i‡(*
p‹t
 == ':')

1485 *
p‹t
++ = 0;

1487 i‡(*
p‹t
 && *port != '*') {

1488 i‡(
	`gë_öãgî
(&
a
.
p‹t
,Öort, 0)) {

1489 
£rvít
 *
£1
 = 
NULL
;

1490 
£rvít
 *
£2
 = 
NULL
;

1491 i‡(
cuºít_fûãr
.
dbs
&(1<<
UDP_DB
))

1492 
£1
 = 
	`gë£rvby«me
(
p‹t
, 
UDP_PROTO
);

1493 i‡(
cuºít_fûãr
.
dbs
&(1<<
TCP_DB
))

1494 
£2
 = 
	`gë£rvby«me
(
p‹t
, 
TCP_PROTO
);

1495 i‡(
£1
 && 
£2
 && se1->
s_p‹t
 != se2->s_port) {

1496 
	`Ârötf
(
°dîr
, "Eº‹:ámbiguou†p‹à\"%s\".\n", 
p‹t
);

1497  
NULL
;

1499 i‡(!
£1
)

1500 
£1
 = 
£2
;

1501 i‡(
£1
) {

1502 
a
.
p‹t
 = 
	`¡ohs
(
£1
->
s_p‹t
);

1504 
sˇche
 *
s
;

1505 
s
 = 
æi°
; s; s = s->
√xt
) {

1506 i‡((
s
->
¥Ÿo
 =
UDP_PROTO
 &&

1507 (
cuºít_fûãr
.
dbs
&(1<<
UDP_DB
))) ||

1508 (
s
->
¥Ÿo
 =
TCP_PROTO
 &&

1509 (
cuºít_fûãr
.
dbs
&(1<<
TCP_DB
)))) {

1510 i‡(
s
->
«me
 && 
	`°rcmp
(s->«me, 
p‹t
) == 0) {

1511 i‡(
a
.
p‹t
 > 0 &&á.p‹à!
s
->port) {

1512 
	`Ârötf
(
°dîr
, "Eº‹:ámbiguou†p‹à\"%s\".\n", 
p‹t
);

1513  
NULL
;

1515 
a
.
p‹t
 = 
s
->port;

1519 i‡(
a
.
p‹t
 <= 0) {

1520 
	`Ârötf
(
°dîr
, "Eº‹: \"%s\" d€†nŸÜookÜikê®p‹t.\n", 
p‹t
);

1521  
NULL
;

1527 i‡(!
is_p‹t
 && 
addr
 && *addr && *addr != '*') {

1528 i‡(
	`gë_¥efix_1
(&
a
.
addr
,áddr, 
Ám
)) {

1529 i‡(
	`gë_dns_ho°
(&
a
, 
addr
, 
Ám
)) {

1530 
	`Ârötf
(
°dîr
, "Eº‹:á¿öëÖªfix i†ex≥˘edÑ©hîÅh™ \"%s\".\n", 
addr
);

1531  
NULL
;

1536 
out
:

1537 i‡(
Ám
 !
AF_UNSPEC
) {

1538 
f
->
Ámûõs
 = 0;

1539 
	`fûãr_af_£t
(
f
, 
Ám
);

1540 
	`fûãr_°©es_£t
(
f
, 0);

1543 
ªs
 = 
	`mÆloc
((*res));

1544 i‡(
ªs
)

1545 
	`mem˝y
(
ªs
, &
a
, (a));

1546  
ªs
;

1547 
	}
}

1549 *
	$¥Ÿo_«me
(
¥Ÿocﬁ
)

1551 
¥Ÿocﬁ
) {

1554 
IPPROTO_UDP
:

1556 
IPPROTO_TCP
:

1558 
IPPROTO_DCCP
:

1563 
	}
}

1565 
	$öë_°©s_¥öt
(
sock°©
 *
s
, 
¥Ÿocﬁ
)

1567 *
buf
 = 
NULL
;

1569 
	`sock_°©e_¥öt
(
s
, 
	`¥Ÿo_«me
(
¥Ÿocﬁ
));

1571 
	`öë_addr_¥öt
(&
s
->
loˇl
, s->
Õ‹t
, s->
iÁ˚
);

1572 
	`öë_addr_¥öt
(&
s
->
ªmŸe
, s->
Ω‹t
, 0);

1574 i‡(
show_¥oc_˘x
 || 
show_sock_˘x
) {

1575 i‡(
	`föd_íåy
(
s
->
öo
, &
buf
,

1576 (
show_¥oc_˘x
 & 
show_sock_˘x
) ?

1577 
PROC_SOCK_CTX
 : 
PROC_CTX
) > 0) {

1578 
	`¥ötf
(" u£rs:(%s)", 
buf
);

1579 
	`‰ì
(
buf
);

1581 } i‡(
show_u£rs
) {

1582 i‡(
	`föd_íåy
(
s
->
öo
, &
buf
, 
USERS
) > 0) {

1583 
	`¥ötf
(" u£rs:(%s)", 
buf
);

1584 
	`‰ì
(
buf
);

1587 
	}
}

1589 
	$¥oc_∑r£_öë_addr
(*
loc
, *
ªm
, 
Ámûy
, 

1590 
sock°©
 *
s
)

1592 
s
->
loˇl
.
Ámûy
 = s->
ªmŸe
.family = family;

1593 i‡(
Ámûy
 =
AF_INET
) {

1594 
	`ssˇnf
(
loc
, "%x:%x", 
s
->
loˇl
.
d©a
, (*)&s->
Õ‹t
);

1595 
	`ssˇnf
(
ªm
, "%x:%x", 
s
->
ªmŸe
.
d©a
, (*)&s->
Ω‹t
);

1596 
s
->
loˇl
.
byãÀn
 = s->
ªmŸe
.bytelen = 4;

1599 
	`ssˇnf
(
loc
, "%08x%08x%08x%08x:%x",

1600 
s
->
loˇl
.
d©a
,

1601 
s
->
loˇl
.
d©a
 + 1,

1602 
s
->
loˇl
.
d©a
 + 2,

1603 
s
->
loˇl
.
d©a
 + 3,

1604 &
s
->
Õ‹t
);

1605 
	`ssˇnf
(
ªm
, "%08x%08x%08x%08x:%x",

1606 
s
->
ªmŸe
.
d©a
,

1607 
s
->
ªmŸe
.
d©a
 + 1,

1608 
s
->
ªmŸe
.
d©a
 + 2,

1609 
s
->
ªmŸe
.
d©a
 + 3,

1610 &
s
->
Ω‹t
);

1611 
s
->
loˇl
.
byãÀn
 = s->
ªmŸe
.bytelen = 16;

1615 
	}
}

1617 
	$¥oc_öë_•lô_löe
(*
löe
, **
loc
, **
ªm
, **
d©a
)

1619 *
p
;

1621 i‡((
p
 = 
	`°rchr
(
löe
, ':')Ë=
NULL
)

1624 *
loc
 = 
p
+2;

1625 i‡((
p
 = 
	`°rchr
(*
loc
, ':')Ë=
NULL
)

1628 
p
[5] = 0;

1629 *
ªm
 = 
p
+6;

1630 i‡((
p
 = 
	`°rchr
(*
ªm
, ':')Ë=
NULL
)

1633 
p
[5] = 0;

1634 *
d©a
 = 
p
+6;

1636 
	}
}

1638 *
	$•röt_bw
(*
buf
, 
bw
)

1640 i‡(
bw
 > 1000000.)

1641 
	`•rötf
(
buf
,"%.1fM", 
bw
 / 1000000.);

1642 i‡(
bw
 > 1000.)

1643 
	`•rötf
(
buf
,"%.1fK", 
bw
 / 1000.);

1645 
	`•rötf
(
buf
, "%g", 
bw
);

1647  
buf
;

1648 
	}
}

1650 
	$t˝_°©s_¥öt
(
t˝°©
 *
s
)

1652 
b1
[64];

1654 i‡(
s
->
has_ts_›t
)

1655 
	`¥ötf
("Ås");

1656 i‡(
s
->
has_ßck_›t
)

1657 
	`¥ötf
(" sack");

1658 i‡(
s
->
has_e˙_›t
)

1659 
	`¥ötf
("Écn");

1660 i‡(
s
->
has_e˙£í_›t
)

1661 
	`¥ötf
("Écnseen");

1662 i‡(
s
->
has_Á°›í_›t
)

1663 
	`¥ötf
(" fastopen");

1664 i‡(
s
->
c⁄g_Æg
[0])

1665 
	`¥ötf
(" %s", 
s
->
c⁄g_Æg
);

1666 i‡(
s
->
has_wsˇÀ_›t
)

1667 
	`¥ötf
(" wsˇÀ:%d,%d", 
s
->
¢d_wsˇÀ
, s->
rcv_wsˇÀ
);

1668 i‡(
s
->
πo
)

1669 
	`¥ötf
("Ñto:%g", 
s
->
πo
);

1670 i‡(
s
->
backoff
)

1671 
	`¥ötf
(" backoff:%u", 
s
->
backoff
);

1672 i‡(
s
->
πt
)

1673 
	`¥ötf
("Ñâ:%g/%g", 
s
->
πt
, s->
πtv¨
);

1674 i‡(
s
->
©o
)

1675 
	`¥ötf
("áto:%g", 
s
->
©o
);

1677 i‡(
s
->
qack
)

1678 
	`¥ötf
(" qack:%d", 
s
->
qack
);

1679 i‡(
s
->
qack
 & 1)

1680 
	`¥ötf
(" bidir");

1682 i‡(
s
->
mss
)

1683 
	`¥ötf
(" mss:%d", 
s
->
mss
);

1684 i‡(
s
->
cwnd
)

1685 
	`¥ötf
(" cwnd:%d", 
s
->
cwnd
);

1686 i‡(
s
->
s°hªsh
)

1687 
	`¥ötf
(" s°hªsh:%d", 
s
->
s°hªsh
);

1689 i‡(
s
->
byãs_acked
)

1690 
	`¥ötf
(" byãs_acked:%Œu", 
s
->
byãs_acked
);

1691 i‡(
s
->
byãs_ª˚ived
)

1692 
	`¥ötf
(" byãs_ª˚ived:%Œu", 
s
->
byãs_ª˚ived
);

1693 i‡(
s
->
£gs_out
)

1694 
	`¥ötf
(" segs_out:%u", 
s
->
£gs_out
);

1695 i‡(
s
->
£gs_ö
)

1696 
	`¥ötf
(" segs_ö:%u", 
s
->
£gs_ö
);

1698 i‡(
s
->
d˘˝
 && s->d˘˝->
íabÀd
) {

1699 
d˘˝°©
 *
d˘˝
 = 
s
->dctcp;

1701 
	`¥ötf
(" dctcp:(ce_state:%u,alpha:%u,ab_ecn:%u,ab_tot:%u)",

1702 
d˘˝
->
˚_°©e
, d˘˝->
Æpha
, d˘˝->
ab_e˙
,

1703 
d˘˝
->
ab_tŸ
);

1704 } i‡(
s
->
d˘˝
) {

1705 
	`¥ötf
(" dctcp:fallback_mode");

1708 i‡(
s
->
£nd_bps
)

1709 
	`¥ötf
(" síd %sbps", 
	`•röt_bw
(
b1
, 
s
->
£nd_bps
));

1710 i‡(
s
->
œ°¢d
)

1711 
	`¥ötf
("Üa°¢d:%u", 
s
->
œ°¢d
);

1712 i‡(
s
->
œ°rcv
)

1713 
	`¥ötf
("Üa°rcv:%u", 
s
->
œ°rcv
);

1714 i‡(
s
->
œ°ack
)

1715 
	`¥ötf
("Üa°ack:%u", 
s
->
œ°ack
);

1717 i‡(
s
->
∑cög_øã
) {

1718 
	`¥ötf
("Öacög_øã %sbps", 
	`•röt_bw
(
b1
, 
s
->
∑cög_øã
));

1719 i‡(
s
->
∑cög_øã_max
)

1720 
	`¥ötf
("/%sbps", 
	`•röt_bw
(
b1
,

1721 
s
->
∑cög_øã_max
));

1724 i‡(
s
->
u«cked
)

1725 
	`¥ötf
(" u«cked:%u", 
s
->
u«cked
);

1726 i‡(
s
->
ªå™s
 || s->
ªå™s_tŸÆ
)

1727 
	`¥ötf
("Ñëøns:%u/%u", 
s
->
ªå™s
, s->
ªå™s_tŸÆ
);

1728 i‡(
s
->
lo°
)

1729 
	`¥ötf
("Üo°:%u", 
s
->
lo°
);

1730 i‡(
s
->
ßcked
 && s->
ss
.
°©e
 !
SS_LISTEN
)

1731 
	`¥ötf
(" sacked:%u", 
s
->
ßcked
);

1732 i‡(
s
->
Áckës
)

1733 
	`¥ötf
(" fackës:%u", 
s
->
Áckës
);

1734 i‡(
s
->
ª‹dîög
 != 3)

1735 
	`¥ötf
("Ñe‹dîög:%d", 
s
->
ª‹dîög
);

1736 i‡(
s
->
rcv_πt
)

1737 
	`¥ötf
("Ñcv_πt:%g", 
s
->
rcv_πt
);

1738 i‡(
s
->
rcv_•a˚
)

1739 
	`¥ötf
("Ñcv_•a˚:%d", 
s
->
rcv_•a˚
);

1740 
	}
}

1742 
	$t˝_timî_¥öt
(
t˝°©
 *
s
)

1744 i‡(
s
->
timî
) {

1745 i‡(
s
->
timî
 > 4)

1746 
s
->
timî
 = 5;

1747 
	`¥ötf
("Åimer:(%s,%s,%d)",

1748 
tmr_«me
[
s
->
timî
],

1749 
	`¥öt_ms_timî
(
s
->
timeout
),

1750 
s
->
ªå™s
);

1752 
	}
}

1754 
	$t˝_show_löe
(*
löe
, c⁄° 
fûãr
 *
f
, 
Ámûy
)

1756 
πo
 = 0, 
©o
 = 0;

1757 
t˝°©
 
s
 = {};

1758 *
loc
, *
ªm
, *
d©a
;

1759 
›t
[256];

1760 
n
;

1761 
hz
 = 
	`gë_u£r_hz
();

1763 i‡(
	`¥oc_öë_•lô_löe
(
löe
, &
loc
, &
ªm
, &
d©a
))

1766 
°©e
 = (
d©a
[1] >= 'A') ? (data[1] - 'A' + 10) : (data[1] - '0');

1767 i‡(!(
f
->
°©es
 & (1 << 
°©e
)))

1770 
	`¥oc_∑r£_öë_addr
(
loc
, 
ªm
, 
Ámûy
, &
s
.
ss
);

1772 i‡(
f
->‡&& 
	`run_ssfûãr
(f->f, &
s
.
ss
) == 0)

1775 
›t
[0] = 0;

1776 
n
 = 
	`ssˇnf
(
d©a
, "%x %x:%x %x:%x %x %d %d %u %d %llx %d %d %d %d %d %[^\n]\n",

1777 &
s
.
ss
.
°©e
, &s.ss.
wq
, &s.ss.
rq
,

1778 &
s
.
timî
, &s.
timeout
, &s.
ªå™s
, &s.
ss
.
uid
, &s.
¥obes
,

1779 &
s
.
ss
.
öo
, &s.ss.
ªf˙t
, &s.ss.
sk
, &
πo
, &
©o
, &s.
qack
, &s.
cwnd
,

1780 &
s
.
s°hªsh
, 
›t
);

1782 i‡(
n
 < 17)

1783 
›t
[0] = 0;

1785 i‡(
n
 < 12) {

1786 
πo
 = 0;

1787 
s
.
cwnd
 = 2;

1788 
s
.
s°hªsh
 = -1;

1789 
©o
 = 
s
.
qack
 = 0;

1792 
s
.
ªå™s
 = s.
timî
 !1 ? s.
¥obes
 : s.retrans;

1793 
s
.
timeout
 = (s.timeouà* 1000 + 
hz
 - 1) / hz;

1794 
s
.
©o
 = (Ôtÿ/ 
hz
;

1795 
s
.
qack
 /= 2;

1796 
s
.
πo
 = ()rto;

1797 
s
.
s°hªsh
 = s.ssthresh == -1 ? 0 : s.ssthresh;

1798 
s
.
πo
 = s.πÿ!3 * 
hz
 ? s.rto / hz : 0;

1800 
	`öë_°©s_¥öt
(&
s
.
ss
, 
IPPROTO_TCP
);

1802 i‡(
show_›ti⁄s
)

1803 
	`t˝_timî_¥öt
(&
s
);

1805 i‡(
show_dëaûs
) {

1806 
	`sock_dëaûs_¥öt
(&
s
.
ss
);

1807 i‡(
›t
[0])

1808 
	`¥ötf
(" o±:\"%s\"", 
›t
);

1811 i‡(
show_t˝öfo
)

1812 
	`t˝_°©s_¥öt
(&
s
);

1814 
	`¥ötf
("\n");

1816 
	}
}

1818 
gíîic_ªc‹d_ªad
(
FILE
 *
Â
,

1819 (*
w‹kî
)(*, c⁄° 
fûãr
 *, ),

1820 c⁄° 
fûãr
 *
f
, 
Ám
)

1822 
löe
[256];

1825 i‡(
	`fgës
(
löe
, ÷öe), 
Â
Ë=
NULL
)

1826 
ouãº
;

1828 
	`fgës
(
löe
, ÷öe), 
Â
Ë!
NULL
) {

1829 
n
 = 
	`°æí
(
löe
);

1830 i‡(
n
 =0 || 
löe
[n-1] != '\n') {

1831 
î∫o
 = -
EINVAL
;

1834 
löe
[
n
-1] = 0;

1836 i‡(
	`w‹kî
(
löe
, 
f
, 
Ám
) < 0)

1839 
ouãº
:

1841  
	`„º‹
(
Â
) ? -1 : 0;

1842 
	}
}

1844 
	$¥öt_skmemöfo
(
π©å
 *
tb
[], 
©åty≥
)

1846 c⁄° 
__u32
 *
skmemöfo
;

1848 i‡(!
tb
[
©åty≥
]) {

1849 i‡(
©åty≥
 =
INET_DIAG_SKMEMINFO
) {

1850 i‡(!
tb
[
INET_DIAG_MEMINFO
])

1853 c⁄° 
öë_düg_memöfo
 *
möfo
 =

1854 
	`RTA_DATA
(
tb
[
INET_DIAG_MEMINFO
]);

1856 
	`¥ötf
(" mem:(r%u,w%u,f%u,t%u)",

1857 
möfo
->
idüg_rmem
,

1858 
möfo
->
idüg_wmem
,

1859 
möfo
->
idüg_fmem
,

1860 
möfo
->
idüg_tmem
);

1865 
skmemöfo
 = 
	`RTA_DATA
(
tb
[
©åty≥
]);

1867 
	`¥ötf
(" skmem:(r%u,rb%u,t%u,tb%u,f%u,w%u,o%u",

1868 
skmemöfo
[
SK_MEMINFO_RMEM_ALLOC
],

1869 
skmemöfo
[
SK_MEMINFO_RCVBUF
],

1870 
skmemöfo
[
SK_MEMINFO_WMEM_ALLOC
],

1871 
skmemöfo
[
SK_MEMINFO_SNDBUF
],

1872 
skmemöfo
[
SK_MEMINFO_FWD_ALLOC
],

1873 
skmemöfo
[
SK_MEMINFO_WMEM_QUEUED
],

1874 
skmemöfo
[
SK_MEMINFO_OPTMEM
]);

1876 i‡(
	`RTA_PAYLOAD
(
tb
[
©åty≥
]) >=

1877 (
SK_MEMINFO_BACKLOG
 + 1Ë* (
__u32
))

1878 
	`¥ötf
(",bl%u", 
skmemöfo
[
SK_MEMINFO_BACKLOG
]);

1880 
	`¥ötf
(")");

1881 
	}
}

1883 
	#TCPI_HAS_OPT
(
öfo
, 
›t
Ë!!(öfo->
t˝i_›ti⁄s
 & (›t))

	)

1885 
	$t˝_show_öfo
(c⁄° 
∆msghdr
 *
∆h
, 
öë_düg_msg
 *
r
,

1886 
π©å
 *
tb
[])

1888 
πt
 = 0;

1889 
t˝°©
 
s
 = {};

1891 
s
.
ss
.
°©e
 = 
r
->
idüg_°©e
;

1893 
	`¥öt_skmemöfo
(
tb
, 
INET_DIAG_SKMEMINFO
);

1895 i‡(
tb
[
INET_DIAG_INFO
]) {

1896 
t˝_öfo
 *
öfo
;

1897 
Àn
 = 
	`RTA_PAYLOAD
(
tb
[
INET_DIAG_INFO
]);

1900 i‡(
Àn
 < (*
öfo
)) {

1901 
öfo
 = 
	`Æloˇ
((*info));

1902 
	`mem˝y
(
öfo
, 
	`RTA_DATA
(
tb
[
INET_DIAG_INFO
]), 
Àn
);

1903 
	`mem£t
((*)
öfo
 + 
Àn
, 0, (*info) -Üen);

1905 
öfo
 = 
	`RTA_DATA
(
tb
[
INET_DIAG_INFO
]);

1907 i‡(
show_›ti⁄s
) {

1908 
s
.
has_ts_›t
 = 
	`TCPI_HAS_OPT
(
öfo
, 
TCPI_OPT_TIMESTAMPS
);

1909 
s
.
has_ßck_›t
 = 
	`TCPI_HAS_OPT
(
öfo
, 
TCPI_OPT_SACK
);

1910 
s
.
has_e˙_›t
 = 
	`TCPI_HAS_OPT
(
öfo
, 
TCPI_OPT_ECN
);

1911 
s
.
has_e˙£í_›t
 = 
	`TCPI_HAS_OPT
(
öfo
, 
TCPI_OPT_ECN_SEEN
);

1912 
s
.
has_Á°›í_›t
 = 
	`TCPI_HAS_OPT
(
öfo
, 
TCPI_OPT_SYN_DATA
);

1915 i‡(
tb
[
INET_DIAG_CONG
])

1916 
	`°∫˝y
(
s
.
c⁄g_Æg
,

1917 
	`πa_gë©å_°r
(
tb
[
INET_DIAG_CONG
]),

1918 (
s
.
c⁄g_Æg
) - 1);

1920 i‡(
	`TCPI_HAS_OPT
(
öfo
, 
TCPI_OPT_WSCALE
)) {

1921 
s
.
has_wsˇÀ_›t
 = 
åue
;

1922 
s
.
¢d_wsˇÀ
 = 
öfo
->
t˝i_¢d_wsˇÀ
;

1923 
s
.
rcv_wsˇÀ
 = 
öfo
->
t˝i_rcv_wsˇÀ
;

1926 i‡(
öfo
->
t˝i_πo
 && info->tcpi_rto != 3000000)

1927 
s
.
πo
 = ()
öfo
->
t˝i_πo
 / 1000;

1929 
s
.
backoff
 = 
öfo
->
t˝i_backoff
;

1930 
s
.
πt
 = ()
öfo
->
t˝i_πt
 / 1000;

1931 
s
.
πtv¨
 = ()
öfo
->
t˝i_πtv¨
 / 1000;

1932 
s
.
©o
 = ()
öfo
->
t˝i_©o
 / 1000;

1933 
s
.
mss
 = 
öfo
->
t˝i_¢d_mss
;

1934 
s
.
rcv_•a˚
 = 
öfo
->
t˝i_rcv_•a˚
;

1935 
s
.
rcv_πt
 = ()
öfo
->
t˝i_rcv_πt
 / 1000;

1936 
s
.
œ°¢d
 = 
öfo
->
t˝i_œ°_d©a_£¡
;

1937 
s
.
œ°rcv
 = 
öfo
->
t˝i_œ°_d©a_ªcv
;

1938 
s
.
œ°ack
 = 
öfo
->
t˝i_œ°_ack_ªcv
;

1939 
s
.
u«cked
 = 
öfo
->
t˝i_u«cked
;

1940 
s
.
ªå™s
 = 
öfo
->
t˝i_ªå™s
;

1941 
s
.
ªå™s_tŸÆ
 = 
öfo
->
t˝i_tŸÆ_ªå™s
;

1942 
s
.
lo°
 = 
öfo
->
t˝i_lo°
;

1943 
s
.
ßcked
 = 
öfo
->
t˝i_ßcked
;

1944 
s
.
ª‹dîög
 = 
öfo
->
t˝i_ª‹dîög
;

1945 
s
.
rcv_•a˚
 = 
öfo
->
t˝i_rcv_•a˚
;

1946 
s
.
cwnd
 = 
öfo
->
t˝i_¢d_cwnd
;

1948 i‡(
öfo
->
t˝i_¢d_s°hªsh
 < 0xFFFF)

1949 
s
.
s°hªsh
 = 
öfo
->
t˝i_¢d_s°hªsh
;

1951 
πt
 = (Ë
öfo
->
t˝i_πt
;

1952 i‡(
tb
[
INET_DIAG_VEGASINFO
]) {

1953 c⁄° 
t˝vegas_öfo
 *
vöfo


1954 
	`RTA_DATA
(
tb
[
INET_DIAG_VEGASINFO
]);

1956 i‡(
vöfo
->
t˝v_íabÀd
 &&

1957 
vöfo
->
t˝v_πt
 && vinfo->tcpv_rtt != 0x7fffffff)

1958 
πt
 = 
vöfo
->
t˝v_πt
;

1961 i‡(
tb
[
INET_DIAG_DCTCPINFO
]) {

1962 
d˘˝°©
 *
d˘˝
 = 
	`mÆloc
((

1963 
d˘˝°©
));

1965 c⁄° 
t˝_d˘˝_öfo
 *
döfo


1966 
	`RTA_DATA
(
tb
[
INET_DIAG_DCTCPINFO
]);

1968 
d˘˝
->
íabÀd
 = !!
döfo
->
d˘˝_íabÀd
;

1969 
d˘˝
->
˚_°©e
 = 
döfo
->
d˘˝_˚_°©e
;

1970 
d˘˝
->
Æpha
 = 
döfo
->
d˘˝_Æpha
;

1971 
d˘˝
->
ab_e˙
 = 
döfo
->
d˘˝_ab_e˙
;

1972 
d˘˝
->
ab_tŸ
 = 
döfo
->
d˘˝_ab_tŸ
;

1973 
s
.
d˘˝
 = dctcp;

1976 i‡(
πt
 > 0 && 
öfo
->
t˝i_¢d_mss
 && info->
t˝i_¢d_cwnd
) {

1977 
s
.
£nd_bps
 = (Ë
öfo
->
t˝i_¢d_cwnd
 *

1978 ()
öfo
->
t˝i_¢d_mss
 * 8000000. / 
πt
;

1981 i‡(
öfo
->
t˝i_∑cög_øã
 &&

1982 
öfo
->
t˝i_∑cög_øã
 != ~0ULL) {

1983 
s
.
∑cög_øã
 = 
öfo
->
t˝i_∑cög_øã
 * 8.;

1985 i‡(
öfo
->
t˝i_max_∑cög_øã
 &&

1986 
öfo
->
t˝i_max_∑cög_øã
 != ~0ULL)

1987 
s
.
∑cög_øã_max
 = 
öfo
->
t˝i_max_∑cög_øã
 * 8.;

1989 
s
.
byãs_acked
 = 
öfo
->
t˝i_byãs_acked
;

1990 
s
.
byãs_ª˚ived
 = 
öfo
->
t˝i_byãs_ª˚ived
;

1991 
s
.
£gs_out
 = 
öfo
->
t˝i_£gs_out
;

1992 
s
.
£gs_ö
 = 
öfo
->
t˝i_£gs_ö
;

1993 
	`t˝_°©s_¥öt
(&
s
);

1994 
	`‰ì
(
s
.
d˘˝
);

1996 
	}
}

1998 
	$öë_show_sock
(
∆msghdr
 *
∆h
, 
fûãr
 *
f
, 
¥Ÿocﬁ
)

2000 
π©å
 * 
tb
[
INET_DIAG_MAX
+1];

2001 
öë_düg_msg
 *
r
 = 
	`NLMSG_DATA
(
∆h
);

2002 
sock°©
 
s
 = {};

2004 
	`∑r£_π©å
(
tb
, 
INET_DIAG_MAX
, (
π©å
*)(
r
+1),

2005 
∆h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
r
)));

2007 
s
.
°©e
 = 
r
->
idüg_°©e
;

2008 
s
.
loˇl
.
Ámûy
 = s.
ªmŸe
.Ámûy = 
r
->
idüg_Ámûy
;

2009 
s
.
Õ‹t
 = 
	`¡ohs
(
r
->
id
.
idüg_•‹t
);

2010 
s
.
Ω‹t
 = 
	`¡ohs
(
r
->
id
.
idüg_dp‹t
);

2011 
s
.
wq
 = 
r
->
idüg_wqueue
;

2012 
s
.
rq
 = 
r
->
idüg_rqueue
;

2013 
s
.
öo
 = 
r
->
idüg_öode
;

2014 
s
.
uid
 = 
r
->
idüg_uid
;

2015 
s
.
iÁ˚
 = 
r
->
id
.
idüg_if
;

2016 
s
.
sk
 = 
	`cookõ_sk_gë
(&
r
->
id
.
idüg_cookõ
[0]);

2018 i‡(
s
.
loˇl
.
Ámûy
 =
AF_INET
) {

2019 
s
.
loˇl
.
byãÀn
 = s.
ªmŸe
.bytelen = 4;

2021 
s
.
loˇl
.
byãÀn
 = s.
ªmŸe
.bytelen = 16;

2024 
	`mem˝y
(
s
.
loˇl
.
d©a
, 
r
->
id
.
idüg_§c
, s.loˇl.
byãÀn
);

2025 
	`mem˝y
(
s
.
ªmŸe
.
d©a
, 
r
->
id
.
idüg_d°
, s.
loˇl
.
byãÀn
);

2027 i‡(
f
 && f->‡&& 
	`run_ssfûãr
(f->f, &
s
) == 0)

2030 i‡(
tb
[
INET_DIAG_PROTOCOL
])

2031 
¥Ÿocﬁ
 = *(
__u8
 *)
	`RTA_DATA
(
tb
[
INET_DIAG_PROTOCOL
]);

2033 
	`öë_°©s_¥öt
(&
s
, 
¥Ÿocﬁ
);

2035 i‡(
show_›ti⁄s
) {

2036 
t˝°©
 
t
 = {};

2038 
t
.
timî
 = 
r
->
idüg_timî
;

2039 
t
.
timeout
 = 
r
->
idüg_expúes
;

2040 
t
.
ªå™s
 = 
r
->
idüg_ªå™s
;

2041 
	`t˝_timî_¥öt
(&
t
);

2044 i‡(
show_dëaûs
) {

2045 
	`sock_dëaûs_¥öt
(&
s
);

2046 i‡(
s
.
loˇl
.
Ámûy
 =
AF_INET6
 && 
tb
[
INET_DIAG_SKV6ONLY
]) {

2047 
v6⁄ly
;

2048 
v6⁄ly
 = *(
__u8
 *)
	`RTA_DATA
(
tb
[
INET_DIAG_SKV6ONLY
]);

2049 
	`¥ötf
(" v6⁄ly:%u", 
v6⁄ly
);

2051 i‡(
tb
[
INET_DIAG_SHUTDOWN
]) {

2052 
mask
;

2053 
mask
 = *(
__u8
 *)
	`RTA_DATA
(
tb
[
INET_DIAG_SHUTDOWN
]);

2054 
	`¥ötf
(" %c-%c", 
mask
 & 1 ? '-' : '<', mask & 2 ? '-' : '>');

2058 i‡(
show_mem
 || 
show_t˝öfo
) {

2059 
	`¥ötf
("\n\t");

2060 
	`t˝_show_öfo
(
∆h
, 
r
, 
tb
);

2063 
	`¥ötf
("\n");

2065 
	}
}

2067 
	$t˝düg_£nd
(
fd
, 
¥Ÿocﬁ
, 
fûãr
 *
f
)

2069 
sockaddr_∆
 
∆addr
;

2071 
∆msghdr
 
∆h
;

2072 
öë_düg_ªq
 
r
;

2073 } 
ªq
;

2074 *
bc
 = 
NULL
;

2075 
b˛í
;

2076 
msghdr
 
msg
;

2077 
π©å
 
πa
;

2078 
iovec
 
iov
[3];

2080 i‡(
¥Ÿocﬁ
 =
IPPROTO_UDP
)

2083 
	`mem£t
(&
∆addr
, 0, (nladdr));

2084 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

2086 
ªq
.
∆h
.
∆msg_Àn
 = (req);

2087 i‡(
¥Ÿocﬁ
 =
IPPROTO_TCP
)

2088 
ªq
.
∆h
.
∆msg_ty≥
 = 
TCPDIAG_GETSOCK
;

2090 
ªq
.
∆h
.
∆msg_ty≥
 = 
DCCPDIAG_GETSOCK
;

2091 
ªq
.
∆h
.
∆msg_Êags
 = 
NLM_F_ROOT
|
NLM_F_MATCH
|
NLM_F_REQUEST
;

2092 
ªq
.
∆h
.
∆msg_pid
 = 0;

2093 
ªq
.
∆h
.
∆msg_£q
 = 
MAGIC_SEQ
;

2094 
	`mem£t
(&
ªq
.
r
, 0, (req.r));

2095 
ªq
.
r
.
idüg_Ámûy
 = 
AF_INET
;

2096 
ªq
.
r
.
idüg_°©es
 = 
f
->
°©es
;

2097 i‡(
show_mem
) {

2098 
ªq
.
r
.
idüg_ext
 |(1<<(
INET_DIAG_MEMINFO
-1));

2099 
ªq
.
r
.
idüg_ext
 |(1<<(
INET_DIAG_SKMEMINFO
-1));

2102 i‡(
show_t˝öfo
) {

2103 
ªq
.
r
.
idüg_ext
 |(1<<(
INET_DIAG_INFO
-1));

2104 
ªq
.
r
.
idüg_ext
 |(1<<(
INET_DIAG_VEGASINFO
-1));

2105 
ªq
.
r
.
idüg_ext
 |(1<<(
INET_DIAG_CONG
-1));

2108 
iov
[0] = (
iovec
){

2109 .
iov_ba£
 = &
ªq
,

2110 .
iov_Àn
 = (
ªq
)

2112 i‡(
f
->f) {

2113 
b˛í
 = 
	`ssfûãr_byãcompûe
(
f
->f, &
bc
);

2114 
πa
.
πa_ty≥
 = 
INET_DIAG_REQ_BYTECODE
;

2115 
πa
.
πa_Àn
 = 
	`RTA_LENGTH
(
b˛í
);

2116 
iov
[1] = (
iovec
){ &
πa
, (rta) };

2117 
iov
[2] = (
iovec
){ 
bc
, 
b˛í
 };

2118 
ªq
.
∆h
.
∆msg_Àn
 +
	`RTA_LENGTH
(
b˛í
);

2121 
msg
 = (
msghdr
) {

2122 .
msg_«me
 = (*)&
∆addr
,

2123 .
msg_«mñí
 = (
∆addr
),

2124 .
msg_iov
 = 
iov
,

2125 .
msg_iovÀn
 = 
f
->f ? 3 : 1,

2128 i‡(
	`£ndmsg
(
fd
, &
msg
, 0) < 0) {

2129 
	`˛o£
(
fd
);

2134 
	}
}

2136 
	$sockdüg_£nd
(
Ámûy
, 
fd
, 
¥Ÿocﬁ
, 
fûãr
 *
f
)

2138 
sockaddr_∆
 
∆addr
;

2139 
	`DIAG_REQUEST
(
ªq
, 
öë_düg_ªq_v2
 
r
);

2140 *
bc
 = 
NULL
;

2141 
b˛í
;

2142 
msghdr
 
msg
;

2143 
π©å
 
πa
;

2144 
iovec
 
iov
[3];

2146 i‡(
Ámûy
 =
PF_UNSPEC
)

2147  
	`t˝düg_£nd
(
fd
, 
¥Ÿocﬁ
, 
f
);

2149 
	`mem£t
(&
∆addr
, 0, (nladdr));

2150 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

2152 
	`mem£t
(&
ªq
.
r
, 0, (req.r));

2153 
ªq
.
r
.
sdüg_Ámûy
 = 
Ámûy
;

2154 
ªq
.
r
.
sdüg_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

2155 
ªq
.
r
.
idüg_°©es
 = 
f
->
°©es
;

2156 i‡(
show_mem
) {

2157 
ªq
.
r
.
idüg_ext
 |(1<<(
INET_DIAG_MEMINFO
-1));

2158 
ªq
.
r
.
idüg_ext
 |(1<<(
INET_DIAG_SKMEMINFO
-1));

2161 i‡(
show_t˝öfo
) {

2162 
ªq
.
r
.
idüg_ext
 |(1<<(
INET_DIAG_INFO
-1));

2163 
ªq
.
r
.
idüg_ext
 |(1<<(
INET_DIAG_VEGASINFO
-1));

2164 
ªq
.
r
.
idüg_ext
 |(1<<(
INET_DIAG_CONG
-1));

2167 
iov
[0] = (
iovec
){

2168 .
iov_ba£
 = &
ªq
,

2169 .
iov_Àn
 = (
ªq
)

2171 i‡(
f
->f) {

2172 
b˛í
 = 
	`ssfûãr_byãcompûe
(
f
->f, &
bc
);

2173 
πa
.
πa_ty≥
 = 
INET_DIAG_REQ_BYTECODE
;

2174 
πa
.
πa_Àn
 = 
	`RTA_LENGTH
(
b˛í
);

2175 
iov
[1] = (
iovec
){ &
πa
, (rta) };

2176 
iov
[2] = (
iovec
){ 
bc
, 
b˛í
 };

2177 
ªq
.
∆h
.
∆msg_Àn
 +
	`RTA_LENGTH
(
b˛í
);

2180 
msg
 = (
msghdr
) {

2181 .
msg_«me
 = (*)&
∆addr
,

2182 .
msg_«mñí
 = (
∆addr
),

2183 .
msg_iov
 = 
iov
,

2184 .
msg_iovÀn
 = 
f
->f ? 3 : 1,

2187 i‡(
	`£ndmsg
(
fd
, &
msg
, 0) < 0) {

2188 
	`˛o£
(
fd
);

2193 
	}
}

2195 
	söë_düg_¨g
 {

2196 
fûãr
 *
	mf
;

2197 
	m¥Ÿocﬁ
;

2200 
	$show_⁄e_öë_sock
(c⁄° 
sockaddr_∆
 *
addr
,

2201 
∆msghdr
 *
h
, *
¨g
)

2203 
îr
;

2204 
öë_düg_¨g
 *
düg_¨g
 = 
¨g
;

2205 
öë_düg_msg
 *
r
 = 
	`NLMSG_DATA
(
h
);

2207 i‡(!(
düg_¨g
->
f
->
Ámûõs
 & (1 << 
r
->
idüg_Ámûy
)))

2209 i‡((
îr
 = 
	`öë_show_sock
(
h
, 
düg_¨g
->
f
, düg_¨g->
¥Ÿocﬁ
)) < 0)

2210  
îr
;

2213 
	}
}

2215 
	$öë_show_√éök
(
fûãr
 *
f
, 
FILE
 *
dump_Â
, 
¥Ÿocﬁ
)

2217 
îr
 = 0;

2218 
π∆_h™dÀ
 
πh
;

2219 
Ámûy
 = 
PF_INET
;

2220 
öë_düg_¨g
 
¨g
 = { .
f
 = f, .
¥Ÿocﬁ
 =Örotocol };

2222 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_SOCK_DIAG
))

2224 
πh
.
dump
 = 
MAGIC_SEQ
;

2225 
πh
.
dump_Â
 = dump_fp;

2226 i‡(
¥e„ºed_Ámûy
 =
PF_INET6
)

2227 
Ámûy
 = 
PF_INET6
;

2229 
agaö
:

2230 i‡((
îr
 = 
	`sockdüg_£nd
(
Ámûy
, 
πh
.
fd
, 
¥Ÿocﬁ
, 
f
)))

2231 
Exô
;

2233 i‡((
îr
 = 
	`π∆_dump_fûãr
(&
πh
, 
show_⁄e_öë_sock
, &
¨g
))) {

2234 i‡(
Ámûy
 !
PF_UNSPEC
) {

2235 
Ámûy
 = 
PF_UNSPEC
;

2236 
agaö
;

2238 
Exô
;

2240 i‡(
Ámûy
 =
PF_INET
 && 
¥e„ºed_Ámûy
 != PF_INET) {

2241 
Ámûy
 = 
PF_INET6
;

2242 
agaö
;

2245 
Exô
:

2246 
	`π∆_˛o£
(&
πh
);

2247  
îr
;

2248 
	}
}

2250 
	$t˝_show_√éök_fûe
(
fûãr
 *
f
)

2252 
FILE
 *
Â
;

2253 
buf
[16384];

2255 i‡((
Â
 = 
	`f›í
(
	`gëív
("TCPDIAG_FILE"), "r")Ë=
NULL
) {

2256 
	`≥º‹
("fopen($TCPDIAG_FILE)");

2261 
°©us
, 
îr
;

2262 
∆msghdr
 *
h
 = (∆msghdr*)
buf
;

2264 
°©us
 = 
	`‰ód
(
buf
, 1, (*
h
), 
Â
);

2265 i‡(
°©us
 < 0) {

2266 
	`≥º‹
("Reading header from $TCPDIAG_FILE");

2269 i‡(
°©us
 !(*
h
)) {

2270 
	`≥º‹
("Unexpected EOFÑeading $TCPDIAG_FILE");

2274 
°©us
 = 
	`‰ód
(
h
+1, 1, 
	`NLMSG_ALIGN
(h->
∆msg_Àn
-(*h)), 
Â
);

2276 i‡(
°©us
 < 0) {

2277 
	`≥º‹
("Reading $TCPDIAG_FILE");

2280 i‡(
°©us
 + (*
h
Ë< h->
∆msg_Àn
) {

2281 
	`≥º‹
("Unexpected EOFÑeading $TCPDIAG_FILE");

2286 i‡(
h
->
∆msg_ty≥
 =
NLMSG_DONE
)

2289 i‡(
h
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

2290 
∆msgîr
 *
îr
 = (∆msgîr*)
	`NLMSG_DATA
(
h
);

2291 i‡(
h
->
∆msg_Àn
 < 
	`NLMSG_LENGTH
((
∆msgîr
))) {

2292 
	`Ârötf
(
°dîr
, "ERRORÅruncated\n");

2294 
î∫o
 = -
îr
->
îr‹
;

2295 
	`≥º‹
("TCPDIAGánswered");

2300 
îr
 = 
	`öë_show_sock
(
h
, 
f
, 
IPPROTO_TCP
);

2301 i‡(
îr
 < 0)

2302  
îr
;

2304 
	}
}

2306 
	$t˝_show
(
fûãr
 *
f
, 
sockty≥
)

2308 
FILE
 *
Â
 = 
NULL
;

2309 *
buf
 = 
NULL
;

2310 
bufsize
 = 64*1024;

2312 i‡(!
	`fûãr_af_gë
(
f
, 
AF_INET
Ë&& !fûãr_af_gë(f, 
AF_INET6
))

2315 
dg_¥Ÿo
 = 
TCP_PROTO
;

2317 i‡(
	`gëív
("TCPDIAG_FILE"))

2318  
	`t˝_show_√éök_fûe
(
f
);

2320 i‡(!
	`gëív
("PROC_NET_TCP") && !getenv("PROC_ROOT")

2321 && 
	`öë_show_√éök
(
f
, 
NULL
, 
sockty≥
) == 0)

2334 
	`gë_¶ab°©
(&
¶ab°©
);

2336 
guess
 = 
¶ab°©
.
socks
+¶ab°©.
t˝_syns
;

2337 i‡(
f
->
°©es
&(1<<
SS_TIME_WAIT
))

2338 
guess
 +
¶ab°©
.
t˝_tws
;

2339 i‡(
guess
 > (16*1024*1024)/128)

2340 
guess
 = (16*1024*1024)/128;

2341 
guess
 *= 128;

2342 i‡(
guess
 > 
bufsize
)

2343 
bufsize
 = 
guess
;

2345 
bufsize
 >= 64*1024) {

2346 i‡((
buf
 = 
	`mÆloc
(
bufsize
)Ë!
NULL
)

2348 
bufsize
 /= 2;

2350 i‡(
buf
 =
NULL
) {

2351 
î∫o
 = 
ENOMEM
;

2355 i‡(
f
->
Ámûõs
 & (1<<
AF_INET
)) {

2356 i‡((
Â
 = 
	`√t_t˝_›í
()Ë=
NULL
)

2357 
ouãº
;

2359 
	`£tbuf„r
(
Â
, 
buf
, 
bufsize
);

2360 i‡(
	`gíîic_ªc‹d_ªad
(
Â
, 
t˝_show_löe
, 
f
, 
AF_INET
))

2361 
ouãº
;

2362 
	`f˛o£
(
Â
);

2365 i‡((
f
->
Ámûõs
 & (1<<
AF_INET6
)) &&

2366 (
Â
 = 
	`√t_t˝6_›í
()Ë!
NULL
) {

2367 
	`£tbuf„r
(
Â
, 
buf
, 
bufsize
);

2368 i‡(
	`gíîic_ªc‹d_ªad
(
Â
, 
t˝_show_löe
, 
f
, 
AF_INET6
))

2369 
ouãº
;

2370 
	`f˛o£
(
Â
);

2373 
	`‰ì
(
buf
);

2376 
ouãº
:

2378 
ßved_î∫o
 = 
î∫o
;

2379 
	`‰ì
(
buf
);

2380 i‡(
Â
)

2381 
	`f˛o£
(
Â
);

2382 
î∫o
 = 
ßved_î∫o
;

2385 
	}
}

2388 
	$dgøm_show_löe
(*
löe
, c⁄° 
fûãr
 *
f
, 
Ámûy
)

2390 
sock°©
 
s
 = {};

2391 *
loc
, *
ªm
, *
d©a
;

2392 
›t
[256];

2393 
n
;

2395 i‡(
	`¥oc_öë_•lô_löe
(
löe
, &
loc
, &
ªm
, &
d©a
))

2398 
°©e
 = (
d©a
[1] >= 'A') ? (data[1] - 'A' + 10) : (data[1] - '0');

2399 i‡(!(
f
->
°©es
 & (1 << 
°©e
)))

2402 
	`¥oc_∑r£_öë_addr
(
loc
, 
ªm
, 
Ámûy
, &
s
);

2404 i‡(
f
->‡&& 
	`run_ssfûãr
(f->f, &
s
) == 0)

2407 
›t
[0] = 0;

2408 
n
 = 
	`ssˇnf
(
d©a
, "%x %x:%x %*x:%*x %*x %d %*d %u %d %llx %[^\n]\n",

2409 &
s
.
°©e
, &s.
wq
, &s.
rq
,

2410 &
s
.
uid
, &s.
öo
,

2411 &
s
.
ªf˙t
, &s.
sk
, 
›t
);

2413 i‡(
n
 < 9)

2414 
›t
[0] = 0;

2416 
	`öë_°©s_¥öt
(&
s
, 
dg_¥Ÿo
 =
UDP_PROTO
 ? 
IPPROTO_UDP
 : 0);

2418 i‡(
show_dëaûs
 && 
›t
[0])

2419 
	`¥ötf
(" o±:\"%s\"", 
›t
);

2421 
	`¥ötf
("\n");

2423 
	}
}

2425 
	$udp_show
(
fûãr
 *
f
)

2427 
FILE
 *
Â
 = 
NULL
;

2429 i‡(!
	`fûãr_af_gë
(
f
, 
AF_INET
Ë&& !fûãr_af_gë(f, 
AF_INET6
))

2432 
dg_¥Ÿo
 = 
UDP_PROTO
;

2434 i‡(!
	`gëív
("PROC_NET_UDP") && !getenv("PROC_ROOT")

2435 && 
	`öë_show_√éök
(
f
, 
NULL
, 
IPPROTO_UDP
) == 0)

2438 i‡(
f
->
Ámûõs
&(1<<
AF_INET
)) {

2439 i‡((
Â
 = 
	`√t_udp_›í
()Ë=
NULL
)

2440 
ouãº
;

2441 i‡(
	`gíîic_ªc‹d_ªad
(
Â
, 
dgøm_show_löe
, 
f
, 
AF_INET
))

2442 
ouãº
;

2443 
	`f˛o£
(
Â
);

2446 i‡((
f
->
Ámûõs
&(1<<
AF_INET6
)) &&

2447 (
Â
 = 
	`√t_udp6_›í
()Ë!
NULL
) {

2448 i‡(
	`gíîic_ªc‹d_ªad
(
Â
, 
dgøm_show_löe
, 
f
, 
AF_INET6
))

2449 
ouãº
;

2450 
	`f˛o£
(
Â
);

2454 
ouãº
:

2456 
ßved_î∫o
 = 
î∫o
;

2457 i‡(
Â
)

2458 
	`f˛o£
(
Â
);

2459 
î∫o
 = 
ßved_î∫o
;

2462 
	}
}

2464 
	$øw_show
(
fûãr
 *
f
)

2466 
FILE
 *
Â
 = 
NULL
;

2468 i‡(!
	`fûãr_af_gë
(
f
, 
AF_INET
Ë&& !fûãr_af_gë(f, 
AF_INET6
))

2471 
dg_¥Ÿo
 = 
RAW_PROTO
;

2473 i‡(
f
->
Ámûõs
&(1<<
AF_INET
)) {

2474 i‡((
Â
 = 
	`√t_øw_›í
()Ë=
NULL
)

2475 
ouãº
;

2476 i‡(
	`gíîic_ªc‹d_ªad
(
Â
, 
dgøm_show_löe
, 
f
, 
AF_INET
))

2477 
ouãº
;

2478 
	`f˛o£
(
Â
);

2481 i‡((
f
->
Ámûõs
&(1<<
AF_INET6
)) &&

2482 (
Â
 = 
	`√t_øw6_›í
()Ë!
NULL
) {

2483 i‡(
	`gíîic_ªc‹d_ªad
(
Â
, 
dgøm_show_löe
, 
f
, 
AF_INET6
))

2484 
ouãº
;

2485 
	`f˛o£
(
Â
);

2489 
ouãº
:

2491 
ßved_î∫o
 = 
î∫o
;

2492 i‡(
Â
)

2493 
	`f˛o£
(
Â
);

2494 
î∫o
 = 
ßved_î∫o
;

2497 
	}
}

2499 
	gunix_°©e_m≠
[] = { 
SS_CLOSE
, 
SS_SYN_SENT
,

2500 
SS_ESTABLISHED
, 
SS_CLOSING
 };

2502 
	#MAX_UNIX_REMEMBER
 (1024*1024/(
sock°©
))

	)

2504 
	$unix_li°_‰ì
(
sock°©
 *
li°
)

2506 
li°
) {

2507 
sock°©
 *
s
 = 
li°
;

2509 
li°
 =Üi°->
√xt
;

2510 
	`‰ì
(
s
->
«me
);

2511 
	`‰ì
(
s
);

2513 
	}
}

2515 c⁄° *
	$unix_√tid_«me
(
ty≥
)

2517 c⁄° *
√tid
;

2519 
ty≥
) {

2520 
SOCK_STREAM
:

2521 
√tid
 = "u_str";

2523 
SOCK_SEQPACKET
:

2524 
√tid
 = "u_seq";

2526 
SOCK_DGRAM
:

2528 
√tid
 = "u_dgr";

2531  
√tid
;

2532 
	}
}

2534 
boﬁ
 
	$unix_ty≥_skù
(
sock°©
 *
s
, 
fûãr
 *
f
)

2536 i‡(
s
->
ty≥
 =
SOCK_STREAM
 && !(
f
->
dbs
&(1<<
UNIX_ST_DB
)))

2537  
åue
;

2538 i‡(
s
->
ty≥
 =
SOCK_DGRAM
 && !(
f
->
dbs
&(1<<
UNIX_DG_DB
)))

2539  
åue
;

2540 i‡(
s
->
ty≥
 =
SOCK_SEQPACKET
 && !(
f
->
dbs
&(1<<
UNIX_SQ_DB
)))

2541  
åue
;

2542  
Ál£
;

2543 
	}
}

2545 
boﬁ
 
	$unix_u£_¥oc
()

2547  
	`gëív
("PROC_NET_UNIX") || getenv("PROC_ROOT");

2548 
	}
}

2550 
	$unix_°©s_¥öt
(
sock°©
 *
li°
, 
fûãr
 *
f
)

2552 
sock°©
 *
s
;

2553 *
≥î
;

2554 *
˘x_buf
 = 
NULL
;

2555 
boﬁ
 
u£_¥oc
 = 
	`unix_u£_¥oc
();

2556 
p‹t_«me
[30] = {};

2558 
s
 = 
li°
; s; s = s->
√xt
) {

2559 i‡(!(
f
->
°©es
 & (1 << 
s
->
°©e
)))

2561 i‡(
	`unix_ty≥_skù
(
s
, 
f
))

2564 
≥î
 = "*";

2565 i‡(
s
->
≥î_«me
)

2566 
≥î
 = 
s
->
≥î_«me
;

2568 i‡(
s
->
Ω‹t
 && 
u£_¥oc
) {

2569 
sock°©
 *
p
;

2571 
p
 = 
li°
;Ö;Ö =Ö->
√xt
) {

2572 i‡(
s
->
Ω‹t
 =
p
->
Õ‹t
)

2576 i‡(!
p
) {

2577 
≥î
 = "?";

2579 
≥î
 = 
p
->
«me
 ? : "*";

2583 i‡(
u£_¥oc
 && 
f
->f) {

2584 
sock°©
 
°
;

2585 
°
.
loˇl
.
Ámûy
 = 
AF_UNIX
;

2586 
°
.
ªmŸe
.
Ámûy
 = 
AF_UNIX
;

2587 
	`mem˝y
(
°
.
loˇl
.
d©a
, &
s
->
«me
, (s->name));

2588 i‡(
	`°rcmp
(
≥î
, "*") == 0)

2589 
	`mem£t
(
°
.
ªmŸe
.
d©a
, 0, (
≥î
));

2591 
	`mem˝y
(
°
.
ªmŸe
.
d©a
, &
≥î
, (peer));

2592 i‡(
	`run_ssfûãr
(
f
->f, &
°
) == 0)

2596 
	`sock_°©e_¥öt
(
s
, 
	`unix_√tid_«me
(s->
ty≥
));

2598 
	`sock_addr_¥öt
(
s
->
«me
 ?: "*", " ",

2599 
	`öt_to_°r
(
s
->
Õ‹t
, 
p‹t_«me
), 
NULL
);

2600 
	`sock_addr_¥öt
(
≥î
, " ", 
	`öt_to_°r
(
s
->
Ω‹t
, 
p‹t_«me
),

2601 
NULL
);

2603 i‡(
show_¥oc_˘x
 || 
show_sock_˘x
) {

2604 i‡(
	`föd_íåy
(
s
->
öo
, &
˘x_buf
,

2605 (
show_¥oc_˘x
 & 
show_sock_˘x
) ?

2606 
PROC_SOCK_CTX
 : 
PROC_CTX
) > 0) {

2607 
	`¥ötf
(" u£rs:(%s)", 
˘x_buf
);

2608 
	`‰ì
(
˘x_buf
);

2610 } i‡(
show_u£rs
) {

2611 i‡(
	`föd_íåy
(
s
->
öo
, &
˘x_buf
, 
USERS
) > 0) {

2612 
	`¥ötf
(" u£rs:(%s)", 
˘x_buf
);

2613 
	`‰ì
(
˘x_buf
);

2616 
	`¥ötf
("\n");

2618 
	}
}

2620 
	$unix_show_sock
(c⁄° 
sockaddr_∆
 *
addr
, 
∆msghdr
 *
∆h
,

2621 *
¨g
)

2623 
fûãr
 *
f
 = (fûã∏*)
¨g
;

2624 
unix_düg_msg
 *
r
 = 
	`NLMSG_DATA
(
∆h
);

2625 
π©å
 *
tb
[
UNIX_DIAG_MAX
+1];

2626 
«me
[128];

2627 
sock°©
 
°©
 = { .
«me
 = "*", .
≥î_«me
 = "*" };

2629 
	`∑r£_π©å
(
tb
, 
UNIX_DIAG_MAX
, (
π©å
*)(
r
+1),

2630 
∆h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
r
)));

2632 
°©
.
ty≥
 = 
r
->
udüg_ty≥
;

2633 
°©
.
°©e
 = 
r
->
udüg_°©e
;

2634 
°©
.
öo
 = sèt.
Õ‹t
 = 
r
->
udüg_öo
;

2635 
°©
.
loˇl
.
Ámûy
 = sèt.
ªmŸe
.Ámûy = 
AF_UNIX
;

2637 i‡(
	`unix_ty≥_skù
(&
°©
, 
f
))

2640 i‡(
tb
[
UNIX_DIAG_RQLEN
]) {

2641 
unix_düg_rqÀn
 *
rql
 = 
	`RTA_DATA
(
tb
[
UNIX_DIAG_RQLEN
]);

2642 
°©
.
rq
 = 
rql
->
udüg_rqueue
;

2643 
°©
.
wq
 = 
rql
->
udüg_wqueue
;

2645 i‡(
tb
[
UNIX_DIAG_NAME
]) {

2646 
Àn
 = 
	`RTA_PAYLOAD
(
tb
[
UNIX_DIAG_NAME
]);

2648 
	`mem˝y
(
«me
, 
	`RTA_DATA
(
tb
[
UNIX_DIAG_NAME
]), 
Àn
);

2649 
«me
[
Àn
] = '\0';

2650 i‡(
«me
[0] == '\0')

2651 
«me
[0] = '@';

2652 
°©
.
«me
 = &name[0];

2653 
	`mem˝y
(
°©
.
loˇl
.
d©a
, &°©.
«me
, (stat.name));

2655 i‡(
tb
[
UNIX_DIAG_PEER
])

2656 
°©
.
Ω‹t
 = 
	`πa_gë©å_u32
(
tb
[
UNIX_DIAG_PEER
]);

2658 i‡(
f
->‡&& 
	`run_ssfûãr
(f->f, &
°©
) == 0)

2661 
	`unix_°©s_¥öt
(&
°©
, 
f
);

2663 i‡(
show_mem
) {

2664 
	`¥ötf
("\t");

2665 
	`¥öt_skmemöfo
(
tb
, 
UNIX_DIAG_MEMINFO
);

2667 i‡(
show_dëaûs
) {

2668 i‡(
tb
[
UNIX_DIAG_SHUTDOWN
]) {

2669 
mask
;

2670 
mask
 = *(
__u8
 *)
	`RTA_DATA
(
tb
[
UNIX_DIAG_SHUTDOWN
]);

2671 
	`¥ötf
(" %c-%c", 
mask
 & 1 ? '-' : '<', mask & 2 ? '-' : '>');

2674 i‡(
show_mem
 || 
show_dëaûs
)

2675 
	`¥ötf
("\n");

2678 
	}
}

2680 
	$h™dÀ_√éök_ªque°
(
fûãr
 *
f
, 
∆msghdr
 *
ªq
,

2681 
size_t
 
size
, 
π∆_fûãr_t
 
show_⁄e_sock
)

2683 
ªt
 = -1;

2684 
π∆_h™dÀ
 
πh
;

2686 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 0, 
NETLINK_SOCK_DIAG
))

2689 
πh
.
dump
 = 
MAGIC_SEQ
;

2691 i‡(
	`π∆_£nd
(&
πh
, 
ªq
, 
size
) < 0)

2692 
Exô
;

2694 i‡(
	`π∆_dump_fûãr
(&
πh
, 
show_⁄e_sock
, 
f
))

2695 
Exô
;

2697 
ªt
 = 0;

2698 
Exô
:

2699 
	`π∆_˛o£
(&
πh
);

2700  
ªt
;

2701 
	}
}

2703 
	$unix_show_√éök
(
fûãr
 *
f
)

2705 
	`DIAG_REQUEST
(
ªq
, 
unix_düg_ªq
 
r
);

2707 
ªq
.
r
.
sdüg_Ámûy
 = 
AF_UNIX
;

2708 
ªq
.
r
.
udüg_°©es
 = 
f
->
°©es
;

2709 
ªq
.
r
.
udüg_show
 = 
UDIAG_SHOW_NAME
 | 
UDIAG_SHOW_PEER
 | 
UDIAG_SHOW_RQLEN
;

2710 i‡(
show_mem
)

2711 
ªq
.
r
.
udüg_show
 |
UDIAG_SHOW_MEMINFO
;

2713  
	`h™dÀ_√éök_ªque°
(
f
, &
ªq
.
∆h
, ‘eq), 
unix_show_sock
);

2714 
	}
}

2716 
	$unix_show
(
fûãr
 *
f
)

2718 
FILE
 *
Â
;

2719 
buf
[256];

2720 
«me
[128];

2721 
√wf‹m©
 = 0;

2722 
˙t
;

2723 
sock°©
 *
li°
 = 
NULL
;

2725 i‡(!
	`fûãr_af_gë
(
f
, 
AF_UNIX
))

2728 i‡(!
	`unix_u£_¥oc
(Ë&& 
	`unix_show_√éök
(
f
) == 0)

2731 i‡((
Â
 = 
	`√t_unix_›í
()Ë=
NULL
)

2733 
	`fgës
(
buf
, (buf)-1, 
Â
);

2735 i‡(
	`memcmp
(
buf
, "Peer", 4) == 0)

2736 
√wf‹m©
 = 1;

2737 
˙t
 = 0;

2739 
	`fgës
(
buf
, (buf)-1, 
Â
)) {

2740 
sock°©
 *
u
, **
ö•
;

2741 
Êags
;

2743 i‡(!(
u
 = 
	`ˇŒoc
(1, (*u))))

2745 
u
->
«me
 = 
NULL
;

2746 
u
->
≥î_«me
 = 
NULL
;

2748 i‡(
	`ssˇnf
(
buf
, "%x: %x %x %x %x %x %d %s",

2749 &
u
->
Ω‹t
, &u->
rq
, &u->
wq
, &
Êags
, &u->
ty≥
,

2750 &
u
->
°©e
, &u->
öo
, 
«me
) < 8)

2751 
«me
[0] = 0;

2753 
u
->
Õ‹t
 = u->
öo
;

2754 
u
->
loˇl
.
Ámûy
 = u->
ªmŸe
.Ámûy = 
AF_UNIX
;

2756 i‡(
Êags
 & (1 << 16)) {

2757 
u
->
°©e
 = 
SS_LISTEN
;

2759 
u
->
°©e
 = 
unix_°©e_m≠
[u->state-1];

2760 i‡(
u
->
ty≥
 =
SOCK_DGRAM
 && u->
°©e
 =
SS_CLOSE
 && u->
Ω‹t
)

2761 
u
->
°©e
 = 
SS_ESTABLISHED
;

2764 i‡(!
√wf‹m©
) {

2765 
u
->
Ω‹t
 = 0;

2766 
u
->
rq
 = 0;

2767 
u
->
wq
 = 0;

2770 
ö•
 = &
li°
;

2771 *
ö•
) {

2772 i‡(
u
->
ty≥
 < (*
ö•
)->type ||

2773 (
u
->
ty≥
 =(*
ö•
)->type &&

2774 
u
->
öo
 < (*
ö•
)->ino))

2776 
ö•
 = &(*ö•)->
√xt
;

2778 
u
->
√xt
 = *
ö•
;

2779 *
ö•
 = 
u
;

2781 i‡(
«me
[0]) {

2782 i‡((
u
->
«me
 = 
	`mÆloc
(
	`°æí
“ame)+1)Ë=
NULL
)

2784 
	`°r˝y
(
u
->
«me
,Çame);

2786 i‡(++
˙t
 > 
MAX_UNIX_REMEMBER
) {

2787 
	`unix_°©s_¥öt
(
li°
, 
f
);

2788 
	`unix_li°_‰ì
(
li°
);

2789 
li°
 = 
NULL
;

2790 
˙t
 = 0;

2793 
	`f˛o£
(
Â
);

2794 i‡(
li°
) {

2795 
	`unix_°©s_¥öt
(
li°
, 
f
);

2796 
	`unix_li°_‰ì
(
li°
);

2797 
li°
 = 
NULL
;

2798 
˙t
 = 0;

2802 
	}
}

2804 
	$∑ckë_°©s_¥öt
(
sock°©
 *
s
, c⁄° 
fûãr
 *
f
)

2806 *
buf
 = 
NULL
;

2807 c⁄° *
addr
, *
p‹t
;

2808 
Œ_«me
[16];

2810 i‡(
f
->f) {

2811 
s
->
loˇl
.
Ámûy
 = 
AF_PACKET
;

2812 
s
->
ªmŸe
.
Ámûy
 = 
AF_PACKET
;

2813 
s
->
loˇl
.
d©a
[0] = s->
¥Ÿ
;

2814 i‡(
	`run_ssfûãr
(
f
->f, 
s
) == 0)

2818 
	`sock_°©e_¥öt
(
s
, s->
ty≥
 =
SOCK_RAW
 ? "p_raw" : "p_dgr");

2820 i‡(
s
->
¥Ÿ
 == 3)

2821 
addr
 = "*";

2823 
addr
 = 
	`Œ_¥Ÿo_n2a
(
	`ht⁄s
(
s
->
¥Ÿ
), 
Œ_«me
, (ll_name));

2825 i‡(
s
->
iÁ˚
 == 0)

2826 
p‹t
 = "*";

2828 
p‹t
 = 
	`xŒ_ödex_to_«me
(
s
->
iÁ˚
);

2830 
	`sock_addr_¥öt
(
addr
, ":", 
p‹t
, 
NULL
);

2831 
	`sock_addr_¥öt
("", "*", "", 
NULL
);

2833 i‡(
show_¥oc_˘x
 || 
show_sock_˘x
) {

2834 i‡(
	`föd_íåy
(
s
->
öo
, &
buf
,

2835 (
show_¥oc_˘x
 & 
show_sock_˘x
) ?

2836 
PROC_SOCK_CTX
 : 
PROC_CTX
) > 0) {

2837 
	`¥ötf
(" u£rs:(%s)", 
buf
);

2838 
	`‰ì
(
buf
);

2840 } i‡(
show_u£rs
) {

2841 i‡(
	`föd_íåy
(
s
->
öo
, &
buf
, 
USERS
) > 0) {

2842 
	`¥ötf
(" u£rs:(%s)", 
buf
);

2843 
	`‰ì
(
buf
);

2847 i‡(
show_dëaûs
)

2848 
	`sock_dëaûs_¥öt
(
s
);

2851 
	}
}

2853 
	$∑ckë_show_rög
(
∑ckë_düg_rög
 *
rög
)

2855 
	`¥ötf
("blk_size:%d", 
rög
->
pdr_block_size
);

2856 
	`¥ötf
(",blk_ƒ:%d", 
rög
->
pdr_block_ƒ
);

2857 
	`¥ötf
(",‰m_size:%d", 
rög
->
pdr_‰ame_size
);

2858 
	`¥ötf
(",‰m_ƒ:%d", 
rög
->
pdr_‰ame_ƒ
);

2859 
	`¥ötf
(",tmo:%d", 
rög
->
pdr_ªtúe_tmo
);

2860 
	`¥ötf
(",„©uªs:0x%x", 
rög
->
pdr_„©uªs
);

2861 
	}
}

2863 
	$∑ckë_show_sock
(c⁄° 
sockaddr_∆
 *
addr
,

2864 
∆msghdr
 *
∆h
, *
¨g
)

2866 c⁄° 
fûãr
 *
f
 = 
¨g
;

2867 
∑ckë_düg_msg
 *
r
 = 
	`NLMSG_DATA
(
∆h
);

2868 
∑ckë_düg_öfo
 *
pöfo
 = 
NULL
;

2869 
∑ckë_düg_rög
 *
rög_rx
 = 
NULL
, *
rög_tx
 = NULL;

2870 
π©å
 *
tb
[
PACKET_DIAG_MAX
+1];

2871 
sock°©
 
°©
 = {};

2872 
uöt32_t
 
Ánout
 = 0;

2873 
boﬁ
 
has_Ánout
 = 
Ál£
;

2875 
	`∑r£_π©å
(
tb
, 
PACKET_DIAG_MAX
, (
π©å
*)(
r
+1),

2876 
∆h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
r
)));

2879 i‡(!
tb
[
PACKET_DIAG_MEMINFO
])

2882 
°©
.
ty≥
 = 
r
->
pdüg_ty≥
;

2883 
°©
.
¥Ÿ
 = 
r
->
pdüg_num
;

2884 
°©
.
öo
 = 
r
->
pdüg_öo
;

2885 
°©
.
°©e
 = 
SS_CLOSE
;

2886 
°©
.
sk
 = 
	`cookõ_sk_gë
(&
r
->
pdüg_cookõ
[0]);

2888 i‡(
tb
[
PACKET_DIAG_MEMINFO
]) {

2889 
__u32
 *
skmemöfo
 = 
	`RTA_DATA
(
tb
[
PACKET_DIAG_MEMINFO
]);

2890 
°©
.
rq
 = 
skmemöfo
[
SK_MEMINFO_RMEM_ALLOC
];

2893 i‡(
tb
[
PACKET_DIAG_INFO
]) {

2894 
pöfo
 = 
	`RTA_DATA
(
tb
[
PACKET_DIAG_INFO
]);

2895 
°©
.
Õ‹t
 = sèt.
iÁ˚
 = 
pöfo
->
pdi_ödex
;

2898 i‡(
tb
[
PACKET_DIAG_UID
])

2899 
°©
.
uid
 = *(
__u32
 *)
	`RTA_DATA
(
tb
[
PACKET_DIAG_UID
]);

2901 i‡(
tb
[
PACKET_DIAG_RX_RING
])

2902 
rög_rx
 = 
	`RTA_DATA
(
tb
[
PACKET_DIAG_RX_RING
]);

2904 i‡(
tb
[
PACKET_DIAG_TX_RING
])

2905 
rög_tx
 = 
	`RTA_DATA
(
tb
[
PACKET_DIAG_TX_RING
]);

2907 i‡(
tb
[
PACKET_DIAG_FANOUT
]) {

2908 
has_Ánout
 = 
åue
;

2909 
Ánout
 = *(
uöt32_t
 *)
	`RTA_DATA
(
tb
[
PACKET_DIAG_FANOUT
]);

2912 i‡(
	`∑ckë_°©s_¥öt
(&
°©
, 
f
))

2915 i‡(
show_dëaûs
) {

2916 i‡(
pöfo
) {

2917 
	`¥ötf
("\n\tvî:%d", 
pöfo
->
pdi_vîsi⁄
);

2918 
	`¥ötf
(" cpy_thªsh:%d", 
pöfo
->
pdi_c›y_thªsh
);

2919 
	`¥ötf
(" flags( ");

2920 i‡(
pöfo
->
pdi_Êags
 & 
PDI_RUNNING
)

2921 
	`¥ötf
("running");

2922 i‡(
pöfo
->
pdi_Êags
 & 
PDI_AUXDATA
)

2923 
	`¥ötf
("áuxdata");

2924 i‡(
pöfo
->
pdi_Êags
 & 
PDI_ORIGDEV
)

2925 
	`¥ötf
(" origdev");

2926 i‡(
pöfo
->
pdi_Êags
 & 
PDI_VNETHDR
)

2927 
	`¥ötf
(" vnethdr");

2928 i‡(
pöfo
->
pdi_Êags
 & 
PDI_LOSS
)

2929 
	`¥ötf
("Üoss");

2930 i‡(!
pöfo
->
pdi_Êags
)

2931 
	`¥ötf
("0");

2932 
	`¥ötf
(" )");

2934 i‡(
rög_rx
) {

2935 
	`¥ötf
("\n\tring_rx(");

2936 
	`∑ckë_show_rög
(
rög_rx
);

2937 
	`¥ötf
(")");

2939 i‡(
rög_tx
) {

2940 
	`¥ötf
("\n\tring_tx(");

2941 
	`∑ckë_show_rög
(
rög_tx
);

2942 
	`¥ötf
(")");

2944 i‡(
has_Ánout
) {

2945 
uöt16_t
 
ty≥
 = (
Ánout
 >> 16) & 0xffff;

2947 
	`¥ötf
("\n\tfanout(");

2948 
	`¥ötf
("id:%d,", 
Ánout
 & 0xffff);

2949 
	`¥ötf
("type:");

2951 i‡(
ty≥
 == 0)

2952 
	`¥ötf
("hash");

2953 i‡(
ty≥
 == 1)

2954 
	`¥ötf
("lb");

2955 i‡(
ty≥
 == 2)

2956 
	`¥ötf
("cpu");

2957 i‡(
ty≥
 == 3)

2958 
	`¥ötf
("roll");

2959 i‡(
ty≥
 == 4)

2960 
	`¥ötf
("random");

2961 i‡(
ty≥
 == 5)

2962 
	`¥ötf
("qm");

2964 
	`¥ötf
("0x%x", 
ty≥
);

2966 
	`¥ötf
(")");

2970 i‡(
show_bpf
 && 
tb
[
PACKET_DIAG_FILTER
]) {

2971 
sock_fûãr
 *
fû
 =

2972 
	`RTA_DATA
(
tb
[
PACKET_DIAG_FILTER
]);

2973 
num
 = 
	`RTA_PAYLOAD
(
tb
[
PACKET_DIAG_FILTER
]) /

2974 (
sock_fûãr
);

2976 
	`¥ötf
("\n\tbp‡fûã∏(%d): ", 
num
);

2977 
num
) {

2978 
	`¥ötf
(" 0x%02x %u %u %u,",

2979 
fû
->
code
, fû->
jt
, fû->
jf
, fû->
k
);

2980 
num
--;

2981 
fû
++;

2984 
	`¥ötf
("\n");

2986 
	}
}

2988 
	$∑ckë_show_√éök
(
fûãr
 *
f
)

2990 
	`DIAG_REQUEST
(
ªq
, 
∑ckë_düg_ªq
 
r
);

2992 
ªq
.
r
.
sdüg_Ámûy
 = 
AF_PACKET
;

2993 
ªq
.
r
.
pdüg_show
 = 
PACKET_SHOW_INFO
 | 
PACKET_SHOW_MEMINFO
 |

2994 
PACKET_SHOW_FILTER
 | 
PACKET_SHOW_RING_CFG
 | 
PACKET_SHOW_FANOUT
;

2996  
	`h™dÀ_√éök_ªque°
(
f
, &
ªq
.
∆h
, ‘eq), 
∑ckë_show_sock
);

2997 
	}
}

2999 
	$∑ckë_show_löe
(*
buf
, c⁄° 
fûãr
 *
f
, 
Ám
)

3001 
sk
;

3002 
sock°©
 
°©
 = {};

3003 
ty≥
, 
¥Ÿ
, 
iÁ˚
, 
°©e
, 
rq
, 
uid
, 
öo
;

3005 
	`ssˇnf
(
buf
, "%llx %*d %d %x %d %d %u %u %u",

3006 &
sk
,

3007 &
ty≥
, &
¥Ÿ
, &
iÁ˚
, &
°©e
,

3008 &
rq
, &
uid
, &
öo
);

3010 i‡(
°©
.
ty≥
 =
SOCK_RAW
 && !(
f
->
dbs
&(1<<
PACKET_R_DB
)))

3012 i‡(
°©
.
ty≥
 =
SOCK_DGRAM
 && !(
f
->
dbs
&(1<<
PACKET_DG_DB
)))

3015 
°©
.
ty≥
 =Åype;

3016 
°©
.
¥Ÿ
 =Örot;

3017 
°©
.
Õ‹t
 = sèt.
iÁ˚
 = iface;

3018 
°©
.
°©e
 = state;

3019 
°©
.
rq
 =Ñq;

3020 
°©
.
uid
 = uid;

3021 
°©
.
öo
 = ino;

3022 
°©
.
°©e
 = 
SS_CLOSE
;

3024 i‡(
	`∑ckë_°©s_¥öt
(&
°©
, 
f
))

3027 
	`¥ötf
("\n");

3029 
	}
}

3031 
	$∑ckë_show
(
fûãr
 *
f
)

3033 
FILE
 *
Â
;

3034 
rc
 = 0;

3036 i‡(!
	`fûãr_af_gë
(
f
, 
AF_PACKET
Ë|| !(f->
°©es
 & (1 << 
SS_CLOSE
)))

3039 i‡(!
	`gëív
("PROC_NET_PACKET") && !getenv("PROC_ROOT") &&

3040 
	`∑ckë_show_√éök
(
f
) == 0)

3043 i‡((
Â
 = 
	`√t_∑ckë_›í
()Ë=
NULL
)

3045 i‡(
	`gíîic_ªc‹d_ªad
(
Â
, 
∑ckë_show_löe
, 
f
, 
AF_PACKET
))

3046 
rc
 = -1;

3048 
	`f˛o£
(
Â
);

3049  
rc
;

3050 
	}
}

3052 
	$√éök_show_⁄e
(
fûãr
 *
f
,

3053 
¥Ÿ
, 
pid
, 
groups
,

3054 
°©e
, 
d°_pid
, 
d°_group
,

3055 
rq
, 
wq
,

3056 
sk
, 
cb
)

3058 
sock°©
 
°
;

3059 
	`SPRINT_BUF
(
¥Ÿ_buf
) = {};

3060 c⁄° *
¥Ÿ_«me
;

3061 
¥o˙ame
[64] = {};

3063 
°
.
°©e
 = 
SS_CLOSE
;

3064 
°
.
rq
 =Ñq;

3065 
°
.
wq
 = wq;

3067 i‡(
f
->f) {

3068 
°
.
loˇl
.
Ámûy
 = 
AF_NETLINK
;

3069 
°
.
ªmŸe
.
Ámûy
 = 
AF_NETLINK
;

3070 
°
.
Ω‹t
 = -1;

3071 
°
.
Õ‹t
 = 
pid
;

3072 
°
.
loˇl
.
d©a
[0] = 
¥Ÿ
;

3073 i‡(
	`run_ssfûãr
(
f
->f, &
°
) == 0)

3077 
	`sock_°©e_¥öt
(&
°
, "nl");

3079 i‡(
ªsﬁve_£rvi˚s
)

3080 
¥Ÿ_«me
 = 
	`∆_¥Ÿo_n2a
(
¥Ÿ
, 
¥Ÿ_buf
, (prot_buf));

3082 
¥Ÿ_«me
 = 
	`öt_to_°r
(
¥Ÿ
, 
¥Ÿ_buf
);

3084 i‡(
pid
 == -1) {

3085 
¥o˙ame
[0] = '*';

3086 } i‡(
ªsﬁve_£rvi˚s
) {

3087 
d⁄e
 = 0;

3088 i‡(!
pid
) {

3089 
d⁄e
 = 1;

3090 
	`°∫˝y
(
¥o˙ame
, "kernel", 6);

3091 } i‡(
pid
 > 0) {

3092 
FILE
 *
Â
;

3093 
	`¢¥ötf
(
¥o˙ame
, (procname), "%s/%d/stat",

3094 
	`gëív
("PROC_ROOT"Ë? : "/¥oc", 
pid
);

3095 i‡((
Â
 = 
	`f›í
(
¥o˙ame
, "r")Ë!
NULL
) {

3096 i‡(
	`fsˇnf
(
Â
, "%*d (%[^)])", 
¥o˙ame
) == 1) {

3097 
	`¢¥ötf
(
¥o˙ame
+
	`°æí
(procname),

3098 (
¥o˙ame
)-
	`°æí
(procname),

3099 "/%d", 
pid
);

3100 
d⁄e
 = 1;

3102 
	`f˛o£
(
Â
);

3105 i‡(!
d⁄e
)

3106 
	`öt_to_°r
(
pid
, 
¥o˙ame
);

3108 
	`öt_to_°r
(
pid
, 
¥o˙ame
);

3111 
	`sock_addr_¥öt
(
¥Ÿ_«me
, ":", 
¥o˙ame
, 
NULL
);

3113 i‡(
°©e
 =
NETLINK_CONNECTED
) {

3114 
d°_group_buf
[30];

3115 
d°_pid_buf
[30];

3116 
	`sock_addr_¥öt
(
	`öt_to_°r
(
d°_group
, 
d°_group_buf
), ":",

3117 
	`öt_to_°r
(
d°_pid
, 
d°_pid_buf
), 
NULL
);

3119 
	`sock_addr_¥öt
("", "*", "", 
NULL
);

3122 *
pid_c⁄ãxt
 = 
NULL
;

3123 i‡(
show_¥oc_˘x
) {

3130 i‡(!
pid
)

3131 
	`£curôy_gë_öôül_c⁄ãxt
("kî√l", &
pid_c⁄ãxt
);

3132 i‡(
pid
 > 0)

3133 
	`gëpidc⁄
(
pid
, &
pid_c⁄ãxt
);

3135 i‡(
pid_c⁄ãxt
 !
NULL
) {

3136 
	`¥ötf
("¥oc_˘x=%-*†", 
£rv_width
, 
pid_c⁄ãxt
);

3137 
	`‰ì
(
pid_c⁄ãxt
);

3139 
	`¥ötf
("¥oc_˘x=%-*†", 
£rv_width
, "unavailable");

3143 i‡(
show_dëaûs
) {

3144 
	`¥ötf
(" sk=%Œx cb=%Œx groups=0x%08x", 
sk
, 
cb
, 
groups
);

3146 
	`¥ötf
("\n");

3149 
	}
}

3151 
	$√éök_show_sock
(c⁄° 
sockaddr_∆
 *
addr
,

3152 
∆msghdr
 *
∆h
, *
¨g
)

3154 
fûãr
 *
f
 = (fûã∏*)
¨g
;

3155 
√éök_düg_msg
 *
r
 = 
	`NLMSG_DATA
(
∆h
);

3156 
π©å
 *
tb
[
NETLINK_DIAG_MAX
+1];

3157 
rq
 = 0, 
wq
 = 0;

3158 
groups
 = 0;

3160 
	`∑r£_π©å
(
tb
, 
NETLINK_DIAG_MAX
, (
π©å
*)(
r
+1),

3161 
∆h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
r
)));

3163 i‡(
tb
[
NETLINK_DIAG_GROUPS
] && 
	`RTA_PAYLOAD
(tb[NETLINK_DIAG_GROUPS]))

3164 
groups
 = *(*Ë
	`RTA_DATA
(
tb
[
NETLINK_DIAG_GROUPS
]);

3166 i‡(
tb
[
NETLINK_DIAG_MEMINFO
]) {

3167 c⁄° 
__u32
 *
skmemöfo
;

3168 
skmemöfo
 = 
	`RTA_DATA
(
tb
[
NETLINK_DIAG_MEMINFO
]);

3170 
rq
 = 
skmemöfo
[
SK_MEMINFO_RMEM_ALLOC
];

3171 
wq
 = 
skmemöfo
[
SK_MEMINFO_WMEM_ALLOC
];

3174 i‡(
	`√éök_show_⁄e
(
f
, 
r
->
ndüg_¥Ÿocﬁ
,Ñ->
ndüg_p‹tid
, 
groups
,

3175 
r
->
ndüg_°©e
,Ñ->
ndüg_d°_p‹tid
,Ñ->
ndüg_d°_group
,

3176 
rq
, 
wq
, 0, 0)) {

3180 i‡(
show_mem
) {

3181 
	`¥ötf
("\t");

3182 
	`¥öt_skmemöfo
(
tb
, 
NETLINK_DIAG_MEMINFO
);

3183 
	`¥ötf
("\n");

3187 
	}
}

3189 
	$√éök_show_√éök
(
fûãr
 *
f
)

3191 
	`DIAG_REQUEST
(
ªq
, 
√éök_düg_ªq
 
r
);

3193 
ªq
.
r
.
sdüg_Ámûy
 = 
AF_NETLINK
;

3194 
ªq
.
r
.
sdüg_¥Ÿocﬁ
 = 
NDIAG_PROTO_ALL
;

3195 
ªq
.
r
.
ndüg_show
 = 
NDIAG_SHOW_GROUPS
 | 
NDIAG_SHOW_MEMINFO
;

3197  
	`h™dÀ_√éök_ªque°
(
f
, &
ªq
.
∆h
, ‘eq), 
√éök_show_sock
);

3198 
	}
}

3200 
	$√éök_show
(
fûãr
 *
f
)

3202 
FILE
 *
Â
;

3203 
buf
[256];

3204 
¥Ÿ
, 
pid
;

3205 
groups
;

3206 
rq
, 
wq
, 
rc
;

3207 
sk
, 
cb
;

3209 i‡(!
	`fûãr_af_gë
(
f
, 
AF_NETLINK
Ë|| !(f->
°©es
 & (1 << 
SS_CLOSE
)))

3212 i‡(!
	`gëív
("PROC_NET_NETLINK") && !getenv("PROC_ROOT") &&

3213 
	`√éök_show_√éök
(
f
) == 0)

3216 i‡((
Â
 = 
	`√t_√éök_›í
()Ë=
NULL
)

3218 
	`fgës
(
buf
, (buf)-1, 
Â
);

3220 
	`fgës
(
buf
, (buf)-1, 
Â
)) {

3221 
	`ssˇnf
(
buf
, "%llx %d %d %x %d %d %llx %d",

3222 &
sk
,

3223 &
¥Ÿ
, &
pid
, &
groups
, &
rq
, &
wq
, &
cb
, &
rc
);

3225 
	`√éök_show_⁄e
(
f
, 
¥Ÿ
, 
pid
, 
groups
, 0, 0, 0, 
rq
, 
wq
, 
sk
, 
cb
);

3228 
	`f˛o£
(
Â
);

3230 
	}
}

3232 
	ssock_düg_msg
 {

3233 
__u8
 
	msdüg_Ámûy
;

3236 
	$gíîic_show_sock
(c⁄° 
sockaddr_∆
 *
addr
,

3237 
∆msghdr
 *
∆h
, *
¨g
)

3239 
sock_düg_msg
 *
r
 = 
	`NLMSG_DATA
(
∆h
);

3240 
öë_düg_¨g
 
öë_¨g
 = { .
f
 = 
¨g
, .
¥Ÿocﬁ
 = 
IPPROTO_MAX
 };

3242 
r
->
sdüg_Ámûy
) {

3243 
AF_INET
:

3244 
AF_INET6
:

3245  
	`show_⁄e_öë_sock
(
addr
, 
∆h
, &
öë_¨g
);

3246 
AF_UNIX
:

3247  
	`unix_show_sock
(
addr
, 
∆h
, 
¨g
);

3248 
AF_PACKET
:

3249  
	`∑ckë_show_sock
(
addr
, 
∆h
, 
¨g
);

3250 
AF_NETLINK
:

3251  
	`√éök_show_sock
(
addr
, 
∆h
, 
¨g
);

3255 
	}
}

3257 
	$h™dÀ_fﬁlow_ªque°
(
fûãr
 *
f
)

3259 
ªt
 = -1;

3260 
groups
 = 0;

3261 
π∆_h™dÀ
 
πh
;

3263 i‡(
f
->
Ámûõs
 & (1 << 
AF_INET
Ë&& f->
dbs
 & (1 << 
TCP_DB
))

3264 
groups
 |1 << (
SKNLGRP_INET_TCP_DESTROY
 - 1);

3265 i‡(
f
->
Ámûõs
 & (1 << 
AF_INET
Ë&& f->
dbs
 & (1 << 
UDP_DB
))

3266 
groups
 |1 << (
SKNLGRP_INET_UDP_DESTROY
 - 1);

3267 i‡(
f
->
Ámûõs
 & (1 << 
AF_INET6
Ë&& f->
dbs
 & (1 << 
TCP_DB
))

3268 
groups
 |1 << (
SKNLGRP_INET6_TCP_DESTROY
 - 1);

3269 i‡(
f
->
Ámûõs
 & (1 << 
AF_INET6
Ë&& f->
dbs
 & (1 << 
UDP_DB
))

3270 
groups
 |1 << (
SKNLGRP_INET6_UDP_DESTROY
 - 1);

3272 i‡(
groups
 == 0)

3275 i‡(
	`π∆_›í_by¥Ÿo
(&
πh
, 
groups
, 
NETLINK_SOCK_DIAG
))

3278 
πh
.
dump
 = 0;

3279 
πh
.
loˇl
.
∆_pid
 = 0;

3281 i‡(
	`π∆_dump_fûãr
(&
πh
, 
gíîic_show_sock
, 
f
))

3282 
Exô
;

3284 
ªt
 = 0;

3285 
Exô
:

3286 
	`π∆_˛o£
(&
πh
);

3287  
ªt
;

3288 
	}
}

3290 
	s¢mp°©


3292 
	mt˝_e°ab
;

3295 
	$gë_¢mp_öt
(*
¥Ÿo
, *
key
, *
ªsu…
)

3297 
buf
[1024];

3298 
FILE
 *
Â
;

3299 
¥Ÿﬁí
 = 
	`°æí
(
¥Ÿo
);

3300 
keyÀn
 = 
	`°æí
(
key
);

3302 *
ªsu…
 = 0;

3304 i‡((
Â
 = 
	`√t_¢mp_›í
()Ë=
NULL
)

3307 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

3308 *
p
 = 
buf
;

3309 
pos
 = 0;

3310 i‡(
	`memcmp
(
buf
, 
¥Ÿo
, 
¥Ÿﬁí
))

3312 (
p
 = 
	`°rchr
’, ' ')Ë!
NULL
) {

3313 
pos
++;

3314 
p
++;

3315 i‡(
	`memcmp
(
p
, 
key
, 
keyÀn
) == 0 &&

3316 (
p
[
keyÀn
] == ' ' ||Ö[keylen] == '\n'))

3319 i‡(
	`fgës
(
buf
, (buf), 
Â
Ë=
NULL
)

3321 i‡(
	`memcmp
(
buf
, 
¥Ÿo
, 
¥Ÿﬁí
))

3323 
p
 = 
buf
;

3324 (
p
 = 
	`°rchr
’, ' ')Ë!
NULL
) {

3325 
p
++;

3326 i‡(--
pos
 == 0) {

3327 
	`ssˇnf
(
p
, "%d", 
ªsu…
);

3328 
	`f˛o£
(
Â
);

3334 
	`f˛o£
(
Â
);

3335 
î∫o
 = 
ESRCH
;

3337 
	}
}

3342 
	sssumm¨y


3344 
	msocks
;

3345 
	mt˝_mem
;

3346 
	mt˝_tŸÆ
;

3347 
	mt˝_‹ph™s
;

3348 
	mt˝_tws
;

3349 
	mt˝4_hashed
;

3350 
	mudp4
;

3351 
	møw4
;

3352 
	m‰ag4
;

3353 
	m‰ag4_mem
;

3354 
	mt˝6_hashed
;

3355 
	mudp6
;

3356 
	møw6
;

3357 
	m‰ag6
;

3358 
	m‰ag6_mem
;

3361 
	$gë_sock°©_löe
(*
löe
, 
ssumm¨y
 *
s
)

3363 
id
[256], 
ªm
[256];

3365 i‡(
	`ssˇnf
(
löe
, "%[^ ] %[^\n]\n", 
id
, 
ªm
) != 2)

3368 i‡(
	`°rcmp
(
id
, "sockets:") == 0)

3369 
	`ssˇnf
(
ªm
, "%*s%d", &
s
->
socks
);

3370 i‡(
	`°rcmp
(
id
, "UDP:") == 0)

3371 
	`ssˇnf
(
ªm
, "%*s%d", &
s
->
udp4
);

3372 i‡(
	`°rcmp
(
id
, "UDP6:") == 0)

3373 
	`ssˇnf
(
ªm
, "%*s%d", &
s
->
udp6
);

3374 i‡(
	`°rcmp
(
id
, "RAW:") == 0)

3375 
	`ssˇnf
(
ªm
, "%*s%d", &
s
->
øw4
);

3376 i‡(
	`°rcmp
(
id
, "RAW6:") == 0)

3377 
	`ssˇnf
(
ªm
, "%*s%d", &
s
->
øw6
);

3378 i‡(
	`°rcmp
(
id
, "TCP6:") == 0)

3379 
	`ssˇnf
(
ªm
, "%*s%d", &
s
->
t˝6_hashed
);

3380 i‡(
	`°rcmp
(
id
, "FRAG:") == 0)

3381 
	`ssˇnf
(
ªm
, "%*s%d%*s%d", &
s
->
‰ag4
, &s->
‰ag4_mem
);

3382 i‡(
	`°rcmp
(
id
, "FRAG6:") == 0)

3383 
	`ssˇnf
(
ªm
, "%*s%d%*s%d", &
s
->
‰ag6
, &s->
‰ag6_mem
);

3384 i‡(
	`°rcmp
(
id
, "TCP:") == 0)

3385 
	`ssˇnf
(
ªm
, "%*s%d%*s%d%*s%d%*s%d%*s%d",

3386 &
s
->
t˝4_hashed
,

3387 &
s
->
t˝_‹ph™s
, &s->
t˝_tws
, &s->
t˝_tŸÆ
, &s->
t˝_mem
);

3388 
	}
}

3390 
	$gë_sock°©
(
ssumm¨y
 *
s
)

3392 
buf
[256];

3393 
FILE
 *
Â
;

3395 
	`mem£t
(
s
, 0, (*s));

3397 i‡((
Â
 = 
	`√t_sock°©_›í
()Ë=
NULL
)

3399 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
)

3400 
	`gë_sock°©_löe
(
buf
, 
s
);

3401 
	`f˛o£
(
Â
);

3403 i‡((
Â
 = 
	`√t_sock°©6_›í
()Ë=
NULL
)

3405 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
)

3406 
	`gë_sock°©_löe
(
buf
, 
s
);

3407 
	`f˛o£
(
Â
);

3410 
	}
}

3412 
	$¥öt_summ¨y
()

3414 
ssumm¨y
 
s
;

3415 
¢mp°©
 
¢
;

3417 i‡(
	`gë_sock°©
(&
s
) < 0)

3418 
	`≥º‹
("ss: get_sockstat");

3419 i‡(
	`gë_¢mp_öt
("T˝:", "CuºE°ab", &
¢
.
t˝_e°ab
) < 0)

3420 
	`≥º‹
("ss: get_snmpstat");

3422 
	`gë_¶ab°©
(&
¶ab°©
);

3424 
	`¥ötf
("TŸÆ: %d (kî√»%d)\n", 
s
.
socks
, 
¶ab°©
.socks);

3426 
	`¥ötf
("TCP: %d (estab %d, closed %d, orphaned %d, synrecv %d,Åimewait %d/%d),Öorts %d\n",

3427 
s
.
t˝_tŸÆ
 + 
¶ab°©
.
t˝_syns
 + s.
t˝_tws
,

3428 
¢
.
t˝_e°ab
,

3429 
s
.
t˝_tŸÆ
 - (s.
t˝4_hashed
+s.
t˝6_hashed
-s.
t˝_tws
),

3430 
s
.
t˝_‹ph™s
,

3431 
¶ab°©
.
t˝_syns
,

3432 
s
.
t˝_tws
, 
¶ab°©
.tcp_tws,

3433 
¶ab°©
.
t˝_p‹ts


3436 
	`¥ötf
("\n");

3437 
	`¥ötf
("Transport Total IP IPv6\n");

3438 
	`¥ötf
("* %-9d %-9†%-9s\n", 
¶ab°©
.
socks
, "-", "-");

3439 
	`¥ötf
("RAW %-9d %-9d %-9d\n", 
s
.
øw4
+s.
øw6
, s.raw4, s.raw6);

3440 
	`¥ötf
("UDP %-9d %-9d %-9d\n", 
s
.
udp4
+s.
udp6
, s.udp4, s.udp6);

3441 
	`¥ötf
("TCP %-9d %-9d %-9d\n", 
s
.
t˝4_hashed
+s.
t˝6_hashed
, s.tcp4_hashed, s.tcp6_hashed);

3442 
	`¥ötf
("INET %-9d %-9d %-9d\n",

3443 
s
.
øw4
+s.
udp4
+s.
t˝4_hashed
+

3444 
s
.
øw6
+s.
udp6
+s.
t˝6_hashed
,

3445 
s
.
øw4
+s.
udp4
+s.
t˝4_hashed
,

3446 
s
.
øw6
+s.
udp6
+s.
t˝6_hashed
);

3447 
	`¥ötf
("FRAG %-9d %-9d %-9d\n", 
s
.
‰ag4
+s.
‰ag6
, s.frag4, s.frag6);

3449 
	`¥ötf
("\n");

3452 
	}
}

3454 
	$_ußge
(
FILE
 *
de°
)

3456 
	`Ârötf
(
de°
,

3500 
	}
}

3502 
	$hñp
(Ë
	`__©åibuã__
((
n‹ëu∫
));

3503 
	$hñp
()

3505 
	`_ußge
(
°dout
);

3506 
	`exô
(0);

3507 
	}
}

3509 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

3510 
	$ußge
()

3512 
	`_ußge
(
°dîr
);

3513 
	`exô
(-1);

3514 
	}
}

3517 
	$sˇn_°©e
(c⁄° *
°©e
)

3519 
i
;

3520 i‡(
	`°rˇ£cmp
(
°©e
, "close") == 0 ||

3521 
	`°rˇ£cmp
(
°©e
, "closed") == 0)

3522  (1<<
SS_CLOSE
);

3523 i‡(
	`°rˇ£cmp
(
°©e
, "syn-rcv") == 0)

3524  (1<<
SS_SYN_RECV
);

3525 i‡(
	`°rˇ£cmp
(
°©e
, "established") == 0)

3526  (1<<
SS_ESTABLISHED
);

3527 i‡(
	`°rˇ£cmp
(
°©e
, "all") == 0)

3528  
SS_ALL
;

3529 i‡(
	`°rˇ£cmp
(
°©e
, "connected") == 0)

3530  
SS_ALL
 & ~((1<<
SS_CLOSE
)|(1<<
SS_LISTEN
));

3531 i‡(
	`°rˇ£cmp
(
°©e
, "synchronized") == 0)

3532  
SS_ALL
 & ~((1<<
SS_CLOSE
)|(1<<
SS_LISTEN
)|(1<<
SS_SYN_SENT
));

3533 i‡(
	`°rˇ£cmp
(
°©e
, "bucket") == 0)

3534  (1<<
SS_SYN_RECV
)|(1<<
SS_TIME_WAIT
);

3535 i‡(
	`°rˇ£cmp
(
°©e
, "big") == 0)

3536  
SS_ALL
 & ~((1<<
SS_SYN_RECV
)|(1<<
SS_TIME_WAIT
));

3537 
i
=0; i<
SS_MAX
; i++) {

3538 i‡(
	`°rˇ£cmp
(
°©e
, 
s°©e_«mñ
[
i
]) == 0)

3539  (1<<
i
);

3542 
	`Ârötf
(
°dîr
, "ss: wr⁄g sèãÇame: %s\n", 
°©e
);

3543 
	`exô
(-1);

3544 
	}
}

3546 c⁄° 
›ti⁄
 
	gl⁄g_›ts
[] = {

3581 
	$maö
(
¨gc
, *
¨gv
[])

3583 
ßw_°©es
 = 0;

3584 
ßw_quîy
 = 0;

3585 
do_summ¨y
 = 0;

3586 c⁄° *
dump_t˝düg
 = 
NULL
;

3587 
FILE
 *
fûãr_Â
 = 
NULL
;

3588 
ch
;

3589 
°©e_fûãr
 = 0;

3591 (
ch
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "dhaletuwxnro460spbEf:miA:D:F:vVzZN:",

3592 
l⁄g_›ts
, 
NULL
)Ë!
EOF
) {

3593 
ch
) {

3595 
ªsﬁve_£rvi˚s
 = 0;

3598 
ªsﬁve_ho°s
 = 1;

3601 
show_›ti⁄s
 = 1;

3604 
show_›ti⁄s
 = 1;

3605 
show_dëaûs
++;

3608 
show_mem
 = 1;

3611 
show_t˝öfo
 = 1;

3614 
show_u£rs
++;

3615 
	`u£r_ít_hash_buûd
();

3618 
show_›ti⁄s
 = 1;

3619 
show_bpf
++;

3622 
fﬁlow_evíts
 = 1;

3625 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
DCCP_DB
);

3628 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
TCP_DB
);

3631 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
UDP_DB
);

3634 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
RAW_DB
);

3637 
	`fûãr_af_£t
(&
cuºít_fûãr
, 
AF_UNIX
);

3640 
°©e_fûãr
 = 
SS_ALL
;

3643 
°©e_fûãr
 = (1 << 
SS_LISTEN
Ë| (1 << 
SS_CLOSE
);

3646 
	`fûãr_af_£t
(&
cuºít_fûãr
, 
AF_INET
);

3649 
	`fûãr_af_£t
(&
cuºít_fûãr
, 
AF_INET6
);

3652 
	`fûãr_af_£t
(&
cuºít_fûãr
, 
AF_PACKET
);

3655 i‡(
	`°rcmp
(
›èrg
, "inet") == 0)

3656 
	`fûãr_af_£t
(&
cuºít_fûãr
, 
AF_INET
);

3657 i‡(
	`°rcmp
(
›èrg
, "inet6") == 0)

3658 
	`fûãr_af_£t
(&
cuºít_fûãr
, 
AF_INET6
);

3659 i‡(
	`°rcmp
(
›èrg
, "link") == 0)

3660 
	`fûãr_af_£t
(&
cuºít_fûãr
, 
AF_PACKET
);

3661 i‡(
	`°rcmp
(
›èrg
, "unix") == 0)

3662 
	`fûãr_af_£t
(&
cuºít_fûãr
, 
AF_UNIX
);

3663 i‡(
	`°rcmp
(
›èrg
, "netlink") == 0)

3664 
	`fûãr_af_£t
(&
cuºít_fûãr
, 
AF_NETLINK
);

3665 i‡(
	`°rcmp
(
›èrg
, "help") == 0)

3666 
	`hñp
();

3668 
	`Ârötf
(
°dîr
, "ss: \"%s\" is invalid family\n",

3669 
›èrg
);

3670 
	`ußge
();

3675 *
p
, *
p1
;

3676 i‡(!
ßw_quîy
) {

3677 
cuºít_fûãr
.
dbs
 = 0;

3678 
°©e_fûãr
 = state_filter ?

3679 
°©e_fûãr
 : 
SS_CONN
;

3680 
ßw_quîy
 = 1;

3681 
do_deÁu…
 = 0;

3683 
p
 = 
p1
 = 
›èrg
;

3685 i‡((
p1
 = 
	`°rchr
(
p
, ',')Ë!
NULL
)

3686 *
p1
 = 0;

3687 i‡(
	`°rcmp
(
p
, "all") == 0) {

3688 
	`fûãr_deÁu…_dbs
(&
cuºít_fûãr
);

3689 } i‡(
	`°rcmp
(
p
, "inet") == 0) {

3690 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
UDP_DB
);

3691 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
DCCP_DB
);

3692 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
TCP_DB
);

3693 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
RAW_DB
);

3694 } i‡(
	`°rcmp
(
p
, "udp") == 0) {

3695 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
UDP_DB
);

3696 } i‡(
	`°rcmp
(
p
, "dccp") == 0) {

3697 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
DCCP_DB
);

3698 } i‡(
	`°rcmp
(
p
, "tcp") == 0) {

3699 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
TCP_DB
);

3700 } i‡(
	`°rcmp
(
p
, "raw") == 0) {

3701 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
RAW_DB
);

3702 } i‡(
	`°rcmp
(
p
, "unix") == 0) {

3703 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
UNIX_ST_DB
);

3704 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
UNIX_DG_DB
);

3705 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
UNIX_SQ_DB
);

3706 } i‡(
	`°rˇ£cmp
(
p
, "unix_stream") == 0 ||

3707 
	`°rcmp
(
p
, "u_str") == 0) {

3708 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
UNIX_ST_DB
);

3709 } i‡(
	`°rˇ£cmp
(
p
, "unix_dgram") == 0 ||

3710 
	`°rcmp
(
p
, "u_dgr") == 0) {

3711 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
UNIX_DG_DB
);

3712 } i‡(
	`°rˇ£cmp
(
p
, "unix_seqpacket") == 0 ||

3713 
	`°rcmp
(
p
, "u_seq") == 0) {

3714 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
UNIX_SQ_DB
);

3715 } i‡(
	`°rcmp
(
p
, "packet") == 0) {

3716 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
PACKET_R_DB
);

3717 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
PACKET_DG_DB
);

3718 } i‡(
	`°rcmp
(
p
, "packet_raw") == 0 ||

3719 
	`°rcmp
(
p
, "p_raw") == 0) {

3720 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
PACKET_R_DB
);

3721 } i‡(
	`°rcmp
(
p
, "packet_dgram") == 0 ||

3722 
	`°rcmp
(
p
, "p_dgr") == 0) {

3723 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
PACKET_DG_DB
);

3724 } i‡(
	`°rcmp
(
p
, "netlink") == 0) {

3725 
	`fûãr_db_£t
(&
cuºít_fûãr
, 
NETLINK_DB
);

3727 
	`Ârötf
(
°dîr
, "ss: \"%s\" i†ûÀgÆ sockëÅabÀ id\n", 
p
);

3728 
	`ußge
();

3730 
p
 = 
p1
 + 1;

3731 } 
p1
);

3735 
do_summ¨y
 = 1;

3738 
dump_t˝düg
 = 
›èrg
;

3741 i‡(
fûãr_Â
) {

3742 
	`Ârötf
(
°dîr
, "MoreÅhan one filter file\n");

3743 
	`exô
(-1);

3745 i‡(
›èrg
[0] == '-')

3746 
fûãr_Â
 = 
°dö
;

3748 
fûãr_Â
 = 
	`f›í
(
›èrg
, "r");

3749 i‡(!
fûãr_Â
) {

3750 
	`≥º‹
("fopen filter file");

3751 
	`exô
(-1);

3756 
	`¥ötf
("s†utûôy, i¥ouã2-ss%s\n", 
SNAPSHOT
);

3757 
	`exô
(0);

3759 
show_sock_˘x
++;

3761 i‡(
	`is_£löux_íabÀd
() <= 0) {

3762 
	`Ârötf
(
°dîr
, "ss: SELinux isÇotÉnabled.\n");

3763 
	`exô
(1);

3765 
show_¥oc_˘x
++;

3766 
	`u£r_ít_hash_buûd
();

3769 i‡(
	`√äs_swôch
(
›èrg
))

3770 
	`exô
(1);

3773 
	`hñp
();

3776 
	`ußge
();

3780 
¨gc
 -
›töd
;

3781 
¨gv
 +
›töd
;

3783 i‡(
do_summ¨y
) {

3784 
	`¥öt_summ¨y
();

3785 i‡(
do_deÁu…
 && 
¨gc
 == 0)

3786 
	`exô
(0);

3789 
¨gc
 > 0) {

3790 i‡(
	`°rcmp
(*
¨gv
, "state") == 0) {

3791 
	`NEXT_ARG
();

3792 i‡(!
ßw_°©es
)

3793 
°©e_fûãr
 = 0;

3794 
°©e_fûãr
 |
	`sˇn_°©e
(*
¨gv
);

3795 
ßw_°©es
 = 1;

3796 } i‡(
	`°rcmp
(*
¨gv
, "exclude") == 0 ||

3797 
	`°rcmp
(*
¨gv
, "excl") == 0) {

3798 
	`NEXT_ARG
();

3799 i‡(!
ßw_°©es
)

3800 
°©e_fûãr
 = 
SS_ALL
;

3801 
°©e_fûãr
 &~
	`sˇn_°©e
(*
¨gv
);

3802 
ßw_°©es
 = 1;

3806 
¨gc
--; 
¨gv
++;

3809 i‡(
do_deÁu…
) {

3810 
°©e_fûãr
 = sèã_fûã∏? sèã_fûã∏: 
SS_CONN
;

3811 
	`fûãr_deÁu…_dbs
(&
cuºít_fûãr
);

3814 
	`fûãr_°©es_£t
(&
cuºít_fûãr
, 
°©e_fûãr
);

3815 
	`fûãr_mîge_deÁu…s
(&
cuºít_fûãr
);

3817 i‡(
ªsﬁve_£rvi˚s
 && 
ªsﬁve_ho°s
 &&

3818 (
cuºít_fûãr
.
dbs
&(
UNIX_DBM
|(1<<
TCP_DB
)|(1<<
UDP_DB
)|(1<<
DCCP_DB
))))

3819 
	`öô_£rvi˚_ªsﬁvî
();

3822 i‡(
cuºít_fûãr
.
dbs
 == 0) {

3823 
	`Ârötf
(
°dîr
, "ss:Ço socketÅablesÅo show with such filter.\n");

3824 
	`exô
(0);

3826 i‡(
cuºít_fûãr
.
Ámûõs
 == 0) {

3827 
	`Ârötf
(
°dîr
, "ss:Ço familiesÅo show with such filter.\n");

3828 
	`exô
(0);

3830 i‡(
cuºít_fûãr
.
°©es
 == 0) {

3831 
	`Ârötf
(
°dîr
, "ss:Ço socket statesÅo show with such filter.\n");

3832 
	`exô
(0);

3835 i‡(
dump_t˝düg
) {

3836 
FILE
 *
dump_Â
 = 
°dout
;

3837 i‡(!(
cuºít_fûãr
.
dbs
 & (1<<
TCP_DB
))) {

3838 
	`Ârötf
(
°dîr
, "ss:Åcpdiag dumpÑequestedándÇoÅcp in filter.\n");

3839 
	`exô
(0);

3841 i‡(
dump_t˝düg
[0] != '-') {

3842 
dump_Â
 = 
	`f›í
(
dump_t˝düg
, "w");

3843 i‡(!
dump_t˝düg
) {

3844 
	`≥º‹
("fopen dump file");

3845 
	`exô
(-1);

3848 
	`öë_show_√éök
(&
cuºít_fûãr
, 
dump_Â
, 
IPPROTO_TCP
);

3849 
	`fÊush
(
dump_Â
);

3850 
	`exô
(0);

3853 i‡(
	`ssfûãr_∑r£
(&
cuºít_fûãr
.
f
, 
¨gc
, 
¨gv
, 
fûãr_Â
))

3854 
	`ußge
();

3856 
√tid_width
 = 0;

3857 i‡(
cuºít_fûãr
.
dbs
&(current_filter.dbs-1))

3858 
√tid_width
 = 5;

3860 
°©e_width
 = 0;

3861 i‡(
cuºít_fûãr
.
°©es
&(current_filter.states-1))

3862 
°©e_width
 = 10;

3864 
s¸ìn_width
 = 80;

3865 i‡(
	`ißây
(
STDOUT_FILENO
)) {

3866 
wösize
 
w
;

3868 i‡(
	`io˘l
(
STDOUT_FILENO
, 
TIOCGWINSZ
, &
w
) != -1) {

3869 i‡(
w
.
ws_cﬁ
 > 0)

3870 
s¸ìn_width
 = 
w
.
ws_cﬁ
;

3874 
addΩ_width
 = 
s¸ìn_width
;

3875 
addΩ_width
 -
√tid_width
+1;

3876 
addΩ_width
 -
°©e_width
+1;

3877 
addΩ_width
 -= 14;

3879 i‡(
addΩ_width
&1) {

3880 i‡(
√tid_width
)

3881 
√tid_width
++;

3882 i‡(
°©e_width
)

3883 
°©e_width
++;

3886 
addΩ_width
 /= 2;

3887 
addΩ_width
--;

3889 
£rv_width
 = 
ªsﬁve_£rvi˚s
 ? 7 : 5;

3891 i‡(
addΩ_width
 < 15+
£rv_width
+1)

3892 
addΩ_width
 = 15+
£rv_width
+1;

3894 
addr_width
 = 
addΩ_width
 - 
£rv_width
 - 1;

3896 i‡(
√tid_width
)

3897 
	`¥ötf
("%-*†", 
√tid_width
, "Netid");

3898 i‡(
°©e_width
)

3899 
	`¥ötf
("%-*†", 
°©e_width
, "State");

3900 
	`¥ötf
("%-6s %-6s ", "Recv-Q", "Send-Q");

3903 
addr_width
 -= 13;

3904 
£rv_width
 += 13;

3906 
	`¥ötf
("%*s:%-*s %*s:%-*s\n",

3907 
addr_width
, "Loˇ»Addªss", 
£rv_width
, "Port",

3908 
addr_width
, "Pì∏Addªss", 
£rv_width
, "Port");

3910 
	`fÊush
(
°dout
);

3912 i‡(
fﬁlow_evíts
)

3913 
	`exô
(
	`h™dÀ_fﬁlow_ªque°
(&
cuºít_fûãr
));

3915 i‡(
cuºít_fûãr
.
dbs
 & (1<<
NETLINK_DB
))

3916 
	`√éök_show
(&
cuºít_fûãr
);

3917 i‡(
cuºít_fûãr
.
dbs
 & 
PACKET_DBM
)

3918 
	`∑ckë_show
(&
cuºít_fûãr
);

3919 i‡(
cuºít_fûãr
.
dbs
 & 
UNIX_DBM
)

3920 
	`unix_show
(&
cuºít_fûãr
);

3921 i‡(
cuºít_fûãr
.
dbs
 & (1<<
RAW_DB
))

3922 
	`øw_show
(&
cuºít_fûãr
);

3923 i‡(
cuºít_fûãr
.
dbs
 & (1<<
UDP_DB
))

3924 
	`udp_show
(&
cuºít_fûãr
);

3925 i‡(
cuºít_fûãr
.
dbs
 & (1<<
TCP_DB
))

3926 
	`t˝_show
(&
cuºít_fûãr
, 
IPPROTO_TCP
);

3927 i‡(
cuºít_fûãr
.
dbs
 & (1<<
DCCP_DB
))

3928 
	`t˝_show
(&
cuºít_fûãr
, 
IPPROTO_DCCP
);

3930 i‡(
show_u£rs
 || 
show_¥oc_˘x
 || 
show_sock_˘x
)

3931 
	`u£r_ít_de°roy
();

3934 
	}
}

	@misc/ssfilter.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "3.0.2"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 0

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

68 
	~<°dio.h
>

69 
	~<°dlib.h
>

70 
	~<mÆloc.h
>

71 
	~<°rög.h
>

72 
	~"ssfûãr.h
"

74 
ssfûãr
 * 
	tssfûãr_t
;

76 
	#YYSTYPE
 
ssfûãr_t


	)

78 
ssfûãr
 * 
	$Æloc_node
(
ty≥
, *
¥ed
)

80 
ssfûãr
 *
n
 = 
	`mÆloc
((*n));

81 i‡(
n
 =
NULL
)

82 
	`ab‹t
();

83 
n
->
ty≥
 =Åype;

84 
n
->
¥ed
 =Öred;

85 
n
->
po°
 = 
NULL
;

86  
n
;

87 
	}
}

89 **
	gyy_¨gv
;

90 
	gyy_¨gc
;

91 
FILE
 *
	gyy_Â
;

92 
ssfûãr_t
 *
	gyy_ªt
;

93 
	gtok_ty≥
 = -1;

95 
yyÀx
();

97 
	$yyîr‹
(*
s
)

99 
	`Ârötf
(
°dîr
, "ss: bis⁄ bñlow†(whûê∑rsög fûãr): \"%s!\"", 
s
);

100 
	}
}

105 #i‚de‡
YY_NULLPTR


106 #i‡
deföed
 
__˝lu•lus
 && 201103L <= __cplusplus

107 
	#YY_NULLPTR
 
nuŒ±r


	)

109 
	#YY_NULLPTR
 0

	)

114 #ifde‡
YYERROR_VERBOSE


115 #unde‡
YYERROR_VERBOSE


116 
	#YYERROR_VERBOSE
 1

	)

118 
	#YYERROR_VERBOSE
 0

	)

123 #i‚de‡
YYDEBUG


124 
	#YYDEBUG
 0

	)

126 #i‡
YYDEBUG


127 
yydebug
;

131 #i‚de‡
YYTOKENTYPE


132 
	#YYTOKENTYPE


	)

133 
	eyytokíty≥


135 
	mHOSTCOND
 = 258,

136 
	mDCOND
 = 259,

137 
	mSCOND
 = 260,

138 
	mDPORT
 = 261,

139 
	mSPORT
 = 262,

140 
	mLEQ
 = 263,

141 
	mGEQ
 = 264,

142 
	mNEQ
 = 265,

143 
	mAUTOBOUND
 = 266

148 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


149 
	tYYSTYPE
;

150 
	#YYSTYPE_IS_TRIVIAL
 1

	)

151 
	#YYSTYPE_IS_DECLARED
 1

	)

155 
YYSTYPE
 
yylvÆ
;

157 
yy∑r£
 ();

169 #ifde‡
YYTYPE_UINT8


170 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

172 
	tyyty≥_uöt8
;

175 #ifde‡
YYTYPE_INT8


176 
YYTYPE_INT8
 
	tyyty≥_öt8
;

178 sig√d 
	tyyty≥_öt8
;

181 #ifde‡
YYTYPE_UINT16


182 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

184 
	tyyty≥_uöt16
;

187 #ifde‡
YYTYPE_INT16


188 
YYTYPE_INT16
 
	tyyty≥_öt16
;

190 
	tyyty≥_öt16
;

193 #i‚de‡
YYSIZE_T


194 #ifde‡
__SIZE_TYPE__


195 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

196 #ñi‡
deföed
 
size_t


197 
	#YYSIZE_T
 
size_t


	)

198 #ñi‡! 
deföed
 
YYSIZE_T


199 
	~<°ddef.h
>

200 
	#YYSIZE_T
 
size_t


	)

202 
	#YYSIZE_T
 

	)

206 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

208 #i‚de‡
YY_


209 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

210 #i‡
ENABLE_NLS


211 
	~<liböé.h
>

212 
	#YY_
(
Msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", Msgid)

	)

215 #i‚de‡
YY_


216 
	#YY_
(
Msgid
Ë
	)
Msgid

220 #i‚de‡
YY_ATTRIBUTE


221 #i‡(
deföed
 
__GNUC__
 \

222 && (2 < 
	g__GNUC__
 || (__GNUC__ =2 && 96 <
__GNUC_MINOR__
))) \

223 || 
deföed
 
__SUNPRO_C
 && 0x5110 <= __SUNPRO_C

224 
	#YY_ATTRIBUTE
(
S≥c
Ë
	`__©åibuã__
(S≥c)

	)

226 
	#YY_ATTRIBUTE
(
S≥c
Ë

	)

230 #i‚de‡
YY_ATTRIBUTE_PURE


231 
	#YY_ATTRIBUTE_PURE
 
	`YY_ATTRIBUTE
 ((
__puª__
))

	)

234 #i‚de‡
YY_ATTRIBUTE_UNUSED


235 
	#YY_ATTRIBUTE_UNUSED
 
	`YY_ATTRIBUTE
 ((
__unu£d__
))

	)

238 #i‡!
deföed
 
_N‹ëu∫
 \

239 && (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 201112)

240 #i‡
deföed
 
_MSC_VER
 && 1200 <= _MSC_VER

241 
	#_N‹ëu∫
 
	`__de˛•ec
 (
n‹ëu∫
)

	)

243 
	#_N‹ëu∫
 
	`YY_ATTRIBUTE
 ((
__n‹ëu∫__
))

	)

248 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


249 
	#YYUSE
(
E
Ë((Ë(E))

	)

251 
	#YYUSE
(
E
Ë

	)

254 #i‡
deföed
 
__GNUC__
 && 407 <__GNUC__ * 100 + 
__GNUC_MINOR__


256 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 \

257 
	`_Pøgma
 ("GCC diagnosticÖush") \

258 
	`_Pøgma
 ("GCC diagnostic ignored \"-Wuninitialized\"")\

259 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wmaybe-unöôülized\"")

	)

260 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END
 \

261 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

263 
	#YY_INITIAL_VALUE
(
VÆue
Ë
	)
Value

265 #i‚de‡
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


266 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


	)

267 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END


	)

269 #i‚de‡
YY_INITIAL_VALUE


270 
	#YY_INITIAL_VALUE
(
VÆue
Ë

	)

274 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


278 #ifde‡
YYSTACK_USE_ALLOCA


279 #i‡
YYSTACK_USE_ALLOCA


280 #ifde‡
__GNUC__


281 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

282 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


283 
	~<Æloˇ.h
>

284 #ñi‡
deföed
 
_AIX


285 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

286 #ñi‡
deföed
 
_MSC_VER


287 
	~<mÆloc.h
>

288 
	#Æloˇ
 
_Æloˇ


	)

290 
	#YYSTACK_ALLOC
 
Æloˇ


	)

291 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS


292 
	~<°dlib.h
>

294 #i‚de‡
EXIT_SUCCESS


295 
	#EXIT_SUCCESS
 0

	)

302 #ifde‡
YYSTACK_ALLOC


304 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

305 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


310 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

313 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

314 
	#YYSTACK_FREE
 
YYFREE


	)

315 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


316 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

318 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

319 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

320 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

321 
	~<°dlib.h
>

322 #i‚de‡
EXIT_SUCCESS


323 
	#EXIT_SUCCESS
 0

	)

326 #i‚de‡
YYMALLOC


327 
	#YYMALLOC
 
mÆloc


	)

328 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS


329 *
mÆloc
 (
YYSIZE_T
);

332 #i‚de‡
YYFREE


333 
	#YYFREE
 
‰ì


	)

334 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS


335 
‰ì
 (*);

342 #i‡(! 
deföed
 
yyovîÊow
 \

343 && (! 
deföed
 
	g__˝lu•lus
 \

344 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

347 
	uyyÆloc


349 
yyty≥_öt16
 
	myyss_Æloc
;

350 
YYSTYPE
 
	myyvs_Æloc
;

354 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

358 
	#YYSTACK_BYTES
(
N
) \

359 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

360 + 
YYSTACK_GAP_MAXIMUM
)

	)

362 
	#YYCOPY_NEEDED
 1

	)

369 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

372 
YYSIZE_T
 
yy√wbyãs
; \

373 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

374 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

375 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

376 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

378 0)

	)

382 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

385 #i‚de‡
YYCOPY


386 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

387 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

388 
	`__buûtö_mem˝y
 (
D°
, 
Src
, (
Cou¡
Ë*  (*(Src)))

	)

390 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

393 
YYSIZE_T
 
yyi
; \

394 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

395 (
D°
)[
yyi
] = (
Src
)[yyi]; \

397 0)

	)

403 
	#YYFINAL
 3

	)

405 
	#YYLAST
 90

	)

408 
	#YYNTOKENS
 20

	)

410 
	#YYNNTS
 4

	)

412 
	#YYNRULES
 24

	)

414 
	#YYNSTATES
 46

	)

418 
	#YYUNDEFTOK
 2

	)

419 
	#YYMAXUTOK
 266

	)

421 
	#YYTRANSLATE
(
YYX
) \

422 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

426 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

457 #i‡
YYDEBUG


459 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

467 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 0

470 c⁄° *c⁄° 
	gyyäame
[] =

474 "'<'", "'='", "'('", "')'", "$ac˚±", "≠∂ë", "nuŒ", "ex¥", 
YY_NULLPTR


478 #ifde‡
YYPRINT


481 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

488 
	#YYPACT_NINF
 -3

	)

490 
	#yy∑˘_vÆue_is_deÁu…
(
Yy°©e
) \

491 (!!((
Yy°©e
Ë=(-3)))

	)

493 
	#YYTABLE_NINF
 -1

	)

495 
	#yyèbÀ_vÆue_is_îr‹
(
YyèbÀ_vÆue
) \

496 (!!((
YyèbÀ_vÆue
Ë=(-1)))

	)

500 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

512 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

522 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

528 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

536 c⁄° 
yyty≥_öt8
 
	gyyèbÀ
[] =

550 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

566 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

576 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

584 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

592 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

593 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

594 
	#YYEMPTY
 (-2)

	)

595 
	#YYEOF
 0

	)

597 
	#YYACCEPT
 
yyac˚±œb


	)

598 
	#YYABORT
 
yyab‹éab


	)

599 
	#YYERROR
 
yyîr‹œb


	)

602 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

604 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

606 i‡(
yych¨
 =
YYEMPTY
) \

608 
yych¨
 = (
Tokí
); \

609 
yylvÆ
 = (
VÆue
); \

610 
	`YYPOPSTACK
 (
yyÀn
); \

611 
yy°©e
 = *
yys•
; \

612 
yybackup
; \

616 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

617 
YYERROR
; \

619 0)

	)

622 
	#YYTERROR
 1

	)

623 
	#YYERRCODE
 256

	)

628 #i‡
YYDEBUG


630 #i‚de‡
YYFPRINTF


631 
	~<°dio.h
>

632 
	#YYFPRINTF
 
Ârötf


	)

635 
	#YYDPRINTF
(
Args
) \

637 i‡(
yydebug
) \

638 
YYFPRINTF
 
Args
; \

639 } 0)

	)

642 #i‚de‡
YY_LOCATION_PRINT


643 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

647 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

649 i‡(
yydebug
) \

651 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

652 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

653 
Ty≥
, 
VÆue
); \

654 
	`YYFPRINTF
 (
°dîr
, "\n"); \

656 } 0)

	)

664 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

666 
FILE
 *
yyo
 = 
yyouçut
;

667 
	`YYUSE
 (
yyo
);

668 i‡(!
yyvÆuï
)

670 #ifde‡
YYPRINT


671 i‡(
yyty≥
 < 
YYNTOKENS
)

672 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

674 
	`YYUSE
 (
yyty≥
);

675 
	}
}

683 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

685 
	`YYFPRINTF
 (
yyouçut
, "%s %s (",

686 
yyty≥
 < 
YYNTOKENS
 ? "tokí" : "¡îm", 
yyäame
[yytype]);

688 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

689 
	`YYFPRINTF
 (
yyouçut
, ")");

690 
	}
}

698 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

700 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

701 ; 
yybŸtom
 <
yyt›
; yybottom++)

703 
yybŸ
 = *
yybŸtom
;

704 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

706 
	`YYFPRINTF
 (
°dîr
, "\n");

707 
	}
}

709 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

711 i‡(
yydebug
) \

712 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

713 } 0)

	)

721 
	$yy_ªdu˚_¥öt
 (
yyty≥_öt16
 *
yys•
, 
YYSTYPE
 *
yyv•
, 
yyruÀ
)

723 
yy o
 = 
yyæöe
[
yyruÀ
];

724 
yyƒhs
 = 
yyr2
[
yyruÀ
];

725 
yyi
;

726 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

727 
yyruÀ
 - 1, 
yy o
);

729 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

731 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

732 
	`yy_symbﬁ_¥öt
 (
°dîr
,

733 
yy°os
[
yys•
[
yyi
 + 1 - 
yyƒhs
]],

734 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

736 
	`YYFPRINTF
 (
°dîr
, "\n");

738 
	}
}

740 
	#YY_REDUCE_PRINT
(
RuÀ
) \

742 i‡(
yydebug
) \

743 
	`yy_ªdu˚_¥öt
 (
yys•
, 
yyv•
, 
RuÀ
); \

744 } 0)

	)

748 
	gyydebug
;

750 
	#YYDPRINTF
(
Args
)

	)

751 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

752 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

753 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

758 #i‚de‡
YYINITDEPTH


759 
	#YYINITDEPTH
 200

	)

769 #i‚de‡
YYMAXDEPTH


770 
	#YYMAXDEPTH
 10000

	)

774 #i‡
YYERROR_VERBOSE


776 #i‚de‡
yy°æí


777 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


778 
	#yy°æí
 
°æí


	)

781 
YYSIZE_T


782 
	$yy°æí
 (c⁄° *
yy°r
)

784 
YYSIZE_T
 
yyÀn
;

785 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

787  
yyÀn
;

788 
	}
}

792 #i‚de‡
yy°p˝y


793 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


794 
	#yy°p˝y
 
°p˝y


	)

799 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

801 *
yyd
 = 
yyde°
;

802 c⁄° *
yys
 = 
yy§c
;

804 (*
yyd
++ = *
yys
++) != '\0')

807  
yyd
 - 1;

808 
	}
}

812 #i‚de‡
yyäamîr


820 
YYSIZE_T


821 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

823 i‡(*
yy°r
 == '"')

825 
YYSIZE_T
 
yyn
 = 0;

826 c⁄° *
yyp
 = 
yy°r
;

829 *++
yyp
)

833 
do_nŸ_°rù_quŸes
;

836 i‡(*++
yyp
 != '\\')

837 
do_nŸ_°rù_quŸes
;

840 i‡(
yyªs
)

841 
yyªs
[
yyn
] = *
yyp
;

842 
yyn
++;

846 i‡(
yyªs
)

847 
yyªs
[
yyn
] = '\0';

848  
yyn
;

850 
do_nŸ_°rù_quŸes
: ;

853 i‡(! 
yyªs
)

854  
	`yy°æí
 (
yy°r
);

856  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

857 
	}
}

869 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

870 
yyty≥_öt16
 *
yys•
, 
yytokí
)

872 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yytokí
]);

873 
YYSIZE_T
 
yysize
 = 
yysize0
;

874 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

876 c⁄° *
yyf‹m©
 = 
YY_NULLPTR
;

878 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

881 
yycou¡
 = 0;

906 i‡(
yytokí
 !
YYEMPTY
)

908 
yyn
 = 
yy∑˘
[*
yys•
];

909 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

910 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

915 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

917 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

918 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

919 
yyx
;

921 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

922 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


923 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

925 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

927 
yycou¡
 = 1;

928 
yysize
 = 
yysize0
;

931 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

933 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yyx
]);

934 i‡(! (
yysize
 <
yysize1


935 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

937 
yysize
 = 
yysize1
;

943 
yycou¡
)

945 
	#YYCASE_
(
N
, 
S
) \

946 
N
: \

947 
yyf‹m©
 = 
S
; \

948 

	)

949 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

950 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

951 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

952 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

953 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

954 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

955 #unde‡
YYCASE_


959 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

960 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

962 
yysize
 = 
yysize1
;

965 i‡(*
yymsg_Æloc
 < 
yysize
)

967 *
yymsg_Æloc
 = 2 * 
yysize
;

968 i‡(! (
yysize
 <*
yymsg_Æloc


969 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

970 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

978 *
yyp
 = *
yymsg
;

979 
yyi
 = 0;

980 (*
yyp
 = *
yyf‹m©
) != '\0')

981 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

983 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

984 
yyf‹m©
 += 2;

988 
yyp
++;

989 
yyf‹m©
++;

993 
	}
}

1001 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1003 
	`YYUSE
 (
yyvÆuï
);

1004 i‡(!
yymsg
)

1005 
yymsg
 = "Deleting";

1006 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1008 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1009 
	`YYUSE
 (
yyty≥
);

1010 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1011 
	}
}

1017 
	gyych¨
;

1020 
YYSTYPE
 
	gyylvÆ
;

1022 
	gyy√ºs
;

1030 
	$yy∑r£
 ()

1032 
yy°©e
;

1034 
yyîr°©us
;

1044 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1045 
yyty≥_öt16
 *
yyss
;

1046 
yyty≥_öt16
 *
yys•
;

1049 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1050 
YYSTYPE
 *
yyvs
;

1051 
YYSTYPE
 *
yyv•
;

1053 
YYSIZE_T
 
yy°acksize
;

1055 
yyn
;

1056 
yyªsu…
;

1058 
yytokí
 = 0;

1061 
YYSTYPE
 
yyvÆ
;

1063 #i‡
YYERROR_VERBOSE


1065 
yymsgbuf
[128];

1066 *
yymsg
 = 
yymsgbuf
;

1067 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1070 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1074 
yyÀn
 = 0;

1076 
yys•
 = 
yyss
 = 
yysß
;

1077 
yyv•
 = 
yyvs
 = 
yyvß
;

1078 
yy°acksize
 = 
YYINITDEPTH
;

1080 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1082 
yy°©e
 = 0;

1083 
yyîr°©us
 = 0;

1084 
yy√ºs
 = 0;

1085 
yych¨
 = 
YYEMPTY
;

1086 
yy£t°©e
;

1091 
yy√w°©e
:

1094 
yys•
++;

1096 
yy£t°©e
:

1097 *
yys•
 = 
yy°©e
;

1099 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1102 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1104 #ifde‡
yyovîÊow


1109 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1110 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1116 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1117 &
yyss1
, 
yysize
 *  (*
yys•
),

1118 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1119 &
yy°acksize
);

1121 
yyss
 = 
yyss1
;

1122 
yyvs
 = 
yyvs1
;

1125 #i‚de‡
YYSTACK_RELOCATE


1126 
yyexhau°edœb
;

1129 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1130 
yyexhau°edœb
;

1131 
yy°acksize
 *= 2;

1132 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1133 
yy°acksize
 = 
YYMAXDEPTH
;

1136 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1137 
yyÆloc
 *
yy±r
 =

1138 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1139 i‡(! 
yy±r
)

1140 
yyexhau°edœb
;

1141 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1142 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1143 #unde‡
YYSTACK_RELOCATE


1144 i‡(
yyss1
 !
yysß
)

1145 
	`YYSTACK_FREE
 (
yyss1
);

1150 
yys•
 = 
yyss
 + 
yysize
 - 1;

1151 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1153 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1154 (Ë
yy°acksize
));

1156 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1157 
YYABORT
;

1160 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1162 i‡(
yy°©e
 =
YYFINAL
)

1163 
YYACCEPT
;

1165 
yybackup
;

1170 
yybackup
:

1176 
yyn
 = 
yy∑˘
[
yy°©e
];

1177 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1178 
yydeÁu…
;

1183 i‡(
yych¨
 =
YYEMPTY
)

1185 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1186 
yych¨
 = 
	`yyÀx
 ();

1189 i‡(
yych¨
 <
YYEOF
)

1191 
yych¨
 = 
yytokí
 = 
YYEOF
;

1192 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1196 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1197 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1202 
yyn
 +
yytokí
;

1203 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1204 
yydeÁu…
;

1205 
yyn
 = 
yyèbÀ
[yyn];

1206 i‡(
yyn
 <= 0)

1208 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1209 
yyîæab
;

1210 
yyn
 = -yyn;

1211 
yyªdu˚
;

1216 i‡(
yyîr°©us
)

1217 
yyîr°©us
--;

1220 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1223 
yych¨
 = 
YYEMPTY
;

1225 
yy°©e
 = 
yyn
;

1226 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1227 *++
yyv•
 = 
yylvÆ
;

1228 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1230 
yy√w°©e
;

1236 
yydeÁu…
:

1237 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1238 i‡(
yyn
 == 0)

1239 
yyîæab
;

1240 
yyªdu˚
;

1246 
yyªdu˚
:

1248 
yyÀn
 = 
yyr2
[
yyn
];

1258 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1261 
	`YY_REDUCE_PRINT
 (
yyn
);

1262 
yyn
)

1267 *
yy_ªt
 = (
yyv•
[0]);

1268 (
yyvÆ
Ë(
yyv•
[0]);

1275 { (
yyvÆ
Ë
NULL
; }

1282 (
yyvÆ
Ë
	`Æloc_node
(
SSF_DCOND
, (
yyv•
[0]));

1290 (
yyvÆ
Ë
	`Æloc_node
(
SSF_SCOND
, (
yyv•
[0]));

1298 (
yyvÆ
Ë
	`Æloc_node
(
SSF_D_GE
, (
yyv•
[0]));

1306 (
yyvÆ
Ë
	`Æloc_node
(
SSF_D_LE
, (
yyv•
[0]));

1314 (
yyvÆ
Ë
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_D_LE
, (
yyv•
[0])));

1322 (
yyvÆ
Ë
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_D_GE
, (
yyv•
[0])));

1330 (
yyvÆ
Ë
	`Æloc_node
(
SSF_DCOND
, (
yyv•
[0]));

1338 (
yyvÆ
Ë
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_DCOND
, (
yyv•
[0])));

1346 (
yyvÆ
Ë
	`Æloc_node
(
SSF_S_GE
, (
yyv•
[0]));

1354 (
yyvÆ
Ë
	`Æloc_node
(
SSF_S_LE
, (
yyv•
[0]));

1362 (
yyvÆ
Ë
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_S_LE
, (
yyv•
[0])));

1370 (
yyvÆ
Ë
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_S_GE
, (
yyv•
[0])));

1378 (
yyvÆ
Ë
	`Æloc_node
(
SSF_SCOND
, (
yyv•
[0]));

1386 (
yyvÆ
Ë
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_SCOND
, (
yyv•
[0])));

1394 (
yyvÆ
Ë
	`Æloc_node
(
SSF_S_AUTO
, 
NULL
);

1402 (
yyvÆ
Ë
	`Æloc_node
(
SSF_OR
, (
yyv•
[-2]));

1403 (
yyvÆ
)->
po°
 = (
yyv•
[0]);

1411 (
yyvÆ
Ë
	`Æloc_node
(
SSF_AND
, (
yyv•
[-1]));

1412 (
yyvÆ
)->
po°
 = (
yyv•
[0]);

1420 (
yyvÆ
Ë
	`Æloc_node
(
SSF_AND
, (
yyv•
[-2]));

1421 (
yyvÆ
)->
po°
 = (
yyv•
[0]);

1429 (
yyvÆ
Ë
	`Æloc_node
(
SSF_NOT
, (
yyv•
[0]));

1437 (
yyvÆ
Ë(
yyv•
[-1]);

1457 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1459 
	`YYPOPSTACK
 (
yyÀn
);

1460 
yyÀn
 = 0;

1461 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1463 *++
yyv•
 = 
yyvÆ
;

1469 
yyn
 = 
yyr1
[yyn];

1471 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1472 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1473 
yy°©e
 = 
yyèbÀ
[yystate];

1475 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1477 
yy√w°©e
;

1483 
yyîæab
:

1486 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

1489 i‡(!
yyîr°©us
)

1491 ++
yy√ºs
;

1492 #i‡! 
YYERROR_VERBOSE


1493 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1495 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

1496 
yys•
, 
yytokí
)

	)

1498 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

1499 
yysy¡ax_îr‹_°©us
;

1500 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1501 i‡(
yysy¡ax_îr‹_°©us
 == 0)

1502 
yymsgp
 = 
yymsg
;

1503 i‡(
yysy¡ax_îr‹_°©us
 == 1)

1505 i‡(
yymsg
 !
yymsgbuf
)

1506 
	`YYSTACK_FREE
 (
yymsg
);

1507 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

1508 i‡(!
yymsg
)

1510 
yymsg
 = 
yymsgbuf
;

1511 
yymsg_Æloc
 =  
yymsgbuf
;

1512 
yysy¡ax_îr‹_°©us
 = 2;

1516 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1517 
yymsgp
 = 
yymsg
;

1520 
	`yyîr‹
 (
yymsgp
);

1521 i‡(
yysy¡ax_îr‹_°©us
 == 2)

1522 
yyexhau°edœb
;

1524 #unde‡
YYSYNTAX_ERROR


1530 i‡(
yyîr°©us
 == 3)

1535 i‡(
yych¨
 <
YYEOF
)

1538 i‡(
yych¨
 =
YYEOF
)

1539 
YYABORT
;

1543 
	`yyde°ru˘
 ("Error: discarding",

1544 
yytokí
, &
yylvÆ
);

1545 
yych¨
 = 
YYEMPTY
;

1551 
yyîæab1
;

1557 
yyîr‹œb
:

1563 
yyîr‹œb
;

1567 
	`YYPOPSTACK
 (
yyÀn
);

1568 
yyÀn
 = 0;

1569 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1570 
yy°©e
 = *
yys•
;

1571 
yyîæab1
;

1577 
yyîæab1
:

1578 
yyîr°©us
 = 3;

1582 
yyn
 = 
yy∑˘
[
yy°©e
];

1583 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1585 
yyn
 +
YYTERROR
;

1586 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1588 
yyn
 = 
yyèbÀ
[yyn];

1589 i‡(0 < 
yyn
)

1595 i‡(
yys•
 =
yyss
)

1596 
YYABORT
;

1599 
	`yyde°ru˘
 ("Error:Öopping",

1600 
yy°os
[
yy°©e
], 
yyv•
);

1601 
	`YYPOPSTACK
 (1);

1602 
yy°©e
 = *
yys•
;

1603 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1606 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1607 *++
yyv•
 = 
yylvÆ
;

1608 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1612 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1614 
yy°©e
 = 
yyn
;

1615 
yy√w°©e
;

1621 
yyac˚±œb
:

1622 
yyªsu…
 = 0;

1623 
yyªtu∫
;

1628 
yyab‹éab
:

1629 
yyªsu…
 = 1;

1630 
yyªtu∫
;

1632 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


1636 
yyexhau°edœb
:

1637 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1638 
yyªsu…
 = 2;

1642 
yyªtu∫
:

1643 i‡(
yych¨
 !
YYEMPTY
)

1647 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1648 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1649 
yytokí
, &
yylvÆ
);

1653 
	`YYPOPSTACK
 (
yyÀn
);

1654 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1655 
yys•
 !
yyss
)

1657 
	`yyde°ru˘
 ("Cleanup:Öopping",

1658 
yy°os
[*
yys•
], 
yyv•
);

1659 
	`YYPOPSTACK
 (1);

1661 #i‚de‡
yyovîÊow


1662 i‡(
yyss
 !
yysß
)

1663 
	`YYSTACK_FREE
 (
yyss
);

1665 #i‡
YYERROR_VERBOSE


1666 i‡(
yymsg
 !
yymsgbuf
)

1667 
	`YYSTACK_FREE
 (
yymsg
);

1669  
yyªsu…
;

1670 
	}
}

1674 *
	$gë_tokí_‰om_löe
(**
±r
)

1676 *
tok
, *
˝
 = *
±r
;

1678 *
˝
 == ' ' || *cp == '\t') cp++;

1680 i‡(*
˝
 == 0) {

1681 *
±r
 = 
˝
;

1682  
NULL
;

1685 
tok
 = 
˝
;

1687 *
˝
 != 0 && *cp != ' ' && *cp != '\t') {

1689 i‡(*
˝
 == '\\') {

1690 *
ç
;

1691 
ç
 = 
˝
;Å∞!
tok
;Åp--)

1692 *
ç
 = *(tp-1);

1693 
˝
++;

1694 
tok
++;

1695 i‡(*
˝
 == 0)

1698 
˝
++;

1700 i‡(*
˝
)

1701 *
˝
++ = 0;

1702 *
±r
 = 
˝
;

1703  
tok
;

1704 
	}
}

1706 
	$yyÀx
()

1708 
¨gbuf
[1024];

1709 *
tok±r
 = 
¨gbuf
;

1710 
¨gc
;

1711 *
cuπok
;

1714 *
tok±r
 == 0) {

1715 
tok±r
 = 
NULL
;

1716 i‡(
¨gc
 < 
yy_¨gc
) {

1717 
tok±r
 = 
yy_¨gv
[
¨gc
];

1718 
¨gc
++;

1719 } i‡(
yy_Â
) {

1720 
tok±r
 =
NULL
) {

1721 i‡(
	`fgës
(
¨gbuf
, ◊rgbuf)-1, 
yy_Â
Ë=
NULL
)

1723 
¨gbuf
[(argbuf)-1] = 0;

1724 i‡(
	`°æí
(
¨gbuf
) == (argbuf) - 1) {

1725 
	`Ârötf
(
°dîr
, "TooÜongÜine in filter");

1726 
	`exô
(-1);

1728 i‡(
¨gbuf
[
	`°æí
(argbuf)-1] == '\n')

1729 
¨gbuf
[
	`°æí
(argbuf)-1] = 0;

1730 i‡(
¨gbuf
[0] == '#' ||árgbuf[0] == '0')

1732 
tok±r
 = 
¨gbuf
;

1738 } (
cuπok
 = 
	`gë_tokí_‰om_löe
(&
tok±r
)Ë=
NULL
);

1740 i‡(
	`°rcmp
(
cuπok
, "!") == 0 ||

1741 
	`°rcmp
(
cuπok
, "not") == 0)

1743 i‡(
	`°rcmp
(
cuπok
, "&") == 0 ||

1744 
	`°rcmp
(
cuπok
, "&&") == 0 ||

1745 
	`°rcmp
(
cuπok
, "and") == 0)

1747 i‡(
	`°rcmp
(
cuπok
, "|") == 0 ||

1748 
	`°rcmp
(
cuπok
, "||") == 0 ||

1749 
	`°rcmp
(
cuπok
, "or") == 0)

1751 i‡(
	`°rcmp
(
cuπok
, "(") == 0)

1753 i‡(
	`°rcmp
(
cuπok
, ")") == 0)

1755 i‡(
	`°rcmp
(
cuπok
, "dst") == 0) {

1756 
tok_ty≥
 = 
DCOND
;

1757  
DCOND
;

1759 i‡(
	`°rcmp
(
cuπok
, "src") == 0) {

1760 
tok_ty≥
 = 
SCOND
;

1761  
SCOND
;

1763 i‡(
	`°rcmp
(
cuπok
, "dport") == 0) {

1764 
tok_ty≥
 = 
DPORT
;

1765  
DPORT
;

1767 i‡(
	`°rcmp
(
cuπok
, "sport") == 0) {

1768 
tok_ty≥
 = 
SPORT
;

1769  
SPORT
;

1771 i‡(
	`°rcmp
(
cuπok
, ">=") == 0 ||

1772 
	`°rcmp
(
cuπok
, "ge") == 0 ||

1773 
	`°rcmp
(
cuπok
, "geq") == 0)

1774  
GEQ
;

1775 i‡(
	`°rcmp
(
cuπok
, "<=") == 0 ||

1776 
	`°rcmp
(
cuπok
, "le") == 0 ||

1777 
	`°rcmp
(
cuπok
, "leq") == 0)

1778  
LEQ
;

1779 i‡(
	`°rcmp
(
cuπok
, "!=") == 0 ||

1780 
	`°rcmp
(
cuπok
, "ne") == 0 ||

1781 
	`°rcmp
(
cuπok
, "neq") == 0)

1782  
NEQ
;

1783 i‡(
	`°rcmp
(
cuπok
, "=") == 0 ||

1784 
	`°rcmp
(
cuπok
, "==") == 0 ||

1785 
	`°rcmp
(
cuπok
, "eq") == 0)

1787 i‡(
	`°rcmp
(
cuπok
, ">") == 0 ||

1788 
	`°rcmp
(
cuπok
, "gt") == 0)

1790 i‡(
	`°rcmp
(
cuπok
, "<") == 0 ||

1791 
	`°rcmp
(
cuπok
, "lt") == 0)

1793 i‡(
	`°rcmp
(
cuπok
, "autobound") == 0) {

1794 
tok_ty≥
 = 
AUTOBOUND
;

1795  
AUTOBOUND
;

1797 
yylvÆ
 = (*)
	`∑r£_ho°c⁄d
(
cuπok
, 
tok_ty≥
 =
SPORT
 ||Åok_ty≥ =
DPORT
);

1798 i‡(
yylvÆ
 =
NULL
) {

1799 
	`Ârötf
(
°dîr
, "CannotÖarse dst/srcáddress.\n");

1800 
	`exô
(1);

1802  
HOSTCOND
;

1803 
	}
}

1805 
	$ssfûãr_∑r£
(
ssfûãr
 **
f
, 
¨gc
, **
¨gv
, 
FILE
 *
Â
)

1807 
yy_¨gc
 = 
¨gc
;

1808 
yy_¨gv
 = 
¨gv
;

1809 
yy_Â
 = 
Â
;

1810 
yy_ªt
 = 
f
;

1812 i‡(
	`yy∑r£
()) {

1813 
	`Ârötf
(
°dîr
, " Sorry.\n");

1817 
	}
}

	@misc/ssfilter.h

1 
	#SSF_DCOND
 0

	)

2 
	#SSF_SCOND
 1

	)

3 
	#SSF_OR
 2

	)

4 
	#SSF_AND
 3

	)

5 
	#SSF_NOT
 4

	)

6 
	#SSF_D_GE
 5

	)

7 
	#SSF_D_LE
 6

	)

8 
	#SSF_S_GE
 7

	)

9 
	#SSF_S_LE
 8

	)

10 
	#SSF_S_AUTO
 9

	)

12 
	~<°dboﬁ.h
>

14 
	sssfûãr


16 
	mty≥
;

17 
ssfûãr
 *
	mpo°
;

18 
ssfûãr
 *
	m¥ed
;

21 
ssfûãr_∑r£
(
ssfûãr
 **
f
, 
¨gc
, **
¨gv
, 
FILE
 *
Â
);

22 *
∑r£_ho°c⁄d
(*
addr
, 
boﬁ
 
is_p‹t
);

	@misc/ssfilter.y

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<mÆloc.h
>

6 
	~<°rög.h
>

7 
	~"ssfûãr.h
"

9 
ssfûãr
 * 
	tssfûãr_t
;

11 
	#YYSTYPE
 
ssfûãr_t


	)

13 
ssfûãr
 * 
	$Æloc_node
(
ty≥
, *
¥ed
)

15 
ssfûãr
 *
n
 = 
	`mÆloc
((*n));

16 i‡(
n
 =
NULL
)

17 
	`ab‹t
();

18 
n
->
ty≥
 =Åype;

19 
n
->
¥ed
 =Öred;

20 
n
->
po°
 = 
NULL
;

21  
n
;

22 
	}
}

24 **
	gyy_¨gv
;

25 
	gyy_¨gc
;

26 
FILE
 *
	gyy_Â
;

27 
ssfûãr_t
 *
	gyy_ªt
;

28 
	gtok_ty≥
 = -1;

30 
yyÀx
();

32 
	$yyîr‹
(*
s
)

34 
	`Ârötf
(
°dîr
, "ss: bis⁄ bñlow†(whûê∑rsög fûãr): \"%s!\"", 
s
);

35 
	}
}

39 %
tokí
 
HOSTCOND
 
DCOND
 
SCOND
 
DPORT
 
SPORT
 
LEQ
 
GEQ
 
NEQ
 
AUTOBOUND


40 %
À·
 '|'

41 %
À·
 '&'

42 %
n⁄assoc
 '!'

44 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

45 
≠∂ë
: 
nuŒ
 
ex¥


47 *
yy_ªt
 = 
$2
;

48 
$$
 = 
$2
;

50 | 
nuŒ


52 
nuŒ
: { 
$$
 = 
NULL
; }

54 
ex¥
: 
DCOND
 
HOSTCOND


56 
$$
 = 
	`Æloc_node
(
SSF_DCOND
, 
$2
);

58 | 
SCOND
 
HOSTCOND


60 
$$
 = 
	`Æloc_node
(
SSF_SCOND
, 
$2
);

62 | 
DPORT
 
GEQ
 
HOSTCOND


64 
$$
 = 
	`Æloc_node
(
SSF_D_GE
, 
$3
);

66 | 
DPORT
 
LEQ
 
HOSTCOND


68 
$$
 = 
	`Æloc_node
(
SSF_D_LE
, 
$3
);

70 | 
DPORT
 '>' 
HOSTCOND


72 
$$
 = 
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_D_LE
, 
$3
));

74 | 
DPORT
 '<' 
HOSTCOND


76 
$$
 = 
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_D_GE
, 
$3
));

78 | 
DPORT
 '=' 
HOSTCOND


80 
$$
 = 
	`Æloc_node
(
SSF_DCOND
, 
$3
);

82 | 
DPORT
 
NEQ
 
HOSTCOND


84 
$$
 = 
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_DCOND
, 
$3
));

87 | 
SPORT
 
GEQ
 
HOSTCOND


89 
$$
 = 
	`Æloc_node
(
SSF_S_GE
, 
$3
);

91 | 
SPORT
 
LEQ
 
HOSTCOND


93 
$$
 = 
	`Æloc_node
(
SSF_S_LE
, 
$3
);

95 | 
SPORT
 '>' 
HOSTCOND


97 
$$
 = 
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_S_LE
, 
$3
));

99 | 
SPORT
 '<' 
HOSTCOND


101 
$$
 = 
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_S_GE
, 
$3
));

103 | 
SPORT
 '=' 
HOSTCOND


105 
$$
 = 
	`Æloc_node
(
SSF_SCOND
, 
$3
);

107 | 
SPORT
 
NEQ
 
HOSTCOND


109 
$$
 = 
	`Æloc_node
(
SSF_NOT
,áŒoc_node(
SSF_SCOND
, 
$3
));

112 | 
AUTOBOUND


114 
$$
 = 
	`Æloc_node
(
SSF_S_AUTO
, 
NULL
);

116 | 
ex¥
 '|'Éxpr

118 
$$
 = 
	`Æloc_node
(
SSF_OR
, 
$1
);

119 
$$
->
po°
 = 
$3
;

121 | 
ex¥
Éxpr

123 
$$
 = 
	`Æloc_node
(
SSF_AND
, 
$1
);

124 
$$
->
po°
 = 
$2
;

126 | 
ex¥
 '&'Éxpr

129 
$$
 = 
	`Æloc_node
(
SSF_AND
, 
$1
);

130 
$$
->
po°
 = 
$3
;

132 | '!' 
ex¥


134 
$$
 = 
	`Æloc_node
(
SSF_NOT
, 
$2
);

136 | '(' 
ex¥
 ')'

138 
$$
 = 
$2
;

141 
	}
%%

143 *
	$gë_tokí_‰om_löe
(**
±r
)

145 *
tok
, *
˝
 = *
±r
;

147 *
˝
 == ' ' || *cp == '\t') cp++;

149 i‡(*
˝
 == 0) {

150 *
±r
 = 
˝
;

151  
NULL
;

154 
tok
 = 
˝
;

156 *
˝
 != 0 && *cp != ' ' && *cp != '\t') {

158 i‡(*
˝
 == '\\') {

159 *
ç
;

160 
ç
 = 
˝
;Å∞!
tok
;Åp--)

161 *
ç
 = *(tp-1);

162 
˝
++;

163 
tok
++;

164 i‡(*
˝
 == 0)

167 
˝
++;

169 i‡(*
˝
)

170 *
˝
++ = 0;

171 *
±r
 = 
˝
;

172  
tok
;

173 
	}
}

175 
	$yyÀx
()

177 
¨gbuf
[1024];

178 *
tok±r
 = 
¨gbuf
;

179 
¨gc
;

180 *
cuπok
;

183 *
tok±r
 == 0) {

184 
tok±r
 = 
NULL
;

185 i‡(
¨gc
 < 
yy_¨gc
) {

186 
tok±r
 = 
yy_¨gv
[
¨gc
];

187 
¨gc
++;

188 } i‡(
yy_Â
) {

189 
tok±r
 =
NULL
) {

190 i‡(
	`fgës
(
¨gbuf
, ◊rgbuf)-1, 
yy_Â
Ë=
NULL
)

192 
¨gbuf
[(argbuf)-1] = 0;

193 i‡(
	`°æí
(
¨gbuf
) == (argbuf) - 1) {

194 
	`Ârötf
(
°dîr
, "TooÜongÜine in filter");

195 
	`exô
(-1);

197 i‡(
¨gbuf
[
	`°æí
(argbuf)-1] == '\n')

198 
¨gbuf
[
	`°æí
(argbuf)-1] = 0;

199 i‡(
¨gbuf
[0] == '#' ||árgbuf[0] == '0')

201 
tok±r
 = 
¨gbuf
;

207 } (
cuπok
 = 
	`gë_tokí_‰om_löe
(&
tok±r
)Ë=
NULL
);

209 i‡(
	`°rcmp
(
cuπok
, "!") == 0 ||

210 
	`°rcmp
(
cuπok
, "not") == 0)

212 i‡(
	`°rcmp
(
cuπok
, "&") == 0 ||

213 
	`°rcmp
(
cuπok
, "&&") == 0 ||

214 
	`°rcmp
(
cuπok
, "and") == 0)

216 i‡(
	`°rcmp
(
cuπok
, "|") == 0 ||

217 
	`°rcmp
(
cuπok
, "||") == 0 ||

218 
	`°rcmp
(
cuπok
, "or") == 0)

220 i‡(
	`°rcmp
(
cuπok
, "(") == 0)

222 i‡(
	`°rcmp
(
cuπok
, ")") == 0)

224 i‡(
	`°rcmp
(
cuπok
, "dst") == 0) {

225 
tok_ty≥
 = 
DCOND
;

226  
DCOND
;

228 i‡(
	`°rcmp
(
cuπok
, "src") == 0) {

229 
tok_ty≥
 = 
SCOND
;

230  
SCOND
;

232 i‡(
	`°rcmp
(
cuπok
, "dport") == 0) {

233 
tok_ty≥
 = 
DPORT
;

234  
DPORT
;

236 i‡(
	`°rcmp
(
cuπok
, "sport") == 0) {

237 
tok_ty≥
 = 
SPORT
;

238  
SPORT
;

240 i‡(
	`°rcmp
(
cuπok
, ">=") == 0 ||

241 
	`°rcmp
(
cuπok
, "ge") == 0 ||

242 
	`°rcmp
(
cuπok
, "geq") == 0)

243  
GEQ
;

244 i‡(
	`°rcmp
(
cuπok
, "<=") == 0 ||

245 
	`°rcmp
(
cuπok
, "le") == 0 ||

246 
	`°rcmp
(
cuπok
, "leq") == 0)

247  
LEQ
;

248 i‡(
	`°rcmp
(
cuπok
, "!=") == 0 ||

249 
	`°rcmp
(
cuπok
, "ne") == 0 ||

250 
	`°rcmp
(
cuπok
, "neq") == 0)

251  
NEQ
;

252 i‡(
	`°rcmp
(
cuπok
, "=") == 0 ||

253 
	`°rcmp
(
cuπok
, "==") == 0 ||

254 
	`°rcmp
(
cuπok
, "eq") == 0)

256 i‡(
	`°rcmp
(
cuπok
, ">") == 0 ||

257 
	`°rcmp
(
cuπok
, "gt") == 0)

259 i‡(
	`°rcmp
(
cuπok
, "<") == 0 ||

260 
	`°rcmp
(
cuπok
, "lt") == 0)

262 i‡(
	`°rcmp
(
cuπok
, "autobound") == 0) {

263 
tok_ty≥
 = 
AUTOBOUND
;

264  
AUTOBOUND
;

266 
yylvÆ
 = (*)
	`∑r£_ho°c⁄d
(
cuπok
, 
tok_ty≥
 =
SPORT
 ||Åok_ty≥ =
DPORT
);

267 i‡(
yylvÆ
 =
NULL
) {

268 
	`Ârötf
(
°dîr
, "CannotÖarse dst/srcáddress.\n");

269 
	`exô
(1);

271  
HOSTCOND
;

272 
	}
}

274 
	$ssfûãr_∑r£
(
ssfûãr
 **
f
, 
¨gc
, **
¨gv
, 
FILE
 *
Â
)

276 
yy_¨gc
 = 
¨gc
;

277 
yy_¨gv
 = 
¨gv
;

278 
yy_Â
 = 
Â
;

279 
yy_ªt
 = 
f
;

281 i‡(
	`yy∑r£
()) {

282 
	`Ârötf
(
°dîr
, " Sorry.\n");

286 
	}
}

	@netem/maketable.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<m©h.h
>

13 
	~<mÆloc.h
>

14 
	~<°rög.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

20 
	$ªaddoubÀs
(
FILE
 *
Â
, *
numbî
)

22 
°©
 
öfo
;

23 *
x
;

24 
limô
;

25 
n
=0, 
i
;

27 
	`f°©
(
	`fûío
(
Â
), &
öfo
);

28 i‡(
öfo
.
°_size
 > 0) {

29 
limô
 = 2*
öfo
.
°_size
/();

31 
limô
 = 10000;

34 
x
 = 
	`ˇŒoc
(
limô
, ());

35 i‡(!
x
) {

36 
	`≥º‹
("doubleálloc");

37 
	`exô
(3);

40 
i
=0; i<
limô
; ++i){

41 
	`fsˇnf
(
Â
, "%lf", &
x
[
i
]);

42 i‡(
	`„of
(
Â
))

44 ++
n
;

46 *
numbî
 = 
n
;

47  
x
;

48 
	}
}

51 
	$¨øy°©s
(*
x
, 
limô
, *
mu
, *
sigma
, *
rho
)

53 
n
=0, 
i
;

54 
sumsqu¨e
=0.0, 
sum
=0.0, 
t›
=0.0;

55 
sigma2
=0.0;

57 
i
=0; i<
limô
; ++i){

58 
sumsqu¨e
 +
x
[
i
]*x[i];

59 
sum
 +
x
[
i
];

60 ++
n
;

62 *
mu
 = 
sum
/()
n
;

63 *
sigma
 = 
	`sqπ
((
sumsqu¨e
 - ()
n
*(*
mu
)*(*mu))/()(n-1));

65 
i
=1; i < 
n
; ++i){

66 
t›
 +(()
x
[
i
]- *
mu
)*(()x[i-1]- *mu);

67 
sigma2
 +(()
x
[
i
-1] - *
mu
)*(()x[i-1] - *mu);

70 *
rho
 = 
t›
/
sigma2
;

71 
	}
}

78 
	#TABLESIZE
 16384/4

	)

79 
	#TABLEFACTOR
 8192

	)

80 #i‚de‡
MINSHORT


81 
	#MINSHORT
 -32768

	)

82 
	#MAXSHORT
 32767

	)

88 
	#DISTTABLEDOMAIN
 ((
MAXSHORT
/
TABLEFACTOR
)+1)

	)

89 
	#DISTTABLEGRANULARITY
 50000

	)

90 
	#DISTTABLESIZE
 (
DISTTABLEDOMAIN
*
DISTTABLEGRANULARITY
*2)

	)

93 
	$makedi°
(*
x
, 
limô
, 
mu
, 
sigma
)

95 *
èbÀ
;

96 
i
, 
ödex
, 
fú°
=
DISTTABLESIZE
, 
œ°
=0;

97 
öput
;

99 
èbÀ
 = 
	`ˇŒoc
(
DISTTABLESIZE
, ());

100 i‡(!
èbÀ
) {

101 
	`≥º‹
("tableálloc");

102 
	`exô
(3);

105 
i
=0; i < 
limô
; ++i) {

107 
öput
 = (
x
[
i
]-
mu
)/
sigma
;

109 
ödex
 = ()
	`röt
((
öput
+
DISTTABLEDOMAIN
)*
DISTTABLEGRANULARITY
);

110 i‡(
ödex
 < 0) index = 0;

111 i‡(
ödex
 >
DISTTABLESIZE
) index = DISTTABLESIZE-1;

112 ++
èbÀ
[
ödex
];

113 i‡(
ödex
 > 
œ°
)

114 
œ°
 = 
ödex
 +1;

115 i‡(
ödex
 < 
fú°
)

116 
fú°
 = 
ödex
;

118  
èbÀ
;

119 
	}
}

123 
	$cumuœtivedi°
(*
èbÀ
, 
limô
, *
tŸÆ
)

125 
accum
=0;

127 --
limô
 >= 0) {

128 
accum
 +*
èbÀ
;

129 *
èbÀ
++ = 
accum
;

131 *
tŸÆ
 = 
accum
;

132 
	}
}

135 
	$övîâabÀ
(*
èbÀ
, 
övî£size
, 
èbÀsize
, 
cumuœtive
)

137 
i
, 
övî£ödex
, 
övî£vÆue
;

138 *
övî£
;

139 
födex
, 
fvÆue
;

141 
övî£
 = (*)
	`mÆloc
(
övî£size
*());

142 
i
=0; i < 
övî£size
; ++i) {

143 
övî£
[
i
] = 
MINSHORT
;

145 
i
=0; i < 
èbÀsize
; ++i) {

146 
födex
 = (()
i
/()
DISTTABLEGRANULARITY
Ë- 
DISTTABLEDOMAIN
;

147 
fvÆue
 = ()
èbÀ
[
i
]/()
cumuœtive
;

148 
övî£ödex
 = ()
	`röt
(
fvÆue
*
övî£size
);

149 
övî£vÆue
 = ()
	`röt
(
födex
*
TABLEFACTOR
);

150 i‡(
övî£vÆue
 <
MINSHORT
) inversevalue = MINSHORT+1;

151 i‡(
övî£vÆue
 > 
MAXSHORT
) inversevalue = MAXSHORT;

152 
övî£
[
övî£ödex
] = 
övî£vÆue
;

154  
övî£
;

156 
	}
}

160 
	$öãΩﬁ©ëabÀ
(*
èbÀ
, 
limô
)

162 
i
, 
j
, 
œ°
, 
œ°i
 = -1;

164 
œ°
 = 
MINSHORT
;

165 
i
=0; i < 
limô
; ++i) {

166 i‡(
èbÀ
[
i
] =
MINSHORT
) {

167 
j
=
i
; j < 
limô
; ++j)

168 i‡(
èbÀ
[
j
] !
MINSHORT
)

170 i‡(
j
 < 
limô
) {

171 
èbÀ
[
i
] = 
œ°
 + (i-
œ°i
)*—abÀ[
j
]-last)/(j-lasti);

173 
èbÀ
[
i
] = 
œ°
 + (i-
œ°i
)*(
MAXSHORT
-œ°)/(
limô
-lasti);

176 
œ°
 = 
èbÀ
[
i
];

177 
œ°i
 = 
i
;

180 
	}
}

183 
	$¥öâabÀ
(c⁄° *
èbÀ
, 
limô
)

185 
i
;

187 
	`¥ötf
("# This isÅhe distributionÅable forÅheÉxperimental distribution.\n");

189 
i
=0 ; i < 
limô
; ++i) {

190 
	`¥ötf
("%d%c", 
èbÀ
[
i
],

191 (
i
 % 8) == 7 ? '\n' : ' ');

193 
	}
}

196 
	$maö
(
¨gc
, **
¨gv
)

198 
FILE
 *
Â
;

199 *
x
;

200 
mu
, 
sigma
, 
rho
;

201 
limô
;

202 *
èbÀ
;

203 *
övî£
;

204 
tŸÆ
;

206 i‡(
¨gc
 > 1) {

207 i‡(!(
Â
 = 
	`f›í
(
¨gv
[1], "r"))) {

208 
	`≥º‹
(
¨gv
[1]);

209 
	`exô
(1);

212 
Â
 = 
°dö
;

214 
x
 = 
	`ªaddoubÀs
(
Â
, &
limô
);

215 i‡(
limô
 <= 0) {

216 
	`Ârötf
(
°dîr
, "Nothing muchÑead!\n");

217 
	`exô
(2);

219 
	`¨øy°©s
(
x
, 
limô
, &
mu
, &
sigma
, &
rho
);

220 #ifde‡
DEBUG


221 
	`Ârötf
(
°dîr
, "%d values, mu %10.4f, sigma %10.4f,Ñho %10.4f\n",

222 
limô
, 
mu
, 
sigma
, 
rho
);

225 
èbÀ
 = 
	`makedi°
(
x
, 
limô
, 
mu
, 
sigma
);

226 
	`‰ì
((*Ë
x
);

227 
	`cumuœtivedi°
(
èbÀ
, 
DISTTABLESIZE
, &
tŸÆ
);

228 
övî£
 = 
	`övîâabÀ
(
èbÀ
, 
TABLESIZE
, 
DISTTABLESIZE
, 
tŸÆ
);

229 
	`öãΩﬁ©ëabÀ
(
övî£
, 
TABLESIZE
);

230 
	`¥öâabÀ
(
övî£
, 
TABLESIZE
);

232 
	}
}

	@netem/normal.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<m©h.h
>

8 
	~<°rög.h
>

9 
	~<limôs.h
>

11 
	~<löux/ty≥s.h
>

12 
	~<löux/pkt_sched.h
>

14 
	#TABLESIZE
 16384

	)

15 
	#TABLEFACTOR
 
NETEM_DIST_SCALE


	)

18 
	$n‹mÆ
(
x
, 
mu
, 
sigma
)

20  .5 + .5*
	`îf
((
x
-
mu
)/(
	`sqπ
(2.0)*
sigma
));

21 
	}
}

25 
	$maö
(
¨gc
, **
¨gv
)

27 
i
, 
n
;

28 
x
;

29 
èbÀ
[
TABLESIZE
+1];

31 
x
 = -10.0; x < 10.05; x += .00005) {

32 
i
 = 
	`röt
(
TABLESIZE
 * 
	`n‹mÆ
(
x
, 0.0, 1.0));

33 
èbÀ
[
i
] = 
x
;

37 
	`¥ötf
("# This isÅhe distributionÅable forÅheÇormal distribution.\n");

38 
i
 = 
n
 = 0; i < 
TABLESIZE
; i += 4) {

39 
vÆue
 = (Ë
	`röt
(
èbÀ
[
i
]*
TABLEFACTOR
);

40 i‡(
vÆue
 < 
SHRT_MIN
) value = SHRT_MIN;

41 i‡(
vÆue
 > 
SHRT_MAX
) value = SHRT_MAX;

43 
	`¥ötf
(" %d", 
vÆue
);

44 i‡(++
n
 == 8) {

45 
	`putch¨
('\n');

46 
n
 = 0;

51 
	}
}

	@netem/pareto.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<m©h.h
>

8 
	~<limôs.h
>

10 
	~<löux/ty≥s.h
>

11 
	~<löux/pkt_sched.h
>

13 c⁄° 
	ga
=3.0;

14 
	#TABLESIZE
 16384

	)

15 
	#TABLEFACTOR
 
NETEM_DIST_SCALE


	)

18 
	$maö
(
¨gc
, **
¨gv
)

20 
i
, 
n
;

21 
dvÆue
;

23 
	`¥ötf
("# This isÅhe distributionÅable forÅheÖareto distribution.\n");

25 
i
 = 65536, 
n
 = 0; i > 0; i -= 16) {

26 
dvÆue
 = ()
i
/()65536;

27 
dvÆue
 = 1.0/
	`pow
(dvÆue, 1.0/
a
);

28 
dvÆue
 -= 1.5;

29 
dvÆue
 *(4.0/3.0)*()
TABLEFACTOR
;

30 i‡(
dvÆue
 > 32767)

31 
dvÆue
 = 32767;

33 
	`¥ötf
(" %d", ()
	`röt
(
dvÆue
));

34 i‡(++
n
 == 8) {

35 
	`putch¨
('\n');

36 
n
 = 0;

41 
	}
}

	@netem/paretonormal.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<m©h.h
>

17 
	~<limôs.h
>

18 
	~<mÆloc.h
>

20 
	~<löux/ty≥s.h
>

21 
	~<löux/pkt_sched.h
>

23 
	#TABLESIZE
 16384

	)

24 
	#TABLEFACTOR
 
NETEM_DIST_SCALE


	)

27 
	$n‹mÆ
(
x
, 
mu
, 
sigma
)

29  .5 + .5*
	`îf
((
x
-
mu
)/(
	`sqπ
(2.0)*
sigma
));

30 
	}
}

32 c⁄° 
	ga
=3.0;

35 
	$∑ªtovÆue
(
i
)

37 
dvÆue
;

39 
i
 = 65536-4*i;

40 
dvÆue
 = ()
i
/()65536;

41 
dvÆue
 = 1.0/
	`pow
(dvÆue, 1.0/
a
);

42 
dvÆue
 -= 1.5;

43 
dvÆue
 *(4.0/3.0)*()
TABLEFACTOR
;

44 i‡(
dvÆue
 > 32767)

45 
dvÆue
 = 32767;

46  ()
	`röt
(
dvÆue
);

47 
	}
}

50 
	$maö
(
¨gc
, **
¨gv
)

52 
i
,
n
;

53 
x
;

54 
èbÀ
[
TABLESIZE
+1];

56 
x
 = -10.0; x < 10.05; x += .00005) {

57 
i
 = 
	`röt
(
TABLESIZE
*
	`n‹mÆ
(
x
, 0.0, 1.0));

58 
èbÀ
[
i
] = 
x
;

60 
	`¥ötf
(

64 
i
 = 
n
 = 0; i < 
TABLESIZE
; i += 4) {

65 
n‹mvÆue
, 
∑rvÆue
, 
vÆue
;

67 
n‹mvÆue
 = (Ë
	`röt
(
èbÀ
[
i
]*
TABLEFACTOR
);

68 
∑rvÆue
 = 
	`∑ªtovÆue
(
i
);

70 
vÆue
 = (
n‹mvÆue
+3*
∑rvÆue
)/4;

71 i‡(
vÆue
 < 
SHRT_MIN
) value = SHRT_MIN;

72 i‡(
vÆue
 > 
SHRT_MAX
) value = SHRT_MAX;

74 
	`¥ötf
(" %d", 
vÆue
);

75 i‡(++
n
 == 8) {

76 
	`putch¨
('\n');

77 
n
 = 0;

82 
	}
}

	@netem/stats.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<m©h.h
>

13 
	~<mÆloc.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/°©.h
>

18 
	$°©s
(
FILE
 *
Â
)

20 
°©
 
öfo
;

21 *
x
;

22 
limô
;

23 
n
=0, 
i
;

24 
mu
=0.0, 
sigma
=0.0, 
sumsqu¨e
=0.0, 
sum
=0.0, 
t›
=0.0, 
rho
=0.0;

25 
sigma2
=0.0;

27 
	`f°©
(
	`fûío
(
Â
), &
öfo
);

28 i‡(
öfo
.
°_size
 > 0) {

29 
limô
 = 2*
öfo
.
°_size
/();

31 
limô
 = 10000;

33 
x
 = (*)
	`mÆloc
(
limô
*());

35 
i
=0; i<
limô
; ++i){

36 
	`fsˇnf
(
Â
, "%lf", &
x
[
i
]);

37 i‡(
	`„of
(
Â
))

39 
sumsqu¨e
 +
x
[
i
]*x[i];

40 
sum
 +
x
[
i
];

41 ++
n
;

43 
mu
 = 
sum
/()
n
;

44 
sigma
 = 
	`sqπ
((
sumsqu¨e
 - ()
n
*
mu
*mu)/()(n-1));

46 
i
=1; i < 
n
; ++i){

47 
t›
 +(()
x
[
i
]-
mu
)*(()x[i-1]-mu);

48 
sigma2
 +(()
x
[
i
-1] - 
mu
)*(()x[i-1] - mu);

51 
rho
 = 
t›
/
sigma2
;

53 
	`¥ötf
("mu = %12.6f\n", 
mu
);

54 
	`¥ötf
("sigm®%12.6f\n", 
sigma
);

55 
	`¥ötf
("rhÿ %12.6f\n", 
rho
);

58 
	}
}

62 
	$maö
(
¨gc
, **
¨gv
)

64 
FILE
 *
Â
;

66 i‡(
¨gc
 > 1) {

67 
Â
 = 
	`f›í
(
¨gv
[1], "r");

68 i‡(!
Â
) {

69 
	`≥º‹
(
¨gv
[1]);

70 
	`exô
(1);

73 
Â
 = 
°dö
;

75 
	`°©s
(
Â
);

77 
	}
}

	@tc/e_bpf.c

12 
	~<°dio.h
>

13 
	~<uni°d.h
>

15 
	~"utûs.h
"

17 
	~"tc_utû.h
"

18 
	~"tc_bpf.h
"

20 
	~"bpf_ñf.h
"

21 
	~"bpf_scm.h
"

23 
	#BPF_DEFAULT_CMD
 "/bö/sh"

	)

25 *
	g¨gv_deÁu…
[] = { 
BPF_DEFAULT_CMD
, 
NULL
 };

27 
	$ex∂aö
()

29 
	`Ârötf
(
°dîr
, "Usage: ... bpf [ import UDS_FILE ] [Ñun CMD ]\n\n");

30 
	`Ârötf
(
°dîr
, "Where UDS_FILEÖrovidesÅheÇame ofá unix domain socket file\n");

31 
	`Ârötf
(
°dîr
, "to importÉBPF mapsándÅhe optional CMD denotesÅhe command\n");

32 
	`Ârötf
(
°dîr
, "tÿbêexecuãd (deÁu…: \'%s\').\n", 
BPF_DEFAULT_CMD
);

33 
	}
}

35 
	$bpf_num_ív_íåõs
()

37 **
ívp
;

38 
num
;

40 
num
 = 0, 
ívp
 = 
ívú⁄
; *ív∞!
NULL
;Énvp++)

41 
num
++;

42  
num
;

43 
	}
}

45 
	$∑r£_bpf
(
exec_utû
 *
eu
, 
¨gc
, **
¨gv
)

47 **
¨gv_run
 = 
¨gv_deÁu…
, **
ívp_run
, *
tmp
;

48 
ªt
, 
i
, 
ív_ﬁd
, 
ív_num
, 
ív_m≠
;

49 c⁄° *
bpf_uds_«me
 = 
NULL
;

50 
fds
[
BPF_SCM_MAX_FDS
];

51 
bpf_m≠_aux
 
aux
;

53 i‡(
¨gc
 == 0)

56 
¨gc
 > 0) {

57 i‡(
	`m©ches
(*
¨gv
, "run") == 0) {

58 
	`NEXT_ARG
();

59 
¨gv_run
 = 
¨gv
;

61 } i‡(
	`m©ches
(*
¨gv
, "import") == 0 ||

62 
	`m©ches
(*
¨gv
, "imp") == 0) {

63 
	`NEXT_ARG
();

64 
bpf_uds_«me
 = *
¨gv
;

66 
	`ex∂aö
();

70 
¨gc
--;

71 
¨gv
++;

74 i‡(!
bpf_uds_«me
) {

75 
	`Ârötf
(
°dîr
, "bpf: No importÖarameterÖrovided!\n");

76 
	`ex∂aö
();

80 i‡(
¨gv_run
 !
¨gv_deÁu…
 && 
¨gc
 == 0) {

81 
	`Ârötf
(
°dîr
, "bpf: NoÑun commandÖrovided!\n");

82 
	`ex∂aö
();

86 
	`mem£t
(
fds
, 0, (fds));

87 
	`mem£t
(&
aux
, 0, (aux));

89 
ªt
 = 
	`bpf_ªcv_m≠_fds
(
bpf_uds_«me
, 
fds
, &
aux
, 
	`ARRAY_SIZE
(fds));

90 i‡(
ªt
 < 0) {

91 
	`Ârötf
(
°dîr
, "bpf: CouldÇotÑeceive fds!\n");

95 i‡(
aux
.
num_ít
 == 0) {

96 
ívp_run
 = 
ívú⁄
;

97 
out
;

100 
ív_ﬁd
 = 
	`bpf_num_ív_íåõs
();

101 
ív_num
 = 
ív_ﬁd
 + 
aux
.
num_ít
 + 2;

102 
ív_m≠
 = 
ív_ﬁd
 + 1;

104 
ívp_run
 = 
	`mÆloc
((*ívp_runË* 
ív_num
);

105 i‡(!
ívp_run
) {

106 
	`Ârötf
(
°dîr
, "bpf: No memoryÜeftÅoállocateÉnv!\n");

107 
îr
;

110 
i
 = 0; i < 
ív_ﬁd
; i++)

111 
ívp_run
[
i
] = 
ívú⁄
[i];

113 
ªt
 = 
	`a•rötf
(&
tmp
, "BPF_NUM_MAPS=%u", 
aux
.
num_ít
);

114 i‡(
ªt
 < 0)

115 
îr_‰ì
;

117 
ívp_run
[
ív_ﬁd
] = 
tmp
;

119 
i
 = 
ív_m≠
; i < 
ív_num
 - 1; i++) {

120 
ªt
 = 
	`a•rötf
(&
tmp
, "BPF_MAP%u=%u",

121 
aux
.
ít
[
i
 - 
ív_m≠
].
id
,

122 
fds
[
i
 - 
ív_m≠
]);

123 i‡(
ªt
 < 0)

124 
îr_‰ì_ív
;

126 
ívp_run
[
i
] = 
tmp
;

129 
ívp_run
[
ív_num
 - 1] = 
NULL
;

130 
out
:

131  
	`execv≥
(
¨gv_run
[0],árgv_run, 
ívp_run
);

133 
îr_‰ì_ív
:

134 --
i
; i >
ív_ﬁd
; i--)

135 
	`‰ì
(
ívp_run
[
i
]);

136 
îr_‰ì
:

137 
	`‰ì
(
ívp_run
);

138 
îr
:

139 
i
 = 0; i < 
aux
.
num_ít
; i++)

140 
	`˛o£
(
fds
[
i
]);

142 
	}
}

144 
exec_utû
 
	gbpf_exec_utû
 = {

145 .
id
 = "bpf",

146 .
	g∑r£_e›t
 = 
∑r£_bpf
,

	@tc/em_canid.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~<sy¶og.h
>

24 
	~<f˙é.h
>

25 
	~<sys/sockë.h
>

26 
	~<√töë/ö.h
>

27 
	~<¨∑/öë.h
>

28 
	~<°rög.h
>

29 
	~<î∫o.h
>

30 
	~<löux/ˇn.h
>

31 
	~<öây≥s.h
>

32 
	~"m_em©ch.h
"

34 
	#EM_CANID_RULES_MAX
 400

	)

40 
em©ch_utû
 
ˇnid_em©ch_utû
;

41 
	sruÀs
 {

42 
ˇn_fûãr
 *
	mruÀs_øw
;

43 
	mruÀs_ˇ∑côy
;

44 
	mruÀs_˙t
;

47 
	$ˇnid_¥öt_ußge
(
FILE
 *
fd
)

49 
	`Ârötf
(
fd
,

56 
	}
}

58 
	$ˇnid_∑r£_ruÀ
(
ruÀs
 *ruÀs, 
b°r
 *
a
, 
i£ff
)

60 
ˇn_id
 = 0;

61 
ˇn_mask
 = 0;

63 i‡(
	`ssˇnf
(
a
->
d©a
, "%"
SCNx32
 ":" "%"SCNx32, &
ˇn_id
, &
ˇn_mask
) != 2) {

64 i‡(
	`ssˇnf
(
a
->
d©a
, "%"
SCNx32
, &
ˇn_id
) != 1) {

67 
ˇn_mask
 = (
i£ff
Ë? 
CAN_EFF_MASK
 : 
CAN_SFF_MASK
;

72 i‡(
ruÀs
->
ruÀs_˙t
 =ruÀs->
ruÀs_ˇ∑côy
) {

73 i‡(
ruÀs
->
ruÀs_ˇ∑côy
 <
EM_CANID_RULES_MAX
/2) {

74 
ruÀs
->
ruÀs_ˇ∑côy
 *= 2;

75 
ruÀs
->
ruÀs_øw
 = 
	`ªÆloc
(rules->rules_raw,

76 (
ˇn_fûãr
Ë* 
ruÀs
->
ruÀs_ˇ∑côy
);

82 
ruÀs
->
ruÀs_øw
[ruÀs->
ruÀs_˙t
].
ˇn_id
 =

83 
ˇn_id
 | ((
i£ff
Ë? 
CAN_EFF_FLAG
 : 0);

84 
ruÀs
->
ruÀs_øw
[ruÀs->
ruÀs_˙t
].
ˇn_mask
 =

85 
ˇn_mask
 | 
CAN_EFF_FLAG
;

87 
ruÀs
->
ruÀs_˙t
++;

90 
	}
}

92 
	$ˇnid_∑r£_e›t
(
∆msghdr
 *
n
, 
tcf_em©ch_hdr
 *
hdr
,

93 
b°r
 *
¨gs
)

95 
i£ff
 = 0;

96 
ªt
 = 0;

97 
ruÀs
Ñules = {

98 .
ruÀs_ˇ∑côy
 = 25,

100 .
ruÀs_˙t
 = 0

103 
	#PARSE_ERR
(
CARG
, 
FMT
, 
ARGS
...) \

104 
	`em_∑r£_îr‹
(
EINVAL
, 
¨gs
, 
CARG
, &
ˇnid_em©ch_utû
, 
FMT
, ##
ARGS
)

	)

106 i‡(
¨gs
 =
NULL
)

107  
	`PARSE_ERR
(
¨gs
, "canid: missingárguments");

109 
ruÀs
.
ruÀs_øw
 = 
	`mÆloc
((
ˇn_fûãr
Ë*ÑuÀs.
ruÀs_ˇ∑côy
);

110 
	`mem£t
(
ruÀs
.
ruÀs_øw
, 0, (
ˇn_fûãr
Ë*ÑuÀs.
ruÀs_ˇ∑côy
);

113 i‡(!
	`b°rcmp
(
¨gs
, "sff")) {

114 
i£ff
 = 0;

115 } i‡(!
	`b°rcmp
(
¨gs
, "eff")) {

116 
i£ff
 = 1;

118 
ªt
 = 
	`PARSE_ERR
(
¨gs
, "canid: invalid key");

119 
exô
;

122 
¨gs
 = 
	`b°r_√xt
(args);

123 i‡(
¨gs
 =
NULL
) {

124 
ªt
 = 
	`PARSE_ERR
(
¨gs
, "canid: missingárgument");

125 
exô
;

128 
ªt
 = 
	`ˇnid_∑r£_ruÀ
(&
ruÀs
, 
¨gs
, 
i£ff
);

129 i‡(
ªt
 == -1) {

130 
ªt
 = 
	`PARSE_ERR
(
¨gs
, "canid: Improperly formed CAN ID & mask\n");

131 
exô
;

132 } i‡(
ªt
 == -2) {

133 
ªt
 = 
	`PARSE_ERR
(
¨gs
, "canid: Too manyárguments on input\n");

134 
exô
;

136 } (
¨gs
 = 
	`b°r_√xt
◊rgs)Ë!
NULL
);

138 
	`addøw_l
(
n
, 
MAX_MSG
, 
hdr
, (*hdr));

139 
	`addøw_l
(
n
, 
MAX_MSG
, 
ruÀs
.
ruÀs_øw
,

140 (
ˇn_fûãr
Ë* 
ruÀs
.
ruÀs_˙t
);

142 #unde‡
PARSE_ERR


143 
exô
:

144 
	`‰ì
(
ruÀs
.
ruÀs_øw
);

145  
ªt
;

146 
	}
}

148 
	$ˇnid_¥öt_e›t
(
FILE
 *
fd
, 
tcf_em©ch_hdr
 *
hdr
, *
d©a
,

149 
d©a_Àn
)

151 
ˇn_fûãr
 *
c⁄f
 = 
d©a
;

152 
ruÀs_cou¡
;

153 
i
;

155 
ruÀs_cou¡
 = 
d©a_Àn
 / (
ˇn_fûãr
);

157 
i
 = 0; i < 
ruÀs_cou¡
; i++) {

158 
ˇn_fûãr
 *
pcÊå
 = &
c⁄f
[
i
];

160 i‡(
pcÊå
->
ˇn_id
 & 
CAN_EFF_FLAG
) {

161 i‡(
pcÊå
->
ˇn_mask
 =(
CAN_EFF_FLAG
 | 
CAN_EFF_MASK
))

162 
	`Ârötf
(
fd
, "ef‡0x%"
PRIX32
,

163 
pcÊå
->
ˇn_id
 & 
CAN_EFF_MASK
);

165 
	`Ârötf
(
fd
, "ef‡0x%"
PRIX32
":0x%"PRIX32,

166 
pcÊå
->
ˇn_id
 & 
CAN_EFF_MASK
,

167 
pcÊå
->
ˇn_mask
 & 
CAN_EFF_MASK
);

169 i‡(
pcÊå
->
ˇn_mask
 =(
CAN_EFF_FLAG
 | 
CAN_SFF_MASK
))

170 
	`Ârötf
(
fd
, "sf‡0x%"
PRIX32
,

171 
pcÊå
->
ˇn_id
 & 
CAN_SFF_MASK
);

173 
	`Ârötf
(
fd
, "sf‡0x%"
PRIX32
":0x%"PRIX32,

174 
pcÊå
->
ˇn_id
 & 
CAN_SFF_MASK
,

175 
pcÊå
->
ˇn_mask
 & 
CAN_SFF_MASK
);

178 i‡((
i
 + 1Ë< 
ruÀs_cou¡
)

179 
	`Ârötf
(
fd
, " ");

183 
	}
}

185 
em©ch_utû
 
	gˇnid_em©ch_utû
 = {

186 .
köd
 = "canid",

187 .
	gköd_num
 = 
TCF_EM_CANID
,

188 .
	g∑r£_e›t
 = 
ˇnid_∑r£_e›t
,

189 .
	g¥öt_e›t
 = 
ˇnid_¥öt_e›t
,

190 .
	g¥öt_ußge
 = 
ˇnid_¥öt_ußge


	@tc/em_cmp.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

21 
	~<î∫o.h
>

23 
	~"m_em©ch.h
"

24 
	~<löux/tc_em©ch/tc_em_cmp.h
>

26 
em©ch_utû
 
cmp_em©ch_utû
;

28 
	$cmp_¥öt_ußge
(
FILE
 *
fd
)

30 
	`Ârötf
(
fd
,

37 
TCF_LAYER_MAX
);

38 
	}
}

40 
	$cmp_∑r£_e›t
(
∆msghdr
 *
n
, 
tcf_em©ch_hdr
 *
hdr
,

41 
b°r
 *
¨gs
)

43 
b°r
 *
a
;

44 
Æign
, 
›nd
 = 0;

45 
off£t
 = 0, 
œyî
 = 
TCF_LAYER_NETWORK
, 
mask
 = 0, 
vÆue
 = 0;

46 
off£t_¥e£¡
 = 0, 
vÆue_¥e£¡
 = 0;

47 
tcf_em_cmp
 
cmp
;

49 
	`mem£t
(&
cmp
, 0, (cmp));

51 
	#PARSE_ERR
(
CARG
, 
FMT
, 
ARGS
...) \

52 
	`em_∑r£_îr‹
(
EINVAL
, 
¨gs
, 
CARG
, &
cmp_em©ch_utû
, 
FMT
 ,##
ARGS
)

	)

54 i‡(
¨gs
 =
NULL
)

55  
	`PARSE_ERR
(
¨gs
, "cmp: missingárguments");

57 i‡(!
	`b°rcmp
(
¨gs
, "u8"))

58 
Æign
 = 
TCF_EM_ALIGN_U8
;

59 i‡(!
	`b°rcmp
(
¨gs
, "u16"))

60 
Æign
 = 
TCF_EM_ALIGN_U16
;

61 i‡(!
	`b°rcmp
(
¨gs
, "u32"))

62 
Æign
 = 
TCF_EM_ALIGN_U32
;

64  
	`PARSE_ERR
(
¨gs
, "cmp: invalidálignment");

66 
a
 = 
	`b°r_√xt
(
¨gs
);á;á = bstr_next(a)) {

67 i‡(!
	`b°rcmp
(
a
, "at")) {

68 i‡(
a
->
√xt
 =
NULL
)

69  
	`PARSE_ERR
(
a
, "cmp: missingárgument");

70 
a
 = 
	`b°r_√xt
(a);

72 
off£t
 = 
	`b°πoul
(
a
);

73 i‡(
off£t
 =
ULONG_MAX
)

74  
	`PARSE_ERR
(
a
, "cmp: invalid offset, " \

77 
off£t_¥e£¡
 = 1;

78 } i‡(!
	`b°rcmp
(
a
, "layer")) {

79 i‡(
a
->
√xt
 =
NULL
)

80  
	`PARSE_ERR
(
a
, "cmp: missingárgument");

81 
a
 = 
	`b°r_√xt
(a);

83 
œyî
 = 
	`∑r£_œyî
(
a
);

84 i‡(
œyî
 =
INT_MAX
) {

85 
œyî
 = 
	`b°πoul
(
a
);

86 i‡(
œyî
 =
ULONG_MAX
)

87  
	`PARSE_ERR
(
a
, "cmp: invalid " \

91 i‡(
œyî
 > 
TCF_LAYER_MAX
)

92  
	`PARSE_ERR
(
a
, "cmp: illegalÜayer, " \

93 "mu° bêö 0..%d", 
TCF_LAYER_MAX
);

94 } i‡(!
	`b°rcmp
(
a
, "mask")) {

95 i‡(
a
->
√xt
 =
NULL
)

96  
	`PARSE_ERR
(
a
, "cmp: missingárgument");

97 
a
 = 
	`b°r_√xt
(a);

99 
mask
 = 
	`b°πoul
(
a
);

100 i‡(
mask
 =
ULONG_MAX
)

101  
	`PARSE_ERR
(
a
, "cmp: invalid mask");

102 } i‡(!
	`b°rcmp
(
a
, "trans")) {

103 
cmp
.
Êags
 |
TCF_EM_CMP_TRANS
;

104 } i‡(!
	`b°rcmp
(
a
, "eq") || !bstrcmp(a, "gt") ||

105 !
	`b°rcmp
(
a
, "lt")) {

107 i‡(!
	`b°rcmp
(
a
, "eq"))

108 
›nd
 = 
TCF_EM_OPND_EQ
;

109 i‡(!
	`b°rcmp
(
a
, "gt"))

110 
›nd
 = 
TCF_EM_OPND_GT
;

111 i‡(!
	`b°rcmp
(
a
, "lt"))

112 
›nd
 = 
TCF_EM_OPND_LT
;

114 i‡(
a
->
√xt
 =
NULL
)

115  
	`PARSE_ERR
(
a
, "cmp: missingárgument");

116 
a
 = 
	`b°r_√xt
(a);

118 
vÆue
 = 
	`b°πoul
(
a
);

119 i‡(
vÆue
 =
ULONG_MAX
)

120  
	`PARSE_ERR
(
a
, "cmp: invalid value");

122 
vÆue_¥e£¡
 = 1;

124  
	`PARSE_ERR
(
a
, "nbyte: unknownÖarameter");

127 i‡(
off£t_¥e£¡
 =0 || 
vÆue_¥e£¡
 == 0)

128  
	`PARSE_ERR
(
a
, "cmp: offsetánd valueÑequired");

130 
cmp
.
vÆ
 = (
__u32
Ë
vÆue
;

131 
cmp
.
mask
 = (
__u32
) mask;

132 
cmp
.
off
 = (
__u16
Ë
off£t
;

133 
cmp
.
Æign
 = (
__u8
)álign;

134 
cmp
.
œyî
 = (
__u8
)Üayer;

135 
cmp
.
›nd
 = (
__u8
) opnd;

137 
	`addøw_l
(
n
, 
MAX_MSG
, 
hdr
, (*hdr));

138 
	`addøw_l
(
n
, 
MAX_MSG
, &
cmp
, (cmp));

140 #unde‡
PARSE_ERR


142 
	}
}

144 
	$cmp_¥öt_e›t
(
FILE
 *
fd
, 
tcf_em©ch_hdr
 *
hdr
, *
d©a
,

145 
d©a_Àn
)

147 
tcf_em_cmp
 *
cmp
 = 
d©a
;

149 i‡(
d©a_Àn
 < (*
cmp
)) {

150 
	`Ârötf
(
°dîr
, "CMP header size mismatch\n");

154 i‡(
cmp
->
Æign
 =
TCF_EM_ALIGN_U8
)

155 
	`Ârötf
(
fd
, "u8 ");

156 i‡(
cmp
->
Æign
 =
TCF_EM_ALIGN_U16
)

157 
	`Ârötf
(
fd
, "u16 ");

158 i‡(
cmp
->
Æign
 =
TCF_EM_ALIGN_U32
)

159 
	`Ârötf
(
fd
, "u32 ");

161 
	`Ârötf
(
fd
, "© %dÜayî %d ", 
cmp
->
off
, cmp->
œyî
);

163 i‡(
cmp
->
mask
)

164 
	`Ârötf
(
fd
, "mask 0x%x ", 
cmp
->
mask
);

166 i‡(
cmp
->
Êags
 & 
TCF_EM_CMP_TRANS
)

167 
	`Ârötf
(
fd
, "trans ");

169 i‡(
cmp
->
›nd
 =
TCF_EM_OPND_EQ
)

170 
	`Ârötf
(
fd
, "eq ");

171 i‡(
cmp
->
›nd
 =
TCF_EM_OPND_LT
)

172 
	`Ârötf
(
fd
, "lt ");

173 i‡(
cmp
->
›nd
 =
TCF_EM_OPND_GT
)

174 
	`Ârötf
(
fd
, "gt ");

176 
	`Ârötf
(
fd
, "%d", 
cmp
->
vÆ
);

179 
	}
}

181 
em©ch_utû
 
	gcmp_em©ch_utû
 = {

182 .
köd
 = "cmp",

183 .
	gköd_num
 = 
TCF_EM_CMP
,

184 .
	g∑r£_e›t
 = 
cmp_∑r£_e›t
,

185 .
	g¥öt_e›t
 = 
cmp_¥öt_e›t
,

186 .
	g¥öt_ußge
 = 
cmp_¥öt_ußge


	@tc/em_ipset.c

17 
	~<°dboﬁ.h
>

18 
	~<°dio.h
>

19 
	~<î∫o.h
>

20 
	~<√tdb.h
>

21 
	~<uni°d.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<gë›t.h
>

26 
	~<xèbÀs.h
>

27 
	~<löux/√tfûãr/ù£t/ù_£t.h
>

29 #i‚de‡
IPSET_INVALID_ID


30 
__u16
 
	tù_£t_id_t
;

32 
	eù_£t_dim
 {

33 
	mIPSET_DIM_ZERO
 = 0,

34 
	mIPSET_DIM_ONE
,

35 
	mIPSET_DIM_TWO
,

36 
	mIPSET_DIM_THREE
,

37 
	mIPSET_DIM_MAX
 = 6,

41 
	~<löux/√tfûãr/xt_£t.h
>

42 
	~"m_em©ch.h
"

44 #i‚de‡
IPSET_INVALID_ID


45 
	#IPSET_INVALID_ID
 65535

	)

46 
	#SO_IP_SET
 83

	)

48 
	uù_£t_«me_ödex
 {

49 
	m«me
[
IPSET_MAXNAMELEN
];

50 
__u16
 
	mödex
;

53 
	#IP_SET_OP_GET_BYNAME
 0x00000006

	)

54 
	sù_£t_ªq_gë_£t
 {

55 
	m›
;

56 
	mvîsi⁄
;

57 
ù_£t_«me_ödex
 
	m£t
;

60 
	#IP_SET_OP_GET_BYINDEX
 0x00000007

	)

63 
	#IP_SET_OP_VERSION
 0x00000100

	)

64 
	sù_£t_ªq_vîsi⁄
 {

65 
	m›
;

66 
	mvîsi⁄
;

70 
em©ch_utû
 
ù£t_em©ch_utû
;

72 
	$gë_vîsi⁄
(*
vîsi⁄
)

74 
ªs
, 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_RAW
);

75 
ù_£t_ªq_vîsi⁄
 
ªq_vîsi⁄
;

76 
sockÀn_t
 
size
 = (
ªq_vîsi⁄
);

78 i‡(
sockfd
 < 0) {

79 
	`Âuts
("C™'à›í sockëÅÿù£t.\n", 
°dîr
);

83 
ªq_vîsi⁄
.
›
 = 
IP_SET_OP_VERSION
;

84 
ªs
 = 
	`gësock›t
(
sockfd
, 
SOL_IP
, 
SO_IP_SET
, &
ªq_vîsi⁄
, &
size
);

85 i‡(
ªs
 != 0) {

86 
	`≥º‹
("xt_set getsockopt");

90 *
vîsi⁄
 = 
ªq_vîsi⁄
.version;

91  
sockfd
;

92 
	}
}

94 
	$do_gësock›t
(
ù_£t_ªq_gë_£t
 *
ªq
)

96 
sockfd
, 
ªs
;

97 
sockÀn_t
 
size
 = (
ù_£t_ªq_gë_£t
);

98 
sockfd
 = 
	`gë_vîsi⁄
(&
ªq
->
vîsi⁄
);

99 i‡(
sockfd
 < 0)

101 
ªs
 = 
	`gësock›t
(
sockfd
, 
SOL_IP
, 
SO_IP_SET
, 
ªq
, &
size
);

102 i‡(
ªs
 != 0)

103 
	`≥º‹
("Problem when communicating with ipset");

104 
	`˛o£
(
sockfd
);

105 i‡(
ªs
 != 0)

108 i‡(
size
 !(
ù_£t_ªq_gë_£t
)) {

109 
	`Ârötf
(
°dîr
,

112 (
ù_£t_ªq_gë_£t
), (
size_t
)
size
);

116  
ªs
;

117 
	}
}

120 
	$gë_£t_byid
(*
£äame
, 
idx
)

122 
ù_£t_ªq_gë_£t
 
ªq
;

123 
ªs
;

125 
ªq
.
›
 = 
IP_SET_OP_GET_BYINDEX
;

126 
ªq
.
£t
.
ödex
 = 
idx
;

127 
ªs
 = 
	`do_gësock›t
(&
ªq
);

128 i‡(
ªs
 != 0)

130 i‡(
ªq
.
£t
.
«me
[0] == '\0') {

131 
	`Ârötf
(
°dîr
,

132 "Së wôh index %òö kî√»d€¢'àexi°.\n", 
idx
);

136 
	`°∫˝y
(
£äame
, 
ªq
.
£t
.
«me
, 
IPSET_MAXNAMELEN
);

138 
	}
}

141 
	$gë_£t_by«me
(c⁄° *
£äame
, 
xt_£t_öfo
 *
öfo
)

143 
ù_£t_ªq_gë_£t
 
ªq
;

144 
ªs
;

146 
ªq
.
›
 = 
IP_SET_OP_GET_BYNAME
;

147 
	`°∫˝y
(
ªq
.
£t
.
«me
, 
£äame
, 
IPSET_MAXNAMELEN
);

148 
ªq
.
£t
.
«me
[
IPSET_MAXNAMELEN
 - 1] = '\0';

149 
ªs
 = 
	`do_gësock›t
(&
ªq
);

150 i‡(
ªs
 != 0)

152 i‡(
ªq
.
£t
.
ödex
 =
IPSET_INVALID_ID
)

154 
öfo
->
ödex
 = 
ªq
.
£t
.index;

156 
	}
}

159 
	$∑r£_dús
(c⁄° *
›t_¨g
, 
xt_£t_öfo
 *
öfo
)

161 *
ßved
 = 
	`°rdup
(
›t_¨g
);

162 *
±r
, *
tmp
 = 
ßved
;

164 i‡(!
tmp
) {

165 
	`≥º‹
("strdup");

169 
öfo
->
dim
 < 
IPSET_DIM_MAX
 && 
tmp
 !
NULL
) {

170 
öfo
->
dim
++;

171 
±r
 = 
	`°r£p
(&
tmp
, ",");

172 i‡(
	`°∫cmp
(
±r
, "src", 3) == 0)

173 
öfo
->
Êags
 |(1 << info->
dim
);

174 i‡(
	`°∫cmp
(
±r
, "dst", 3) != 0) {

175 
	`Âuts
("You mu° s≥cify (thêcomm®£∑øãdÜi° ofË'§c' o∏'d°'\n", 
°dîr
);

176 
	`‰ì
(
ßved
);

181 i‡(
tmp
)

182 
	`Ârötf
(
°dîr
, "C™'àbêm‹ê§c/d° o±i⁄†th™ %u", 
IPSET_DIM_MAX
);

183 
	`‰ì
(
ßved
);

184  
tmp
 ? -1 : 0;

185 
	}
}

187 
	$ù£t_¥öt_ußge
(
FILE
 *
fd
)

189 
	`Ârötf
(
fd
,

196 
	}
}

198 
	$ù£t_∑r£_e›t
(
∆msghdr
 *
n
, 
tcf_em©ch_hdr
 *
hdr
,

199 
b°r
 *
¨gs
)

201 
xt_£t_öfo
 
£t_öfo
;

202 
ªt
;

204 
	`mem£t
(&
£t_öfo
, 0, (set_info));

206 
	#PARSE_ERR
(
CARG
, 
FMT
, 
ARGS
...) \

207 
	`em_∑r£_îr‹
(
EINVAL
, 
¨gs
, 
CARG
, &
ù£t_em©ch_utû
, 
FMT
 ,##
ARGS
)

	)

209 i‡(
¨gs
 =
NULL
)

210  
	`PARSE_ERR
(
¨gs
, "ipset: missing setÇame");

212 i‡(
¨gs
->
Àn
 >
IPSET_MAXNAMELEN
)

213  
	`PARSE_ERR
(
¨gs
, "ù£t: sëÇamêtoÿl⁄g (max %u)", 
IPSET_MAXNAMELEN
 - 1);

214 
ªt
 = 
	`gë_£t_by«me
(
¨gs
->
d©a
, &
£t_öfo
);

215 i‡(
ªt
 < 0)

216  
	`PARSE_ERR
(
¨gs
, "ù£t: unknow¿£à«mê'%s'",árgs->
d©a
);

218 i‡(
¨gs
->
√xt
 =
NULL
)

219  
	`PARSE_ERR
(
¨gs
, "ipset: missing set flags");

221 
¨gs
 = 
	`b°r_√xt
(args);

222 i‡(
	`∑r£_dús
(
¨gs
->
d©a
, &
£t_öfo
))

223  
	`PARSE_ERR
(
¨gs
, "ipset:ÉrrorÖarsing set flags");

225 i‡(
¨gs
->
√xt
) {

226 
¨gs
 = 
	`b°r_√xt
(args);

227  
	`PARSE_ERR
(
¨gs
, "ipset: unknownÖarameter");

230 
	`addøw_l
(
n
, 
MAX_MSG
, 
hdr
, (*hdr));

231 
	`addøw_l
(
n
, 
MAX_MSG
, &
£t_öfo
, (set_info));

233 #unde‡
PARSE_ERR


235 
	}
}

237 
	$ù£t_¥öt_e›t
(
FILE
 *
fd
, 
tcf_em©ch_hdr
 *
hdr
, *
d©a
,

238 
d©a_Àn
)

240 
i
;

241 
£äame
[
IPSET_MAXNAMELEN
];

242 c⁄° 
xt_£t_öfo
 *
£t_öfo
 = 
d©a
;

244 i‡(
d©a_Àn
 !(*
£t_öfo
)) {

245 
	`Ârötf
(
°dîr
, "xt_set_info struct size mismatch\n");

249 i‡(
	`gë_£t_byid
(
£äame
, 
£t_öfo
->
ödex
))

251 
	`Âuts
(
£äame
, 
fd
);

252 
i
 = 1; i <
£t_öfo
->
dim
; i++) {

253 
	`Ârötf
(
fd
, "%s%s", 
i
 =1 ? " " : ",", 
£t_öfo
->
Êags
 & (1 << i) ? "src" : "dst");

257 
	}
}

259 
em©ch_utû
 
	gù£t_em©ch_utû
 = {

260 .
köd
 = "ipset",

261 .
	gköd_num
 = 
TCF_EM_IPSET
,

262 .
	g∑r£_e›t
 = 
ù£t_∑r£_e›t
,

263 .
	g¥öt_e›t
 = 
ù£t_¥öt_e›t
,

264 .
	g¥öt_ußge
 = 
ù£t_¥öt_ußge


	@tc/em_meta.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

21 
	~<î∫o.h
>

23 
	~"m_em©ch.h
"

24 
	~<löux/tc_em©ch/tc_em_mëa.h
>

26 
em©ch_utû
 
mëa_em©ch_utû
;

28 
	$mëa_¥öt_ußge
(
FILE
 *
fd
)

30 
	`Ârötf
(
fd
,

40 
	}
}

42 
	smëa_íåy
 {

43 
	mid
;

44 * 
	mköd
;

45 * 
	mmask
;

46 * 
	mdesc
;

47 } 
	gmëa_èbÀ
[] = {

48 
	#TCF_META_ID_SECTION
 0

	)

49 
	#__A
(
id
, 
«me
, 
mask
, 
desc
Ë{ 
TCF_META_ID_
##id,Çame, mask, des¯}

	)

50 
__A
(
SECTION
, "Generic", "", ""),

51 
__A
(
RANDOM
, "random", "i",

53 
__A
(
LOADAVG_0
, "loadavg_1", "i",

55 
__A
(
LOADAVG_1
, "loadavg_5", "i",

57 
__A
(
LOADAVG_2
, "loadavg_15", "i",

60 
__A
(
SECTION
, "Interfaces", "", ""),

61 
__A
(
DEV
, "dev", "iv",

63 
__A
(
SECTION
, "Packetáttributes", "", ""),

64 
__A
(
PRIORITY
, "priority", "i",

66 
__A
(
PROTOCOL
, "protocol", "i",

68 
__A
(
PKTTYPE
, "pkt_type", "i",

70 
__A
(
PKTLEN
, "pkt_len", "i",

72 
__A
(
DATALEN
, "data_len", "i",

74 
__A
(
MACLEN
, "mac_len", "i",

77 
__A
(
SECTION
, "Netfilter", "", ""),

78 
__A
(
NFMARK
, "nf_mark", "i",

80 
__A
(
NFMARK
, "fwmark", "i",

83 
__A
(
SECTION
, "Traffic Control", "", ""),

84 
__A
(
TCINDEX
, "tc_index", "i", "TC Index"),

85 
__A
(
SECTION
, "Routing", "", ""),

86 
__A
(
RTCLASSID
, "rt_classid", "i",

88 
__A
(
RTIIF
, "rt_iif", "i",

90 
__A
(
VLAN_TAG
, "vlan", "i", "VlanÅag"),

92 
__A
(
SECTION
, "Sockets", "", ""),

93 
__A
(
SK_FAMILY
, "sk_family", "i", "Address family"),

94 
__A
(
SK_STATE
, "sk_state", "i", "State"),

95 
__A
(
SK_REUSE
, "sk_reuse", "i", "Reuse Flag"),

96 
__A
(
SK_BOUND_IF
, "sk_bind_if", "iv", "Bound interface"),

97 
__A
(
SK_REFCNT
, "sk_refcnt", "i", "Reference counter"),

98 
__A
(
SK_SHUTDOWN
, "sk_shutdown", "i", "Shutdown mask"),

99 
__A
(
SK_PROTO
, "sk_proto", "i", "Protocol"),

100 
__A
(
SK_TYPE
, "sk_type", "i", "Type"),

101 
__A
(
SK_RCVBUF
, "sk_rcvbuf", "i", "Receive buffer size"),

102 
__A
(
SK_RMEM_ALLOC
, "sk_rmem", "i", "RMEM"),

103 
__A
(
SK_WMEM_ALLOC
, "sk_wmem", "i", "WMEM"),

104 
__A
(
SK_OMEM_ALLOC
, "sk_omem", "i", "OMEM"),

105 
__A
(
SK_WMEM_QUEUED
, "sk_wmem_queue","i", "WMEM queue"),

106 
__A
(
SK_SND_QLEN
, "sk_snd_queue", "i", "Send queueÜength"),

107 
__A
(
SK_RCV_QLEN
, "sk_rcv_queue", "i", "Receive queueÜength"),

108 
__A
(
SK_ERR_QLEN
, "sk_err_queue", "i", "Error queueÜength"),

109 
__A
(
SK_FORWARD_ALLOCS
, "sk_fwd_alloc", "i", "Forwardállocations"),

110 
__A
(
SK_SNDBUF
, "sk_sndbuf", "i", "Send buffer size"),

111 #unde‡
__A


114 
ölöe
 
	$m≠_ty≥
(
k
)

116 
k
) {

117 'i':  
TCF_META_TYPE_INT
;

118 'v':  
TCF_META_TYPE_VAR
;

121 
	`Ârötf
(
°dîr
, "BUG: Unknow¿m≠ ch¨a˘î '%c'\n", 
k
);

122  
INT_MAX
;

123 
	}
}

125 
mëa_íåy
 * 
	$lookup_mëa_íåy
(
b°r
 *
köd
)

127 
i
;

129 
i
 = 0; i < ((
mëa_èbÀ
)/(meta_table[0])); i++)

130 i‡(!
	`b°rcmp
(
köd
, 
mëa_èbÀ
[
i
].kind) &&

131 
mëa_èbÀ
[
i
].
id
 != 0)

132  &
mëa_èbÀ
[
i
];

134  
NULL
;

135 
	}
}

137 
mëa_íåy
 * 
	$lookup_mëa_íåy_byid
(
id
)

139 
i
;

141 
i
 = 0; i < ((
mëa_èbÀ
)/(meta_table[0])); i++)

142 i‡(
mëa_èbÀ
[
i
].
id
 == id)

143  &
mëa_èbÀ
[
i
];

145  
NULL
;

146 
	}
}

148 
ölöe
 
	$dump_vÆue
(
∆msghdr
 *
n
, 
év
, 
vÆ
,

149 
tcf_mëa_vÆ
 *
hdr
)

151 
__u32
 
t
;

153 
	`TCF_META_TYPE
(
hdr
->
köd
)) {

154 
TCF_META_TYPE_INT
:

155 
t
 = 
vÆ
;

156 
	`add©å_l
(
n
, 
MAX_MSG
, 
év
, &
t
, (t));

159 
TCF_META_TYPE_VAR
:

160 i‡(
	`TCF_META_ID
(
hdr
->
köd
Ë=
TCF_META_ID_VALUE
) {

161 
b°r
 *
a
 = (b°∏*Ë
vÆ
;

162 
	`add©å_l
(
n
, 
MAX_MSG
, 
év
, 
a
->
d©a
,á->
Àn
);

166 
	}
}

168 
ölöe
 
	$is_com∑tibÀ
(
tcf_mëa_vÆ
 *
wh©
,

169 
tcf_mëa_vÆ
 *
√eded
)

171 *
p
;

172 
mëa_íåy
 *
íåy
;

174 
íåy
 = 
	`lookup_mëa_íåy_byid
(
	`TCF_META_ID
(
wh©
->
köd
));

176 i‡(
íåy
 =
NULL
)

179 
p
 = 
íåy
->
mask
;Ö;Ö++)

180 i‡(
	`m≠_ty≥
(*
p
Ë=
	`TCF_META_TYPE
(
√eded
->
köd
))

184 
	}
}

186 
	$li°_mëa_ids
(
FILE
 *
fd
)

188 
i
;

190 
	`Ârötf
(
fd
,

195 
i
 = 0; i < ((
mëa_èbÀ
)/(meta_table[0])); i++) {

196 i‡(
mëa_èbÀ
[
i
].
id
 =
TCF_META_ID_SECTION
) {

197 
	`Ârötf
(
fd
, "\n%s:\n", 
mëa_èbÀ
[
i
].
köd
);

199 *
p
 = 
mëa_èbÀ
[
i
].
mask
;

200 
buf
[64] = {0};

202 
	`Ârötf
(
fd
, " %-16†", 
mëa_èbÀ
[
i
].
köd
);

204 *
p
) {

205 
ty≥
 = 
	`m≠_ty≥
(*
p
);

207 
ty≥
) {

208 
TCF_META_TYPE_INT
:

209 
	`°rˇt
(
buf
, "INT");

212 
TCF_META_TYPE_VAR
:

213 
	`°rˇt
(
buf
, "VAR");

217 i‡(*(++
p
))

218 
	`°rˇt
(
buf
, ",");

221 
	`Ârötf
(
fd
, "%-10†%s\n", 
buf
, 
mëa_èbÀ
[
i
].
desc
);

225 
	`Ârötf
(
fd
,

227 
	}
}

229 #unde‡
TCF_META_ID_SECTION


231 
	#PARSE_FAILURE
 ((*Ë(-1))

	)

233 
	#PARSE_ERR
(
CARG
, 
FMT
, 
ARGS
...) \

234 
	`em_∑r£_îr‹
(
EINVAL
, 
¨gs
, 
CARG
, &
mëa_em©ch_utû
, 
FMT
 ,##
ARGS
)

	)

236 
ölöe
 
	$ˇn_ad›t
(
tcf_mëa_vÆ
 *
vÆ
)

238  !!
	`TCF_META_ID
(
vÆ
->
köd
);

239 
	}
}

241 
ölöe
 
	$ovîwrôe_ty≥
(
tcf_mëa_vÆ
 *
§c
,

242 
tcf_mëa_vÆ
 *
d°
)

244  (
	`TCF_META_TYPE
(
d°
->
köd
Ë<< 12Ë| 
	`TCF_META_ID
(
§c
->kind);

245 
	}
}

248 
ölöe
 
b°r
 *

249 
	$∑r£_obje˘
(
b°r
 *
¨gs
, b°∏*
¨g
, 
tcf_mëa_vÆ
 *
obj
,

250 *
d°
, 
tcf_mëa_vÆ
 *
À·
)

252 
mëa_íåy
 *
íåy
;

253 
num
;

254 
b°r
 *
a
;

256 i‡(
¨g
->
quŸed
) {

257 
obj
->
köd
 = 
TCF_META_TYPE_VAR
 << 12;

258 
obj
->
köd
 |
TCF_META_ID_VALUE
;

259 *
d°
 = (Ë
¨g
;

260  
	`b°r_√xt
(
¨g
);

263 
num
 = 
	`b°πoul
(
¨g
);

264 i‡(
num
 !
ULONG_MAX
) {

265 
obj
->
köd
 = 
TCF_META_TYPE_INT
 << 12;

266 
obj
->
köd
 |
TCF_META_ID_VALUE
;

267 *
d°
 = (Ë
num
;

268  
	`b°r_√xt
(
¨g
);

271 
íåy
 = 
	`lookup_mëa_íåy
(
¨g
);

273 i‡(
íåy
 =
NULL
) {

274 
	`PARSE_ERR
(
¨g
, "meta: unknown meta id\n");

275  
PARSE_FAILURE
;

278 
obj
->
köd
 = 
íåy
->
id
 | (
	`m≠_ty≥
”¡ry->
mask
[0]) << 12);

280 i‡(
À·
) {

281 
tcf_mëa_vÆ
 *
right
 = 
obj
;

283 i‡(
	`TCF_META_TYPE
(
right
->
köd
Ë=TCF_META_TYPE(
À·
->kind))

284 
com∑tibÀ
;

286 i‡(
	`ˇn_ad›t
(
À·
Ë&& !ˇn_ad›t(
right
)) {

287 i‡(
	`is_com∑tibÀ
(
À·
, 
right
))

288 
À·
->
köd
 = 
	`ovîwrôe_ty≥
÷e·, 
right
);

290 
nŸ_com∑tibÀ
;

291 } i‡(
	`ˇn_ad›t
(
right
Ë&& !ˇn_ad›t(
À·
)) {

292 i‡(
	`is_com∑tibÀ
(
right
, 
À·
))

293 
right
->
köd
 = 
	`ovîwrôe_ty≥
‘ight, 
À·
);

295 
nŸ_com∑tibÀ
;

296 } i‡(
	`ˇn_ad›t
(
À·
Ë&& c™_ad›t(
right
)) {

297 i‡(
	`is_com∑tibÀ
(
À·
, 
right
))

298 
À·
->
köd
 = 
	`ovîwrôe_ty≥
÷e·, 
right
);

299 i‡(
	`is_com∑tibÀ
(
right
, 
À·
))

300 
right
->
köd
 = 
	`ovîwrôe_ty≥
‘ight, 
À·
);

302 
nŸ_com∑tibÀ
;

304 
nŸ_com∑tibÀ
;

307 
com∑tibÀ
:

309 
a
 = 
	`b°r_√xt
(
¨g
);

311 
a
) {

312 i‡(!
	`b°rcmp
(
a
, "shift")) {

313 
shi·
;

315 i‡(
a
->
√xt
 =
NULL
) {

316 
	`PARSE_ERR
(
a
, "meta: missingárgument");

317  
PARSE_FAILURE
;

319 
a
 = 
	`b°r_√xt
(a);

321 
shi·
 = 
	`b°πoul
(
a
);

322 i‡(
shi·
 =
ULONG_MAX
) {

323 
	`PARSE_ERR
(
a
, "meta: invalid shift, must " \

325  
PARSE_FAILURE
;

328 
obj
->
shi·
 = (
__u8
) shift;

329 
a
 = 
	`b°r_√xt
(a);

330 } i‡(!
	`b°rcmp
(
a
, "mask")) {

331 
mask
;

333 i‡(
a
->
√xt
 =
NULL
) {

334 
	`PARSE_ERR
(
a
, "meta: missingárgument");

335  
PARSE_FAILURE
;

337 
a
 = 
	`b°r_√xt
(a);

339 
mask
 = 
	`b°πoul
(
a
);

340 i‡(
mask
 =
ULONG_MAX
) {

341 
	`PARSE_ERR
(
a
, "meta: invalid mask, must be " \

343  
PARSE_FAILURE
;

345 *
d°
 = (Ë
mask
;

346 
a
 = 
	`b°r_√xt
(a);

351  
a
;

353 
nŸ_com∑tibÀ
:

354 
	`PARSE_ERR
(
¨g
, "lvalueándÑvalueáreÇot compatible.");

355  
PARSE_FAILURE
;

356 
	}
}

358 
	$mëa_∑r£_e›t
(
∆msghdr
 *
n
, 
tcf_em©ch_hdr
 *
hdr
,

359 
b°r
 *
¨gs
)

361 
›nd
;

362 
b°r
 *
a
;

363 
tcf_mëa_hdr
 
mëa_hdr
;

364 
lvÆue
 = 0, 
rvÆue
 = 0;

366 
	`mem£t
(&
mëa_hdr
, 0, (meta_hdr));

368 i‡(
¨gs
 =
NULL
)

369  
	`PARSE_ERR
(
¨gs
, "meta: missingárguments");

371 i‡(!
	`b°rcmp
(
¨gs
, "list")) {

372 
	`li°_mëa_ids
(
°dîr
);

376 
a
 = 
	`∑r£_obje˘
(
¨gs
,árgs, &
mëa_hdr
.
À·
, &
lvÆue
, 
NULL
);

377 i‡(
a
 =
PARSE_FAILURE
)

379 i‡(
a
 =
NULL
)

380  
	`PARSE_ERR
(
¨gs
, "meta: missing operand");

382 i‡(!
	`b°rcmp
(
a
, "eq"))

383 
›nd
 = 
TCF_EM_OPND_EQ
;

384 i‡(!
	`b°rcmp
(
a
, "gt"))

385 
›nd
 = 
TCF_EM_OPND_GT
;

386 i‡(!
	`b°rcmp
(
a
, "lt"))

387 
›nd
 = 
TCF_EM_OPND_LT
;

389  
	`PARSE_ERR
(
a
, "meta: invalid operand");

391 
mëa_hdr
.
À·
.
›
 = (
__u8
Ë
›nd
;

393 i‡(
a
->
√xt
 =
NULL
)

394  
	`PARSE_ERR
(
¨gs
, "meta: missingÑvalue");

395 
a
 = 
	`b°r_√xt
(a);

397 
a
 = 
	`∑r£_obje˘
(
¨gs
,á, &
mëa_hdr
.
right
, &
rvÆue
, &mëa_hdr.
À·
);

398 i‡(
a
 =
PARSE_FAILURE
)

400 i‡(
a
 !
NULL
)

401  
	`PARSE_ERR
(
a
, "meta: unexpectedÅrailer");

404 
	`addøw_l
(
n
, 
MAX_MSG
, 
hdr
, (*hdr));

406 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_EM_META_HDR
, &
mëa_hdr
, (meta_hdr));

408 
	`dump_vÆue
(
n
, 
TCA_EM_META_LVALUE
, 
lvÆue
, &
mëa_hdr
.
À·
);

409 
	`dump_vÆue
(
n
, 
TCA_EM_META_RVALUE
, 
rvÆue
, &
mëa_hdr
.
right
);

412 
	}
}

413 #unde‡
PARSE_ERR


415 
ölöe
 
	$¥öt_bö¨y
(
FILE
 *
fd
, *
°r
, 
Àn
)

417 
i
;

419 
i
 = 0; i < 
Àn
; i++)

420 i‡(!
	`i•röt
(
°r
[
i
]))

421 
bö¨y
;

423 
i
 = 0; i < 
Àn
; i++)

424 
	`Ârötf
(
fd
, "%c", 
°r
[
i
]);

427 
bö¨y
:

428 
i
 = 0; i < 
Àn
; i++)

429 
	`Ârötf
(
fd
, "%02x ", 
°r
[
i
]);

431 
	`Ârötf
(
fd
, "\"");

432 
i
 = 0; i < 
Àn
; i++)

433 
	`Ârötf
(
fd
, "%c", 
	`i•röt
(
°r
[
i
]) ? str[i] : '.');

434 
	`Ârötf
(
fd
, "\"");

435 
	}
}

437 
ölöe
 
	$¥öt_vÆue
(
FILE
 *
fd
, 
ty≥
, 
π©å
 *
πa
)

439 i‡(
πa
 =
NULL
) {

440 
	`Ârötf
(
°dîr
, "Missing value TLV\n");

444 
ty≥
) {

445 
TCF_META_TYPE_INT
:

446 i‡(
	`RTA_PAYLOAD
(
πa
Ë< (
__u32
)) {

447 
	`Ârötf
(
°dîr
, "meta intÅype value TLV " \

451 
	`Ârötf
(
fd
, "%d", 
	`πa_gë©å_u32
(
πa
));

454 
TCF_META_TYPE_VAR
:

455 
	`¥öt_bö¨y
(
fd
, 
	`RTA_DATA
(
πa
), 
	`RTA_PAYLOAD
(rta));

460 
	}
}

462 
	$¥öt_obje˘
(
FILE
 *
fd
, 
tcf_mëa_vÆ
 *
obj
, 
π©å
 *
πa
)

464 
id
 = 
	`TCF_META_ID
(
obj
->
köd
);

465 
ty≥
 = 
	`TCF_META_TYPE
(
obj
->
köd
);

466 
mëa_íåy
 *
íåy
;

468 i‡(
id
 =
TCF_META_ID_VALUE
)

469  
	`¥öt_vÆue
(
fd
, 
ty≥
, 
πa
);

471 
íåy
 = 
	`lookup_mëa_íåy_byid
(
id
);

473 i‡(
íåy
 =
NULL
)

474 
	`Ârötf
(
fd
, "[unknow¿më®id %d]", 
id
);

476 
	`Ârötf
(
fd
, "%s", 
íåy
->
köd
);

478 i‡(
obj
->
shi·
)

479 
	`Ârötf
(
fd
, " shi· %d", 
obj
->
shi·
);

481 
ty≥
) {

482 
TCF_META_TYPE_INT
:

483 i‡(
πa
) {

484 i‡(
	`RTA_PAYLOAD
(
πa
Ë< (
__u32
))

485 
size_mism©ch
;

487 
	`Ârötf
(
fd
, " mask 0x%08x",

488 
	`πa_gë©å_u32
(
πa
));

495 
size_mism©ch
:

496 
	`Ârötf
(
°dîr
, "meta intÅype mask TLV size mismatch\n");

498 
	}
}

501 
	$mëa_¥öt_e›t
(
FILE
 *
fd
, 
tcf_em©ch_hdr
 *
hdr
, *
d©a
,

502 
d©a_Àn
)

504 
π©å
 *
tb
[
TCA_EM_META_MAX
+1];

505 
tcf_mëa_hdr
 *
mëa_hdr
;

507 i‡(
	`∑r£_π©å
(
tb
, 
TCA_EM_META_MAX
, 
d©a
, 
d©a_Àn
) < 0)

510 i‡(
tb
[
TCA_EM_META_HDR
] =
NULL
) {

511 
	`Ârötf
(
°dîr
, "Missing meta header\n");

515 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_EM_META_HDR
]Ë< (*
mëa_hdr
)) {

516 
	`Ârötf
(
°dîr
, "Meta header size mismatch\n");

520 
mëa_hdr
 = 
	`RTA_DATA
(
tb
[
TCA_EM_META_HDR
]);

522 i‡(
	`¥öt_obje˘
(
fd
, &
mëa_hdr
->
À·
, 
tb
[
TCA_EM_META_LVALUE
]) < 0)

525 
mëa_hdr
->
À·
.
›
) {

526 
TCF_EM_OPND_EQ
:

527 
	`Ârötf
(
fd
, "Éq ");

529 
TCF_EM_OPND_LT
:

530 
	`Ârötf
(
fd
, "Üt ");

532 
TCF_EM_OPND_GT
:

533 
	`Ârötf
(
fd
, " gt ");

537  
	`¥öt_obje˘
(
fd
, &
mëa_hdr
->
right
, 
tb
[
TCA_EM_META_RVALUE
]);

538 
	}
}

540 
em©ch_utû
 
	gmëa_em©ch_utû
 = {

541 .
köd
 = "meta",

542 .
	gköd_num
 = 
TCF_EM_META
,

543 .
	g∑r£_e›t
 = 
mëa_∑r£_e›t
,

544 .
	g¥öt_e›t
 = 
mëa_¥öt_e›t
,

545 .
	g¥öt_ußge
 = 
mëa_¥öt_ußge


	@tc/em_nbyte.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

21 
	~<î∫o.h
>

23 
	~"m_em©ch.h
"

24 
	~<löux/tc_em©ch/tc_em_nbyã.h
>

26 
em©ch_utû
 
nbyã_em©ch_utû
;

28 
	$nbyã_¥öt_ußge
(
FILE
 *
fd
)

30 
	`Ârötf
(
fd
,

37 
TCF_LAYER_MAX
);

38 
	}
}

40 
	$nbyã_∑r£_e›t
(
∆msghdr
 *
n
, 
tcf_em©ch_hdr
 *
hdr
,

41 
b°r
 *
¨gs
)

43 
b°r
 *
a
;

44 
b°r
 *
√edÀ
 = 
¨gs
;

45 
off£t
 = 0, 
œyî
 = 
TCF_LAYER_NETWORK
;

46 
off£t_¥e£¡
 = 0;

47 
tcf_em_nbyã
 
nb
;

49 
	`mem£t
(&
nb
, 0, (nb));

51 
	#PARSE_ERR
(
CARG
, 
FMT
, 
ARGS
...) \

52 
	`em_∑r£_îr‹
(
EINVAL
, 
¨gs
, 
CARG
, &
nbyã_em©ch_utû
, 
FMT
 ,##
ARGS
)

	)

54 i‡(
¨gs
 =
NULL
)

55  
	`PARSE_ERR
(
¨gs
, "nbyte: missingárguments");

57 i‡(
√edÀ
->
Àn
 <= 0)

58  
	`PARSE_ERR
(
¨gs
, "nbyte:ÇeedleÜength is 0");

60 
a
 = 
	`b°r_√xt
(
¨gs
);á;á = bstr_next(a)) {

61 i‡(!
	`b°rcmp
(
a
, "at")) {

62 i‡(
a
->
√xt
 =
NULL
)

63  
	`PARSE_ERR
(
a
, "nbyte: missingárgument");

64 
a
 = 
	`b°r_√xt
(a);

66 
off£t
 = 
	`b°πoul
(
a
);

67 i‡(
off£t
 =
ULONG_MAX
)

68  
	`PARSE_ERR
(
a
, "nbyte: invalid offset, " \

71 
off£t_¥e£¡
 = 1;

72 } i‡(!
	`b°rcmp
(
a
, "layer")) {

73 i‡(
a
->
√xt
 =
NULL
)

74  
	`PARSE_ERR
(
a
, "nbyte: missingárgument");

75 
a
 = 
	`b°r_√xt
(a);

77 
œyî
 = 
	`∑r£_œyî
(
a
);

78 i‡(
œyî
 =
INT_MAX
) {

79 
œyî
 = 
	`b°πoul
(
a
);

80 i‡(
œyî
 =
ULONG_MAX
)

81  
	`PARSE_ERR
(
a
, "nbyte: invalid " \

85 i‡(
œyî
 > 
TCF_LAYER_MAX
)

86  
	`PARSE_ERR
(
a
, "nbyte: illegalÜayer, " \

87 "mu° bêö 0..%d", 
TCF_LAYER_MAX
);

89  
	`PARSE_ERR
(
a
, "nbyte: unknownÖarameter");

92 i‡(
off£t_¥e£¡
 == 0)

93  
	`PARSE_ERR
(
a
, "nbyte: offsetÑequired");

95 
nb
.
Àn
 = 
√edÀ
->len;

96 
nb
.
œyî
 = (
__u8
)Üayer;

97 
nb
.
off
 = (
__u16
Ë
off£t
;

99 
	`addøw_l
(
n
, 
MAX_MSG
, 
hdr
, (*hdr));

100 
	`addøw_l
(
n
, 
MAX_MSG
, &
nb
, (nb));

101 
	`addøw_l
(
n
, 
MAX_MSG
, 
√edÀ
->
d©a
,ÇìdÀ->
Àn
);

103 #unde‡
PARSE_ERR


105 
	}
}

107 
	$nbyã_¥öt_e›t
(
FILE
 *
fd
, 
tcf_em©ch_hdr
 *
hdr
, *
d©a
,

108 
d©a_Àn
)

110 
i
;

111 
tcf_em_nbyã
 *
nb
 = 
d©a
;

112 
__u8
 *
√edÀ
;

114 i‡(
d©a_Àn
 < (*
nb
)) {

115 
	`Ârötf
(
°dîr
, "NByte header size mismatch\n");

119 i‡(
d©a_Àn
 < (*
nb
Ë+Çb->
Àn
) {

120 
	`Ârötf
(
°dîr
, "NByteÖayload size mismatch\n");

124 
√edÀ
 = 
d©a
 + (*
nb
);

126 
i
 = 0; i < 
nb
->
Àn
; i++)

127 
	`Ârötf
(
fd
, "%02x ", 
√edÀ
[
i
]);

129 
	`Ârötf
(
fd
, "\"");

130 
i
 = 0; i < 
nb
->
Àn
; i++)

131 
	`Ârötf
(
fd
, "%c", 
	`i•röt
(
√edÀ
[
i
]) ?Çeedle[i] : '.');

132 
	`Ârötf
(
fd
, "\"áà%dÜayî %d", 
nb
->
off
,Çb->
œyî
);

135 
	}
}

137 
em©ch_utû
 
	gnbyã_em©ch_utû
 = {

138 .
köd
 = "nbyte",

139 .
	gköd_num
 = 
TCF_EM_NBYTE
,

140 .
	g∑r£_e›t
 = 
nbyã_∑r£_e›t
,

141 .
	g¥öt_e›t
 = 
nbyã_¥öt_e›t
,

142 .
	g¥öt_ußge
 = 
nbyã_¥öt_ußge


	@tc/em_u32.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

21 
	~<î∫o.h
>

23 
	~"m_em©ch.h
"

25 
em©ch_utû
 
u32_em©ch_utû
;

27 
	$u32_¥öt_ußge
(
FILE
 *
fd
)

29 
	`Ârötf
(
fd
,

34 
	}
}

36 
	$u32_∑r£_e›t
(
∆msghdr
 *
n
, 
tcf_em©ch_hdr
 *
hdr
,

37 
b°r
 *
¨gs
)

39 
b°r
 *
a
;

40 
Æign
, 
nh_Àn
;

41 
key
, 
mask
, 
offmask
 = 0, 
off£t
;

42 
tc_u32_key
 
u_key
;

44 
	`mem£t
(&
u_key
, 0, (u_key));

46 
	#PARSE_ERR
(
CARG
, 
FMT
, 
ARGS
...) \

47 
	`em_∑r£_îr‹
(
EINVAL
, 
¨gs
, 
CARG
, &
u32_em©ch_utû
, 
FMT
 ,##
ARGS
)

	)

49 i‡(
¨gs
 =
NULL
)

50  
	`PARSE_ERR
(
¨gs
, "u32: missingárguments");

52 i‡(!
	`b°rcmp
(
¨gs
, "u8"))

53 
Æign
 = 1;

54 i‡(!
	`b°rcmp
(
¨gs
, "u16"))

55 
Æign
 = 2;

56 i‡(!
	`b°rcmp
(
¨gs
, "u32"))

57 
Æign
 = 4;

59  
	`PARSE_ERR
(
¨gs
, "u32: invalidálignment");

61 
a
 = 
	`b°r_√xt
(
¨gs
);

62 i‡(
a
 =
NULL
)

63  
	`PARSE_ERR
(
a
, "u32: missing key");

65 
key
 = 
	`b°πoul
(
a
);

66 i‡(
key
 =
ULONG_MAX
)

67  
	`PARSE_ERR
(
a
, "u32: invalid key, must beÇumeric");

69 
a
 = 
	`b°r_√xt
(a);

70 i‡(
a
 =
NULL
)

71  
	`PARSE_ERR
(
a
, "u32: missing mask");

73 
mask
 = 
	`b°πoul
(
a
);

74 i‡(
mask
 =
ULONG_MAX
)

75  
	`PARSE_ERR
(
a
, "u32: invalid mask, must beÇumeric");

77 
a
 = 
	`b°r_√xt
(a);

78 i‡(
a
 =
NULL
 || 
	`b°rcmp
(a, "at") != 0)

79  
	`PARSE_ERR
(
a
, "u32: missing \"at\"");

81 
a
 = 
	`b°r_√xt
(a);

82 i‡(
a
 =
NULL
)

83  
	`PARSE_ERR
(
a
, "u32: missing offset");

85 
nh_Àn
 = 
	`°æí
("nexthdr+");

86 i‡(
a
->
Àn
 > 
nh_Àn
 && !
	`memcmp
◊->
d©a
, "nexthdr+",Çh_len)) {

87 
buf
[
a
->
Àn
 - 
nh_Àn
 + 1];

88 
offmask
 = -1;

89 
	`mem˝y
(
buf
, 
a
->
d©a
 + 
nh_Àn
,á->
Àn
 -Çh_len);

90 
off£t
 = 
	`°πoul
(
buf
, 
NULL
, 0);

91 } i‡(!
	`b°rcmp
(
a
, "nexthdr+")) {

92 
a
 = 
	`b°r_√xt
(a);

93 i‡(
a
 =
NULL
)

94  
	`PARSE_ERR
(
a
, "u32: missing offset");

95 
off£t
 = 
	`b°πoul
(
a
);

97 
off£t
 = 
	`b°πoul
(
a
);

99 i‡(
off£t
 =
ULONG_MAX
)

100  
	`PARSE_ERR
(
a
, "u32: invalid offset");

102 i‡(
a
->
√xt
)

103  
	`PARSE_ERR
(
a
->
√xt
, "u32: unexpectedÅrailer");

105 
Æign
) {

107 i‡(
key
 > 0xFF)

108  
	`PARSE_ERR
(
a
, "Illegal key (>0xFF)");

109 i‡(
mask
 > 0xFF)

110  
	`PARSE_ERR
(
a
, "Illegal mask (>0xFF)");

112 
key
 <<24 - ((
off£t
 & 3) * 8);

113 
mask
 <<24 - ((
off£t
 & 3) * 8);

114 
off£t
 &= ~3;

118 i‡(
key
 > 0xFFFF)

119  
	`PARSE_ERR
(
a
, "Illegal key (>0xFFFF)");

120 i‡(
mask
 > 0xFFFF)

121  
	`PARSE_ERR
(
a
, "Illegal mask (>0xFFFF)");

123 i‡((
off£t
 & 3) == 0) {

124 
key
 <<= 16;

125 
mask
 <<= 16;

127 
off£t
 &= ~3;

131 
key
 = 
	`ht⁄l
(key);

132 
mask
 = 
	`ht⁄l
(mask);

134 i‡(
off£t
 % 4)

135  
	`PARSE_ERR
(
a
, "u32: invalid offsetálignment, " \

138 
key
 &
mask
;

140 
u_key
.
mask
 = mask;

141 
u_key
.
vÆ
 = 
key
;

142 
u_key
.
off
 = 
off£t
;

143 
u_key
.
offmask
 = offmask;

145 
	`addøw_l
(
n
, 
MAX_MSG
, 
hdr
, (*hdr));

146 
	`addøw_l
(
n
, 
MAX_MSG
, &
u_key
, (u_key));

148 #unde‡
PARSE_ERR


150 
	}
}

152 
	$u32_¥öt_e›t
(
FILE
 *
fd
, 
tcf_em©ch_hdr
 *
hdr
, *
d©a
,

153 
d©a_Àn
)

155 
tc_u32_key
 *
u_key
 = 
d©a
;

157 i‡(
d©a_Àn
 < (*
u_key
)) {

158 
	`Ârötf
(
°dîr
, "U32 header size mismatch\n");

162 
	`Ârötf
(
fd
, "%08x/%08xát %s%d",

163 (Ë
	`¡ohl
(
u_key
->
vÆ
),

164 (Ë
	`¡ohl
(
u_key
->
mask
),

165 
u_key
->
offmask
 ? "nexthdr+" : "",

166 
u_key
->
off
);

169 
	}
}

171 
em©ch_utû
 
	gu32_em©ch_utû
 = {

172 .
köd
 = "u32",

173 .
	gköd_num
 = 
TCF_EM_U32
,

174 .
	g∑r£_e›t
 = 
u32_∑r£_e›t
,

175 .
	g¥öt_e›t
 = 
u32_¥öt_e›t
,

176 .
	g¥öt_ußge
 = 
u32_¥öt_ußge


	@tc/emp_ematch.l

2 
	~"emp_em©ch.yacc.h
"

3 
	~"m_em©ch.h
"

5 
em©ch_¨gc
;

6 **
em©ch_¨gv
;

8 
	#yylvÆ
 
em©ch_lvÆ


	)

10 
	#NEXT_EM_ARG
(Ëdÿ{ 
em©ch_¨gc
--; 
em©ch_¨gv
++; } 0);

	)

12 
	#YY_INPUT
(
buf
, 
ªsu…
, 
max_size
) \

14 
√xt
: \

15 i‡(
em©ch_¨gc
 <= 0) \

16 
ªsu…
 = 
YY_NULL
; \

17 i‡(**
em©ch_¨gv
 == '\0') { \

18 
	`NEXT_EM_ARG
(); \

19 
√xt
; \

21 i‡(
max_size
 <
	`°æí
(*
em©ch_¨gv
) + 1) { \

22 
	`Ârötf
(
°dîr
, "matchárgumentÅooÜong.\n"); \

23 
ªsu…
 = 
YY_NULL
; \

25 
	`°r˝y
(
buf
, *
em©ch_¨gv
); \

26 
ªsu…
 = 
	`°æí
(*
em©ch_¨gv
) + 1; \

27 
buf
[
ªsu…
-1] = ' '; \

28 
buf
[
ªsu…
] = '\0'; \

29 
	`NEXT_EM_ARG
(); \

32 }

	)

34 
__©åibuã__
 ((
unu£d
)Ë
yyu≈ut
 (
c
,*
buf_±r
 );

35 
__©åibuã__
 ((
unu£d
)Ë
yy_push_°©e
 (
√w_°©e
 );

36 
__©åibuã__
 ((
unu£d
)Ë
yy_p›_°©e
 ();

37 
__©åibuã__
 ((
unu£d
)Ë
yy_t›_°©e
 ();

39 *
	g°rbuf
;

40 
	g°rbuf_size
;

41 
	g°rbuf_ödex
;

43 
	$°rbuf_íœrge
()

45 
°rbuf_size
 += 512;

46 
°rbuf
 = 
	`ªÆloc
(°rbuf, 
°rbuf_size
);

47 
	}
}

49 
	$°rbuf_≠≥nd_ch¨
(
c
)

51 
°rbuf_ödex
 >
°rbuf_size
)

52 
	`°rbuf_íœrge
();

53 
°rbuf
[
°rbuf_ödex
++] = 
c
;

54 
	}
}

56 
	$°rbuf_≠≥nd_ch¨p
(*
s
)

58 
°rbuf_ödex
 >
°rbuf_size
)

59 
	`°rbuf_íœrge
();

60 
	`mem˝y
(
°rbuf
 + 
°rbuf_ödex
, 
s
, 
	`°æí
(s));

61 
°rbuf_ödex
 +
	`°æí
(
s
);

62 
	}
}

66 %
x
 
Àx°r


68 %
›ti⁄
 8b
ô
 
°ack
 
w¨n
 
noyywøp
 
¥efix
="ematch_"

69 %% /* 
	$yyÀx
 */

70 [ \
t
\
r
\
n
]+

73 i‡(
°rbuf
 =
NULL
) {

74 
°rbuf_size
 = 512;

75 
°rbuf
 = 
	`ˇŒoc
(1, 
°rbuf_size
);

76 i‡(
°rbuf
 =
NULL
)

77  
ERROR
;

79 
°rbuf_ödex
 = 0;

81 
	`BEGIN
(
Àx°r
);

84 <
Àx°r
>\" {

85 
	`BEGIN
(
INITIAL
);

86 
yylvÆ
.
b
 = 
	`b°r_√w
(
°rbuf
, 
°rbuf_ödex
);

87 
yylvÆ
.
b
->
quŸed
 = 1;

88  
ATTRIBUTE
;

91 <
Àx°r
>\\[0-7]{1,3} {

92 
ªs
;

94 
	`ssˇnf
(
yyãxt
 + 1, "%o", &
ªs
);

95 i‡(
ªs
 > 0xFF) {

96 
	`Ârötf
(
°dîr
, "error: octalÉscape sequence" \

98  
ERROR
;

100 
	`°rbuf_≠≥nd_ch¨
((Ë
ªs
);

103 <
Àx°r
>\\[0-9]+ {

104 
	`Ârötf
(
°dîr
, "error: invalid octaleÉscape sequence\n");

105  
ERROR
;

108 <
Àx°r
>\\
x
[0-9a-
fA
-
F
]{1,2} {

109 
ªs
;

111 
	`ssˇnf
(
yyãxt
 + 2, "%x", &
ªs
);

113 i‡(
ªs
 > 0xFF) {

114 
	`Ârötf
(
°dîr
, "error: hexadecimalÉscape " \

116  
ERROR
;

118 
	`°rbuf_≠≥nd_ch¨
((Ë
ªs
);

121 <
Àx°r
>\\
n
 
	`°rbuf_≠≥nd_ch¨
('\n');

122 <
Àx°r
>\\
r
 
	`°rbuf_≠≥nd_ch¨
('\r');

123 <
Àx°r
>\\
t
 
	`°rbuf_≠≥nd_ch¨
('\t');

124 <
Àx°r
>\\
v
 
	`°rbuf_≠≥nd_ch¨
('\v');

125 <
Àx°r
>\\
b
 
	`°rbuf_≠≥nd_ch¨
('\b');

126 <
Àx°r
>\\
f
 
	`°rbuf_≠≥nd_ch¨
('\f');

127 <
Àx°r
>\\
a
 
	`°rbuf_≠≥nd_ch¨
('\a');

129 <
Àx°r
>\\(.|\
n
Ë
	`°rbuf_≠≥nd_ch¨
(
yyãxt
[1]);

130 <
Àx°r
>[^\\\
n
\"]+ strbuf_append_charp(yytext);

132 [
aA
][
nN
][
dD
]  
AND
;

133 [
oO
][
rR
]  
OR
;

134 [
nN
][
oO
][
tT
]  
NOT
;

137  
yylvÆ
.
i
 = *
yyãxt
;

139 [^ \
t
\
r
\
	`n
()]+ {

140 
yylvÆ
.
b
 = 
	`b°r_Æloc
(
yyãxt
);

141 i‡(
yylvÆ
.
b
 =
NULL
)

142  
ERROR
;

143  
ATTRIBUTE
;

145 
	}
%%

	@tc/emp_ematch.y

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mÆloc.h
>

5 
	~<°rög.h
>

6 
	~"m_em©ch.h
"

9 %
loˇti⁄s


10 %
tokí
-
èbÀ


11 %
îr‹
-
vîbo£


12 %
«me
-
¥efix
 "ematch_"

15 
i
;

16 
b°r
 *
b
;

17 
em©ch
 *
e
;

21 
em©ch_Àx
();

22 
yyîr‹
(c⁄° *
s
);

23 
em©ch
 *
em©ch_roŸ
;

24 *
em©ch_îr
;

27 %
tokí
 <
i
> 
ERROR


28 %
tokí
 <
b
> 
ATTRIBUTE


29 %
tokí
 <
i
> 
AND
 
OR
 
NOT


30 %
ty≥
 <
i
> 
övît
 
ªœti⁄


31 %
ty≥
 <
e
> 
m©ch
 
ex¥


32 %
ty≥
 <
b
> 
¨gs


33 %
right
 
AND
 
OR


34 %
°¨t
 
öput


35 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

36 
öput
:

38 | 
ex¥


39 { 
em©ch_roŸ
 = 
$1
; }

40 | 
ex¥
 
îr‹


42 
em©ch_roŸ
 = 
$1
;

43 
YYACCEPT
;

47 
ex¥
:

48 
m©ch


49 { 
$$
 = 
$1
; }

50 | 
m©ch
 
ªœti⁄
 
ex¥


52 
$1
->
ªœti⁄
 = 
$2
;

53 
$1
->
√xt
 = 
$3
;

54 
$$
 = 
$1
;

58 
m©ch
:

59 
övît
 
ATTRIBUTE
 '(' 
¨gs
 ')'

61 
$2
->
√xt
 = 
$4
;

62 
$$
 = 
	`√w_em©ch
(
$2
, 
$1
);

63 i‡(
$$
 =
NULL
)

64 
YYABORT
;

66 | 
övît
 '(' 
ex¥
 ')'

68 
$$
 = 
	`√w_em©ch
(
NULL
, 
$1
);

69 i‡(
$$
 =
NULL
)

70 
YYABORT
;

71 
$$
->
chûd
 = 
$3
;

75 
¨gs
:

76 
ATTRIBUTE


77 { 
$$
 = 
$1
; }

78 | 
ATTRIBUTE
 
¨gs


79 { 
$1
->
√xt
 = 
$2
; }

82 
ªœti⁄
:

83 
AND


84 { 
$$
 = 
TCF_EM_REL_AND
; }

85 | 
OR


86 { 
$$
 = 
TCF_EM_REL_OR
; }

89 
övît
:

91 { 
$$
 = 0; }

92 | 
NOT


93 { 
$$
 = 1; }

95 
	}
%%

97 
	$yyîr‹
(c⁄° *
s
)

99 
em©ch_îr
 = 
	`°rdup
(
s
);

100 
	}
}

	@tc/emp_ematch.yacc.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "3.0.2"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 0

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

63 
	#yy∑r£
 
em©ch_∑r£


	)

64 
	#yyÀx
 
em©ch_Àx


	)

65 
	#yyîr‹
 
em©ch_îr‹


	)

66 
	#yydebug
 
em©ch_debug


	)

67 
	#yy√ºs
 
em©ch_√ºs


	)

69 
	#yylvÆ
 
em©ch_lvÆ


	)

70 
	#yych¨
 
em©ch_ch¨


	)

71 
	#yyŒoc
 
em©ch_Œoc


	)

76 
	~<°dio.h
>

77 
	~<°dlib.h
>

78 
	~<mÆloc.h
>

79 
	~<°rög.h
>

80 
	~"m_em©ch.h
"

84 #i‚de‡
YY_NULLPTR


85 #i‡
deföed
 
__˝lu•lus
 && 201103L <= __cplusplus

86 
	#YY_NULLPTR
 
nuŒ±r


	)

88 
	#YY_NULLPTR
 0

	)

93 #ifde‡
YYERROR_VERBOSE


94 #unde‡
YYERROR_VERBOSE


95 
	#YYERROR_VERBOSE
 1

	)

97 
	#YYERROR_VERBOSE
 1

	)

102 #i‚de‡
YY_EMATCH_EMP_EMATCH_YACC_H_INCLUDED


103 
	#YY_EMATCH_EMP_EMATCH_YACC_H_INCLUDED


	)

105 #i‚de‡
YYDEBUG


106 
	#YYDEBUG
 1

	)

108 #i‡
YYDEBUG


109 
em©ch_debug
;

113 #i‚de‡
YYTOKENTYPE


114 
	#YYTOKENTYPE


	)

115 
	eyytokíty≥


117 
	mERROR
 = 258,

118 
	mATTRIBUTE
 = 259,

119 
	mAND
 = 260,

120 
	mOR
 = 261,

121 
	mNOT
 = 262

126 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


127 
YYSTYPE
 
	tYYSTYPE
;

128 
	uYYSTYPE


132 
	mi
;

133 
b°r
 *
	mb
;

134 
em©ch
 *
	me
;

138 
	#YYSTYPE_IS_TRIVIAL
 1

	)

139 
	#YYSTYPE_IS_DECLARED
 1

	)

143 #i‡! 
deföed
 
YYLTYPE
 && ! deföed 
YYLTYPE_IS_DECLARED


144 
YYLTYPE
 
	tYYLTYPE
;

145 
	sYYLTYPE


147 
	mfú°_löe
;

148 
	mfú°_cﬁumn
;

149 
	mœ°_löe
;

150 
	mœ°_cﬁumn
;

152 
	#YYLTYPE_IS_DECLARED
 1

	)

153 
	#YYLTYPE_IS_TRIVIAL
 1

	)

157 
YYSTYPE
 
em©ch_lvÆ
;

158 
YYLTYPE
 
em©ch_Œoc
;

159 
em©ch_∑r£
 ();

166 
em©ch_Àx
();

167 
yyîr‹
(c⁄° *
s
);

168 
em©ch
 *
em©ch_roŸ
;

169 *
em©ch_îr
;

177 #ifde‡
YYTYPE_UINT8


178 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

180 
	tyyty≥_uöt8
;

183 #ifde‡
YYTYPE_INT8


184 
YYTYPE_INT8
 
	tyyty≥_öt8
;

186 sig√d 
	tyyty≥_öt8
;

189 #ifde‡
YYTYPE_UINT16


190 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

192 
	tyyty≥_uöt16
;

195 #ifde‡
YYTYPE_INT16


196 
YYTYPE_INT16
 
	tyyty≥_öt16
;

198 
	tyyty≥_öt16
;

201 #i‚de‡
YYSIZE_T


202 #ifde‡
__SIZE_TYPE__


203 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

204 #ñi‡
deföed
 
size_t


205 
	#YYSIZE_T
 
size_t


	)

206 #ñi‡! 
deföed
 
YYSIZE_T


207 
	~<°ddef.h
>

208 
	#YYSIZE_T
 
size_t


	)

210 
	#YYSIZE_T
 

	)

214 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

216 #i‚de‡
YY_


217 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

218 #i‡
ENABLE_NLS


219 
	~<liböé.h
>

220 
	#YY_
(
Msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", Msgid)

	)

223 #i‚de‡
YY_


224 
	#YY_
(
Msgid
Ë
	)
Msgid

228 #i‚de‡
YY_ATTRIBUTE


229 #i‡(
deföed
 
__GNUC__
 \

230 && (2 < 
	g__GNUC__
 || (__GNUC__ =2 && 96 <
__GNUC_MINOR__
))) \

231 || 
deföed
 
__SUNPRO_C
 && 0x5110 <= __SUNPRO_C

232 
	#YY_ATTRIBUTE
(
S≥c
Ë
	`__©åibuã__
(S≥c)

	)

234 
	#YY_ATTRIBUTE
(
S≥c
Ë

	)

238 #i‚de‡
YY_ATTRIBUTE_PURE


239 
	#YY_ATTRIBUTE_PURE
 
	`YY_ATTRIBUTE
 ((
__puª__
))

	)

242 #i‚de‡
YY_ATTRIBUTE_UNUSED


243 
	#YY_ATTRIBUTE_UNUSED
 
	`YY_ATTRIBUTE
 ((
__unu£d__
))

	)

246 #i‡!
deföed
 
_N‹ëu∫
 \

247 && (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 201112)

248 #i‡
deföed
 
_MSC_VER
 && 1200 <= _MSC_VER

249 
	#_N‹ëu∫
 
	`__de˛•ec
 (
n‹ëu∫
)

	)

251 
	#_N‹ëu∫
 
	`YY_ATTRIBUTE
 ((
__n‹ëu∫__
))

	)

256 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


257 
	#YYUSE
(
E
Ë((Ë(E))

	)

259 
	#YYUSE
(
E
Ë

	)

262 #i‡
deföed
 
__GNUC__
 && 407 <__GNUC__ * 100 + 
__GNUC_MINOR__


264 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 \

265 
	`_Pøgma
 ("GCC diagnosticÖush") \

266 
	`_Pøgma
 ("GCC diagnostic ignored \"-Wuninitialized\"")\

267 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wmaybe-unöôülized\"")

	)

268 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END
 \

269 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

271 
	#YY_INITIAL_VALUE
(
VÆue
Ë
	)
Value

273 #i‚de‡
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


274 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


	)

275 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END


	)

277 #i‚de‡
YY_INITIAL_VALUE


278 
	#YY_INITIAL_VALUE
(
VÆue
Ë

	)

282 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


286 #ifde‡
YYSTACK_USE_ALLOCA


287 #i‡
YYSTACK_USE_ALLOCA


288 #ifde‡
__GNUC__


289 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

290 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


291 
	~<Æloˇ.h
>

292 #ñi‡
deföed
 
_AIX


293 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

294 #ñi‡
deföed
 
_MSC_VER


295 
	~<mÆloc.h
>

296 
	#Æloˇ
 
_Æloˇ


	)

298 
	#YYSTACK_ALLOC
 
Æloˇ


	)

299 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS


300 
	~<°dlib.h
>

302 #i‚de‡
EXIT_SUCCESS


303 
	#EXIT_SUCCESS
 0

	)

310 #ifde‡
YYSTACK_ALLOC


312 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

313 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


318 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

321 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

322 
	#YYSTACK_FREE
 
YYFREE


	)

323 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


324 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

326 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

327 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

328 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

329 
	~<°dlib.h
>

330 #i‚de‡
EXIT_SUCCESS


331 
	#EXIT_SUCCESS
 0

	)

334 #i‚de‡
YYMALLOC


335 
	#YYMALLOC
 
mÆloc


	)

336 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS


337 *
mÆloc
 (
YYSIZE_T
);

340 #i‚de‡
YYFREE


341 
	#YYFREE
 
‰ì


	)

342 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS


343 
‰ì
 (*);

350 #i‡(! 
deföed
 
yyovîÊow
 \

351 && (! 
deföed
 
	g__˝lu•lus
 \

352 || (
deföed
 
	gYYLTYPE_IS_TRIVIAL
 && YYLTYPE_IS_TRIVIAL \

353 && 
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

356 
	uyyÆloc


358 
yyty≥_öt16
 
	myyss_Æloc
;

359 
YYSTYPE
 
	myyvs_Æloc
;

360 
YYLTYPE
 
	myyls_Æloc
;

364 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

368 
	#YYSTACK_BYTES
(
N
) \

369 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
Ë+  (
YYLTYPE
)) \

370 + 2 * 
YYSTACK_GAP_MAXIMUM
)

	)

372 
	#YYCOPY_NEEDED
 1

	)

379 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

382 
YYSIZE_T
 
yy√wbyãs
; \

383 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

384 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

385 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

386 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

388 0)

	)

392 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

395 #i‚de‡
YYCOPY


396 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

397 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

398 
	`__buûtö_mem˝y
 (
D°
, 
Src
, (
Cou¡
Ë*  (*(Src)))

	)

400 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

403 
YYSIZE_T
 
yyi
; \

404 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

405 (
D°
)[
yyi
] = (
Src
)[yyi]; \

407 0)

	)

413 
	#YYFINAL
 6

	)

415 
	#YYLAST
 16

	)

418 
	#YYNTOKENS
 10

	)

420 
	#YYNNTS
 7

	)

422 
	#YYNRULES
 14

	)

424 
	#YYNSTATES
 21

	)

428 
	#YYUNDEFTOK
 2

	)

429 
	#YYMAXUTOK
 262

	)

431 
	#YYTRANSLATE
(
YYX
) \

432 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

436 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

467 #i‡
YYDEBUG


469 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

476 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 1

479 c⁄° *c⁄° 
	gyyäame
[] =

483 "övît", 
YY_NULLPTR


487 #ifde‡
YYPRINT


490 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

496 
	#YYPACT_NINF
 -9

	)

498 
	#yy∑˘_vÆue_is_deÁu…
(
Yy°©e
) \

499 (!!((
Yy°©e
Ë=(-9)))

	)

501 
	#YYTABLE_NINF
 -4

	)

503 
	#yyèbÀ_vÆue_is_îr‹
(
YyèbÀ_vÆue
) \

504 0

	)

508 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

518 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

526 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

532 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

540 c⁄° 
yyty≥_öt8
 
	gyyèbÀ
[] =

546 c⁄° 
yyty≥_uöt8
 
	gyycheck
[] =

554 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

562 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

569 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

576 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

577 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

578 
	#YYEMPTY
 (-2)

	)

579 
	#YYEOF
 0

	)

581 
	#YYACCEPT
 
yyac˚±œb


	)

582 
	#YYABORT
 
yyab‹éab


	)

583 
	#YYERROR
 
yyîr‹œb


	)

586 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

588 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

590 i‡(
yych¨
 =
YYEMPTY
) \

592 
yych¨
 = (
Tokí
); \

593 
yylvÆ
 = (
VÆue
); \

594 
	`YYPOPSTACK
 (
yyÀn
); \

595 
yy°©e
 = *
yys•
; \

596 
yybackup
; \

600 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

601 
YYERROR
; \

603 0)

	)

606 
	#YYTERROR
 1

	)

607 
	#YYERRCODE
 256

	)

614 #i‚de‡
YYLLOC_DEFAULT


615 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

617 i‡(
N
) \

619 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

620 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

621 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

622 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

626 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

627 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

628 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

629 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

631 0)

	)

634 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

638 #i‡
YYDEBUG


640 #i‚de‡
YYFPRINTF


641 
	~<°dio.h
>

642 
	#YYFPRINTF
 
Ârötf


	)

645 
	#YYDPRINTF
(
Args
) \

647 i‡(
yydebug
) \

648 
YYFPRINTF
 
Args
; \

649 } 0)

	)

656 #i‚de‡
YY_LOCATION_PRINT


657 #i‡
deföed
 
YYLTYPE_IS_TRIVIAL
 && YYLTYPE_IS_TRIVIAL

661 
YY_ATTRIBUTE_UNUSED


663 
	$yy_loˇti⁄_¥öt_
 (
FILE
 *
yyo
, 
YYLTYPE
 c⁄° * c⁄° 
yylo˝
)

665 
ªs
 = 0;

666 
íd_cﬁ
 = 0 !
yylo˝
->
œ°_cﬁumn
 ? yylocp->last_column - 1 : 0;

667 i‡(0 <
yylo˝
->
fú°_löe
)

669 
ªs
 +
	`YYFPRINTF
 (
yyo
, "%d", 
yylo˝
->
fú°_löe
);

670 i‡(0 <
yylo˝
->
fú°_cﬁumn
)

671 
ªs
 +
	`YYFPRINTF
 (
yyo
, ".%d", 
yylo˝
->
fú°_cﬁumn
);

673 i‡(0 <
yylo˝
->
œ°_löe
)

675 i‡(
yylo˝
->
fú°_löe
 < yylo˝->
œ°_löe
)

677 
ªs
 +
	`YYFPRINTF
 (
yyo
, "-%d", 
yylo˝
->
œ°_löe
);

678 i‡(0 <
íd_cﬁ
)

679 
ªs
 +
	`YYFPRINTF
 (
yyo
, ".%d", 
íd_cﬁ
);

681 i‡(0 <
íd_cﬁ
 && 
yylo˝
->
fú°_cﬁumn
 <Énd_col)

682 
ªs
 +
	`YYFPRINTF
 (
yyo
, "-%d", 
íd_cﬁ
);

684  
ªs
;

685 
	}
}

687 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

688 
	`yy_loˇti⁄_¥öt_
 (
Fûe
, &(
Loc
))

	)

691 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

696 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

698 i‡(
yydebug
) \

700 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

701 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

702 
Ty≥
, 
VÆue
, 
Loˇti⁄
); \

703 
	`YYFPRINTF
 (
°dîr
, "\n"); \

705 } 0)

	)

713 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, 
YYLTYPE
 c⁄° * c⁄° 
yyloˇti⁄p
)

715 
FILE
 *
yyo
 = 
yyouçut
;

716 
	`YYUSE
 (
yyo
);

717 
	`YYUSE
 (
yyloˇti⁄p
);

718 i‡(!
yyvÆuï
)

720 #ifde‡
YYPRINT


721 i‡(
yyty≥
 < 
YYNTOKENS
)

722 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

724 
	`YYUSE
 (
yyty≥
);

725 
	}
}

733 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, 
YYLTYPE
 c⁄° * c⁄° 
yyloˇti⁄p
)

735 
	`YYFPRINTF
 (
yyouçut
, "%s %s (",

736 
yyty≥
 < 
YYNTOKENS
 ? "tokí" : "¡îm", 
yyäame
[yytype]);

738 
	`YY_LOCATION_PRINT
 (
yyouçut
, *
yyloˇti⁄p
);

739 
	`YYFPRINTF
 (
yyouçut
, ": ");

740 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

741 
	`YYFPRINTF
 (
yyouçut
, ")");

742 
	}
}

750 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

752 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

753 ; 
yybŸtom
 <
yyt›
; yybottom++)

755 
yybŸ
 = *
yybŸtom
;

756 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

758 
	`YYFPRINTF
 (
°dîr
, "\n");

759 
	}
}

761 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

763 i‡(
yydebug
) \

764 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

765 } 0)

	)

773 
	$yy_ªdu˚_¥öt
 (
yyty≥_öt16
 *
yys•
, 
YYSTYPE
 *
yyv•
, 
YYLTYPE
 *
yyl•
, 
yyruÀ
)

775 
yy o
 = 
yyæöe
[
yyruÀ
];

776 
yyƒhs
 = 
yyr2
[
yyruÀ
];

777 
yyi
;

778 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

779 
yyruÀ
 - 1, 
yy o
);

781 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

783 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

784 
	`yy_symbﬁ_¥öt
 (
°dîr
,

785 
yy°os
[
yys•
[
yyi
 + 1 - 
yyƒhs
]],

786 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

787 , &(
yyl•
[(
yyi
 + 1Ë- (
yyƒhs
)]) );

788 
	`YYFPRINTF
 (
°dîr
, "\n");

790 
	}
}

792 
	#YY_REDUCE_PRINT
(
RuÀ
) \

794 i‡(
yydebug
) \

795 
	`yy_ªdu˚_¥öt
 (
yys•
, 
yyv•
, 
yyl•
, 
RuÀ
); \

796 } 0)

	)

800 
	gyydebug
;

802 
	#YYDPRINTF
(
Args
)

	)

803 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

804 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

805 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

810 #i‚de‡
YYINITDEPTH


811 
	#YYINITDEPTH
 200

	)

821 #i‚de‡
YYMAXDEPTH


822 
	#YYMAXDEPTH
 10000

	)

826 #i‡
YYERROR_VERBOSE


828 #i‚de‡
yy°æí


829 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


830 
	#yy°æí
 
°æí


	)

833 
YYSIZE_T


834 
	$yy°æí
 (c⁄° *
yy°r
)

836 
YYSIZE_T
 
yyÀn
;

837 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

839  
yyÀn
;

840 
	}
}

844 #i‚de‡
yy°p˝y


845 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


846 
	#yy°p˝y
 
°p˝y


	)

851 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

853 *
yyd
 = 
yyde°
;

854 c⁄° *
yys
 = 
yy§c
;

856 (*
yyd
++ = *
yys
++) != '\0')

859  
yyd
 - 1;

860 
	}
}

864 #i‚de‡
yyäamîr


872 
YYSIZE_T


873 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

875 i‡(*
yy°r
 == '"')

877 
YYSIZE_T
 
yyn
 = 0;

878 c⁄° *
yyp
 = 
yy°r
;

881 *++
yyp
)

885 
do_nŸ_°rù_quŸes
;

888 i‡(*++
yyp
 != '\\')

889 
do_nŸ_°rù_quŸes
;

892 i‡(
yyªs
)

893 
yyªs
[
yyn
] = *
yyp
;

894 
yyn
++;

898 i‡(
yyªs
)

899 
yyªs
[
yyn
] = '\0';

900  
yyn
;

902 
do_nŸ_°rù_quŸes
: ;

905 i‡(! 
yyªs
)

906  
	`yy°æí
 (
yy°r
);

908  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

909 
	}
}

921 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

922 
yyty≥_öt16
 *
yys•
, 
yytokí
)

924 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yytokí
]);

925 
YYSIZE_T
 
yysize
 = 
yysize0
;

926 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

928 c⁄° *
yyf‹m©
 = 
YY_NULLPTR
;

930 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

933 
yycou¡
 = 0;

958 i‡(
yytokí
 !
YYEMPTY
)

960 
yyn
 = 
yy∑˘
[*
yys•
];

961 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

962 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

967 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

969 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

970 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

971 
yyx
;

973 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

974 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


975 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

977 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

979 
yycou¡
 = 1;

980 
yysize
 = 
yysize0
;

983 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

985 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yyx
]);

986 i‡(! (
yysize
 <
yysize1


987 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

989 
yysize
 = 
yysize1
;

995 
yycou¡
)

997 
	#YYCASE_
(
N
, 
S
) \

998 
N
: \

999 
yyf‹m©
 = 
S
; \

1000 

	)

1001 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

1002 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

1003 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

1004 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

1005 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

1006 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

1007 #unde‡
YYCASE_


1011 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

1012 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

1014 
yysize
 = 
yysize1
;

1017 i‡(*
yymsg_Æloc
 < 
yysize
)

1019 *
yymsg_Æloc
 = 2 * 
yysize
;

1020 i‡(! (
yysize
 <*
yymsg_Æloc


1021 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

1022 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1030 *
yyp
 = *
yymsg
;

1031 
yyi
 = 0;

1032 (*
yyp
 = *
yyf‹m©
) != '\0')

1033 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

1035 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1036 
yyf‹m©
 += 2;

1040 
yyp
++;

1041 
yyf‹m©
++;

1045 
	}
}

1053 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
, 
YYLTYPE
 *
yyloˇti⁄p
)

1055 
	`YYUSE
 (
yyvÆuï
);

1056 
	`YYUSE
 (
yyloˇti⁄p
);

1057 i‡(!
yymsg
)

1058 
yymsg
 = "Deleting";

1059 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1061 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1062 
	`YYUSE
 (
yyty≥
);

1063 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1064 
	}
}

1070 
	gyych¨
;

1073 
YYSTYPE
 
	gyylvÆ
;

1075 
YYLTYPE
 
	gyyŒoc


1076 #i‡
deföed
 
YYLTYPE_IS_TRIVIAL
 && YYLTYPE_IS_TRIVIAL

1081 
	gyy√ºs
;

1089 
	$yy∑r£
 ()

1091 
yy°©e
;

1093 
yyîr°©us
;

1104 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1105 
yyty≥_öt16
 *
yyss
;

1106 
yyty≥_öt16
 *
yys•
;

1109 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1110 
YYSTYPE
 *
yyvs
;

1111 
YYSTYPE
 *
yyv•
;

1114 
YYLTYPE
 
yylß
[
YYINITDEPTH
];

1115 
YYLTYPE
 *
yyls
;

1116 
YYLTYPE
 *
yyl•
;

1119 
YYLTYPE
 
yyîr‹_ønge
[3];

1121 
YYSIZE_T
 
yy°acksize
;

1123 
yyn
;

1124 
yyªsu…
;

1126 
yytokí
 = 0;

1129 
YYSTYPE
 
yyvÆ
;

1130 
YYLTYPE
 
yyloc
;

1132 #i‡
YYERROR_VERBOSE


1134 
yymsgbuf
[128];

1135 *
yymsg
 = 
yymsgbuf
;

1136 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1139 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N), 
yyl•
 -(N))

	)

1143 
yyÀn
 = 0;

1145 
yys•
 = 
yyss
 = 
yysß
;

1146 
yyv•
 = 
yyvs
 = 
yyvß
;

1147 
yyl•
 = 
yyls
 = 
yylß
;

1148 
yy°acksize
 = 
YYINITDEPTH
;

1150 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1152 
yy°©e
 = 0;

1153 
yyîr°©us
 = 0;

1154 
yy√ºs
 = 0;

1155 
yych¨
 = 
YYEMPTY
;

1156 
yyl•
[0] = 
yyŒoc
;

1157 
yy£t°©e
;

1162 
yy√w°©e
:

1165 
yys•
++;

1167 
yy£t°©e
:

1168 *
yys•
 = 
yy°©e
;

1170 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1173 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1175 #ifde‡
yyovîÊow


1180 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1181 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1182 
YYLTYPE
 *
yyls1
 = 
yyls
;

1188 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1189 &
yyss1
, 
yysize
 *  (*
yys•
),

1190 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1191 &
yyls1
, 
yysize
 *  (*
yyl•
),

1192 &
yy°acksize
);

1194 
yyls
 = 
yyls1
;

1195 
yyss
 = 
yyss1
;

1196 
yyvs
 = 
yyvs1
;

1199 #i‚de‡
YYSTACK_RELOCATE


1200 
yyexhau°edœb
;

1203 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1204 
yyexhau°edœb
;

1205 
yy°acksize
 *= 2;

1206 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1207 
yy°acksize
 = 
YYMAXDEPTH
;

1210 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1211 
yyÆloc
 *
yy±r
 =

1212 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1213 i‡(! 
yy±r
)

1214 
yyexhau°edœb
;

1215 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1216 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1217 
	`YYSTACK_RELOCATE
 (
yyls_Æloc
, 
yyls
);

1218 #unde‡
YYSTACK_RELOCATE


1219 i‡(
yyss1
 !
yysß
)

1220 
	`YYSTACK_FREE
 (
yyss1
);

1225 
yys•
 = 
yyss
 + 
yysize
 - 1;

1226 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1227 
yyl•
 = 
yyls
 + 
yysize
 - 1;

1229 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1230 (Ë
yy°acksize
));

1232 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1233 
YYABORT
;

1236 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1238 i‡(
yy°©e
 =
YYFINAL
)

1239 
YYACCEPT
;

1241 
yybackup
;

1246 
yybackup
:

1252 
yyn
 = 
yy∑˘
[
yy°©e
];

1253 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1254 
yydeÁu…
;

1259 i‡(
yych¨
 =
YYEMPTY
)

1261 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1262 
yych¨
 = 
	`yyÀx
 ();

1265 i‡(
yych¨
 <
YYEOF
)

1267 
yych¨
 = 
yytokí
 = 
YYEOF
;

1268 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1272 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1273 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1278 
yyn
 +
yytokí
;

1279 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1280 
yydeÁu…
;

1281 
yyn
 = 
yyèbÀ
[yyn];

1282 i‡(
yyn
 <= 0)

1284 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1285 
yyîæab
;

1286 
yyn
 = -yyn;

1287 
yyªdu˚
;

1292 i‡(
yyîr°©us
)

1293 
yyîr°©us
--;

1296 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1299 
yych¨
 = 
YYEMPTY
;

1301 
yy°©e
 = 
yyn
;

1302 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1303 *++
yyv•
 = 
yylvÆ
;

1304 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1305 *++
yyl•
 = 
yyŒoc
;

1306 
yy√w°©e
;

1312 
yydeÁu…
:

1313 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1314 i‡(
yyn
 == 0)

1315 
yyîæab
;

1316 
yyªdu˚
;

1322 
yyªdu˚
:

1324 
yyÀn
 = 
yyr2
[
yyn
];

1334 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1337 
	`YYLLOC_DEFAULT
 (
yyloc
, (
yyl•
 - 
yyÀn
), yylen);

1338 
	`YY_REDUCE_PRINT
 (
yyn
);

1339 
yyn
)

1343 { 
em©ch_roŸ
 = (
yyv•
[0].
e
); }

1350 
em©ch_roŸ
 = (
yyv•
[-1].
e
);

1351 
YYACCEPT
;

1358 { (
yyvÆ
.
e
Ë(
yyv•
[0].e); }

1365 (
yyv•
[-2].
e
)->
ªœti⁄
 = (yyv•[-1].
i
);

1366 (
yyv•
[-2].
e
)->
√xt
 = (yyvsp[0].e);

1367 (
yyvÆ
.
e
Ë(
yyv•
[-2].e);

1375 (
yyv•
[-3].
b
)->
√xt
 = (yyvsp[-1].b);

1376 (
yyvÆ
.
e
Ë
	`√w_em©ch
((
yyv•
[-3].
b
), (yyv•[-4].
i
));

1377 i‡((
yyvÆ
.
e
Ë=
NULL
)

1378 
YYABORT
;

1386 (
yyvÆ
.
e
Ë
	`√w_em©ch
(
NULL
, (
yyv•
[-3].
i
));

1387 i‡((
yyvÆ
.
e
Ë=
NULL
)

1388 
YYABORT
;

1389 (
yyvÆ
.
e
)->
chûd
 = (
yyv•
[-1].e);

1396 { (
yyvÆ
.
b
Ë(
yyv•
[0].b); }

1402 { (
yyv•
[-1].
b
)->
√xt
 = (yyvsp[0].b); }

1408 { (
yyvÆ
.
i
Ë
TCF_EM_REL_AND
; }

1414 { (
yyvÆ
.
i
Ë
TCF_EM_REL_OR
; }

1420 { (
yyvÆ
.
i
) = 0; }

1426 { (
yyvÆ
.
i
) = 1; }

1445 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1447 
	`YYPOPSTACK
 (
yyÀn
);

1448 
yyÀn
 = 0;

1449 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1451 *++
yyv•
 = 
yyvÆ
;

1452 *++
yyl•
 = 
yyloc
;

1458 
yyn
 = 
yyr1
[yyn];

1460 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1461 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1462 
yy°©e
 = 
yyèbÀ
[yystate];

1464 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1466 
yy√w°©e
;

1472 
yyîæab
:

1475 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

1478 i‡(!
yyîr°©us
)

1480 ++
yy√ºs
;

1481 #i‡! 
YYERROR_VERBOSE


1482 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1484 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

1485 
yys•
, 
yytokí
)

	)

1487 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

1488 
yysy¡ax_îr‹_°©us
;

1489 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1490 i‡(
yysy¡ax_îr‹_°©us
 == 0)

1491 
yymsgp
 = 
yymsg
;

1492 i‡(
yysy¡ax_îr‹_°©us
 == 1)

1494 i‡(
yymsg
 !
yymsgbuf
)

1495 
	`YYSTACK_FREE
 (
yymsg
);

1496 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

1497 i‡(!
yymsg
)

1499 
yymsg
 = 
yymsgbuf
;

1500 
yymsg_Æloc
 =  
yymsgbuf
;

1501 
yysy¡ax_îr‹_°©us
 = 2;

1505 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1506 
yymsgp
 = 
yymsg
;

1509 
	`yyîr‹
 (
yymsgp
);

1510 i‡(
yysy¡ax_îr‹_°©us
 == 2)

1511 
yyexhau°edœb
;

1513 #unde‡
YYSYNTAX_ERROR


1517 
yyîr‹_ønge
[1] = 
yyŒoc
;

1519 i‡(
yyîr°©us
 == 3)

1524 i‡(
yych¨
 <
YYEOF
)

1527 i‡(
yych¨
 =
YYEOF
)

1528 
YYABORT
;

1532 
	`yyde°ru˘
 ("Error: discarding",

1533 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1534 
yych¨
 = 
YYEMPTY
;

1540 
yyîæab1
;

1546 
yyîr‹œb
:

1552 
yyîr‹œb
;

1554 
yyîr‹_ønge
[1] = 
yyl•
[1-
yyÀn
];

1557 
	`YYPOPSTACK
 (
yyÀn
);

1558 
yyÀn
 = 0;

1559 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1560 
yy°©e
 = *
yys•
;

1561 
yyîæab1
;

1567 
yyîæab1
:

1568 
yyîr°©us
 = 3;

1572 
yyn
 = 
yy∑˘
[
yy°©e
];

1573 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1575 
yyn
 +
YYTERROR
;

1576 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1578 
yyn
 = 
yyèbÀ
[yyn];

1579 i‡(0 < 
yyn
)

1585 i‡(
yys•
 =
yyss
)

1586 
YYABORT
;

1588 
yyîr‹_ønge
[1] = *
yyl•
;

1589 
	`yyde°ru˘
 ("Error:Öopping",

1590 
yy°os
[
yy°©e
], 
yyv•
, 
yyl•
);

1591 
	`YYPOPSTACK
 (1);

1592 
yy°©e
 = *
yys•
;

1593 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1596 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1597 *++
yyv•
 = 
yylvÆ
;

1598 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1600 
yyîr‹_ønge
[2] = 
yyŒoc
;

1603 
	`YYLLOC_DEFAULT
 (
yyloc
, 
yyîr‹_ønge
, 2);

1604 *++
yyl•
 = 
yyloc
;

1607 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1609 
yy°©e
 = 
yyn
;

1610 
yy√w°©e
;

1616 
yyac˚±œb
:

1617 
yyªsu…
 = 0;

1618 
yyªtu∫
;

1623 
yyab‹éab
:

1624 
yyªsu…
 = 1;

1625 
yyªtu∫
;

1627 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


1631 
yyexhau°edœb
:

1632 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1633 
yyªsu…
 = 2;

1637 
yyªtu∫
:

1638 i‡(
yych¨
 !
YYEMPTY
)

1642 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1643 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1644 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1648 
	`YYPOPSTACK
 (
yyÀn
);

1649 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1650 
yys•
 !
yyss
)

1652 
	`yyde°ru˘
 ("Cleanup:Öopping",

1653 
yy°os
[*
yys•
], 
yyv•
, 
yyl•
);

1654 
	`YYPOPSTACK
 (1);

1656 #i‚de‡
yyovîÊow


1657 i‡(
yyss
 !
yysß
)

1658 
	`YYSTACK_FREE
 (
yyss
);

1660 #i‡
YYERROR_VERBOSE


1661 i‡(
yymsg
 !
yymsgbuf
)

1662 
	`YYSTACK_FREE
 (
yymsg
);

1664  
yyªsu…
;

1665 
	}
}

1669 
	$yyîr‹
(c⁄° *
s
)

1671 
em©ch_îr
 = 
	`°rdup
(
s
);

1672 
	}
}

	@tc/emp_ematch.yacc.h

33 #i‚de‡
YY_EMATCH_EMP_EMATCH_YACC_H_INCLUDED


34 
	#YY_EMATCH_EMP_EMATCH_YACC_H_INCLUDED


	)

36 #i‚de‡
YYDEBUG


37 
	#YYDEBUG
 1

	)

39 #i‡
YYDEBUG


40 
em©ch_debug
;

44 #i‚de‡
YYTOKENTYPE


45 
	#YYTOKENTYPE


	)

46 
	eyytokíty≥


48 
	mERROR
 = 258,

49 
	mATTRIBUTE
 = 259,

50 
	mAND
 = 260,

51 
	mOR
 = 261,

52 
	mNOT
 = 262

57 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


58 
YYSTYPE
 
	tYYSTYPE
;

59 
	uYYSTYPE


63 
	mi
;

64 
b°r
 *
	mb
;

65 
em©ch
 *
	me
;

69 
	#YYSTYPE_IS_TRIVIAL
 1

	)

70 
	#YYSTYPE_IS_DECLARED
 1

	)

74 #i‡! 
deföed
 
YYLTYPE
 && ! deföed 
YYLTYPE_IS_DECLARED


75 
YYLTYPE
 
	tYYLTYPE
;

76 
	sYYLTYPE


78 
	mfú°_löe
;

79 
	mfú°_cﬁumn
;

80 
	mœ°_löe
;

81 
	mœ°_cﬁumn
;

83 
	#YYLTYPE_IS_DECLARED
 1

	)

84 
	#YYLTYPE_IS_TRIVIAL
 1

	)

88 
YYSTYPE
 
em©ch_lvÆ
;

89 
YYLTYPE
 
em©ch_Œoc
;

90 
em©ch_∑r£
 ();

	@tc/f_basic.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<löux/if.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~"m_em©ch.h
"

28 
	$ex∂aö
()

30 
	`Ârötf
(
°dîr
, "Usage: ... basic [ match EMATCH_TREE ] \n");

31 
	`Ârötf
(
°dîr
, " [áction ACTION_SPEC ] [ classid CLASSID ]\n");

32 
	`Ârötf
(
°dîr
, "\n");

33 
	`Ârötf
(
°dîr
, "Where: SELECTOR := SAMPLE SAMPLE ...\n");

34 
	`Ârötf
(
°dîr
, " FILTERID := X:Y:Z\n");

35 
	`Ârötf
(
°dîr
, " ACTION_SPEC := ...Üookát individualáctions\n");

36 
	`Ârötf
(
°dîr
, "\nNOTE: CLASSID isÖarsedás hexadecimal input.\n");

37 
	}
}

39 
	$basic_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
,

40 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

42 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

43 
π©å
 *
èû
;

44 
h
 = 0;

46 i‡(
h™dÀ
) {

47 
h
 = 
	`°πﬁ
(
h™dÀ
, 
NULL
, 0);

48 i‡(
h
 =
LONG_MIN
 || h =
LONG_MAX
) {

49 
	`Ârötf
(
°dîr
, "Illegal handle \"%s\", must beÇumeric.\n",

50 
h™dÀ
);

54 
t
->
tcm_h™dÀ
 = 
h
;

56 i‡(
¨gc
 == 0)

59 
èû
 = (
π©å
*)(((*)
n
)+
	`NLMSG_ALIGN
“->
∆msg_Àn
));

60 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_OPTIONS
, 
NULL
, 0);

62 
¨gc
 > 0) {

63 i‡(
	`m©ches
(*
¨gv
, "match") == 0) {

64 
	`NEXT_ARG
();

65 i‡(
	`∑r£_em©ch
(&
¨gc
, &
¨gv
, 
TCA_BASIC_EMATCHES
, 
n
)) {

66 
	`Ârötf
(
°dîr
, "Illegal \"ematch\"\n");

70 } i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

71 
	`°rcmp
(*
¨gv
, "flowid") == 0) {

72 
h™dÀ
;

73 
	`NEXT_ARG
();

74 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
)) {

75 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

78 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_BASIC_CLASSID
, &
h™dÀ
, 4);

79 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

80 
	`NEXT_ARG
();

81 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_BASIC_ACT
, 
n
)) {

82 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

87 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

88 
	`NEXT_ARG
();

89 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_BASIC_POLICE
, 
n
)) {

90 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

94 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

95 
	`ex∂aö
();

98 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

99 
	`ex∂aö
();

102 
¨gc
--; 
¨gv
++;

105 
èû
->
πa_Àn
 = (((*)
n
)+n->
∆msg_Àn
) - (*)tail;

107 
	}
}

109 
	$basic_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
,

110 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

112 
π©å
 *
tb
[
TCA_BASIC_MAX
+1];

114 i‡(
›t
 =
NULL
)

117 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_BASIC_MAX
, 
›t
);

119 i‡(
h™dÀ
)

120 
	`Ârötf
(
f
, "h™dÀ 0x%x ", 
h™dÀ
);

122 i‡(
tb
[
TCA_BASIC_CLASSID
]) {

123 
	`SPRINT_BUF
(
b1
);

124 
	`Ârötf
(
f
, "flowid %s ",

125 
	`•röt_tc_˛assid
(
	`πa_gë©å_u32
(
tb
[
TCA_BASIC_CLASSID
]), 
b1
));

128 i‡(
tb
[
TCA_BASIC_EMATCHES
])

129 
	`¥öt_em©ch
(
f
, 
tb
[
TCA_BASIC_EMATCHES
]);

131 i‡(
tb
[
TCA_BASIC_POLICE
]) {

132 
	`Ârötf
(
f
, "\n");

133 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_BASIC_POLICE
]);

136 i‡(
tb
[
TCA_BASIC_ACT
]) {

137 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_BASIC_ACT
]);

141 
	}
}

143 
fûãr_utû
 
	gbasic_fûãr_utû
 = {

144 .
id
 = "basic",

145 .
	g∑r£_f›t
 = 
basic_∑r£_›t
,

146 .
	g¥öt_f›t
 = 
basic_¥öt_›t
,

	@tc/f_bpf.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<libgí.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<°dboﬁ.h
>

23 
	~<î∫o.h
>

24 
	~<limôs.h
>

25 
	~<löux/fûãr.h
>

26 
	~<löux/if.h
>

28 
	~"utûs.h
"

29 
	~"tc_utû.h
"

30 
	~"tc_bpf.h
"

32 c⁄° 
bpf_¥og_ty≥
 
	gbpf_ty≥
 = 
BPF_PROG_TYPE_SCHED_CLS
;

34 
	$ex∂aö
()

36 
	`Ârötf
(
°dîr
, "Usage: ... bpf ...\n");

37 
	`Ârötf
(
°dîr
, "\n");

38 
	`Ârötf
(
°dîr
, "BPF use case:\n");

39 
	`Ârötf
(
°dîr
, " bytecode BPF_BYTECODE\n");

40 
	`Ârötf
(
°dîr
, " bytecode-file FILE\n");

41 
	`Ârötf
(
°dîr
, "\n");

42 
	`Ârötf
(
°dîr
, "eBPF use case:\n");

43 
	`Ârötf
(
°dîr
, " object-file FILE [ section CLS_NAME ] [Éxport UDS_FILE ]");

44 
	`Ârötf
(
°dîr
, " [ verbose ]\n");

45 
	`Ârötf
(
°dîr
, "\n");

46 
	`Ârötf
(
°dîr
, "CommonÑemaining options:\n");

47 
	`Ârötf
(
°dîr
, " [áction ACTION_SPEC ]\n");

48 
	`Ârötf
(
°dîr
, " [ classid CLASSID ]\n");

49 
	`Ârötf
(
°dîr
, "\n");

50 
	`Ârötf
(
°dîr
, "Where BPF_BYTECODE := \'s,cÅ f k,cÅ f k,cÅ f k,...\'\n");

51 
	`Ârötf
(
°dîr
, "c,t,f,kánd sáre decimals; s denotesÇumber of 4-tuples\n");

52 
	`Ârötf
(
°dîr
, "\n");

53 
	`Ârötf
(
°dîr
, "Where FILEÖointsÅoá file containingÅhe BPF_BYTECODE string,\n");

54 
	`Ârötf
(
°dîr
, "an ELF file containingÉBPF map definitionsánd bytecode.\n");

55 
	`Ârötf
(
°dîr
, "\n");

56 
	`Ârötf
(
°dîr
, "Where CLS_NAMEÑefersÅoÅhe sectionÇame containingÅhe\n");

57 
	`Ârötf
(
°dîr
, "˛assifõ∏(deÁu… \'%s\').\n", 
	`bpf_deÁu…_£˘i⁄
(
bpf_ty≥
));

58 
	`Ârötf
(
°dîr
, "\n");

59 
	`Ârötf
(
°dîr
, "Where UDS_FILEÖointsÅoá unix domain socket file in order\n");

60 
	`Ârötf
(
°dîr
, "to hand off control ofáll createdÉBPF mapsÅoánágent.\n");

61 
	`Ârötf
(
°dîr
, "\n");

62 
	`Ârötf
(
°dîr
, "ACTION_SPEC := ...Üookát individualáctions\n");

63 
	`Ârötf
(
°dîr
, "NOTE: CLASSID isÖarsedás hexadecimal input.\n");

64 
	}
}

66 
	$bpf_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
,

67 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

69 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

70 c⁄° *
bpf_uds_«me
 = 
NULL
;

71 c⁄° *
bpf_£c_«me
 = 
NULL
;

72 *
bpf_obj
 = 
NULL
;

73 
π©å
 *
èû
;

74 
boﬁ
 
£í_run
 = 
Ál£
;

75 
h
 = 0;

76 
ªt
 = 0;

78 i‡(
¨gc
 == 0)

81 i‡(
h™dÀ
) {

82 
h
 = 
	`°πﬁ
(
h™dÀ
, 
NULL
, 0);

83 i‡(
h
 =
LONG_MIN
 || h =
LONG_MAX
) {

84 
	`Ârötf
(
°dîr
, "Illegal handle \"%s\", must be "

85 "numîic.\n", 
h™dÀ
);

90 
t
->
tcm_h™dÀ
 = 
h
;

92 
èû
 = (
π©å
 *)(((*)
n
Ë+ 
	`NLMSG_ALIGN
“->
∆msg_Àn
));

93 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_OPTIONS
, 
NULL
, 0);

95 
¨gc
 > 0) {

96 i‡(
	`m©ches
(*
¨gv
, "run") == 0) {

97 
sock_fûãr
 
bpf_›s
[
BPF_MAXINSNS
];

98 
boﬁ
 
‰om_fûe
, 
ebpf
, 
bpf_vîbo£
;

99 
ªt
;

101 
	`NEXT_ARG
();

102 
›t_bpf
:

103 
bpf_£c_«me
 = 
	`bpf_deÁu…_£˘i⁄
(
bpf_ty≥
);

104 
bpf_vîbo£
 = 
Ál£
;

105 
ebpf
 = 
Ál£
;

106 
£í_run
 = 
åue
;

108 i‡(
	`°rcmp
(*
¨gv
, "bytecode-file") == 0 ||

109 
	`°rcmp
(*
¨gv
, "bcf") == 0) {

110 
‰om_fûe
 = 
åue
;

111 } i‡(
	`°rcmp
(*
¨gv
, "bytecode") == 0 ||

112 
	`°rcmp
(*
¨gv
, "bc") == 0) {

113 
‰om_fûe
 = 
Ál£
;

114 } i‡(
	`°rcmp
(*
¨gv
, "object-file") == 0 ||

115 
	`°rcmp
(*
¨gv
, "obj") == 0) {

116 
ebpf
 = 
åue
;

118 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

119 
	`ex∂aö
();

123 
	`NEXT_ARG
();

124 i‡(
ebpf
) {

125 
bpf_uds_«me
 = 
	`gëív
(
BPF_ENV_UDS
);

126 
bpf_obj
 = *
¨gv
;

127 
	`NEXT_ARG
();

129 i‡(
	`°rcmp
(*
¨gv
, "section") == 0 ||

130 
	`°rcmp
(*
¨gv
, "sec") == 0) {

131 
	`NEXT_ARG
();

132 
bpf_£c_«me
 = *
¨gv
;

133 
	`NEXT_ARG
();

135 i‡(!
bpf_uds_«me
 &&

136 (
	`°rcmp
(*
¨gv
, "export") == 0 ||

137 
	`°rcmp
(*
¨gv
, "exp") == 0)) {

138 
	`NEXT_ARG
();

139 
bpf_uds_«me
 = *
¨gv
;

140 
	`NEXT_ARG
();

142 i‡(
	`°rcmp
(*
¨gv
, "verbose") == 0 ||

143 
	`°rcmp
(*
¨gv
, "verb") == 0) {

144 
bpf_vîbo£
 = 
åue
;

145 
	`NEXT_ARG
();

148 
	`PREV_ARG
();

151 
ªt
 = 
ebpf
 ? 
	`bpf_›í_obje˘
(
bpf_obj
, 
bpf_ty≥
, 
bpf_£c_«me
,

152 
bpf_vîbo£
) :

153 
	`bpf_∑r£_›s
(
¨gc
, 
¨gv
, 
bpf_›s
, 
‰om_fûe
);

154 i‡(
ªt
 < 0) {

155 
	`Ârötf
(
°dîr
, "%s\n", 
ebpf
 ?

161 i‡(
ebpf
) {

162 
bpf_«me
[256];

164 
bpf_obj
 = 
	`ba£«me
(bpf_obj);

166 
	`¢¥ötf
(
bpf_«me
, (bpf_name), "%s:[%s]",

167 
bpf_obj
, 
bpf_£c_«me
);

169 
	`add©å32
(
n
, 
MAX_MSG
, 
TCA_BPF_FD
, 
ªt
);

170 
	`add©å°rz
(
n
, 
MAX_MSG
, 
TCA_BPF_NAME
, 
bpf_«me
);

172 
	`add©å16
(
n
, 
MAX_MSG
, 
TCA_BPF_OPS_LEN
, 
ªt
);

173 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_BPF_OPS
, &
bpf_›s
,

174 
ªt
 * (
sock_fûãr
));

176 } i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

177 
	`°rcmp
(*
¨gv
, "flowid") == 0) {

178 
h™dÀ
;

180 
	`NEXT_ARG
();

181 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
)) {

182 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

185 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_BPF_CLASSID
, &
h™dÀ
, 4);

186 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

187 
	`NEXT_ARG
();

188 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_BPF_ACT
, 
n
)) {

189 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

193 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

194 
	`NEXT_ARG
();

195 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_BPF_POLICE
, 
n
)) {

196 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

200 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

201 
	`ex∂aö
();

204 i‡(!
£í_run
)

205 
›t_bpf
;

207 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

208 
	`ex∂aö
();

211 
¨gc
--;

212 
¨gv
++;

215 
èû
->
πa_Àn
 = (((*)
n
Ë+Ç->
∆msg_Àn
) - (*)tail;

217 i‡(
bpf_uds_«me
)

218 
ªt
 = 
	`bpf_£nd_m≠_fds
(
bpf_uds_«me
, 
bpf_obj
);

220  
ªt
;

221 
	}
}

223 
	$bpf_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
,

224 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

226 
π©å
 *
tb
[
TCA_BPF_MAX
 + 1];

228 i‡(
›t
 =
NULL
)

231 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_BPF_MAX
, 
›t
);

233 i‡(
h™dÀ
)

234 
	`Ârötf
(
f
, "h™dÀ 0x%x ", 
h™dÀ
);

236 i‡(
tb
[
TCA_BPF_CLASSID
]) {

237 
	`SPRINT_BUF
(
b1
);

238 
	`Ârötf
(
f
, "flowid %s ",

239 
	`•röt_tc_˛assid
(
	`πa_gë©å_u32
(
tb
[
TCA_BPF_CLASSID
]), 
b1
));

242 i‡(
tb
[
TCA_BPF_NAME
])

243 
	`Ârötf
(
f
, "%†", 
	`πa_gë©å_°r
(
tb
[
TCA_BPF_NAME
]));

244 i‡(
tb
[
TCA_BPF_FD
])

245 
	`Ârötf
(
f
, "pfd %u ", 
	`πa_gë©å_u32
(
tb
[
TCA_BPF_FD
]));

247 i‡(
tb
[
TCA_BPF_OPS
] &&Åb[
TCA_BPF_OPS_LEN
]) {

248 
	`bpf_¥öt_›s
(
f
, 
tb
[
TCA_BPF_OPS
],

249 
	`πa_gë©å_u16
(
tb
[
TCA_BPF_OPS_LEN
]));

250 
	`Ârötf
(
f
, "\n");

253 i‡(
tb
[
TCA_BPF_POLICE
]) {

254 
	`Ârötf
(
f
, "\n");

255 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_BPF_POLICE
]);

258 i‡(
tb
[
TCA_BPF_ACT
]) {

259 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_BPF_ACT
]);

263 
	}
}

265 
fûãr_utû
 
	gbpf_fûãr_utû
 = {

266 .
id
 = "bpf",

267 .
	g∑r£_f›t
 = 
bpf_∑r£_›t
,

268 .
	g¥öt_f›t
 = 
bpf_¥öt_›t
,

	@tc/f_cgroup.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~"utûs.h
"

16 
	~"tc_utû.h
"

17 
	~"m_em©ch.h
"

19 
	$ex∂aö
()

21 
	`Ârötf
(
°dîr
, "Usage: ... cgroup [ match EMATCH_TREE ]\n");

22 
	`Ârötf
(
°dîr
, " [áction ACTION_SPEC ]\n");

23 
	}
}

25 
	$cgroup_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
,

26 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

28 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

29 
π©å
 *
èû
;

30 
h
 = 0;

32 i‡(
h™dÀ
) {

33 
h
 = 
	`°πﬁ
(
h™dÀ
, 
NULL
, 0);

34 i‡(
h
 =
LONG_MIN
 || h =
LONG_MAX
) {

35 
	`Ârötf
(
°dîr
, "Illegal handle \"%s\", must beÇumeric.\n",

36 
h™dÀ
);

41 
t
->
tcm_h™dÀ
 = 
h
;

43 
èû
 = (
π©å
*)(((*)
n
)+
	`NLMSG_ALIGN
“->
∆msg_Àn
));

44 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_OPTIONS
, 
NULL
, 0);

46 
¨gc
 > 0) {

47 i‡(
	`m©ches
(*
¨gv
, "match") == 0) {

48 
	`NEXT_ARG
();

49 i‡(
	`∑r£_em©ch
(&
¨gc
, &
¨gv
, 
TCA_CGROUP_EMATCHES
, 
n
)) {

50 
	`Ârötf
(
°dîr
, "Illegal \"ematch\"\n");

54 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

55 
	`NEXT_ARG
();

56 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_CGROUP_ACT
, 
n
)) {

57 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

62 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

63 
	`NEXT_ARG
();

64 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_CGROUP_POLICE
, 
n
)) {

65 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

69 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

70 
	`ex∂aö
();

73 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

74 
	`ex∂aö
();

79 
èû
->
πa_Àn
 = (((*)
n
)+n->
∆msg_Àn
) - (*)tail;

81 
	}
}

83 
	$cgroup_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
,

84 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

86 
π©å
 *
tb
[
TCA_CGROUP_MAX
+1];

88 i‡(
›t
 =
NULL
)

91 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_CGROUP_MAX
, 
›t
);

93 i‡(
h™dÀ
)

94 
	`Ârötf
(
f
, "h™dÀ 0x%x ", 
h™dÀ
);

96 i‡(
tb
[
TCA_CGROUP_EMATCHES
])

97 
	`¥öt_em©ch
(
f
, 
tb
[
TCA_CGROUP_EMATCHES
]);

99 i‡(
tb
[
TCA_CGROUP_POLICE
]) {

100 
	`Ârötf
(
f
, "\n");

101 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_CGROUP_POLICE
]);

104 i‡(
tb
[
TCA_CGROUP_ACT
])

105 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_CGROUP_ACT
]);

108 
	}
}

110 
fûãr_utû
 
	gcgroup_fûãr_utû
 = {

111 .
id
 = "cgroup",

112 .
	g∑r£_f›t
 = 
cgroup_∑r£_›t
,

113 .
	g¥öt_f›t
 = 
cgroup_¥öt_›t
,

	@tc/f_flow.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

14 
	~<°rög.h
>

15 
	~<î∫o.h
>

17 
	~"utûs.h
"

18 
	~"tc_utû.h
"

19 
	~"m_em©ch.h
"

21 
	$ex∂aö
()

23 
	`Ârötf
(
°dîr
,

40 
	}
}

42 c⁄° *
	gÊow_keys
[
FLOW_KEY_MAX
+1] = {

43 [
FLOW_KEY_SRC
] = "src",

44 [
FLOW_KEY_DST
] = "dst",

45 [
FLOW_KEY_PROTO
] = "proto",

46 [
FLOW_KEY_PROTO_SRC
] = "proto-src",

47 [
FLOW_KEY_PROTO_DST
] = "proto-dst",

48 [
FLOW_KEY_IIF
] = "iif",

49 [
FLOW_KEY_PRIORITY
] = "priority",

50 [
FLOW_KEY_MARK
] = "mark",

51 [
FLOW_KEY_NFCT
] = "nfct",

52 [
FLOW_KEY_NFCT_SRC
] = "nfct-src",

53 [
FLOW_KEY_NFCT_DST
] = "nfct-dst",

54 [
FLOW_KEY_NFCT_PROTO_SRC
] = "nfct-proto-src",

55 [
FLOW_KEY_NFCT_PROTO_DST
] = "nfct-proto-dst",

56 [
FLOW_KEY_RTCLASSID
] = "rt-classid",

57 [
FLOW_KEY_SKUID
] = "sk-uid",

58 [
FLOW_KEY_SKGID
] = "sk-gid",

59 [
FLOW_KEY_VLAN_TAG
] = "vlan-tag",

60 [
FLOW_KEY_RXHASH
] = "rxhash",

63 
	$Êow_∑r£_keys
(
__u32
 *
keys
, __u32 *
nkeys
, *
¨gv
)

65 *
s
, *
£p
;

66 
i
;

68 *
keys
 = 0;

69 *
nkeys
 = 0;

70 
s
 = 
¨gv
;

71 
s
 !
NULL
) {

72 
£p
 = 
	`°rchr
(
s
, ',');

73 i‡(
£p
)

74 *
£p
 = '\0';

76 
i
 = 0; i <
FLOW_KEY_MAX
; i++) {

77 i‡(
	`m©ches
(
s
, 
Êow_keys
[
i
]) == 0) {

78 *
keys
 |1 << 
i
;

79 (*
nkeys
)++;

83 i‡(
i
 > 
FLOW_KEY_MAX
) {

84 
	`Ârötf
(
°dîr
, "Unknow¿Êow key \"%s\"\n", 
s
);

87 
s
 = 
£p
 ? sï + 1 : 
NULL
;

90 
	}
}

92 
	$å™s„r_bô›
(
__u32
 *
mask
, __u32 *
x‹
, __u32 
m
, __u32 
x
)

94 *
x‹
 = 
x
 ^ (*x‹ & 
m
);

95 *
mask
 &
m
;

96 
	}
}

98 
	$gë_addíd
(
__u32
 *
addíd
, *
¨gv
, __u32 
keys
)

100 
öë_¥efix
 
addr
;

101 
sign
 = 0;

102 
__u32
 
tmp
;

104 i‡(*
¨gv
 == '-') {

105 
sign
 = 1;

106 
¨gv
++;

109 i‡(
	`gë_u32
(&
tmp
, 
¨gv
, 0) == 0)

110 
out
;

112 i‡(
keys
 & (
FLOW_KEY_SRC
 | 
FLOW_KEY_DST
 |

113 
FLOW_KEY_NFCT_SRC
 | 
FLOW_KEY_NFCT_DST
) &&

114 
	`gë_addr
(&
addr
, 
¨gv
, 
AF_UNSPEC
) == 0) {

115 
addr
.
Ámûy
) {

116 
AF_INET
:

117 
tmp
 = 
	`¡ohl
(
addr
.
d©a
[0]);

118 
out
;

119 
AF_INET6
:

120 
tmp
 = 
	`¡ohl
(
addr
.
d©a
[3]);

121 
out
;

126 
out
:

127 i‡(
sign
)

128 
tmp
 = -tmp;

129 *
addíd
 = 
tmp
;

131 
	}
}

133 
	$Êow_∑r£_›t
(
fûãr_utû
 *
fu
, *
h™dÀ
,

134 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

136 
tc_pﬁi˚
 
ç
;

137 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

138 
π©å
 *
èû
;

139 
__u32
 
mask
 = ~0U, 
x‹
 = 0;

140 
__u32
 
keys
 = 0, 
nkeys
 = 0;

141 
__u32
 
mode
 = 
FLOW_MODE_MAP
;

142 
__u32
 
tmp
;

144 
	`mem£t
(&
ç
, 0, (tp));

146 i‡(
h™dÀ
) {

147 i‡(
	`gë_u32
(&
t
->
tcm_h™dÀ
, 
h™dÀ
, 0)) {

148 
	`Ârötf
(
°dîr
, "Illegal \"handle\"\n");

153 
èû
 = 
	`NLMSG_TAIL
(
n
);

154 
	`add©å_l
(
n
, 4096, 
TCA_OPTIONS
, 
NULL
, 0);

156 
¨gc
 > 0) {

157 i‡(
	`m©ches
(*
¨gv
, "map") == 0) {

158 
mode
 = 
FLOW_MODE_MAP
;

159 } i‡(
	`m©ches
(*
¨gv
, "hash") == 0) {

160 
mode
 = 
FLOW_MODE_HASH
;

161 } i‡(
	`m©ches
(*
¨gv
, "keys") == 0) {

162 
	`NEXT_ARG
();

163 i‡(
	`Êow_∑r£_keys
(&
keys
, &
nkeys
, *
¨gv
))

165 
	`add©å32
(
n
, 4096, 
TCA_FLOW_KEYS
, 
keys
);

166 } i‡(
	`m©ches
(*
¨gv
, "and") == 0) {

167 
	`NEXT_ARG
();

168 i‡(
	`gë_u32
(&
tmp
, *
¨gv
, 0)) {

169 
	`Ârötf
(
°dîr
, "Illegal \"mask\"\n");

172 
	`å™s„r_bô›
(&
mask
, &
x‹
, 
tmp
, 0);

173 } i‡(
	`m©ches
(*
¨gv
, "or") == 0) {

174 
	`NEXT_ARG
();

175 i‡(
	`gë_u32
(&
tmp
, *
¨gv
, 0)) {

176 
	`Ârötf
(
°dîr
, "Illegal \"or\"\n");

179 
	`å™s„r_bô›
(&
mask
, &
x‹
, ~
tmp
,Åmp);

180 } i‡(
	`m©ches
(*
¨gv
, "xor") == 0) {

181 
	`NEXT_ARG
();

182 i‡(
	`gë_u32
(&
tmp
, *
¨gv
, 0)) {

183 
	`Ârötf
(
°dîr
, "Illegal \"xor\"\n");

186 
	`å™s„r_bô›
(&
mask
, &
x‹
, ~0, 
tmp
);

187 } i‡(
	`m©ches
(*
¨gv
, "rshift") == 0) {

188 
	`NEXT_ARG
();

189 i‡(
	`gë_u32
(&
tmp
, *
¨gv
, 0)) {

190 
	`Ârötf
(
°dîr
, "Illegal \"rshift\"\n");

193 
	`add©å32
(
n
, 4096, 
TCA_FLOW_RSHIFT
, 
tmp
);

194 } i‡(
	`m©ches
(*
¨gv
, "addend") == 0) {

195 
	`NEXT_ARG
();

196 i‡(
	`gë_addíd
(&
tmp
, *
¨gv
, 
keys
)) {

197 
	`Ârötf
(
°dîr
, "Illegal \"addend\"\n");

200 
	`add©å32
(
n
, 4096, 
TCA_FLOW_ADDEND
, 
tmp
);

201 } i‡(
	`m©ches
(*
¨gv
, "divisor") == 0) {

202 
	`NEXT_ARG
();

203 i‡(
	`gë_u32
(&
tmp
, *
¨gv
, 0)) {

204 
	`Ârötf
(
°dîr
, "Illegal \"divisor\"\n");

207 
	`add©å32
(
n
, 4096, 
TCA_FLOW_DIVISOR
, 
tmp
);

208 } i‡(
	`m©ches
(*
¨gv
, "baseclass") == 0) {

209 
	`NEXT_ARG
();

210 i‡(
	`gë_tc_˛assid
(&
tmp
, *
¨gv
Ë|| 
	`TC_H_MIN
(tmp) == 0) {

211 
	`Ârötf
(
°dîr
, "Illegal \"baseclass\"\n");

214 
	`add©å32
(
n
, 4096, 
TCA_FLOW_BASECLASS
, 
tmp
);

215 } i‡(
	`m©ches
(*
¨gv
, "perturb") == 0) {

216 
	`NEXT_ARG
();

217 i‡(
	`gë_u32
(&
tmp
, *
¨gv
, 0)) {

218 
	`Ârötf
(
°dîr
, "Illegal \"perturb\"\n");

221 
	`add©å32
(
n
, 4096, 
TCA_FLOW_PERTURB
, 
tmp
);

222 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

223 
	`NEXT_ARG
();

224 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_FLOW_POLICE
, 
n
)) {

225 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

229 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

230 
	`NEXT_ARG
();

231 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_FLOW_ACT
, 
n
)) {

232 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

236 } i‡(
	`m©ches
(*
¨gv
, "match") == 0) {

237 
	`NEXT_ARG
();

238 i‡(
	`∑r£_em©ch
(&
¨gc
, &
¨gv
, 
TCA_FLOW_EMATCHES
, 
n
)) {

239 
	`Ârötf
(
°dîr
, "Illegal \"ematch\"\n");

243 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

244 
	`ex∂aö
();

247 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

248 
	`ex∂aö
();

251 
¨gv
++, 
¨gc
--;

254 i‡(
nkeys
 > 1 && 
mode
 !
FLOW_MODE_HASH
) {

255 
	`Ârötf
(
°dîr
, "Invalid mode \"map\" for multiple keys\n");

258 
	`add©å32
(
n
, 4096, 
TCA_FLOW_MODE
, 
mode
);

260 i‡(
mask
 !~0 || 
x‹
 != 0) {

261 
	`add©å32
(
n
, 4096, 
TCA_FLOW_MASK
, 
mask
);

262 
	`add©å32
(
n
, 4096, 
TCA_FLOW_XOR
, 
x‹
);

265 
èû
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)tail;

267 
	}
}

269 
	$Êow_¥öt_›t
(
fûãr_utû
 *
fu
, 
FILE
 *
f
, 
π©å
 *
›t
,

270 
__u32
 
h™dÀ
)

272 
π©å
 *
tb
[
TCA_FLOW_MAX
+1];

273 
	`SPRINT_BUF
(
b1
);

274 
i
;

275 
__u32
 
mask
 = ~0, 
vÆ
 = 0;

277 i‡(
›t
 =
NULL
)

278  -
EINVAL
;

280 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_FLOW_MAX
, 
›t
);

282 
	`Ârötf
(
f
, "h™dÀ 0x%x ", 
h™dÀ
);

284 i‡(
tb
[
TCA_FLOW_MODE
]) {

285 
__u32
 
mode
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FLOW_MODE
]);

287 
mode
) {

288 
FLOW_MODE_MAP
:

289 
	`Ârötf
(
f
, "map ");

291 
FLOW_MODE_HASH
:

292 
	`Ârötf
(
f
, "hash ");

297 i‡(
tb
[
TCA_FLOW_KEYS
]) {

298 
__u32
 
keymask
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FLOW_KEYS
]);

299 *
£p
 = "";

301 
	`Ârötf
(
f
, "keys ");

302 
i
 = 0; i <
FLOW_KEY_MAX
; i++) {

303 i‡(
keymask
 & (1 << 
i
)) {

304 
	`Ârötf
(
f
, "%s%s", 
£p
, 
Êow_keys
[
i
]);

305 
£p
 = ",";

308 
	`Ârötf
(
f
, " ");

311 i‡(
tb
[
TCA_FLOW_MASK
])

312 
mask
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FLOW_MASK
]);

313 i‡(
tb
[
TCA_FLOW_XOR
])

314 
vÆ
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FLOW_XOR
]);

316 i‡(
mask
 !~0 || 
vÆ
 != 0) {

317 
__u32
 
‹
 = (
mask
 & 
vÆ
) ^ val;

318 
__u32
 
x‹
 = 
mask
 & 
vÆ
;

320 i‡(
mask
 != ~0)

321 
	`Ârötf
(
f
, "™d 0x%.8x ", 
mask
);

322 i‡(
x‹
 != 0)

323 
	`Ârötf
(
f
, "x‹ 0x%.8x ", 
x‹
);

324 i‡(
‹
 != 0)

325 
	`Ârötf
(
f
, "‹ 0x%.8x ", 
‹
);

328 i‡(
tb
[
TCA_FLOW_RSHIFT
])

329 
	`Ârötf
(
f
, "rshift %u ",

330 
	`πa_gë©å_u32
(
tb
[
TCA_FLOW_RSHIFT
]));

331 i‡(
tb
[
TCA_FLOW_ADDEND
])

332 
	`Ârötf
(
f
, "addend 0x%x ",

333 
	`πa_gë©å_u32
(
tb
[
TCA_FLOW_ADDEND
]));

335 i‡(
tb
[
TCA_FLOW_DIVISOR
])

336 
	`Ârötf
(
f
, "divisor %u ",

337 
	`πa_gë©å_u32
(
tb
[
TCA_FLOW_DIVISOR
]));

338 i‡(
tb
[
TCA_FLOW_BASECLASS
])

339 
	`Ârötf
(
f
, "baseclass %s ",

340 
	`•röt_tc_˛assid
(
	`πa_gë©å_u32
(
tb
[
TCA_FLOW_BASECLASS
]), 
b1
));

342 i‡(
tb
[
TCA_FLOW_PERTURB
])

343 
	`Ârötf
(
f
, "perturb %usec ",

344 
	`πa_gë©å_u32
(
tb
[
TCA_FLOW_PERTURB
]));

346 i‡(
tb
[
TCA_FLOW_EMATCHES
])

347 
	`¥öt_em©ch
(
f
, 
tb
[
TCA_FLOW_EMATCHES
]);

348 i‡(
tb
[
TCA_FLOW_POLICE
])

349 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_FLOW_POLICE
]);

350 i‡(
tb
[
TCA_FLOW_ACT
]) {

351 
	`Ârötf
(
f
, "\n");

352 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_FLOW_ACT
]);

355 
	}
}

357 
fûãr_utû
 
	gÊow_fûãr_utû
 = {

358 .
id
 = "flow",

359 .
	g∑r£_f›t
 = 
Êow_∑r£_›t
,

360 .
	g¥öt_f›t
 = 
Êow_¥öt_›t
,

	@tc/f_flower.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<°rög.h
>

17 
	~<√t/if.h
>

18 
	~<löux/if_ëhî.h
>

19 
	~<löux/ù.h
>

21 
	~"utûs.h
"

22 
	~"tc_utû.h
"

23 
	~"π_«mes.h
"

25 
	$ex∂aö
()

27 
	`Ârötf
(
°dîr
, "Usage: ... flower [ MATCH-LIST ]\n");

28 
	`Ârötf
(
°dîr
, " [áction ACTION-SPEC ] [ classid CLASSID ]\n");

29 
	`Ârötf
(
°dîr
, "\n");

30 
	`Ârötf
(
°dîr
, "Where: MATCH-LIST := [ MATCH-LIST ] MATCH\n");

31 
	`Ârötf
(
°dîr
, " MATCH := { indev DEV-NAME | \n");

32 
	`Ârötf
(
°dîr
, " dst_mac MAC-ADDR | \n");

33 
	`Ârötf
(
°dîr
, " src_mac MAC-ADDR | \n");

34 
	`Ârötf
(
°dîr
, "Éth_type [ipv4 | ipv6 | ETH-TYPE ] | \n");

35 
	`Ârötf
(
°dîr
, " ip_proto [tcp | udp | IP-PROTO ] | \n");

36 
	`Ârötf
(
°dîr
, " dst_ip [ IPV4-ADDR | IPV6-ADDR ] | \n");

37 
	`Ârötf
(
°dîr
, " src_ip [ IPV4-ADDR | IPV6-ADDR ] | \n");

38 
	`Ârötf
(
°dîr
, " dst_port PORT-NUMBER | \n");

39 
	`Ârötf
(
°dîr
, " src_port PORT-NUMBER }\n");

40 
	`Ârötf
(
°dîr
, " FILTERID := X:Y:Z\n");

41 
	`Ârötf
(
°dîr
, " ACTION-SPEC := ...Üookát individualáctions\n");

42 
	`Ârötf
(
°dîr
, "\n");

43 
	`Ârötf
(
°dîr
, "NOTE: CLASSID, ETH-TYPE, IP-PROTOáreÖarsedás hexadecimal input.\n");

44 
	`Ârötf
(
°dîr
, "NOTE: There can be only used one maskÖer oneÖrio. If userÇeeds\n");

45 
	`Ârötf
(
°dîr
, "Åo specify different mask, he hasÅo use differentÖrio.\n");

46 
	}
}

48 
	$Êowî_∑r£_ëh_addr
(*
°r
, 
addr_ty≥
, 
mask_ty≥
,

49 
∆msghdr
 *
n
)

51 
ªt
;

52 
addr
[
ETH_ALEN
];

54 
ªt
 = 
	`Œ_addr_a2n
(
addr
, ◊ddr), 
°r
);

55 i‡(
ªt
 < 0)

57 
	`add©å_l
(
n
, 
MAX_MSG
, 
addr_ty≥
, 
addr
, (addr));

58 
	`mem£t
(
addr
, 0xff, 
ETH_ALEN
);

59 
	`add©å_l
(
n
, 
MAX_MSG
, 
mask_ty≥
, 
addr
, (addr));

61 
	}
}

63 
	$Êowî_∑r£_ëh_ty≥
(*
°r
, 
ty≥
, 
__be16
 *
p_ëh_ty≥
,

64 
∆msghdr
 *
n
)

66 
ªt
;

67 
__be16
 
ëh_ty≥
;

69 i‡(
	`m©ches
(
°r
, "ipv4") == 0) {

70 
ëh_ty≥
 = 
	`ht⁄s
(
ETH_P_IP
);

71 } i‡(
	`m©ches
(
°r
, "ipv6") == 0) {

72 
ëh_ty≥
 = 
	`ht⁄s
(
ETH_P_IPV6
);

74 
__u16
 
tmp
;

76 
ªt
 = 
	`gë_u16
(&
tmp
, 
°r
, 16);

77 i‡(
ªt
)

79 
ëh_ty≥
 = 
	`ht⁄s
(
tmp
);

81 
	`add©å16
(
n
, 
MAX_MSG
, 
ty≥
, 
ëh_ty≥
);

82 *
p_ëh_ty≥
 = 
ëh_ty≥
;

84 
	}
}

86 
	$Êowî_∑r£_ù_¥Ÿo
(*
°r
, 
__be16
 
ëh_ty≥
, 
ty≥
,

87 
__u8
 *
p_ù_¥Ÿo
, 
∆msghdr
 *
n
)

89 
ªt
;

90 
__u8
 
ù_¥Ÿo
;

92 i‡(
ëh_ty≥
 !
	`ht⁄s
(
ETH_P_IP
Ë&&Éth_ty≥ !ht⁄s(
ETH_P_IPV6
)) {

93 
	`Ârötf
(
°dîr
, "Illegal \"eth_type\" for ipÖroto\n");

96 i‡(
	`m©ches
(
°r
, "tcp") == 0) {

97 
ù_¥Ÿo
 = 
IPPROTO_TCP
;

98 } i‡(
	`m©ches
(
°r
, "udp") == 0) {

99 
ù_¥Ÿo
 = 
IPPROTO_UDP
;

101 
ªt
 = 
	`gë_u8
(&
ù_¥Ÿo
, 
°r
, 16);

102 i‡(
ªt
)

105 
	`add©å8
(
n
, 
MAX_MSG
, 
ty≥
, 
ù_¥Ÿo
);

106 *
p_ù_¥Ÿo
 = 
ù_¥Ÿo
;

108 
	}
}

110 
	$Êowî_∑r£_ù_addr
(*
°r
, 
__be16
 
ëh_ty≥
,

111 
addr4_ty≥
, 
mask4_ty≥
,

112 
addr6_ty≥
, 
mask6_ty≥
,

113 
∆msghdr
 *
n
)

115 
ªt
;

116 
öë_¥efix
 
addr
;

117 
Ámûy
;

118 
bôs
;

119 
i
;

121 i‡(
ëh_ty≥
 =
	`ht⁄s
(
ETH_P_IP
)) {

122 
Ámûy
 = 
AF_INET
;

123 } i‡(
ëh_ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

124 
Ámûy
 = 
AF_INET6
;

126 
	`Ârötf
(
°dîr
, "Illegal \"eth_type\" for ipáddress\n");

130 
ªt
 = 
	`gë_¥efix
(&
addr
, 
°r
, 
Ámûy
);

131 i‡(
ªt
)

134 i‡(
addr
.
Ámûy
 != family)

137 
	`add©å_l
(
n
, 
MAX_MSG
, 
addr
.
Ámûy
 =
AF_INET
 ? 
addr4_ty≥
 : 
addr6_ty≥
,

138 
addr
.
d©a
,áddr.
byãÀn
);

140 
	`mem£t
(
addr
.
d©a
, 0xff,áddr.
byãÀn
);

141 
bôs
 = 
addr
.
bôÀn
;

142 
i
 = 0; i < 
addr
.
byãÀn
 / 4; i++) {

143 i‡(!
bôs
) {

144 
addr
.
d©a
[
i
] = 0;

145 } i‡(
bôs
 / 32 >= 1) {

146 
bôs
 -= 32;

148 
addr
.
d©a
[
i
] <<32 - 
bôs
;

149 
addr
.
d©a
[
i
] = 
	`ht⁄l
(addr.data[i]);

150 
bôs
 = 0;

154 
	`add©å_l
(
n
, 
MAX_MSG
, 
addr
.
Ámûy
 =
AF_INET
 ? 
mask4_ty≥
 : 
mask6_ty≥
,

155 
addr
.
d©a
,áddr.
byãÀn
);

158 
	}
}

160 
	$Êowî_∑r£_p‹t
(*
°r
, 
__u8
 
ù_p‹t
,

161 
t˝_ty≥
, 
udp_ty≥
, 
∆msghdr
 *
n
)

163 
ªt
;

164 
ty≥
;

165 
__be16
 
p‹t
;

167 i‡(
ù_p‹t
 =
IPPROTO_TCP
) {

168 
ty≥
 = 
t˝_ty≥
;

169 } i‡(
ù_p‹t
 =
IPPROTO_UDP
) {

170 
ty≥
 = 
udp_ty≥
;

172 
	`Ârötf
(
°dîr
, "Illegal \"ip_proto\" forÖort\n");

176 
ªt
 = 
	`gë_u16
(&
p‹t
, 
°r
, 10);

177 i‡(
ªt
)

180 
	`add©å16
(
n
, 
MAX_MSG
, 
ty≥
, 
	`ht⁄s
(
p‹t
));

183 
	}
}

185 
	$Êowî_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
,

186 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

188 
ªt
;

189 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

190 
π©å
 *
èû
;

191 
__be16
 
ëh_ty≥
 = 0;

192 
__u8
 
ù_¥Ÿo
 = 0xff;

194 i‡(
¨gc
 == 0)

197 i‡(
h™dÀ
) {

198 
ªt
 = 
	`gë_u32
(&
t
->
tcm_h™dÀ
, 
h™dÀ
, 0);

199 i‡(
ªt
) {

200 
	`Ârötf
(
°dîr
, "Illegal \"handle\"\n");

205 
èû
 = (
π©å
 *Ë(((*Ë
n
Ë+ 
	`NLMSG_ALIGN
“->
∆msg_Àn
));

206 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_OPTIONS
, 
NULL
, 0);

208 
¨gc
 > 0) {

209 i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

210 
	`m©ches
(*
¨gv
, "flowid") == 0) {

211 
h™dÀ
;

213 
	`NEXT_ARG
();

214 
ªt
 = 
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
);

215 i‡(
ªt
) {

216 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

219 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_FLOWER_CLASSID
, &
h™dÀ
, 4);

220 } i‡(
	`m©ches
(*
¨gv
, "indev") == 0) {

221 
i‚ame
[
IFNAMSIZ
];

223 
	`NEXT_ARG
();

224 
	`mem£t
(
i‚ame
, 0, (ifname));

225 
	`°∫˝y
(
i‚ame
, *
¨gv
, (ifname) - 1);

226 
	`add©å°rz
(
n
, 
MAX_MSG
, 
TCA_FLOWER_INDEV
, 
i‚ame
);

227 } i‡(
	`m©ches
(*
¨gv
, "dst_mac") == 0) {

228 
	`NEXT_ARG
();

229 
ªt
 = 
	`Êowî_∑r£_ëh_addr
(*
¨gv
,

230 
TCA_FLOWER_KEY_ETH_DST
,

231 
TCA_FLOWER_KEY_ETH_DST_MASK
,

232 
n
);

233 i‡(
ªt
 < 0) {

234 
	`Ârötf
(
°dîr
, "Illegal \"dst_mac\"\n");

237 } i‡(
	`m©ches
(*
¨gv
, "src_mac") == 0) {

238 
	`NEXT_ARG
();

239 
ªt
 = 
	`Êowî_∑r£_ëh_addr
(*
¨gv
,

240 
TCA_FLOWER_KEY_ETH_SRC
,

241 
TCA_FLOWER_KEY_ETH_SRC_MASK
,

242 
n
);

243 i‡(
ªt
 < 0) {

244 
	`Ârötf
(
°dîr
, "Illegal \"src_mac\"\n");

247 } i‡(
	`m©ches
(*
¨gv
, "eth_type") == 0) {

248 
	`NEXT_ARG
();

249 
ªt
 = 
	`Êowî_∑r£_ëh_ty≥
(*
¨gv
,

250 
TCA_FLOWER_KEY_ETH_TYPE
,

251 &
ëh_ty≥
, 
n
);

252 i‡(
ªt
 < 0) {

253 
	`Ârötf
(
°dîr
, "Illegal \"eth_type\"\n");

256 } i‡(
	`m©ches
(*
¨gv
, "ip_proto") == 0) {

257 
	`NEXT_ARG
();

258 
ªt
 = 
	`Êowî_∑r£_ù_¥Ÿo
(*
¨gv
, 
ëh_ty≥
,

259 
TCA_FLOWER_KEY_IP_PROTO
,

260 &
ù_¥Ÿo
, 
n
);

261 i‡(
ªt
 < 0) {

262 
	`Ârötf
(
°dîr
, "Illegal \"ip_proto\"\n");

265 } i‡(
	`m©ches
(*
¨gv
, "dst_ip") == 0) {

266 
	`NEXT_ARG
();

267 
ªt
 = 
	`Êowî_∑r£_ù_addr
(*
¨gv
, 
ëh_ty≥
,

268 
TCA_FLOWER_KEY_IPV4_DST
,

269 
TCA_FLOWER_KEY_IPV4_DST_MASK
,

270 
TCA_FLOWER_KEY_IPV6_DST
,

271 
TCA_FLOWER_KEY_IPV6_DST_MASK
,

272 
n
);

273 i‡(
ªt
 < 0) {

274 
	`Ârötf
(
°dîr
, "Illegal \"dst_ip\"\n");

277 } i‡(
	`m©ches
(*
¨gv
, "src_ip") == 0) {

278 
	`NEXT_ARG
();

279 
ªt
 = 
	`Êowî_∑r£_ù_addr
(*
¨gv
, 
ëh_ty≥
,

280 
TCA_FLOWER_KEY_IPV4_SRC
,

281 
TCA_FLOWER_KEY_IPV4_SRC_MASK
,

282 
TCA_FLOWER_KEY_IPV6_SRC
,

283 
TCA_FLOWER_KEY_IPV6_SRC_MASK
,

284 
n
);

285 i‡(
ªt
 < 0) {

286 
	`Ârötf
(
°dîr
, "Illegal \"src_ip\"\n");

289 } i‡(
	`m©ches
(*
¨gv
, "dst_port") == 0) {

290 
	`NEXT_ARG
();

291 
ªt
 = 
	`Êowî_∑r£_p‹t
(*
¨gv
, 
ù_¥Ÿo
,

292 
TCA_FLOWER_KEY_TCP_DST
,

293 
TCA_FLOWER_KEY_UDP_DST
, 
n
);

294 i‡(
ªt
 < 0) {

295 
	`Ârötf
(
°dîr
, "Illegal \"dst_port\"\n");

298 } i‡(
	`m©ches
(*
¨gv
, "src_port") == 0) {

299 
	`NEXT_ARG
();

300 
ªt
 = 
	`Êowî_∑r£_p‹t
(*
¨gv
, 
ù_¥Ÿo
,

301 
TCA_FLOWER_KEY_TCP_SRC
,

302 
TCA_FLOWER_KEY_UDP_SRC
, 
n
);

303 i‡(
ªt
 < 0) {

304 
	`Ârötf
(
°dîr
, "Illegal \"src_port\"\n");

307 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

308 
	`NEXT_ARG
();

309 
ªt
 = 
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_FLOWER_ACT
, 
n
);

310 i‡(
ªt
) {

311 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

315 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

316 
	`ex∂aö
();

319 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

320 
	`ex∂aö
();

323 
¨gc
--; 
¨gv
++;

326 
èû
->
πa_Àn
 = (((*)
n
)+n->
∆msg_Àn
) - (*)tail;

329 
	}
}

331 
	$__mask_bôs
(*
addr
, 
size_t
 
Àn
)

333 
bôs
 = 0;

334 
boﬁ
 
hﬁe
 = 
Ál£
;

335 
i
;

336 
j
;

338 
i
 = 0; i < 
Àn
; i++, 
addr
++) {

339 
j
 = 7; j >= 0; j--) {

340 i‡(((*
addr
Ë>> 
j
) & 0x1) {

341 i‡(
hﬁe
)

343 
bôs
++;

344 } i‡(
bôs
) {

345 
hﬁe
 = 
åue
;

351  
bôs
;

352 
	}
}

354 
	$Êowî_¥öt_ëh_addr
(
FILE
 *
f
, *
«me
,

355 
π©å
 *
addr_©å
,

356 
π©å
 *
mask_©å
)

358 
	`SPRINT_BUF
(
b1
);

359 
bôs
;

361 i‡(!
addr_©å
 || 
	`RTA_PAYLOAD
◊ddr_©åË!
ETH_ALEN
)

363 
	`Ârötf
(
f
, "\¿ %†%s", 
«me
, 
	`Œ_addr_n2a
(
	`RTA_DATA
(
addr_©å
), 
ETH_ALEN
,

364 0, 
b1
, (b1)));

365 i‡(!
mask_©å
 || 
	`RTA_PAYLOAD
(mask_©åË!
ETH_ALEN
)

367 
bôs
 = 
	`__mask_bôs
(
	`RTA_DATA
(
mask_©å
), 
ETH_ALEN
);

368 i‡(
bôs
 < 0)

369 
	`Ârötf
(
f
, "/%s", 
	`Œ_addr_n2a
(
	`RTA_DATA
(
mask_©å
), 
ETH_ALEN
,

370 0, 
b1
, (b1)));

371 i‡(
bôs
 < 
ETH_ALEN
 * 8)

372 
	`Ârötf
(
f
, "/%d", 
bôs
);

373 
	}
}

375 
	$Êowî_¥öt_ëh_ty≥
(
FILE
 *
f
, 
__be16
 *
p_ëh_ty≥
,

376 
π©å
 *
ëh_ty≥_©å
)

378 
__be16
 
ëh_ty≥
;

380 i‡(!
ëh_ty≥_©å
)

383 
ëh_ty≥
 = 
	`πa_gë©å_u16
(
ëh_ty≥_©å
);

384 
	`Ârötf
(
f
, "\nÉth_type ");

385 i‡(
ëh_ty≥
 =
	`ht⁄s
(
ETH_P_IP
))

386 
	`Ârötf
(
f
, "ipv4");

387 i‡(
ëh_ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
))

388 
	`Ârötf
(
f
, "ipv6");

390 
	`Ârötf
(
f
, "%04x", 
	`¡ohs
(
ëh_ty≥
));

391 *
p_ëh_ty≥
 = 
ëh_ty≥
;

392 
	}
}

394 
	$Êowî_¥öt_ù_¥Ÿo
(
FILE
 *
f
, 
__u8
 *
p_ù_¥Ÿo
,

395 
π©å
 *
ù_¥Ÿo_©å
)

397 
__u8
 
ù_¥Ÿo
;

399 i‡(!
ù_¥Ÿo_©å
)

402 
ù_¥Ÿo
 = 
	`πa_gë©å_u8
(
ù_¥Ÿo_©å
);

403 
	`Ârötf
(
f
, "\n ip_proto ");

404 i‡(
ù_¥Ÿo
 =
IPPROTO_TCP
)

405 
	`Ârötf
(
f
, "tcp");

406 i‡(
ù_¥Ÿo
 =
IPPROTO_UDP
)

407 
	`Ârötf
(
f
, "udp");

409 
	`Ârötf
(
f
, "%02x", 
ù_¥Ÿo
);

410 *
p_ù_¥Ÿo
 = 
ù_¥Ÿo
;

411 
	}
}

413 
	$Êowî_¥öt_ù_addr
(
FILE
 *
f
, *
«me
, 
__be16
 
ëh_ty≥
,

414 
π©å
 *
addr4_©å
,

415 
π©å
 *
mask4_©å
,

416 
π©å
 *
addr6_©å
,

417 
π©å
 *
mask6_©å
)

419 
	`SPRINT_BUF
(
b1
);

420 
π©å
 *
addr_©å
;

421 
π©å
 *
mask_©å
;

422 
Ámûy
;

423 
size_t
 
Àn
;

424 
bôs
;

426 i‡(
ëh_ty≥
 =
	`ht⁄s
(
ETH_P_IP
)) {

427 
Ámûy
 = 
AF_INET
;

428 
addr_©å
 = 
addr4_©å
;

429 
mask_©å
 = 
mask4_©å
;

430 
Àn
 = 4;

431 } i‡(
ëh_ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

432 
Ámûy
 = 
AF_INET6
;

433 
addr_©å
 = 
addr6_©å
;

434 
mask_©å
 = 
mask6_©å
;

435 
Àn
 = 16;

439 i‡(!
addr_©å
 || 
	`RTA_PAYLOAD
◊ddr_©åË!
Àn
)

441 
	`Ârötf
(
f
, "\¿ %†%s", 
«me
, 
	`π_addr_n2a
(
Ámûy
,

442 
	`RTA_PAYLOAD
(
addr_©å
),

443 
	`RTA_DATA
(
addr_©å
),

444 
b1
, (b1)));

445 i‡(!
mask_©å
 || 
	`RTA_PAYLOAD
(mask_©åË!
Àn
)

447 
bôs
 = 
	`__mask_bôs
(
	`RTA_DATA
(
mask_©å
), 
Àn
);

448 i‡(
bôs
 < 0)

449 
	`Ârötf
(
f
, "/%s", 
	`π_addr_n2a
(
Ámûy
,

450 
	`RTA_PAYLOAD
(
mask_©å
),

451 
	`RTA_DATA
(
mask_©å
),

452 
b1
, (b1)));

453 i‡(
bôs
 < 
Àn
 * 8)

454 
	`Ârötf
(
f
, "/%d", 
bôs
);

455 
	}
}

457 
	$Êowî_¥öt_p‹t
(
FILE
 *
f
, *
«me
, 
__u8
 
ù_¥Ÿo
,

458 
π©å
 *
t˝_©å
,

459 
π©å
 *
udp_©å
)

461 
π©å
 *
©å
;

463 i‡(
ù_¥Ÿo
 =
IPPROTO_TCP
)

464 
©å
 = 
t˝_©å
;

465 i‡(
ù_¥Ÿo
 =
IPPROTO_UDP
)

466 
©å
 = 
udp_©å
;

469 i‡(!
©å
)

471 
	`Ârötf
(
f
, "\¿ %†%d", 
«me
, 
	`¡ohs
(
	`πa_gë©å_u16
(
©å
)));

472 
	}
}

474 
	$Êowî_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
,

475 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

477 
π©å
 *
tb
[
TCA_FLOWER_MAX
 + 1];

478 
__be16
 
ëh_ty≥
 = 0;

479 
__u8
 
ù_¥Ÿo
 = 0xff;

481 i‡(!
›t
)

484 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_FLOWER_MAX
, 
›t
);

486 i‡(
h™dÀ
)

487 
	`Ârötf
(
f
, "h™dÀ 0x%x ", 
h™dÀ
);

489 i‡(
tb
[
TCA_FLOWER_CLASSID
]) {

490 
	`SPRINT_BUF
(
b1
);

491 
	`Ârötf
(
f
, "classid %s ",

492 
	`•röt_tc_˛assid
(
	`πa_gë©å_u32
(
tb
[
TCA_FLOWER_CLASSID
]), 
b1
));

495 i‡(
tb
[
TCA_FLOWER_INDEV
]) {

496 
π©å
 *
©å
 = 
tb
[
TCA_FLOWER_INDEV
];

498 
	`Ârötf
(
f
, "\¿ indev %s", 
	`πa_gë©å_°r
(
©å
));

501 
	`Êowî_¥öt_ëh_addr
(
f
, "d°_mac", 
tb
[
TCA_FLOWER_KEY_ETH_DST
],

502 
tb
[
TCA_FLOWER_KEY_ETH_DST_MASK
]);

503 
	`Êowî_¥öt_ëh_addr
(
f
, "§c_mac", 
tb
[
TCA_FLOWER_KEY_ETH_SRC
],

504 
tb
[
TCA_FLOWER_KEY_ETH_SRC_MASK
]);

506 
	`Êowî_¥öt_ëh_ty≥
(
f
, &
ëh_ty≥
, 
tb
[
TCA_FLOWER_KEY_ETH_TYPE
]);

507 
	`Êowî_¥öt_ù_¥Ÿo
(
f
, &
ù_¥Ÿo
, 
tb
[
TCA_FLOWER_KEY_IP_PROTO
]);

509 
	`Êowî_¥öt_ù_addr
(
f
, "d°_ù", 
ëh_ty≥
,

510 
tb
[
TCA_FLOWER_KEY_IPV4_DST
],

511 
tb
[
TCA_FLOWER_KEY_IPV4_DST_MASK
],

512 
tb
[
TCA_FLOWER_KEY_IPV6_DST
],

513 
tb
[
TCA_FLOWER_KEY_IPV6_DST_MASK
]);

515 
	`Êowî_¥öt_ù_addr
(
f
, "§c_ù", 
ëh_ty≥
,

516 
tb
[
TCA_FLOWER_KEY_IPV4_SRC
],

517 
tb
[
TCA_FLOWER_KEY_IPV4_SRC_MASK
],

518 
tb
[
TCA_FLOWER_KEY_IPV6_SRC
],

519 
tb
[
TCA_FLOWER_KEY_IPV6_SRC_MASK
]);

521 
	`Êowî_¥öt_p‹t
(
f
, "d°_p‹t", 
ù_¥Ÿo
,

522 
tb
[
TCA_FLOWER_KEY_TCP_DST
],

523 
tb
[
TCA_FLOWER_KEY_UDP_DST
]);

525 
	`Êowî_¥öt_p‹t
(
f
, "§c_p‹t", 
ù_¥Ÿo
,

526 
tb
[
TCA_FLOWER_KEY_TCP_SRC
],

527 
tb
[
TCA_FLOWER_KEY_UDP_SRC
]);

529 i‡(
tb
[
TCA_FLOWER_ACT
]) {

530 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_FLOWER_ACT
]);

534 
	}
}

536 
fûãr_utû
 
	gÊowî_fûãr_utû
 = {

537 .
id
 = "flower",

538 .
	g∑r£_f›t
 = 
Êowî_∑r£_›t
,

539 .
	g¥öt_f›t
 = 
Êowî_¥öt_›t
,

	@tc/f_fw.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<löux/if.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	$ex∂aö
()

28 
	`Ârötf
(
°dîr
, "Usage: ... fw [ classid CLASSID ] [áction ACTION_SPEC ]\n");

29 
	`Ârötf
(
°dîr
, " ACTION_SPEC := ...Üookát individualáctions\n");

30 
	`Ârötf
(
°dîr
, " CLASSID := X:Y\n");

31 
	`Ârötf
(
°dîr
, "\nNOTE: CLASSID isÖarsedás hexadecimal input.\n");

32 
	}
}

34 
	$fw_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

36 
tc_pﬁi˚
 
ç
;

37 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

38 
π©å
 *
èû
;

39 
__u32
 
mask
 = 0;

40 
mask_£t
 = 0;

42 
	`mem£t
(&
ç
, 0, (tp));

44 i‡(
h™dÀ
) {

45 *
¶ash
;

46 i‡((
¶ash
 = 
	`°rchr
(
h™dÀ
, '/')Ë!
NULL
)

47 *
¶ash
 = '\0';

48 i‡(
	`gë_u32
(&
t
->
tcm_h™dÀ
, 
h™dÀ
, 0)) {

49 
	`Ârötf
(
°dîr
, "Illegal \"handle\"\n");

52 i‡(
¶ash
) {

53 i‡(
	`gë_u32
(&
mask
, 
¶ash
+1, 0)) {

54 
	`Ârötf
(
°dîr
, "Illegal \"handle\" mask\n");

57 
mask_£t
 = 1;

61 i‡(
¨gc
 == 0)

64 
èû
 = 
	`NLMSG_TAIL
(
n
);

65 
	`add©å_l
(
n
, 4096, 
TCA_OPTIONS
, 
NULL
, 0);

67 i‡(
mask_£t
)

68 
	`add©å32
(
n
, 
MAX_MSG
, 
TCA_FW_MASK
, 
mask
);

70 
¨gc
 > 0) {

71 i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

72 
	`m©ches
(*
¨gv
, "flowid") == 0) {

73 
h™dÀ
;

74 
	`NEXT_ARG
();

75 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
)) {

76 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

79 
	`add©å_l
(
n
, 4096, 
TCA_FW_CLASSID
, &
h™dÀ
, 4);

80 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

81 
	`NEXT_ARG
();

82 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_FW_POLICE
, 
n
)) {

83 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

87 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

88 
	`NEXT_ARG
();

89 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_FW_ACT
, 
n
)) {

90 
	`Ârötf
(
°dîr
, "Illegal fw \"action\"\n");

94 } i‡(
	`°rcmp
(*
¨gv
, "indev") == 0) {

95 
d
[
IFNAMSIZ
+1];

96 
	`mem£t
(
d
, 0,  (d));

97 
¨gc
--;

98 
¨gv
++;

99 i‡(
¨gc
 < 1) {

100 
	`Ârötf
(
°dîr
, "Illegal indev\n");

103 
	`°∫˝y
(
d
, *
¨gv
,  (d) - 1);

104 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_FW_INDEV
, 
d
, 
	`°æí
(d) + 1);

105 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

106 
	`ex∂aö
();

109 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

110 
	`ex∂aö
();

113 
¨gc
--; 
¨gv
++;

115 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

117 
	}
}

119 
	$fw_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

121 
π©å
 *
tb
[
TCA_FW_MAX
+1];

123 i‡(
›t
 =
NULL
)

126 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_FW_MAX
, 
›t
);

128 i‡(
h™dÀ
 || 
tb
[
TCA_FW_MASK
]) {

129 
__u32
 
m¨k
 = 0, 
mask
 = 0;

130 if(
h™dÀ
)

131 
m¨k
 = 
h™dÀ
;

132 if(
tb
[
TCA_FW_MASK
] &&

133 (
mask
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FW_MASK
])) != 0xFFFFFFFF)

134 
	`Ârötf
(
f
, "h™dÀ 0x%x/0x%x ", 
m¨k
, 
mask
);

136 
	`Ârötf
(
f
, "h™dÀ 0x%x ", 
h™dÀ
);

139 i‡(
tb
[
TCA_FW_CLASSID
]) {

140 
	`SPRINT_BUF
(
b1
);

141 
	`Ârötf
(
f
, "˛assid %†", 
	`•röt_tc_˛assid
(
	`πa_gë©å_u32
(
tb
[
TCA_FW_CLASSID
]), 
b1
));

144 i‡(
tb
[
TCA_FW_POLICE
])

145 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_FW_POLICE
]);

146 i‡(
tb
[
TCA_FW_INDEV
]) {

147 
π©å
 *
idev
 = 
tb
[
TCA_FW_INDEV
];

148 
	`Ârötf
(
f
, "öpuàdev %†",
	`πa_gë©å_°r
(
idev
));

151 i‡(
tb
[
TCA_FW_ACT
]) {

152 
	`Ârötf
(
f
, "\n");

153 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_FW_ACT
]);

156 
	}
}

158 
fûãr_utû
 
	gfw_fûãr_utû
 = {

159 .
id
 = "fw",

160 .
	g∑r£_f›t
 = 
fw_∑r£_›t
,

161 .
	g¥öt_f›t
 = 
fw_¥öt_›t
,

	@tc/f_route.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"π_«mes.h
"

25 
	~"tc_comm⁄.h
"

26 
	~"tc_utû.h
"

28 
	$ex∂aö
()

30 
	`Ârötf
(
°dîr
, "Usage: ...Ñoute [ from REALM | fromif TAG ] [Åo REALM ]\n");

31 
	`Ârötf
(
°dîr
, " [ classid CLASSID ] [áction ACTION_SPEC ]\n");

32 
	`Ârötf
(
°dîr
, " ACTION_SPEC := ...Üookát individualáctions\n");

33 
	`Ârötf
(
°dîr
, " CLASSID := X:Y\n");

34 
	`Ârötf
(
°dîr
, "\nNOTE: CLASSID isÖarsedás hexadecimal input.\n");

35 
	}
}

37 
	$rouã_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

39 
tc_pﬁi˚
 
ç
;

40 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

41 
π©å
 *
èû
;

42 
__u32
 
fh
 = 0xFFFF8000;

43 
__u32
 
‹dî
 = 0;

45 
	`mem£t
(&
ç
, 0, (tp));

47 i‡(
h™dÀ
) {

48 i‡(
	`gë_u32
(&
t
->
tcm_h™dÀ
, 
h™dÀ
, 0)) {

49 
	`Ârötf
(
°dîr
, "Illegal \"handle\"\n");

54 i‡(
¨gc
 == 0)

57 
èû
 = 
	`NLMSG_TAIL
(
n
);

58 
	`add©å_l
(
n
, 4096, 
TCA_OPTIONS
, 
NULL
, 0);

60 
¨gc
 > 0) {

61 i‡(
	`m©ches
(*
¨gv
, "to") == 0) {

62 
__u32
 
id
;

63 
	`NEXT_ARG
();

64 i‡(
	`π∆_πªÆm_a2n
(&
id
, *
¨gv
)) {

65 
	`Ârötf
(
°dîr
, "Illegal \"to\"\n");

68 
	`add©å_l
(
n
, 4096, 
TCA_ROUTE4_TO
, &
id
, 4);

69 
fh
 &= ~0x80FF;

70 
fh
 |
id
&0xFF;

71 } i‡(
	`m©ches
(*
¨gv
, "from") == 0) {

72 
__u32
 
id
;

73 
	`NEXT_ARG
();

74 i‡(
	`π∆_πªÆm_a2n
(&
id
, *
¨gv
)) {

75 
	`Ârötf
(
°dîr
, "Illegal \"from\"\n");

78 
	`add©å_l
(
n
, 4096, 
TCA_ROUTE4_FROM
, &
id
, 4);

79 
fh
 &= 0xFFFF;

80 
fh
 |
id
<<16;

81 } i‡(
	`m©ches
(*
¨gv
, "fromif") == 0) {

82 
__u32
 
id
;

83 
	`NEXT_ARG
();

84 
	`Œ_öô_m≠
(&
πh
);

85 i‡((
id
=
	`Œ_«me_to_ödex
(*
¨gv
)) <= 0) {

86 
	`Ârötf
(
°dîr
, "Illegal \"fromif\"\n");

89 
	`add©å_l
(
n
, 4096, 
TCA_ROUTE4_IIF
, &
id
, 4);

90 
fh
 &= 0xFFFF;

91 
fh
 |(0x8000|
id
)<<16;

92 } i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

93 
	`°rcmp
(*
¨gv
, "flowid") == 0) {

94 
h™dÀ
;

95 
	`NEXT_ARG
();

96 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
)) {

97 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

100 
	`add©å_l
(
n
, 4096, 
TCA_ROUTE4_CLASSID
, &
h™dÀ
, 4);

101 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

102 
	`NEXT_ARG
();

103 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_ROUTE4_POLICE
, 
n
)) {

104 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

108 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

109 
	`NEXT_ARG
();

110 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_ROUTE4_ACT
, 
n
)) {

111 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

115 } i‡(
	`m©ches
(*
¨gv
, "order") == 0) {

116 
	`NEXT_ARG
();

117 i‡(
	`gë_u32
(&
‹dî
, *
¨gv
, 0)) {

118 
	`Ârötf
(
°dîr
, "Illegal \"order\"\n");

121 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

122 
	`ex∂aö
();

125 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

126 
	`ex∂aö
();

129 
¨gc
--; 
¨gv
++;

131 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

132 i‡(
‹dî
) {

133 
fh
 &= ~0x7F00;

134 
fh
 |(
‹dî
<<8)&0x7F00;

136 i‡(!
t
->
tcm_h™dÀ
)

137 
t
->
tcm_h™dÀ
 = 
fh
;

139 
	}
}

141 
	$rouã_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

143 
π©å
 *
tb
[
TCA_ROUTE4_MAX
+1];

144 
	`SPRINT_BUF
(
b1
);

146 i‡(
›t
 =
NULL
)

149 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_ROUTE4_MAX
, 
›t
);

151 i‡(
h™dÀ
)

152 
	`Ârötf
(
f
, "fh 0x%08x ", 
h™dÀ
);

153 i‡(
h™dÀ
&0x7F00)

154 
	`Ârötf
(
f
, "‹dî %d ", (
h™dÀ
>>8)&0x7F);

156 i‡(
tb
[
TCA_ROUTE4_CLASSID
]) {

157 
	`SPRINT_BUF
(
b1
);

158 
	`Ârötf
(
f
, "Êowid %†", 
	`•röt_tc_˛assid
(
	`πa_gë©å_u32
(
tb
[
TCA_ROUTE4_CLASSID
]), 
b1
));

160 i‡(
tb
[
TCA_ROUTE4_TO
])

161 
	`Ârötf
(
f
, "tÿ%†", 
	`π∆_πªÆm_n2a
(
	`πa_gë©å_u32
(
tb
[
TCA_ROUTE4_TO
]), 
b1
, (b1)));

162 i‡(
tb
[
TCA_ROUTE4_FROM
])

163 
	`Ârötf
(
f
, "‰om %†", 
	`π∆_πªÆm_n2a
(
	`πa_gë©å_u32
(
tb
[
TCA_ROUTE4_FROM
]), 
b1
, (b1)));

164 i‡(
tb
[
TCA_ROUTE4_IIF
])

165 
	`Ârötf
(
f
, "‰omi‡%s", 
	`Œ_ödex_to_«me
(*(*)
	`RTA_DATA
(
tb
[
TCA_ROUTE4_IIF
])));

166 i‡(
tb
[
TCA_ROUTE4_POLICE
])

167 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_ROUTE4_POLICE
]);

168 i‡(
tb
[
TCA_ROUTE4_ACT
])

169 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_ROUTE4_ACT
]);

171 
	}
}

173 
fûãr_utû
 
	grouã_fûãr_utû
 = {

174 .
id
 = "route",

175 .
	g∑r£_f›t
 = 
rouã_∑r£_›t
,

176 .
	g¥öt_f›t
 = 
rouã_¥öt_›t
,

	@tc/f_rsvp.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"π_«mes.h
"

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

27 
	$ex∂aö
()

29 
	`Ârötf
(
°dîr
, "Usage: ...Ñsvp ipproto PROTOCOL session DST[/PORT | GPI ]\n");

30 
	`Ârötf
(
°dîr
, " [ sender SRC[/PORT | GPI ] ]\n");

31 
	`Ârötf
(
°dîr
, " [ classid CLASSID ] [áction ACTION_SPEC ]\n");

32 
	`Ârötf
(
°dîr
, " [Åunnelid ID ] [Åunnel ID skip NUMBER ]\n");

33 
	`Ârötf
(
°dîr
, "Where: GPI := { flowlabel NUMBER | spi/ah SPI | spi/esp SPI |\n");

34 
	`Ârötf
(
°dîr
, " u{8|16|32} NUMBER mask MASKát OFFSET}\n");

35 
	`Ârötf
(
°dîr
, " ACTION_SPEC := ...Üookát individualáctions\n");

36 
	`Ârötf
(
°dîr
, " FILTERID := X:Y\n");

37 
	`Ârötf
(
°dîr
, "\nNOTE: CLASSID isÖarsedás hexadecimal input.\n");

38 
	}
}

40 
	$gë_addr_™d_pi
(*
¨gc_p
, ***
¨gv_p
, 
öë_¥efix
 * 
addr
,

41 
tc_rsvp_pöfo
 *
pöfo
, 
dú
, 
Ámûy
)

43 
¨gc
 = *
¨gc_p
;

44 **
¨gv
 = *
¨gv_p
;

45 *
p
 = 
	`°rchr
(*
¨gv
, '/');

46 
tc_rsvp_gpi
 *
pi
 = 
dú
 ? &
pöfo
->
dpi
 : &pöfo->
•i
;

48 i‡(
p
) {

49 
__u16
 
tmp
;

51 i‡(
	`gë_u16
(&
tmp
, 
p
+1, 0))

54 i‡(
dú
 == 0) {

56 
pi
->
key
 = 
	`ht⁄l
(((
__u32
)
tmp
)<<16);

57 
pi
->
mask
 = 
	`ht⁄l
(0xFFFF0000);

60 
pi
->
key
 = 
	`ht⁄l
(((
__u32
)
tmp
));

61 
pi
->
mask
 = 
	`ht⁄l
(0x0000FFFF);

63 
pi
->
off£t
 = 0;

64 *
p
 = 0;

66 i‡(
	`gë_addr_1
(
addr
, *
¨gv
, 
Ámûy
))

68 i‡(
p
)

69 *
p
 = '/';

71 
¨gc
--; 
¨gv
++;

73 i‡(
pi
->
mask
 || 
¨gc
 <= 0)

74 
d⁄e
;

76 i‡(
	`°rcmp
(*
¨gv
, "spi/ah") == 0 ||

77 
	`°rcmp
(*
¨gv
, "gpi/ah") == 0) {

78 
__u32
 
gpi
;

79 
	`NEXT_ARG
();

80 i‡(
	`gë_u32
(&
gpi
, *
¨gv
, 0))

82 
pi
->
mask
 = 
	`ht⁄l
(0xFFFFFFFF);

83 
pi
->
key
 = 
	`ht⁄l
(
gpi
);

84 
pi
->
off£t
 = 4;

85 i‡(
pöfo
->
¥Ÿocﬁ
 == 0)

86 
pöfo
->
¥Ÿocﬁ
 = 
IPPROTO_AH
;

87 
¨gc
--; 
¨gv
++;

88 } i‡(
	`°rcmp
(*
¨gv
, "spi/esp") == 0 ||

89 
	`°rcmp
(*
¨gv
, "gpi/esp") == 0) {

90 
__u32
 
gpi
;

91 
	`NEXT_ARG
();

92 i‡(
	`gë_u32
(&
gpi
, *
¨gv
, 0))

94 
pi
->
mask
 = 
	`ht⁄l
(0xFFFFFFFF);

95 
pi
->
key
 = 
	`ht⁄l
(
gpi
);

96 
pi
->
off£t
 = 0;

97 i‡(
pöfo
->
¥Ÿocﬁ
 == 0)

98 
pöfo
->
¥Ÿocﬁ
 = 
IPPROTO_ESP
;

99 
¨gc
--; 
¨gv
++;

100 } i‡(
	`°rcmp
(*
¨gv
, "flowlabel") == 0) {

101 
__u32
 
Êabñ
;

102 
	`NEXT_ARG
();

103 i‡(
	`gë_u32
(&
Êabñ
, *
¨gv
, 0))

105 i‡(
Ámûy
 !
AF_INET6
)

107 
pi
->
mask
 = 
	`ht⁄l
(0x000FFFFF);

108 
pi
->
key
 = 
	`ht⁄l
(
Êabñ
Ë&Öi->
mask
;

109 
pi
->
off£t
 = -40;

110 
¨gc
--; 
¨gv
++;

111 } i‡(
	`°rcmp
(*
¨gv
, "u32") == 0 ||

112 
	`°rcmp
(*
¨gv
, "u16") == 0 ||

113 
	`°rcmp
(*
¨gv
, "u8") == 0) {

114 
sz
 = 1;

115 
__u32
 
tmp
;

116 
__u32
 
mask
 = 0xff;

117 i‡(
	`°rcmp
(*
¨gv
, "u32") == 0) {

118 
sz
 = 4;

119 
mask
 = 0xffff;

120 } i‡(
	`°rcmp
(*
¨gv
, "u16") == 0) {

121 
mask
 = 0xffffffff;

122 
sz
 = 2;

124 
	`NEXT_ARG
();

125 i‡(
	`gë_u32
(&
tmp
, *
¨gv
, 0))

127 
¨gc
--; 
¨gv
++;

128 i‡(
	`°rcmp
(*
¨gv
, "mask") == 0) {

129 
	`NEXT_ARG
();

130 i‡(
	`gë_u32
(&
mask
, *
¨gv
, 16))

132 
¨gc
--; 
¨gv
++;

134 i‡(
	`°rcmp
(*
¨gv
, "at") == 0) {

135 
	`NEXT_ARG
();

136 i‡(
	`gë_öãgî
(&
pi
->
off£t
, *
¨gv
, 0))

138 
¨gc
--; 
¨gv
++;

140 i‡(
sz
 == 1) {

141 i‡((
pi
->
off£t
 & 3) == 0) {

142 
mask
 <<= 24;

143 
tmp
 <<= 24;

144 } i‡((
pi
->
off£t
 & 3) == 1) {

145 
mask
 <<= 16;

146 
tmp
 <<= 16;

147 } i‡((
pi
->
off£t
 & 3) == 3) {

148 
mask
 <<= 8;

149 
tmp
 <<= 8;

151 } i‡(
sz
 == 2) {

152 i‡((
pi
->
off£t
 & 3) == 0) {

153 
mask
 <<= 16;

154 
tmp
 <<= 16;

157 
pi
->
off£t
 &= ~3;

158 
pi
->
mask
 = 
	`ht⁄l
(mask);

159 
pi
->
key
 = 
	`ht⁄l
(
tmp
Ë&Öi->
mask
;

162 
d⁄e
:

163 *
¨gc_p
 = 
¨gc
;

164 *
¨gv_p
 = 
¨gv
;

166 
	}
}

169 
	$rsvp_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

171 
Ámûy
 = 
	`°rcmp
(
qu
->
id
, "rsvp"Ë=0 ? 
AF_INET
 : 
AF_INET6
;

172 
tc_rsvp_pöfo
 
pöfo
;

173 
tc_pﬁi˚
 
ç
;

174 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

175 
pöfo_ok
 = 0;

176 
π©å
 *
èû
;

178 
	`mem£t
(&
pöfo
, 0, (pinfo));

179 
	`mem£t
(&
ç
, 0, (tp));

181 i‡(
h™dÀ
) {

182 i‡(
	`gë_u32
(&
t
->
tcm_h™dÀ
, 
h™dÀ
, 0)) {

183 
	`Ârötf
(
°dîr
, "Illegal \"handle\"\n");

188 i‡(
¨gc
 == 0)

191 
èû
 = 
	`NLMSG_TAIL
(
n
);

192 
	`add©å_l
(
n
, 4096, 
TCA_OPTIONS
, 
NULL
, 0);

194 
¨gc
 > 0) {

195 i‡(
	`m©ches
(*
¨gv
, "session") == 0) {

196 
öë_¥efix
 
addr
;

197 
	`NEXT_ARG
();

198 i‡(
	`gë_addr_™d_pi
(&
¨gc
, &
¨gv
, &
addr
, &
pöfo
, 1, 
Ámûy
)) {

199 
	`Ârötf
(
°dîr
, "Illegal \"session\"\n");

202 
	`add©å_l
(
n
, 4096, 
TCA_RSVP_DST
, &
addr
.
d©a
,áddr.
byãÀn
);

203 i‡(
pöfo
.
dpi
.
mask
 ||Ööfo.
¥Ÿocﬁ
)

204 
pöfo_ok
++;

206 } i‡(
	`m©ches
(*
¨gv
, "sender") == 0 ||

207 
	`m©ches
(*
¨gv
, "flowspec") == 0) {

208 
öë_¥efix
 
addr
;

209 
	`NEXT_ARG
();

210 i‡(
	`gë_addr_™d_pi
(&
¨gc
, &
¨gv
, &
addr
, &
pöfo
, 0, 
Ámûy
)) {

211 
	`Ârötf
(
°dîr
, "Illegal \"sender\"\n");

214 
	`add©å_l
(
n
, 4096, 
TCA_RSVP_SRC
, &
addr
.
d©a
,áddr.
byãÀn
);

215 i‡(
pöfo
.
•i
.
mask
 ||Ööfo.
¥Ÿocﬁ
)

216 
pöfo_ok
++;

218 } i‡(
	`m©ches
("ù¥Ÿo", *
¨gv
) == 0) {

219 
num
;

220 
	`NEXT_ARG
();

221 
num
 = 
	`öë_¥Ÿo_a2n
(*
¨gv
);

222 i‡(
num
 < 0) {

223 
	`Ârötf
(
°dîr
, "Illegal \"ipproto\"\n");

226 
pöfo
.
¥Ÿocﬁ
 = 
num
;

227 
pöfo_ok
++;

228 } i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

229 
	`°rcmp
(*
¨gv
, "flowid") == 0) {

230 
h™dÀ
;

231 
	`NEXT_ARG
();

232 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
)) {

233 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

236 
	`add©å_l
(
n
, 4096, 
TCA_RSVP_CLASSID
, &
h™dÀ
, 4);

237 } i‡(
	`°rcmp
(*
¨gv
, "tunnelid") == 0) {

238 
tid
;

239 
	`NEXT_ARG
();

240 i‡(
	`gë_unsig√d
(&
tid
, *
¨gv
, 0)) {

241 
	`Ârötf
(
°dîr
, "Illegal \"tunnelid\"\n");

244 
pöfo
.
tu¬ñid
 = 
tid
;

245 
pöfo_ok
++;

246 } i‡(
	`°rcmp
(*
¨gv
, "tunnel") == 0) {

247 
tid
;

248 
	`NEXT_ARG
();

249 i‡(
	`gë_unsig√d
(&
tid
, *
¨gv
, 0)) {

250 
	`Ârötf
(
°dîr
, "Illegal \"tunnel\"\n");

253 
	`add©å_l
(
n
, 4096, 
TCA_RSVP_CLASSID
, &
tid
, 4);

254 
	`NEXT_ARG
();

255 i‡(
	`°rcmp
(*
¨gv
, "skip") == 0) {

256 
	`NEXT_ARG
();

258 i‡(
	`gë_unsig√d
(&
tid
, *
¨gv
, 0)) {

259 
	`Ârötf
(
°dîr
, "Illegal \"skip\"\n");

262 
pöfo
.
tu¬ñhdr
 = 
tid
;

263 
pöfo_ok
++;

264 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

265 
	`NEXT_ARG
();

266 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_RSVP_ACT
, 
n
)) {

267 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

271 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

272 
	`NEXT_ARG
();

273 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_RSVP_POLICE
, 
n
)) {

274 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

278 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

279 
	`ex∂aö
();

282 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

283 
	`ex∂aö
();

286 
¨gc
--; 
¨gv
++;

289 i‡(
pöfo_ok
)

290 
	`add©å_l
(
n
, 4096, 
TCA_RSVP_PINFO
, &
pöfo
, (pinfo));

291 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

293 
	}
}

295 * 
	$•röt_•i
(
tc_rsvp_gpi
 *
pi
, 
dú
, *
buf
)

297 i‡(
pi
->
off£t
 == 0) {

298 i‡(
dú
 && 
pi
->
mask
 =
	`ht⁄l
(0xFFFF)) {

299 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, "/%d", 
	`ht⁄l
(
pi
->
key
));

300  
buf
;

302 i‡(!
dú
 && 
pi
->
mask
 =
	`ht⁄l
(0xFFFF0000)) {

303 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, "/%d", 
	`ht⁄l
(
pi
->
key
)>>16);

304  
buf
;

306 i‡(
pi
->
mask
 =
	`ht⁄l
(0xFFFFFFFF)) {

307 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, " spi/e• 0x%08x", 
	`ht⁄l
(
pi
->
key
));

308  
buf
;

310 } i‡(
pi
->
off£t
 =4 &&Öi->
mask
 =
	`ht⁄l
(0xFFFFFFFF)) {

311 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, " spi/ah 0x%08x", 
	`ht⁄l
(
pi
->
key
));

312  
buf
;

313 } i‡(
pi
->
off£t
 =-40 &&Öi->
mask
 =
	`ht⁄l
(0x000FFFFF)) {

314 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, " flowœbñ 0x%05x", 
	`ht⁄l
(
pi
->
key
));

315  
buf
;

317 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, " u32 0x%08x mask %08xát %d",

318 
	`ht⁄l
(
pi
->
key
), ht⁄l’i->
mask
),Öi->
off£t
);

319  
buf
;

320 
	}
}

322 
	$rsvp_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

324 
Ámûy
 = 
	`°rcmp
(
qu
->
id
, "rsvp"Ë=0 ? 
AF_INET
 : 
AF_INET6
;

325 
π©å
 *
tb
[
TCA_RSVP_MAX
+1];

326 
tc_rsvp_pöfo
 *
pöfo
 = 
NULL
;

328 i‡(
›t
 =
NULL
)

331 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_RSVP_MAX
, 
›t
);

333 i‡(
h™dÀ
)

334 
	`Ârötf
(
f
, "fh 0x%08x ", 
h™dÀ
);

336 i‡(
tb
[
TCA_RSVP_PINFO
]) {

337 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_RSVP_PINFO
]Ë< (*
pöfo
))

340 
pöfo
 = 
	`RTA_DATA
(
tb
[
TCA_RSVP_PINFO
]);

343 i‡(
tb
[
TCA_RSVP_CLASSID
]) {

344 
	`SPRINT_BUF
(
b1
);

345 i‡(!
pöfo
 ||Ööfo->
tu¬ñhdr
 == 0)

346 
	`Ârötf
(
f
, "Êowid %†", 
	`•röt_tc_˛assid
(
	`πa_gë©å_u32
(
tb
[
TCA_RSVP_CLASSID
]), 
b1
));

348 
	`Ârötf
(
f
, "tu¬ñ %d skù %d ", 
	`πa_gë©å_u32
(
tb
[
TCA_RSVP_CLASSID
]), 
pöfo
->
tu¬ñhdr
);

349 } i‡(
pöfo
 &&Ööfo->
tu¬ñhdr
)

350 
	`Ârötf
(
f
, "tu¬ñ [BAD] skù %d ", 
pöfo
->
tu¬ñhdr
);

352 i‡(
tb
[
TCA_RSVP_DST
]) {

353 
buf
[128];

354 
	`Ârötf
(
f
, "session ");

355 i‡(
	`öë_¡›
(
Ámûy
, 
	`RTA_DATA
(
tb
[
TCA_RSVP_DST
]), 
buf
, (buf)) == 0)

356 
	`Ârötf
(
f
, " [INVALID DADDR] ");

358 
	`Ârötf
(
f
, "%s", 
buf
);

359 i‡(
pöfo
 &&Ööfo->
dpi
.
mask
) {

360 
	`SPRINT_BUF
(
b2
);

361 
	`Ârötf
(
f
, "%†", 
	`•röt_•i
(&
pöfo
->
dpi
, 1, 
b2
));

363 
	`Ârötf
(
f
, " ");

365 i‡(
pöfo
 &&Ööfo->
dpi
.
mask
) {

366 
	`SPRINT_BUF
(
b2
);

367 
	`Ârötf
(
f
, "£ssi⁄ [NONE]%†", 
	`•röt_•i
(&
pöfo
->
dpi
, 1, 
b2
));

369 
	`Ârötf
(
f
, "session NONE ");

372 i‡(
pöfo
 &&Ööfo->
¥Ÿocﬁ
) {

373 
	`SPRINT_BUF
(
b1
);

374 
	`Ârötf
(
f
, "ù¥Ÿÿ%†", 
	`öë_¥Ÿo_n2a
(
pöfo
->
¥Ÿocﬁ
, 
b1
, (b1)));

376 i‡(
pöfo
 &&Ööfo->
tu¬ñid
)

377 
	`Ârötf
(
f
, "tu¬ñid %d ", 
pöfo
->
tu¬ñid
);

378 i‡(
tb
[
TCA_RSVP_SRC
]) {

379 
buf
[128];

380 
	`Ârötf
(
f
, "sender ");

381 i‡(
	`öë_¡›
(
Ámûy
, 
	`RTA_DATA
(
tb
[
TCA_RSVP_SRC
]), 
buf
, (buf)) == 0) {

382 
	`Ârötf
(
f
, "[BAD]");

384 
	`Ârötf
(
f
, " %s", 
buf
);

386 i‡(
pöfo
 &&Ööfo->
•i
.
mask
) {

387 
	`SPRINT_BUF
(
b2
);

388 
	`Ârötf
(
f
, "%†", 
	`•röt_•i
(&
pöfo
->
•i
, 0, 
b2
));

390 
	`Ârötf
(
f
, " ");

391 } i‡(
pöfo
 &&Ööfo->
•i
.
mask
) {

392 
	`SPRINT_BUF
(
b2
);

393 
	`Ârötf
(
f
, "£ndî [NONE]%†", 
	`•röt_•i
(&
pöfo
->
•i
, 0, 
b2
));

396 i‡(
tb
[
TCA_RSVP_ACT
]) {

397 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_RSVP_ACT
]);

399 i‡(
tb
[
TCA_RSVP_POLICE
])

400 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_RSVP_POLICE
]);

402 
	}
}

404 
fûãr_utû
 
	grsvp_fûãr_utû
 = {

405 .
id
 = "rsvp",

406 .
	g∑r£_f›t
 = 
rsvp_∑r£_›t
,

407 .
	g¥öt_f›t
 = 
rsvp_¥öt_›t
,

410 
fûãr_utû
 
	grsvp6_fûãr_utû
 = {

411 .
id
 = "rsvp6",

412 .
	g∑r£_f›t
 = 
rsvp_∑r£_›t
,

413 .
	g¥öt_f›t
 = 
rsvp_¥öt_›t
,

	@tc/f_tcindex.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<sy¶og.h
>

11 
	~<f˙é.h
>

12 
	~<°rög.h
>

13 
	~<√töë/ö.h
>

15 
	~"utûs.h
"

16 
	~"tc_utû.h
"

18 
	$ex∂aö
()

20 
	`Ârötf
(
°dîr
," Usage: ...Åcindex [ hash SIZE ] [ mask MASK ]"

22 
	`Ârötf
(
°dîr
," [Öass_on | fall_through ]\n");

23 
	`Ârötf
(
°dîr
," [ classid CLASSID ] "

25 
	}
}

27 
	$tcödex_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
, 
¨gc
,

28 **
¨gv
, 
∆msghdr
 *
n
)

30 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

31 
π©å
 *
èû
;

32 *
íd
;

34 i‡(
h™dÀ
) {

35 
t
->
tcm_h™dÀ
 = 
	`°πoul
(
h™dÀ
,&
íd
,0);

36 i‡(*
íd
) {

37 
	`Ârötf
(
°dîr
, "Illegal filter ID\n");

41 i‡(!
¨gc
)  0;

42 
èû
 = 
	`NLMSG_TAIL
(
n
);

43 
	`add©å_l
(
n
,4096,
TCA_OPTIONS
,
NULL
,0);

44 
¨gc
) {

45 i‡(!
	`°rcmp
(*
¨gv
,"hash")) {

46 
hash
;

48 
	`NEXT_ARG
();

49 
hash
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

50 i‡(*
íd
 || !
hash
 || hash > 0x10000) {

51 
	`ex∂aö
();

54 
	`add©å_l
(
n
,4096,
TCA_TCINDEX_HASH
,&
hash
,(hash));

56 i‡(!
	`°rcmp
(*
¨gv
,"mask")) {

57 
__u16
 
mask
;

59 
	`NEXT_ARG
();

60 
mask
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

61 i‡(*
íd
) {

62 
	`ex∂aö
();

65 
	`add©å_l
(
n
,4096,
TCA_TCINDEX_MASK
,&
mask
,(mask));

67 i‡(!
	`°rcmp
(*
¨gv
,"shift")) {

68 
shi·
;

70 
	`NEXT_ARG
();

71 
shi·
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

72 i‡(*
íd
) {

73 
	`ex∂aö
();

76 
	`add©å_l
(
n
,4096,
TCA_TCINDEX_SHIFT
,&
shi·
,

77 (
shi·
));

79 i‡(!
	`°rcmp
(*
¨gv
,"fall_through")) {

80 
vÆue
 = 1;

82 
	`add©å_l
(
n
,4096,
TCA_TCINDEX_FALL_THROUGH
,&
vÆue
,

83 (
vÆue
));

85 i‡(!
	`°rcmp
(*
¨gv
,"pass_on")) {

86 
vÆue
 = 0;

88 
	`add©å_l
(
n
,4096,
TCA_TCINDEX_FALL_THROUGH
,&
vÆue
,

89 (
vÆue
));

91 i‡(!
	`°rcmp
(*
¨gv
,"classid")) {

92 
__u32
 
h™dÀ
;

94 
	`NEXT_ARG
();

95 i‡(
	`gë_tc_˛assid
(&
h™dÀ
,*
¨gv
)) {

96 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

99 
	`add©å_l
(
n
, 4096, 
TCA_TCINDEX_CLASSID
, &
h™dÀ
, 4);

101 i‡(!
	`°rcmp
(*
¨gv
,"police")) {

102 
	`NEXT_ARG
();

103 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_TCINDEX_POLICE
, 
n
)) {

104 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

109 i‡(!
	`°rcmp
(*
¨gv
,"action")) {

110 
	`NEXT_ARG
();

111 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_TCINDEX_ACT
, 
n
)) {

112 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

118 
	`ex∂aö
();

121 
¨gc
--;

122 
¨gv
++;

124 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

126 
	}
}

129 
	$tcödex_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
,

130 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

132 
π©å
 *
tb
[
TCA_TCINDEX_MAX
+1];

134 i‡(
›t
 =
NULL
)

137 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_TCINDEX_MAX
, 
›t
);

139 i‡(
h™dÀ
 !~0Ë
	`Ârötf
(
f
,"handle 0x%04x ",handle);

140 i‡(
tb
[
TCA_TCINDEX_HASH
]) {

141 
__u16
 
hash
;

143 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_TCINDEX_HASH
]Ë< (
hash
))

145 
hash
 = 
	`πa_gë©å_u16
(
tb
[
TCA_TCINDEX_HASH
]);

146 
	`Ârötf
(
f
,"hash %d ",
hash
);

148 i‡(
tb
[
TCA_TCINDEX_MASK
]) {

149 
__u16
 
mask
;

151 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_TCINDEX_MASK
]Ë< (
mask
))

153 
mask
 = 
	`πa_gë©å_u16
(
tb
[
TCA_TCINDEX_MASK
]);

154 
	`Ârötf
(
f
,"mask 0x%04x ",
mask
);

156 i‡(
tb
[
TCA_TCINDEX_SHIFT
]) {

157 
shi·
;

159 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_TCINDEX_SHIFT
]Ë< (
shi·
))

161 
shi·
 = *(*Ë
	`RTA_DATA
(
tb
[
TCA_TCINDEX_SHIFT
]);

162 
	`Ârötf
(
f
,"shi· %d ",
shi·
);

164 i‡(
tb
[
TCA_TCINDEX_FALL_THROUGH
]) {

165 
ÁŒ_through
;

167 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_TCINDEX_FALL_THROUGH
]) <

168 (
ÁŒ_through
))

170 
ÁŒ_through
 = *(*Ë
	`RTA_DATA
(
tb
[
TCA_TCINDEX_FALL_THROUGH
]);

171 
	`Ârötf
(
f
,
ÁŒ_through
 ? "fall_through " : "pass_on ");

173 i‡(
tb
[
TCA_TCINDEX_CLASSID
]) {

174 
	`SPRINT_BUF
(
b1
);

175 
	`Ârötf
(
f
, "˛assid %†",
	`•röt_tc_˛assid
(*(
__u32
 *)

176 
	`RTA_DATA
(
tb
[
TCA_TCINDEX_CLASSID
]), 
b1
));

178 i‡(
tb
[
TCA_TCINDEX_POLICE
]) {

179 
	`Ârötf
(
f
, "\n");

180 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_TCINDEX_POLICE
]);

182 i‡(
tb
[
TCA_TCINDEX_ACT
]) {

183 
	`Ârötf
(
f
, "\n");

184 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_TCINDEX_ACT
]);

187 
	}
}

189 
fûãr_utû
 
	gtcödex_fûãr_utû
 = {

190 .
id
 = "tcindex",

191 .
	g∑r£_f›t
 = 
tcödex_∑r£_›t
,

192 .
	g¥öt_f›t
 = 
tcödex_¥öt_›t
,

	@tc/f_u32.c

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<sy¶og.h
>

18 
	~<f˙é.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

23 
	~<löux/if.h
>

24 
	~<löux/if_ëhî.h
>

26 
	~"utûs.h
"

27 
	~"tc_utû.h
"

29 
show_¥ëty
;

31 
	$ex∂aö
()

33 
	`Ârötf
(
°dîr
, "Usage: ... u32 [ match SELECTOR ... ] [Üink HTID ]"

35 
	`Ârötf
(
°dîr
, " [áction ACTION_SPEC ]"

37 
	`Ârötf
(
°dîr
, " [ ht HTID ] [ hashkey HASHKEY_SPEC ]\n");

38 
	`Ârötf
(
°dîr
, " [ sample SAMPLE ]\n");

39 
	`Ârötf
(
°dîr
, "or u32 divisor DIVISOR\n");

40 
	`Ârötf
(
°dîr
, "\n");

41 
	`Ârötf
(
°dîr
, "Where: SELECTOR := SAMPLE SAMPLE ...\n");

42 
	`Ârötf
(
°dîr
, " SAMPLE := { ip | ip6 | udp |Åcp | icmp |"

44 
	`Ârötf
(
°dîr
, " FILTERID := X:Y:Z\n");

45 
	`Ârötf
(
°dîr
, "\nNOTE: CLASSID isÖarsedát hexadecimal input.\n");

46 
	}
}

48 
	$gë_u32_h™dÀ
(
__u32
 *
h™dÀ
, c⁄° *
°r
)

50 
__u32
 
htid
=0, 
hash
=0, 
nodeid
=0;

51 *
tmp
 = 
	`°rchr
(
°r
, ':');

53 i‡(
tmp
 =
NULL
) {

54 i‡(
	`memcmp
("0x", 
°r
, 2) == 0)

55  
	`gë_u32
(
h™dÀ
, 
°r
, 16);

58 
htid
 = 
	`°πoul
(
°r
, &
tmp
, 16);

59 i‡(
tmp
 =
°r
 && *str != ':' && *str != 0)

61 i‡(
htid
>=0x1000)

63 i‡(*
tmp
) {

64 
°r
 = 
tmp
 + 1;

65 
hash
 = 
	`°πoul
(
°r
, &
tmp
, 16);

66 i‡(
tmp
 =
°r
 && *str != ':' && *str != 0)

68 i‡(
hash
>=0x100)

70 i‡(*
tmp
) {

71 
°r
 = 
tmp
 + 1;

72 
nodeid
 = 
	`°πoul
(
°r
, &
tmp
, 16);

73 i‡(
tmp
 =
°r
 && *str != 0)

75 i‡(
nodeid
>=0x1000)

79 *
h™dÀ
 = (
htid
<<20)|(
hash
<<12)|
nodeid
;

81 
	}
}

83 * 
	$•röt_u32_h™dÀ
(
__u32
 
h™dÀ
, *
buf
)

85 
bsize
 = 
SPRINT_BSIZE
-1;

86 
__u32
 
htid
 = 
	`TC_U32_HTID
(
h™dÀ
);

87 
__u32
 
hash
 = 
	`TC_U32_HASH
(
h™dÀ
);

88 
__u32
 
nodeid
 = 
	`TC_U32_NODE
(
h™dÀ
);

89 *
b
 = 
buf
;

91 i‡(
h™dÀ
 == 0) {

92 
	`¢¥ötf
(
b
, 
bsize
, "none");

93  
b
;

95 i‡(
htid
) {

96 
l
 = 
	`¢¥ötf
(
b
, 
bsize
, "%x:", 
htid
>>20);

97 
bsize
 -
l
;

98 
b
 +
l
;

100 i‡(
nodeid
|
hash
) {

101 i‡(
hash
) {

102 
l
 = 
	`¢¥ötf
(
b
, 
bsize
, "%x", 
hash
);

103 
bsize
 -
l
;

104 
b
 +
l
;

106 i‡(
nodeid
) {

107 
l
 = 
	`¢¥ötf
(
b
, 
bsize
, ":%x", 
nodeid
);

108 
bsize
 -
l
;

109 
b
 +
l
;

112 i‡(
show_øw
)

113 
	`¢¥ötf
(
b
, 
bsize
, "[%08x] ", 
h™dÀ
);

114  
buf
;

115 
	}
}

117 
	$∑ck_key
(
tc_u32_£l
 *
£l
, 
__u32
 
key
, __u32 
mask
,

118 
off
, 
offmask
)

120 
i
;

121 
hwm
 = 
£l
->
nkeys
;

123 
key
 &
mask
;

125 
i
=0; i<
hwm
; i++) {

126 i‡(
£l
->
keys
[
i
].
off
 =of‡&& sñ->keys[i].
offmask
 == offmask) {

127 
__u32
 
öãr£˘
 = 
mask
 & 
£l
->
keys
[
i
].mask;

129 i‡((
key
 ^ 
£l
->
keys
[
i
].
vÆ
Ë& 
öãr£˘
)

131 
£l
->
keys
[
i
].
vÆ
 |
key
;

132 
£l
->
keys
[
i
].
mask
 |= mask;

137 i‡(
hwm
 >= 128)

139 i‡(
off
 % 4)

141 
£l
->
keys
[
hwm
].
vÆ
 = 
key
;

142 
£l
->
keys
[
hwm
].
mask
 = mask;

143 
£l
->
keys
[
hwm
].
off
 = off;

144 
£l
->
keys
[
hwm
].
offmask
 = offmask;

145 
£l
->
nkeys
++;

147 
	}
}

149 
	$∑ck_key32
(
tc_u32_£l
 *
£l
, 
__u32
 
key
, __u32 
mask
,

150 
off
, 
offmask
)

152 
key
 = 
	`ht⁄l
(key);

153 
mask
 = 
	`ht⁄l
(mask);

154  
	`∑ck_key
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

155 
	}
}

157 
	$∑ck_key16
(
tc_u32_£l
 *
£l
, 
__u32
 
key
, __u32 
mask
,

158 
off
, 
offmask
)

160 i‡(
key
 > 0xFFFF || 
mask
 > 0xFFFF)

163 i‡((
off
 & 3) == 0) {

164 
key
 <<= 16;

165 
mask
 <<= 16;

167 
off
 &= ~3;

168 
key
 = 
	`ht⁄l
(key);

169 
mask
 = 
	`ht⁄l
(mask);

171  
	`∑ck_key
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

172 
	}
}

174 
	$∑ck_key8
(
tc_u32_£l
 *
£l
, 
__u32
 
key
, __u32 
mask
, 
off
, 
offmask
)

176 i‡(
key
 > 0xFF || 
mask
 > 0xFF)

179 i‡((
off
 & 3) == 0) {

180 
key
 <<= 24;

181 
mask
 <<= 24;

182 } i‡((
off
 & 3) == 1) {

183 
key
 <<= 16;

184 
mask
 <<= 16;

185 } i‡((
off
 & 3) == 2) {

186 
key
 <<= 8;

187 
mask
 <<= 8;

189 
off
 &= ~3;

190 
key
 = 
	`ht⁄l
(key);

191 
mask
 = 
	`ht⁄l
(mask);

193  
	`∑ck_key
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

194 
	}
}

197 
	$∑r£_©
(*
¨gc_p
, ***
¨gv_p
, *
off
, *
offmask
)

199 
¨gc
 = *
¨gc_p
;

200 **
¨gv
 = *
¨gv_p
;

201 *
p
 = *
¨gv
;

203 i‡(
¨gc
 <= 0)

206 i‡(
	`°æí
(
p
) > strlen("nexthdr+") &&

207 
	`memcmp
(
p
, "√xthdr+", 
	`°æí
("nexthdr+")) == 0) {

208 *
offmask
 = -1;

209 
p
 +
	`°æí
("nexthdr+");

210 } i‡(
	`m©ches
(*
¨gv
, "nexthdr+") == 0) {

211 
	`NEXT_ARG
();

212 *
offmask
 = -1;

213 
p
 = *
¨gv
;

216 i‡(
	`gë_öãgî
(
off
, 
p
, 0))

218 
¨gc
--; 
¨gv
++;

220 *
¨gc_p
 = 
¨gc
;

221 *
¨gv_p
 = 
¨gv
;

223 
	}
}

226 
	$∑r£_u32
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
,

227 
off
, 
offmask
)

229 
ªs
 = -1;

230 
¨gc
 = *
¨gc_p
;

231 **
¨gv
 = *
¨gv_p
;

232 
__u32
 
key
;

233 
__u32
 
mask
;

235 i‡(
¨gc
 < 2)

238 i‡(
	`gë_u32
(&
key
, *
¨gv
, 0))

240 
¨gc
--; 
¨gv
++;

242 i‡(
	`gë_u32
(&
mask
, *
¨gv
, 16))

244 
¨gc
--; 
¨gv
++;

246 i‡(
¨gc
 > 0 && 
	`°rcmp
(
¨gv
[0], "at") == 0) {

247 
	`NEXT_ARG
();

248 i‡(
	`∑r£_©
(&
¨gc
, &
¨gv
, &
off
, &
offmask
))

252 
ªs
 = 
	`∑ck_key32
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

253 *
¨gc_p
 = 
¨gc
;

254 *
¨gv_p
 = 
¨gv
;

255  
ªs
;

256 
	}
}

258 
	$∑r£_u16
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
,

259 
off
, 
offmask
)

261 
ªs
 = -1;

262 
¨gc
 = *
¨gc_p
;

263 **
¨gv
 = *
¨gv_p
;

264 
__u32
 
key
;

265 
__u32
 
mask
;

267 i‡(
¨gc
 < 2)

270 i‡(
	`gë_u32
(&
key
, *
¨gv
, 0))

272 
¨gc
--; 
¨gv
++;

274 i‡(
	`gë_u32
(&
mask
, *
¨gv
, 16))

276 
¨gc
--; 
¨gv
++;

278 i‡(
¨gc
 > 0 && 
	`°rcmp
(
¨gv
[0], "at") == 0) {

279 
	`NEXT_ARG
();

280 i‡(
	`∑r£_©
(&
¨gc
, &
¨gv
, &
off
, &
offmask
))

283 
ªs
 = 
	`∑ck_key16
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

284 *
¨gc_p
 = 
¨gc
;

285 *
¨gv_p
 = 
¨gv
;

286  
ªs
;

287 
	}
}

289 
	$∑r£_u8
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
,

290 
off
, 
offmask
)

292 
ªs
 = -1;

293 
¨gc
 = *
¨gc_p
;

294 **
¨gv
 = *
¨gv_p
;

295 
__u32
 
key
;

296 
__u32
 
mask
;

298 i‡(
¨gc
 < 2)

301 i‡(
	`gë_u32
(&
key
, *
¨gv
, 0))

303 
¨gc
--; 
¨gv
++;

305 i‡(
	`gë_u32
(&
mask
, *
¨gv
, 16))

307 
¨gc
--; 
¨gv
++;

309 i‡(
key
 > 0xFF || 
mask
 > 0xFF)

312 i‡(
¨gc
 > 0 && 
	`°rcmp
(
¨gv
[0], "at") == 0) {

313 
	`NEXT_ARG
();

314 i‡(
	`∑r£_©
(&
¨gc
, &
¨gv
, &
off
, &
offmask
))

318 
ªs
 = 
	`∑ck_key8
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

319 *
¨gc_p
 = 
¨gc
;

320 *
¨gv_p
 = 
¨gv
;

321  
ªs
;

322 
	}
}

324 
	$∑r£_ù_addr
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
,

325 
off
)

327 
ªs
 = -1;

328 
¨gc
 = *
¨gc_p
;

329 **
¨gv
 = *
¨gv_p
;

330 
öë_¥efix
 
addr
;

331 
__u32
 
mask
;

332 
offmask
 = 0;

334 i‡(
¨gc
 < 1)

337 i‡(
	`gë_¥efix_1
(&
addr
, *
¨gv
, 
AF_INET
))

339 
¨gc
--; 
¨gv
++;

341 i‡(
¨gc
 > 0 && 
	`°rcmp
(
¨gv
[0], "at") == 0) {

342 
	`NEXT_ARG
();

343 i‡(
	`∑r£_©
(&
¨gc
, &
¨gv
, &
off
, &
offmask
))

347 
mask
 = 0;

348 i‡(
addr
.
bôÀn
)

349 
mask
 = 
	`ht⁄l
(0xFFFFFFFF << (32 - 
addr
.
bôÀn
));

350 i‡(
	`∑ck_key
(
£l
, 
addr
.
d©a
[0], 
mask
, 
off
, 
offmask
) < 0)

352 
ªs
 = 0;

354 *
¨gc_p
 = 
¨gc
;

355 *
¨gv_p
 = 
¨gv
;

356  
ªs
;

357 
	}
}

359 
	$∑r£_ù6_addr
(*
¨gc_p
, ***
¨gv_p
,

360 
tc_u32_£l
 *
£l
, 
off
)

362 
ªs
 = -1;

363 
¨gc
 = *
¨gc_p
;

364 **
¨gv
 = *
¨gv_p
;

365 
∂í
 = 128;

366 
i
;

367 
öë_¥efix
 
addr
;

368 
offmask
 = 0;

370 i‡(
¨gc
 < 1)

373 i‡(
	`gë_¥efix_1
(&
addr
, *
¨gv
, 
AF_INET6
))

375 
¨gc
--; 
¨gv
++;

377 i‡(
¨gc
 > 0 && 
	`°rcmp
(
¨gv
[0], "at") == 0) {

378 
	`NEXT_ARG
();

379 i‡(
	`∑r£_©
(&
¨gc
, &
¨gv
, &
off
, &
offmask
))

383 
∂í
 = 
addr
.
bôÀn
;

384 
i
 = 0; i < 
∂í
; i += 32) {

386 i‡(
i
 + 31 <
∂í
) {

387 
ªs
 = 
	`∑ck_key
(
£l
, 
addr
.
d©a
[
i
 / 32],

388 0xFFFFFFFF, 
off
 + 4 * (
i
 / 32), 
offmask
);

389 i‡(
ªs
 < 0)

391 } i‡(
i
 < 
∂í
) {

392 
__u32
 
mask
 = 
	`ht⁄l
(0xFFFFFFFF << (32 - (
∂í
 - 
i
)));

393 
ªs
 = 
	`∑ck_key
(
£l
, 
addr
.
d©a
[
i
 / 32],

394 
mask
, 
off
 + 4 * (
i
 / 32), 
offmask
);

395 i‡(
ªs
 < 0)

399 
ªs
 = 0;

401 *
¨gc_p
 = 
¨gc
;

402 *
¨gv_p
 = 
¨gv
;

403  
ªs
;

404 
	}
}

406 
	$∑r£_ù6_˛ass
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

408 
ªs
 = -1;

409 
¨gc
 = *
¨gc_p
;

410 **
¨gv
 = *
¨gv_p
;

411 
__u32
 
key
;

412 
__u32
 
mask
;

413 
off
 = 0;

414 
offmask
 = 0;

416 i‡(
¨gc
 < 2)

419 i‡(
	`gë_u32
(&
key
, *
¨gv
, 0))

421 
¨gc
--; 
¨gv
++;

423 i‡(
	`gë_u32
(&
mask
, *
¨gv
, 16))

425 
¨gc
--; 
¨gv
++;

427 i‡(
key
 > 0xFF || 
mask
 > 0xFF)

430 
key
 <<= 20;

431 
mask
 <<= 20;

432 
key
 = 
	`ht⁄l
(key);

433 
mask
 = 
	`ht⁄l
(mask);

435 
ªs
 = 
	`∑ck_key
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

436 i‡(
ªs
 < 0)

439 *
¨gc_p
 = 
¨gc
;

440 *
¨gv_p
 = 
¨gv
;

442 
	}
}

444 
	$∑r£_ëhî_addr
(*
¨gc_p
, ***
¨gv_p
,

445 
tc_u32_£l
 *
£l
, 
off
)

447 
ªs
 = -1;

448 
¨gc
 = *
¨gc_p
;

449 **
¨gv
 = *
¨gv_p
;

450 
__u8
 
addr
[6];

451 
offmask
 = 0;

452 
i
;

454 i‡(
¨gc
 < 1)

457 i‡(
	`ssˇnf
(*
¨gv
, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",

458 
addr
 + 0,áddr + 1,áddr + 2,

459 
addr
 + 3,áddr + 4,áddr + 5) != 6) {

460 
	`Ârötf
(
°dîr
, "parse_ether_addr: improperly formedáddress '%s'\n",

461 *
¨gv
);

465 
¨gc
--; 
¨gv
++;

466 i‡(
¨gc
 > 0 && 
	`°rcmp
(
¨gv
[0], "at") == 0) {

467 
	`NEXT_ARG
();

468 i‡(
	`∑r£_©
(&
¨gc
, &
¨gv
, &
off
, &
offmask
))

472 
i
 = 0; i < 6; i++) {

473 
ªs
 = 
	`∑ck_key8
(
£l
, 
addr
[
i
], 0xFF, 
off
 + i, 
offmask
);

474 i‡(
ªs
 < 0)

478 *
¨gc_p
 = 
¨gc
;

479 *
¨gv_p
 = 
¨gv
;

480  
ªs
;

481 
	}
}

483 
	$∑r£_ù
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

485 
ªs
 = -1;

486 
¨gc
 = *
¨gc_p
;

487 **
¨gv
 = *
¨gv_p
;

489 i‡(
¨gc
 < 2)

492 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

493 
	`NEXT_ARG
();

494 
ªs
 = 
	`∑r£_ù_addr
(&
¨gc
, &
¨gv
, 
£l
, 12);

495 } i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

496 
	`NEXT_ARG
();

497 
ªs
 = 
	`∑r£_ù_addr
(&
¨gc
, &
¨gv
, 
£l
, 16);

498 } i‡(
	`°rcmp
(*
¨gv
, "tos") == 0 ||

499 
	`m©ches
(*
¨gv
, "dsfield") == 0 ||

500 
	`m©ches
(*
¨gv
, "precedence") == 0) {

501 
	`NEXT_ARG
();

502 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 1, 0);

503 } i‡(
	`°rcmp
(*
¨gv
, "ihl") == 0) {

504 
	`NEXT_ARG
();

505 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 0, 0);

506 } i‡(
	`°rcmp
(*
¨gv
, "protocol") == 0) {

507 
	`NEXT_ARG
();

508 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 9, 0);

509 } i‡(
	`°rcmp
(*
¨gv
, "nofrag") == 0) {

510 
¨gc
--; 
¨gv
++;

511 
ªs
 = 
	`∑ck_key16
(
£l
, 0, 0x3FFF, 6, 0);

512 } i‡(
	`°rcmp
(*
¨gv
, "firstfrag") == 0) {

513 
¨gc
--; 
¨gv
++;

514 
ªs
 = 
	`∑ck_key16
(
£l
, 0x2000, 0x3FFF, 6, 0);

515 } i‡(
	`°rcmp
(*
¨gv
, "df") == 0) {

516 
¨gc
--; 
¨gv
++;

517 
ªs
 = 
	`∑ck_key16
(
£l
, 0x4000, 0x4000, 6, 0);

518 } i‡(
	`°rcmp
(*
¨gv
, "mf") == 0) {

519 
¨gc
--; 
¨gv
++;

520 
ªs
 = 
	`∑ck_key16
(
£l
, 0x2000, 0x2000, 6, 0);

521 } i‡(
	`°rcmp
(*
¨gv
, "dport") == 0) {

522 
	`NEXT_ARG
();

523 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 22, 0);

524 } i‡(
	`°rcmp
(*
¨gv
, "sport") == 0) {

525 
	`NEXT_ARG
();

526 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 20, 0);

527 } i‡(
	`°rcmp
(*
¨gv
, "icmp_type") == 0) {

528 
	`NEXT_ARG
();

529 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 20, 0);

530 } i‡(
	`°rcmp
(*
¨gv
, "icmp_code") == 0) {

531 
	`NEXT_ARG
();

532 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 21, 0);

536 *
¨gc_p
 = 
¨gc
;

537 *
¨gv_p
 = 
¨gv
;

538  
ªs
;

539 
	}
}

541 
	$∑r£_ù6
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

543 
ªs
 = -1;

544 
¨gc
 = *
¨gc_p
;

545 **
¨gv
 = *
¨gv_p
;

547 i‡(
¨gc
 < 2)

550 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

551 
	`NEXT_ARG
();

552 
ªs
 = 
	`∑r£_ù6_addr
(&
¨gc
, &
¨gv
, 
£l
, 8);

553 } i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

554 
	`NEXT_ARG
();

555 
ªs
 = 
	`∑r£_ù6_addr
(&
¨gc
, &
¨gv
, 
£l
, 24);

556 } i‡(
	`°rcmp
(*
¨gv
, "priority") == 0) {

557 
	`NEXT_ARG
();

558 
ªs
 = 
	`∑r£_ù6_˛ass
(&
¨gc
, &
¨gv
, 
£l
);

559 } i‡(
	`°rcmp
(*
¨gv
, "protocol") == 0) {

560 
	`NEXT_ARG
();

561 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 6, 0);

562 } i‡(
	`°rcmp
(*
¨gv
, "flowlabel") == 0) {

563 
	`NEXT_ARG
();

564 
ªs
 = 
	`∑r£_u32
(&
¨gc
, &
¨gv
, 
£l
, 0, 0);

565 } i‡(
	`°rcmp
(*
¨gv
, "dport") == 0) {

566 
	`NEXT_ARG
();

567 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 42, 0);

568 } i‡(
	`°rcmp
(*
¨gv
, "sport") == 0) {

569 
	`NEXT_ARG
();

570 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 40, 0);

571 } i‡(
	`°rcmp
(*
¨gv
, "icmp_type") == 0) {

572 
	`NEXT_ARG
();

573 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 40, 0);

574 } i‡(
	`°rcmp
(*
¨gv
, "icmp_code") == 0) {

575 
	`NEXT_ARG
();

576 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 41, 1);

580 *
¨gc_p
 = 
¨gc
;

581 *
¨gv_p
 = 
¨gv
;

582  
ªs
;

583 
	}
}

585 
	$∑r£_ëhî
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

587 
ªs
 = -1;

588 
¨gc
 = *
¨gc_p
;

589 **
¨gv
 = *
¨gv_p
;

591 i‡(
¨gc
 < 2)

594 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

595 
	`NEXT_ARG
();

596 
ªs
 = 
	`∑r£_ëhî_addr
(&
¨gc
, &
¨gv
, 
£l
, -8);

597 } i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

598 
	`NEXT_ARG
();

599 
ªs
 = 
	`∑r£_ëhî_addr
(&
¨gc
, &
¨gv
, 
£l
, -14);

601 
	`Ârötf
(
°dîr
, "Unknow¿m©ch:Éthî %s\n", *
¨gv
);

605 *
¨gc_p
 = 
¨gc
;

606 *
¨gv_p
 = 
¨gv
;

607  
ªs
;

608 
	}
}

610 
	#∑r£_t˝
 
∑r£_udp


	)

611 
	$∑r£_udp
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

613 
ªs
 = -1;

614 
¨gc
 = *
¨gc_p
;

615 **
¨gv
 = *
¨gv_p
;

617 i‡(
¨gc
 < 2)

620 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

621 
	`NEXT_ARG
();

622 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 0, -1);

623 } i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

624 
	`NEXT_ARG
();

625 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 2, -1);

629 *
¨gc_p
 = 
¨gc
;

630 *
¨gv_p
 = 
¨gv
;

631  
ªs
;

632 
	}
}

635 
	$∑r£_icmp
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

637 
ªs
 = -1;

638 
¨gc
 = *
¨gc_p
;

639 **
¨gv
 = *
¨gv_p
;

641 i‡(
¨gc
 < 2)

644 i‡(
	`°rcmp
(*
¨gv
, "type") == 0) {

645 
	`NEXT_ARG
();

646 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 0, -1);

647 } i‡(
	`°rcmp
(*
¨gv
, "code") == 0) {

648 
	`NEXT_ARG
();

649 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 1, -1);

653 *
¨gc_p
 = 
¨gc
;

654 *
¨gv_p
 = 
¨gv
;

655  
ªs
;

656 
	}
}

658 
	$∑r£_m¨k
(*
¨gc_p
, ***
¨gv_p
, 
∆msghdr
 *
n
)

660 
ªs
 = -1;

661 
¨gc
 = *
¨gc_p
;

662 **
¨gv
 = *
¨gv_p
;

663 
tc_u32_m¨k
 
m¨k
;

665 i‡(
¨gc
 <= 1)

668 i‡(
	`gë_u32
(&
m¨k
.
vÆ
, *
¨gv
, 0)) {

669 
	`Ârötf
(
°dîr
, "Illegal \"mark\" value\n");

672 
	`NEXT_ARG
();

674 i‡(
	`gë_u32
(&
m¨k
.
mask
, *
¨gv
, 0)) {

675 
	`Ârötf
(
°dîr
, "Illegal \"mark\" mask\n");

678 
	`NEXT_ARG
();

680 i‡((
m¨k
.
vÆ
 & m¨k.
mask
) != mark.val) {

681 
	`Ârötf
(
°dîr
, "Illegal \"mark\" (impossible combination)\n");

685 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_MARK
, &
m¨k
, (mark));

686 
ªs
 = 0;

688 *
¨gc_p
 = 
¨gc
;

689 *
¨gv_p
 = 
¨gv
;

690  
ªs
;

691 
	}
}

693 
	$∑r£_£À˘‹
(*
¨gc_p
, ***
¨gv_p
,

694 
tc_u32_£l
 *
£l
, 
∆msghdr
 *
n
)

696 
¨gc
 = *
¨gc_p
;

697 **
¨gv
 = *
¨gv_p
;

698 
ªs
 = -1;

700 i‡(
¨gc
 <= 0)

703 i‡(
	`m©ches
(*
¨gv
, "u32") == 0) {

704 
	`NEXT_ARG
();

705 
ªs
 = 
	`∑r£_u32
(&
¨gc
, &
¨gv
, 
£l
, 0, 0);

706 } i‡(
	`m©ches
(*
¨gv
, "u16") == 0) {

707 
	`NEXT_ARG
();

708 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 0, 0);

709 } i‡(
	`m©ches
(*
¨gv
, "u8") == 0) {

710 
	`NEXT_ARG
();

711 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 0, 0);

712 } i‡(
	`m©ches
(*
¨gv
, "ip") == 0) {

713 
	`NEXT_ARG
();

714 
ªs
 = 
	`∑r£_ù
(&
¨gc
, &
¨gv
, 
£l
);

715 } i‡(
	`m©ches
(*
¨gv
, "ip6") == 0) {

716 
	`NEXT_ARG
();

717 
ªs
 = 
	`∑r£_ù6
(&
¨gc
, &
¨gv
, 
£l
);

718 } i‡(
	`m©ches
(*
¨gv
, "udp") == 0) {

719 
	`NEXT_ARG
();

720 
ªs
 = 
	`∑r£_udp
(&
¨gc
, &
¨gv
, 
£l
);

721 } i‡(
	`m©ches
(*
¨gv
, "tcp") == 0) {

722 
	`NEXT_ARG
();

723 
ªs
 = 
	`∑r£_t˝
(&
¨gc
, &
¨gv
, 
£l
);

724 } i‡(
	`m©ches
(*
¨gv
, "icmp") == 0) {

725 
	`NEXT_ARG
();

726 
ªs
 = 
	`∑r£_icmp
(&
¨gc
, &
¨gv
, 
£l
);

727 } i‡(
	`m©ches
(*
¨gv
, "mark") == 0) {

728 
	`NEXT_ARG
();

729 
ªs
 = 
	`∑r£_m¨k
(&
¨gc
, &
¨gv
, 
n
);

730 } i‡(
	`m©ches
(*
¨gv
, "ether") == 0) {

731 
	`NEXT_ARG
();

732 
ªs
 = 
	`∑r£_ëhî
(&
¨gc
, &
¨gv
, 
£l
);

736 *
¨gc_p
 = 
¨gc
;

737 *
¨gv_p
 = 
¨gv
;

738  
ªs
;

739 
	}
}

741 
	$∑r£_off£t
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

743 
¨gc
 = *
¨gc_p
;

744 **
¨gv
 = *
¨gv_p
;

746 
¨gc
 > 0) {

747 i‡(
	`m©ches
(*
¨gv
, "plus") == 0) {

748 
off
;

749 
	`NEXT_ARG
();

750 i‡(
	`gë_öãgî
(&
off
, *
¨gv
, 0))

752 
£l
->
off
 = off;

753 
£l
->
Êags
 |
TC_U32_OFFSET
;

754 } i‡(
	`m©ches
(*
¨gv
, "at") == 0) {

755 
off
;

756 
	`NEXT_ARG
();

757 i‡(
	`gë_öãgî
(&
off
, *
¨gv
, 0))

759 
£l
->
offoff
 = 
off
;

760 i‡(
off
%2) {

761 
	`Ârötf
(
°dîr
, "offset \"at\" must beÉven\n");

764 
£l
->
Êags
 |
TC_U32_VAROFFSET
;

765 } i‡(
	`m©ches
(*
¨gv
, "mask") == 0) {

766 
__u16
 
mask
;

767 
	`NEXT_ARG
();

768 i‡(
	`gë_u16
(&
mask
, *
¨gv
, 16))

770 
£l
->
offmask
 = 
	`ht⁄s
(
mask
);

771 
£l
->
Êags
 |
TC_U32_VAROFFSET
;

772 } i‡(
	`m©ches
(*
¨gv
, "shift") == 0) {

773 
shi·
;

774 
	`NEXT_ARG
();

775 i‡(
	`gë_öãgî
(&
shi·
, *
¨gv
, 0))

777 
£l
->
offshi·
 = 
shi·
;

778 
£l
->
Êags
 |
TC_U32_VAROFFSET
;

779 } i‡(
	`m©ches
(*
¨gv
, "eat") == 0) {

780 
£l
->
Êags
 |
TC_U32_EAT
;

784 
¨gc
--; 
¨gv
++;

787 *
¨gc_p
 = 
¨gc
;

788 *
¨gv_p
 = 
¨gv
;

790 
	}
}

792 
	$∑r£_hashkey
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

794 
¨gc
 = *
¨gc_p
;

795 **
¨gv
 = *
¨gv_p
;

797 
¨gc
 > 0) {

798 i‡(
	`m©ches
(*
¨gv
, "mask") == 0) {

799 
__u32
 
mask
;

800 
	`NEXT_ARG
();

801 i‡(
	`gë_u32
(&
mask
, *
¨gv
, 16))

803 
£l
->
hmask
 = 
	`ht⁄l
(
mask
);

804 } i‡(
	`m©ches
(*
¨gv
, "at") == 0) {

805 
num
;

806 
	`NEXT_ARG
();

807 i‡(
	`gë_öãgî
(&
num
, *
¨gv
, 0))

809 i‡(
num
%4)

811 
£l
->
hoff
 = 
num
;

815 
¨gc
--; 
¨gv
++;

818 *
¨gc_p
 = 
¨gc
;

819 *
¨gv_p
 = 
¨gv
;

821 
	}
}

823 
	$¥öt_ùv4
(
FILE
 *
f
, c⁄° 
tc_u32_key
 *
key
)

825 
abuf
[256];

827 
key
->
off
) {

829 
	`¡ohl
(
key
->
mask
)) {

831 
	`Ârötf
(
f
, "\¿ m©ch IP ih»%u", 
	`¡ohl
(
key
->
vÆ
) >> 24);

834 
	`Ârötf
(
f
, "\¿ m©ch IP dsfõld %#x", 
	`¡ohl
(
key
->
vÆ
) >> 16);

839 i‡(
	`¡ohl
(
key
->
mask
) == 0x00ff0000) {

840 
	`Ârötf
(
f
, "\¿ m©ch IPÖrŸocﬁ %d", 
	`¡ohl
(
key
->
vÆ
) >> 16);

846 
bôs
 = 
	`mask2bôs
(
key
->
mask
);

847 i‡(
bôs
 >= 0) {

848 
	`Ârötf
(
f
, "\n %s %s/%d",

849 
key
->
off
 == 12 ? "match IP src" : "match IP dst",

850 
	`öë_¡›
(
AF_INET
, &
key
->
vÆ
,

851 
abuf
, (abuf)),

852 
bôs
);

859 
	`¡ohl
(
key
->
mask
)) {

861 
	`Ârötf
(
f
, "\n match dport %u",

862 
	`¡ohl
(
key
->
vÆ
) & 0xffff);

865 
	`Ârötf
(
f
, "\n match sport %u",

866 
	`¡ohl
(
key
->
vÆ
) >> 16);

869 
	`Ârötf
(
f
, "\n match dport %u, match sport %u",

870 
	`¡ohl
(
key
->
vÆ
) & 0xffff,

871 
	`¡ohl
(
key
->
vÆ
) >> 16);

877 
	}
}

879 
	$¥öt_ùv6
(
FILE
 *
f
, c⁄° 
tc_u32_key
 *
key
)

881 
abuf
[256];

883 
key
->
off
) {

885 
	`¡ohl
(
key
->
mask
)) {

887 
	`Ârötf
(
f
, "\¿ m©ch IP ih»%u", 
	`¡ohl
(
key
->
vÆ
) >> 24);

890 
	`Ârötf
(
f
, "\¿ m©ch IP dsfõld %#x", 
	`¡ohl
(
key
->
vÆ
) >> 16);

895 i‡(
	`¡ohl
(
key
->
mask
) == 0x00ff0000) {

896 
	`Ârötf
(
f
, "\¿ m©ch IPÖrŸocﬁ %d", 
	`¡ohl
(
key
->
vÆ
) >> 16);

902 
bôs
 = 
	`mask2bôs
(
key
->
mask
);

903 i‡(
bôs
 >= 0) {

904 
	`Ârötf
(
f
, "\n %s %s/%d",

905 
key
->
off
 == 12 ? "match IP src" : "match IP dst",

906 
	`öë_¡›
(
AF_INET
, &
key
->
vÆ
,

907 
abuf
, (abuf)),

908 
bôs
);

915 
	`¡ohl
(
key
->
mask
)) {

917 
	`Ârötf
(
f
, "\n match sport %u",

918 
	`¡ohl
(
key
->
vÆ
) & 0xffff);

921 
	`Ârötf
(
f
, "\n match dport %u",

922 
	`¡ohl
(
key
->
vÆ
) >> 16);

925 
	`Ârötf
(
f
, "\n match sport %u, match dport %u",

926 
	`¡ohl
(
key
->
vÆ
) & 0xffff,

927 
	`¡ohl
(
key
->
vÆ
) >> 16);

933 
	}
}

935 
	$¥öt_øw
(
FILE
 *
f
, c⁄° 
tc_u32_key
 *
key
)

937 
	`Ârötf
(
f
, "\n match %08x/%08xát %s%d",

938 ()
	`¡ohl
(
key
->
vÆ
),

939 ()
	`¡ohl
(
key
->
mask
),

940 
key
->
offmask
 ? "nexthdr+" : "",

941 
key
->
off
);

942 
	}
}

945 
__u16
 
	m¥Ÿo
;

946 
__u16
 
	m∑d
;

947 (*
	mµröãr
)(
FILE
 *
	mf
, c⁄° 
tc_u32_key
 *
	mkey
);

948 } 
	gu32_µröãrs
[] = {

949 {0, 0, 
¥öt_øw
},

950 {
ETH_P_IP
, 0, 
¥öt_ùv4
},

951 {
ETH_P_IPV6
, 0, 
¥öt_ùv6
},

954 
	$show_keys
(
FILE
 *
f
, c⁄° 
tc_u32_key
 *
key
)

956 
i
 = 0;

958 i‡(!
show_¥ëty
)

959 
show_k
;

961 
i
 = 0; i < (
u32_µröãrs
) / (u32_pprinters[0]); i++) {

962 i‡(
u32_µröãrs
[
i
].
¥Ÿo
 =
	`¡ohs
(
f_¥Ÿo
)) {

963 
show_k
:

964 
u32_µröãrs
[
i
].
	`µröãr
(
f
, 
key
);

969 
i
 = 0;

970 
show_k
;

971 
	}
}

973 
	$u32_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
,

974 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

977 
tc_u32_£l
 
£l
;

978 
tc_u32_key
 
keys
[128];

979 } 
£l
;

980 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

981 
π©å
 *
èû
;

982 
£l_ok
 = 0, 
ãrmöÆ_ok
 = 0;

983 
ßm∂e_ok
 = 0;

984 
__u32
 
htid
 = 0;

985 
__u32
 
‹dî
 = 0;

987 
	`mem£t
(&
£l
, 0, (sel));

989 i‡(
h™dÀ
 && 
	`gë_u32_h™dÀ
(&
t
->
tcm_h™dÀ
, handle)) {

990 
	`Ârötf
(
°dîr
, "Illegal filter ID\n");

994 i‡(
¨gc
 == 0)

997 
èû
 = 
	`NLMSG_TAIL
(
n
);

998 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_OPTIONS
, 
NULL
, 0);

1000 
¨gc
 > 0) {

1001 i‡(
	`m©ches
(*
¨gv
, "match") == 0) {

1002 
	`NEXT_ARG
();

1003 i‡(
	`∑r£_£À˘‹
(&
¨gc
, &
¨gv
, &
£l
.£l, 
n
)) {

1004 
	`Ârötf
(
°dîr
, "Illegal \"match\"\n");

1007 
£l_ok
++;

1009 } i‡(
	`m©ches
(*
¨gv
, "offset") == 0) {

1010 
	`NEXT_ARG
();

1011 i‡(
	`∑r£_off£t
(&
¨gc
, &
¨gv
, &
£l
.sel)) {

1012 
	`Ârötf
(
°dîr
, "Illegal \"offset\"\n");

1016 } i‡(
	`m©ches
(*
¨gv
, "hashkey") == 0) {

1017 
	`NEXT_ARG
();

1018 i‡(
	`∑r£_hashkey
(&
¨gc
, &
¨gv
, &
£l
.sel)) {

1019 
	`Ârötf
(
°dîr
, "Illegal \"hashkey\"\n");

1023 } i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

1024 
	`°rcmp
(*
¨gv
, "flowid") == 0) {

1025 
h™dÀ
;

1026 
	`NEXT_ARG
();

1027 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
)) {

1028 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

1031 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_CLASSID
, &
h™dÀ
, 4);

1032 
£l
.£l.
Êags
 |
TC_U32_TERMINAL
;

1033 } i‡(
	`m©ches
(*
¨gv
, "divisor") == 0) {

1034 
divis‹
;

1035 
	`NEXT_ARG
();

1036 i‡(
	`gë_unsig√d
(&
divis‹
, *
¨gv
, 0) ||

1037 
divis‹
 == 0 ||

1038 
divis‹
 > 0x100 || ((divisor - 1) & divisor)) {

1039 
	`Ârötf
(
°dîr
, "Illegal \"divisor\"\n");

1042 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_DIVISOR
, &
divis‹
, 4);

1043 } i‡(
	`m©ches
(*
¨gv
, "order") == 0) {

1044 
	`NEXT_ARG
();

1045 i‡(
	`gë_u32
(&
‹dî
, *
¨gv
, 0)) {

1046 
	`Ârötf
(
°dîr
, "Illegal \"order\"\n");

1049 } i‡(
	`°rcmp
(*
¨gv
, "link") == 0) {

1050 
h™dÀ
;

1051 
	`NEXT_ARG
();

1052 i‡(
	`gë_u32_h™dÀ
(&
h™dÀ
, *
¨gv
)) {

1053 
	`Ârötf
(
°dîr
, "Illegal \"link\"\n");

1056 i‡(
h™dÀ
 && 
	`TC_U32_NODE
(handle)) {

1057 
	`Ârötf
(
°dîr
, "\"link\" must beá hashÅable.\n");

1060 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_LINK
, &
h™dÀ
, 4);

1061 } i‡(
	`°rcmp
(*
¨gv
, "ht") == 0) {

1062 
h™dÀ
;

1063 
	`NEXT_ARG
();

1064 i‡(
	`gë_u32_h™dÀ
(&
h™dÀ
, *
¨gv
)) {

1065 
	`Ârötf
(
°dîr
, "Illegal \"ht\"\n");

1068 i‡(
h™dÀ
 && 
	`TC_U32_NODE
(handle)) {

1069 
	`Ârötf
(
°dîr
, "\"ht\" must beá hashÅable.\n");

1072 i‡(
ßm∂e_ok
)

1073 
htid
 = (htid & 0xFF000Ë| (
h™dÀ
 & 0xFFF00000);

1075 
htid
 = (
h™dÀ
 & 0xFFFFF000);

1076 } i‡(
	`°rcmp
(*
¨gv
, "sample") == 0) {

1077 
__u32
 
hash
;

1078 
divis‹
 = 0x100;

1081 
tc_u32_£l
 
£l
;

1082 
tc_u32_key
 
keys
[4];

1083 } 
£l2
;

1084 
	`mem£t
(&
£l2
, 0, (sel2));

1085 
	`NEXT_ARG
();

1086 i‡(
	`∑r£_£À˘‹
(&
¨gc
, &
¨gv
, &
£l2
.
£l
, 
n
)) {

1087 
	`Ârötf
(
°dîr
, "Illegal \"sample\"\n");

1090 i‡(
£l2
.
£l
.
nkeys
 != 1) {

1091 
	`Ârötf
(
°dîr
, "\"sample\" must contain"

1095 i‡(*
¨gv
 !0 && 
	`°rcmp
(*argv, "divisor") == 0) {

1096 
	`NEXT_ARG
();

1097 i‡(
	`gë_unsig√d
(&
divis‹
, *
¨gv
, 0) || divisor == 0 ||

1098 
divis‹
 > 0x100 || ((divisor - 1) & divisor)) {

1099 
	`Ârötf
(
°dîr
, "Illegal sample \"divisor\"\n");

1102 
	`NEXT_ARG
();

1104 
hash
 = 
£l2
.
£l
.
keys
[0].
vÆ
 & sñ2.£l.keys[0].
mask
;

1105 
hash
 ^= hash >> 16;

1106 
hash
 ^= hash >> 8;

1107 
htid
 = ((
hash
 % 
divis‹
) << 12) | (htid & 0xFFF00000);

1108 
ßm∂e_ok
 = 1;

1110 } i‡(
	`°rcmp
(*
¨gv
, "indev") == 0) {

1111 
öd
[
IFNAMSIZ
 + 1];

1112 
	`mem£t
(
öd
, 0,  (ind));

1113 
¨gc
--;

1114 
¨gv
++;

1115 i‡(
¨gc
 < 1) {

1116 
	`Ârötf
(
°dîr
, "Illegal indev\n");

1119 
	`°∫˝y
(
öd
, *
¨gv
,  (ind) - 1);

1120 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_INDEV
, 
öd
, 
	`°æí
(ind) + 1);

1122 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

1123 
	`NEXT_ARG
();

1124 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_U32_ACT
, 
n
)) {

1125 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

1128 
ãrmöÆ_ok
++;

1131 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

1132 
	`NEXT_ARG
();

1133 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_U32_POLICE
, 
n
)) {

1134 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

1137 
ãrmöÆ_ok
++;

1139 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

1140 
	`ex∂aö
();

1143 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

1144 
	`ex∂aö
();

1147 
¨gc
--; 
¨gv
++;

1151 i‡(
ãrmöÆ_ok
)

1152 
£l
.£l.
Êags
 |
TC_U32_TERMINAL
;

1154 i‡(
‹dî
) {

1155 i‡(
	`TC_U32_NODE
(
t
->
tcm_h™dÀ
Ë&& 
‹dî
 != TC_U32_NODE(t->tcm_handle)) {

1156 
	`Ârötf
(
°dîr
, "\"order\" contradicts \"handle\"\n");

1159 
t
->
tcm_h™dÀ
 |
‹dî
;

1162 i‡(
htid
)

1163 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_HASH
, &
htid
, 4);

1164 i‡(
£l_ok
)

1165 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_SEL
, &
£l
,

1166 (
£l
.£lË+ sñ.£l.
nkeys
 * (
tc_u32_key
));

1167 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

1169 
	}
}

1171 
	$u32_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
,

1172 
__u32
 
h™dÀ
)

1174 
π©å
 *
tb
[
TCA_U32_MAX
 + 1];

1175 
tc_u32_£l
 *
£l
 = 
NULL
;

1176 
tc_u32_p˙t
 *
pf
 = 
NULL
;

1178 i‡(
›t
 =
NULL
)

1181 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_U32_MAX
, 
›t
);

1183 i‡(
h™dÀ
) {

1184 
	`SPRINT_BUF
(
b1
);

1185 
	`Ârötf
(
f
, "fh %†", 
	`•röt_u32_h™dÀ
(
h™dÀ
, 
b1
));

1187 i‡(
	`TC_U32_NODE
(
h™dÀ
)) {

1188 
	`Ârötf
(
f
, "‹dî %d ", 
	`TC_U32_NODE
(
h™dÀ
));

1191 i‡(
tb
[
TCA_U32_SEL
]) {

1192 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_U32_SEL
]Ë< (*
£l
))

1195 
£l
 = 
	`RTA_DATA
(
tb
[
TCA_U32_SEL
]);

1198 i‡(
tb
[
TCA_U32_DIVISOR
]) {

1199 
	`Ârötf
(
f
, "hàdivis‹ %d ", 
	`πa_gë©å_u32
(
tb
[
TCA_U32_DIVISOR
]));

1200 } i‡(
tb
[
TCA_U32_HASH
]) {

1201 
__u32
 
htid
 = 
	`πa_gë©å_u32
(
tb
[
TCA_U32_HASH
]);

1202 
	`Ârötf
(
f
, "key hà%x bkà%x ", 
	`TC_U32_USERHTID
(
htid
),

1203 
	`TC_U32_HASH
(
htid
));

1205 
	`Ârötf
(
f
, "??? ");

1207 i‡(
tb
[
TCA_U32_CLASSID
]) {

1208 
	`SPRINT_BUF
(
b1
);

1209 
	`Ârötf
(
f
, "%sflowid %s ",

1210 !
£l
 || !(£l->
Êags
 & 
TC_U32_TERMINAL
) ? "*" : "",

1211 
	`•röt_tc_˛assid
(
	`πa_gë©å_u32
(
tb
[
TCA_U32_CLASSID
]), 
b1
));

1212 } i‡(
£l
 && sñ->
Êags
 & 
TC_U32_TERMINAL
) {

1213 
	`Ârötf
(
f
, "terminal flowid ??? ");

1215 i‡(
tb
[
TCA_U32_LINK
]) {

1216 
	`SPRINT_BUF
(
b1
);

1217 
	`Ârötf
(
f
, "link %s ",

1218 
	`•röt_u32_h™dÀ
(
	`πa_gë©å_u32
(
tb
[
TCA_U32_LINK
]), 
b1
));

1221 i‡(
tb
[
TCA_U32_PCNT
]) {

1222 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_U32_PCNT
]Ë< (*
pf
)) {

1223 
	`Ârötf
(
f
, "BrokenÖerf counters \n");

1226 
pf
 = 
	`RTA_DATA
(
tb
[
TCA_U32_PCNT
]);

1229 i‡(
£l
 && 
show_°©s
 && 
NULL
 !
pf
)

1230 
	`Ârötf
(
f
, " (rule hit %llu success %llu)",

1231 (Ë
pf
->
r˙t
,

1232 (Ë
pf
->
rhô
);

1234 i‡(
tb
[
TCA_U32_MARK
]) {

1235 
tc_u32_m¨k
 *
m¨k
 = 
	`RTA_DATA
(
tb
[
TCA_U32_MARK
]);

1236 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_U32_MARK
]Ë< (*
m¨k
)) {

1237 
	`Ârötf
(
f
, "\n Invalid mark (kernel&iproute2 mismatch)\n");

1239 
	`Ârötf
(
f
, "\n mark 0x%04x 0x%04x (success %d)",

1240 
m¨k
->
vÆ
, m¨k->
mask
, m¨k->
suc˚ss
);

1244 i‡(
£l
) {

1245 i‡(
£l
->
nkeys
) {

1246 
i
;

1247 
i
=0; i<
£l
->
nkeys
; i++) {

1248 
	`show_keys
(
f
, 
£l
->
keys
 + 
i
);

1249 i‡(
show_°©s
 && 
NULL
 !
pf
)

1250 
	`Ârötf
(
f
, " (success %llu ) ",

1251 (Ë
pf
->
k˙ts
[
i
]);

1255 i‡(
£l
->
Êags
 & (
TC_U32_VAROFFSET
 | 
TC_U32_OFFSET
)) {

1256 
	`Ârötf
(
f
, "\n offset ");

1257 i‡(
£l
->
Êags
 & 
TC_U32_VAROFFSET
)

1258 
	`Ârötf
(
f
, "%04x>>%dát %d ",

1259 
	`¡ohs
(
£l
->
offmask
),

1260 
£l
->
offshi·
, sñ->
offoff
);

1261 i‡(
£l
->
off
)

1262 
	`Ârötf
(
f
, "∂u†%d ", 
£l
->
off
);

1264 i‡(
£l
->
Êags
 & 
TC_U32_EAT
)

1265 
	`Ârötf
(
f
, "Éat ");

1267 i‡(
£l
->
hmask
) {

1268 
	`Ârötf
(
f
, "\n hash mask %08xát %d ",

1269 ()
	`ht⁄l
(
£l
->
hmask
), sñ->
hoff
);

1273 i‡(
tb
[
TCA_U32_POLICE
]) {

1274 
	`Ârötf
(
f
, "\n");

1275 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_U32_POLICE
]);

1277 i‡(
tb
[
TCA_U32_INDEV
]) {

1278 
π©å
 *
idev
 = 
tb
[
TCA_U32_INDEV
];

1279 
	`Ârötf
(
f
, "\¿ i≈uàdev %s\n", 
	`πa_gë©å_°r
(
idev
));

1281 i‡(
tb
[
TCA_U32_ACT
]) {

1282 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_U32_ACT
]);

1286 
	}
}

1288 
fûãr_utû
 
	gu32_fûãr_utû
 = {

1289 .
id
 = "u32",

1290 .
	g∑r£_f›t
 = 
u32_∑r£_›t
,

1291 .
	g¥öt_f›t
 = 
u32_¥öt_›t
,

	@tc/m_action.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<sy¶og.h
>

20 
	~<f˙é.h
>

21 
	~<sys/sockë.h
>

22 
	~<√töë/ö.h
>

23 
	~<¨∑/öë.h
>

24 
	~<°rög.h
>

25 
	~<dlf˙.h
>

27 
	~"utûs.h
"

28 
	~"tc_comm⁄.h
"

29 
	~"tc_utû.h
"

31 
a˘i⁄_utû
 * 
	ga˘i⁄_li°
;

32 #ifde‡
CONFIG_GACT


33 
	gga˘_ld
 = 0 ;

35 
	gèb_Êush
 = 0;

37 
	$a˘_ußge
()

46 
	`Ârötf
 (
°dîr
, "usage:Åcáctions <ACTSPECOP>*\n");

47 
	`Ârötf
(
°dîr
,

61 
	`exô
(-1);

62 
	}
}

64 
	$¥öt_nﬂ›t
(
a˘i⁄_utû
 *
au
, 
FILE
 *
f
, 
π©å
 *
›t
)

66 i‡(
›t
 && 
	`RTA_PAYLOAD
(opt))

67 
	`Ârötf
(
f
, "[Unknownáction, optlen=%u] ",

68 (Ë
	`RTA_PAYLOAD
(
›t
));

70 
	}
}

72 
	$∑r£_nﬂ›t
(
a˘i⁄_utû
 *
au
, *
¨gc_p
, ***
¨gv_p
, 
code
, 
∆msghdr
 *
n
)

74 
¨gc
 = *
¨gc_p
;

75 **
¨gv
 = *
¨gv_p
;

77 i‡(
¨gc
) {

78 
	`Ârötf
(
°dîr
, "Unknow¿a˘i⁄ \"%s\", hí˚ o±i⁄ \"%s\" i†u≈¨ßbÀ\n", 
au
->
id
, *
¨gv
);

80 
	`Ârötf
(
°dîr
, "Unknow¿a˘i⁄ \"%s\"\n", 
au
->
id
);

83 
	}
}

85 
a˘i⁄_utû
 *
	$gë_a˘i⁄_köd
(*
°r
)

87 *
aBODY
;

88 *
dlh
;

89 
buf
[256];

90 
a˘i⁄_utû
 *
a
;

91 #ifde‡
CONFIG_GACT


92 
looked4ga˘
 = 0;

93 
ª°¨t_s
:

95 
a
 = 
a˘i⁄_li°
;á;á =á->
√xt
) {

96 i‡(
	`°rcmp
(
a
->
id
, 
°r
) == 0)

97  
a
;

100 
	`¢¥ötf
(
buf
, (buf), "%s/m_%s.so", 
	`gë_tc_lib
(), 
°r
);

101 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
 | 
RTLD_GLOBAL
);

102 i‡(
dlh
 =
NULL
) {

103 
dlh
 = 
aBODY
;

104 i‡(
dlh
 =
NULL
) {

105 
dlh
 = 
aBODY
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

106 i‡(
dlh
 =
NULL
)

107 
n€xi°
;

111 
	`¢¥ötf
(
buf
, (buf), "%s_a˘i⁄_utû", 
°r
);

112 
a
 = 
	`dlsym
(
dlh
, 
buf
);

113 i‡(
a
 =
NULL
)

114 
n€xi°
;

116 
ªg
:

117 
a
->
√xt
 = 
a˘i⁄_li°
;

118 
a˘i⁄_li°
 = 
a
;

119  
a
;

121 
n€xi°
:

122 #ifde‡
CONFIG_GACT


123 i‡(!
looked4ga˘
) {

124 
looked4ga˘
 = 1;

125 
	`°r˝y
(
°r
,"gact");

126 
ª°¨t_s
;

129 
a
 = 
	`mÆloc
((*a));

130 i‡(
a
) {

131 
	`mem£t
(
a
, 0, (*a));

132 
	`°∫˝y
(
a
->
id
, "noact", 15);

133 
a
->
∑r£_a›t
 = 
∑r£_nﬂ›t
;

134 
a
->
¥öt_a›t
 = 
¥öt_nﬂ›t
;

135 
ªg
;

137  
a
;

138 
	}
}

141 
	$√w_cmd
(**
¨gv
)

143 i‡((
	`m©ches
(*
¨gv
, "change") == 0) ||

144 (
	`m©ches
(*
¨gv
, "replace") == 0)||

145 (
	`m©ches
(*
¨gv
, "delete") == 0)||

146 (
	`m©ches
(*
¨gv
, "get") == 0)||

147 (
	`m©ches
(*
¨gv
, "add") == 0))

152 
	}
}

155 
	$∑r£_a˘i⁄
(*
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

157 
¨gc
 = *
¨gc_p
;

158 **
¨gv
 = *
¨gv_p
;

159 
π©å
 *
èû
, *
èû2
;

160 
k
[16];

161 
ok
 = 0;

162 
óp
 = 0;

164 
ªt
 = 0;

165 
¥io
 = 0;

167 i‡(
¨gc
 <= 0)

170 
èû
 = 
èû2
 = 
	`NLMSG_TAIL
(
n
);

172 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

174 
¨gc
 > 0) {

176 
	`mem£t
(
k
, 0,  (k));

178 i‡(
	`°rcmp
(*
¨gv
, "action") == 0 ) {

179 
¨gc
--;

180 
¨gv
++;

181 
óp
 = 1;

182 #ifde‡
CONFIG_GACT


183 i‡(!
ga˘_ld
) {

184 
	`gë_a˘i⁄_köd
("gact");

188 } i‡(
	`°rcmp
(*
¨gv
, "flowid") == 0) {

190 } i‡(
	`°rcmp
(*
¨gv
, "classid") == 0) {

192 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

194 } i‡(
	`√w_cmd
(
¨gv
)) {

195 
d⁄e0
;

197 
a˘i⁄_utû
 *
a
 = 
NULL
;

198 
	`°∫˝y
(
k
, *
¨gv
,  (k) - 1);

199 
óp
 = 0;

200 i‡(
¨gc
 > 0 ) {

201 
a
 = 
	`gë_a˘i⁄_köd
(
k
);

203 
d⁄e0
:

204 i‡(
ok
)

207 
d⁄e
;

210 i‡(
NULL
 =
a
) {

211 
bad_vÆ
;

214 
èû
 = 
	`NLMSG_TAIL
(
n
);

215 
	`add©å_l
(
n
, 
MAX_MSG
, ++
¥io
, 
NULL
, 0);

216 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_ACT_KIND
, 
k
, 
	`°æí
(k) + 1);

218 
ªt
 = 
a
->
	`∑r£_a›t
◊,&
¨gc
, &
¨gv
, 
TCA_ACT_OPTIONS
, 
n
);

220 i‡(
ªt
 < 0) {

221 
	`Ârötf
(
°dîr
,"badáctionÖarsing\n");

222 
bad_vÆ
;

224 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

225 
ok
++;

230 i‡(
óp
 > 0) {

231 
	`Ârötf
(
°dîr
,"badá˘i⁄Ém±y %d\n",
óp
);

232 
bad_vÆ
;

235 
èû2
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail2;

237 
d⁄e
:

238 *
¨gc_p
 = 
¨gc
;

239 *
¨gv_p
 = 
¨gv
;

241 
bad_vÆ
:

244 
	`Ârötf
(
°dîr
, "∑r£_a˘i⁄: bad vÆuê(%d:%s)!\n",
¨gc
,*
¨gv
);

246 
	}
}

249 
	$tc_¥öt_⁄e_a˘i⁄
(
FILE
 * 
f
, 
π©å
 *
¨g
)

252 
π©å
 *
tb
[
TCA_ACT_MAX
 + 1];

253 
îr
 = 0;

254 
a˘i⁄_utû
 *
a
 = 
NULL
;

256 i‡(
¨g
 =
NULL
)

259 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_ACT_MAX
, 
¨g
);

261 i‡(
tb
[
TCA_ACT_KIND
] =
NULL
) {

262 
	`Ârötf
(
°dîr
, "NULL Action!\n");

267 
a
 = 
	`gë_a˘i⁄_köd
(
	`RTA_DATA
(
tb
[
TCA_ACT_KIND
]));

268 i‡(
NULL
 =
a
)

269  
îr
;

271 
îr
 = 
a
->
	`¥öt_a›t
◊, 
f
, 
tb
[
TCA_ACT_OPTIONS
]);

273 i‡(0 > 
îr
)

274  
îr
;

276 i‡(
show_°©s
 && 
tb
[
TCA_ACT_STATS
]) {

277 
	`Ârötf
(
f
, "\tAction statistics:\n");

278 
	`¥öt_tc°©s2_©å
(
f
, 
tb
[
TCA_ACT_STATS
], "\t", 
NULL
);

279 
	`Ârötf
(
f
, "\n");

283 
	}
}

286 
	$tc_¥öt_a˘i⁄_Êush
(
FILE
 *
f
, c⁄° 
π©å
 *
¨g
)

289 
π©å
 *
tb
[
TCA_MAX
 + 1];

290 
îr
 = 0;

291 
a˘i⁄_utû
 *
a
 = 
NULL
;

292 
__u32
 *
dñëe_cou¡
 = 0;

294 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_MAX
, 
¨g
);

296 i‡(
tb
[
TCA_KIND
] =
NULL
) {

297 
	`Ârötf
(
°dîr
, "NULL Action!\n");

301 
a
 = 
	`gë_a˘i⁄_köd
(
	`RTA_DATA
(
tb
[
TCA_KIND
]));

302 i‡(
NULL
 =
a
)

303  
îr
;

305 
dñëe_cou¡
 = 
	`RTA_DATA
(
tb
[
TCA_FCNT
]);

306 
	`Ârötf
(
f
," %†(%dÉ¡rõs)\n", 
a
->
id
, *
dñëe_cou¡
);

307 
èb_Êush
 = 0;

309 
	}
}

312 
	$tc_¥öt_a˘i⁄
(
FILE
 *
f
, c⁄° 
π©å
 *
¨g
)

315 
i
;

316 
π©å
 *
tb
[
TCA_ACT_MAX_PRIO
 + 1];

318 i‡(
¨g
 =
NULL
)

321 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_ACT_MAX_PRIO
, 
¨g
);

323 i‡(
èb_Êush
 && 
NULL
 !
tb
[0] && NULL ==Åb[1])

324  
	`tc_¥öt_a˘i⁄_Êush
(
f
, 
tb
[0]);

326 
i
 = 0; i < 
TCA_ACT_MAX_PRIO
; i++) {

327 i‡(
tb
[
i
]) {

328 
	`Ârötf
(
f
, "\n\è˘i⁄ ordî %d: ", 
i
);

329 i‡(0 > 
	`tc_¥öt_⁄e_a˘i⁄
(
f
, 
tb
[
i
])) {

330 
	`Ârötf
(
f
, "ErrorÖrintingáction\n");

337 
	}
}

339 
	$¥öt_a˘i⁄
(c⁄° 
sockaddr_∆
 *
who
,

340 
∆msghdr
 *
n
,

341 *
¨g
)

343 
FILE
 *
Â
 = (FILE*)
¨g
;

344 
tˇmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

345 
Àn
 = 
n
->
∆msg_Àn
;

346 
π©å
 * 
tb
[
TCAA_MAX
+1];

348 
Àn
 -
	`NLMSG_LENGTH
((*
t
));

350 i‡(
Àn
 < 0) {

351 
	`Ârötf
(
°dîr
, "Wr⁄gÜí %d\n", 
Àn
);

355 
	`∑r£_π©å
(
tb
, 
TCAA_MAX
, 
	`TA_RTA
(
t
), 
Àn
);

357 i‡(
NULL
 =
tb
[
TCA_ACT_TAB
]) {

358 i‡(
n
->
∆msg_ty≥
 !
RTM_GETACTION
)

359 
	`Ârötf
(
°dîr
, "print_action: NULL kind\n");

363 i‡(
n
->
∆msg_ty≥
 =
RTM_DELACTION
) {

364 i‡(
n
->
∆msg_Êags
 & 
NLM_F_ROOT
) {

365 
	`Ârötf
(
Â
, "FlushedÅable ");

366 
èb_Êush
 = 1;

368 
	`Ârötf
(
Â
, "deletedáction ");

372 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWACTION
)

373 
	`Ârötf
(
Â
, "Addedáction ");

374 
	`tc_¥öt_a˘i⁄
(
Â
, 
tb
[
TCA_ACT_TAB
]);

377 
	}
}

379 
	$tc_a˘i⁄_gd
(
cmd
, 
Êags
, *
¨gc_p
, ***
¨gv_p
)

381 
k
[16];

382 
a˘i⁄_utû
 *
a
 = 
NULL
;

383 
¨gc
 = *
¨gc_p
;

384 **
¨gv
 = *
¨gv_p
;

385 
¥io
 = 0;

386 
ªt
 = 0;

387 
__u32
 
i
;

388 
sockaddr_∆
 
∆addr
;

389 
π©å
 *
èû
;

390 
π©å
 *
èû2
;

391 
∆msghdr
 *
™s
 = 
NULL
;

394 
∆msghdr
 
n
;

395 
tˇmsg
 
t
;

396 
buf
[
MAX_MSG
];

397 } 
ªq
;

399 
ªq
.
t
.
tˇ_Ámûy
 = 
AF_UNSPEC
;

401 
	`mem£t
(&
ªq
, 0, (req));

403 
	`mem£t
(&
∆addr
, 0, (nladdr));

404 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

406 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tˇmsg
));

407 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

408 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

409 
¨gc
 -=1;

410 
¨gv
 +=1;

413 
èû
 = 
	`NLMSG_TAIL
(&
ªq
.
n
);

414 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, 
TCA_ACT_TAB
, 
NULL
, 0);

416 
¨gc
 > 0) {

417 i‡(
	`°rcmp
(*
¨gv
, "action") == 0 ) {

418 
¨gc
--;

419 
¨gv
++;

421 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

425 
	`°∫˝y
(
k
, *
¨gv
,  (k) - 1);

426 
a
 = 
	`gë_a˘i⁄_köd
(
k
);

427 i‡(
NULL
 =
a
) {

428 
	`Ârötf
(
°dîr
, "Eº‹:Ç⁄Éxi°íàa˘i⁄: %s\n",
k
);

429 
ªt
 = -1;

430 
bad_vÆ
;

432 i‡(
	`°rcmp
(
a
->
id
, 
k
) != 0) {

433 
	`Ârötf
(
°dîr
, "Eº‹:Ç⁄Éxi°íàa˘i⁄: %s\n",
k
);

434 
ªt
 = -1;

435 
bad_vÆ
;

438 
¨gc
 -=1;

439 
¨gv
 +=1;

440 i‡(
¨gc
 <= 0) {

441 
	`Ârötf
(
°dîr
, "Eº‹:Çÿödex s≥cifõdá˘i⁄: %s\n",
k
);

442 
ªt
 = -1;

443 
bad_vÆ
;

446 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

447 
	`NEXT_ARG
();

448 i‡(
	`gë_u32
(&
i
, *
¨gv
, 10)) {

449 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

450 
ªt
 = -1;

451 
bad_vÆ
;

453 
¨gc
 -=1;

454 
¨gv
 +=1;

456 
	`Ârötf
(
°dîr
, "Eº‹:Çÿödex s≥cifõdá˘i⁄: %s\n",
k
);

457 
ªt
 = -1;

458 
bad_vÆ
;

461 
èû2
 = 
	`NLMSG_TAIL
(&
ªq
.
n
);

462 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, ++
¥io
, 
NULL
, 0);

463 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, 
TCA_ACT_KIND
, 
k
, 
	`°æí
(k) + 1);

464 
	`add©å32
(&
ªq
.
n
, 
MAX_MSG
, 
TCA_ACT_INDEX
, 
i
);

465 
èû2
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(&
ªq
.
n
) - (*)Åail2;

469 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(&
ªq
.
n
) - (*)Åail;

471 
ªq
.
n
.
∆msg_£q
 = 
πh
.
dump
 = ++πh.
£q
;

472 i‡(
cmd
 =
RTM_GETACTION
)

473 
™s
 = &
ªq
.
n
;

475 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
™s
, 
MAX_MSG
) < 0) {

476 
	`Ârötf
(
°dîr
, "We haveánÉrrorÅalkingÅoÅhe kernel\n");

480 i‡(
™s
 && 
	`¥öt_a˘i⁄
(
NULL
, &
ªq
.
n
, (*)
°dout
) < 0) {

481 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

485 *
¨gc_p
 = 
¨gc
;

486 *
¨gv_p
 = 
¨gv
;

487 
bad_vÆ
:

488  
ªt
;

489 
	}
}

491 
	$tc_a˘i⁄_modify
(
cmd
, 
Êags
, *
¨gc_p
, ***
¨gv_p
)

493 
¨gc
 = *
¨gc_p
;

494 **
¨gv
 = *
¨gv_p
;

495 
ªt
 = 0;

497 
π©å
 *
èû
;

499 
∆msghdr
 
n
;

500 
tˇmsg
 
t
;

501 
buf
[
MAX_MSG
];

502 } 
ªq
;

504 
ªq
.
t
.
tˇ_Ámûy
 = 
AF_UNSPEC
;

506 
	`mem£t
(&
ªq
, 0, (req));

508 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tˇmsg
));

509 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

510 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

511 
èû
 = 
	`NLMSG_TAIL
(&
ªq
.
n
);

512 
¨gc
 -=1;

513 
¨gv
 +=1;

514 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_ACT_TAB
, &
ªq
.
n
)) {

515 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

518 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(&
ªq
.
n
) - (*)Åail;

520 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0) {

521 
	`Ârötf
(
°dîr
, "We haveánÉrrorÅalkingÅoÅhe kernel\n");

522 
ªt
 = -1;

525 *
¨gc_p
 = 
¨gc
;

526 *
¨gv_p
 = 
¨gv
;

528  
ªt
;

529 
	}
}

531 
	$tc_a˘_li°_‹_Êush
(
¨gc
, **
¨gv
, 
evít
)

533 
ªt
 = 0, 
¥io
 = 0, 
msg_size
 = 0;

534 
k
[16];

535 
π©å
 *
èû
,*
èû2
;

536 
a˘i⁄_utû
 *
a
 = 
NULL
;

538 
∆msghdr
 
n
;

539 
tˇmsg
 
t
;

540 
buf
[
MAX_MSG
];

541 } 
ªq
;

543 
ªq
.
t
.
tˇ_Ámûy
 = 
AF_UNSPEC
;

545 
	`mem£t
(&
ªq
, 0, (req));

547 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tˇmsg
));

549 
èû
 = 
	`NLMSG_TAIL
(&
ªq
.
n
);

550 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, 
TCA_ACT_TAB
, 
NULL
, 0);

551 
èû2
 = 
	`NLMSG_TAIL
(&
ªq
.
n
);

553 
	`°∫˝y
(
k
, *
¨gv
,  (k) - 1);

554 #ifde‡
CONFIG_GACT


555 i‡(!
ga˘_ld
) {

556 
	`gë_a˘i⁄_köd
("gact");

559 
a
 = 
	`gë_a˘i⁄_köd
(
k
);

560 i‡(
NULL
 =
a
) {

561 
	`Ârötf
(
°dîr
,"badá˘i⁄ %s\n",
k
);

562 
bad_vÆ
;

564 i‡(
	`°rcmp
(
a
->
id
, 
k
) != 0) {

565 
	`Ârötf
(
°dîr
,"badá˘i⁄ %s\n",
k
);

566 
bad_vÆ
;

568 
	`°∫˝y
(
k
, *
¨gv
,  (k) - 1);

570 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, ++
¥io
, 
NULL
, 0);

571 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, 
TCA_ACT_KIND
, 
k
, 
	`°æí
(k) + 1);

572 
èû2
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(&
ªq
.
n
) - (*)Åail2;

573 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(&
ªq
.
n
) - (*)Åail;

575 
msg_size
 = 
	`NLMSG_ALIGN
(
ªq
.
n
.
∆msg_Àn
Ë- NLMSG_ALIGN((
∆msghdr
));

577 i‡(
evít
 =
RTM_GETACTION
) {

578 i‡(
	`π∆_dump_ªque°
(&
πh
, 
evít
, (*)&
ªq
.
t
, 
msg_size
) < 0) {

579 
	`≥º‹
("Cannot send dumpÑequest");

582 
ªt
 = 
	`π∆_dump_fûãr
(&
πh
, 
¥öt_a˘i⁄
, 
°dout
);

585 i‡(
evít
 =
RTM_DELACTION
) {

586 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_ALIGN
(req.n.nlmsg_len);

587 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_DELACTION
;

588 
ªq
.
n
.
∆msg_Êags
 |
NLM_F_ROOT
;

589 
ªq
.
n
.
∆msg_Êags
 |
NLM_F_REQUEST
;

590 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0) {

591 
	`Ârötf
(
°dîr
, "We haveánÉrror flushing\n");

597 
bad_vÆ
:

599  
ªt
;

600 
	}
}

602 
	$do_a˘i⁄
(
¨gc
, **
¨gv
)

605 
ªt
 = 0;

607 
¨gc
 > 0) {

609 i‡(
	`m©ches
(*
¨gv
, "add") == 0) {

610 
ªt
 = 
	`tc_a˘i⁄_modify
(
RTM_NEWACTION
, 
NLM_F_EXCL
|
NLM_F_CREATE
, &
¨gc
, &
¨gv
);

611 } i‡(
	`m©ches
(*
¨gv
, "change") == 0 ||

612 
	`m©ches
(*
¨gv
, "replace") == 0) {

613 
ªt
 = 
	`tc_a˘i⁄_modify
(
RTM_NEWACTION
, 
NLM_F_CREATE
|
NLM_F_REPLACE
, &
¨gc
, &
¨gv
);

614 } i‡(
	`m©ches
(*
¨gv
, "delete") == 0) {

615 
¨gc
 -=1;

616 
¨gv
 +=1;

617 
ªt
 = 
	`tc_a˘i⁄_gd
(
RTM_DELACTION
, 0, &
¨gc
, &
¨gv
);

618 } i‡(
	`m©ches
(*
¨gv
, "get") == 0) {

619 
¨gc
 -=1;

620 
¨gv
 +=1;

621 
ªt
 = 
	`tc_a˘i⁄_gd
(
RTM_GETACTION
, 0, &
¨gc
, &
¨gv
);

622 } i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

623 || 
	`m©ches
(*
¨gv
, "lst") == 0) {

624 i‡(
¨gc
 <= 2) {

625 
	`a˘_ußge
();

628  
	`tc_a˘_li°_‹_Êush
(
¨gc
-2, 
¨gv
+2, 
RTM_GETACTION
);

629 } i‡(
	`m©ches
(*
¨gv
, "flush") == 0) {

630 i‡(
¨gc
 <= 2) {

631 
	`a˘_ußge
();

634  
	`tc_a˘_li°_‹_Êush
(
¨gc
-2, 
¨gv
+2, 
RTM_DELACTION
);

635 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

636 
	`a˘_ußge
();

640 
ªt
 = -1;

643 i‡(
ªt
 < 0) {

644 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"t¯a˘i⁄†hñp\".\n", *
¨gv
);

650 
	}
}

	@tc/m_bpf.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<°rög.h
>

17 
	~<°dboﬁ.h
>

18 
	~<libgí.h
>

19 
	~<löux/bpf.h
>

20 
	~<löux/tc_a˘/tc_bpf.h
>

22 
	~"utûs.h
"

23 
	~"π_«mes.h
"

24 
	~"tc_utû.h
"

25 
	~"tc_bpf.h
"

27 c⁄° 
bpf_¥og_ty≥
 
	gbpf_ty≥
 = 
BPF_PROG_TYPE_SCHED_ACT
;

29 
	$ex∂aö
()

31 
	`Ârötf
(
°dîr
, "Usage: ... bpf ... [ index INDEX ]\n");

32 
	`Ârötf
(
°dîr
, "\n");

33 
	`Ârötf
(
°dîr
, "BPF use case:\n");

34 
	`Ârötf
(
°dîr
, " bytecode BPF_BYTECODE\n");

35 
	`Ârötf
(
°dîr
, " bytecode-file FILE\n");

36 
	`Ârötf
(
°dîr
, "\n");

37 
	`Ârötf
(
°dîr
, "eBPF use case:\n");

38 
	`Ârötf
(
°dîr
, " object-file FILE [ section ACT_NAME ] [Éxport UDS_FILE ]");

39 
	`Ârötf
(
°dîr
, " [ verbose ]\n");

40 
	`Ârötf
(
°dîr
, "\n");

41 
	`Ârötf
(
°dîr
, "Where BPF_BYTECODE := \'s,cÅ f k,cÅ f k,cÅ f k,...\'\n");

42 
	`Ârötf
(
°dîr
, "c,t,f,kánd sáre decimals; s denotesÇumber of 4-tuples\n");

43 
	`Ârötf
(
°dîr
, "\n");

44 
	`Ârötf
(
°dîr
, "Where FILEÖointsÅoá file containingÅhe BPF_BYTECODE string,\n");

45 
	`Ârötf
(
°dîr
, "an ELF file containingÉBPF map definitionsánd bytecode.\n");

46 
	`Ârötf
(
°dîr
, "\n");

47 
	`Ârötf
(
°dîr
, "Where ACT_NAMEÑefersÅoÅhe sectionÇame containingÅhe\n");

48 
	`Ârötf
(
°dîr
, "a˘i⁄ (deÁu… \'%s\').\n", 
	`bpf_deÁu…_£˘i⁄
(
bpf_ty≥
));

49 
	`Ârötf
(
°dîr
, "\n");

50 
	`Ârötf
(
°dîr
, "Where UDS_FILEÖointsÅoá unix domain socket file in order\n");

51 
	`Ârötf
(
°dîr
, "to hand off control ofáll createdÉBPF mapsÅoánágent.\n");

52 
	`Ârötf
(
°dîr
, "\n");

53 
	`Ârötf
(
°dîr
, "Where optionally INDEXÖointsÅoánÉxistingáction, or\n");

54 
	`Ârötf
(
°dîr
, "explicitly specifiesánáction index upon creation.\n");

55 
	}
}

57 
	$ußge
()

59 
	`ex∂aö
();

60 
	`exô
(-1);

61 
	}
}

63 
	$∑r£_bpf
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
,

64 
tˇ_id
, 
∆msghdr
 *
n
)

66 **
¨gv
 = *
¨gv_p
, 
bpf_«me
[256];

67 
π©å
 *
èû
;

68 
tc_a˘_bpf
 
∑rm
 = { 0 };

69 
sock_fûãr
 
bpf_›s
[
BPF_MAXINSNS
];

70 
boﬁ
 
ebpf_fûl
 = 
Ál£
, 
bpf_fûl
 = false;

71 
boﬁ
 
ebpf
 = 
Ál£
, 
£í_run
 = false;

72 c⁄° *
bpf_uds_«me
 = 
NULL
;

73 c⁄° *
bpf_£c_«me
 = 
NULL
;

74 *
bpf_obj
 = 
NULL
;

75 
¨gc
 = *
¨gc_p
, 
ªt
 = 0;

76 
__u16
 
bpf_Àn
 = 0;

77 
__u32
 
bpf_fd
 = 0;

79 i‡(
	`m©ches
(*
¨gv
, "bpf") != 0)

82 
	`NEXT_ARG
();

84 
¨gc
 > 0) {

85 i‡(
	`m©ches
(*
¨gv
, "run") == 0) {

86 
boﬁ
 
‰om_fûe
, 
bpf_vîbo£
;

87 
ªt
;

89 
	`NEXT_ARG
();

90 
›t_bpf
:

91 
bpf_£c_«me
 = 
	`bpf_deÁu…_£˘i⁄
(
bpf_ty≥
);

92 
bpf_vîbo£
 = 
Ál£
;

93 
£í_run
 = 
åue
;

95 i‡(
	`°rcmp
(*
¨gv
, "bytecode-file") == 0 ||

96 
	`°rcmp
(*
¨gv
, "bcf") == 0) {

97 
‰om_fûe
 = 
åue
;

98 } i‡(
	`°rcmp
(*
¨gv
, "bytecode") == 0 ||

99 
	`°rcmp
(*
¨gv
, "bc") == 0) {

100 
‰om_fûe
 = 
Ál£
;

101 } i‡(
	`°rcmp
(*
¨gv
, "object-file") == 0 ||

102 
	`°rcmp
(*
¨gv
, "obj") == 0) {

103 
ebpf
 = 
åue
;

105 
	`Ârötf
(
°dîr
, "u√x≥˘ed \"%s\"\n", *
¨gv
);

106 
	`ex∂aö
();

110 
	`NEXT_ARG
();

111 i‡(
ebpf
) {

112 
bpf_uds_«me
 = 
	`gëív
(
BPF_ENV_UDS
);

113 
bpf_obj
 = *
¨gv
;

114 
	`NEXT_ARG
();

116 i‡(
	`°rcmp
(*
¨gv
, "section") == 0 ||

117 
	`°rcmp
(*
¨gv
, "sec") == 0) {

118 
	`NEXT_ARG
();

119 
bpf_£c_«me
 = *
¨gv
;

120 
	`NEXT_ARG
();

122 i‡(!
bpf_uds_«me
 &&

123 (
	`°rcmp
(*
¨gv
, "export") == 0 ||

124 
	`°rcmp
(*
¨gv
, "exp") == 0)) {

125 
	`NEXT_ARG
();

126 
bpf_uds_«me
 = *
¨gv
;

127 
	`NEXT_ARG
();

129 i‡(
	`°rcmp
(*
¨gv
, "verbose") == 0 ||

130 
	`°rcmp
(*
¨gv
, "verb") == 0) {

131 
bpf_vîbo£
 = 
åue
;

132 
	`NEXT_ARG
();

135 
	`PREV_ARG
();

138 
ªt
 = 
ebpf
 ? 
	`bpf_›í_obje˘
(
bpf_obj
, 
bpf_ty≥
, 
bpf_£c_«me
,

139 
bpf_vîbo£
) :

140 
	`bpf_∑r£_›s
(
¨gc
, 
¨gv
, 
bpf_›s
, 
‰om_fûe
);

141 i‡(
ªt
 < 0) {

142 
	`Ârötf
(
°dîr
, "%s\n", 
ebpf
 ?

148 i‡(
ebpf
) {

149 
bpf_obj
 = 
	`ba£«me
(bpf_obj);

151 
	`¢¥ötf
(
bpf_«me
, (bpf_name), "%s:[%s]",

152 
bpf_obj
, 
bpf_£c_«me
);

154 
bpf_fd
 = 
ªt
;

155 
ebpf_fûl
 = 
åue
;

157 
bpf_Àn
 = 
ªt
;

158 
bpf_fûl
 = 
åue
;

160 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

161 
	`ußge
();

162 } i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

165 i‡(!
£í_run
)

166 
›t_bpf
;

169 
¨gc
--;

170 
¨gv
++;

173 
∑rm
.
a˘i⁄
 = 
TC_ACT_PIPE
;

174 i‡(
¨gc
) {

175 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

176 
∑rm
.
a˘i⁄
 = 
TC_ACT_RECLASSIFY
;

177 
¨gc
--;

178 
¨gv
++;

179 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

180 
∑rm
.
a˘i⁄
 = 
TC_ACT_PIPE
;

181 
¨gc
--;

182 
¨gv
++;

183 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

184 
	`m©ches
(*
¨gv
, "shot") == 0) {

185 
∑rm
.
a˘i⁄
 = 
TC_ACT_SHOT
;

186 
¨gc
--;

187 
¨gv
++;

188 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

189 
∑rm
.
a˘i⁄
 = 
TC_ACT_UNSPEC
;

190 
¨gc
--;

191 
¨gv
++;

192 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

193 
∑rm
.
a˘i⁄
 = 
TC_ACT_OK
;

194 
¨gc
--;

195 
¨gv
++;

199 i‡(
¨gc
) {

200 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

201 
	`NEXT_ARG
();

202 i‡(
	`gë_u32
(&
∑rm
.
ödex
, *
¨gv
, 10)) {

203 
	`Ârötf
(
°dîr
, "bpf: Illegal \"index\"\n");

206 
¨gc
--;

207 
¨gv
++;

211 
èû
 = 
	`NLMSG_TAIL
(
n
);

213 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

214 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_ACT_BPF_PARMS
, &
∑rm
, (parm));

216 i‡(
ebpf_fûl
) {

217 
	`add©å32
(
n
, 
MAX_MSG
, 
TCA_ACT_BPF_FD
, 
bpf_fd
);

218 
	`add©å°rz
(
n
, 
MAX_MSG
, 
TCA_ACT_BPF_NAME
, 
bpf_«me
);

219 } i‡(
bpf_fûl
) {

220 
	`add©å16
(
n
, 
MAX_MSG
, 
TCA_ACT_BPF_OPS_LEN
, 
bpf_Àn
);

221 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_ACT_BPF_OPS
, &
bpf_›s
,

222 
bpf_Àn
 * (
sock_fûãr
));

225 
èû
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)tail;

227 *
¨gc_p
 = 
¨gc
;

228 *
¨gv_p
 = 
¨gv
;

230 i‡(
bpf_uds_«me
)

231 
ªt
 = 
	`bpf_£nd_m≠_fds
(
bpf_uds_«me
, 
bpf_obj
);

233  
ªt
;

234 
	}
}

236 
	$¥öt_bpf
(
a˘i⁄_utû
 *
au
, 
FILE
 *
f
, 
π©å
 *
¨g
)

238 
π©å
 *
tb
[
TCA_ACT_BPF_MAX
 + 1];

239 
tc_a˘_bpf
 *
∑rm
;

240 
	`SPRINT_BUF
(
a˘i⁄_buf
);

242 i‡(
¨g
 =
NULL
)

245 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_ACT_BPF_MAX
, 
¨g
);

247 i‡(!
tb
[
TCA_ACT_BPF_PARMS
]) {

248 
	`Ârötf
(
f
, "[NULL bpfÖarameters]");

252 
∑rm
 = 
	`RTA_DATA
(
tb
[
TCA_ACT_BPF_PARMS
]);

254 
	`Ârötf
(
f
, "bpf ");

256 i‡(
tb
[
TCA_ACT_BPF_NAME
])

257 
	`Ârötf
(
f
, "%†", 
	`πa_gë©å_°r
(
tb
[
TCA_ACT_BPF_NAME
]));

258 i‡(
tb
[
TCA_ACT_BPF_FD
])

259 
	`Ârötf
(
f
, "pfd %u ", 
	`πa_gë©å_u32
(
tb
[
TCA_ACT_BPF_FD
]));

261 i‡(
tb
[
TCA_ACT_BPF_OPS
] &&Åb[
TCA_ACT_BPF_OPS_LEN
]) {

262 
	`bpf_¥öt_›s
(
f
, 
tb
[
TCA_ACT_BPF_OPS
],

263 
	`πa_gë©å_u16
(
tb
[
TCA_ACT_BPF_OPS_LEN
]));

264 
	`Ârötf
(
f
, " ");

267 
	`Ârötf
(
f
, "deÁu…-a˘i⁄ %s\n", 
	`a˘i⁄_n2a
(
∑rm
->
a˘i⁄
, 
a˘i⁄_buf
,

268 (
a˘i⁄_buf
)));

269 
	`Ârötf
(
f
, "\tödex %dÑe‡%d böd %d", 
∑rm
->
ödex
,Ö¨m->
ªf˙t
,

270 
∑rm
->
böd˙t
);

272 i‡(
show_°©s
) {

273 i‡(
tb
[
TCA_ACT_BPF_TM
]) {

274 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_ACT_BPF_TM
]);

275 
	`¥öt_tm
(
f
, 
tm
);

279 
	`Ârötf
(
f
, "\n ");

282 
	}
}

284 
a˘i⁄_utû
 
	gbpf_a˘i⁄_utû
 = {

285 .
id
 = "bpf",

286 .
	g∑r£_a›t
 = 
∑r£_bpf
,

287 .
	g¥öt_a›t
 = 
¥öt_bpf
,

	@tc/m_connmark.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<uni°d.h
>

22 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

25 
	~<löux/tc_a˘/tc_c⁄nm¨k.h
>

28 
	$ex∂aö
()

30 
	`Ârötf
(
°dîr
, "Usage: ... connmark [ZONE] [BRANCH] [index <INDEX>]\n");

31 
	`Ârötf
(
°dîr
, "where :\n"

34 
	}
}

37 
	$ußge
()

39 
	`ex∂aö
();

40 
	`exô
(-1);

41 
	}
}

44 
	$∑r£_c⁄nm¨k
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
, 
tˇ_id
,

45 
∆msghdr
 *
n
)

47 
tc_c⁄nm¨k
 
£l
 = {};

48 **
¨gv
 = *
¨gv_p
;

49 
¨gc
 = *
¨gc_p
;

50 
ok
 = 0;

51 
π©å
 *
èû
;

53 
¨gc
 > 0) {

54 i‡(
	`m©ches
(*
¨gv
, "connmark") == 0) {

55 
ok
 = 1;

56 
¨gc
--;

57 
¨gv
++;

58 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

59 
	`ußge
();

66 i‡(!
ok
) {

67 
	`ex∂aö
();

71 i‡(
¨gc
) {

72 i‡(
	`m©ches
(*
¨gv
, "zone") == 0) {

73 
	`NEXT_ARG
();

74 i‡(
	`gë_u16
(&
£l
.
z⁄e
, *
¨gv
, 10)) {

75 
	`Ârötf
(
°dîr
, "simple: Illegal \"index\"\n");

78 
¨gc
--;

79 
¨gv
++;

83 
£l
.
a˘i⁄
 = 
TC_ACT_PIPE
;

84 i‡(
¨gc
) {

85 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

86 
£l
.
a˘i⁄
 = 
TC_ACT_RECLASSIFY
;

87 
¨gc
--;

88 
¨gv
++;

89 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

90 
£l
.
a˘i⁄
 = 
TC_ACT_PIPE
;

91 
¨gc
--;

92 
¨gv
++;

93 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

94 
	`m©ches
(*
¨gv
, "shot") == 0) {

95 
£l
.
a˘i⁄
 = 
TC_ACT_SHOT
;

96 
¨gc
--;

97 
¨gv
++;

98 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

99 
£l
.
a˘i⁄
 = 
TC_ACT_UNSPEC
;

100 
¨gc
--;

101 
¨gv
++;

102 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

103 
£l
.
a˘i⁄
 = 
TC_ACT_OK
;

104 
¨gc
--;

105 
¨gv
++;

109 i‡(
¨gc
) {

110 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

111 
	`NEXT_ARG
();

112 i‡(
	`gë_u32
(&
£l
.
ödex
, *
¨gv
, 10)) {

113 
	`Ârötf
(
°dîr
, "simple: Illegal \"index\"\n");

116 
¨gc
--;

117 
¨gv
++;

121 
èû
 = 
	`NLMSG_TAIL
(
n
);

122 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

123 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_CONNMARK_PARMS
, &
£l
, (sel));

124 
èû
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)tail;

126 *
¨gc_p
 = 
¨gc
;

127 *
¨gv_p
 = 
¨gv
;

129 
	}
}

131 
	$¥öt_c⁄nm¨k
(
a˘i⁄_utû
 *
au
, 
FILE
 *
f
, 
π©å
 *
¨g
)

133 
π©å
 *
tb
[
TCA_CONNMARK_MAX
 + 1];

134 
tc_c⁄nm¨k
 *
ci
;

136 i‡(
¨g
 =
NULL
)

139 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_CONNMARK_MAX
, 
¨g
);

140 i‡(
tb
[
TCA_CONNMARK_PARMS
] =
NULL
) {

141 
	`Ârötf
(
f
, "[NULL connmarkÖarameters]");

145 
ci
 = 
	`RTA_DATA
(
tb
[
TCA_CONNMARK_PARMS
]);

147 
	`Ârötf
(
f
, " c⁄nm¨k z⁄ê%d\n", 
ci
->
z⁄e
);

148 
	`Ârötf
(
f
, "\àödex %dÑe‡%d böd %d", 
ci
->
ödex
,

149 
ci
->
ªf˙t
, ci->
böd˙t
);

151 i‡(
show_°©s
) {

152 i‡(
tb
[
TCA_CONNMARK_TM
]) {

153 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_CONNMARK_TM
]);

154 
	`¥öt_tm
(
f
, 
tm
);

157 
	`Ârötf
(
f
, "\n");

160 
	}
}

162 
a˘i⁄_utû
 
	gc⁄nm¨k_a˘i⁄_utû
 = {

163 .
id
 = "connmark",

164 .
	g∑r£_a›t
 = 
∑r£_c⁄nm¨k
,

165 .
	g¥öt_a›t
 = 
¥öt_c⁄nm¨k
,

	@tc/m_csum.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<uni°d.h
>

17 
	~<löux/tc_a˘/tc_csum.h
>

19 
	~"utûs.h
"

20 
	~"tc_utû.h
"

23 
	$ex∂aö
()

25 
	`Ârötf
(
°dîr
, "Usage: ... csum <UPDATE>\n"

30 
	}
}

33 
	$ußge
()

35 
	`ex∂aö
();

36 
	`exô
(-1);

37 
	}
}

40 
	$∑r£_csum_¨gs
(*
¨gc_p
, ***
¨gv_p
, 
tc_csum
 *
£l
)

42 
¨gc
 = *
¨gc_p
;

43 **
¨gv
 = *
¨gv_p
;

45 i‡(
¨gc
 <= 0)

48 
¨gc
 > 0) {

49 i‡((
	`m©ches
(*
¨gv
, "iph") == 0) ||

50 (
	`m©ches
(*
¨gv
, "ip4h") == 0) ||

51 (
	`m©ches
(*
¨gv
, "ipv4h") == 0))

52 
£l
->
upd©e_Êags
 |
TCA_CSUM_UPDATE_FLAG_IPV4HDR
;

54 i‡(
	`m©ches
(*
¨gv
, "icmp") == 0)

55 
£l
->
upd©e_Êags
 |
TCA_CSUM_UPDATE_FLAG_ICMP
;

57 i‡(
	`m©ches
(*
¨gv
, "igmp") == 0)

58 
£l
->
upd©e_Êags
 |
TCA_CSUM_UPDATE_FLAG_IGMP
;

60 i‡(
	`m©ches
(*
¨gv
, "tcp") == 0)

61 
£l
->
upd©e_Êags
 |
TCA_CSUM_UPDATE_FLAG_TCP
;

63 i‡(
	`m©ches
(*
¨gv
, "udp") == 0)

64 
£l
->
upd©e_Êags
 |
TCA_CSUM_UPDATE_FLAG_UDP
;

66 i‡(
	`m©ches
(*
¨gv
, "udplite") == 0)

67 
£l
->
upd©e_Êags
 |
TCA_CSUM_UPDATE_FLAG_UDPLITE
;

69 i‡((
	`m©ches
(*
¨gv
, "and") == 0) ||

70 (
	`m©ches
(*
¨gv
, "or") == 0) ||

71 (
	`m©ches
(*
¨gv
, "+") == 0))

75 
¨gc
--;

76 
¨gv
++;

79 *
¨gc_p
 = 
¨gc
;

80 *
¨gv_p
 = 
¨gv
;

83 
	}
}

86 
	$∑r£_csum
(
a˘i⁄_utû
 *
a
, *
¨gc_p
,

87 ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

89 
tc_csum
 
£l
;

91 
¨gc
 = *
¨gc_p
;

92 **
¨gv
 = *
¨gv_p
;

93 
ok
 = 0;

94 
π©å
 *
èû
;

96 
	`mem£t
(&
£l
, 0, (sel));

98 
¨gc
 > 0) {

99 i‡(
	`m©ches
(*
¨gv
, "csum") == 0) {

100 
	`NEXT_ARG
();

101 i‡(
	`∑r£_csum_¨gs
(&
¨gc
, &
¨gv
, &
£l
)) {

102 
	`Ârötf
(
°dîr
, "Illegal csum construct (%s)\n",

103 *
¨gv
);

104 
	`ex∂aö
();

107 
ok
++;

109 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

110 
	`ußge
();

117 i‡(!
ok
) {

118 
	`ex∂aö
();

122 i‡(
£l
.
upd©e_Êags
 == 0) {

123 
	`Ârötf
(
°dîr
, "Illegal csum construct,Émpty <UPDATE>Üist\n");

127 i‡(
¨gc
) {

128 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

129 
£l
.
a˘i⁄
 = 
TC_ACT_RECLASSIFY
;

130 
¨gc
--;

131 
¨gv
++;

132 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

133 
£l
.
a˘i⁄
 = 
TC_ACT_PIPE
;

134 
¨gc
--;

135 
¨gv
++;

136 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

137 
	`m©ches
(*
¨gv
, "shot") == 0) {

138 
£l
.
a˘i⁄
 = 
TC_ACT_SHOT
;

139 
¨gc
--;

140 
¨gv
++;

141 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

142 
£l
.
a˘i⁄
 = 
TC_ACT_UNSPEC
;

143 
¨gc
--;

144 
¨gv
++;

145 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

146 
£l
.
a˘i⁄
 = 
TC_ACT_OK
;

147 
¨gc
--;

148 
¨gv
++;

152 i‡(
¨gc
) {

153 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

154 
	`NEXT_ARG
();

155 i‡(
	`gë_u32
(&
£l
.
ödex
, *
¨gv
, 10)) {

156 
	`Ârötf
(
°dîr
, "Illegal \"index\" (%s) <csum>\n",

157 *
¨gv
);

160 
¨gc
--;

161 
¨gv
++;

165 
èû
 = 
	`NLMSG_TAIL
(
n
);

166 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

167 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_CSUM_PARMS
, &
£l
, (sel));

168 
èû
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)tail;

170 *
¨gc_p
 = 
¨gc
;

171 *
¨gv_p
 = 
¨gv
;

174 
	}
}

177 
	$¥öt_csum
(
a˘i⁄_utû
 *
au
, 
FILE
 * 
f
, 
π©å
 *
¨g
)

179 
tc_csum
 *
£l
;

181 
π©å
 *
tb
[
TCA_CSUM_MAX
 + 1];

183 *
uÊag_1
 = "";

184 *
uÊag_2
 = "";

185 *
uÊag_3
 = "";

186 *
uÊag_4
 = "";

187 *
uÊag_5
 = "";

188 *
uÊag_6
 = "";

189 
	`SPRINT_BUF
(
a˘i⁄_buf
);

191 
uÊag_cou¡
 = 0;

193 i‡(
¨g
 =
NULL
)

196 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_CSUM_MAX
, 
¨g
);

198 i‡(
tb
[
TCA_CSUM_PARMS
] =
NULL
) {

199 
	`Ârötf
(
f
, "[NULL csumÖarameters]");

202 
£l
 = 
	`RTA_DATA
(
tb
[
TCA_CSUM_PARMS
]);

204 i‡(
£l
->
upd©e_Êags
 & 
TCA_CSUM_UPDATE_FLAG_IPV4HDR
) {

205 
uÊag_1
 = "iph";

206 
uÊag_cou¡
++;

208 
	#CSUM_UFLAG_BUFFER
(
Êag_buf„r
, 
Êag_vÆue
, 
Êag_°rög
) \

210 i‡(
£l
->
upd©e_Êags
 & 
Êag_vÆue
) { \

211 
Êag_buf„r
 = 
uÊag_cou¡
 > 0 ? \

212 ", " 
Êag_°rög
 : flag_string; \

213 
uÊag_cou¡
++; \

215 } 0)

	)

216 
	`CSUM_UFLAG_BUFFER
(
uÊag_2
, 
TCA_CSUM_UPDATE_FLAG_ICMP
, "icmp");

217 
	`CSUM_UFLAG_BUFFER
(
uÊag_3
, 
TCA_CSUM_UPDATE_FLAG_IGMP
, "igmp");

218 
	`CSUM_UFLAG_BUFFER
(
uÊag_4
, 
TCA_CSUM_UPDATE_FLAG_TCP
, "tcp");

219 
	`CSUM_UFLAG_BUFFER
(
uÊag_5
, 
TCA_CSUM_UPDATE_FLAG_UDP
, "udp");

220 
	`CSUM_UFLAG_BUFFER
(
uÊag_6
, 
TCA_CSUM_UPDATE_FLAG_UDPLITE
, "udplite");

221 i‡(!
uÊag_cou¡
) {

222 
uÊag_1
 = "?empty";

225 
	`Ârötf
(
f
, "csum (%s%s%s%s%s%s)áction %s\n",

226 
uÊag_1
, 
uÊag_2
, 
uÊag_3
,

227 
uÊag_4
, 
uÊag_5
, 
uÊag_6
,

228 
	`a˘i⁄_n2a
(
£l
->
a˘i⁄
, 
a˘i⁄_buf
, (action_buf)));

229 
	`Ârötf
(
f
, "\tödex %dÑe‡%d böd %d", 
£l
->
ödex
, sñ->
ªf˙t
, sñ->
böd˙t
);

231 i‡(
show_°©s
) {

232 i‡(
tb
[
TCA_CSUM_TM
]) {

233 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_CSUM_TM
]);

234 
	`¥öt_tm
(
f
,
tm
);

237 
	`Ârötf
(
f
, "\n");

240 
	}
}

242 
a˘i⁄_utû
 
	gcsum_a˘i⁄_utû
 = {

243 .
id
 = "csum",

244 .
	g∑r£_a›t
 = 
∑r£_csum
,

245 .
	g¥öt_a›t
 = 
¥öt_csum
,

	@tc/m_ematch.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

21 
	~<dlf˙.h
>

22 
	~<°d¨g.h
>

23 
	~<î∫o.h
>

25 
	~"utûs.h
"

26 
	~"tc_utû.h
"

27 
	~"m_em©ch.h
"

29 
	#EMATCH_MAP
 "/ëc/ùrouã2/em©ch_m≠"

	)

31 
em©ch_utû
 *
	gem©ch_li°
;

34 
	gem©ch_¨gc
;

35 **
	gem©ch_¨gv
;

36 *
	gem©ch_îr
 = 
NULL
;

37 
em©ch
 *
	gem©ch_roŸ
;

39 
	gbegö_¨gc
;

40 **
	gbegö_¨gv
;

42 
ölöe
 
	$m≠_w¨nög
(
num
, *
köd
)

44 
	`Ârötf
(
°dîr
,

49 
köd
, 
EMATCH_MAP
, 
num
, kind);

50 
	}
}

52 
	$lookup_m≠
(
__u16
 
num
, *
d°
, 
Àn
, c⁄° *
fûe
)

54 
îr
 = -
EINVAL
;

55 
buf
[512];

56 
FILE
 *
fd
 = 
	`f›í
(
fûe
, "r");

58 i‡(
fd
 =
NULL
)

59  -
î∫o
;

61 
	`fgës
(
buf
, (buf), 
fd
)) {

62 
«mebuf
[512], *
p
 = 
buf
;

63 
id
;

65 *
p
 == ' ' || *p == '\t')

66 
p
++;

67 i‡(*
p
 == '#' || *p == '\n' || *p == 0)

70 i‡(
	`ssˇnf
(
p
, "%d %s", &
id
, 
«mebuf
) != 2) {

71 
	`Ârötf
(
°dîr
, "ematch map %s corruptedát %s\n",

72 
fûe
, 
p
);

73 
out
;

76 i‡(
id
 =
num
) {

77 i‡(
d°
)

78 
	`°∫˝y
(
d°
, 
«mebuf
, 
Àn
 - 1);

79 
îr
 = 0;

80 
out
;

84 
îr
 = -
ENOENT
;

85 
out
:

86 
	`f˛o£
(
fd
);

87  
îr
;

88 
	}
}

90 
	$lookup_m≠_id
(*
köd
, *
d°
, c⁄° *
fûe
)

92 
îr
 = -
EINVAL
;

93 
buf
[512];

94 
FILE
 *
fd
 = 
	`f›í
(
fûe
, "r");

96 i‡(
fd
 =
NULL
)

97  -
î∫o
;

99 
	`fgës
(
buf
, (buf), 
fd
)) {

100 
«mebuf
[512], *
p
 = 
buf
;

101 
id
;

103 *
p
 == ' ' || *p == '\t')

104 
p
++;

105 i‡(*
p
 == '#' || *p == '\n' || *p == 0)

108 i‡(
	`ssˇnf
(
p
, "%d %s", &
id
, 
«mebuf
) != 2) {

109 
	`Ârötf
(
°dîr
, "ematch map %s corruptedát %s\n",

110 
fûe
, 
p
);

111 
out
;

114 i‡(!
	`°rˇ£cmp
(
«mebuf
, 
köd
)) {

115 i‡(
d°
)

116 *
d°
 = 
id
;

117 
îr
 = 0;

118 
out
;

122 
îr
 = -
ENOENT
;

123 *
d°
 = 0;

124 
out
:

125 
	`f˛o£
(
fd
);

126  
îr
;

127 
	}
}

129 
em©ch_utû
 *
	$gë_em©ch_köd
(*
köd
)

131 *
body
;

132 *
dlh
;

133 
buf
[256];

134 
em©ch_utû
 *
e
;

136 
e
 = 
em©ch_li°
;É;É =É->
√xt
) {

137 i‡(
	`°rcmp
(
e
->
köd
, kind) == 0)

138  
e
;

141 
	`¢¥ötf
(
buf
, (buf), "em_%s.so", 
köd
);

142 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

143 i‡(
dlh
 =
NULL
) {

144 
dlh
 = 
body
;

145 i‡(
dlh
 =
NULL
) {

146 
dlh
 = 
body
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

147 i‡(
dlh
 =
NULL
)

148  
NULL
;

152 
	`¢¥ötf
(
buf
, (buf), "%s_em©ch_utû", 
köd
);

153 
e
 = 
	`dlsym
(
dlh
, 
buf
);

154 i‡(
e
 =
NULL
)

155  
NULL
;

157 
e
->
√xt
 = 
em©ch_li°
;

158 
em©ch_li°
 = 
e
;

160  
e
;

161 
	}
}

163 
em©ch_utû
 *
	$gë_em©ch_köd_num
(
__u16
 
köd
)

165 
«me
[32];

167 i‡(
	`lookup_m≠
(
köd
, 
«me
, “ame), 
EMATCH_MAP
) < 0)

168  
NULL
;

170  
	`gë_em©ch_köd
(
«me
);

171 
	}
}

173 
	$∑r£_åì
(
∆msghdr
 *
n
, 
em©ch
 *
åì
)

175 
ödex
 = 1;

176 
em©ch
 *
t
;

178 
t
 = 
åì
;Å;Å =Å->
√xt
) {

179 
π©å
 *
èû
 = 
	`NLMSG_TAIL
(
n
);

180 
tcf_em©ch_hdr
 
hdr
 = {

181 .
Êags
 = 
t
->
ªœti⁄


184 i‡(
t
->
övîãd
)

185 
hdr
.
Êags
 |
TCF_EM_INVERT
;

187 
	`add©å_l
(
n
, 
MAX_MSG
, 
ödex
++, 
NULL
, 0);

189 i‡(
t
->
chûd
) {

190 
__u32
 
r
 = 
t
->
chûd_ªf
;

191 
	`addøw_l
(
n
, 
MAX_MSG
, &
hdr
, (hdr));

192 
	`addøw_l
(
n
, 
MAX_MSG
, &
r
, (r));

194 
num
 = 0, 
îr
;

195 
buf
[64];

196 
em©ch_utû
 *
e
;

198 i‡(
t
->
¨gs
 =
NULL
)

201 
	`°∫˝y
(
buf
, (*Ë
t
->
¨gs
->
d©a
, (buf)-1);

202 
e
 = 
	`gë_em©ch_köd
(
buf
);

203 i‡(
e
 =
NULL
) {

204 
	`Ârötf
(
°dîr
, "UnknownÉmatch \"%s\"\n",

205 
buf
);

209 
îr
 = 
	`lookup_m≠_id
(
buf
, &
num
, 
EMATCH_MAP
);

210 i‡(
îr
 < 0) {

211 i‡(
îr
 =-
ENOENT
)

212 
	`m≠_w¨nög
(
e
->
köd_num
, 
buf
);

213  
îr
;

216 
hdr
.
köd
 = 
num
;

217 i‡(
e
->
	`∑r£_e›t
(
n
, &
hdr
, 
t
->
¨gs
->
√xt
) < 0)

221 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

225 
	}
}

227 
	$Ê©ãn_åì
(
em©ch
 *
hód
, em©ch *
åì
)

229 
i
, 
cou¡
 = 0;

230 
em©ch
 *
t
;

233 
cou¡
++;

235 i‡(
åì
->
chûd
) {

236 
t
 = 
hód
;Å->
√xt
;Å =Å->next);

237 
t
->
√xt
 = 
åì
->
chûd
;

238 
cou¡
 +
	`Ê©ãn_åì
(
hód
, 
åì
->
chûd
);

241 i‡(
åì
->
ªœti⁄
 == 0)

244 
åì
 =Åªe->
√xt
;

247 
i
 = 0, 
t
 = 
hód
;Å;Å =Å->
√xt
, i++)

248 
t
->
ödex
 = 
i
;

250 
t
 = 
hód
;Å;Å =Å->
√xt
)

251 i‡(
t
->
chûd
)

252 
t
->
chûd_ªf
 =Å->
chûd
->
ödex
;

254  
cou¡
;

255 
	}
}

257 
	$em_∑r£_îr‹
(
îr
, 
b°r
 *
¨gs
, b°∏*
ˇrg
,

258 
em©ch_utû
 *
e
, *
fmt
, ...)

260 
va_li°
 
a
;

262 
	`va_°¨t
(
a
, 
fmt
);

263 
	`vÂrötf
(
°dîr
, 
fmt
, 
a
);

264 
	`va_íd
(
a
);

266 i‡(
em©ch_îr
)

267 
	`Ârötf
(
°dîr
, ": %s\n... ", 
em©ch_îr
);

269 
	`Ârötf
(
°dîr
, "\n... ");

271 
em©ch_¨gc
 < 
begö_¨gc
) {

272 i‡(
em©ch_¨gc
 =(
begö_¨gc
 - 1))

273 
	`Ârötf
(
°dîr
, ">>%s<< ", *
begö_¨gv
);

275 
	`Ârötf
(
°dîr
, "%†", *
begö_¨gv
);

276 
begö_¨gv
++;

277 
begö_¨gc
--;

280 
	`Ârötf
(
°dîr
, "...\n");

282 i‡(
¨gs
) {

283 
	`Ârötf
(
°dîr
, "... %s(", 
e
->
köd
);

284 
¨gs
) {

285 
	`Ârötf
(
°dîr
, "%s", 
¨gs
 =
ˇrg
 ? ">>" : "");

286 
	`b°r_¥öt
(
°dîr
, 
¨gs
, 1);

287 
	`Ârötf
(
°dîr
, "%s%s", 
¨gs
 =
ˇrg
 ? "<<" : "",

288 
¨gs
->
√xt
 ? " " : "");

289 
¨gs
 =árgs->
√xt
;

291 
	`Ârötf
(
°dîr
, ")...\n");

295 i‡(
e
 =
NULL
) {

296 
	`Ârötf
(
°dîr
,

305 
e
->
	`¥öt_ußge
(
°dîr
);

307  -
îr
;

308 
	}
}

310 
ölöe
 
	$‰ì_em©ch_îr
()

312 i‡(
em©ch_îr
) {

313 
	`‰ì
(
em©ch_îr
);

314 
em©ch_îr
 = 
NULL
;

316 
	}
}

318 
em©ch_∑r£
();

320 
	$∑r£_em©ch
(*
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

322 
begö_¨gc
 = 
em©ch_¨gc
 = *
¨gc_p
;

323 
begö_¨gv
 = 
em©ch_¨gv
 = *
¨gv_p
;

325 i‡(
	`em©ch_∑r£
()) {

326 
îr
 = 
	`em_∑r£_îr‹
(
EINVAL
, 
NULL
, NULL, NULL,

328 
	`‰ì_em©ch_îr
();

329  
îr
;

332 
	`‰ì_em©ch_îr
();

335 
em©ch_¨gc
++;

336 
em©ch_¨gv
--;

338 i‡(
em©ch_roŸ
) {

339 
π©å
 *
èû
, *
èû_li°
;

341 
tcf_em©ch_åì_hdr
 
hdr
 = {

342 .
nm©ches
 = 
	`Ê©ãn_åì
(
em©ch_roŸ
,Ématch_root),

343 .
¥ogid
 = 
TCF_EM_PROG_TC


346 
èû
 = 
	`NLMSG_TAIL
(
n
);

347 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

348 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_EMATCH_TREE_HDR
, &
hdr
, (hdr));

350 
èû_li°
 = 
	`NLMSG_TAIL
(
n
);

351 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_EMATCH_TREE_LIST
, 
NULL
, 0);

353 i‡(
	`∑r£_åì
(
n
, 
em©ch_roŸ
) < 0)

356 
èû_li°
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail_list;

357 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

360 *
¨gc_p
 = 
em©ch_¨gc
;

361 *
¨gv_p
 = 
em©ch_¨gv
;

364 
	}
}

366 
	$¥öt_em©ch_£q
(
FILE
 *
fd
, 
π©å
 **
tb
, 
°¨t
,

367 
¥efix
)

369 
n
, 
i
 = 
°¨t
;

370 
tcf_em©ch_hdr
 *
hdr
;

371 
dÀn
;

372 *
d©a
;

375 i‡(
tb
[
i
] =
NULL
)

378 
dÀn
 = 
	`RTA_PAYLOAD
(
tb
[
i
]Ë- (*
hdr
);

379 
d©a
 = (*Ë
	`RTA_DATA
(
tb
[
i
]Ë+ (*
hdr
);

381 i‡(
dÀn
 < 0)

384 
hdr
 = 
	`RTA_DATA
(
tb
[
i
]);

386 i‡(
hdr
->
Êags
 & 
TCF_EM_INVERT
)

387 
	`Ârötf
(
fd
, "NOT ");

389 i‡(
hdr
->
köd
 == 0) {

390 
__u32
 
ªf
;

392 i‡(
dÀn
 < (
__u32
))

395 
ªf
 = *(
__u32
 *Ë
d©a
;

396 
	`Ârötf
(
fd
, "(\n");

397 
n
 = 0;Ç <
¥efix
;Ç++)

398 
	`Ârötf
(
fd
, " ");

399 i‡(
	`¥öt_em©ch_£q
(
fd
, 
tb
, 
ªf
 + 1, 
¥efix
 + 1) < 0)

401 
n
 = 0;Ç < 
¥efix
;Ç++)

402 
	`Ârötf
(
fd
, " ");

403 
	`Ârötf
(
fd
, ") ");

406 
em©ch_utû
 *
e
;

408 
e
 = 
	`gë_em©ch_köd_num
(
hdr
->
köd
);

409 i‡(
e
 =
NULL
)

410 
	`Ârötf
(
fd
, "[unknownÉmatch %d]\n",

411 
hdr
->
köd
);

413 
	`Ârötf
(
fd
, "%s(", 
e
->
köd
);

414 i‡(
e
->
	`¥öt_e›t
(
fd
, 
hdr
, 
d©a
, 
dÀn
) < 0)

416 
	`Ârötf
(
fd
, ")\n");

418 i‡(
hdr
->
Êags
 & 
TCF_EM_REL_MASK
)

419 
n
 = 0;Ç < 
¥efix
;Ç++)

420 
	`Ârötf
(
fd
, " ");

423 
hdr
->
Êags
 & 
TCF_EM_REL_MASK
) {

424 
TCF_EM_REL_AND
:

425 
	`Ârötf
(
fd
, "AND ");

428 
TCF_EM_REL_OR
:

429 
	`Ârötf
(
fd
, "OR ");

436 
i
++;

440 
	}
}

442 
	$¥öt_em©ch_li°
(
FILE
 *
fd
, 
tcf_em©ch_åì_hdr
 *
hdr
,

443 
π©å
 *
πa
)

445 
îr
 = -1;

446 
π©å
 **
tb
;

448 
tb
 = 
	`mÆloc
((
hdr
->
nm©ches
 + 1Ë* (
π©å
 *));

449 i‡(
tb
 =
NULL
)

452 i‡(
hdr
->
nm©ches
 > 0) {

453 i‡(
	`∑r£_π©å_√°ed
(
tb
, 
hdr
->
nm©ches
, 
πa
) < 0)

454 
îrout
;

456 
	`Ârötf
(
fd
, "\n ");

457 i‡(
	`¥öt_em©ch_£q
(
fd
, 
tb
, 1, 1) < 0)

458 
îrout
;

461 
îr
 = 0;

462 
îrout
:

463 
	`‰ì
(
tb
);

464  
îr
;

465 
	}
}

467 
	$¥öt_em©ch
(
FILE
 *
fd
, c⁄° 
π©å
 *
πa
)

469 
π©å
 *
tb
[
TCA_EMATCH_TREE_MAX
+1];

470 
tcf_em©ch_åì_hdr
 *
hdr
;

472 i‡(
	`∑r£_π©å_√°ed
(
tb
, 
TCA_EMATCH_TREE_MAX
, 
πa
) < 0)

475 i‡(
tb
[
TCA_EMATCH_TREE_HDR
] =
NULL
) {

476 
	`Ârötf
(
°dîr
, "MissingÉmatchÅree header\n");

480 i‡(
tb
[
TCA_EMATCH_TREE_LIST
] =
NULL
) {

481 
	`Ârötf
(
°dîr
, "MissingÉmatchÅreeÜist\n");

485 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_EMATCH_TREE_HDR
]Ë< (*
hdr
)) {

486 
	`Ârötf
(
°dîr
, "EmatchÅree header size mismatch\n");

490 
hdr
 = 
	`RTA_DATA
(
tb
[
TCA_EMATCH_TREE_HDR
]);

492  
	`¥öt_em©ch_li°
(
fd
, 
hdr
, 
tb
[
TCA_EMATCH_TREE_LIST
]);

493 
	}
}

495 
b°r
 * 
	$b°r_Æloc
(c⁄° *
ãxt
)

497 
b°r
 *
b
 = 
	`ˇŒoc
(1, (*b));

499 i‡(
b
 =
NULL
)

500  
NULL
;

502 
b
->
d©a
 = 
	`°rdup
(
ãxt
);

503 i‡(
b
->
d©a
 =
NULL
) {

504 
	`‰ì
(
b
);

505  
NULL
;

508 
b
->
Àn
 = 
	`°æí
(
ãxt
);

510  
b
;

511 
	}
}

513 
	$b°πoul
(c⁄° 
b°r
 *
b
)

515 *
öv
 = 
NULL
;

516 
l
;

517 
buf
[
b
->
Àn
+1];

519 
	`mem˝y
(
buf
, 
b
->
d©a
, b->
Àn
);

520 
buf
[
b
->
Àn
] = '\0';

522 
l
 = 
	`°πoul
(
buf
, &
öv
, 0);

523 i‡(
l
 =
ULONG_MAX
 || 
öv
 =
buf
)

524  
ULONG_MAX
;

526  
l
;

527 
	}
}

529 
	$b°r_¥öt
(
FILE
 *
fd
, c⁄° 
b°r
 *
b
, 
ascii
)

531 
i
;

532 *
s
 = 
b
->
d©a
;

534 i‡(
ascii
)

535 
i
 = 0; i < 
b
->
Àn
; i++)

536 
	`Ârötf
(
fd
, "%c", 
	`i•röt
(
s
[
i
]) ? s[i] : '.');

538 
i
 = 0; i < 
b
->
Àn
; i++)

539 
	`Ârötf
(
fd
, "%02x", 
s
[
i
]);

540 
	`Ârötf
(
fd
, "\"");

541 
i
 = 0; i < 
b
->
Àn
; i++)

542 
	`Ârötf
(
fd
, "%c", 
	`i•röt
(
s
[
i
]) ? s[i] : '.');

543 
	`Ârötf
(
fd
, "\"");

545 
	}
}

547 
	$¥öt_em©ch_åì
(c⁄° 
em©ch
 *
åì
)

549 c⁄° 
em©ch
 *
t
;

551 
t
 = 
åì
;Å;Å =Å->
√xt
) {

552 i‡(
t
->
övîãd
)

553 
	`¥ötf
("NOT ");

555 i‡(
t
->
chûd
) {

556 
	`¥ötf
("(");

557 
	`¥öt_em©ch_åì
(
t
->
chûd
);

558 
	`¥ötf
(")");

560 
b°r
 *
b
;

561 
b
 = 
t
->
¨gs
; b; b = b->
√xt
)

562 
	`¥ötf
("%s%s", 
b
->
d©a
, b->
√xt
 ? " " : "");

565 i‡(
t
->
ªœti⁄
 =
TCF_EM_REL_AND
)

566 
	`¥ötf
(" AND ");

567 i‡(
t
->
ªœti⁄
 =
TCF_EM_REL_OR
)

568 
	`¥ötf
(" OR ");

570 
	}
}

	@tc/m_ematch.h

1 #i‚de‡
__TC_EMATCH_H_


2 
	#__TC_EMATCH_H_


	)

4 
	~<˘y≥.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<limôs.h
>

9 
	~"utûs.h
"

10 
	~"tc_utû.h
"

12 
	#EMATCHKINDSIZ
 16

	)

14 
	sb°r


16 *
	md©a
;

17 
	mÀn
;

18 
	mquŸed
;

19 
b°r
 *
	m√xt
;

22 
b°r
 * 
b°r_Æloc
(c⁄° *
ãxt
);

24 
ölöe
 
b°r
 * 
	$b°r_√w
(*
d©a
, 
Àn
)

26 
b°r
 *
b
 = 
	`ˇŒoc
(1, (*b));

28 i‡(
b
 =
NULL
)

29  
NULL
;

31 
b
->
d©a
 = data;

32 
b
->
Àn
 =Üen;

34  
b
;

35 
	}
}

37 
ölöe
 
	$b°rcmp
(
b°r
 *
b
, c⁄° *
ãxt
)

39 
Àn
 = 
	`°æí
(
ãxt
);

40 
d
 = 
b
->
Àn
 -Üen;

42 i‡(
d
 == 0)

43  
	`°∫cmp
(
b
->
d©a
, 
ãxt
, 
Àn
);

45  
d
;

46 
	}
}

48 
ölöe
 
b°r
 *
	$b°r_√xt
(
b°r
 *
b
)

50  
b
->
√xt
;

51 
	}
}

53 
b°πoul
(c⁄° 
b°r
 *
b
);

54 
b°r_¥öt
(
FILE
 *
fd
, c⁄° 
b°r
 *
b
, 
ascii
);

57 
	sem©ch


59 
b°r
 *
	m¨gs
;

60 
	mödex
;

61 
	mövîãd
;

62 
	mªœti⁄
;

63 
	mchûd_ªf
;

64 
em©ch
 *
	mchûd
;

65 
em©ch
 *
	m√xt
;

68 
ölöe
 
em©ch
 * 
	$√w_em©ch
(
b°r
 *
¨gs
, 
övîãd
)

70 
em©ch
 *
e
 = 
	`ˇŒoc
(1, (*e));

72 i‡(
e
 =
NULL
)

73  
NULL
;

75 
e
->
¨gs
 =árgs;

76 
e
->
övîãd
 = inverted;

78  
e
;

79 
	}
}

81 
¥öt_em©ch_åì
(c⁄° 
em©ch
 *
åì
);

84 
	sem©ch_utû


86 
	mköd
[
EMATCHKINDSIZ
];

87 
	mköd_num
;

88 (*
	m∑r£_e›t
)(
	m∆msghdr
 *,
	mtcf_em©ch_hdr
 *,

89 
	mb°r
 *);

90 (*
	m¥öt_e›t
)(
	mFILE
 *, 
	mtcf_em©ch_hdr
 *, *, );

91 (*
	m¥öt_ußge
)(
	mFILE
 *);

92 
em©ch_utû
 *
	m√xt
;

95 
ölöe
 
	$∑r£_œyî
(
b°r
 *
b
)

97 i‡(*((*Ë
b
->
d©a
) == 'l')

98  
TCF_LAYER_LINK
;

99 i‡(*((*Ë
b
->
d©a
) == 'n')

100  
TCF_LAYER_NETWORK
;

101 i‡(*((*Ë
b
->
d©a
) == 't')

102  
TCF_LAYER_TRANSPORT
;

104  
INT_MAX
;

105 
	}
}

107 
em_∑r£_îr‹
(
îr
, 
b°r
 *
¨gs
, b°∏*
ˇrg
,

108 
em©ch_utû
 *, *
fmt
, ...);

109 
¥öt_em©ch
(
FILE
 *, c⁄° 
π©å
 *);

110 
∑r£_em©ch
(*, ***, , 
∆msghdr
 *);

	@tc/m_estimator.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

25 
	~"tc_comm⁄.h
"

27 
e°_hñp
();

29 
	$e°_hñp
()

31 
	`Ârötf
(
°dîr
, "Usage: ...Éstimator INTERVAL TIME-CONST\n");

32 
	`Ârötf
(
°dîr
, " INTERVAL is interval between measurements\n");

33 
	`Ârötf
(
°dîr
, " TIME-CONST isáveragingÅime constant\n");

34 
	`Ârötf
(
°dîr
, "Example: ...Ést 1sec 8sec\n");

35 
	}
}

37 
	$∑r£_e°im©‹
(*
p_¨gc
, ***
p_¨gv
, 
tc_e°im©‹
 *
e°
)

39 
¨gc
 = *
p_¨gc
;

40 **
¨gv
 = *
p_¨gv
;

41 
A
, 
time_c⁄°
;

43 
	`NEXT_ARG
();

44 i‡(
e°
->
ewma_log
)

45 
	`du∑rg
("e°im©‹", *
¨gv
);

46 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

47 
	`e°_hñp
();

48 i‡(
	`gë_time
(&
A
, *
¨gv
))

49 
	`öv¨g
("estimator", "invalidÉstimator interval");

50 
	`NEXT_ARG
();

51 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

52 
	`e°_hñp
();

53 i‡(
	`gë_time
(&
time_c⁄°
, *
¨gv
))

54 
	`öv¨g
("estimator", "invalidÉstimatorÅime constant");

55 i‡(
	`tc_£tup_e°im©‹
(
A
, 
time_c⁄°
, 
e°
) < 0) {

56 
	`Ârötf
(
°dîr
, "Error:ÉstimatorÖarametersáre out ofÑange.\n");

59 i‡(
show_øw
)

60 
	`Ârötf
(
°dîr
, "[e°im©‹ i=%uÉ=%u]\n", 
e°
->
öãrvÆ
,É°->
ewma_log
);

61 *
p_¨gc
 = 
¨gc
;

62 *
p_¨gv
 = 
¨gv
;

64 
	}
}

	@tc/m_gact.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

25 
	~<löux/tc_a˘/tc_ga˘.h
>

29 #ifde‡
CONFIG_GACT_PROB


30 c⁄° *
	$¥ob_n2a
(
p
)

32 i‡(
p
 =
PGACT_NONE
)

34 i‡(
p
 =
PGACT_NETRAND
)

36 i‡(
p
 =
PGACT_DETERM
)

39 
	}
}

43 
	$ex∂aö
()

45 #ifde‡
CONFIG_GACT_PROB


46 
	`Ârötf
(
°dîr
, "Usage: ... gact <ACTION> [RAND] [INDEX]\n");

47 
	`Ârötf
(
°dîr
,

55 
	`Ârötf
(
°dîr
, "Usage: ... gact <ACTION> [INDEX]\n");

56 
	`Ârötf
(
°dîr
,

61 
	}
}

65 
	$ußge
()

67 
	`ex∂aö
();

68 
	`exô
(-1);

69 
	}
}

72 
	$gë_a˘
(***
¨gv_p
)

74 **
¨gv
 = *
¨gv_p
;

76 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

77  
TC_ACT_RECLASSIFY
;

78 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 || matches(*argv, "shot") == 0) {

79  
TC_ACT_SHOT
;

80 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

81  
TC_ACT_UNSPEC
;

82 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

83  
TC_ACT_PIPE
;

84 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0 || matches(*argv, "ok") == 0) {

85  
TC_ACT_OK
;

87 
	`Ârötf
(
°dîr
,"badá˘i⁄Åy≥ %s\n",*
¨gv
);

90 
	}
}

93 
	$∑r£_ga˘
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
,

94 
tˇ_id
, 
∆msghdr
 *
n
)

96 
¨gc
 = *
¨gc_p
;

97 **
¨gv
 = *
¨gv_p
;

98 
ok
 = 0;

99 
a˘i⁄
 = 
TC_POLICE_RECLASSIFY
;

100 
tc_ga˘
 
p
;

101 #ifde‡
CONFIG_GACT_PROB


102 
rd
 = 0;

103 
tc_ga˘_p
 
µ
;

105 
π©å
 *
èû
;

107 
	`mem£t
(&
p
, 0,  (p));

108 
p
.
a˘i⁄
 = 
TC_POLICE_RECLASSIFY
;

110 i‡(
¨gc
 < 0)

114 i‡(
	`m©ches
(*
¨gv
, "gact") == 0) {

115 
ok
++;

117 
a˘i⁄
 = 
	`gë_a˘
(&
¨gv
);

118 i‡(
a˘i⁄
 != -10) {

119 
p
.
a˘i⁄
 =áction;

120 
ok
++;

122 
	`ex∂aö
();

123  
a˘i⁄
;

127 i‡(
ok
) {

128 
¨gc
--;

129 
¨gv
++;

132 #ifde‡
CONFIG_GACT_PROB


133 i‡(
ok
 && 
¨gc
 > 0) {

134 i‡(
	`m©ches
(*
¨gv
, "random") == 0) {

135 
rd
 = 1;

136 
	`NEXT_ARG
();

137 i‡(
	`m©ches
(*
¨gv
, "netrand") == 0) {

138 
	`NEXT_ARG
();

139 
µ
.
±y≥
 = 
PGACT_NETRAND
;

140 } i‡(
	`m©ches
(*
¨gv
, "determ") == 0) {

141 
	`NEXT_ARG
();

142 
µ
.
±y≥
 = 
PGACT_DETERM
;

144 
	`Ârötf
(
°dîr
, "Illegal \"randomÅype\"\n");

148 
a˘i⁄
 = 
	`gë_a˘
(&
¨gv
);

149 i‡(
a˘i⁄
 != -10) {

150 
µ
.
∑˘i⁄
 = 
a˘i⁄
;

152 
	`ex∂aö
();

155 
¨gc
--;

156 
¨gv
++;

157 i‡(
	`gë_u16
(&
µ
.
pvÆ
, *
¨gv
, 10)) {

158 
	`Ârötf
(
°dîr
, "IŒegÆÖrobabûôy vÆ 0x%x\n",
µ
.
pvÆ
);

161 i‡(
µ
.
pvÆ
 > 10000) {

162 
	`Ârötf
(
°dîr
, "IŒegÆÖrobabûôy vÆ 0x%x\n",
µ
.
pvÆ
);

165 
¨gc
--;

166 
¨gv
++;

167 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

168 
	`ußge
();

173 i‡(
¨gc
 > 0) {

174 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

175 
	`NEXT_ARG
();

176 i‡(
	`gë_u32
(&
p
.
ödex
, *
¨gv
, 10)) {

177 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

180 
¨gc
--;

181 
¨gv
++;

182 
ok
++;

183 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

184 
	`ußge
();

188 i‡(!
ok
)

191 
èû
 = 
	`NLMSG_TAIL
(
n
);

192 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

193 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_GACT_PARMS
, &
p
,  (p));

194 #ifde‡
CONFIG_GACT_PROB


195 i‡(
rd
) {

196 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_GACT_PROB
, &
µ
,  (pp));

199 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

201 *
¨gc_p
 = 
¨gc
;

202 *
¨gv_p
 = 
¨gv
;

204 
	}
}

207 
	$¥öt_ga˘
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
)

209 
	`SPRINT_BUF
(
b1
);

210 #ifde‡
CONFIG_GACT_PROB


211 
	`SPRINT_BUF
(
b2
);

212 
tc_ga˘_p
 *
µ
 = 
NULL
;

213 
tc_ga˘_p
 
µ_dummy
;

215 
tc_ga˘
 *
p
 = 
NULL
;

216 
π©å
 *
tb
[
TCA_GACT_MAX
 + 1];

218 i‡(
¨g
 =
NULL
)

221 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_GACT_MAX
, 
¨g
);

223 i‡(
tb
[
TCA_GACT_PARMS
] =
NULL
) {

224 
	`Ârötf
(
f
, "[NULL gactÖarameters]");

227 
p
 = 
	`RTA_DATA
(
tb
[
TCA_GACT_PARMS
]);

229 
	`Ârötf
(
f
, "ga˘á˘i⁄ %s", 
	`a˘i⁄_n2a
(
p
->
a˘i⁄
, 
b1
,  (b1)));

230 #ifde‡
CONFIG_GACT_PROB


231 i‡(
NULL
 !
tb
[
TCA_GACT_PROB
]) {

232 
µ
 = 
	`RTA_DATA
(
tb
[
TCA_GACT_PROB
]);

235 
	`mem£t
(&
µ_dummy
, 0,  (pp_dummy));

236 
µ
 = &
µ_dummy
;

238 
	`Ârötf
(
f
, "\n\àøndomÅy≥ %†%†vÆ %d",
	`¥ob_n2a
(
µ
->
±y≥
), 
	`a˘i⁄_n2a
’p->
∑˘i⁄
, 
b2
,  (b2)),Öp->
pvÆ
);

240 
	`Ârötf
(
f
, "\n\àödex %dÑe‡%d böd %d",
p
->
ödex
,Ö->
ªf˙t
,Ö->
böd˙t
);

241 i‡(
show_°©s
) {

242 i‡(
tb
[
TCA_GACT_TM
]) {

243 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_GACT_TM
]);

244 
	`¥öt_tm
(
f
,
tm
);

247 
	`Ârötf
(
f
, "\n ");

249 
	}
}

251 
a˘i⁄_utû
 
	gga˘_a˘i⁄_utû
 = {

252 .
id
 = "gact",

253 .
	g∑r£_a›t
 = 
∑r£_ga˘
,

254 .
	g¥öt_a›t
 = 
¥öt_ga˘
,

	@tc/m_ipt.c

13 
	~<sy¶og.h
>

14 
	~<sys/sockë.h
>

15 
	~<√töë/ö.h
>

16 
	~<¨∑/öë.h
>

17 
	~<löux/if.h
>

18 
	~<ùèbÀs.h
>

19 
	~<löux/√tfûãr.h
>

20 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

21 
	~"utûs.h
"

22 
	~"tc_utû.h
"

23 
	~<löux/tc_a˘/tc_ùt.h
>

24 
	~<°dio.h
>

25 
	~<dlf˙.h
>

26 
	~<gë›t.h
>

27 
	~<î∫o.h
>

28 
	~<°rög.h
>

29 
	~<√tdb.h
>

30 
	~<°dlib.h
>

31 
	~<˘y≥.h
>

32 
	~<°d¨g.h
>

33 
	~<uni°d.h
>

34 
	~<f˙é.h
>

35 
	~<sys/waô.h
>

37 c⁄° *
	g≤ame
 = "tc-ipt";

38 c⁄° *
	gäame
 = "mangle";

39 c⁄° *
	gpvîsi⁄
 = "0.1";

41 c⁄° *
	gùthooks
[] = {

49 
›ti⁄
 
	g‹igöÆ_›ts
[] = {

54 
ùèbÀs_èrgë
 *
	gt_li°
 = 
NULL
;

55 
›ti⁄
 *
	g›ts
 = 
‹igöÆ_›ts
;

56 
	gglobÆ_›ti⁄_off£t
 = 0;

57 
	#OPTION_OFFSET
 256

	)

59 *
	glib_dú
;

62 
	$ªgi°î_èrgë
(
ùèbÀs_èrgë
 *
me
)

66 
me
->
√xt
 = 
t_li°
;

67 
t_li°
 = 
me
;

69 
	}
}

72 
	$xèbÀs_ªgi°î_èrgë
(
ùèbÀs_èrgë
 *
me
)

74 
me
->
√xt
 = 
t_li°
;

75 
t_li°
 = 
me
;

76 
	}
}

79 
	$exô_åyhñp
(
°©us
)

81 
	`Ârötf
(
°dîr
, "Try `%s -h' or '%s --help' for more information.\n",

82 
≤ame
,Öname);

83 
	`exô
(
°©us
);

84 
	}
}

87 
	$exô_îr‹
(
exôty≥
 
°©us
, *
msg
, ...)

89 
va_li°
 
¨gs
;

91 
	`va_°¨t
(
¨gs
, 
msg
);

92 
	`Ârötf
(
°dîr
, "%†v%s: ", 
≤ame
, 
pvîsi⁄
);

93 
	`vÂrötf
(
°dîr
, 
msg
, 
¨gs
);

94 
	`va_íd
(
¨gs
);

95 
	`Ârötf
(
°dîr
, "\n");

96 i‡(
°©us
 =
PARAMETER_PROBLEM
)

97 
	`exô_åyhñp
(
°©us
);

98 i‡(
°©us
 =
VERSION_PROBLEM
)

99 
	`Ârötf
(
°dîr
,

101 
	`exô
(
°©us
);

102 
	}
}

110 
	$addr_to_dŸãd
(c⁄° 
ö_addr
 *
addΩ
)

112 
buf
[20];

113 c⁄° *
byãp
;

115 
byãp
 = (c⁄° *Ë&(
addΩ
->
s_addr
);

116 
	`•rötf
(
buf
, "%d.%d.%d.%d", 
byãp
[0], bytep[1], bytep[2], bytep[3]);

117  
buf
;

118 
	}
}

120 
	$°rög_to_numbî_Œ
(c⁄° *
s
, 
mö
,

121 
max
,

122 *
ªt
)

124 
numbî
;

125 *
íd
;

128 
î∫o
 = 0;

129 
numbî
 = 
	`°πouŒ
(
s
, &
íd
, 0);

130 i‡(*
íd
 ='\0' &&Énd !
s
) {

132 i‡(
î∫o
 !
ERANGE
 && 
mö
 <
numbî
 && (!
max
 ||Çumber <= max)) {

133 *
ªt
 = 
numbî
;

138 
	}
}

140 
	$°rög_to_numbî_l
(c⁄° *
s
, 
mö
, 
max
,

141 *
ªt
)

143 
ªsu…
;

144 
numbî
;

146 
ªsu…
 = 
	`°rög_to_numbî_Œ
(
s
, 
mö
, 
max
, &
numbî
);

147 *
ªt
 = ()
numbî
;

149  
ªsu…
;

150 
	}
}

152 
	$°rög_to_numbî
(c⁄° *
s
, 
mö
, 
max
,

153 *
ªt
)

155 
ªsu…
;

156 
numbî
;

158 
ªsu…
 = 
	`°rög_to_numbî_l
(
s
, 
mö
, 
max
, &
numbî
);

159 *
ªt
 = ()
numbî
;

161  
ªsu…
;

162 
	}
}

164 
	$‰ì_›ts
(
›ti⁄
 *
loˇl_›ts
)

166 i‡(
loˇl_›ts
 !
‹igöÆ_›ts
) {

167 
	`‰ì
(
loˇl_›ts
);

168 
›ts
 = 
‹igöÆ_›ts
;

169 
globÆ_›ti⁄_off£t
 = 0;

171 
	}
}

173 
›ti⁄
 *

174 
	$mîge_›ti⁄s
(
›ti⁄
 *
ﬁd›ts
, c⁄° ›ti⁄ *
√w›ts
,

175 *
›ti⁄_off£t
)

177 
›ti⁄
 *
mîge
;

178 
num_ﬁd
, 
num_√w
, 
i
;

180 
num_ﬁd
 = 0; 
ﬁd›ts
[num_ﬁd].
«me
;Çum_old++) ;

181 
num_√w
 = 0; 
√w›ts
[num_√w].
«me
;Çum_new++) ;

183 *
›ti⁄_off£t
 = 
globÆ_›ti⁄_off£t
 + 
OPTION_OFFSET
;

185 
mîge
 = 
	`mÆloc
( (
›ti⁄
Ë* (
num_√w
 + 
num_ﬁd
 + 1));

186 
	`mem˝y
(
mîge
, 
ﬁd›ts
, 
num_ﬁd
 *  (
›ti⁄
));

187 
i
 = 0; i < 
num_√w
; i++) {

188 
mîge
[
num_ﬁd
 + 
i
] = 
√w›ts
[i];

189 
mîge
[
num_ﬁd
 + 
i
].
vÆ
 +*
›ti⁄_off£t
;

191 
	`mem£t
(
mîge
 + 
num_ﬁd
 + 
num_√w
, 0,  (
›ti⁄
));

193  
mîge
;

194 
	}
}

197 
	$fw_ˇŒoc
(
size_t
 
cou¡
, size_à
size
)

199 *
p
;

201 i‡((
p
 = (*Ë
	`ˇŒoc
(
cou¡
, 
size
)Ë=
NULL
) {

202 
	`≥º‹
("iptables: calloc failed");

203 
	`exô
(1);

205  
p
;

206 
	}
}

208 
ùèbÀs_èrgë
 *

209 
	$föd_t
(*
«me
)

211 
ùèbÀs_èrgë
 *
m
;

212 
m
 = 
t_li°
; m; m = m->
√xt
) {

213 i‡(
	`°rcmp
(
m
->
«me
,Çame) == 0)

214  
m
;

217  
NULL
;

218 
	}
}

220 
ùèbÀs_èrgë
 *

221 
	$gë_èrgë_«me
(c⁄° *
«me
)

223 *
h™dÀ
;

224 *
îr‹
;

225 *
√w_«me
, *
 ame
;

226 
ùèbÀs_èrgë
 *
m
;

227 
∑th
[
	`°æí
(
lib_dú
Ë+  ("/libùt_.so"Ë+ såÀn(
«me
)];

229 #ifde‡
NO_SHARED_LIBS


230  
NULL
;

233 
√w_«me
 = 
	`mÆloc
(
	`°æí
(
«me
) + 1);

234 
 ame
 = 
	`mÆloc
(
	`°æí
(
«me
) + 1);

235 i‡(
√w_«me
)

236 
	`mem£t
(
√w_«me
, '\0', 
	`°æí
(
«me
) + 1);

238 
	`exô_îr‹
(
PARAMETER_PROBLEM
, "get_target_name");

240 i‡(
 ame
)

241 
	`mem£t
(
 ame
, '\0', 
	`°æí
(
«me
) + 1);

243 
	`exô_îr‹
(
PARAMETER_PROBLEM
, "get_target_name");

245 
	`°r˝y
(
√w_«me
, 
«me
);

246 
	`°r˝y
(
 ame
, 
«me
);

248 i‡(
	`isuµî
(
 ame
[0])) {

249 
i
;

250 
i
 = 0; i < 
	`°æí
(
«me
); i++) {

251 
 ame
[
i
] = 
	`tﬁowî
(lname[i]);

255 i‡(
	`i¶owî
(
√w_«me
[0])) {

256 
i
;

257 
i
 = 0; i < 
	`°æí
(
√w_«me
); i++) {

258 
√w_«me
[
i
] = 
	`touµî
(new_name[i]);

263 
	`•rötf
(
∑th
, "%s/libxt_%s.so", 
lib_dú
, 
√w_«me
);

264 
h™dÀ
 = 
	`dl›í
(
∑th
, 
RTLD_LAZY
);

265 i‡(!
h™dÀ
) {

267 
	`•rötf
(
∑th
, "%s/libùt_%s.so", 
lib_dú
, 
√w_«me
);

268 
h™dÀ
 = 
	`dl›í
(
∑th
, 
RTLD_LAZY
);

270 i‡(!
h™dÀ
) {

271 
	`•rötf
(
∑th
, "%s/libxt_%s.so", 
lib_dú
 , 
 ame
);

272 
h™dÀ
 = 
	`dl›í
(
∑th
, 
RTLD_LAZY
);

275 i‡(!
h™dÀ
) {

276 
	`•rötf
(
∑th
, "%s/libùt_%s.so", 
lib_dú
 , 
 ame
);

277 
h™dÀ
 = 
	`dl›í
(
∑th
, 
RTLD_LAZY
);

280 i‡(!
h™dÀ
) {

281 
	`Âuts
(
	`dÀº‹
(), 
°dîr
);

282 
	`¥ötf
("\n");

283 
	`‰ì
(
√w_«me
);

284 
	`‰ì
(
 ame
);

285  
NULL
;

289 
m
 = 
	`dlsym
(
h™dÀ
, 
√w_«me
);

290 i‡((
îr‹
 = 
	`dÀº‹
()Ë!
NULL
) {

291 
m
 = (
ùèbÀs_èrgë
 *Ë
	`dlsym
(
h™dÀ
, 
 ame
);

292 i‡((
îr‹
 = 
	`dÀº‹
()Ë!
NULL
) {

293 
m
 = 
	`föd_t
(
√w_«me
);

294 i‡(
NULL
 =
m
) {

295 
m
 = 
	`föd_t
(
 ame
);

296 i‡(
NULL
 =
m
) {

297 
	`Âuts
(
îr‹
, 
°dîr
);

298 
	`Ârötf
(
°dîr
, "\n");

299 
	`dl˛o£
(
h™dÀ
);

300 
	`‰ì
(
√w_«me
);

301 
	`‰ì
(
 ame
);

302  
NULL
;

308 
	`‰ì
(
√w_«me
);

309 
	`‰ì
(
 ame
);

310  
m
;

311 
	}
}

314 
ö_addr
 *
	$dŸãd_to_addr
(c⁄° *
dŸãd
)

316 
ö_addr
 
addr
;

317 *
addΩ
;

318 *
p
, *
q
;

319 
⁄ebyã
;

320 
i
;

321 
buf
[20];

324 
	`°∫˝y
(
buf
, 
dŸãd
,  (buf) - 1);

325 
addΩ
 = (*Ë&(
addr
.
s_addr
);

327 
p
 = 
buf
;

328 
i
 = 0; i < 3; i++) {

329 i‡((
q
 = 
	`°rchr
(
p
, '.')Ë=
NULL
)

330  (
ö_addr
 *Ë
NULL
;

332 *
q
 = '\0';

333 i‡(
	`°rög_to_numbî
(
p
, 0, 255, &
⁄ebyã
) == -1)

334  (
ö_addr
 *Ë
NULL
;

336 
addΩ
[
i
] = (Ë
⁄ebyã
;

337 
p
 = 
q
 + 1;

341 i‡(
	`°rög_to_numbî
(
p
, 0, 255, &
⁄ebyã
) == -1)

342  (
ö_addr
 *Ë
NULL
;

344 
addΩ
[3] = (Ë
⁄ebyã
;

346  &
addr
;

347 
	}
}

349 
	$£t_ªvisi⁄
(*
«me
, 
u_öt8_t
 
ªvisi⁄
)

353 
«me
[
IPT_FUNCTION_MAXNAMELEN
 - 2] = '\0';

354 
«me
[
IPT_FUNCTION_MAXNAMELEN
 - 1] = 
ªvisi⁄
;

355 
	}
}

361 
	$buûd_°
(
ùèbÀs_èrgë
 *
èrgë
, 
ùt_íåy_èrgë
 *
t
)

363 
nfˇche
 = 0;

365 i‡(
èrgë
) {

366 
size_t
 
size
;

368 
size
 =

369 
	`IPT_ALIGN
( (
ùt_íåy_èrgë
)Ë+ 
èrgë
->
size
;

371 i‡(
NULL
 =
t
) {

372 
èrgë
->
t
 = 
	`fw_ˇŒoc
(1, 
size
);

373 
èrgë
->
t
->
u
.
èrgë_size
 = 
size
;

375 i‡(
èrgë
->
öô
 !
NULL
)

376 
èrgë
->
	`öô
—¨gë->
t
, &
nfˇche
);

377 
	`£t_ªvisi⁄
(
èrgë
->
t
->
u
.
u£r
.
«me
,Å¨gë->
ªvisi⁄
);

379 
èrgë
->
t
 =Å;

381 
	`°r˝y
(
èrgë
->
t
->
u
.
u£r
.
«me
,Åarget->name);

386 
	}
}

388 
	$∑r£_ùt
(
a˘i⁄_utû
 *
a
,*
¨gc_p
,

389 ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

391 
ùèbÀs_èrgë
 *
m
 = 
NULL
;

392 
ùt_íåy
 
fw
;

393 
π©å
 *
èû
;

394 
c
;

395 
ørgc
 = *
¨gc_p
;

396 **
¨gv
 = *
¨gv_p
;

397 
¨gc
 = 0, 
ürgc
 = 0;

398 
k
[16];

399 
size
 = 0;

400 
iok
 = 0, 
ok
 = 0;

401 
__u32
 
hook
 = 0, 
ödex
 = 0;

403 
lib_dú
 = 
	`gëív
("IPTABLES_LIB_DIR");

404 i‡(!
lib_dú
)

405 
lib_dú
 = 
IPT_LIB_DIR
;

408 
i
;

409 
i
 = 0; i < 
ørgc
; i++) {

410 i‡(
NULL
 =
¨gv
[
i
] || 0 =
	`°rcmp
(argv[i], "action")) {

414 
ürgc
 = 
¨gc
 = 
i
;

417 i‡(
¨gc
 <= 2) {

418 
	`Ârötf
(
°dîr
,"badárgumít†tÿùà%d v†%d \n", 
¨gc
, 
ørgc
);

423 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "j:", 
›ts
, 
NULL
);

424 i‡(
c
 == -1)

426 
c
) {

428 
m
 = 
	`gë_èrgë_«me
(
›èrg
);

429 i‡(
NULL
 !
m
) {

431 i‡(0 > 
	`buûd_°
(
m
, 
NULL
)) {

432 
	`¥ötf
(" %†îr‹ \n", 
m
->
«me
);

435 
›ts
 =

436 
	`mîge_›ti⁄s
(
›ts
, 
m
->
exåa_›ts
,

437 &
m
->
›ti⁄_off£t
);

439 
	`Ârötf
(
°dîr
," faûedÅÿfödÅ¨gë %s\n\n", 
›èrg
);

442 
ok
++;

446 
	`mem£t
(&
fw
, 0,  (fw));

447 i‡(
m
) {

448 
m
->
	`∑r£
(
c
 - m->
›ti⁄_off£t
, 
¨gv
, 0,

449 &
m
->
tÊags
, 
NULL
, &m->
t
);

451 
	`Ârötf
(
°dîr
," faûedÅÿfödÅ¨gë %s\n\n", 
›èrg
);

455 
ok
++;

461 i‡(
ürgc
 > 
›töd
) {

462 i‡(
	`m©ches
(
¨gv
[
›töd
], "index") == 0) {

463 i‡(
	`gë_u32
(&
ödex
, 
¨gv
[
›töd
 + 1], 10)) {

464 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

465 
	`‰ì_›ts
(
›ts
);

468 
iok
++;

470 
›töd
 += 2;

474 i‡(!
ok
 && !
iok
) {

475 
	`Ârötf
(
°dîr
," i± P¨£∏BAD!! (%s)\n", *
¨gv
);

480 i‡(
m
)

481 
m
->
	`föÆ_check
(m->
tÊags
);

484 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

485 i‡(
t
->
tcm_∑ª¡
 !
TC_H_ROOT


486 && 
t
->
tcm_∑ª¡
 =
	`TC_H_MAJ
(
TC_H_INGRESS
)) {

487 
hook
 = 
NF_IP_PRE_ROUTING
;

489 
hook
 = 
NF_IP_POST_ROUTING
;

493 
èû
 = 
	`NLMSG_TAIL
(
n
);

494 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

495 
	`Ârötf
(
°dout
, "èbÀ«me: %†hook: %s\¿", 
äame
, 
ùthooks
[
hook
]);

496 
	`Ârötf
(
°dout
, "\ttarget: ");

498 i‡(
m
)

499 
m
->
	`¥öt
(
NULL
, m->
t
, 0);

500 
	`Ârötf
(
°dout
, " index %d\n", 
ödex
);

502 i‡(
	`°æí
(
äame
) > 16) {

503 
size
 = 16;

504 
k
[15] = 0;

506 
size
 = 1 + 
	`°æí
(
äame
);

508 
	`°∫˝y
(
k
, 
äame
, 
size
);

510 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_TABLE
, 
k
, 
size
);

511 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_HOOK
, &
hook
, 4);

512 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_INDEX
, &
ödex
, 4);

513 i‡(
m
)

514 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_TARG
, 
m
->
t
, m->t->
u
.
èrgë_size
);

515 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

517 
¨gc
 -
›töd
;

518 
¨gv
 +
›töd
;

519 *
¨gc_p
 = 
ørgc
 - 
ürgc
;

520 *
¨gv_p
 = 
¨gv
;

522 
›töd
 = 0;

523 
	`‰ì_›ts
(
›ts
);

525 
m
->
tÊags
=0;

526 
m
->
u£d
=0;

528 i‡(
m
->
t
)

529 
	`‰ì
(
m
->
t
);

534 
	}
}

537 
	$¥öt_ùt
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
)

539 
π©å
 *
tb
[
TCA_IPT_MAX
 + 1];

540 
ùt_íåy_èrgë
 *
t
 = 
NULL
;

542 i‡(
¨g
 =
NULL
)

545 
lib_dú
 = 
	`gëív
("IPTABLES_LIB_DIR");

546 i‡(!
lib_dú
)

547 
lib_dú
 = 
IPT_LIB_DIR
;

549 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_IPT_MAX
, 
¨g
);

551 i‡(
tb
[
TCA_IPT_TABLE
] =
NULL
) {

552 
	`Ârötf
(
f
, "[NULL iptÅableÇame ]ássuming mangle ");

554 
	`Ârötf
(
f
, "tablename: %s ",

555 
	`πa_gë©å_°r
(
tb
[
TCA_IPT_TABLE
]));

558 i‡(
tb
[
TCA_IPT_HOOK
] =
NULL
) {

559 
	`Ârötf
(
f
, "[NULL ipt hookÇame ]\n ");

562 
__u32
 
hook
;

563 
hook
 = 
	`πa_gë©å_u32
(
tb
[
TCA_IPT_HOOK
]);

564 
	`Ârötf
(
f
, " hook: %†\n", 
ùthooks
[
hook
]);

567 i‡(
tb
[
TCA_IPT_TARG
] =
NULL
) {

568 
	`Ârötf
(
f
, "\t[NULL iptÅargetÖarameters ] \n");

571 
ùèbÀs_èrgë
 *
m
 = 
NULL
;

572 
t
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_TARG
]);

573 
m
 = 
	`gë_èrgë_«me
(
t
->
u
.
u£r
.
«me
);

574 i‡(
NULL
 !
m
) {

575 i‡(0 > 
	`buûd_°
(
m
, 
t
)) {

576 
	`Ârötf
(
°dîr
, " %†îr‹ \n", 
m
->
«me
);

580 
›ts
 =

581 
	`mîge_›ti⁄s
(
›ts
, 
m
->
exåa_›ts
,

582 &
m
->
›ti⁄_off£t
);

584 
	`Ârötf
(
°dîr
, " failedÅo findÅarget %s\n\n",

585 
t
->
u
.
u£r
.
«me
);

588 
	`Ârötf
(
f
, "\ttarget ");

589 
m
->
	`¥öt
(
NULL
, m->
t
, 0);

590 i‡(
tb
[
TCA_IPT_INDEX
] =
NULL
) {

591 
	`Ârötf
(
f
, " [NULL iptÅarget index ]\n");

593 
__u32
 
ödex
;

594 
ödex
 = 
	`πa_gë©å_u32
(
tb
[
TCA_IPT_INDEX
]);

595 
	`Ârötf
(
f
, " \n\tödex %d", 
ödex
);

598 i‡(
tb
[
TCA_IPT_CNT
]) {

599 
tc_˙t
 *
c
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_CNT
]);;

600 
	`Ârötf
(
f
, "Ñe‡%d böd %d", 
c
->
ªf˙t
, c->
böd˙t
);

602 i‡(
show_°©s
) {

603 i‡(
tb
[
TCA_IPT_TM
]) {

604 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_TM
]);

605 
	`¥öt_tm
(
f
,
tm
);

608 
	`Ârötf
(
f
, " \n");

611 
	`‰ì_›ts
(
›ts
);

614 
	}
}

616 
a˘i⁄_utû
 
	gùt_a˘i⁄_utû
 = {

617 .
id
 = "ipt",

618 .
	g∑r£_a›t
 = 
∑r£_ùt
,

619 .
	g¥öt_a›t
 = 
¥öt_ùt
,

	@tc/m_mirred.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<uni°d.h
>

18 
	~<sy¶og.h
>

19 
	~<f˙é.h
>

20 
	~<sys/sockë.h
>

21 
	~<√töë/ö.h
>

22 
	~<¨∑/öë.h
>

23 
	~<°rög.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~"tc_comm⁄.h
"

27 
	~<löux/tc_a˘/tc_múªd.h
>

30 
	$ex∂aö
()

32 
	`Ârötf
(
°dîr
, "Usage: mirred <DIRECTION> <ACTION> [index INDEX] <dev DEVICENAME> \n");

33 
	`Ârötf
(
°dîr
, "where: \n");

34 
	`Ârötf
(
°dîr
, "\tDIRECTION := <ingress |Égress>\n");

35 
	`Ârötf
(
°dîr
, "\tACTION := <mirror |Ñedirect>\n");

36 
	`Ârötf
(
°dîr
, "\tINDEX isÅhe specificÖolicy instance id\n");

37 
	`Ârötf
(
°dîr
, "\tDEVICENAME isÅhe devicename \n");

39 
	}
}

42 
	$ußge
()

44 
	`ex∂aö
();

45 
	`exô
(-1);

46 
	}
}

48 c⁄° *
	$múªd_n2a
(
a˘i⁄
)

50 
a˘i⁄
) {

51 
TCA_EGRESS_REDIR
:

53 
TCA_INGRESS_REDIR
:

55 
TCA_EGRESS_MIRROR
:

57 
TCA_INGRESS_MIRROR
:

62 
	}
}

65 
	$∑r£_egªss
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
,

66 
tˇ_id
, 
∆msghdr
 *
n
)

69 
¨gc
 = *
¨gc_p
;

70 **
¨gv
 = *
¨gv_p
;

71 
ok
 = 0, 
iok
 = 0, 
múr‹
=0,
ªdú
=0;

72 
tc_múªd
 
p
;

73 
π©å
 *
èû
;

74 
d
[16];

76 
	`mem£t
(
d
,0,(d)-1);

77 
	`mem£t
(&
p
,0,(
tc_múªd
));

79 
¨gc
 > 0) {

81 i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

83 } i‡(
	`m©ches
(*
¨gv
, "egress") == 0) {

84 
	`NEXT_ARG
();

85 
ok
++;

89 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

90 
	`NEXT_ARG
();

91 i‡(
	`gë_u32
(&
p
.
ödex
, *
¨gv
, 10)) {

92 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

95 
iok
++;

96 i‡(!
ok
) {

97 
¨gc
--;

98 
¨gv
++;

101 } if(!
ok
) {

102 
	`Ârötf
(
°dîr
, "wa†ex≥˘ögÉgªs†(%s)\n", *
¨gv
);

105 } i‡(!
múr‹
 && 
	`m©ches
(*
¨gv
, "mirror") == 0) {

106 
múr‹
=1;

107 i‡(
ªdú
) {

108 
	`Ârötf
(
°dîr
, "Can't have both mirrorándÑedir\n");

111 
p
.
ó˘i⁄
 = 
TCA_EGRESS_MIRROR
;

112 
p
.
a˘i⁄
 = 
TC_ACT_PIPE
;

113 
ok
++;

114 } i‡(!
ªdú
 && 
	`m©ches
(*
¨gv
, "redirect") == 0) {

115 
ªdú
=1;

116 i‡(
múr‹
) {

117 
	`Ârötf
(
°dîr
, "Can't have both mirrorándÑedir\n");

120 
p
.
ó˘i⁄
 = 
TCA_EGRESS_REDIR
;

121 
p
.
a˘i⁄
 = 
TC_ACT_STOLEN
;

122 
ok
++;

123 } i‡((
ªdú
 || 
múr‹
Ë&& 
	`m©ches
(*
¨gv
, "dev") == 0) {

124 
	`NEXT_ARG
();

125 i‡(
	`°æí
(
d
))

126 
	`du∑rg
("dev", *
¨gv
);

128 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

129 
¨gc
--;

130 
¨gv
++;

137 
	`NEXT_ARG
();

140 i‡(!
ok
 && !
iok
) {

146 i‡(
d
[0]) {

147 
idx
;

148 
	`Œ_öô_m≠
(&
πh
);

150 i‡((
idx
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

151 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

155 
p
.
ifödex
 = 
idx
;

159 i‡(
¨gc
 && 
p
.
ó˘i⁄
 =
TCA_EGRESS_MIRROR
) {

161 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

162 
p
.
a˘i⁄
 = 
TC_POLICE_RECLASSIFY
;

163 
	`NEXT_ARG
();

164 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

165 
p
.
a˘i⁄
 = 
TC_POLICE_PIPE
;

166 
	`NEXT_ARG
();

167 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

168 
	`m©ches
(*
¨gv
, "shot") == 0) {

169 
p
.
a˘i⁄
 = 
TC_POLICE_SHOT
;

170 
	`NEXT_ARG
();

171 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

172 
p
.
a˘i⁄
 = 
TC_POLICE_UNSPEC
;

173 
	`NEXT_ARG
();

174 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

175 
p
.
a˘i⁄
 = 
TC_POLICE_OK
;

176 
	`NEXT_ARG
();

181 i‡(
¨gc
) {

182 i‡(
iok
 && 
	`m©ches
(*
¨gv
, "index") == 0) {

183 
	`Ârötf
(
°dîr
, "mirred: Illegal double index\n");

186 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

187 
	`NEXT_ARG
();

188 i‡(
	`gë_u32
(&
p
.
ödex
, *
¨gv
, 10)) {

189 
	`Ârötf
(
°dîr
, "mirred: Illegal \"index\"\n");

192 
¨gc
--;

193 
¨gv
++;

198 
èû
 = 
	`NLMSG_TAIL
(
n
);

199 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

200 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_MIRRED_PARMS
, &
p
,  (p));

201 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

203 *
¨gc_p
 = 
¨gc
;

204 *
¨gv_p
 = 
¨gv
;

206 
	}
}

210 
	$∑r£_múªd
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
,

211 
tˇ_id
, 
∆msghdr
 *
n
)

214 
¨gc
 = *
¨gc_p
;

215 **
¨gv
 = *
¨gv_p
;

217 i‡(
¨gc
 < 0) {

218 
	`Ârötf
(
°dîr
,"múªd badárgumíàcou¡ %d\n", 
¨gc
);

222 i‡(
	`m©ches
(*
¨gv
, "mirred") == 0) {

223 
	`NEXT_ARG
();

225 
	`Ârötf
(
°dîr
,"múªd badárgumíà%s\n", *
¨gv
);

230 i‡(
	`m©ches
(*
¨gv
, "egress") == 0 || matches(*argv, "index") == 0) {

231 
ªt
 = 
	`∑r£_egªss
(
a
, &
¨gc
, &
¨gv
, 
tˇ_id
, 
n
);

232 i‡(
ªt
 == 0) {

233 *
¨gc_p
 = 
¨gc
;

234 *
¨gv_p
 = 
¨gv
;

238 } i‡(
	`m©ches
(*
¨gv
, "ingress") == 0) {

239 
	`Ârötf
(
°dîr
,"mirred ingressÇot supportedátÅhe moment\n");

240 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

241 
	`ußge
();

243 
	`Ârötf
(
°dîr
,"múªd o±i⁄ÇŸ suµ‹ãd %s\n", *
¨gv
);

248 
	}
}

251 
	$¥öt_múªd
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
)

253 
tc_múªd
 *
p
;

254 
π©å
 *
tb
[
TCA_MIRRED_MAX
 + 1];

255 c⁄° *
dev
;

256 
	`SPRINT_BUF
(
b1
);

258 i‡(
¨g
 =
NULL
)

261 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_MIRRED_MAX
, 
¨g
);

263 i‡(
tb
[
TCA_MIRRED_PARMS
] =
NULL
) {

264 
	`Ârötf
(
f
, "[NULL mirredÖarameters]");

267 
p
 = 
	`RTA_DATA
(
tb
[
TCA_MIRRED_PARMS
]);

274 i‡((
dev
 = 
	`Œ_ödex_to_«me
(
p
->
ifödex
)) == 0) {

275 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ %d\n", 
p
->
ifödex
);

279 
	`Ârötf
(
f
, "múªd (%†tÿdevi˚ %sË%s", 
	`múªd_n2a
(
p
->
ó˘i⁄
), 
dev
,
	`a˘i⁄_n2a
’->
a˘i⁄
, 
b1
,  (b1)));

281 
	`Ârötf
(
f
, "\n ");

282 
	`Ârötf
(
f
, "\tödex %dÑe‡%d böd %d",
p
->
ödex
,p->
ªf˙t
,p->
böd˙t
);

284 i‡(
show_°©s
) {

285 i‡(
tb
[
TCA_MIRRED_TM
]) {

286 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_MIRRED_TM
]);

287 
	`¥öt_tm
(
f
,
tm
);

290 
	`Ârötf
(
f
, "\n ");

292 
	}
}

294 
a˘i⁄_utû
 
	gmúªd_a˘i⁄_utû
 = {

295 .
id
 = "mirred",

296 .
	g∑r£_a›t
 = 
∑r£_múªd
,

297 .
	g¥öt_a›t
 = 
¥öt_múªd
,

	@tc/m_nat.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~"utûs.h
"

23 
	~"tc_utû.h
"

24 
	~<löux/tc_a˘/tc_«t.h
>

27 
	$ex∂aö
()

29 
	`Ârötf
(
°dîr
, "Usage: ...Çat NAT\n"

34 
	}
}

37 
	$ußge
()

39 
	`ex∂aö
();

40 
	`exô
(-1);

41 
	}
}

44 
	$∑r£_«t_¨gs
(*
¨gc_p
, ***
¨gv_p
,
tc_«t
 *
£l
)

46 
¨gc
 = *
¨gc_p
;

47 **
¨gv
 = *
¨gv_p
;

48 
öë_¥efix
 
addr
;

50 i‡(
¨gc
 <= 0)

53 i‡(
	`m©ches
(*
¨gv
, "egress") == 0)

54 
£l
->
Êags
 |
TCA_NAT_FLAG_EGRESS
;

55 i‡(
	`m©ches
(*
¨gv
, "ingress") != 0)

56 
bad_vÆ
;

58 
	`NEXT_ARG
();

60 i‡(
	`gë_¥efix_1
(&
addr
, *
¨gv
, 
AF_INET
))

61 
bad_vÆ
;

63 
£l
->
ﬁd_addr
 = 
addr
.
d©a
[0];

64 
£l
->
mask
 = 
	`ht⁄l
(~0u << (32 - 
addr
.
bôÀn
));

66 
	`NEXT_ARG
();

68 i‡(
	`gë_¥efix_1
(&
addr
, *
¨gv
, 
AF_INET
))

69 
bad_vÆ
;

71 
£l
->
√w_addr
 = 
addr
.
d©a
[0];

73 
¨gc
--;

74 
¨gv
++;

76 *
¨gc_p
 = 
¨gc
;

77 *
¨gv_p
 = 
¨gv
;

80 
bad_vÆ
:

82 
	}
}

85 
	$∑r£_«t
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

87 
tc_«t
 
£l
;

89 
¨gc
 = *
¨gc_p
;

90 **
¨gv
 = *
¨gv_p
;

91 
ok
 = 0;

92 
π©å
 *
èû
;

94 
	`mem£t
(&
£l
, 0, (sel));

96 
¨gc
 > 0) {

97 i‡(
	`m©ches
(*
¨gv
, "nat") == 0) {

98 
	`NEXT_ARG
();

99 i‡(
	`∑r£_«t_¨gs
(&
¨gc
, &
¨gv
, &
£l
)) {

100 
	`Ârötf
(
°dîr
, "IllegalÇat construct (%s) \n",

101 *
¨gv
);

102 
	`ex∂aö
();

105 
ok
++;

107 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

108 
	`ußge
();

115 i‡(!
ok
) {

116 
	`ex∂aö
();

120 i‡(
¨gc
) {

121 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

122 
£l
.
a˘i⁄
 = 
TC_ACT_RECLASSIFY
;

123 
¨gc
--;

124 
¨gv
++;

125 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

126 
£l
.
a˘i⁄
 = 
TC_ACT_PIPE
;

127 
¨gc
--;

128 
¨gv
++;

129 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

130 
	`m©ches
(*
¨gv
, "shot") == 0) {

131 
£l
.
a˘i⁄
 = 
TC_ACT_SHOT
;

132 
¨gc
--;

133 
¨gv
++;

134 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

135 
£l
.
a˘i⁄
 = 
TC_ACT_UNSPEC
;

136 
¨gc
--;

137 
¨gv
++;

138 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

139 
£l
.
a˘i⁄
 = 
TC_ACT_OK
;

140 
¨gc
--;

141 
¨gv
++;

145 i‡(
¨gc
) {

146 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

147 
	`NEXT_ARG
();

148 i‡(
	`gë_u32
(&
£l
.
ödex
, *
¨gv
, 10)) {

149 
	`Ârötf
(
°dîr
, "Nat: Illegal \"index\"\n");

152 
¨gc
--;

153 
¨gv
++;

157 
èû
 = 
	`NLMSG_TAIL
(
n
);

158 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

159 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_NAT_PARMS
, &
£l
, (sel));

160 
èû
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)tail;

162 *
¨gc_p
 = 
¨gc
;

163 *
¨gv_p
 = 
¨gv
;

165 
	}
}

168 
	$¥öt_«t
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
)

170 
tc_«t
 *
£l
;

171 
π©å
 *
tb
[
TCA_NAT_MAX
 + 1];

172 
buf1
[256];

173 
buf2
[256];

174 
	`SPRINT_BUF
(
buf3
);

175 
Àn
;

177 i‡(
¨g
 =
NULL
)

180 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_NAT_MAX
, 
¨g
);

182 i‡(
tb
[
TCA_NAT_PARMS
] =
NULL
) {

183 
	`Ârötf
(
f
, "[NULLÇatÖarameters]");

186 
£l
 = 
	`RTA_DATA
(
tb
[
TCA_NAT_PARMS
]);

188 
Àn
 = 
	`ffs
(
£l
->
mask
);

189 
Àn
 =Üen ? 33 -Üen : 0;

191 
	`Ârötf
(
f
, "Ç© %†%s/%d %†%s", 
£l
->
Êags
 & 
TCA_NAT_FLAG_EGRESS
 ?

193 
	`f‹m©_ho°
(
AF_INET
, 4, &
£l
->
ﬁd_addr
, 
buf1
, (buf1)),

194 
Àn
,

195 
	`f‹m©_ho°
(
AF_INET
, 4, &
£l
->
√w_addr
, 
buf2
, (buf2)),

196 
	`a˘i⁄_n2a
(
£l
->
a˘i⁄
, 
buf3
,  (buf3)));

198 i‡(
show_°©s
) {

199 i‡(
tb
[
TCA_NAT_TM
]) {

200 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_NAT_TM
]);

201 
	`¥öt_tm
(
f
,
tm
);

206 
	}
}

208 
a˘i⁄_utû
 
	g«t_a˘i⁄_utû
 = {

209 .
id
 = "nat",

210 .
	g∑r£_a›t
 = 
∑r£_«t
,

211 .
	g¥öt_a›t
 = 
¥öt_«t
,

	@tc/m_pedit.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<uni°d.h
>

21 
	~<sy¶og.h
>

22 
	~<f˙é.h
>

23 
	~<sys/sockë.h
>

24 
	~<√töë/ö.h
>

25 
	~<¨∑/öë.h
>

26 
	~<°rög.h
>

27 
	~<dlf˙.h
>

28 
	~"utûs.h
"

29 
	~"tc_utû.h
"

30 
	~"m_≥dô.h
"

32 
m_≥dô_utû
 *
	g≥dô_li°
;

33 
	g≥dô_debug
;

36 
	$ex∂aö
()

38 
	`Ârötf
(
°dîr
, "Usage: ...Öedit munge <MUNGE>\n");

39 
	`Ârötf
(
°dîr
,

52 
	}
}

55 
	$ußge
()

57 
	`ex∂aö
();

58 
	`exô
(-1);

59 
	}
}

62 
	$≥dô_∑r£_n››t
 (*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

64 
¨gc
 = *
¨gc_p
;

65 **
¨gv
 = *
¨gv_p
;

67 i‡(
¨gc
) {

68 
	`Ârötf
(
°dîr
, "Unknow¿a˘i⁄ hí˚ o±i⁄ \"%s\" i†u≈¨ßbÀ\n", *
¨gv
);

74 
	}
}

76 
m_≥dô_utû
 *
	$gë_≥dô_köd
(c⁄° *
°r
)

78 *
pBODY
;

79 *
dlh
;

80 
buf
[256];

81 
m_≥dô_utû
 *
p
;

83 
p
 = 
≥dô_li°
;Ö;Ö =Ö->
√xt
) {

84 i‡(
	`°rcmp
(
p
->
id
, 
°r
) == 0)

85  
p
;

88 
	`¢¥ötf
(
buf
, (buf), "p_%s.so", 
°r
);

89 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

90 i‡(
dlh
 =
NULL
) {

91 
dlh
 = 
pBODY
;

92 i‡(
dlh
 =
NULL
) {

93 
dlh
 = 
pBODY
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

94 i‡(
dlh
 =
NULL
)

95 
n€xi°
;

99 
	`¢¥ötf
(
buf
, (buf), "p_≥dô_%s", 
°r
);

100 
p
 = 
	`dlsym
(
dlh
, 
buf
);

101 i‡(
p
 =
NULL
)

102 
n€xi°
;

104 
ªg
:

105 
p
->
√xt
 = 
≥dô_li°
;

106 
≥dô_li°
 = 
p
;

107  
p
;

109 
n€xi°
:

110 
p
 = 
	`mÆloc
((*p));

111 i‡(
p
) {

112 
	`mem£t
(
p
, 0, (*p));

113 
	`°∫˝y
(
p
->
id
, 
°r
, (p->id)-1);

114 
p
->
∑r£_≥›t
 = 
≥dô_∑r£_n››t
;

115 
ªg
;

117  
p
;

118 
	}
}

121 
	$∑ck_key
(
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

123 
hwm
 = 
£l
->
nkeys
;

125 i‡(
hwm
 >
MAX_OFFS
)

128 i‡(
tkey
->
off
 % 4) {

129 
	`Ârötf
(
°dîr
, "offsets MUST be in 32 bit boundaries\n");

133 
£l
->
keys
[
hwm
].
vÆ
 = 
tkey
->val;

134 
£l
->
keys
[
hwm
].
mask
 = 
tkey
->mask;

135 
£l
->
keys
[
hwm
].
off
 = 
tkey
->off;

136 
£l
->
keys
[
hwm
].
©
 = 
tkey
->at;

137 
£l
->
keys
[
hwm
].
offmask
 = 
tkey
->offmask;

138 
£l
->
keys
[
hwm
].
shi·
 = 
tkey
->shift;

139 
£l
->
nkeys
++;

141 
	}
}

145 
	$∑ck_key32
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

147 i‡(
tkey
->
off
 > (tkey->off & ~3)) {

148 
	`Ârötf
(
°dîr
,

153 
tkey
->
vÆ
 = 
	`ht⁄l
—key->vÆ & 
ªèö
);

154 
tkey
->
mask
 = 
	`ht⁄l
—key->mask | ~
ªèö
);

156 
tkey
->
off
 &= ~3;

157  
	`∑ck_key
(
£l
,
tkey
);

158 
	}
}

161 
	$∑ck_key16
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

163 
öd
, 
°ride
;

164 
__u32
 
m
[4] = {0xFFFF0000,0xFF0000FF,0x0000FFFF};

166 i‡(
tkey
->
vÆ
 > 0xFFFF ||Åkey->
mask
 > 0xFFFF) {

167 
	`Ârötf
(
°dîr
, "pack_key16 bad value\n");

171 
öd
 = 
tkey
->
off
 & 3;

173 i‡(
öd
 == 3) {

174 
	`Ârötf
(
°dîr
, "∑ck_key16 bad index vÆuê%d\n",
öd
);

178 
°ride
 = 8 * 
öd
;

179 
tkey
->
vÆ
 = 
	`ht⁄s
(tkey->val);

180 
tkey
->
vÆ
 <<
°ride
;

181 
tkey
->
mask
 <<
°ride
;

182 
ªèö
 <<
°ride
;

183 
tkey
->
mask
 = 
ªèö
|
m
[
öd
];

185 
tkey
->
off
 &= ~3;

187 i‡(
≥dô_debug
)

188 
	`¥ötf
("∑ck_key16: FöÆ vÆ %08x mask %08x \n",
tkey
->
vÆ
,tkey->
mask
);

189  
	`∑ck_key
(
£l
,
tkey
);

191 
	}
}

194 
	$∑ck_key8
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

196 
öd
, 
°ride
;

197 
__u32
 
m
[4] = {0xFFFFFF00,0xFFFF00FF,0xFF00FFFF,0x00FFFFFF};

199 i‡(
tkey
->
vÆ
 > 0xFF ||Åkey->
mask
 > 0xFF) {

200 
	`Ârötf
(
°dîr
, "∑ck_key8 bad vÆuê(vÆ %x mask %x\n", 
tkey
->
vÆ
,Åkey->
mask
);

204 
öd
 = 
tkey
->
off
 & 3;

206 
°ride
 = 8 * 
öd
;

207 
tkey
->
vÆ
 <<
°ride
;

208 
tkey
->
mask
 <<
°ride
;

209 
ªèö
 <<
°ride
;

210 
tkey
->
mask
 = 
ªèö
|
m
[
öd
];

212 
tkey
->
off
 &= ~3;

214 i‡(
≥dô_debug
)

215 
	`¥ötf
("∑ck_key8: FöÆ w‹d of‡%d vÆ %08x mask %08x \n",
tkey
->
off
 ,Åkey->
vÆ
,tkey->
mask
);

216  
	`∑ck_key
(
£l
,
tkey
);

217 
	}
}

220 
	$∑r£_vÆ
(*
¨gc_p
, ***
¨gv_p
, 
__u32
 * 
vÆ
, 
ty≥
)

222 
¨gc
 = *
¨gc_p
;

223 **
¨gv
 = *
¨gv_p
;

225 i‡(
¨gc
 <= 0)

228 i‡(
TINT
 =
ty≥
)

229  
	`gë_öãgî
((*Ë
vÆ
, *
¨gv
, 0);

231 i‡(
TU32
 =
ty≥
)

232  
	`gë_u32
(
vÆ
, *
¨gv
, 0);

234 i‡(
TIPV4
 =
ty≥
) {

235 
öë_¥efix
 
addr
;

236 i‡(
	`gë_¥efix_1
(&
addr
, *
¨gv
, 
AF_INET
)) {

239 *
vÆ
=
addr
.
d©a
[0];

242 i‡(
TIPV6
 =
ty≥
) {

248 
	}
}

251 
	$∑r£_cmd
(*
¨gc_p
, ***
¨gv_p
, 
__u32
 
Àn
, 
ty≥
,__u32 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

253 
__u32
 
mask
 = 0, 
vÆ
 = 0;

254 
__u32
 
o
 = 0xFF;

255 
ªs
 = -1;

256 
¨gc
 = *
¨gc_p
;

257 **
¨gv
 = *
¨gv_p
;

259 i‡(
¨gc
 <= 0)

262 i‡(
≥dô_debug
)

263 
	`¥ötf
("∑r£_cmdárg¯%d %†off£à%dÜígth %d\n",
¨gc
,*
¨gv
,
tkey
->
off
,
Àn
);

265 i‡(
Àn
 == 2)

266 
o
 = 0xFFFF;

267 i‡(
Àn
 == 4)

268 
o
 = 0xFFFFFFFF;

270 i‡(
	`m©ches
(*
¨gv
, "invert") == 0) {

271 
ªèö
 = 
vÆ
 = 
mask
 = 
o
;

272 } i‡(
	`m©ches
(*
¨gv
, "set") == 0) {

273 
	`NEXT_ARG
();

274 i‡(
	`∑r£_vÆ
(&
¨gc
, &
¨gv
, &
vÆ
, 
ty≥
))

276 } i‡(
	`m©ches
(*
¨gv
, "preserve") == 0) {

277 
ªèö
 = 
mask
 = 
o
;

279 i‡(
	`m©ches
(*
¨gv
, "clear") != 0)

283 
¨gc
--; 
¨gv
++;

285 i‡(
¨gc
 && 
	`m©ches
(*
¨gv
, "retain") == 0) {

286 
	`NEXT_ARG
();

287 i‡(
	`∑r£_vÆ
(&
¨gc
, &
¨gv
, &
ªèö
, 
TU32
))

289 
¨gc
--; 
¨gv
++;

292 
tkey
->
vÆ
 = val;

294 i‡(
Àn
 == 1) {

295 
tkey
->
mask
 = 0xFF;

296 
ªs
 = 
	`∑ck_key8
(
ªèö
,
£l
,
tkey
);

297 
d⁄e
;

299 i‡(
Àn
 == 2) {

300 
tkey
->
mask
 = mask;

301 
ªs
 = 
	`∑ck_key16
(
ªèö
,
£l
,
tkey
);

302 
d⁄e
;

304 i‡(
Àn
 == 4) {

305 
tkey
->
mask
 = mask;

306 
ªs
 = 
	`∑ck_key32
(
ªèö
,
£l
,
tkey
);

307 
d⁄e
;

311 
d⁄e
:

312 i‡(
≥dô_debug
)

313 
	`¥ötf
("∑r£_cmd d⁄ê¨g¯%d %†off£à%dÜígth %d\n",
¨gc
,*
¨gv
,
tkey
->
off
,
Àn
);

314 *
¨gc_p
 = 
¨gc
;

315 *
¨gv_p
 = 
¨gv
;

316  
ªs
;

318 
	}
}

321 
	$∑r£_off£t
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

323 
off
;

324 
__u32
 
Àn
, 
ªèö
;

325 
¨gc
 = *
¨gc_p
;

326 **
¨gv
 = *
¨gv_p
;

327 
ªs
 = -1;

329 i‡(
¨gc
 <= 0)

332 i‡(
	`gë_öãgî
(&
off
, *
¨gv
, 0))

334 
tkey
->
off
 = off;

336 
¨gc
--;

337 
¨gv
++;

339 i‡(
¨gc
 <= 0)

343 i‡(
	`m©ches
(*
¨gv
, "u32") == 0) {

344 
Àn
 = 4;

345 
ªèö
 = 0xFFFFFFFF;

346 
d⁄e
;

348 i‡(
	`m©ches
(*
¨gv
, "u16") == 0) {

349 
Àn
 = 2;

350 
ªèö
 = 0x0;

351 
d⁄e
;

353 i‡(
	`m©ches
(*
¨gv
, "u8") == 0) {

354 
Àn
 = 1;

355 
ªèö
 = 0x0;

356 
d⁄e
;

361 
d⁄e
:

363 
	`NEXT_ARG
();

366 i‡(
	`m©ches
(*
¨gv
, "at") == 0) {

368 
__u32
 
©v
=0,
offmask
=0x0,
shi·
=0;

370 
	`NEXT_ARG
();

371 i‡(
	`gë_u32
(&
©v
, *
¨gv
, 0))

373 
tkey
->
©
 = 
©v
;

375 
	`NEXT_ARG
();

377 i‡(
	`gë_u32
(&
offmask
, *
¨gv
, 16))

379 
tkey
->
offmask
 = offmask;

381 
	`NEXT_ARG
();

383 i‡(
	`gë_u32
(&
shi·
, *
¨gv
, 0))

385 
tkey
->
shi·
 = shift;

387 
	`NEXT_ARG
();

390 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 
Àn
, 
TU32
,
ªèö
,
£l
,
tkey
);

392 *
¨gc_p
 = 
¨gc
;

393 *
¨gv_p
 = 
¨gv
;

394  
ªs
;

395 
	}
}

398 
	$∑r£_munge
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
)

400 
tc_≥dô_key
 
tkey
;

401 
¨gc
 = *
¨gc_p
;

402 **
¨gv
 = *
¨gv_p
;

403 
ªs
 = -1;

405 i‡(
¨gc
 <= 0)

408 
	`mem£t
(&
tkey
, 0, (tkey));

410 i‡(
	`m©ches
(*
¨gv
, "offset") == 0) {

411 
	`NEXT_ARG
();

412 
ªs
 = 
	`∑r£_off£t
(&
¨gc
, &
¨gv
,
£l
,&
tkey
);

413 
d⁄e
;

415 
k
[16];

416 
m_≥dô_utû
 *
p
 = 
NULL
;

418 
	`°∫˝y
(
k
, *
¨gv
,  (k) - 1);

420 i‡(
¨gc
 > 0 ) {

421 
p
 = 
	`gë_≥dô_köd
(
k
);

422 i‡(
NULL
 =
p
)

423 
bad_vÆ
;

424 
ªs
 = 
p
->
	`∑r£_≥›t
(&
¨gc
, &
¨gv
, 
£l
,&
tkey
);

425 i‡(
ªs
 < 0) {

426 
	`Ârötf
(
°dîr
,"badÖeditÖarsing\n");

427 
bad_vÆ
;

429 
d⁄e
;

433 
bad_vÆ
:

436 
d⁄e
:

438 *
¨gc_p
 = 
¨gc
;

439 *
¨gv_p
 = 
¨gv
;

440  
ªs
;

441 
	}
}

444 
	$∑r£_≥dô
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

447 
tc_≥dô_£l
 
£l
;

448 
tc_≥dô_key
 
keys
[
MAX_OFFS
];

449 } 
£l
;

451 
¨gc
 = *
¨gc_p
;

452 **
¨gv
 = *
¨gv_p
;

453 
ok
 = 0, 
iok
 = 0;

454 
π©å
 *
èû
;

456 
	`mem£t
(&
£l
, 0, (sel));

458 
¨gc
 > 0) {

459 i‡(
≥dô_debug
 > 1)

460 
	`Ârötf
(
°dîr
, "whûê≥dô (%d:%s)\n",
¨gc
, *
¨gv
);

461 i‡(
	`m©ches
(*
¨gv
, "pedit") == 0) {

462 
	`NEXT_ARG
();

463 
ok
++;

465 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

466 
	`ußge
();

467 } i‡(
	`m©ches
(*
¨gv
, "munge") == 0) {

468 i‡(!
ok
) {

469 
	`Ârötf
(
°dîr
, "IŒegÆÖedô c⁄°ru˘ (%sË\n", *
¨gv
);

470 
	`ex∂aö
();

473 
	`NEXT_ARG
();

474 i‡(
	`∑r£_munge
(&
¨gc
, &
¨gv
,&
£l
.sel)) {

475 
	`Ârötf
(
°dîr
, "IŒegÆÖedô c⁄°ru˘ (%sË\n", *
¨gv
);

476 
	`ex∂aö
();

479 
ok
++;

486 i‡(!
ok
) {

487 
	`ex∂aö
();

491 i‡(
¨gc
) {

492 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

493 
£l
.£l.
a˘i⁄
 = 
TC_ACT_RECLASSIFY
;

494 
	`NEXT_ARG
();

495 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

496 
£l
.£l.
a˘i⁄
 = 
TC_ACT_PIPE
;

497 
	`NEXT_ARG
();

498 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

499 
	`m©ches
(*
¨gv
, "shot") == 0) {

500 
£l
.£l.
a˘i⁄
 = 
TC_ACT_SHOT
;

501 
	`NEXT_ARG
();

502 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

503 
£l
.£l.
a˘i⁄
 = 
TC_ACT_UNSPEC
;

504 
	`NEXT_ARG
();

505 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

506 
£l
.£l.
a˘i⁄
 = 
TC_ACT_OK
;

507 
	`NEXT_ARG
();

511 i‡(
¨gc
) {

512 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

513 
	`NEXT_ARG
();

514 i‡(
	`gë_u32
(&
£l
.£l.
ödex
, *
¨gv
, 10)) {

515 
	`Ârötf
(
°dîr
, "Pedit: Illegal \"index\"\n");

518 
¨gc
--;

519 
¨gv
++;

520 
iok
++;

524 
èû
 = 
	`NLMSG_TAIL
(
n
);

525 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

526 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_PEDIT_PARMS
,&
£l
, (£l.£l)+£l.£l.
nkeys
*(
tc_≥dô_key
));

527 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

529 *
¨gc_p
 = 
¨gc
;

530 *
¨gv_p
 = 
¨gv
;

532 
	}
}

535 
	$¥öt_≥dô
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
)

537 
tc_≥dô_£l
 *
£l
;

538 
π©å
 *
tb
[
TCA_PEDIT_MAX
 + 1];

539 
	`SPRINT_BUF
(
b1
);

541 i‡(
¨g
 =
NULL
)

544 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_PEDIT_MAX
, 
¨g
);

546 i‡(
tb
[
TCA_PEDIT_PARMS
] =
NULL
) {

547 
	`Ârötf
(
f
, "[NULLÖeditÖarameters]");

550 
£l
 = 
	`RTA_DATA
(
tb
[
TCA_PEDIT_PARMS
]);

552 
	`Ârötf
(
f
, "Öedôá˘i⁄ %†key†%d\¿", 
	`a˘i⁄_n2a
(
£l
->
a˘i⁄
, 
b1
,  (b1)),£l->
nkeys
);

553 
	`Ârötf
(
f
, "\àödex %dÑe‡%d böd %d", 
£l
->
ödex
,£l->
ªf˙t
, sñ->
böd˙t
);

555 i‡(
show_°©s
) {

556 i‡(
tb
[
TCA_PEDIT_TM
]) {

557 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_PEDIT_TM
]);

558 
	`¥öt_tm
(
f
,
tm
);

561 i‡(
£l
->
nkeys
) {

562 
i
;

563 
tc_≥dô_key
 *
key
 = 
£l
->
keys
;

565 
i
=0; i<
£l
->
nkeys
; i++, 
key
++) {

566 
	`Ârötf
(
f
, "\n\àkey #%d",
i
);

567 
	`Ârötf
(
f
, "át %d: val %08x mask %08x",

568 ()
key
->
off
,

569 ()
	`¡ohl
(
key
->
vÆ
),

570 ()
	`¡ohl
(
key
->
mask
));

573 
	`Ârötf
(
f
, "\≈edô %x key†%d i†nŸ LEGIT", 
£l
->
ödex
,£l->
nkeys
);

577 
	`Ârötf
(
f
, "\n ");

579 
	}
}

582 
	$≥dô_¥öt_x°©s
(
a˘i⁄_utû
 *
au
, 
FILE
 *
f
, 
π©å
 *
x°©s
)

585 
	}
}

587 
a˘i⁄_utû
 
	g≥dô_a˘i⁄_utû
 = {

588 .
id
 = "pedit",

589 .
	g∑r£_a›t
 = 
∑r£_≥dô
,

590 .
	g¥öt_a›t
 = 
¥öt_≥dô
,

	@tc/m_pedit.h

13 #i‚de‡
_ACT_PEDIT_H_


14 
	#_ACT_PEDIT_H_
 1

	)

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<sy¶og.h
>

20 
	~<f˙é.h
>

21 
	~<sys/sockë.h
>

22 
	~<√töë/ö.h
>

23 
	~<¨∑/öë.h
>

24 
	~<°rög.h
>

25 
	~"utûs.h
"

26 
	~"tc_utû.h
"

27 
	~<löux/tc_a˘/tc_≥dô.h
>

29 
	#MAX_OFFS
 128

	)

31 
	#TIPV4
 1

	)

32 
	#TIPV6
 2

	)

33 
	#TINT
 3

	)

34 
	#TU32
 4

	)

36 
	#RU32
 0xFFFFFFFF

	)

37 
	#RU16
 0xFFFF

	)

38 
	#RU8
 0xFF

	)

40 
	#PEDITKINDSIZ
 16

	)

42 
	sm_≥dô_utû


44 
m_≥dô_utû
 *
	m√xt
;

45 
	mid
[
PEDITKINDSIZ
];

46 (*
	m∑r£_≥›t
)(*
	m¨gc_p
, ***
	m¨gv_p
,
tc_≥dô_£l
 *
	m£l
,
tc_≥dô_key
 *
	mtkey
);

50 
∑r£_cmd
(*
¨gc_p
, ***
¨gv_p
, 
__u32
 
Àn
, 
ty≥
,__u32 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

51 
∑ck_key
(
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

52 
∑ck_key32
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

53 
∑ck_key16
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

54 
∑ck_key8
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

55 
∑r£_vÆ
(*
¨gc_p
, ***
¨gv_p
, 
__u32
 * 
vÆ
, 
ty≥
);

56 
∑r£_cmd
(*
¨gc_p
, ***
¨gv_p
, 
__u32
 
Àn
, 
ty≥
,__u32 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

57 
∑r£_off£t
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

58 
∑r£_≥dô
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
);

59 
¥öt_≥dô
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
);

60 
≥dô_¥öt_x°©s
(
a˘i⁄_utû
 *
au
, 
FILE
 *
f
, 
π©å
 *
x°©s
);

	@tc/m_police.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<sy¶og.h
>

20 
	~<f˙é.h
>

21 
	~<sys/sockë.h
>

22 
	~<√töë/ö.h
>

23 
	~<¨∑/öë.h
>

24 
	~<°rög.h
>

26 
	~"utûs.h
"

27 
	~"tc_utû.h
"

29 
a˘i⁄_utû
 
	gpﬁi˚_a˘i⁄_utû
 = {

30 .
id
 = "police",

31 .
	g∑r£_a›t
 = 
a˘_∑r£_pﬁi˚
,

32 .
	g¥öt_a›t
 = 
¥öt_pﬁi˚
,

35 
	$ußge
()

37 
	`Ârötf
(
°dîr
, "Usage: ...ÖoliceÑate BPS burst BYTES[/BYTES] [ mtu BYTES[/BYTES] ]\n");

38 
	`Ârötf
(
°dîr
, " [Öeakrate BPS ] [ávrate BPS ] [ overhead BYTES ]\n");

39 
	`Ârötf
(
°dîr
, " [Üinklayer TYPE ] [ ACTIONTERM ]\n");

41 
	`Ârötf
(
°dîr
, "New Syntax ACTIONTERM := conform-exceed <EXCEEDACT>[/NOTEXCEEDACT] \n");

42 
	`Ârötf
(
°dîr
, "Where: *EXCEEDACT :=Öipe | ok |Ñeclassify | drop | continue \n");

43 
	`Ârötf
(
°dîr
, "Where:Öipe is only valid forÇew syntax \n");

44 
	`exô
(-1);

45 
	}
}

47 
	$ex∂aö1
(*
¨g
)

49 
	`Ârötf
(
°dîr
, "IŒegÆ \"%s\"\n", 
¨g
);

50 
	}
}

52 c⁄° *
	$pﬁi˚_a˘i⁄_n2a
(
a˘i⁄
, *
buf
, 
Àn
)

54 
a˘i⁄
) {

58 
TC_POLICE_OK
:

61 
TC_POLICE_SHOT
:

64 
TC_POLICE_RECLASSIFY
:

66 
TC_POLICE_PIPE
:

69 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
a˘i⁄
);

70  
buf
;

72 
	}
}

74 
	$pﬁi˚_a˘i⁄_a2n
(c⁄° *
¨g
, *
ªsu…
)

76 
ªs
;

78 i‡(
	`m©ches
(
¨g
, "continue") == 0)

79 
ªs
 = -1;

80 i‡(
	`m©ches
(
¨g
, "drop") == 0)

81 
ªs
 = 
TC_POLICE_SHOT
;

82 i‡(
	`m©ches
(
¨g
, "shot") == 0)

83 
ªs
 = 
TC_POLICE_SHOT
;

84 i‡(
	`m©ches
(
¨g
, "pass") == 0)

85 
ªs
 = 
TC_POLICE_OK
;

86 i‡(
	`°rcmp
(
¨g
, "ok") == 0)

87 
ªs
 = 
TC_POLICE_OK
;

88 i‡(
	`m©ches
(
¨g
, "reclassify") == 0)

89 
ªs
 = 
TC_POLICE_RECLASSIFY
;

90 i‡(
	`m©ches
(
¨g
, "pipe") == 0)

91 
ªs
 = 
TC_POLICE_PIPE
;

93 
dummy
;

94 i‡(
	`ssˇnf
(
¨g
, "%d%c", &
ªs
, &
dummy
) != 1)

97 *
ªsu…
 = 
ªs
;

99 
	}
}

102 
	$gë_pﬁi˚_ªsu…
(*
a˘i⁄
, *
ªsu…
, *
¨g
)

104 *
p
 = 
	`°rchr
(
¨g
, '/');

106 i‡(
p
)

107 *
p
 = 0;

109 i‡(
	`pﬁi˚_a˘i⁄_a2n
(
¨g
, 
a˘i⁄
)) {

110 i‡(
p
)

111 *
p
 = '/';

115 i‡(
p
) {

116 *
p
 = '/';

117 i‡(
	`pﬁi˚_a˘i⁄_a2n
(
p
+1, 
ªsu…
))

121 
	}
}

124 
	$a˘_∑r£_pﬁi˚
(
a˘i⁄_utû
 *
a
,*
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

126 
¨gc
 = *
¨gc_p
;

127 **
¨gv
 = *
¨gv_p
;

128 
ªs
 = -1;

129 
ok
=0;

130 
tc_pﬁi˚
 
p
;

131 
__u32
 
πab
[256];

132 
__u32
 
±ab
[256];

133 
__u32
 
avøã
 = 0;

134 
¥esu…
 = 0;

135 
buf„r
=0, 
mtu
=0, 
mpu
=0;

136 
ovîhód
=0;

137 
lökœyî
 = 
LINKLAYER_ETHERNET
;

138 
R˚Œ_log
=-1, 
P˚Œ_log
 = -1;

139 
π©å
 *
èû
;

141 
	`mem£t
(&
p
, 0, (p));

142 
p
.
a˘i⁄
 = 
TC_POLICE_RECLASSIFY
;

144 i‡(
a
)

145 
	`NEXT_ARG
();

147 i‡(
¨gc
 <= 0)

150 
¨gc
 > 0) {

152 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

153 
	`NEXT_ARG
();

154 i‡(
	`gë_u32
(&
p
.
ödex
, *
¨gv
, 10)) {

155 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

158 } i‡(
	`m©ches
(*
¨gv
, "burst") == 0 ||

159 
	`°rcmp
(*
¨gv
, "buffer") == 0 ||

160 
	`°rcmp
(*
¨gv
, "maxburst") == 0) {

161 
	`NEXT_ARG
();

162 i‡(
buf„r
) {

163 
	`Ârötf
(
°dîr
, "Double \"buffer/burst\" spec\n");

166 i‡(
	`gë_size_™d_˚Œ
(&
buf„r
, &
R˚Œ_log
, *
¨gv
) < 0) {

167 
	`ex∂aö1
("buffer");

170 } i‡(
	`°rcmp
(*
¨gv
, "mtu") == 0 ||

171 
	`°rcmp
(*
¨gv
, "minburst") == 0) {

172 
	`NEXT_ARG
();

173 i‡(
mtu
) {

174 
	`Ârötf
(
°dîr
, "Double \"mtu/minburst\" spec\n");

177 i‡(
	`gë_size_™d_˚Œ
(&
mtu
, &
P˚Œ_log
, *
¨gv
) < 0) {

178 
	`ex∂aö1
("mtu");

181 } i‡(
	`°rcmp
(*
¨gv
, "mpu") == 0) {

182 
	`NEXT_ARG
();

183 i‡(
mpu
) {

184 
	`Ârötf
(
°dîr
, "Double \"mpu\" spec\n");

187 i‡(
	`gë_size
(&
mpu
, *
¨gv
)) {

188 
	`ex∂aö1
("mpu");

191 } i‡(
	`°rcmp
(*
¨gv
, "rate") == 0) {

192 
	`NEXT_ARG
();

193 i‡(
p
.
øã
.rate) {

194 
	`Ârötf
(
°dîr
, "Double \"rate\" spec\n");

197 i‡(
	`gë_øã
(&
p
.
øã
.øã, *
¨gv
)) {

198 
	`ex∂aö1
("rate");

201 } i‡(
	`°rcmp
(*
¨gv
, "avrate") == 0) {

202 
	`NEXT_ARG
();

203 i‡(
avøã
) {

204 
	`Ârötf
(
°dîr
, "Double \"avrate\" spec\n");

207 i‡(
	`gë_øã
(&
avøã
, *
¨gv
)) {

208 
	`ex∂aö1
("avrate");

211 } i‡(
	`m©ches
(*
¨gv
, "peakrate") == 0) {

212 
	`NEXT_ARG
();

213 i‡(
p
.
≥akøã
.
øã
) {

214 
	`Ârötf
(
°dîr
, "Double \"peakrate\" spec\n");

217 i‡(
	`gë_øã
(&
p
.
≥akøã
.
øã
, *
¨gv
)) {

218 
	`ex∂aö1
("peakrate");

221 } i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

222 
p
.
a˘i⁄
 = 
TC_POLICE_RECLASSIFY
;

223 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

224 
	`m©ches
(*
¨gv
, "shot") == 0) {

225 
p
.
a˘i⁄
 = 
TC_POLICE_SHOT
;

226 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

227 
p
.
a˘i⁄
 = 
TC_POLICE_UNSPEC
;

228 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

229 
p
.
a˘i⁄
 = 
TC_POLICE_OK
;

230 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

231 
p
.
a˘i⁄
 = 
TC_POLICE_PIPE
;

232 } i‡(
	`°rcmp
(*
¨gv
, "conform-exceed") == 0) {

233 
	`NEXT_ARG
();

234 i‡(
	`gë_pﬁi˚_ªsu…
(&
p
.
a˘i⁄
, &
¥esu…
, *
¨gv
)) {

235 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

238 } i‡(
	`m©ches
(*
¨gv
, "overhead") == 0) {

239 
	`NEXT_ARG
();

240 i‡(
	`gë_u16
(&
ovîhód
, *
¨gv
, 10)) {

241 
	`ex∂aö1
("overhead");  -1;

243 } i‡(
	`m©ches
(*
¨gv
, "linklayer") == 0) {

244 
	`NEXT_ARG
();

245 i‡(
	`gë_lökœyî
(&
lökœyî
, *
¨gv
)) {

246 
	`ex∂aö1
("linklayer");  -1;

248 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

249 
	`ußge
();

253 
ok
++;

254 
¨gc
--; 
¨gv
++;

257 i‡(!
ok
)

260 i‡(
p
.
øã
.øã && !
buf„r
) {

261 
	`Ârötf
(
°dîr
, "\"burst\"Ñequires \"rate\".\n");

264 i‡(
p
.
≥akøã
.
øã
) {

265 i‡(!
p
.
øã
.rate) {

266 
	`Ârötf
(
°dîr
, "\"peakrate\"Ñequires \"rate\".\n");

269 i‡(!
mtu
) {

270 
	`Ârötf
(
°dîr
, "\"mtu\" isÑequired, if \"peakrate\" isÑequested.\n");

275 i‡(
p
.
øã
.rate) {

276 
p
.
øã
.
mpu
 = mpu;

277 
p
.
øã
.
ovîhód
 = overhead;

278 i‡(
	`tc_ˇlc_πabÀ
(&
p
.
øã
, 
πab
, 
R˚Œ_log
, 
mtu
, 
lökœyî
) < 0) {

279 
	`Ârötf
(
°dîr
, "TBF: failedÅo calculateÑateÅable.\n");

282 
p
.
bur°
 = 
	`tc_ˇlc_xmôtime
’.
øã
.øã, 
buf„r
);

284 
p
.
mtu
 = mtu;

285 i‡(
p
.
≥akøã
.
øã
) {

286 
p
.
≥akøã
.
mpu
 = mpu;

287 
p
.
≥akøã
.
ovîhód
 = overhead;

288 i‡(
	`tc_ˇlc_πabÀ
(&
p
.
≥akøã
, 
±ab
, 
P˚Œ_log
, 
mtu
, 
lökœyî
) < 0) {

289 
	`Ârötf
(
°dîr
, "POLICE: failedÅo calculateÖeakÑateÅable.\n");

294 
èû
 = 
	`NLMSG_TAIL
(
n
);

295 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

296 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_POLICE_TBF
, &
p
, (p));

297 i‡(
p
.
øã
.rate)

298 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_POLICE_RATE
, 
πab
, 1024);

299 i‡(
p
.
≥akøã
.
øã
)

300 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_POLICE_PEAKRATE
, 
±ab
, 1024);

301 i‡(
avøã
)

302 
	`add©å32
(
n
, 
MAX_MSG
, 
TCA_POLICE_AVRATE
, 
avøã
);

303 i‡(
¥esu…
)

304 
	`add©å32
(
n
, 
MAX_MSG
, 
TCA_POLICE_RESULT
, 
¥esu…
);

306 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

307 
ªs
 = 0;

309 *
¨gc_p
 = 
¨gc
;

310 *
¨gv_p
 = 
¨gv
;

311  
ªs
;

312 
	}
}

314 
	$∑r£_pﬁi˚
(*
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

316  
	`a˘_∑r£_pﬁi˚
(
NULL
,
¨gc_p
,
¨gv_p
,
tˇ_id
,
n
);

317 
	}
}

320 
	$¥öt_pﬁi˚
(
a˘i⁄_utû
 *
a
, 
FILE
 *
f
, 
π©å
 *
¨g
)

322 
	`SPRINT_BUF
(
b1
);

323 
	`SPRINT_BUF
(
b2
);

324 
tc_pﬁi˚
 *
p
;

325 
π©å
 *
tb
[
TCA_POLICE_MAX
+1];

326 
buf„r
;

327 
lökœyî
;

329 i‡(
¨g
 =
NULL
)

332 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_POLICE_MAX
, 
¨g
);

334 i‡(
tb
[
TCA_POLICE_TBF
] =
NULL
) {

335 
	`Ârötf
(
f
, "[NULLÖoliceÅbf]");

338 #i‚de‡
STOOPID_8BYTE


339 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_POLICE_TBF
]Ë< (*
p
)) {

340 
	`Ârötf
(
f
, "[truncatedÖoliceÅbf]");

344 
p
 = 
	`RTA_DATA
(
tb
[
TCA_POLICE_TBF
]);

346 
	`Ârötf
(
f
, "Öﬁi˚ 0x%x ", 
p
->
ödex
);

347 
	`Ârötf
(
f
, "øã %†", 
	`•röt_øã
(
p
->
øã
.øã, 
b1
));

348 
buf„r
 = 
	`tc_ˇlc_xmôsize
(
p
->
øã
.øã,Ö->
bur°
);

349 
	`Ârötf
(
f
, "bur° %†", 
	`•röt_size
(
buf„r
, 
b1
));

350 
	`Ârötf
(
f
, "mtu %†", 
	`•röt_size
(
p
->
mtu
, 
b1
));

351 i‡(
show_øw
)

352 
	`Ârötf
(
f
, "[%08x] ", 
p
->
bur°
);

353 i‡(
p
->
≥akøã
.
øã
)

354 
	`Ârötf
(
f
, "≥akøã %†", 
	`•röt_øã
(
p
->
≥akøã
.
øã
, 
b1
));

355 i‡(
tb
[
TCA_POLICE_AVRATE
])

356 
	`Ârötf
(
f
, "avøã %†", 
	`•röt_øã
(
	`πa_gë©å_u32
(
tb
[
TCA_POLICE_AVRATE
]), 
b1
));

357 
	`Ârötf
(
f
, "a˘i⁄ %s", 
	`pﬁi˚_a˘i⁄_n2a
(
p
->
a˘i⁄
, 
b1
, (b1)));

358 i‡(
tb
[
TCA_POLICE_RESULT
]) {

359 
	`Ârötf
(
f
, "/%†", 
	`pﬁi˚_a˘i⁄_n2a
(*(*)
	`RTA_DATA
(
tb
[
TCA_POLICE_RESULT
]), 
b1
, (b1)));

361 
	`Ârötf
(
f
, " ");

362 
	`Ârötf
(
f
, "ovîhód %ub ", 
p
->
øã
.
ovîhód
);

363 
lökœyî
 = (
p
->
øã
.lökœyî & 
TC_LINKLAYER_MASK
);

364 i‡(
lökœyî
 > 
TC_LINKLAYER_ETHERNET
 || 
show_dëaûs
)

365 
	`Ârötf
(
f
, "lökœyî %†", 
	`•röt_lökœyî
(
lökœyî
, 
b2
));

366 
	`Ârötf
(
f
, "\ƒe‡%d böd %d\n",
p
->
ªf˙t
,Ö->
böd˙t
);

369 
	}
}

372 
	$tc_¥öt_pﬁi˚
(
FILE
 *
f
, 
π©å
 *
¨g
) {

373  
	`¥öt_pﬁi˚
(&
pﬁi˚_a˘i⁄_utû
,
f
,
¨g
);

374 
	}
}

	@tc/m_simple.c

66 
	~<°dio.h
>

67 
	~<°dlib.h
>

68 
	~<uni°d.h
>

69 
	~<sy¶og.h
>

70 
	~<f˙é.h
>

71 
	~<sys/sockë.h
>

72 
	~<√töë/ö.h
>

73 
	~<¨∑/öë.h
>

74 
	~<°rög.h
>

75 
	~"utûs.h
"

76 
	~"tc_utû.h
"

77 
	~<löux/tc_a˘/tc_deÁ˘.h
>

79 #i‚de‡
SIMP_MAX_DATA


80 
	#SIMP_MAX_DATA
 32

	)

82 
	$ex∂aö
()

84 
	`Ârötf
(
°dîr
, "Usage: ... simple STRING\n"

87 
	}
}

89 
	$ußge
()

91 
	`ex∂aö
();

92 
	`exô
(-1);

93 
	}
}

96 
	$∑r£_sim∂e
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
, 
tˇ_id
,

97 
∆msghdr
 *
n
)

99 
tc_deÁ˘
 
£l
 = {};

100 
¨gc
 = *
¨gc_p
;

101 **
¨gv
 = *
¨gv_p
;

102 
ok
 = 0;

103 
π©å
 *
èû
;

104 *
simpd©a
 = 
NULL
;

107 
¨gc
 > 0) {

108 i‡(
	`m©ches
(*
¨gv
, "simple") == 0) {

109 
	`NEXT_ARG
();

110 
simpd©a
 = *
¨gv
;

111 
ok
 = 1;

112 
¨gc
--;

113 
¨gv
++;

115 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

116 
	`ußge
();

123 i‡(!
ok
) {

124 
	`ex∂aö
();

128 i‡(
¨gc
) {

129 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

130 
	`NEXT_ARG
();

131 i‡(
	`gë_u32
(&
£l
.
ödex
, *
¨gv
, 10)) {

132 
	`Ârötf
(
°dîr
, "simple: Illegal \"index\"\n");

135 
¨gc
--;

136 
¨gv
++;

140 i‡(
	`°æí
(
simpd©a
Ë> (
SIMP_MAX_DATA
 - 1)) {

141 
	`Ârötf
(
°dîr
, "simple: Illegal stringÜen %zu <%s> \n",

142 
	`°æí
(
simpd©a
), simpdata);

146 
£l
.
a˘i⁄
 = 
TC_ACT_PIPE
;

148 
èû
 = 
	`NLMSG_TAIL
(
n
);

149 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

150 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_DEF_PARMS
, &
£l
, (sel));

151 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_DEF_DATA
, 
simpd©a
, 
SIMP_MAX_DATA
);

152 
èû
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)tail;

154 *
¨gc_p
 = 
¨gc
;

155 *
¨gv_p
 = 
¨gv
;

157 
	}
}

159 
	$¥öt_sim∂e
(
a˘i⁄_utû
 *
au
, 
FILE
 * 
f
, 
π©å
 *
¨g
)

161 
tc_deÁ˘
 *
£l
;

162 
π©å
 *
tb
[
TCA_DEF_MAX
 + 1];

163 *
simpd©a
;

165 i‡(
¨g
 =
NULL
)

168 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_DEF_MAX
, 
¨g
);

170 i‡(
tb
[
TCA_DEF_PARMS
] =
NULL
) {

171 
	`Ârötf
(
f
, "[NULL simpleÖarameters]");

174 
£l
 = 
	`RTA_DATA
(
tb
[
TCA_DEF_PARMS
]);

176 i‡(
tb
[
TCA_DEF_DATA
] =
NULL
) {

177 
	`Ârötf
(
f
, "[missing simple string]");

181 
simpd©a
 = 
	`RTA_DATA
(
tb
[
TCA_DEF_DATA
]);

183 
	`Ârötf
(
f
, "Sim∂ê<%s>\n", 
simpd©a
);

184 
	`Ârötf
(
f
, "\àödex %dÑe‡%d böd %d", 
£l
->
ödex
,

185 
£l
->
ªf˙t
, sñ->
böd˙t
);

187 i‡(
show_°©s
) {

188 i‡(
tb
[
TCA_DEF_TM
]) {

189 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_DEF_TM
]);

190 
	`¥öt_tm
(
f
, 
tm
);

193 
	`Ârötf
(
f
, "\n");

196 
	}
}

198 
a˘i⁄_utû
 
	gsim∂e_a˘i⁄_utû
 = {

199 .
id
 = "simple",

200 .
	g∑r£_a›t
 = 
∑r£_sim∂e
,

201 .
	g¥öt_a›t
 = 
¥öt_sim∂e
,

	@tc/m_skbedit.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<uni°d.h
>

25 
	~<°rög.h
>

26 
	~"utûs.h
"

27 
	~"tc_utû.h
"

28 
	~<löux/tc_a˘/tc_skbedô.h
>

31 
	$ex∂aö
()

33 
	`Ârötf
(
°dîr
, "Usage: ... skbedit <[QM] [PM] [MM]>\n"

40 
	}
}

43 
	$ußge
()

45 
	`ex∂aö
();

46 
	`exô
(-1);

47 
	}
}

50 
	$∑r£_skbedô
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
, 
tˇ_id
,

51 
∆msghdr
 *
n
)

53 
¨gc
 = *
¨gc_p
;

54 **
¨gv
 = *
¨gv_p
;

55 
ok
 = 0;

56 
π©å
 *
èû
;

57 
tmp
;

58 
__u16
 
queue_m≠pög
;

59 
__u32
 
Êags
 = 0, 
¥i‹ôy
, 
m¨k
;

60 
tc_skbedô
 
£l
 = { 0 };

62 i‡(
	`m©ches
(*
¨gv
, "skbedit") != 0)

65 
	`NEXT_ARG
();

67 
¨gc
 > 0) {

68 i‡(
	`m©ches
(*
¨gv
, "queue_mapping") == 0) {

69 
Êags
 |
SKBEDIT_F_QUEUE_MAPPING
;

70 
	`NEXT_ARG
();

71 i‡(
	`gë_unsig√d
(&
tmp
, *
¨gv
, 10) ||Åmp > 65535) {

72 
	`Ârötf
(
°dîr
, "Illegal queue_mapping\n");

75 
queue_m≠pög
 = 
tmp
;

76 
ok
++;

77 } i‡(
	`m©ches
(*
¨gv
, "priority") == 0) {

78 
Êags
 |
SKBEDIT_F_PRIORITY
;

79 
	`NEXT_ARG
();

80 i‡(
	`gë_tc_˛assid
(&
¥i‹ôy
, *
¨gv
)) {

81 
	`Ârötf
(
°dîr
, "IllegalÖriority\n");

84 
ok
++;

85 } i‡(
	`m©ches
(*
¨gv
, "mark") == 0) {

86 
Êags
 |
SKBEDIT_F_MARK
;

87 
	`NEXT_ARG
();

88 i‡(
	`gë_u32
(&
m¨k
, *
¨gv
, 0)) {

89 
	`Ârötf
(
°dîr
, "Illegal mark\n");

92 
ok
++;

93 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

94 
	`ußge
();

98 
¨gc
--;

99 
¨gv
++;

102 
£l
.
a˘i⁄
 = 
TC_ACT_PIPE
;

103 i‡(
¨gc
) {

104 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

105 
£l
.
a˘i⁄
 = 
TC_ACT_RECLASSIFY
;

106 
	`NEXT_ARG
();

107 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

108 
£l
.
a˘i⁄
 = 
TC_ACT_PIPE
;

109 
	`NEXT_ARG
();

110 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

111 
	`m©ches
(*
¨gv
, "shot") == 0) {

112 
£l
.
a˘i⁄
 = 
TC_ACT_SHOT
;

113 
	`NEXT_ARG
();

114 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

115 
£l
.
a˘i⁄
 = 
TC_ACT_UNSPEC
;

116 
	`NEXT_ARG
();

117 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

118 
£l
.
a˘i⁄
 = 
TC_ACT_OK
;

119 
	`NEXT_ARG
();

123 i‡(
¨gc
) {

124 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

125 
	`NEXT_ARG
();

126 i‡(
	`gë_u32
(&
£l
.
ödex
, *
¨gv
, 10)) {

127 
	`Ârötf
(
°dîr
, "Pedit: Illegal \"index\"\n");

130 
¨gc
--;

131 
¨gv
++;

132 
ok
++;

136 i‡(!
ok
) {

137 
	`ex∂aö
();

142 
èû
 = 
	`NLMSG_TAIL
(
n
);

143 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

144 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_SKBEDIT_PARMS
, &
£l
, (sel));

145 i‡(
Êags
 & 
SKBEDIT_F_QUEUE_MAPPING
)

146 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_SKBEDIT_QUEUE_MAPPING
,

147 &
queue_m≠pög
, (queue_mapping));

148 i‡(
Êags
 & 
SKBEDIT_F_PRIORITY
)

149 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_SKBEDIT_PRIORITY
,

150 &
¥i‹ôy
, (priority));

151 i‡(
Êags
 & 
SKBEDIT_F_MARK
)

152 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_SKBEDIT_MARK
,

153 &
m¨k
, (mark));

154 
èû
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)tail;

156 *
¨gc_p
 = 
¨gc
;

157 *
¨gv_p
 = 
¨gv
;

159 
	}
}

161 
	$¥öt_skbedô
(
a˘i⁄_utû
 *
au
, 
FILE
 *
f
, 
π©å
 *
¨g
)

163 
π©å
 *
tb
[
TCA_SKBEDIT_MAX
 + 1];

164 
	`SPRINT_BUF
(
b1
);

165 
__u32
 *
¥i‹ôy
;

166 
__u32
 *
m¨k
;

167 
__u16
 *
queue_m≠pög
;

168 
tc_skbedô
 *
p
 = 
NULL
;

170 i‡(
¨g
 =
NULL
)

173 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_SKBEDIT_MAX
, 
¨g
);

175 i‡(
tb
[
TCA_SKBEDIT_PARMS
] =
NULL
) {

176 
	`Ârötf
(
f
, "[NULL skbeditÖarameters]");

179 
p
 = 
	`RTA_DATA
(
tb
[
TCA_SKBEDIT_PARMS
]);

181 
	`Ârötf
(
f
, " skbedit");

183 i‡(
tb
[
TCA_SKBEDIT_QUEUE_MAPPING
] !
NULL
) {

184 
queue_m≠pög
 = 
	`RTA_DATA
(
tb
[
TCA_SKBEDIT_QUEUE_MAPPING
]);

185 
	`Ârötf
(
f
, " queue_m≠pög %u", *
queue_m≠pög
);

187 i‡(
tb
[
TCA_SKBEDIT_PRIORITY
] !
NULL
) {

188 
¥i‹ôy
 = 
	`RTA_DATA
(
tb
[
TCA_SKBEDIT_PRIORITY
]);

189 
	`Ârötf
(
f
, "Öri‹ôy %s", 
	`•röt_tc_˛assid
(*
¥i‹ôy
, 
b1
));

191 i‡(
tb
[
TCA_SKBEDIT_MARK
] !
NULL
) {

192 
m¨k
 = 
	`RTA_DATA
(
tb
[
TCA_SKBEDIT_MARK
]);

193 
	`Ârötf
(
f
, " m¨k %d", *
m¨k
);

196 
	`Ârötf
(
f
, "\n\àödex %dÑe‡%d böd %d", 
p
->
ödex
,Ö->
ªf˙t
,Ö->
böd˙t
);

198 i‡(
show_°©s
) {

199 i‡(
tb
[
TCA_SKBEDIT_TM
]) {

200 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_SKBEDIT_TM
]);

201 
	`¥öt_tm
(
f
, 
tm
);

205 
	`Ârötf
(
f
, "\n ");

208 
	}
}

210 
a˘i⁄_utû
 
	gskbedô_a˘i⁄_utû
 = {

211 .
id
 = "skbedit",

212 .
	g∑r£_a›t
 = 
∑r£_skbedô
,

213 .
	g¥öt_a›t
 = 
¥öt_skbedô
,

	@tc/m_vlan.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 
	~<löux/if_ëhî.h
>

17 
	~"utûs.h
"

18 
	~"π_«mes.h
"

19 
	~"tc_utû.h
"

20 
	~<löux/tc_a˘/tc_vœn.h
>

22 
	$ex∂aö
()

24 
	`Ârötf
(
°dîr
, "Usage: vlanÖop\n");

25 
	`Ârötf
(
°dîr
, " vlanÖush [Örotocol VLANPROTO ] id VLANID\n");

26 
	`Ârötf
(
°dîr
, " VLANPROTO is one of 802.1Q or 802.1AD\n");

27 
	`Ârötf
(
°dîr
, " with default: 802.1Q\n");

28 
	}
}

30 
	$ußge
()

32 
	`ex∂aö
();

33 
	`exô
(-1);

34 
	}
}

36 
	$∑r£_vœn
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
,

37 
tˇ_id
, 
∆msghdr
 *
n
)

39 
¨gc
 = *
¨gc_p
;

40 **
¨gv
 = *
¨gv_p
;

41 
π©å
 *
èû
;

42 
a˘i⁄
 = 0;

43 
__u16
 
id
;

44 
id_£t
 = 0;

45 
__u16
 
¥Ÿo
;

46 
¥Ÿo_£t
 = 0;

47 
tc_vœn
 
∑rm
 = { 0 };

49 i‡(
	`m©ches
(*
¨gv
, "vlan") != 0)

52 
	`NEXT_ARG
();

54 
¨gc
 > 0) {

55 i‡(
	`m©ches
(*
¨gv
, "pop") == 0) {

56 i‡(
a˘i⁄
) {

57 
	`Ârötf
(
°dîr
, "unexpected \"%s\" -áctionálready specified\n",

58 *
¨gv
);

59 
	`ex∂aö
();

62 
a˘i⁄
 = 
TCA_VLAN_ACT_POP
;

63 } i‡(
	`m©ches
(*
¨gv
, "push") == 0) {

64 i‡(
a˘i⁄
) {

65 
	`Ârötf
(
°dîr
, "unexpected \"%s\" -áctionálready specified\n",

66 *
¨gv
);

67 
	`ex∂aö
();

70 
a˘i⁄
 = 
TCA_VLAN_ACT_PUSH
;

71 } i‡(
	`m©ches
(*
¨gv
, "id") == 0) {

72 i‡(
a˘i⁄
 !
TCA_VLAN_ACT_PUSH
) {

73 
	`Ârötf
(
°dîr
, "\"%s\" is only valid forÖush\n",

74 *
¨gv
);

75 
	`ex∂aö
();

78 
	`NEXT_ARG
();

79 i‡(
	`gë_u16
(&
id
, *
¨gv
, 0))

80 
	`öv¨g
("id i†övÆid", *
¨gv
);

81 
id_£t
 = 1;

82 } i‡(
	`m©ches
(*
¨gv
, "protocol") == 0) {

83 i‡(
a˘i⁄
 !
TCA_VLAN_ACT_PUSH
) {

84 
	`Ârötf
(
°dîr
, "\"%s\" is only valid forÖush\n",

85 *
¨gv
);

86 
	`ex∂aö
();

89 
	`NEXT_ARG
();

90 i‡(
	`Œ_¥Ÿo_a2n
(&
¥Ÿo
, *
¨gv
))

91 
	`öv¨g
("¥Ÿocﬁ i†övÆid", *
¨gv
);

92 
¥Ÿo_£t
 = 1;

93 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

94 
	`ußge
();

98 
¨gc
--;

99 
¨gv
++;

102 
∑rm
.
a˘i⁄
 = 
TC_ACT_PIPE
;

103 i‡(
¨gc
) {

104 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

105 
∑rm
.
a˘i⁄
 = 
TC_ACT_RECLASSIFY
;

106 
¨gc
--;

107 
¨gv
++;

108 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

109 
∑rm
.
a˘i⁄
 = 
TC_ACT_PIPE
;

110 
¨gc
--;

111 
¨gv
++;

112 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

113 
	`m©ches
(*
¨gv
, "shot") == 0) {

114 
∑rm
.
a˘i⁄
 = 
TC_ACT_SHOT
;

115 
¨gc
--;

116 
¨gv
++;

117 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

118 
∑rm
.
a˘i⁄
 = 
TC_ACT_UNSPEC
;

119 
¨gc
--;

120 
¨gv
++;

121 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

122 
∑rm
.
a˘i⁄
 = 
TC_ACT_OK
;

123 
¨gc
--;

124 
¨gv
++;

128 i‡(
¨gc
) {

129 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

130 
	`NEXT_ARG
();

131 i‡(
	`gë_u32
(&
∑rm
.
ödex
, *
¨gv
, 10)) {

132 
	`Ârötf
(
°dîr
, "vlan: Illegal \"index\"\n");

135 
¨gc
--;

136 
¨gv
++;

140 i‡(
a˘i⁄
 =
TCA_VLAN_ACT_PUSH
 && !
id_£t
) {

141 
	`Ârötf
(
°dîr
, "idÇeedsÅo be set forÖush\n");

142 
	`ex∂aö
();

146 
∑rm
.
v_a˘i⁄
 = 
a˘i⁄
;

147 
èû
 = 
	`NLMSG_TAIL
(
n
);

148 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

149 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_VLAN_PARMS
, &
∑rm
, (parm));

150 i‡(
id_£t
)

151 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_VLAN_PUSH_VLAN_ID
, &
id
, 2);

152 i‡(
¥Ÿo_£t
) {

153 i‡(
¥Ÿo
 !
	`ht⁄s
(
ETH_P_8021Q
) &&

154 
¥Ÿo
 !
	`ht⁄s
(
ETH_P_8021AD
)) {

155 
	`Ârötf
(
°dîr
, "protocolÇot supported\n");

156 
	`ex∂aö
();

160 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_VLAN_PUSH_VLAN_PROTOCOL
, &
¥Ÿo
, 2);

162 
èû
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)tail;

164 *
¨gc_p
 = 
¨gc
;

165 *
¨gv_p
 = 
¨gv
;

167 
	}
}

169 
	$¥öt_vœn
(
a˘i⁄_utû
 *
au
, 
FILE
 *
f
, 
π©å
 *
¨g
)

171 
	`SPRINT_BUF
(
b1
);

172 
π©å
 *
tb
[
TCA_VLAN_MAX
 + 1];

173 
__u16
 
vÆ
;

174 
tc_vœn
 *
∑rm
;

176 i‡(
¨g
 =
NULL
)

179 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_VLAN_MAX
, 
¨g
);

181 i‡(!
tb
[
TCA_VLAN_PARMS
]) {

182 
	`Ârötf
(
f
, "[NULL vlanÖarameters]");

185 
∑rm
 = 
	`RTA_DATA
(
tb
[
TCA_VLAN_PARMS
]);

187 
	`Ârötf
(
f
, " vlan");

189 
∑rm
->
v_a˘i⁄
) {

190 
TCA_VLAN_ACT_POP
:

191 
	`Ârötf
(
f
, "Öop");

193 
TCA_VLAN_ACT_PUSH
:

194 
	`Ârötf
(
f
, "Öush");

195 i‡(
tb
[
TCA_VLAN_PUSH_VLAN_ID
]) {

196 
vÆ
 = 
	`πa_gë©å_u16
(
tb
[
TCA_VLAN_PUSH_VLAN_ID
]);

197 
	`Ârötf
(
f
, " id %u", 
vÆ
);

199 i‡(
tb
[
TCA_VLAN_PUSH_VLAN_PROTOCOL
]) {

200 
	`Ârötf
(
f
, "Örotocol %s",

201 
	`Œ_¥Ÿo_n2a
(
	`πa_gë©å_u16
(
tb
[
TCA_VLAN_PUSH_VLAN_PROTOCOL
]),

202 
b1
, (b1)));

206 
	`Ârötf
(
f
, " %s", 
	`a˘i⁄_n2a
(
∑rm
->
a˘i⁄
, 
b1
,  (b1)));

208 
	`Ârötf
(
f
, "\n\àödex %dÑe‡%d böd %d", 
∑rm
->
ödex
,Ö¨m->
ªf˙t
,

209 
∑rm
->
böd˙t
);

211 i‡(
show_°©s
) {

212 i‡(
tb
[
TCA_VLAN_TM
]) {

213 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_VLAN_TM
]);

214 
	`¥öt_tm
(
f
, 
tm
);

218 
	`Ârötf
(
f
, "\n ");

221 
	}
}

223 
a˘i⁄_utû
 
	gvœn_a˘i⁄_utû
 = {

224 .
id
 = "vlan",

225 .
	g∑r£_a›t
 = 
∑r£_vœn
,

226 .
	g¥öt_a›t
 = 
¥öt_vœn
,

	@tc/m_xt.c

13 
	~<sy¶og.h
>

14 
	~<sys/sockë.h
>

15 
	~<√töë/ö.h
>

16 
	~<¨∑/öë.h
>

17 
	~<√t/if.h
>

18 
	~<limôs.h
>

19 
	~<löux/√tfûãr.h
>

20 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

21 
	~<xèbÀs.h
>

22 
	~"utûs.h
"

23 
	~"tc_utû.h
"

24 
	~<löux/tc_a˘/tc_ùt.h
>

25 
	~<°dio.h
>

26 
	~<dlf˙.h
>

27 
	~<gë›t.h
>

28 
	~<î∫o.h
>

29 
	~<°rög.h
>

30 
	~<√tdb.h
>

31 
	~<°dlib.h
>

32 
	~<˘y≥.h
>

33 
	~<°d¨g.h
>

34 
	~<uni°d.h
>

35 
	~<f˙é.h
>

36 
	~<sys/waô.h
>

37 #i‚de‡
XT_LIB_DIR


38 
	#XT_LIB_DIR
 "/lib/xèbÀs"

	)

41 #i‚de‡
__ALIGN_KERNEL


42 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

43 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

46 #i‚de‡
ALIGN


47 
	#ALIGN
(
x
,
a
Ë
	`__ALIGN_KERNEL
((x), (a))

	)

50 c⁄° *
	gäame
 = "mangle";

52 *
	glib_dú
;

54 c⁄° *
	gùthooks
[] = {

62 
›ti⁄
 
	g‹igöÆ_›ts
[] = {

64 .
«me
 = "jump",

65 .
	ghas_¨g
 = 1,

66 .
	gvÆ
 = 'j'

71 
xèbÀs_globÆs
 
	gtcùt_globÆs
 = {

72 .
›ti⁄_off£t
 = 0,

73 .
	g¥ogøm_«me
 = "tc-ipt",

74 .
	g¥ogøm_vîsi⁄
 = "0.2",

75 .
	g‹ig_›ts
 = 
‹igöÆ_›ts
,

76 .
	g›ts
 = 
‹igöÆ_›ts
,

77 .
	gexô_îr
 = 
NULL
,

84 
	$buûd_°
(
xèbÀs_èrgë
 *
èrgë
, 
xt_íåy_èrgë
 *
t
)

87 
size_t
 
size
 =

88 
	`XT_ALIGN
( (
xt_íåy_èrgë
)Ë+ 
èrgë
->
size
;

90 i‡(
NULL
 =
t
) {

91 
èrgë
->
t
 = 
	`xèbÀs_ˇŒoc
(1, 
size
);

92 
èrgë
->
t
->
u
.
èrgë_size
 = 
size
;

93 
	`°r˝y
(
èrgë
->
t
->
u
.
u£r
.
«me
,Åarget->name);

94 
èrgë
->
t
->
u
.
u£r
.
ªvisi⁄
 =Åarget->revision;

96 i‡(
èrgë
->
öô
 !
NULL
)

97 
èrgë
->
	`öô
—¨gë->
t
);

99 
èrgë
->
t
 =Å;

103 
	}
}

105 
	$£t_lib_dú
()

108 
lib_dú
 = 
	`gëív
("XTABLES_LIBDIR");

109 i‡(!
lib_dú
) {

110 
lib_dú
 = 
	`gëív
("IPTABLES_LIB_DIR");

111 i‡(
lib_dú
)

112 
	`Ârötf
(
°dîr
, "using deprecated IPTABLES_LIB_DIR \n");

114 i‡(
lib_dú
 =
NULL
)

115 
lib_dú
 = 
XT_LIB_DIR
;

117 
	}
}

119 
	$∑r£_ùt
(
a˘i⁄_utû
 *
a
,*
¨gc_p
,

120 ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

122 
xèbÀs_èrgë
 *
m
 = 
NULL
;

123 
ùt_íåy
 
fw
;

124 
π©å
 *
èû
;

126 
c
;

127 
ørgc
 = *
¨gc_p
;

128 **
¨gv
 = *
¨gv_p
;

129 
¨gc
 = 0, 
ürgc
 = 0;

130 
k
[16];

131 
size
 = 0;

132 
iok
 = 0, 
ok
 = 0;

133 
__u32
 
hook
 = 0, 
ödex
 = 0;

134 
›ti⁄
 *
›ts
 = 
NULL
;

136 
	`xèbÀs_öô_Æl
(&
tcùt_globÆs
, 
NFPROTO_IPV4
);

137 
	`£t_lib_dú
();

140 
i
;

141 
i
 = 0; i < 
ørgc
; i++) {

142 i‡(
NULL
 =
¨gv
[
i
] || 0 =
	`°rcmp
(argv[i], "action")) {

146 
ürgc
 = 
¨gc
 = 
i
;

149 i‡(
¨gc
 <= 2) {

150 
	`Ârötf
(
°dîr
,"badárgumít†tÿùà%d v†%d \n", 
¨gc
, 
ørgc
);

155 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "j:", 
tcùt_globÆs
.
›ts
, 
NULL
);

156 i‡(
c
 == -1)

158 
c
) {

160 
m
 = 
	`xèbÀs_föd_èrgë
(
›èrg
, 
XTF_TRY_LOAD
);

161 i‡(
NULL
 !
m
) {

163 i‡(0 > 
	`buûd_°
(
m
, 
NULL
)) {

164 
	`¥ötf
(" %†îr‹ \n", 
m
->
«me
);

167 #i‡(
XTABLES_VERSION_CODE
 >= 6)

168 
›ts
 = 
	`xèbÀs_›ti⁄s_x‰m
(
tcùt_globÆs
.
‹ig_›ts
,

169 
tcùt_globÆs
.
›ts
,

170 
m
->
x6_›ti⁄s
,

171 &
m
->
›ti⁄_off£t
);

173 
›ts
 = 
	`xèbÀs_mîge_›ti⁄s
(
tcùt_globÆs
.opts,

174 
m
->
exåa_›ts
,

175 &
m
->
›ti⁄_off£t
);

177 i‡(
›ts
 =
NULL
) {

178 
	`Ârötf
(
°dîr
, " faûedÅÿfödáddôi⁄Æ o±i⁄†f‹Å¨gë %s\n\n", 
›èrg
);

181 
tcùt_globÆs
.
›ts
 = opts;

183 
	`Ârötf
(
°dîr
," faûedÅÿfödÅ¨gë %s\n\n", 
›èrg
);

186 
ok
++;

190 
	`mem£t
(&
fw
, 0,  (fw));

191 #i‡(
XTABLES_VERSION_CODE
 >= 6)

192 i‡(
m
 !
NULL
 && m->
x6_∑r£
 != NULL ) {

193 
	`xèbÀs_›ti⁄_çˇŒ
(
c
, 
¨gv
, 0 , 
m
, 
NULL
);

195 i‡(
m
 !
NULL
 && m->
∑r£
 != NULL ) {

196 
m
->
	`∑r£
(
c
 - m->
›ti⁄_off£t
, 
¨gv
, 0, &m->
tÊags
,

197 
NULL
, &
m
->
t
);

200 
	`Ârötf
(
°dîr
,"ÁûedÅÿfödÅ¨gë %s\n\n", 
›èrg
);

204 
ok
++;

209 i‡(
ürgc
 > 
›töd
) {

210 i‡(
	`m©ches
(
¨gv
[
›töd
], "index") == 0) {

211 i‡(
	`gë_u32
(&
ödex
, 
¨gv
[
›töd
 + 1], 10)) {

212 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

213 
	`xèbÀs_‰ì_›ts
(1);

216 
iok
++;

218 
›töd
 += 2;

222 i‡(!
ok
 && !
iok
) {

223 
	`Ârötf
(
°dîr
," i± P¨£∏BAD!! (%s)\n", *
¨gv
);

228 #i‡(
XTABLES_VERSION_CODE
 >= 6)

229 i‡(
m
)

230 
	`xèbÀs_›ti⁄_tfˇŒ
(
m
);

232 i‡(
m
 && m->
föÆ_check
)

233 
m
->
	`föÆ_check
(m->
tÊags
);

237 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

238 i‡(
t
->
tcm_∑ª¡
 !
TC_H_ROOT


239 && 
t
->
tcm_∑ª¡
 =
	`TC_H_MAJ
(
TC_H_INGRESS
)) {

240 
hook
 = 
NF_IP_PRE_ROUTING
;

242 
hook
 = 
NF_IP_POST_ROUTING
;

246 
èû
 = 
	`NLMSG_TAIL
(
n
);

247 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

248 
	`Ârötf
(
°dout
, "èbÀ«me: %†hook: %s\¿", 
äame
, 
ùthooks
[
hook
]);

249 
	`Ârötf
(
°dout
, "\ttarget: ");

251 i‡(
m
)

252 
m
->
	`¥öt
(
NULL
, m->
t
, 0);

253 
	`Ârötf
(
°dout
, " index %d\n", 
ödex
);

255 i‡(
	`°æí
(
äame
) > 16) {

256 
size
 = 16;

257 
k
[15] = 0;

259 
size
 = 1 + 
	`°æí
(
äame
);

261 
	`°∫˝y
(
k
, 
äame
, 
size
);

263 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_TABLE
, 
k
, 
size
);

264 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_HOOK
, &
hook
, 4);

265 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_INDEX
, &
ödex
, 4);

266 i‡(
m
)

267 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_TARG
, 
m
->
t
, m->t->
u
.
èrgë_size
);

268 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

270 
¨gc
 -
›töd
;

271 
¨gv
 +
›töd
;

272 *
¨gc_p
 = 
ørgc
 - 
ürgc
;

273 *
¨gv_p
 = 
¨gv
;

275 
›töd
 = 0;

276 
	`xèbÀs_‰ì_›ts
(1);

278 i‡(
m
) {

280 
m
->
tÊags
 = 0;

281 
m
->
u£d
 = 0;

283 i‡(
m
->
t
)

284 
	`‰ì
(
m
->
t
);

289 
	}
}

292 
	$¥öt_ùt
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
)

294 
π©å
 *
tb
[
TCA_IPT_MAX
 + 1];

295 
xt_íåy_èrgë
 *
t
 = 
NULL
;

296 
›ti⁄
 *
›ts
 = 
NULL
;

298 i‡(
¨g
 =
NULL
)

302 
xèbÀs_globÆs
 
tmp_tcùt_globÆs
 = 
tcùt_globÆs
;

304 
	`xèbÀs_öô_Æl
(&
tmp_tcùt_globÆs
, 
NFPROTO_IPV4
);

305 
	`£t_lib_dú
();

307 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_IPT_MAX
, 
¨g
);

309 i‡(
tb
[
TCA_IPT_TABLE
] =
NULL
) {

310 
	`Ârötf
(
f
, "[NULL iptÅableÇame ]ássuming mangle ");

312 
	`Ârötf
(
f
, "tablename: %s ",

313 
	`πa_gë©å_°r
(
tb
[
TCA_IPT_TABLE
]));

316 i‡(
tb
[
TCA_IPT_HOOK
] =
NULL
) {

317 
	`Ârötf
(
f
, "[NULL ipt hookÇame ]\n ");

320 
__u32
 
hook
;

321 
hook
 = 
	`πa_gë©å_u32
(
tb
[
TCA_IPT_HOOK
]);

322 
	`Ârötf
(
f
, " hook: %†\n", 
ùthooks
[
hook
]);

325 i‡(
tb
[
TCA_IPT_TARG
] =
NULL
) {

326 
	`Ârötf
(
f
, "\t[NULL iptÅargetÖarameters ] \n");

329 
xèbÀs_èrgë
 *
m
 = 
NULL
;

330 
t
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_TARG
]);

331 
m
 = 
	`xèbÀs_föd_èrgë
(
t
->
u
.
u£r
.
«me
, 
XTF_TRY_LOAD
);

332 i‡(
NULL
 !
m
) {

333 i‡(0 > 
	`buûd_°
(
m
, 
t
)) {

334 
	`Ârötf
(
°dîr
, " %†îr‹ \n", 
m
->
«me
);

338 #i‡(
XTABLES_VERSION_CODE
 >= 6)

339 
›ts
 = 
	`xèbÀs_›ti⁄s_x‰m
(
tmp_tcùt_globÆs
.
‹ig_›ts
,

340 
tmp_tcùt_globÆs
.
›ts
,

341 
m
->
x6_›ti⁄s
,

342 &
m
->
›ti⁄_off£t
);

344 
›ts
 = 
	`xèbÀs_mîge_›ti⁄s
(
tmp_tcùt_globÆs
.opts,

345 
m
->
exåa_›ts
,

346 &
m
->
›ti⁄_off£t
);

348 i‡(
›ts
 =
NULL
) {

349 
	`Ârötf
(
°dîr
, " faûedÅÿfödáddôi⁄Æ o±i⁄†f‹Å¨gë %s\n\n", 
›èrg
);

352 
tmp_tcùt_globÆs
.
›ts
 = opts;

354 
	`Ârötf
(
°dîr
, " failedÅo findÅarget %s\n\n",

355 
t
->
u
.
u£r
.
«me
);

358 
	`Ârötf
(
f
, "\ttarget ");

359 
m
->
	`¥öt
(
NULL
, m->
t
, 0);

360 i‡(
tb
[
TCA_IPT_INDEX
] =
NULL
) {

361 
	`Ârötf
(
f
, " [NULL iptÅarget index ]\n");

363 
__u32
 
ödex
;

364 
ödex
 = 
	`πa_gë©å_u32
(
tb
[
TCA_IPT_INDEX
]);

365 
	`Ârötf
(
f
, " \n\tödex %d", 
ödex
);

368 i‡(
tb
[
TCA_IPT_CNT
]) {

369 
tc_˙t
 *
c
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_CNT
]);;

370 
	`Ârötf
(
f
, "Ñe‡%d böd %d", 
c
->
ªf˙t
, c->
böd˙t
);

372 i‡(
show_°©s
) {

373 i‡(
tb
[
TCA_IPT_TM
]) {

374 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_TM
]);

375 
	`¥öt_tm
(
f
,
tm
);

378 
	`Ârötf
(
f
, " \n");

381 
	`xèbÀs_‰ì_›ts
(1);

384 
	}
}

386 
a˘i⁄_utû
 
	gxt_a˘i⁄_utû
 = {

387 .
id
 = "xt",

388 .
	g∑r£_a›t
 = 
∑r£_ùt
,

389 .
	g¥öt_a›t
 = 
¥öt_ùt
,

	@tc/m_xt_old.c

16 
	~<sy¶og.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<√t/if.h
>

21 
	~<löux/√tfûãr.h
>

22 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

23 
	~<xèbÀs.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~<löux/tc_a˘/tc_ùt.h
>

27 
	~<°dio.h
>

28 
	~<gë›t.h
>

29 
	~<î∫o.h
>

30 
	~<°rög.h
>

31 
	~<√tdb.h
>

32 
	~<°dlib.h
>

33 
	~<˘y≥.h
>

34 
	~<°d¨g.h
>

35 
	~<limôs.h
>

36 
	~<uni°d.h
>

37 
	~<f˙é.h
>

38 
	~<sys/waô.h
>

39 #ifde‡
TC_CONFIG_XT_H


40 
	~"xt-öã∫Æ.h
"

43 #i‚de‡
ALIGN


44 
	#ALIGN
(
x
,
a
Ë
	`__ALIGN_MASK
(x,(
	`ty≥of
(x))◊)-1)

	)

45 
	#__ALIGN_MASK
(
x
,
mask
Ë(((x)+(mask))&~(mask))

	)

48 c⁄° *
	g≤ame
 = "tc-ipt";

49 c⁄° *
	gäame
 = "mangle";

50 c⁄° *
	gpvîsi⁄
 = "0.2";

52 c⁄° *
	gùthooks
[] = {

60 
›ti⁄
 
	g‹igöÆ_›ts
[] = {

65 
›ti⁄
 *
	g›ts
 = 
‹igöÆ_›ts
;

66 
	gglobÆ_›ti⁄_off£t
 = 0;

67 *
	glib_dú
;

68 c⁄° *
	g¥ogøm_vîsi⁄
 = 
XTABLES_VERSION
;

69 c⁄° *
	g¥ogøm_«me
 = "tc-ipt";

70 
aföfo
 
	gaföfo
 = {

71 .
Ámûy
 = 
AF_INET
,

72 .
	glib¥efix
 = "libxt_",

73 .
	gù¥Ÿo
 = 
IPPROTO_IP
,

74 .
	gkmod
 = "ip_tables",

75 .
	gso_ªv_èrgë
 = 
IPT_SO_GET_REVISION_TARGET
,

79 
	#OPTION_OFFSET
 256

	)

82 
	$‰ì_›ts
(
›ti⁄
 *
loˇl_›ts
)

84 i‡(
loˇl_›ts
 !
‹igöÆ_›ts
) {

85 
	`‰ì
(
loˇl_›ts
);

86 
›ts
 = 
‹igöÆ_›ts
;

87 
globÆ_›ti⁄_off£t
 = 0;

89 
	}
}

92 
›ti⁄
 *

93 
	$mîge_›ti⁄s
(
›ti⁄
 *
ﬁd›ts
, c⁄° ›ti⁄ *
√w›ts
,

94 *
›ti⁄_off£t
)

96 
›ti⁄
 *
mîge
;

97 
num_ﬁd
, 
num_√w
, 
i
;

99 
num_ﬁd
 = 0; 
ﬁd›ts
[num_ﬁd].
«me
;Çum_old++) ;

100 
num_√w
 = 0; 
√w›ts
[num_√w].
«me
;Çum_new++) ;

102 *
›ti⁄_off£t
 = 
globÆ_›ti⁄_off£t
 + 
OPTION_OFFSET
;

104 
mîge
 = 
	`mÆloc
( (
›ti⁄
Ë* (
num_√w
 + 
num_ﬁd
 + 1));

105 
	`mem˝y
(
mîge
, 
ﬁd›ts
, 
num_ﬁd
 *  (
›ti⁄
));

106 
i
 = 0; i < 
num_√w
; i++) {

107 
mîge
[
num_ﬁd
 + 
i
] = 
√w›ts
[i];

108 
mîge
[
num_ﬁd
 + 
i
].
vÆ
 +*
›ti⁄_off£t
;

110 
	`mem£t
(
mîge
 + 
num_ﬁd
 + 
num_√w
, 0,  (
›ti⁄
));

112  
mîge
;

113 
	}
}

117 #i‚de‡
TRUE


118 
	#TRUE
 1

	)

120 #i‚de‡
FALSE


121 
	#FALSE
 0

	)

126 
	$check_övî£
(c⁄° 
›ti⁄
[], *
övît
, *
my_›töd
, 
¨gc
)

128 i‡(
›ti⁄
 && 
	`°rcmp
(option, "!") == 0) {

129 i‡(*
övît
)

130 
	`exô_îr‹
(
PARAMETER_PROBLEM
,

132 *
övît
 = 
TRUE
;

133 i‡(
my_›töd
 !
NULL
) {

134 ++*
my_›töd
;

135 i‡(
¨gc
 && *
my_›töd
 >árgc)

136 
	`exô_îr‹
(
PARAMETER_PROBLEM
,

140  
TRUE
;

142  
FALSE
;

143 
	}
}

146 
	$exô_îr‹
(
exôty≥
 
°©us
, c⁄° *
msg
, ...)

148 
va_li°
 
¨gs
;

150 
	`va_°¨t
(
¨gs
, 
msg
);

151 
	`Ârötf
(
°dîr
, "%†v%s: ", 
≤ame
, 
pvîsi⁄
);

152 
	`vÂrötf
(
°dîr
, 
msg
, 
¨gs
);

153 
	`va_íd
(
¨gs
);

154 
	`Ârötf
(
°dîr
, "\n");

156 
	`exô
(
°©us
);

157 
	}
}

160 
	$£t_ªvisi⁄
(*
«me
, 
u_öt8_t
 
ªvisi⁄
)

164 
«me
[
IPT_FUNCTION_MAXNAMELEN
 - 2] = '\0';

165 
«me
[
IPT_FUNCTION_MAXNAMELEN
 - 1] = 
ªvisi⁄
;

166 
	}
}

172 
	$buûd_°
(
xèbÀs_èrgë
 *
èrgë
, 
xt_íåy_èrgë
 *
t
)

175 
size_t
 
size
 =

176 
	`XT_ALIGN
( (
xt_íåy_èrgë
)Ë+ 
èrgë
->
size
;

178 i‡(
NULL
 =
t
) {

179 
èrgë
->
t
 = 
	`fw_ˇŒoc
(1, 
size
);

180 
èrgë
->
t
->
u
.
èrgë_size
 = 
size
;

181 
	`°r˝y
(
èrgë
->
t
->
u
.
u£r
.
«me
,Åarget->name);

182 
	`£t_ªvisi⁄
(
èrgë
->
t
->
u
.
u£r
.
«me
,Å¨gë->
ªvisi⁄
);

184 i‡(
èrgë
->
öô
 !
NULL
)

185 
èrgë
->
	`öô
—¨gë->
t
);

187 
èrgë
->
t
 =Å;

191 
	}
}

193 
ölöe
 
	$£t_lib_dú
()

196 
lib_dú
 = 
	`gëív
("XTABLES_LIBDIR");

197 i‡(!
lib_dú
) {

198 
lib_dú
 = 
	`gëív
("IPTABLES_LIB_DIR");

199 i‡(
lib_dú
)

200 
	`Ârötf
(
°dîr
, "using deprecated IPTABLES_LIB_DIR \n");

202 i‡(
lib_dú
 =
NULL
)

203 
lib_dú
 = 
XT_LIB_DIR
;

205 
	}
}

207 
	$∑r£_ùt
(
a˘i⁄_utû
 *
a
,*
¨gc_p
,

208 ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

210 
xèbÀs_èrgë
 *
m
 = 
NULL
;

211 
ùt_íåy
 
fw
;

212 
π©å
 *
èû
;

213 
c
;

214 
ørgc
 = *
¨gc_p
;

215 **
¨gv
 = *
¨gv_p
;

216 
¨gc
 = 0, 
ürgc
 = 0;

217 
k
[16];

218 
size
 = 0;

219 
iok
 = 0, 
ok
 = 0;

220 
__u32
 
hook
 = 0, 
ödex
 = 0;

222 
	`£t_lib_dú
();

225 
i
;

226 
i
 = 0; i < 
ørgc
; i++) {

227 i‡(
NULL
 =
¨gv
[
i
] || 0 =
	`°rcmp
(argv[i], "action")) {

231 
ürgc
 = 
¨gc
 = 
i
;

234 i‡(
¨gc
 <= 2) {

235 
	`Ârötf
(
°dîr
,"badárgumít†tÿùà%d v†%d \n", 
¨gc
, 
ørgc
);

240 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "j:", 
›ts
, 
NULL
);

241 i‡(
c
 == -1)

243 
c
) {

245 
m
 = 
	`föd_èrgë
(
›èrg
, 
TRY_LOAD
);

246 i‡(
NULL
 !
m
) {

248 i‡(0 > 
	`buûd_°
(
m
, 
NULL
)) {

249 
	`¥ötf
(" %†îr‹ \n", 
m
->
«me
);

252 
›ts
 =

253 
	`mîge_›ti⁄s
(
›ts
, 
m
->
exåa_›ts
,

254 &
m
->
›ti⁄_off£t
);

256 
	`Ârötf
(
°dîr
," faûedÅÿfödÅ¨gë %s\n\n", 
›èrg
);

259 
ok
++;

263 
	`mem£t
(&
fw
, 0,  (fw));

264 i‡(
m
) {

265 
m
->
	`∑r£
(
c
 - m->
›ti⁄_off£t
, 
¨gv
, 0,

266 &
m
->
tÊags
, 
NULL
, &m->
t
);

268 
	`Ârötf
(
°dîr
," faûedÅÿfödÅ¨gë %s\n\n", 
›èrg
);

272 
ok
++;

278 i‡(
ürgc
 > 
›töd
) {

279 i‡(
	`m©ches
(
¨gv
[
›töd
], "index") == 0) {

280 i‡(
	`gë_u32
(&
ödex
, 
¨gv
[
›töd
 + 1], 10)) {

281 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

282 
	`‰ì_›ts
(
›ts
);

285 
iok
++;

287 
›töd
 += 2;

291 i‡(!
ok
 && !
iok
) {

292 
	`Ârötf
(
°dîr
," i± P¨£∏BAD!! (%s)\n", *
¨gv
);

297 i‡(
m
)

298 
m
->
	`föÆ_check
(m->
tÊags
);

301 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

302 i‡(
t
->
tcm_∑ª¡
 !
TC_H_ROOT


303 && 
t
->
tcm_∑ª¡
 =
	`TC_H_MAJ
(
TC_H_INGRESS
)) {

304 
hook
 = 
NF_IP_PRE_ROUTING
;

306 
hook
 = 
NF_IP_POST_ROUTING
;

310 
èû
 = 
	`NLMSG_TAIL
(
n
);

311 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

312 
	`Ârötf
(
°dout
, "èbÀ«me: %†hook: %s\¿", 
äame
, 
ùthooks
[
hook
]);

313 
	`Ârötf
(
°dout
, "\ttarget: ");

315 i‡(
m
)

316 
m
->
	`¥öt
(
NULL
, m->
t
, 0);

317 
	`Ârötf
(
°dout
, " index %d\n", 
ödex
);

319 i‡(
	`°æí
(
äame
) > 16) {

320 
size
 = 16;

321 
k
[15] = 0;

323 
size
 = 1 + 
	`°æí
(
äame
);

325 
	`°∫˝y
(
k
, 
äame
, 
size
);

327 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_TABLE
, 
k
, 
size
);

328 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_HOOK
, &
hook
, 4);

329 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_INDEX
, &
ödex
, 4);

330 i‡(
m
)

331 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_TARG
, 
m
->
t
, m->t->
u
.
èrgë_size
);

332 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

334 
¨gc
 -
›töd
;

335 
¨gv
 +
›töd
;

336 *
¨gc_p
 = 
ørgc
 - 
ürgc
;

337 *
¨gv_p
 = 
¨gv
;

339 
›töd
 = 0;

340 
	`‰ì_›ts
(
›ts
);

342 
m
->
tÊags
=0;

343 
m
->
u£d
=0;

345 i‡(
m
->
t
)

346 
	`‰ì
(
m
->
t
);

351 
	}
}

354 
	$¥öt_ùt
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
)

356 
π©å
 *
tb
[
TCA_IPT_MAX
 + 1];

357 
xt_íåy_èrgë
 *
t
 = 
NULL
;

359 i‡(
¨g
 =
NULL
)

362 
	`£t_lib_dú
();

364 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_IPT_MAX
, 
¨g
);

366 i‡(
tb
[
TCA_IPT_TABLE
] =
NULL
) {

367 
	`Ârötf
(
f
, "[NULL iptÅableÇame ]ássuming mangle ");

369 
	`Ârötf
(
f
, "tablename: %s ",

370 
	`πa_gë©å_°r
(
tb
[
TCA_IPT_TABLE
]));

373 i‡(
tb
[
TCA_IPT_HOOK
] =
NULL
) {

374 
	`Ârötf
(
f
, "[NULL ipt hookÇame ]\n ");

377 
__u32
 
hook
;

378 
hook
 = 
	`πa_gë©å_u32
(
tb
[
TCA_IPT_HOOK
]);

379 
	`Ârötf
(
f
, " hook: %†\n", 
ùthooks
[
hook
]);

382 i‡(
tb
[
TCA_IPT_TARG
] =
NULL
) {

383 
	`Ârötf
(
f
, "\t[NULL iptÅargetÖarameters ] \n");

386 
xèbÀs_èrgë
 *
m
 = 
NULL
;

387 
t
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_TARG
]);

388 
m
 = 
	`föd_èrgë
(
t
->
u
.
u£r
.
«me
, 
TRY_LOAD
);

389 i‡(
NULL
 !
m
) {

390 i‡(0 > 
	`buûd_°
(
m
, 
t
)) {

391 
	`Ârötf
(
°dîr
, " %†îr‹ \n", 
m
->
«me
);

395 
›ts
 =

396 
	`mîge_›ti⁄s
(
›ts
, 
m
->
exåa_›ts
,

397 &
m
->
›ti⁄_off£t
);

399 
	`Ârötf
(
°dîr
, " failedÅo findÅarget %s\n\n",

400 
t
->
u
.
u£r
.
«me
);

403 
	`Ârötf
(
f
, "\ttarget ");

404 
m
->
	`¥öt
(
NULL
, m->
t
, 0);

405 i‡(
tb
[
TCA_IPT_INDEX
] =
NULL
) {

406 
	`Ârötf
(
f
, " [NULL iptÅarget index ]\n");

408 
__u32
 
ödex
;

409 
ödex
 = 
	`πa_gë©å_u32
(
tb
[
TCA_IPT_INDEX
]);

410 
	`Ârötf
(
f
, " \n\tödex %d", 
ödex
);

413 i‡(
tb
[
TCA_IPT_CNT
]) {

414 
tc_˙t
 *
c
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_CNT
]);;

415 
	`Ârötf
(
f
, "Ñe‡%d böd %d", 
c
->
ªf˙t
, c->
böd˙t
);

417 i‡(
show_°©s
) {

418 i‡(
tb
[
TCA_IPT_TM
]) {

419 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_TM
]);

420 
	`¥öt_tm
(
f
,
tm
);

423 
	`Ârötf
(
f
, " \n");

426 
	`‰ì_›ts
(
›ts
);

429 
	}
}

431 
a˘i⁄_utû
 
	gùt_a˘i⁄_utû
 = {

432 .
id
 = "ipt",

433 .
	g∑r£_a›t
 = 
∑r£_ùt
,

434 .
	g¥öt_a›t
 = 
¥öt_ùt
,

	@tc/p_icmp.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~"utûs.h
"

23 
	~"tc_utû.h
"

24 
	~"m_≥dô.h
"

28 
	$∑r£_icmp
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

30 
ªs
 = -1;

32 
¨gc
 = *
¨gc_p
;

33 **
¨gv
 = *
¨gv_p
;

35 i‡(
¨gc
 < 2)

38 i‡(
	`°rcmp
(*
¨gv
, "type") == 0) {

39 
	`NEXT_ARG
();

40 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 0);

41 
d⁄e
;

43 i‡(
	`°rcmp
(*
¨gv
, "code") == 0) {

44 
	`NEXT_ARG
();

45 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 1);

46 
d⁄e
;

50 
d⁄e
:

51 *
¨gc_p
 = 
¨gc
;

52 *
¨gv_p
 = 
¨gv
;

54  
ªs
;

55 
	}
}

57 
m_≥dô_utû
 
	gp_≥dô_icmp
 = {

58 
NULL
,

60 
∑r£_icmp
,

	@tc/p_ip.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~"utûs.h
"

23 
	~"tc_utû.h
"

24 
	~"m_≥dô.h
"

27 
	$∑r£_ù
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

29 
ªs
 = -1;

30 
¨gc
 = *
¨gc_p
;

31 **
¨gv
 = *
¨gv_p
;

33 i‡(
¨gc
 < 2)

36 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

37 
	`NEXT_ARG
();

38 
tkey
->
off
 = 12;

39 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 4, 
TIPV4
,
RU32
,
£l
,
tkey
);

40 
d⁄e
;

42 i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

43 
	`NEXT_ARG
();

44 
tkey
->
off
 = 16;

45 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 4, 
TIPV4
,
RU32
,
£l
,
tkey
);

46 
d⁄e
;

52 i‡(
	`°rcmp
(*
¨gv
, "tos"Ë=0 || 
	`m©ches
(*argv, "dsfield") == 0) {

53 
	`NEXT_ARG
();

54 
tkey
->
off
 = 1;

55 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

56 
d⁄e
;

58 i‡(
	`°rcmp
(*
¨gv
, "ihl") == 0) {

59 
	`NEXT_ARG
();

60 
tkey
->
off
 = 0;

61 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

62 
d⁄e
;

64 i‡(
	`°rcmp
(*
¨gv
, "protocol") == 0) {

65 
	`NEXT_ARG
();

66 
tkey
->
off
 = 9;

67 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

68 
d⁄e
;

71 i‡(
	`m©ches
(*
¨gv
, "precedence") == 0) {

72 
	`NEXT_ARG
();

73 
tkey
->
off
 = 1;

74 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

75 
d⁄e
;

78 i‡(
	`°rcmp
(*
¨gv
, "nofrag") == 0) {

79 
	`NEXT_ARG
();

80 
tkey
->
off
 = 6;

81 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,0x3F,
£l
,
tkey
);

82 
d⁄e
;

85 i‡(
	`°rcmp
(*
¨gv
, "firstfrag") == 0) {

86 
	`NEXT_ARG
();

87 
tkey
->
off
 = 6;

88 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,0x1F,
£l
,
tkey
);

89 
d⁄e
;

91 i‡(
	`°rcmp
(*
¨gv
, "ce") == 0) {

92 
	`NEXT_ARG
();

93 
tkey
->
off
 = 6;

94 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,0x80,
£l
,
tkey
);

95 
d⁄e
;

97 i‡(
	`°rcmp
(*
¨gv
, "df") == 0) {

98 
	`NEXT_ARG
();

99 
tkey
->
off
 = 6;

100 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,0x40,
£l
,
tkey
);

101 
d⁄e
;

103 i‡(
	`°rcmp
(*
¨gv
, "mf") == 0) {

104 
	`NEXT_ARG
();

105 
tkey
->
off
 = 6;

106 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,0x20,
£l
,
tkey
);

107 
d⁄e
;

109 i‡(
	`°rcmp
(*
¨gv
, "dport") == 0) {

110 
	`NEXT_ARG
();

111 
tkey
->
off
 = 22;

112 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 2, 
TU32
,
RU16
,
£l
,
tkey
);

113 
d⁄e
;

115 i‡(
	`°rcmp
(*
¨gv
, "sport") == 0) {

116 
	`NEXT_ARG
();

117 
tkey
->
off
 = 20;

118 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 2, 
TU32
,
RU16
,
£l
,
tkey
);

119 
d⁄e
;

121 i‡(
	`°rcmp
(*
¨gv
, "icmp_type") == 0) {

122 
	`NEXT_ARG
();

123 
tkey
->
off
 = 20;

124 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

125 
d⁄e
;

127 i‡(
	`°rcmp
(*
¨gv
, "icmp_code") == 0) {

128 
	`NEXT_ARG
();

129 
tkey
->
off
 = 20;

130 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

131 
d⁄e
;

135 
d⁄e
:

136 *
¨gc_p
 = 
¨gc
;

137 *
¨gv_p
 = 
¨gv
;

138  
ªs
;

139 
	}
}

142 
	$∑r£_ù6
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

144 
ªs
 = -1;

145  
ªs
;

146 
	}
}

148 
m_≥dô_utû
 
	gp_≥dô_ù
 = {

149 
NULL
,

151 
∑r£_ù
,

155 
m_≥dô_utû
 
	gp_≥dô_ù6
 = {

156 
NULL
,

158 
∑r£_ù6
,

	@tc/p_tcp.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~"utûs.h
"

23 
	~"tc_utû.h
"

24 
	~"m_≥dô.h
"

27 
	$∑r£_t˝
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

29 
ªs
 = -1;

30  
ªs
;

31 
	}
}

32 
m_≥dô_utû
 
	gp_≥dô_t˝
 = {

33 
NULL
,

35 
∑r£_t˝
,

	@tc/p_udp.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~"utûs.h
"

23 
	~"tc_utû.h
"

24 
	~"m_≥dô.h
"

27 
	$∑r£_udp
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

29 
ªs
 = -1;

30  
ªs
;

31 
	}
}

33 
m_≥dô_utû
 
	gp_≥dô_udp
 = {

34 
NULL
,

36 
∑r£_udp
,

	@tc/q_atm.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<˘y≥.h
>

12 
	~<sy¶og.h
>

13 
	~<f˙é.h
>

14 
	~<sys/sockë.h
>

15 
	~<sys/io˘l.h
>

16 
	~<√töë/ö.h
>

17 
	~<¨∑/öë.h
>

18 
	~<°rög.h
>

19 
	~<©m.h
>

20 
	~<löux/©mdev.h
>

21 
	~<löux/©m¨p.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

27 
	#MAX_HDR_LEN
 64

	)

30 
	$©m_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

32 i‡(
¨gc
) {

33 
	`Ârötf
(
°dîr
,"Usage:átm\n");

37 
	}
}

40 
	$ex∂aö
()

42 
	`Ârötf
(
°dîr
, "Usage: ...átm (Övc ADDR | svc ADDR [ sap SAP ] ) "

44 
	`Ârötf
(
°dîr
, " [ hdr HEX... ] [Éxcess ( CLASSID | clp ) ] "

46 
	}
}

49 
	$©m_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

50 
∆msghdr
 *
n
)

52 
sockaddr_©msvc
 
addr
;

53 
©m_qos
 
qos
;

54 
©m_ßp
 
ßp
;

55 
hdr
[
MAX_HDR_LEN
];

56 
__u32
 
ex˚ss
 = 0;

57 
π©å
 *
èû
;

58 
¢dbuf
 = 0;

59 
hdr_Àn
 = -1;

60 
£t_˛ù
 = 0;

61 
s
;

63 
	`mem£t
(&
addr
,0,(addr));

64 (Ë
	`ãxt2qos
("Øl5,ubr:sdu=9180,rx:n⁄e",&
qos
,0);

65 (Ë
	`ãxt2ßp
("bŒi:l2=iso8802",&
ßp
,0);

66 
¨gc
 > 0) {

67 i‡(!
	`°rcmp
(*
¨gv
,"pvc")) {

68 
	`NEXT_ARG
();

69 i‡(
	`ãxt2©m
(*
¨gv
,(
sockaddr
 *Ë&
addr
,

70 (
addr
),
T2A_PVC
 | 
T2A_NAME
) < 0) {

71 
	`ex∂aö
();

75 i‡(!
	`°rcmp
(*
¨gv
,"svc")) {

76 
	`NEXT_ARG
();

77 i‡(
	`ãxt2©m
(*
¨gv
,(
sockaddr
 *Ë&
addr
,

78 (
addr
),
T2A_SVC
 | 
T2A_NAME
) < 0) {

79 
	`ex∂aö
();

83 i‡(!
	`°rcmp
(*
¨gv
,"qos")) {

84 
	`NEXT_ARG
();

85 i‡(
	`ãxt2qos
(*
¨gv
,&
qos
,0) < 0) {

86 
	`ex∂aö
();

90 i‡(!
	`°rcmp
(*
¨gv
,"sndbuf")) {

91 *
íd
;

93 
	`NEXT_ARG
();

94 
¢dbuf
 = 
	`°πﬁ
(*
¨gv
,&
íd
,0);

95 i‡(*
íd
) {

96 
	`ex∂aö
();

100 i‡(!
	`°rcmp
(*
¨gv
,"sap")) {

101 
	`NEXT_ARG
();

102 i‡(
addr
.
ßs_Ámûy
 !
AF_ATMSVC
 ||

103 
	`ãxt2ßp
(*
¨gv
,&
ßp
,
T2A_NAME
) < 0) {

104 
	`ex∂aö
();

108 i‡(!
	`°rcmp
(*
¨gv
,"hdr")) {

109 *
±r
;

110 *
wÆk
;

112 
	`NEXT_ARG
();

113 
±r
 = 
hdr
;

114 
wÆk
 = *
¨gv
; *walk; walk++) {

115 
tmp
;

117 i‡(
±r
 =
hdr
+
MAX_HDR_LEN
) {

118 
	`Ârötf
(
°dîr
,"header isÅooÜong\n");

121 i‡(*
wÆk
 == '.') ;

122 i‡(!
	`isxdigô
(
wÆk
[0]) || !walk[1] ||

123 !
	`isxdigô
(
wÆk
[1])) {

124 
	`ex∂aö
();

127 
	`ssˇnf
(
wÆk
,"%2x",&
tmp
);

128 *
±r
++ = 
tmp
;

129 
wÆk
++;

131 
hdr_Àn
 = 
±r
-
hdr
;

133 i‡(!
	`°rcmp
(*
¨gv
,"excess")) {

134 
	`NEXT_ARG
();

135 i‡(!
	`°rcmp
(*
¨gv
,"˛p")Ë
ex˚ss
 = 0;

136 i‡(
	`gë_tc_˛assid
(&
ex˚ss
,*
¨gv
)) {

137 
	`ex∂aö
();

141 i‡(!
	`°rcmp
(*
¨gv
,"clip")) {

142 
£t_˛ù
 = 1;

145 
	`ex∂aö
();

148 
¨gc
--;

149 
¨gv
++;

151 
s
 = 
	`sockë
(
addr
.
ßs_Ámûy
,
SOCK_DGRAM
,0);

152 i‡(
s
 < 0) {

153 
	`≥º‹
("socket");

156 i‡(
	`£tsock›t
(
s
,
SOL_ATM
,
SO_ATMQOS
,&
qos
,(qos)) < 0) {

157 
	`≥º‹
("SO_ATMQOS");

160 i‡(
¢dbuf
)

161 i‡(
	`£tsock›t
(
s
,
SOL_SOCKET
,
SO_SNDBUF
,&
¢dbuf
,(sndbuf)) < 0) {

162 
	`≥º‹
("SO_SNDBUF");

165 i‡(
addr
.
ßs_Ámûy
 =
AF_ATMSVC
 && 
	`£tsock›t
(
s
,
SOL_ATM
,
SO_ATMSAP
,

166 &
ßp
,(sap)) < 0) {

167 
	`≥º‹
("SO_ATMSAP");

170 i‡(
	`c⁄√˘
(
s
,(
sockaddr
 *Ë&
addr
,addr.
ßs_Ámûy
 =
AF_ATMPVC
 ?

171 (
sockaddr_©mpvc
Ë: (
addr
)) < 0) {

172 
	`≥º‹
("connect");

175 i‡(
£t_˛ù
)

176 i‡(
	`io˘l
(
s
,
ATMARP_MKIP
,0) < 0) {

177 
	`≥º‹
("ioctl ATMARP_MKIP");

180 
èû
 = 
	`NLMSG_TAIL
(
n
);

181 
	`add©å_l
(
n
,1024,
TCA_OPTIONS
,
NULL
,0);

182 
	`add©å_l
(
n
,1024,
TCA_ATM_FD
,&
s
,(s));

183 i‡(
ex˚ss
Ë
	`add©å_l
(
n
,1024,
TCA_ATM_EXCESS
,&excess,(excess));

184 i‡(
hdr_Àn
 !-1Ë
	`add©å_l
(
n
,1024,
TCA_ATM_HDR
,
hdr
,hdr_len);

185 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

187 
	}
}

191 
	$©m_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

193 
π©å
 *
tb
[
TCA_ATM_MAX
+1];

194 
buf„r
[
MAX_ATM_ADDR_LEN
+1];

196 i‡(
›t
 =
NULL
)

199 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_ATM_MAX
, 
›t
);

200 i‡(
tb
[
TCA_ATM_ADDR
]) {

201 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_ATM_ADDR
]) <

202 (
sockaddr_©mpvc
))

203 
	`Ârötf
(
°dîr
,"ATM:áddressÅoo short\n");

205 i‡(
	`©m2ãxt
(
buf„r
,
MAX_ATM_ADDR_LEN
,

206 
	`RTA_DATA
(
tb
[
TCA_ATM_ADDR
]),
A2T_PRETTY
 | 
A2T_NAME
) <

207 0Ë
	`Ârötf
(
°dîr
,"atm2textÉrror\n");

208 
	`Ârötf
(
f
,"pv¯%†",
buf„r
);

211 i‡(
tb
[
TCA_ATM_HDR
]) {

212 
i
;

213 c⁄° 
__u8
 *
hdr
 = 
	`RTA_DATA
(
tb
[
TCA_ATM_HDR
]);

215 
	`Ârötf
(
f
,"hdr");

216 
i
 = 0; i < 
	`RTA_PAYLOAD
(
tb
[
TCA_ATM_HDR
]); i++)

217 
	`Ârötf
(
f
,"%c%02x", 
i
 ? '.' : ' ', 
hdr
[i]);

218 i‡(!
i
Ë
	`Ârötf
(
f
," .");

219 
	`Ârötf
(
f
," ");

221 i‡(
tb
[
TCA_ATM_EXCESS
]) {

222 
__u32
 
ex˚ss
;

224 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_ATM_EXCESS
]Ë< (
ex˚ss
))

225 
	`Ârötf
(
°dîr
,"ATM:Éxcess class IDÅoo short\n");

227 
ex˚ss
 = 
	`πa_gë©å_u32
(
tb
[
TCA_ATM_EXCESS
]);

228 i‡(!
ex˚ss
Ë
	`Ârötf
(
f
,"excess clp ");

230 
buf
[64];

232 
	`¥öt_tc_˛assid
(
buf
,(buf),
ex˚ss
);

233 
	`Ârötf
(
f
,"ex˚s†%†",
buf
);

237 i‡(
tb
[
TCA_ATM_STATE
]) {

238 c⁄° *
m≠
[] = { 
ATM_VS2TXT_MAP
 };

239 
°©e
;

241 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_ATM_STATE
]Ë< (
°©e
))

242 
	`Ârötf
(
°dîr
,"ATM: state fieldÅoo short\n");

244 
°©e
 = *(*Ë
	`RTA_DATA
(
tb
[
TCA_ATM_STATE
]);

245 
	`Ârötf
(
f
,"%†",
m≠
[
°©e
]);

249 
	}
}

252 
qdisc_utû
 
	g©m_qdisc_utû
 = {

253 .
id
 = "atm",

254 .
	g∑r£_q›t
 = 
©m_∑r£_›t
,

255 .
	g¥öt_q›t
 = 
©m_¥öt_›t
,

256 .
	g∑r£_c›t
 = 
©m_∑r£_˛ass_›t
,

257 .
	g¥öt_c›t
 = 
©m_¥öt_›t
,

	@tc/q_cbq.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

25 
	~"tc_cbq.h
"

27 
	$ex∂aö_˛ass
()

29 
	`Ârötf
(
°dîr
, "Usage: ... cbq bandwidth BPSÑate BPS maxburst PKTS [ávpkt BYTES ]\n");

30 
	`Ârötf
(
°dîr
, " [ minburst PKTS ] [ bounded ] [ isolated ]\n");

31 
	`Ârötf
(
°dîr
, " [állot BYTES ] [ mpu BYTES ] [ weight RATE ]\n");

32 
	`Ârötf
(
°dîr
, " [Örio NUMBER ] [ cell BYTES ] [Éwma LOG ]\n");

33 
	`Ârötf
(
°dîr
, " [Éstimator INTERVAL TIME_CONSTANT ]\n");

34 
	`Ârötf
(
°dîr
, " [ split CLASSID ] [ defmap MASK/CHANGE ]\n");

35 
	`Ârötf
(
°dîr
, " [ overhead BYTES ] [Üinklayer TYPE ]\n");

36 
	}
}

38 
	$ex∂aö
()

40 
	`Ârötf
(
°dîr
, "Usage: ... cbq bandwidth BPSávpkt BYTES [ mpu BYTES ]\n");

41 
	`Ârötf
(
°dîr
, " [ cell BYTES ] [Éwma LOG ]\n");

42 
	}
}

44 
	$ex∂aö1
(*
¨g
)

46 
	`Ârötf
(
°dîr
, "IŒegÆ \"%s\"\n", 
¨g
);

47 
	}
}

50 
	$cbq_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

52 
tc_øã•ec
 
r
;

53 
tc_cbq_lss›t
 
lss
;

54 
__u32
 
πab
[256];

55 
mpu
=0, 
avpkt
=0, 
ÆlŸ
=0;

56 
ovîhód
=0;

57 
lökœyî
 = 
LINKLAYER_ETHERNET
;

58 
˚Œ_log
=-1;

59 
ewma_log
=-1;

60 
π©å
 *
èû
;

62 
	`mem£t
(&
lss
, 0, (lss));

63 
	`mem£t
(&
r
, 0, (r));

65 
¨gc
 > 0) {

66 i‡(
	`m©ches
(*
¨gv
, "bandwidth") == 0 ||

67 
	`m©ches
(*
¨gv
, "rate") == 0) {

68 
	`NEXT_ARG
();

69 i‡(
	`gë_øã
(&
r
.
øã
, *
¨gv
)) {

70 
	`ex∂aö1
("bandwidth");

73 } i‡(
	`m©ches
(*
¨gv
, "ewma") == 0) {

74 
	`NEXT_ARG
();

75 i‡(
	`gë_öãgî
(&
ewma_log
, *
¨gv
, 0)) {

76 
	`ex∂aö1
("ewma");

79 i‡(
ewma_log
 > 31) {

80 
	`Ârötf
(
°dîr
, "ewma_log must be < 32\n");

83 } i‡(
	`m©ches
(*
¨gv
, "cell") == 0) {

84 
˚Œ
;

85 
i
;

86 
	`NEXT_ARG
();

87 i‡(
	`gë_size
(&
˚Œ
, *
¨gv
)) {

88 
	`ex∂aö1
("cell");

91 
i
=0; i<32; i++)

92 i‡((1<<
i
Ë=
˚Œ
)

94 i‡(
i
>=32) {

95 
	`Ârötf
(
°dîr
, "cell must be 2^n\n");

98 
˚Œ_log
 = 
i
;

99 } i‡(
	`m©ches
(*
¨gv
, "avpkt") == 0) {

100 
	`NEXT_ARG
();

101 i‡(
	`gë_size
(&
avpkt
, *
¨gv
)) {

102 
	`ex∂aö1
("avpkt");

105 } i‡(
	`m©ches
(*
¨gv
, "mpu") == 0) {

106 
	`NEXT_ARG
();

107 i‡(
	`gë_size
(&
mpu
, *
¨gv
)) {

108 
	`ex∂aö1
("mpu");

111 } i‡(
	`m©ches
(*
¨gv
, "allot") == 0) {

112 
	`NEXT_ARG
();

114 i‡(
	`gë_size
(&
ÆlŸ
, *
¨gv
)) {

115 
	`ex∂aö1
("allot");

118 } i‡(
	`m©ches
(*
¨gv
, "overhead") == 0) {

119 
	`NEXT_ARG
();

120 i‡(
	`gë_u16
(&
ovîhód
, *
¨gv
, 10)) {

121 
	`ex∂aö1
("overhead");  -1;

123 } i‡(
	`m©ches
(*
¨gv
, "linklayer") == 0) {

124 
	`NEXT_ARG
();

125 i‡(
	`gë_lökœyî
(&
lökœyî
, *
¨gv
)) {

126 
	`ex∂aö1
("linklayer");  -1;

128 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

129 
	`ex∂aö
();

132 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

133 
	`ex∂aö
();

136 
¨gc
--; 
¨gv
++;

141 i‡(
r
.
øã
 == 0) {

142 
	`Ârötf
(
°dîr
, "CBQ: bandwidth isÑequiredÖarameter.\n");

145 i‡(
avpkt
 == 0) {

146 
	`Ârötf
(
°dîr
, "CBQ: \"avpkt\" isÑequired.\n");

149 i‡(
ÆlŸ
 < (
avpkt
*3)/2)

150 
ÆlŸ
 = (
avpkt
*3)/2;

152 
r
.
mpu
 = mpu;

153 
r
.
ovîhód
 = overhead;

154 i‡(
	`tc_ˇlc_πabÀ
(&
r
, 
πab
, 
˚Œ_log
, 
ÆlŸ
, 
lökœyî
) < 0) {

155 
	`Ârötf
(
°dîr
, "CBQ: failedÅo calculateÑateÅable.\n");

159 i‡(
ewma_log
 < 0)

160 
ewma_log
 = 
TC_CBQ_DEF_EWMA
;

161 
lss
.
ewma_log
 =Éwma_log;

162 
lss
.
maxidÀ
 = 
	`tc_ˇlc_xmôtime
(
r
.
øã
, 
avpkt
);

163 
lss
.
ch™ge
 = 
TCF_CBQ_LSS_MAXIDLE
|
TCF_CBQ_LSS_EWMA
|
TCF_CBQ_LSS_AVPKT
;

164 
lss
.
avpkt
 =ávpkt;

166 
èû
 = 
	`NLMSG_TAIL
(
n
);

167 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

168 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_RATE
, &
r
, (r));

169 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_LSSOPT
, &
lss
, (lss));

170 
	`add©å_l
(
n
, 3024, 
TCA_CBQ_RTAB
, 
πab
, 1024);

171 i‡(
show_øw
) {

172 
i
;

173 
i
=0; i<256; i++)

174 
	`¥ötf
("%u ", 
πab
[
i
]);

175 
	`¥ötf
("\n");

177 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

179 
	}
}

181 
	$cbq_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

183 
wº_ok
=0, 
f›t_ok
=0;

184 
tc_øã•ec
 
r
;

185 
tc_cbq_lss›t
 
lss
;

186 
tc_cbq_wº›t
 
wº
;

187 
tc_cbq_f›t
 
f›t
;

188 
tc_cbq_ovl
 
ovl
;

189 
__u32
 
πab
[256];

190 
mpu
=0;

191 
˚Œ_log
=-1;

192 
ewma_log
=-1;

193 
bndw
 = 0;

194 
möbur°
=0, 
maxbur°
=0;

195 
ovîhód
=0;

196 
lökœyî
 = 
LINKLAYER_ETHERNET
;

197 
π©å
 *
èû
;

199 
	`mem£t
(&
r
, 0, (r));

200 
	`mem£t
(&
lss
, 0, (lss));

201 
	`mem£t
(&
wº
, 0, (wrr));

202 
	`mem£t
(&
f›t
, 0, (fopt));

203 
	`mem£t
(&
ovl
, 0, (ovl));

205 
¨gc
 > 0) {

206 i‡(
	`m©ches
(*
¨gv
, "rate") == 0) {

207 
	`NEXT_ARG
();

208 i‡(
	`gë_øã
(&
r
.
øã
, *
¨gv
)) {

209 
	`ex∂aö1
("rate");

212 } i‡(
	`m©ches
(*
¨gv
, "bandwidth") == 0) {

213 
	`NEXT_ARG
();

214 i‡(
	`gë_øã
(&
bndw
, *
¨gv
)) {

215 
	`ex∂aö1
("bandwidth");

218 } i‡(
	`m©ches
(*
¨gv
, "minidle") == 0) {

219 
	`NEXT_ARG
();

220 i‡(
	`gë_u32
(&
lss
.
möidÀ
, *
¨gv
, 0)) {

221 
	`ex∂aö1
("minidle");

224 
lss
.
ch™ge
 |
TCF_CBQ_LSS_MINIDLE
;

225 } i‡(
	`m©ches
(*
¨gv
, "minburst") == 0) {

226 
	`NEXT_ARG
();

227 i‡(
	`gë_u32
(&
möbur°
, *
¨gv
, 0)) {

228 
	`ex∂aö1
("minburst");

231 
lss
.
ch™ge
 |
TCF_CBQ_LSS_OFFTIME
;

232 } i‡(
	`m©ches
(*
¨gv
, "maxburst") == 0) {

233 
	`NEXT_ARG
();

234 i‡(
	`gë_u32
(&
maxbur°
, *
¨gv
, 0)) {

235 
	`ex∂aö1
("maxburst");

238 
lss
.
ch™ge
 |
TCF_CBQ_LSS_MAXIDLE
;

239 } i‡(
	`m©ches
(*
¨gv
, "bounded") == 0) {

240 
lss
.
Êags
 |
TCF_CBQ_LSS_BOUNDED
;

241 
lss
.
ch™ge
 |
TCF_CBQ_LSS_FLAGS
;

242 } i‡(
	`m©ches
(*
¨gv
, "borrow") == 0) {

243 
lss
.
Êags
 &~
TCF_CBQ_LSS_BOUNDED
;

244 
lss
.
ch™ge
 |
TCF_CBQ_LSS_FLAGS
;

245 } i‡(
	`m©ches
(*
¨gv
, "isolated") == 0) {

246 
lss
.
Êags
 |
TCF_CBQ_LSS_ISOLATED
;

247 
lss
.
ch™ge
 |
TCF_CBQ_LSS_FLAGS
;

248 } i‡(
	`m©ches
(*
¨gv
, "sharing") == 0) {

249 
lss
.
Êags
 &~
TCF_CBQ_LSS_ISOLATED
;

250 
lss
.
ch™ge
 |
TCF_CBQ_LSS_FLAGS
;

251 } i‡(
	`m©ches
(*
¨gv
, "ewma") == 0) {

252 
	`NEXT_ARG
();

253 i‡(
	`gë_öãgî
(&
ewma_log
, *
¨gv
, 0)) {

254 
	`ex∂aö1
("ewma");

257 i‡(
ewma_log
 > 31) {

258 
	`Ârötf
(
°dîr
, "ewma_log must be < 32\n");

261 
lss
.
ch™ge
 |
TCF_CBQ_LSS_EWMA
;

262 } i‡(
	`m©ches
(*
¨gv
, "cell") == 0) {

263 
˚Œ
;

264 
i
;

265 
	`NEXT_ARG
();

266 i‡(
	`gë_size
(&
˚Œ
, *
¨gv
)) {

267 
	`ex∂aö1
("cell");

270 
i
=0; i<32; i++)

271 i‡((1<<
i
Ë=
˚Œ
)

273 i‡(
i
>=32) {

274 
	`Ârötf
(
°dîr
, "cell must be 2^n\n");

277 
˚Œ_log
 = 
i
;

278 } i‡(
	`m©ches
(*
¨gv
, "prio") == 0) {

279 
¥io
;

280 
	`NEXT_ARG
();

281 i‡(
	`gë_u32
(&
¥io
, *
¨gv
, 0)) {

282 
	`ex∂aö1
("prio");

285 i‡(
¥io
 > 
TC_CBQ_MAXPRIO
) {

286 
	`Ârötf
(
°dîr
, "\"¥io\" mu° bênumbî i¿thêøngê1...%d\n", 
TC_CBQ_MAXPRIO
);

289 
wº
.
¥i‹ôy
 = 
¥io
;

290 
wº_ok
++;

291 } i‡(
	`m©ches
(*
¨gv
, "allot") == 0) {

292 
	`NEXT_ARG
();

293 i‡(
	`gë_size
(&
wº
.
ÆlŸ
, *
¨gv
)) {

294 
	`ex∂aö1
("allot");

297 } i‡(
	`m©ches
(*
¨gv
, "avpkt") == 0) {

298 
	`NEXT_ARG
();

299 i‡(
	`gë_size
(&
lss
.
avpkt
, *
¨gv
)) {

300 
	`ex∂aö1
("avpkt");

303 
lss
.
ch™ge
 |
TCF_CBQ_LSS_AVPKT
;

304 } i‡(
	`m©ches
(*
¨gv
, "mpu") == 0) {

305 
	`NEXT_ARG
();

306 i‡(
	`gë_size
(&
mpu
, *
¨gv
)) {

307 
	`ex∂aö1
("mpu");

310 } i‡(
	`m©ches
(*
¨gv
, "weight") == 0) {

311 
	`NEXT_ARG
();

312 i‡(
	`gë_size
(&
wº
.
weight
, *
¨gv
)) {

313 
	`ex∂aö1
("weight");

316 
wº_ok
++;

317 } i‡(
	`m©ches
(*
¨gv
, "split") == 0) {

318 
	`NEXT_ARG
();

319 i‡(
	`gë_tc_˛assid
(&
f›t
.
•lô
, *
¨gv
)) {

320 
	`Ârötf
(
°dîr
, "Invalid splitÇode ID.\n");

323 
f›t_ok
++;

324 } i‡(
	`m©ches
(*
¨gv
, "defmap") == 0) {

325 
îr
;

326 
	`NEXT_ARG
();

327 
îr
 = 
	`ssˇnf
(*
¨gv
, "%08x/%08x", &
f›t
.
defm≠
, &f›t.
defch™ge
);

328 i‡(
îr
 < 1) {

329 
	`Ârötf
(
°dîr
, "Invalid defmap, should be MASK32[/MASK]\n");

332 i‡(
îr
 == 1)

333 
f›t
.
defch™ge
 = ~0;

334 
f›t_ok
++;

335 } i‡(
	`m©ches
(*
¨gv
, "overhead") == 0) {

336 
	`NEXT_ARG
();

337 i‡(
	`gë_u16
(&
ovîhód
, *
¨gv
, 10)) {

338 
	`ex∂aö1
("overhead");  -1;

340 } i‡(
	`m©ches
(*
¨gv
, "linklayer") == 0) {

341 
	`NEXT_ARG
();

342 i‡(
	`gë_lökœyî
(&
lökœyî
, *
¨gv
)) {

343 
	`ex∂aö1
("linklayer");  -1;

345 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

346 
	`ex∂aö_˛ass
();

349 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

350 
	`ex∂aö_˛ass
();

353 
¨gc
--; 
¨gv
++;

359 i‡(
r
.
øã
) {

360 
pktsize
 = 
wº
.
ÆlŸ
;

361 i‡(
wº
.
ÆlŸ
 < (
lss
.
avpkt
*3)/2)

362 
wº
.
ÆlŸ
 = (
lss
.
avpkt
*3)/2;

363 
r
.
mpu
 = mpu;

364 
r
.
ovîhód
 = overhead;

365 i‡(
	`tc_ˇlc_πabÀ
(&
r
, 
πab
, 
˚Œ_log
, 
pktsize
, 
lökœyî
) < 0) {

366 
	`Ârötf
(
°dîr
, "CBQ: failedÅo calculateÑateÅable.\n");

370 i‡(
ewma_log
 < 0)

371 
ewma_log
 = 
TC_CBQ_DEF_EWMA
;

372 
lss
.
ewma_log
 =Éwma_log;

373 i‡(
lss
.
ch™ge
&(
TCF_CBQ_LSS_OFFTIME
|
TCF_CBQ_LSS_MAXIDLE
)) {

374 i‡(
lss
.
avpkt
 == 0) {

375 
	`Ârötf
(
°dîr
, "CBQ:ávpkt isÑequired for max/minburst.\n");

378 i‡(
bndw
==0 || 
r
.
øã
 == 0) {

379 
	`Ârötf
(
°dîr
, "CBQ: bandwidth&rateáreÑequired for max/minburst.\n");

383 i‡(
wº
.
¥i‹ôy
 =0 && (
n
->
∆msg_Êags
&
NLM_F_EXCL
)) {

384 
wº_ok
 = 1;

385 
wº
.
¥i‹ôy
 = 
TC_CBQ_MAXPRIO
;

386 i‡(
wº
.
ÆlŸ
 == 0)

387 
wº
.
ÆlŸ
 = (
lss
.
avpkt
*3)/2;

389 i‡(
wº_ok
) {

390 i‡(
wº
.
weight
 == 0)

391 
wº
.
weight
 = (wº.
¥i‹ôy
 =
TC_CBQ_MAXPRIO
Ë? 1 : 
r
.
øã
;

392 i‡(
wº
.
ÆlŸ
 == 0) {

393 
	`Ârötf
(
°dîr
, "CBQ: \"allot\" isÑequiredÅo set WRRÖarameters.\n");

397 i‡(
lss
.
ch™ge
&
TCF_CBQ_LSS_MAXIDLE
) {

398 
lss
.
maxidÀ
 = 
	`tc_cbq_ˇlc_maxidÀ
(
bndw
, 
r
.
øã
,Üss.
avpkt
, 
ewma_log
, 
maxbur°
);

399 
lss
.
ch™ge
 |
TCF_CBQ_LSS_MAXIDLE
;

400 
lss
.
ch™ge
 |
TCF_CBQ_LSS_EWMA
|
TCF_CBQ_LSS_AVPKT
;

402 i‡(
lss
.
ch™ge
&
TCF_CBQ_LSS_OFFTIME
) {

403 
lss
.
of·ime
 = 
	`tc_cbq_ˇlc_of·ime
(
bndw
, 
r
.
øã
,Üss.
avpkt
, 
ewma_log
, 
möbur°
);

404 
lss
.
ch™ge
 |
TCF_CBQ_LSS_OFFTIME
;

405 
lss
.
ch™ge
 |
TCF_CBQ_LSS_EWMA
|
TCF_CBQ_LSS_AVPKT
;

407 i‡(
lss
.
ch™ge
&
TCF_CBQ_LSS_MINIDLE
) {

408 
lss
.
möidÀ
 <<lss.
ewma_log
;

409 
lss
.
ch™ge
 |
TCF_CBQ_LSS_EWMA
;

412 
èû
 = 
	`NLMSG_TAIL
(
n
);

413 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

414 i‡(
lss
.
ch™ge
) {

415 
lss
.
ch™ge
 |
TCF_CBQ_LSS_FLAGS
;

416 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_LSSOPT
, &
lss
, (lss));

418 i‡(
wº_ok
)

419 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_WRROPT
, &
wº
, (wrr));

420 i‡(
f›t_ok
)

421 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_FOPT
, &
f›t
, (fopt));

422 i‡(
r
.
øã
) {

423 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_RATE
, &
r
, (r));

424 
	`add©å_l
(
n
, 3024, 
TCA_CBQ_RTAB
, 
πab
, 1024);

425 i‡(
show_øw
) {

426 
i
;

427 
i
=0; i<256; i++)

428 
	`¥ötf
("%u ", 
πab
[
i
]);

429 
	`¥ötf
("\n");

432 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

434 
	}
}

437 
	$cbq_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

439 
π©å
 *
tb
[
TCA_CBQ_MAX
+1];

440 
tc_øã•ec
 *
r
 = 
NULL
;

441 
tc_cbq_lss›t
 *
lss
 = 
NULL
;

442 
tc_cbq_wº›t
 *
wº
 = 
NULL
;

443 
tc_cbq_f›t
 *
f›t
 = 
NULL
;

444 
tc_cbq_ovl
 *
ovl
 = 
NULL
;

445 
lökœyî
;

446 
	`SPRINT_BUF
(
b1
);

447 
	`SPRINT_BUF
(
b2
);

449 i‡(
›t
 =
NULL
)

452 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_CBQ_MAX
, 
›t
);

454 i‡(
tb
[
TCA_CBQ_RATE
]) {

455 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_RATE
]Ë< (*
r
))

456 
	`Ârötf
(
°dîr
, "CBQ:Åoo shortÑate opt\n");

458 
r
 = 
	`RTA_DATA
(
tb
[
TCA_CBQ_RATE
]);

460 i‡(
tb
[
TCA_CBQ_LSSOPT
]) {

461 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_LSSOPT
]Ë< (*
lss
))

462 
	`Ârötf
(
°dîr
, "CBQ:Åoo shortÜss opt\n");

464 
lss
 = 
	`RTA_DATA
(
tb
[
TCA_CBQ_LSSOPT
]);

466 i‡(
tb
[
TCA_CBQ_WRROPT
]) {

467 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_WRROPT
]Ë< (*
wº
))

468 
	`Ârötf
(
°dîr
, "CBQ:Åoo short wrr opt\n");

470 
wº
 = 
	`RTA_DATA
(
tb
[
TCA_CBQ_WRROPT
]);

472 i‡(
tb
[
TCA_CBQ_FOPT
]) {

473 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_FOPT
]Ë< (*
f›t
))

474 
	`Ârötf
(
°dîr
, "CBQ:Åoo short fopt\n");

476 
f›t
 = 
	`RTA_DATA
(
tb
[
TCA_CBQ_FOPT
]);

478 i‡(
tb
[
TCA_CBQ_OVL_STRATEGY
]) {

479 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_OVL_STRATEGY
]Ë< (*
ovl
))

480 
	`Ârötf
(
°dîr
, "CBQ:Åoo short overlimit strategy %u/%u\n",

481 (Ë
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_OVL_STRATEGY
]),

482 (Ë(*
ovl
));

484 
ovl
 = 
	`RTA_DATA
(
tb
[
TCA_CBQ_OVL_STRATEGY
]);

487 i‡(
r
) {

488 
buf
[64];

489 
	`¥öt_øã
(
buf
, (buf), 
r
->
øã
);

490 
	`Ârötf
(
f
, "øã %†", 
buf
);

491 
lökœyî
 = (
r
->lökœyî & 
TC_LINKLAYER_MASK
);

492 i‡(
lökœyî
 > 
TC_LINKLAYER_ETHERNET
 || 
show_dëaûs
)

493 
	`Ârötf
(
f
, "lökœyî %†", 
	`•röt_lökœyî
(
lökœyî
, 
b2
));

494 i‡(
show_dëaûs
) {

495 
	`Ârötf
(
f
, "˚Œ %ub ", 1<<
r
->
˚Œ_log
);

496 i‡(
r
->
mpu
)

497 
	`Ârötf
(
f
, "mpu %ub ", 
r
->
mpu
);

498 i‡(
r
->
ovîhód
)

499 
	`Ârötf
(
f
, "ovîhód %ub ", 
r
->
ovîhód
);

502 i‡(
lss
 &&Üss->
Êags
) {

503 
comma
=0;

504 
	`Ârötf
(
f
, "(");

505 i‡(
lss
->
Êags
&
TCF_CBQ_LSS_BOUNDED
) {

506 
	`Ârötf
(
f
, "bounded");

507 
comma
=1;

509 i‡(
lss
->
Êags
&
TCF_CBQ_LSS_ISOLATED
) {

510 i‡(
comma
)

511 
	`Ârötf
(
f
, ",");

512 
	`Ârötf
(
f
, "isolated");

514 
	`Ârötf
(
f
, ") ");

516 i‡(
wº
) {

517 i‡(
wº
->
¥i‹ôy
 !
TC_CBQ_MAXPRIO
)

518 
	`Ârötf
(
f
, "¥iÿ%u", 
wº
->
¥i‹ôy
);

520 
	`Ârötf
(
f
, "prioÇo-transmit");

521 i‡(
show_dëaûs
) {

522 
buf
[64];

523 
	`Ârötf
(
f
, "/%u ", 
wº
->
˝ri‹ôy
);

524 i‡(
wº
->
weight
 != 1) {

525 
	`¥öt_øã
(
buf
, (buf), 
wº
->
weight
);

526 
	`Ârötf
(
f
, "weighà%†", 
buf
);

528 i‡(
wº
->
ÆlŸ
)

529 
	`Ârötf
(
f
, "ÆlŸ %ub ", 
wº
->
ÆlŸ
);

532 i‡(
lss
 && 
show_dëaûs
) {

533 
	`Ârötf
(
f
, "\∆evñ %uÉwm®%uávpkà%ub ", 
lss
->
Àvñ
,Üss->
ewma_log
,Üss->
avpkt
);

534 i‡(
lss
->
maxidÀ
) {

535 
	`Ârötf
(
f
, "maxidÀ %†", 
	`•röt_ticks
(
lss
->
maxidÀ
>>lss->
ewma_log
, 
b1
));

536 i‡(
show_øw
)

537 
	`Ârötf
(
f
, "[%08x] ", 
lss
->
maxidÀ
);

539 i‡(
lss
->
möidÀ
!=0x7fffffff) {

540 
	`Ârötf
(
f
, "möidÀ %†", 
	`•röt_ticks
(
lss
->
möidÀ
>>lss->
ewma_log
, 
b1
));

541 i‡(
show_øw
)

542 
	`Ârötf
(
f
, "[%08x] ", 
lss
->
möidÀ
);

544 i‡(
lss
->
of·ime
) {

545 
	`Ârötf
(
f
, "of·imê%†", 
	`•röt_ticks
(
lss
->
of·ime
, 
b1
));

546 i‡(
show_øw
)

547 
	`Ârötf
(
f
, "[%08x] ", 
lss
->
of·ime
);

550 i‡(
f›t
 && 
show_dëaûs
) {

551 
buf
[64];

552 
	`¥öt_tc_˛assid
(
buf
, (buf), 
f›t
->
•lô
);

553 
	`Ârötf
(
f
, "\n•lô %†", 
buf
);

554 i‡(
f›t
->
defm≠
) {

555 
	`Ârötf
(
f
, "defm≠ %08x", 
f›t
->
defm≠
);

559 
	}
}

561 
	$cbq_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
x°©s
)

563 
tc_cbq_x°©s
 *
°
;

565 i‡(
x°©s
 =
NULL
)

568 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

571 
°
 = 
	`RTA_DATA
(
x°©s
);

572 
	`Ârötf
(
f
, " b‹rowed %u ovîa˘i⁄†%uávgidÀ %g undîtimê%g", 
°
->
b‹rows
,

573 
°
->
ovîa˘i⁄s
, ()°->
avgidÀ
, ()°->
undîtime
);

575 
	}
}

577 
qdisc_utû
 
	gcbq_qdisc_utû
 = {

578 .
id
 = "cbq",

579 .
	g∑r£_q›t
 = 
cbq_∑r£_›t
,

580 .
	g¥öt_q›t
 = 
cbq_¥öt_›t
,

581 .
	g¥öt_x°©s
 = 
cbq_¥öt_x°©s
,

582 .
	g∑r£_c›t
 = 
cbq_∑r£_˛ass_›t
,

583 .
	g¥öt_c›t
 = 
cbq_¥öt_›t
,

	@tc/q_choke.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

21 
	~<m©h.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	~"tc_ªd.h
"

28 
	$ex∂aö
()

30 
	`Ârötf
(
°dîr
, "Usage: ... chokeÜimit PACKETS bandwidth KBPS [ecn]\n");

31 
	`Ârötf
(
°dîr
, " [ min PACKETS ] [ max PACKETS ] [ burst PACKETS ]\n");

32 
	}
}

34 
	$choke_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

35 
∆msghdr
 *
n
)

37 
tc_ªd_q›t
 
›t
;

38 
bur°
 = 0;

39 
avpkt
 = 1000;

40 
¥obabûôy
 = 0.02;

41 
øã
 = 0;

42 
e˙_ok
 = 0;

43 
wlog
;

44 
__u8
 
sbuf
[256];

45 
__u32
 
max_P
;

46 
π©å
 *
èû
;

48 
	`mem£t
(&
›t
, 0, (opt));

50 
¨gc
 > 0) {

51 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

52 
	`NEXT_ARG
();

53 i‡(
	`gë_unsig√d
(&
›t
.
limô
, *
¨gv
, 0)) {

54 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

57 } i‡(
	`°rcmp
(*
¨gv
, "bandwidth") == 0) {

58 
	`NEXT_ARG
();

59 i‡(
	`gë_øã
(&
øã
, *
¨gv
)) {

60 
	`Ârötf
(
°dîr
, "Illegal \"bandwidth\"\n");

63 } i‡(
	`°rcmp
(*
¨gv
, "ecn") == 0) {

64 
e˙_ok
 = 1;

65 } i‡(
	`°rcmp
(*
¨gv
, "min") == 0) {

66 
	`NEXT_ARG
();

67 i‡(
	`gë_unsig√d
(&
›t
.
qth_mö
, *
¨gv
, 0)) {

68 
	`Ârötf
(
°dîr
, "Illegal \"min\"\n");

71 } i‡(
	`°rcmp
(*
¨gv
, "max") == 0) {

72 
	`NEXT_ARG
();

73 i‡(
	`gë_unsig√d
(&
›t
.
qth_max
, *
¨gv
, 0)) {

74 
	`Ârötf
(
°dîr
, "Illegal \"max\"\n");

77 } i‡(
	`°rcmp
(*
¨gv
, "burst") == 0) {

78 
	`NEXT_ARG
();

79 i‡(
	`gë_unsig√d
(&
bur°
, *
¨gv
, 0)) {

80 
	`Ârötf
(
°dîr
, "Illegal \"burst\"\n");

83 } i‡(
	`°rcmp
(*
¨gv
, "avpkt") == 0) {

84 
	`NEXT_ARG
();

85 i‡(
	`gë_size
(&
avpkt
, *
¨gv
)) {

86 
	`Ârötf
(
°dîr
, "Illegal \"avpkt\"\n");

89 } i‡(
	`°rcmp
(*
¨gv
, "probability") == 0) {

90 
	`NEXT_ARG
();

91 i‡(
	`ssˇnf
(*
¨gv
, "%lg", &
¥obabûôy
) != 1) {

92 
	`Ârötf
(
°dîr
, "Illegal \"probability\"\n");

95 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

96 
	`ex∂aö
();

99 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

100 
	`ex∂aö
();

103 
¨gc
--; 
¨gv
++;

106 i‡(!
øã
 || !
›t
.
limô
) {

107 
	`Ârötf
(
°dîr
, "RequiredÖarameter (bandwidth,Üimit) is missing\n");

115 i‡(!
›t
.
qth_max
)

116 
›t
.
qth_max
 = o±.
limô
 / 4;

117 i‡(!
›t
.
qth_mö
)

118 
›t
.
qth_mö
 = o±.
qth_max
 / 3;

119 i‡(!
bur°
)

120 
bur°
 = (2 * 
›t
.
qth_mö
 + o±.
qth_max
) / 3;

122 i‡(
›t
.
qth_max
 > o±.
limô
) {

123 
	`Ârötf
(
°dîr
, "\"max\" isÜargerÅhan \"limit\"\n");

127 i‡(
›t
.
qth_mö
 >›t.
qth_max
) {

128 
	`Ârötf
(
°dîr
, "\"min\" isÇot smallerÅhan \"max\"\n");

132 
wlog
 = 
	`tc_ªd_evÆ_ewma
(
›t
.
qth_mö
*
avpkt
, 
bur°
,ávpkt);

133 i‡(
wlog
 < 0) {

134 
	`Ârötf
(
°dîr
, "CHOKE: failedÅo calculate EWMA constant.\n");

137 i‡(
wlog
 >= 10)

138 
	`Ârötf
(
°dîr
, "CHOKE: WARNING. Bur° %d sìm†tÿbêtoÿœrge.\n", 
bur°
);

139 
›t
.
Wlog
 = 
wlog
;

141 
wlog
 = 
	`tc_ªd_evÆ_P
(
›t
.
qth_mö
*
avpkt
, o±.
qth_max
*avpkt, 
¥obabûôy
);

142 i‡(
wlog
 < 0) {

143 
	`Ârötf
(
°dîr
, "CHOKE: failedÅo calculateÖrobability.\n");

146 
›t
.
Plog
 = 
wlog
;

148 
wlog
 = 
	`tc_ªd_evÆ_idÀ_dampög
(
›t
.
Wlog
, 
avpkt
, 
øã
, 
sbuf
);

149 i‡(
wlog
 < 0) {

150 
	`Ârötf
(
°dîr
, "CHOKE: failedÅo calculate idle dampingÅable.\n");

153 
›t
.
S˚Œ_log
 = 
wlog
;

154 i‡(
e˙_ok
)

155 
›t
.
Êags
 |
TC_RED_ECN
;

157 
èû
 = 
	`NLMSG_TAIL
(
n
);

158 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

159 
	`add©å_l
(
n
, 1024, 
TCA_CHOKE_PARMS
, &
›t
, (opt));

160 
	`add©å_l
(
n
, 1024, 
TCA_CHOKE_STAB
, 
sbuf
, 256);

161 
max_P
 = 
¥obabûôy
 * 
	`pow
(2, 32);

162 
	`add©å_l
(
n
, 1024, 
TCA_CHOKE_MAX_P
, &
max_P
, (max_P));

163 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

165 
	}
}

167 
	$choke_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

169 
π©å
 *
tb
[
TCA_CHOKE_MAX
+1];

170 c⁄° 
tc_ªd_q›t
 *
q›t
;

171 
__u32
 
max_P
 = 0;

173 i‡(
›t
 =
NULL
)

176 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_CHOKE_MAX
, 
›t
);

178 i‡(
tb
[
TCA_CHOKE_PARMS
] =
NULL
)

180 
q›t
 = 
	`RTA_DATA
(
tb
[
TCA_CHOKE_PARMS
]);

181 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_CHOKE_PARMS
]Ë< (*
q›t
))

183 i‡(
tb
[
TCA_CHOKE_MAX_P
] &&

184 
	`RTA_PAYLOAD
(
tb
[
TCA_CHOKE_MAX_P
]Ë>(
__u32
))

185 
max_P
 = 
	`πa_gë©å_u32
(
tb
[
TCA_CHOKE_MAX_P
]);

187 
	`Ârötf
(
f
, "limit %up min %up max %up ",

188 
q›t
->
limô
, q›t->
qth_mö
, q›t->
qth_max
);

190 i‡(
q›t
->
Êags
 & 
TC_RED_ECN
)

191 
	`Ârötf
(
f
, "ecn ");

193 i‡(
show_dëaûs
) {

194 
	`Ârötf
(
f
, "ewm®%u ", 
q›t
->
Wlog
);

195 i‡(
max_P
)

196 
	`Ârötf
(
f
, "¥obabûôy %g ", 
max_P
 / 
	`pow
(2, 32));

198 
	`Ârötf
(
f
, "Plog %u ", 
q›t
->
Plog
);

199 
	`Ârötf
(
f
, "S˚Œ_log %u", 
q›t
->
S˚Œ_log
);

202 
	}
}

204 
	$choke_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
,

205 
π©å
 *
x°©s
)

207 
tc_choke_x°©s
 *
°
;

209 i‡(
x°©s
 =
NULL
)

212 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

215 
°
 = 
	`RTA_DATA
(
x°©s
);

216 
	`Ârötf
(
f
, " marked %uÉarly %uÖdrop %u other %u matched %u",

217 
°
->
m¨ked
, st->
óæy
, st->
pdr›
, st->
Ÿhî
, st->
m©ched
);

220 
	}
}

222 
qdisc_utû
 
	gchoke_qdisc_utû
 = {

223 .
id
 = "choke",

224 .
	g∑r£_q›t
 = 
choke_∑r£_›t
,

225 .
	g¥öt_q›t
 = 
choke_¥öt_›t
,

226 .
	g¥öt_x°©s
 = 
choke_¥öt_x°©s
,

	@tc/q_codel.c

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<uni°d.h
>

44 
	~<sy¶og.h
>

45 
	~<f˙é.h
>

46 
	~<sys/sockë.h
>

47 
	~<√töë/ö.h
>

48 
	~<¨∑/öë.h
>

49 
	~<°rög.h
>

51 
	~"utûs.h
"

52 
	~"tc_utû.h
"

54 
	$ex∂aö
()

56 
	`Ârötf
(
°dîr
, "Usage: ... codel [Üimit PACKETS ] [Åarget TIME]\n");

57 
	`Ârötf
(
°dîr
, " [ interval TIME ] [Écn |Çoecn ]\n");

58 
	`Ârötf
(
°dîr
, " [ ce_threshold TIME ]\n");

59 
	}
}

61 
	$codñ_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

62 
∆msghdr
 *
n
)

64 
limô
 = 0;

65 
èrgë
 = 0;

66 
öãrvÆ
 = 0;

67 
˚_thªshﬁd
 = ~0U;

68 
e˙
 = -1;

69 
π©å
 *
èû
;

71 
¨gc
 > 0) {

72 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

73 
	`NEXT_ARG
();

74 i‡(
	`gë_unsig√d
(&
limô
, *
¨gv
, 0)) {

75 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

78 } i‡(
	`°rcmp
(*
¨gv
, "target") == 0) {

79 
	`NEXT_ARG
();

80 i‡(
	`gë_time
(&
èrgë
, *
¨gv
)) {

81 
	`Ârötf
(
°dîr
, "Illegal \"target\"\n");

84 } i‡(
	`°rcmp
(*
¨gv
, "ce_threshold") == 0) {

85 
	`NEXT_ARG
();

86 i‡(
	`gë_time
(&
˚_thªshﬁd
, *
¨gv
)) {

87 
	`Ârötf
(
°dîr
, "Illegal \"ce_threshold\"\n");

90 } i‡(
	`°rcmp
(*
¨gv
, "interval") == 0) {

91 
	`NEXT_ARG
();

92 i‡(
	`gë_time
(&
öãrvÆ
, *
¨gv
)) {

93 
	`Ârötf
(
°dîr
, "Illegal \"interval\"\n");

96 } i‡(
	`°rcmp
(*
¨gv
, "ecn") == 0) {

97 
e˙
 = 1;

98 } i‡(
	`°rcmp
(*
¨gv
, "noecn") == 0) {

99 
e˙
 = 0;

100 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

101 
	`ex∂aö
();

104 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

105 
	`ex∂aö
();

108 
¨gc
--; 
¨gv
++;

111 
èû
 = 
	`NLMSG_TAIL
(
n
);

112 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

113 i‡(
limô
)

114 
	`add©å_l
(
n
, 1024, 
TCA_CODEL_LIMIT
, &
limô
, (limit));

115 i‡(
öãrvÆ
)

116 
	`add©å_l
(
n
, 1024, 
TCA_CODEL_INTERVAL
, &
öãrvÆ
, (interval));

117 i‡(
èrgë
)

118 
	`add©å_l
(
n
, 1024, 
TCA_CODEL_TARGET
, &
èrgë
, (target));

119 i‡(
e˙
 != -1)

120 
	`add©å_l
(
n
, 1024, 
TCA_CODEL_ECN
, &
e˙
, (ecn));

121 i‡(
˚_thªshﬁd
 != ~0U)

122 
	`add©å_l
(
n
, 1024, 
TCA_CODEL_CE_THRESHOLD
,

123 &
˚_thªshﬁd
, (ce_threshold));

125 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

127 
	}
}

129 
	$codñ_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

131 
π©å
 *
tb
[
TCA_CODEL_MAX
 + 1];

132 
limô
;

133 
öãrvÆ
;

134 
èrgë
;

135 
e˙
;

136 
˚_thªshﬁd
;

137 
	`SPRINT_BUF
(
b1
);

139 i‡(
›t
 =
NULL
)

142 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_CODEL_MAX
, 
›t
);

144 i‡(
tb
[
TCA_CODEL_LIMIT
] &&

145 
	`RTA_PAYLOAD
(
tb
[
TCA_CODEL_LIMIT
]Ë>(
__u32
)) {

146 
limô
 = 
	`πa_gë©å_u32
(
tb
[
TCA_CODEL_LIMIT
]);

147 
	`Ârötf
(
f
, "limô %u∞", 
limô
);

149 i‡(
tb
[
TCA_CODEL_TARGET
] &&

150 
	`RTA_PAYLOAD
(
tb
[
TCA_CODEL_TARGET
]Ë>(
__u32
)) {

151 
èrgë
 = 
	`πa_gë©å_u32
(
tb
[
TCA_CODEL_TARGET
]);

152 
	`Ârötf
(
f
, "èrgë %†", 
	`•röt_time
(
èrgë
, 
b1
));

154 i‡(
tb
[
TCA_CODEL_CE_THRESHOLD
] &&

155 
	`RTA_PAYLOAD
(
tb
[
TCA_CODEL_CE_THRESHOLD
]Ë>(
__u32
)) {

156 
˚_thªshﬁd
 = 
	`πa_gë©å_u32
(
tb
[
TCA_CODEL_CE_THRESHOLD
]);

157 
	`Ârötf
(
f
, "˚_thªshﬁd %†", 
	`•röt_time
(
˚_thªshﬁd
, 
b1
));

159 i‡(
tb
[
TCA_CODEL_INTERVAL
] &&

160 
	`RTA_PAYLOAD
(
tb
[
TCA_CODEL_INTERVAL
]Ë>(
__u32
)) {

161 
öãrvÆ
 = 
	`πa_gë©å_u32
(
tb
[
TCA_CODEL_INTERVAL
]);

162 
	`Ârötf
(
f
, "öãrvÆ %†", 
	`•röt_time
(
öãrvÆ
, 
b1
));

164 i‡(
tb
[
TCA_CODEL_ECN
] &&

165 
	`RTA_PAYLOAD
(
tb
[
TCA_CODEL_ECN
]Ë>(
__u32
)) {

166 
e˙
 = 
	`πa_gë©å_u32
(
tb
[
TCA_CODEL_ECN
]);

167 i‡(
e˙
)

168 
	`Ârötf
(
f
, "ecn ");

172 
	}
}

174 
	$codñ_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
,

175 
π©å
 *
x°©s
)

177 
tc_codñ_x°©s
 
_°
, *
°
;

178 
	`SPRINT_BUF
(
b1
);

180 i‡(
x°©s
 =
NULL
)

183 
°
 = 
	`RTA_DATA
(
x°©s
);

184 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
)) {

185 
	`mem£t
(&
_°
, 0, (_st));

186 
	`mem˝y
(&
_°
, 
°
, 
	`RTA_PAYLOAD
(
x°©s
));

187 
°
 = &
_°
;

190 
	`Ârötf
(
f
, " count %uÜastcount %uÜdelay %s",

191 
°
->
cou¡
, st->
œ°cou¡
, 
	`•röt_time
(°->
ldñay
, 
b1
));

192 i‡(
°
->
dr›pög
)

193 
	`Ârötf
(
f
, " dropping");

194 i‡(
°
->
dr›_√xt
 < 0)

195 
	`Ârötf
(
f
, " dr›_√xà-%s", 
	`•röt_time
(-
°
->
dr›_√xt
, 
b1
));

197 
	`Ârötf
(
f
, " dr›_√xà%s", 
	`•röt_time
(
°
->
dr›_√xt
, 
b1
));

198 
	`Ârötf
(
f
, "\n maxpacket %uÉcn_mark %u drop_overlimit %u",

199 
°
->
max∑ckë
, st->
e˙_m¨k
, st->
dr›_ovîlimô
);

200 i‡(
°
->
˚_m¨k
)

201 
	`Ârötf
(
f
, " ce_m¨k %u", 
°
->
˚_m¨k
);

204 
	}
}

206 
qdisc_utû
 
	gcodñ_qdisc_utû
 = {

207 .
id
 = "codel",

208 .
	g∑r£_q›t
 = 
codñ_∑r£_›t
,

209 .
	g¥öt_q›t
 = 
codñ_¥öt_›t
,

210 .
	g¥öt_x°©s
 = 
codñ_¥öt_x°©s
,

	@tc/q_drr.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	$ex∂aö
()

28 
	`Ârötf
(
°dîr
, "Usage: ... drr\n");

29 
	}
}

31 
	$ex∂aö2
()

33 
	`Ârötf
(
°dîr
, "Usage: ... drr quantum SIZE\n");

34 
	}
}

37 
	$dº_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

39 
¨gc
) {

40 i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

41 
	`ex∂aö
();

44 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

45 
	`ex∂aö
();

50 
	}
}

52 
	$dº_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

53 
∆msghdr
 *
n
)

55 
π©å
 *
èû
;

56 
__u32
 
tmp
;

58 
èû
 = 
	`NLMSG_TAIL
(
n
);

59 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

61 
¨gc
 > 0) {

62 i‡(
	`°rcmp
(*
¨gv
, "quantum") == 0) {

63 
	`NEXT_ARG
();

64 i‡(
	`gë_size
(&
tmp
, *
¨gv
)) {

65 
	`Ârötf
(
°dîr
, "Illegal \"quantum\"\n");

68 
	`add©å_l
(
n
, 1024, 
TCA_DRR_QUANTUM
, &
tmp
, (tmp));

69 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

70 
	`ex∂aö2
();

73 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

74 
	`ex∂aö2
();

77 
¨gc
--; 
¨gv
++;

80 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)tail;

82 
	}
}

84 
	$dº_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

86 
π©å
 *
tb
[
TCA_DRR_MAX
 + 1];

87 
	`SPRINT_BUF
(
b1
);

89 i‡(
›t
 =
NULL
)

92 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_DRR_MAX
, 
›t
);

94 i‡(
tb
[
TCA_DRR_QUANTUM
])

95 
	`Ârötf
(
f
, "quantum %s ",

96 
	`•röt_size
(
	`πa_gë©å_u32
(
tb
[
TCA_DRR_QUANTUM
]), 
b1
));

98 
	}
}

100 
	$dº_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
x°©s
)

102 
tc_dº_°©s
 *
x
;

103 
	`SPRINT_BUF
(
b1
);

105 i‡(
x°©s
 =
NULL
)

107 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
x
))

109 
x
 = 
	`RTA_DATA
(
x°©s
);

111 
	`Ârötf
(
f
, " deficô %†", 
	`•röt_size
(
x
->
deficô
, 
b1
));

113 
	}
}

115 
qdisc_utû
 
	gdº_qdisc_utû
 = {

116 .
id
 = "drr",

117 .
	g∑r£_q›t
 = 
dº_∑r£_›t
,

118 .
	g¥öt_q›t
 = 
dº_¥öt_›t
,

119 .
	g¥öt_x°©s
 = 
dº_¥öt_x°©s
,

120 .
	g∑r£_c›t
 = 
dº_∑r£_˛ass_›t
,

121 .
	g¥öt_c›t
 = 
dº_¥öt_›t
,

	@tc/q_dsmark.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<sy¶og.h
>

12 
	~<f˙é.h
>

13 
	~<sys/sockë.h
>

14 
	~<√töë/ö.h
>

15 
	~<¨∑/öë.h
>

16 
	~<°rög.h
>

18 
	~"utûs.h
"

19 
	~"tc_utû.h
"

22 
	$ex∂aö
()

24 
	`Ârötf
(
°dîr
,"Usage: dsmark indices INDICES [ default_index "

26 
	}
}

29 
	$dsm¨k_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

30 
∆msghdr
 *
n
)

32 
π©å
 *
èû
;

33 
__u16
 
öd
;

34 *
íd
;

35 
dÊt
,
£t_tc_ödex
;

37 
öd
 = 
£t_tc_ödex
 = 0;

38 
dÊt
 = -1;

39 
¨gc
 > 0) {

40 i‡(!
	`°rcmp
(*
¨gv
,"indices")) {

41 
	`NEXT_ARG
();

42 
öd
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

43 i‡(*
íd
) {

44 
	`ex∂aö
();

48 i‡(!
	`°rcmp
(*
¨gv
,"default_index") || !strcmp(*argv,

50 
	`NEXT_ARG
();

51 
dÊt
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

52 i‡(*
íd
) {

53 
	`ex∂aö
();

57 i‡(!
	`°rcmp
(*
¨gv
,"set_tc_index")) {

58 
£t_tc_ödex
 = 1;

61 
	`ex∂aö
();

64 
¨gc
--;

65 
¨gv
++;

67 i‡(!
öd
) {

68 
	`ex∂aö
();

71 
èû
 = 
	`NLMSG_TAIL
(
n
);

72 
	`add©å_l
(
n
,1024,
TCA_OPTIONS
,
NULL
,0);

73 
	`add©å_l
(
n
,1024,
TCA_DSMARK_INDICES
,&
öd
,(ind));

74 i‡(
dÊt
 != -1) {

75 
__u16
 
tmp
 = 
dÊt
;

77 
	`add©å_l
(
n
,1024,
TCA_DSMARK_DEFAULT_INDEX
,&
tmp
,(tmp));

79 i‡(
£t_tc_ödex
Ë
	`add©å_l
(
n
,1024,
TCA_DSMARK_SET_TC_INDEX
,
NULL
,0);

80 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

82 
	}
}

85 
	$ex∂aö_˛ass
()

87 
	`Ârötf
(
°dîr
, "Usage: ... dsmark [ mask MASK ] [ value VALUE ]\n");

88 
	}
}

91 
	$dsm¨k_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

92 
∆msghdr
 *
n
)

94 
π©å
 *
èû
;

95 
__u8
 
tmp
;

96 *
íd
;

98 
èû
 = 
	`NLMSG_TAIL
(
n
);

99 
	`add©å_l
(
n
,1024,
TCA_OPTIONS
,
NULL
,0);

100 
¨gc
 > 0) {

101 i‡(!
	`°rcmp
(*
¨gv
,"mask")) {

102 
	`NEXT_ARG
();

103 
tmp
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

104 i‡(*
íd
) {

105 
	`ex∂aö_˛ass
();

108 
	`add©å_l
(
n
,1024,
TCA_DSMARK_MASK
,&
tmp
,1);

110 i‡(!
	`°rcmp
(*
¨gv
,"value")) {

111 
	`NEXT_ARG
();

112 
tmp
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

113 i‡(*
íd
) {

114 
	`ex∂aö_˛ass
();

117 
	`add©å_l
(
n
,1024,
TCA_DSMARK_VALUE
,&
tmp
,1);

120 
	`ex∂aö_˛ass
();

123 
¨gc
--;

124 
¨gv
++;

126 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

128 
	}
}

132 
	$dsm¨k_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

134 
π©å
 *
tb
[
TCA_DSMARK_MAX
+1];

136 i‡(!
›t
)  0;

137 
	`mem£t
(
tb
, 0, (tb));

138 
	`∑r£_π©å
(
tb
, 
TCA_DSMARK_MAX
, 
	`RTA_DATA
(
›t
), 
	`RTA_PAYLOAD
(opt));

139 i‡(
tb
[
TCA_DSMARK_MASK
]) {

140 i‡(!
	`RTA_PAYLOAD
(
tb
[
TCA_DSMARK_MASK
]))

141 
	`Ârötf
(
°dîr
,"dsmark:Émpty mask\n");

142 
	`Ârötf
(
f
,"mask 0x%02x ",

143 
	`πa_gë©å_u8
(
tb
[
TCA_DSMARK_MASK
]));

145 i‡(
tb
[
TCA_DSMARK_VALUE
]) {

146 i‡(!
	`RTA_PAYLOAD
(
tb
[
TCA_DSMARK_VALUE
]))

147 
	`Ârötf
(
°dîr
,"dsmark:Émpty value\n");

148 
	`Ârötf
(
f
,"value 0x%02x ",

149 
	`πa_gë©å_u8
(
tb
[
TCA_DSMARK_VALUE
]));

151 i‡(
tb
[
TCA_DSMARK_INDICES
]) {

152 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_DSMARK_INDICES
]Ë< (
__u16
))

153 
	`Ârötf
(
°dîr
,"dsmark: indicesÅoo short\n");

154 
	`Ârötf
(
f
,"indices 0x%04x ",

155 
	`πa_gë©å_u16
(
tb
[
TCA_DSMARK_INDICES
]));

157 i‡(
tb
[
TCA_DSMARK_DEFAULT_INDEX
]) {

158 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_DSMARK_DEFAULT_INDEX
]Ë< (
__u16
))

159 
	`Ârötf
(
°dîr
,"dsmark: default_indexÅoo short\n");

160 
	`Ârötf
(
f
,"default_index 0x%04x ",

161 
	`πa_gë©å_u16
(
tb
[
TCA_DSMARK_DEFAULT_INDEX
]));

163 i‡(
tb
[
TCA_DSMARK_SET_TC_INDEX
]Ë
	`Ârötf
(
f
,"set_tc_index ");

165 
	}
}

168 
qdisc_utû
 
	gdsm¨k_qdisc_utû
 = {

169 .
id
 = "dsmark",

170 .
	g∑r£_q›t
 = 
dsm¨k_∑r£_›t
,

171 .
	g¥öt_q›t
 = 
dsm¨k_¥öt_›t
,

172 .
	g∑r£_c›t
 = 
dsm¨k_∑r£_˛ass_›t
,

173 .
	g¥öt_c›t
 = 
dsm¨k_¥öt_›t
,

	@tc/q_fifo.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	$ex∂aö
()

28 
	`Ârötf
(
°dîr
, "Usage: ... <[p|b]fifo |Öfifo_head_drop> [Üimit NUMBER ]\n");

29 
	}
}

31 
	$fifo_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

33 
ok
=0;

34 
tc_fifo_q›t
 
›t
;

35 
	`mem£t
(&
›t
, 0, (opt));

37 
¨gc
 > 0) {

38 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

39 
	`NEXT_ARG
();

40 i‡(
	`gë_size
(&
›t
.
limô
, *
¨gv
)) {

41 
	`Ârötf
(
°dîr
, "%s: IŒegÆ vÆuêf‹ \"limô\": \"%s\"\n", 
qu
->
id
, *
¨gv
);

44 
ok
++;

45 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

46 
	`ex∂aö
();

49 
	`Ârötf
(
°dîr
, "%s: unknow¿∑ømëî \"%s\"\n", 
qu
->
id
, *
¨gv
);

50 
	`ex∂aö
();

53 
¨gc
--; 
¨gv
++;

56 i‡(
ok
)

57 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, &
›t
, (opt));

59 
	}
}

61 
	$fifo_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

63 
tc_fifo_q›t
 *
q›t
;

65 i‡(
›t
 =
NULL
)

68 i‡(
	`RTA_PAYLOAD
(
›t
Ë< (*
q›t
))

70 
q›t
 = 
	`RTA_DATA
(
›t
);

71 i‡(
	`°rcmp
(
qu
->
id
, "bfifo") == 0) {

72 
	`SPRINT_BUF
(
b1
);

73 
	`Ârötf
(
f
, "limô %s", 
	`•röt_size
(
q›t
->
limô
, 
b1
));

75 
	`Ârötf
(
f
, "limô %up", 
q›t
->
limô
);

77 
	}
}

80 
qdisc_utû
 
	gbfifo_qdisc_utû
 = {

81 .
id
 = "bfifo",

82 .
	g∑r£_q›t
 = 
fifo_∑r£_›t
,

83 .
	g¥öt_q›t
 = 
fifo_¥öt_›t
,

86 
qdisc_utû
 
	gpfifo_qdisc_utû
 = {

87 .
id
 = "pfifo",

88 .
	g∑r£_q›t
 = 
fifo_∑r£_›t
,

89 .
	g¥öt_q›t
 = 
fifo_¥öt_›t
,

92 
qdisc_utû
 
	gpfifo_hód_dr›_qdisc_utû
 = {

93 .
id
 = "pfifo_head_drop",

94 .
	g∑r£_q›t
 = 
fifo_∑r£_›t
,

95 .
	g¥öt_q›t
 = 
fifo_¥öt_›t
,

98 
¥io_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
);

99 
qdisc_utû
 
	gpfifo_Á°_qdisc_utû
 = {

100 .
id
 = "pfifo_fast",

101 .
	g¥öt_q›t
 = 
¥io_¥öt_›t
,

	@tc/q_fq.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<uni°d.h
>

41 
	~<sy¶og.h
>

42 
	~<f˙é.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<¨∑/öë.h
>

46 
	~<°rög.h
>

47 
	~<°dboﬁ.h
>

49 
	~"utûs.h
"

50 
	~"tc_utû.h
"

52 
	$ex∂aö
()

54 
	`Ârötf
(
°dîr
, "Usage: ... fq [Üimit PACKETS ] [ flow_limit PACKETS ]\n");

55 
	`Ârötf
(
°dîr
, " [ quantum BYTES ] [ initial_quantum BYTES ]\n");

56 
	`Ârötf
(
°dîr
, " [ maxrate RATE ] [ buckets NUMBER ]\n");

57 
	`Ârötf
(
°dîr
, " [ [no]pacing ] [Ñefill_delay TIME ]\n");

58 
	`Ârötf
(
°dîr
, " [ orphan_mask MASK]\n");

59 
	}
}

61 
	$ûog2
(
vÆ
)

63 
ªs
 = 0;

65 
vÆ
--;

66 
vÆ
) {

67 
ªs
++;

68 
vÆ
 >>= 1;

70  
ªs
;

71 
	}
}

73 
	$fq_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

74 
∆msghdr
 *
n
)

76 
∂imô
;

77 
Êow_∂imô
;

78 
qu™tum
;

79 
öôül_qu™tum
;

80 
buckës
 = 0;

81 
maxøã
;

82 
de‰©e
;

83 
ªfûl_dñay
;

84 
‹ph™_mask
;

85 
boﬁ
 
£t_∂imô
 = 
Ál£
;

86 
boﬁ
 
£t_Êow_∂imô
 = 
Ál£
;

87 
boﬁ
 
£t_qu™tum
 = 
Ál£
;

88 
boﬁ
 
£t_öôül_qu™tum
 = 
Ál£
;

89 
boﬁ
 
£t_maxøã
 = 
Ál£
;

90 
boﬁ
 
£t_de‰©e
 = 
Ál£
;

91 
boﬁ
 
£t_ªfûl_dñay
 = 
Ál£
;

92 
boﬁ
 
£t_‹ph™_mask
 = 
Ál£
;

93 
∑cög
 = -1;

94 
π©å
 *
èû
;

96 
¨gc
 > 0) {

97 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

98 
	`NEXT_ARG
();

99 i‡(
	`gë_unsig√d
(&
∂imô
, *
¨gv
, 0)) {

100 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

103 
£t_∂imô
 = 
åue
;

104 } i‡(
	`°rcmp
(*
¨gv
, "flow_limit") == 0) {

105 
	`NEXT_ARG
();

106 i‡(
	`gë_unsig√d
(&
Êow_∂imô
, *
¨gv
, 0)) {

107 
	`Ârötf
(
°dîr
, "Illegal \"flow_limit\"\n");

110 
£t_Êow_∂imô
 = 
åue
;

111 } i‡(
	`°rcmp
(*
¨gv
, "buckets") == 0) {

112 
	`NEXT_ARG
();

113 i‡(
	`gë_unsig√d
(&
buckës
, *
¨gv
, 0)) {

114 
	`Ârötf
(
°dîr
, "Illegal \"buckets\"\n");

117 } i‡(
	`°rcmp
(*
¨gv
, "maxrate") == 0) {

118 
	`NEXT_ARG
();

119 i‡(
	`gë_øã
(&
maxøã
, *
¨gv
)) {

120 
	`Ârötf
(
°dîr
, "Illegal \"maxrate\"\n");

123 
£t_maxøã
 = 
åue
;

124 } i‡(
	`°rcmp
(*
¨gv
, "defrate") == 0) {

125 
	`NEXT_ARG
();

126 i‡(
	`gë_øã
(&
de‰©e
, *
¨gv
)) {

127 
	`Ârötf
(
°dîr
, "Illegal \"defrate\"\n");

130 
£t_de‰©e
 = 
åue
;

131 } i‡(
	`°rcmp
(*
¨gv
, "quantum") == 0) {

132 
	`NEXT_ARG
();

133 i‡(
	`gë_unsig√d
(&
qu™tum
, *
¨gv
, 0)) {

134 
	`Ârötf
(
°dîr
, "Illegal \"quantum\"\n");

137 
£t_qu™tum
 = 
åue
;

138 } i‡(
	`°rcmp
(*
¨gv
, "initial_quantum") == 0) {

139 
	`NEXT_ARG
();

140 i‡(
	`gë_unsig√d
(&
öôül_qu™tum
, *
¨gv
, 0)) {

141 
	`Ârötf
(
°dîr
, "Illegal \"initial_quantum\"\n");

144 
£t_öôül_qu™tum
 = 
åue
;

145 } i‡(
	`°rcmp
(*
¨gv
, "orphan_mask") == 0) {

146 
	`NEXT_ARG
();

147 i‡(
	`gë_unsig√d
(&
‹ph™_mask
, *
¨gv
, 0)) {

148 
	`Ârötf
(
°dîr
, "Illegal \"initial_quantum\"\n");

151 
£t_‹ph™_mask
 = 
åue
;

152 } i‡(
	`°rcmp
(*
¨gv
, "refill_delay") == 0) {

153 
	`NEXT_ARG
();

154 i‡(
	`gë_time
(&
ªfûl_dñay
, *
¨gv
)) {

155 
	`Ârötf
(
°dîr
, "Illegal \"refill_delay\"\n");

158 
£t_ªfûl_dñay
 = 
åue
;

159 } i‡(
	`°rcmp
(*
¨gv
, "pacing") == 0) {

160 
∑cög
 = 1;

161 } i‡(
	`°rcmp
(*
¨gv
, "nopacing") == 0) {

162 
∑cög
 = 0;

163 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

164 
	`ex∂aö
();

167 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

168 
	`ex∂aö
();

171 
¨gc
--; 
¨gv
++;

174 
èû
 = 
	`NLMSG_TAIL
(
n
);

175 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

176 i‡(
buckës
) {

177 
log
 = 
	`ûog2
(
buckës
);

179 
	`add©å_l
(
n
, 1024, 
TCA_FQ_BUCKETS_LOG
,

180 &
log
, (log));

182 i‡(
£t_∂imô
)

183 
	`add©å_l
(
n
, 1024, 
TCA_FQ_PLIMIT
,

184 &
∂imô
, (plimit));

185 i‡(
£t_Êow_∂imô
)

186 
	`add©å_l
(
n
, 1024, 
TCA_FQ_FLOW_PLIMIT
,

187 &
Êow_∂imô
, (flow_plimit));

188 i‡(
£t_qu™tum
)

189 
	`add©å_l
(
n
, 1024, 
TCA_FQ_QUANTUM
, &
qu™tum
, (quantum));

190 i‡(
£t_öôül_qu™tum
)

191 
	`add©å_l
(
n
, 1024, 
TCA_FQ_INITIAL_QUANTUM
,

192 &
öôül_qu™tum
, (initial_quantum));

193 i‡(
∑cög
 != -1)

194 
	`add©å_l
(
n
, 1024, 
TCA_FQ_RATE_ENABLE
,

195 &
∑cög
, (pacing));

196 i‡(
£t_maxøã
)

197 
	`add©å_l
(
n
, 1024, 
TCA_FQ_FLOW_MAX_RATE
,

198 &
maxøã
, (maxrate));

199 i‡(
£t_de‰©e
)

200 
	`add©å_l
(
n
, 1024, 
TCA_FQ_FLOW_DEFAULT_RATE
,

201 &
de‰©e
, (defrate));

202 i‡(
£t_ªfûl_dñay
)

203 
	`add©å_l
(
n
, 1024, 
TCA_FQ_FLOW_REFILL_DELAY
,

204 &
ªfûl_dñay
, (refill_delay));

205 i‡(
£t_‹ph™_mask
)

206 
	`add©å_l
(
n
, 1024, 
TCA_FQ_ORPHAN_MASK
,

207 &
‹ph™_mask
, (
ªfûl_dñay
));

208 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

210 
	}
}

212 
	$fq_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

214 
π©å
 *
tb
[
TCA_FQ_MAX
 + 1];

215 
∂imô
, 
Êow_∂imô
;

216 
buckës_log
;

217 
∑cög
;

218 
øã
, 
qu™tum
;

219 
ªfûl_dñay
;

220 
‹ph™_mask
;

221 
	`SPRINT_BUF
(
b1
);

223 i‡(
›t
 =
NULL
)

226 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_FQ_MAX
, 
›t
);

228 i‡(
tb
[
TCA_FQ_PLIMIT
] &&

229 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_PLIMIT
]Ë>(
__u32
)) {

230 
∂imô
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_PLIMIT
]);

231 
	`Ârötf
(
f
, "limô %u∞", 
∂imô
);

233 i‡(
tb
[
TCA_FQ_FLOW_PLIMIT
] &&

234 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_FLOW_PLIMIT
]Ë>(
__u32
)) {

235 
Êow_∂imô
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_FLOW_PLIMIT
]);

236 
	`Ârötf
(
f
, "Êow_limô %u∞", 
Êow_∂imô
);

238 i‡(
tb
[
TCA_FQ_BUCKETS_LOG
] &&

239 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_BUCKETS_LOG
]Ë>(
__u32
)) {

240 
buckës_log
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_BUCKETS_LOG
]);

241 
	`Ârötf
(
f
, "buckë†%u ", 1U << 
buckës_log
);

243 i‡(
tb
[
TCA_FQ_ORPHAN_MASK
] &&

244 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_ORPHAN_MASK
]Ë>(
__u32
)) {

245 
‹ph™_mask
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_ORPHAN_MASK
]);

246 
	`Ârötf
(
f
, "‹ph™_mask %u ", 
‹ph™_mask
);

248 i‡(
tb
[
TCA_FQ_RATE_ENABLE
] &&

249 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_RATE_ENABLE
]) >= ()) {

250 
∑cög
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_RATE_ENABLE
]);

251 i‡(
∑cög
 == 0)

252 
	`Ârötf
(
f
, "nopacing ");

254 i‡(
tb
[
TCA_FQ_QUANTUM
] &&

255 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_QUANTUM
]Ë>(
__u32
)) {

256 
qu™tum
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_QUANTUM
]);

257 
	`Ârötf
(
f
, "qu™tum %u ", 
qu™tum
);

259 i‡(
tb
[
TCA_FQ_INITIAL_QUANTUM
] &&

260 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_INITIAL_QUANTUM
]Ë>(
__u32
)) {

261 
qu™tum
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_INITIAL_QUANTUM
]);

262 
	`Ârötf
(
f
, "öôül_qu™tum %u ", 
qu™tum
);

264 i‡(
tb
[
TCA_FQ_FLOW_MAX_RATE
] &&

265 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_FLOW_MAX_RATE
]Ë>(
__u32
)) {

266 
øã
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_FLOW_MAX_RATE
]);

268 i‡(
øã
 != ~0U)

269 
	`Ârötf
(
f
, "maxøã %†", 
	`•röt_øã
(
øã
, 
b1
));

271 i‡(
tb
[
TCA_FQ_FLOW_DEFAULT_RATE
] &&

272 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_FLOW_DEFAULT_RATE
]Ë>(
__u32
)) {

273 
øã
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_FLOW_DEFAULT_RATE
]);

275 i‡(
øã
 != 0)

276 
	`Ârötf
(
f
, "de‰©ê%†", 
	`•röt_øã
(
øã
, 
b1
));

278 i‡(
tb
[
TCA_FQ_FLOW_REFILL_DELAY
] &&

279 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_FLOW_REFILL_DELAY
]Ë>(
__u32
)) {

280 
ªfûl_dñay
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_FLOW_REFILL_DELAY
]);

281 
	`Ârötf
(
f
, "ªfûl_dñay %†", 
	`•röt_time
(
ªfûl_dñay
, 
b1
));

285 
	}
}

287 
	$fq_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
,

288 
π©å
 *
x°©s
)

290 
tc_fq_qd_°©s
 *
°
;

292 i‡(
x°©s
 =
NULL
)

295 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

298 
°
 = 
	`RTA_DATA
(
x°©s
);

300 
	`Ârötf
(
f
, " %u flows (%u inactive, %uÅhrottled)",

301 
°
->
Êows
, st->
öa˘ive_Êows
, st->
thrŸéed_Êows
);

303 i‡(
°
->
time_√xt_dñayed_Êow
 > 0)

304 
	`Ârötf
(
f
, ",Çexà∑ckë dñay %ŒuÇs", 
°
->
time_√xt_dñayed_Êow
);

306 
	`Ârötf
(
f
, "\n %llu gc, %llu highprio",

307 
°
->
gc_Êows
, st->
high¥io_∑ckës
);

309 i‡(
°
->
t˝_ªå™s
)

310 
	`Ârötf
(
f
, ", %ŒuÑëøns", 
°
->
t˝_ªå™s
);

312 
	`Ârötf
(
f
, ", %ŒuÅhrŸéed", 
°
->
thrŸéed
);

314 i‡(
°
->
Êows_∂imô
)

315 
	`Ârötf
(
f
, ", %Œu flows_∂imô", 
°
->
Êows_∂imô
);

317 i‡(
°
->
pkts_too_l⁄g
 || st->
Æloˇti⁄_îr‹s
)

318 
	`Ârötf
(
f
, "\n %lluÅooÜongÖkts, %lluállocÉrrors\n",

319 
°
->
pkts_too_l⁄g
, st->
Æloˇti⁄_îr‹s
);

322 
	}
}

324 
qdisc_utû
 
	gfq_qdisc_utû
 = {

325 .
id
 = "fq",

326 .
	g∑r£_q›t
 = 
fq_∑r£_›t
,

327 .
	g¥öt_q›t
 = 
fq_¥öt_›t
,

328 .
	g¥öt_x°©s
 = 
fq_¥öt_x°©s
,

	@tc/q_fq_codel.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<uni°d.h
>

41 
	~<sy¶og.h
>

42 
	~<f˙é.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<¨∑/öë.h
>

46 
	~<°rög.h
>

48 
	~"utûs.h
"

49 
	~"tc_utû.h
"

51 
	$ex∂aö
()

53 
	`Ârötf
(
°dîr
, "Usage: ... fq_codel [Üimit PACKETS ] [ flows NUMBER ]\n");

54 
	`Ârötf
(
°dîr
, " [Åarget TIME] [ interval TIME ]\n");

55 
	`Ârötf
(
°dîr
, " [ quantum BYTES ] [ [no]ecn ]\n");

56 
	`Ârötf
(
°dîr
, " [ ce_threshold TIME ]\n");

57 
	}
}

59 
	$fq_codñ_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

60 
∆msghdr
 *
n
)

62 
limô
 = 0;

63 
Êows
 = 0;

64 
èrgë
 = 0;

65 
öãrvÆ
 = 0;

66 
qu™tum
 = 0;

67 
˚_thªshﬁd
 = ~0U;

68 
e˙
 = -1;

69 
π©å
 *
èû
;

71 
¨gc
 > 0) {

72 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

73 
	`NEXT_ARG
();

74 i‡(
	`gë_unsig√d
(&
limô
, *
¨gv
, 0)) {

75 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

78 } i‡(
	`°rcmp
(*
¨gv
, "flows") == 0) {

79 
	`NEXT_ARG
();

80 i‡(
	`gë_unsig√d
(&
Êows
, *
¨gv
, 0)) {

81 
	`Ârötf
(
°dîr
, "Illegal \"flows\"\n");

84 } i‡(
	`°rcmp
(*
¨gv
, "quantum") == 0) {

85 
	`NEXT_ARG
();

86 i‡(
	`gë_unsig√d
(&
qu™tum
, *
¨gv
, 0)) {

87 
	`Ârötf
(
°dîr
, "Illegal \"quantum\"\n");

90 } i‡(
	`°rcmp
(*
¨gv
, "target") == 0) {

91 
	`NEXT_ARG
();

92 i‡(
	`gë_time
(&
èrgë
, *
¨gv
)) {

93 
	`Ârötf
(
°dîr
, "Illegal \"target\"\n");

96 } i‡(
	`°rcmp
(*
¨gv
, "ce_threshold") == 0) {

97 
	`NEXT_ARG
();

98 i‡(
	`gë_time
(&
˚_thªshﬁd
, *
¨gv
)) {

99 
	`Ârötf
(
°dîr
, "Illegal \"ce_threshold\"\n");

102 } i‡(
	`°rcmp
(*
¨gv
, "interval") == 0) {

103 
	`NEXT_ARG
();

104 i‡(
	`gë_time
(&
öãrvÆ
, *
¨gv
)) {

105 
	`Ârötf
(
°dîr
, "Illegal \"interval\"\n");

108 } i‡(
	`°rcmp
(*
¨gv
, "ecn") == 0) {

109 
e˙
 = 1;

110 } i‡(
	`°rcmp
(*
¨gv
, "noecn") == 0) {

111 
e˙
 = 0;

112 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

113 
	`ex∂aö
();

116 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

117 
	`ex∂aö
();

120 
¨gc
--; 
¨gv
++;

123 
èû
 = 
	`NLMSG_TAIL
(
n
);

124 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

125 i‡(
limô
)

126 
	`add©å_l
(
n
, 1024, 
TCA_FQ_CODEL_LIMIT
, &
limô
, (limit));

127 i‡(
Êows
)

128 
	`add©å_l
(
n
, 1024, 
TCA_FQ_CODEL_FLOWS
, &
Êows
, (flows));

129 i‡(
qu™tum
)

130 
	`add©å_l
(
n
, 1024, 
TCA_FQ_CODEL_QUANTUM
, &
qu™tum
, (quantum));

131 i‡(
öãrvÆ
)

132 
	`add©å_l
(
n
, 1024, 
TCA_FQ_CODEL_INTERVAL
, &
öãrvÆ
, (interval));

133 i‡(
èrgë
)

134 
	`add©å_l
(
n
, 1024, 
TCA_FQ_CODEL_TARGET
, &
èrgë
, (target));

135 i‡(
e˙
 != -1)

136 
	`add©å_l
(
n
, 1024, 
TCA_FQ_CODEL_ECN
, &
e˙
, (ecn));

137 i‡(
˚_thªshﬁd
 != ~0U)

138 
	`add©å_l
(
n
, 1024, 
TCA_FQ_CODEL_CE_THRESHOLD
,

139 &
˚_thªshﬁd
, (ce_threshold));

140 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

142 
	}
}

144 
	$fq_codñ_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

146 
π©å
 *
tb
[
TCA_FQ_CODEL_MAX
 + 1];

147 
limô
;

148 
Êows
;

149 
öãrvÆ
;

150 
èrgë
;

151 
e˙
;

152 
qu™tum
;

153 
˚_thªshﬁd
;

154 
	`SPRINT_BUF
(
b1
);

156 i‡(
›t
 =
NULL
)

159 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_FQ_CODEL_MAX
, 
›t
);

161 i‡(
tb
[
TCA_FQ_CODEL_LIMIT
] &&

162 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_CODEL_LIMIT
]Ë>(
__u32
)) {

163 
limô
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_CODEL_LIMIT
]);

164 
	`Ârötf
(
f
, "limô %u∞", 
limô
);

166 i‡(
tb
[
TCA_FQ_CODEL_FLOWS
] &&

167 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_CODEL_FLOWS
]Ë>(
__u32
)) {

168 
Êows
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_CODEL_FLOWS
]);

169 
	`Ârötf
(
f
, "Êow†%u ", 
Êows
);

171 i‡(
tb
[
TCA_FQ_CODEL_QUANTUM
] &&

172 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_CODEL_QUANTUM
]Ë>(
__u32
)) {

173 
qu™tum
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_CODEL_QUANTUM
]);

174 
	`Ârötf
(
f
, "qu™tum %u ", 
qu™tum
);

176 i‡(
tb
[
TCA_FQ_CODEL_TARGET
] &&

177 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_CODEL_TARGET
]Ë>(
__u32
)) {

178 
èrgë
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_CODEL_TARGET
]);

179 
	`Ârötf
(
f
, "èrgë %†", 
	`•röt_time
(
èrgë
, 
b1
));

181 i‡(
tb
[
TCA_FQ_CODEL_CE_THRESHOLD
] &&

182 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_CODEL_CE_THRESHOLD
]Ë>(
__u32
)) {

183 
˚_thªshﬁd
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_CODEL_CE_THRESHOLD
]);

184 
	`Ârötf
(
f
, "˚_thªshﬁd %†", 
	`•röt_time
(
˚_thªshﬁd
, 
b1
));

186 i‡(
tb
[
TCA_FQ_CODEL_INTERVAL
] &&

187 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_CODEL_INTERVAL
]Ë>(
__u32
)) {

188 
öãrvÆ
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_CODEL_INTERVAL
]);

189 
	`Ârötf
(
f
, "öãrvÆ %†", 
	`•röt_time
(
öãrvÆ
, 
b1
));

191 i‡(
tb
[
TCA_FQ_CODEL_ECN
] &&

192 
	`RTA_PAYLOAD
(
tb
[
TCA_FQ_CODEL_ECN
]Ë>(
__u32
)) {

193 
e˙
 = 
	`πa_gë©å_u32
(
tb
[
TCA_FQ_CODEL_ECN
]);

194 i‡(
e˙
)

195 
	`Ârötf
(
f
, "ecn ");

199 
	}
}

201 
	$fq_codñ_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
,

202 
π©å
 *
x°©s
)

204 
tc_fq_codñ_x°©s
 
_°
, *
°
;

205 
	`SPRINT_BUF
(
b1
);

207 i‡(
x°©s
 =
NULL
)

210 
°
 = 
	`RTA_DATA
(
x°©s
);

211 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
)) {

212 
	`mem£t
(&
_°
, 0, (_st));

213 
	`mem˝y
(&
_°
, 
°
, 
	`RTA_PAYLOAD
(
x°©s
));

214 
°
 = &
_°
;

216 i‡(
°
->
ty≥
 =
TCA_FQ_CODEL_XSTATS_QDISC
) {

217 
	`Ârötf
(
f
, " maxpacket %u drop_overlimit %uÇew_flow_count %uÉcn_mark %u",

218 
°
->
qdisc_°©s
.
max∑ckë
,

219 
°
->
qdisc_°©s
.
dr›_ovîlimô
,

220 
°
->
qdisc_°©s
.
√w_Êow_cou¡
,

221 
°
->
qdisc_°©s
.
e˙_m¨k
);

222 i‡(
°
->
qdisc_°©s
.
˚_m¨k
)

223 
	`Ârötf
(
f
, " ce_m¨k %u", 
°
->
qdisc_°©s
.
˚_m¨k
);

224 
	`Ârötf
(
f
, "\nÇew_flows_len %u old_flows_len %u",

225 
°
->
qdisc_°©s
.
√w_Êows_Àn
,

226 
°
->
qdisc_°©s
.
ﬁd_Êows_Àn
);

228 i‡(
°
->
ty≥
 =
TCA_FQ_CODEL_XSTATS_CLASS
) {

229 
	`Ârötf
(
f
, " deficit %d count %uÜastcount %uÜdelay %s",

230 
°
->
˛ass_°©s
.
deficô
,

231 
°
->
˛ass_°©s
.
cou¡
,

232 
°
->
˛ass_°©s
.
œ°cou¡
,

233 
	`•röt_time
(
°
->
˛ass_°©s
.
ldñay
, 
b1
));

234 i‡(
°
->
˛ass_°©s
.
dr›pög
) {

235 
	`Ârötf
(
f
, " dropping");

236 i‡(
°
->
˛ass_°©s
.
dr›_√xt
 < 0)

237 
	`Ârötf
(
f
, " drop_next -%s",

238 
	`•röt_time
(-
°
->
˛ass_°©s
.
dr›_√xt
, 
b1
));

240 
	`Ârötf
(
f
, " drop_next %s",

241 
	`•röt_time
(
°
->
˛ass_°©s
.
dr›_√xt
, 
b1
));

246 
	}
}

248 
qdisc_utû
 
	gfq_codñ_qdisc_utû
 = {

249 .
id
 = "fq_codel",

250 .
	g∑r£_q›t
 = 
fq_codñ_∑r£_›t
,

251 .
	g¥öt_q›t
 = 
fq_codñ_¥öt_›t
,

252 .
	g¥öt_x°©s
 = 
fq_codñ_¥öt_x°©s
,

	@tc/q_gred.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<uni°d.h
>

18 
	~<sy¶og.h
>

19 
	~<f˙é.h
>

20 
	~<sys/sockë.h
>

21 
	~<√töë/ö.h
>

22 
	~<¨∑/öë.h
>

23 
	~<°rög.h
>

24 
	~<m©h.h
>

26 
	~"utûs.h
"

27 
	~"tc_utû.h
"

29 
	~"tc_ªd.h
"

33 
	#DPRINTF
(
f‹m©
,
¨gs
...Ë
	`Ârötf
(
°dîr
,f‹m©,##¨gs)

	)

35 
	#DPRINTF
(
f‹m©
,
¨gs
...)

	)

38 
	$ex∂aö
()

40 
	`Ârötf
(
°dîr
, "Usage:Åc qdisc {ádd |Ñeplace | change } ... gred setup vqs NUMBER\n");

41 
	`Ârötf
(
°dîr
, " default DEFAULT_VQ [ grio ] [Üimit BYTES ]\n");

42 
	`Ârötf
(
°dîr
, "Åc qdisc change ... gred vq VQ [Örio VALUE ]Üimit BYTES\n");

43 
	`Ârötf
(
°dîr
, " min BYTES max BYTESávpkt BYTES [ burst PACKETS ]\n");

44 
	`Ârötf
(
°dîr
, " [Örobability PROBABILITY ] [ bandwidth KBPS ]\n");

45 
	}
}

47 
	$öô_gªd
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

48 
∆msghdr
 *
n
)

51 
π©å
 *
èû
;

52 
tc_gªd_s›t
 
›t
 = { 0 };

53 
__u32
 
limô
 = 0;

55 
›t
.
def_DP
 = 
MAX_DPs
;

57 
¨gc
 > 0) {

58 
	`DPRINTF
(
°dîr
,"öô_gªd: invoked wôh %s\n",*
¨gv
);

59 i‡(
	`°rcmp
(*
¨gv
, "vqs") == 0 ||

60 
	`°rcmp
(*
¨gv
, "DPs") == 0) {

61 
	`NEXT_ARG
();

62 i‡(
	`gë_unsig√d
(&
›t
.
DPs
, *
¨gv
, 10)) {

63 
	`Ârötf
(
°dîr
, "Illegal \"vqs\"\n");

65 } i‡(
›t
.
DPs
 > 
MAX_DPs
) {

66 
	`Ârötf
(
°dîr
, "GRED: only %u VQsáre "

67 "cuºíéy suµ‹ãd\n", 
MAX_DPs
);

70 } i‡(
	`°rcmp
(*
¨gv
, "default") == 0) {

71 i‡(
›t
.
DPs
 == 0) {

72 
	`Ârötf
(
°dîr
, "\"default\" must be defined "

76 
	`NEXT_ARG
();

77 i‡(
	`gë_unsig√d
(&
›t
.
def_DP
, *
¨gv
, 10)) {

78 
	`Ârötf
(
°dîr
, "Illegal \"default\"\n");

80 } i‡(
›t
.
def_DP
 >›t.
DPs
) {

81 
	`Ârötf
(
°dîr
, "\"default\" must beÜessÅhan "

85 } i‡(
	`°rcmp
(*
¨gv
, "grio") == 0) {

86 
›t
.
grio
 = 1;

87 } i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

88 
	`NEXT_ARG
();

89 i‡(
	`gë_size
(&
limô
, *
¨gv
)) {

90 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

93 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

94 
	`ex∂aö
();

97 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

98 
	`ex∂aö
();

101 
¨gc
--; 
¨gv
++;

104 i‡(!
›t
.
DPs
 || o±.
def_DP
 =
MAX_DPs
) {

105 
	`Ârötf
(
°dîr
, "Illegal gred setupÖarameters \n");

109 
	`DPRINTF
("TC_GRED: sídög DPs=%u def_DP=%u\n",
›t
.
DPs
,›t.
def_DP
);

110 
n
->
∆msg_Êags
|=
NLM_F_CREATE
;

111 
èû
 = 
	`NLMSG_TAIL
(
n
);

112 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

113 
	`add©å_l
(
n
, 1024, 
TCA_GRED_DPS
, &
›t
, (
tc_gªd_s›t
));

114 i‡(
limô
)

115 
	`add©å32
(
n
, 1024, 
TCA_GRED_LIMIT
, 
limô
);

116 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

118 
	}
}

122 
	$gªd_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

124 
ok
=0;

125 
tc_gªd_q›t
 
›t
 = { 0 };

126 
bur°
 = 0;

127 
avpkt
 = 0;

128 
¥obabûôy
 = 0.02;

129 
øã
 = 0;

130 
∑rm
;

131 
__u8
 
sbuf
[256];

132 
π©å
 *
èû
;

133 
__u32
 
max_P
;

135 
›t
.
DP
 = 
MAX_DPs
;

137 
¨gc
 > 0) {

138 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

139 
	`NEXT_ARG
();

140 i‡(
	`gë_size
(&
›t
.
limô
, *
¨gv
)) {

141 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

144 
ok
++;

145 } i‡(
	`°rcmp
(*
¨gv
, "setup") == 0) {

146 i‡(
ok
) {

147 
	`Ârötf
(
°dîr
, "Illegal \"setup\"\n");

150  
	`öô_gªd
(
qu
, 
¨gc
-1, 
¨gv
+1, 
n
);

151 } i‡(
	`°rcmp
(*
¨gv
, "min") == 0) {

152 
	`NEXT_ARG
();

153 i‡(
	`gë_size
(&
›t
.
qth_mö
, *
¨gv
)) {

154 
	`Ârötf
(
°dîr
, "Illegal \"min\"\n");

157 
ok
++;

158 } i‡(
	`°rcmp
(*
¨gv
, "max") == 0) {

159 
	`NEXT_ARG
();

160 i‡(
	`gë_size
(&
›t
.
qth_max
, *
¨gv
)) {

161 
	`Ârötf
(
°dîr
, "Illegal \"max\"\n");

164 
ok
++;

165 } i‡(
	`°rcmp
(*
¨gv
, "vq") == 0 ||

166 
	`°rcmp
(*
¨gv
, "DP") == 0) {

167 
	`NEXT_ARG
();

168 i‡(
	`gë_unsig√d
(&
›t
.
DP
, *
¨gv
, 10)) {

169 
	`Ârötf
(
°dîr
, "Illegal \"vq\"\n");

171 } i‡(
›t
.
DP
 >
MAX_DPs
) {

172 
	`Ârötf
(
°dîr
, "GRED: only %u VQsáre "

173 "cuºíéy suµ‹ãd\n", 
MAX_DPs
);

176 
ok
++;

177 } i‡(
	`°rcmp
(*
¨gv
, "burst") == 0) {

178 
	`NEXT_ARG
();

179 i‡(
	`gë_unsig√d
(&
bur°
, *
¨gv
, 0)) {

180 
	`Ârötf
(
°dîr
, "Illegal \"burst\"\n");

183 
ok
++;

184 } i‡(
	`°rcmp
(*
¨gv
, "avpkt") == 0) {

185 
	`NEXT_ARG
();

186 i‡(
	`gë_size
(&
avpkt
, *
¨gv
)) {

187 
	`Ârötf
(
°dîr
, "Illegal \"avpkt\"\n");

190 
ok
++;

191 } i‡(
	`°rcmp
(*
¨gv
, "probability") == 0) {

192 
	`NEXT_ARG
();

193 i‡(
	`ssˇnf
(*
¨gv
, "%lg", &
¥obabûôy
) != 1) {

194 
	`Ârötf
(
°dîr
, "Illegal \"probability\"\n");

197 
ok
++;

198 } i‡(
	`°rcmp
(*
¨gv
, "prio") == 0) {

199 
	`NEXT_ARG
();

200 
›t
.
¥io
=
	`°πﬁ
(*
¨gv
, (**)
NULL
, 10);

202 
ok
++;

203 } i‡(
	`°rcmp
(*
¨gv
, "bandwidth") == 0) {

204 
	`NEXT_ARG
();

205 i‡(
	`gë_øã
(&
øã
, *
¨gv
)) {

206 
	`Ârötf
(
°dîr
, "Illegal \"bandwidth\"\n");

209 
ok
++;

210 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

211 
	`ex∂aö
();

214 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

215 
	`ex∂aö
();

218 
¨gc
--; 
¨gv
++;

221 i‡(!
ok
) {

222 
	`ex∂aö
();

225 i‡(
›t
.
DP
 =
MAX_DPs
 || !›t.
limô
 || !›t.
qth_mö
 || !›t.
qth_max
 ||

226 !
avpkt
) {

227 
	`Ârötf
(
°dîr
, "RequiredÖarameter (vq,Üimit, min, max, "

231 i‡(!
bur°
) {

232 
bur°
 = (2 * 
›t
.
qth_mö
 + o±.
qth_max
Ë/ (3 * 
avpkt
);

233 
	`Ârötf
(
°dîr
, "GRED: së bur°Åÿ%u\n", 
bur°
);

235 i‡(!
øã
) {

236 
	`gë_øã
(&
øã
, "10Mbit");

237 
	`Ârötf
(
°dîr
, "GRED: set bandwidthÅo 10Mbit\n");

239 i‡((
∑rm
 = 
	`tc_ªd_evÆ_ewma
(
›t
.
qth_mö
, 
bur°
, 
avpkt
)) < 0) {

240 
	`Ârötf
(
°dîr
, "GRED: failedÅo calculate EWMA constant.\n");

243 i‡(
∑rm
 >= 10)

244 
	`Ârötf
(
°dîr
, "GRED: WARNING. Burst %u seemsÅo beÅoo "

245 "œrge.\n", 
bur°
);

246 
›t
.
Wlog
 = 
∑rm
;

247 i‡((
∑rm
 = 
	`tc_ªd_evÆ_P
(
›t
.
qth_mö
, o±.
qth_max
, 
¥obabûôy
)) < 0) {

248 
	`Ârötf
(
°dîr
, "GRED: failedÅo calculateÖrobability.\n");

251 
›t
.
Plog
 = 
∑rm
;

252 i‡((
∑rm
 = 
	`tc_ªd_evÆ_idÀ_dampög
(
›t
.
Wlog
, 
avpkt
, 
øã
, 
sbuf
)) < 0)

254 
	`Ârötf
(
°dîr
, "GRED: failedÅo calculate idle damping "

258 
›t
.
S˚Œ_log
 = 
∑rm
;

260 
èû
 = 
	`NLMSG_TAIL
(
n
);

261 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

262 
	`add©å_l
(
n
, 1024, 
TCA_GRED_PARMS
, &
›t
, (opt));

263 
	`add©å_l
(
n
, 1024, 
TCA_GRED_STAB
, 
sbuf
, 256);

264 
max_P
 = 
¥obabûôy
 * 
	`pow
(2, 32);

265 
	`add©å32
(
n
, 1024, 
TCA_GRED_MAX_P
, 
max_P
);

266 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

268 
	}
}

270 
	$gªd_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

272 
π©å
 *
tb
[
TCA_GRED_MAX
 + 1];

273 
tc_gªd_s›t
 *
s›t
;

274 
tc_gªd_q›t
 *
q›t
;

275 
__u32
 *
max_p
 = 
NULL
;

276 
__u32
 *
limô
 = 
NULL
;

277 
i
;

278 
	`SPRINT_BUF
(
b1
);

279 
	`SPRINT_BUF
(
b2
);

280 
	`SPRINT_BUF
(
b3
);

282 i‡(
›t
 =
NULL
)

285 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_GRED_MAX
, 
›t
);

287 i‡(
tb
[
TCA_GRED_PARMS
] =
NULL
)

290 i‡(
tb
[
TCA_GRED_MAX_P
] &&

291 
	`RTA_PAYLOAD
(
tb
[
TCA_GRED_MAX_P
]Ë>(
__u32
Ë* 
MAX_DPs
)

292 
max_p
 = 
	`RTA_DATA
(
tb
[
TCA_GRED_MAX_P
]);

294 i‡(
tb
[
TCA_GRED_LIMIT
] &&

295 
	`RTA_PAYLOAD
(
tb
[
TCA_GRED_LIMIT
]Ë=(
__u32
))

296 
limô
 = 
	`RTA_DATA
(
tb
[
TCA_GRED_LIMIT
]);

298 
s›t
 = 
	`RTA_DATA
(
tb
[
TCA_GRED_DPS
]);

299 
q›t
 = 
	`RTA_DATA
(
tb
[
TCA_GRED_PARMS
]);

300 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_GRED_DPS
]Ë< (*
s›t
) ||

301 
	`RTA_PAYLOAD
(
tb
[
TCA_GRED_PARMS
]Ë< (*
q›t
)*
MAX_DPs
) {

302 
	`Ârötf
(
f
,"\n GREDÑeceived message smallerÅhanÉxpected\n");

308 
	`Ârötf
(
f
, "vqs %u default %u %s",

309 
s›t
->
DPs
,

310 
s›t
->
def_DP
,

311 
s›t
->
grio
 ? "grio " : "");

313 i‡(
limô
)

314 
	`Ârötf
(
f
, "limit %s ",

315 
	`•röt_size
(*
limô
, 
b1
));

317 
i
=0;i<
MAX_DPs
;i++, 
q›t
++) {

318 i‡(
q›t
->
DP
 >
MAX_DPs
) ;

319 
	`Ârötf
(
f
, "\n vq %uÖrio %hhuÜimit %s min %s max %s ",

320 
q›t
->
DP
,

321 
q›t
->
¥io
,

322 
	`•röt_size
(
q›t
->
limô
, 
b1
),

323 
	`•röt_size
(
q›t
->
qth_mö
, 
b2
),

324 
	`•röt_size
(
q›t
->
qth_max
, 
b3
));

325 i‡(
show_dëaûs
) {

326 
	`Ârötf
(
f
, "ewm®%u ", 
q›t
->
Wlog
);

327 i‡(
max_p
)

328 
	`Ârötf
(
f
, "¥obabûôy %lg ", 
max_p
[
i
] / 
	`pow
(2, 32));

330 
	`Ârötf
(
f
, "Plog %u ", 
q›t
->
Plog
);

331 
	`Ârötf
(
f
, "S˚Œ_log %u ", 
q›t
->
S˚Œ_log
);

333 i‡(
show_°©s
) {

334 
	`Ârötf
(
f
, "\n Queue size:áverage %s current %s ",

335 
	`•röt_size
(
q›t
->
qave
, 
b1
),

336 
	`•röt_size
(
q›t
->
backlog
, 
b2
));

337 
	`Ârötf
(
f
, "\n DroppedÖackets: forced %uÉarly %uÖdrop %u other %u ",

338 
q›t
->
f‹˚d
,

339 
q›t
->
óæy
,

340 
q›t
->
pdr›
,

341 
q›t
->
Ÿhî
);

342 
	`Ârötf
(
f
, "\n TotalÖackets: %u (%s) ",

343 
q›t
->
∑ckës
,

344 
	`•röt_size
(
q›t
->
byãsö
, 
b1
));

348 
	}
}

350 
qdisc_utû
 
	ggªd_qdisc_utû
 = {

351 .
id
 = "gred",

352 .
	g∑r£_q›t
 = 
gªd_∑r£_›t
,

353 .
	g¥öt_q›t
 = 
gªd_¥öt_›t
,

	@tc/q_hfsc.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<m©h.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

27 
hfsc_gë_sc
(*, ***, 
tc_£rvi˚_curve
 *);

31 
	$ex∂aö_qdisc
()

33 
	`Ârötf
(
°dîr
,

38 
	}
}

41 
	$ex∂aö_˛ass
()

43 
	`Ârötf
(
°dîr
,

65 
	}
}

68 
	$ex∂aö1
(*
¨g
)

70 
	`Ârötf
(
°dîr
, "HFSC: IŒegÆ \"%s\"\n", 
¨g
);

71 
	}
}

74 
	$hfsc_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

76 
tc_hfsc_q›t
 
q›t
;

78 
	`mem£t
(&
q›t
, 0, (qopt));

80 
¨gc
 > 0) {

81 i‡(
	`m©ches
(*
¨gv
, "default") == 0) {

82 
	`NEXT_ARG
();

83 i‡(
q›t
.
def˛s
 != 0) {

84 
	`Ârötf
(
°dîr
, "HFSC: Double \"default\"\n");

87 i‡(
	`gë_u16
(&
q›t
.
def˛s
, *
¨gv
, 16) < 0) {

88 
	`ex∂aö1
("default");

91 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

92 
	`ex∂aö_qdisc
();

95 
	`Ârötf
(
°dîr
, "HFSC: Wh© i†\"%s\" ?\n", *
¨gv
);

96 
	`ex∂aö_qdisc
();

99 
¨gc
--, 
¨gv
++;

102 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, &
q›t
, (qopt));

104 
	}
}

107 
	$hfsc_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

109 
tc_hfsc_q›t
 *
q›t
;

111 i‡(
›t
 =
NULL
)

113 i‡(
	`RTA_PAYLOAD
(
›t
Ë< (*
q›t
))

115 
q›t
 = 
	`RTA_DATA
(
›t
);

117 i‡(
q›t
->
def˛s
 != 0)

118 
	`Ârötf
(
f
, "deÁu… %x ", 
q›t
->
def˛s
);

121 
	}
}

124 
	$hfsc_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
x°©s
)

126 
tc_hfsc_°©s
 *
°
;

128 i‡(
x°©s
 =
NULL
)

130 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

132 
°
 = 
	`RTA_DATA
(
x°©s
);

134 
	`Ârötf
(
f
, "Öîiod %u ", 
°
->
≥riod
);

135 i‡(
°
->
w‹k
 != 0)

136 
	`Ârötf
(
f
, "w‹k %Œu byã†", (Ë
°
->
w‹k
);

137 i‡(
°
->
πw‹k
 != 0)

138 
	`Ârötf
(
f
, "πw‹k %Œu byã†", (Ë
°
->
πw‹k
);

139 
	`Ârötf
(
f
, "Àvñ %u ", 
°
->
Àvñ
);

140 
	`Ârötf
(
f
, "\n");

143 
	}
}

146 
	$hfsc_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

147 
∆msghdr
 *
n
)

149 
tc_£rvi˚_curve
 
rsc
, 
fsc
, 
usc
;

150 
rsc_ok
, 
fsc_ok
, 
usc_ok
;

151 
π©å
 *
èû
;

153 
	`mem£t
(&
rsc
, 0, (rsc));

154 
	`mem£t
(&
fsc
, 0, (fsc));

155 
	`mem£t
(&
usc
, 0, (usc));

156 
rsc_ok
 = 
fsc_ok
 = 
usc_ok
 = 0;

158 
¨gc
 > 0) {

159 i‡(
	`m©ches
(*
¨gv
, "rt") == 0) {

160 
	`NEXT_ARG
();

161 i‡(
	`hfsc_gë_sc
(&
¨gc
, &
¨gv
, &
rsc
) < 0) {

162 
	`ex∂aö1
("rt");

165 
rsc_ok
 = 1;

166 } i‡(
	`m©ches
(*
¨gv
, "ls") == 0) {

167 
	`NEXT_ARG
();

168 i‡(
	`hfsc_gë_sc
(&
¨gc
, &
¨gv
, &
fsc
) < 0) {

169 
	`ex∂aö1
("ls");

172 
fsc_ok
 = 1;

173 } i‡(
	`m©ches
(*
¨gv
, "sc") == 0) {

174 
	`NEXT_ARG
();

175 i‡(
	`hfsc_gë_sc
(&
¨gc
, &
¨gv
, &
rsc
) < 0) {

176 
	`ex∂aö1
("sc");

179 
	`mem˝y
(&
fsc
, &
rsc
, (fsc));

180 
rsc_ok
 = 1;

181 
fsc_ok
 = 1;

182 } i‡(
	`m©ches
(*
¨gv
, "ul") == 0) {

183 
	`NEXT_ARG
();

184 i‡(
	`hfsc_gë_sc
(&
¨gc
, &
¨gv
, &
usc
) < 0) {

185 
	`ex∂aö1
("ul");

188 
usc_ok
 = 1;

189 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

190 
	`ex∂aö_˛ass
();

193 
	`Ârötf
(
°dîr
, "HFSC: Wh© i†\"%s\" ?\n", *
¨gv
);

194 
	`ex∂aö_˛ass
();

197 
¨gc
--, 
¨gv
++;

200 i‡(!(
rsc_ok
 || 
fsc_ok
 || 
usc_ok
)) {

201 
	`Ârötf
(
°dîr
, "HFSC:ÇoÖarameters given\n");

202 
	`ex∂aö_˛ass
();

205 i‡(
usc_ok
 && !
fsc_ok
) {

206 
	`Ârötf
(
°dîr
, "HFSC: Upper-limit Service Curve without "

208 
	`ex∂aö_˛ass
();

212 
èû
 = 
	`NLMSG_TAIL
(
n
);

214 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

215 i‡(
rsc_ok
)

216 
	`add©å_l
(
n
, 1024, 
TCA_HFSC_RSC
, &
rsc
, (rsc));

217 i‡(
fsc_ok
)

218 
	`add©å_l
(
n
, 1024, 
TCA_HFSC_FSC
, &
fsc
, (fsc));

219 i‡(
usc_ok
)

220 
	`add©å_l
(
n
, 1024, 
TCA_HFSC_USC
, &
usc
, (usc));

222 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

224 
	}
}

227 
	$hfsc_¥öt_sc
(
FILE
 *
f
, *
«me
, 
tc_£rvi˚_curve
 *
sc
)

229 
	`SPRINT_BUF
(
b1
);

231 
	`Ârötf
(
f
, "%†", 
«me
);

232 
	`Ârötf
(
f
, "m1 %†", 
	`•röt_øã
(
sc
->
m1
, 
b1
));

233 
	`Ârötf
(
f
, "d %†", 
	`•röt_time
(
	`tc_c‹e_ktime2time
(
sc
->
d
), 
b1
));

234 
	`Ârötf
(
f
, "m2 %†", 
	`•röt_øã
(
sc
->
m2
, 
b1
));

235 
	}
}

238 
	$hfsc_¥öt_˛ass_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

240 
π©å
 *
tb
[
TCA_HFSC_MAX
+1];

241 
tc_£rvi˚_curve
 *
rsc
 = 
NULL
, *
fsc
 = NULL, *
usc
 = NULL;

243 i‡(
›t
 =
NULL
)

246 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_HFSC_MAX
, 
›t
);

248 i‡(
tb
[
TCA_HFSC_RSC
]) {

249 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_HFSC_RSC
]Ë< (*
rsc
))

250 
	`Ârötf
(
°dîr
, "HFSC:ÅruncatedÑealtime option\n");

252 
rsc
 = 
	`RTA_DATA
(
tb
[
TCA_HFSC_RSC
]);

254 i‡(
tb
[
TCA_HFSC_FSC
]) {

255 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_HFSC_FSC
]Ë< (*
fsc
))

256 
	`Ârötf
(
°dîr
, "HFSC:ÅruncatedÜinkshare option\n");

258 
fsc
 = 
	`RTA_DATA
(
tb
[
TCA_HFSC_FSC
]);

260 i‡(
tb
[
TCA_HFSC_USC
]) {

261 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_HFSC_USC
]Ë< (*
usc
))

262 
	`Ârötf
(
°dîr
, "HFSC:Åruncated upperlimit option\n");

264 
usc
 = 
	`RTA_DATA
(
tb
[
TCA_HFSC_USC
]);

268 i‡(
rsc
 !
NULL
 && 
fsc
 != NULL &&

269 
	`memcmp
(
rsc
, 
fsc
, (*rsc)) == 0)

270 
	`hfsc_¥öt_sc
(
f
, "sc", 
rsc
);

272 i‡(
rsc
 !
NULL
)

273 
	`hfsc_¥öt_sc
(
f
, "π", 
rsc
);

274 i‡(
fsc
 !
NULL
)

275 
	`hfsc_¥öt_sc
(
f
, "ls", 
fsc
);

277 i‡(
usc
 !
NULL
)

278 
	`hfsc_¥öt_sc
(
f
, "ul", 
usc
);

281 
	}
}

283 
qdisc_utû
 
	ghfsc_qdisc_utû
 = {

284 .
id
 = "hfsc",

285 .
	g∑r£_q›t
 = 
hfsc_∑r£_›t
,

286 .
	g¥öt_q›t
 = 
hfsc_¥öt_›t
,

287 .
	g¥öt_x°©s
 = 
hfsc_¥öt_x°©s
,

288 .
	g∑r£_c›t
 = 
hfsc_∑r£_˛ass_›t
,

289 .
	g¥öt_c›t
 = 
hfsc_¥öt_˛ass_›t
,

293 
	$hfsc_gë_sc1
(*
¨g˝
, ***
¨gvp
, 
tc_£rvi˚_curve
 *
sc
)

295 **
¨gv
 = *
¨gvp
;

296 
¨gc
 = *
¨g˝
;

297 
m1
 = 0, 
d
 = 0, 
m2
 = 0;

299 i‡(
	`m©ches
(*
¨gv
, "m1") == 0) {

300 
	`NEXT_ARG
();

301 i‡(
	`gë_øã
(&
m1
, *
¨gv
) < 0) {

302 
	`ex∂aö1
("m1");

305 
	`NEXT_ARG
();

308 i‡(
	`m©ches
(*
¨gv
, "d") == 0) {

309 
	`NEXT_ARG
();

310 i‡(
	`gë_time
(&
d
, *
¨gv
) < 0) {

311 
	`ex∂aö1
("d");

314 
	`NEXT_ARG
();

317 i‡(
	`m©ches
(*
¨gv
, "m2") == 0) {

318 
	`NEXT_ARG
();

319 i‡(
	`gë_øã
(&
m2
, *
¨gv
) < 0) {

320 
	`ex∂aö1
("m2");

326 
sc
->
m1
 = m1;

327 
sc
->
d
 = 
	`tc_c‹e_time2ktime
(d);

328 
sc
->
m2
 = m2;

330 *
¨gvp
 = 
¨gv
;

331 *
¨g˝
 = 
¨gc
;

333 
	}
}

336 
	$hfsc_gë_sc2
(*
¨g˝
, ***
¨gvp
, 
tc_£rvi˚_curve
 *
sc
)

338 **
¨gv
 = *
¨gvp
;

339 
¨gc
 = *
¨g˝
;

340 
umax
 = 0, 
dmax
 = 0, 
øã
 = 0;

342 i‡(
	`m©ches
(*
¨gv
, "umax") == 0) {

343 
	`NEXT_ARG
();

344 i‡(
	`gë_size
(&
umax
, *
¨gv
) < 0) {

345 
	`ex∂aö1
("umax");

348 
	`NEXT_ARG
();

351 i‡(
	`m©ches
(*
¨gv
, "dmax") == 0) {

352 
	`NEXT_ARG
();

353 i‡(
	`gë_time
(&
dmax
, *
¨gv
) < 0) {

354 
	`ex∂aö1
("dmax");

357 
	`NEXT_ARG
();

360 i‡(
	`m©ches
(*
¨gv
, "rate") == 0) {

361 
	`NEXT_ARG
();

362 i‡(
	`gë_øã
(&
øã
, *
¨gv
) < 0) {

363 
	`ex∂aö1
("rate");

369 i‡(
umax
 !0 && 
dmax
 == 0) {

370 
	`Ârötf
(
°dîr
, "HFSC: umax given but dmax is zero.\n");

374 i‡(
dmax
 !0 && 
	`˚û
(1.0 * 
umax
 * 
TIME_UNITS_PER_SEC
 / dmaxË> 
øã
) {

379 
sc
->
m1
 = 
	`˚û
(1.0 * 
umax
 * 
TIME_UNITS_PER_SEC
 / 
dmax
);

380 
sc
->
d
 = 
	`tc_c‹e_time2ktime
(
dmax
);

381 
sc
->
m2
 = 
øã
;

387 
sc
->
m1
 = 0;

388 
sc
->
d
 = 
	`tc_c‹e_time2ktime
(
	`˚û
(
dmax
 - 
umax
 * 
TIME_UNITS_PER_SEC
 / 
øã
));

389 
sc
->
m2
 = 
øã
;

392 *
¨gvp
 = 
¨gv
;

393 *
¨g˝
 = 
¨gc
;

395 
	}
}

398 
	$hfsc_gë_sc
(*
¨g˝
, ***
¨gvp
, 
tc_£rvi˚_curve
 *
sc
)

400 i‡(
	`hfsc_gë_sc1
(
¨g˝
, 
¨gvp
, 
sc
) < 0 &&

401 
	`hfsc_gë_sc2
(
¨g˝
, 
¨gvp
, 
sc
) < 0)

404 i‡(
sc
->
m1
 =0 && sc->
m2
 == 0) {

405 
	`Ârötf
(
°dîr
, "HFSC: Service Curve hasÅwo zero slopes\n");

410 
	}
}

	@tc/q_hhf.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<uni°d.h
>

8 
	~<sy¶og.h
>

9 
	~<f˙é.h
>

10 
	~<sys/sockë.h
>

11 
	~<√töë/ö.h
>

12 
	~<¨∑/öë.h
>

13 
	~<°rög.h
>

15 
	~"utûs.h
"

16 
	~"tc_utû.h
"

18 
	$ex∂aö
()

20 
	`Ârötf
(
°dîr
, "Usage: ... hhf [Üimit PACKETS ] [ quantum BYTES]\n");

21 
	`Ârötf
(
°dîr
, " [ hh_limit NUMBER ]\n");

22 
	`Ârötf
(
°dîr
, " [Ñeset_timeout TIME ]\n");

23 
	`Ârötf
(
°dîr
, " [ádmit_bytes BYTES ]\n");

24 
	`Ârötf
(
°dîr
, " [Évict_timeout TIME ]\n");

25 
	`Ârötf
(
°dîr
, " [Çon_hh_weight NUMBER ]\n");

26 
	}
}

28 
	$hhf_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

29 
∆msghdr
 *
n
)

31 
limô
 = 0;

32 
qu™tum
 = 0;

33 
hh_limô
 = 0;

34 
ª£t_timeout
 = 0;

35 
admô_byãs
 = 0;

36 
evi˘_timeout
 = 0;

37 
n⁄_hh_weight
 = 0;

38 
π©å
 *
èû
;

40 
¨gc
 > 0) {

41 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

42 
	`NEXT_ARG
();

43 i‡(
	`gë_unsig√d
(&
limô
, *
¨gv
, 0)) {

44 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

47 } i‡(
	`°rcmp
(*
¨gv
, "quantum") == 0) {

48 
	`NEXT_ARG
();

49 i‡(
	`gë_unsig√d
(&
qu™tum
, *
¨gv
, 0)) {

50 
	`Ârötf
(
°dîr
, "Illegal \"quantum\"\n");

53 } i‡(
	`°rcmp
(*
¨gv
, "hh_limit") == 0) {

54 
	`NEXT_ARG
();

55 i‡(
	`gë_unsig√d
(&
hh_limô
, *
¨gv
, 0)) {

56 
	`Ârötf
(
°dîr
, "Illegal \"hh_limit\"\n");

59 } i‡(
	`°rcmp
(*
¨gv
, "reset_timeout") == 0) {

60 
	`NEXT_ARG
();

61 i‡(
	`gë_time
(&
ª£t_timeout
, *
¨gv
)) {

62 
	`Ârötf
(
°dîr
, "Illegal \"reset_timeout\"\n");

65 } i‡(
	`°rcmp
(*
¨gv
, "admit_bytes") == 0) {

66 
	`NEXT_ARG
();

67 i‡(
	`gë_unsig√d
(&
admô_byãs
, *
¨gv
, 0)) {

68 
	`Ârötf
(
°dîr
, "Illegal \"admit_bytes\"\n");

71 } i‡(
	`°rcmp
(*
¨gv
, "evict_timeout") == 0) {

72 
	`NEXT_ARG
();

73 i‡(
	`gë_time
(&
evi˘_timeout
, *
¨gv
)) {

74 
	`Ârötf
(
°dîr
, "Illegal \"evict_timeout\"\n");

77 } i‡(
	`°rcmp
(*
¨gv
, "non_hh_weight") == 0) {

78 
	`NEXT_ARG
();

79 i‡(
	`gë_unsig√d
(&
n⁄_hh_weight
, *
¨gv
, 0)) {

80 
	`Ârötf
(
°dîr
, "Illegal \"non_hh_weight\"\n");

83 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

84 
	`ex∂aö
();

87 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

88 
	`ex∂aö
();

91 
¨gc
--; 
¨gv
++;

94 
èû
 = 
	`NLMSG_TAIL
(
n
);

95 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

96 i‡(
limô
)

97 
	`add©å_l
(
n
, 1024, 
TCA_HHF_BACKLOG_LIMIT
, &
limô
,

98 (
limô
));

99 i‡(
qu™tum
)

100 
	`add©å_l
(
n
, 1024, 
TCA_HHF_QUANTUM
, &
qu™tum
, (quantum));

101 i‡(
hh_limô
)

102 
	`add©å_l
(
n
, 1024, 
TCA_HHF_HH_FLOWS_LIMIT
, &
hh_limô
,

103 (
hh_limô
));

104 i‡(
ª£t_timeout
)

105 
	`add©å_l
(
n
, 1024, 
TCA_HHF_RESET_TIMEOUT
, &
ª£t_timeout
,

106 (
ª£t_timeout
));

107 i‡(
admô_byãs
)

108 
	`add©å_l
(
n
, 1024, 
TCA_HHF_ADMIT_BYTES
, &
admô_byãs
,

109 (
admô_byãs
));

110 i‡(
evi˘_timeout
)

111 
	`add©å_l
(
n
, 1024, 
TCA_HHF_EVICT_TIMEOUT
, &
evi˘_timeout
,

112 (
evi˘_timeout
));

113 i‡(
n⁄_hh_weight
)

114 
	`add©å_l
(
n
, 1024, 
TCA_HHF_NON_HH_WEIGHT
, &
n⁄_hh_weight
,

115 (
n⁄_hh_weight
));

116 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

118 
	}
}

120 
	$hhf_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

122 
π©å
 *
tb
[
TCA_HHF_MAX
 + 1];

123 
limô
;

124 
qu™tum
;

125 
hh_limô
;

126 
ª£t_timeout
;

127 
admô_byãs
;

128 
evi˘_timeout
;

129 
n⁄_hh_weight
;

130 
	`SPRINT_BUF
(
b1
);

132 i‡(
›t
 =
NULL
)

135 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_HHF_MAX
, 
›t
);

137 i‡(
tb
[
TCA_HHF_BACKLOG_LIMIT
] &&

138 
	`RTA_PAYLOAD
(
tb
[
TCA_HHF_BACKLOG_LIMIT
]Ë>(
__u32
)) {

139 
limô
 = 
	`πa_gë©å_u32
(
tb
[
TCA_HHF_BACKLOG_LIMIT
]);

140 
	`Ârötf
(
f
, "limô %u∞", 
limô
);

142 i‡(
tb
[
TCA_HHF_QUANTUM
] &&

143 
	`RTA_PAYLOAD
(
tb
[
TCA_HHF_QUANTUM
]Ë>(
__u32
)) {

144 
qu™tum
 = 
	`πa_gë©å_u32
(
tb
[
TCA_HHF_QUANTUM
]);

145 
	`Ârötf
(
f
, "qu™tum %u ", 
qu™tum
);

147 i‡(
tb
[
TCA_HHF_HH_FLOWS_LIMIT
] &&

148 
	`RTA_PAYLOAD
(
tb
[
TCA_HHF_HH_FLOWS_LIMIT
]Ë>(
__u32
)) {

149 
hh_limô
 = 
	`πa_gë©å_u32
(
tb
[
TCA_HHF_HH_FLOWS_LIMIT
]);

150 
	`Ârötf
(
f
, "hh_limô %u ", 
hh_limô
);

152 i‡(
tb
[
TCA_HHF_RESET_TIMEOUT
] &&

153 
	`RTA_PAYLOAD
(
tb
[
TCA_HHF_RESET_TIMEOUT
]Ë>(
__u32
)) {

154 
ª£t_timeout
 = 
	`πa_gë©å_u32
(
tb
[
TCA_HHF_RESET_TIMEOUT
]);

155 
	`Ârötf
(
f
, "ª£t_timeouà%†", 
	`•röt_time
(
ª£t_timeout
, 
b1
));

157 i‡(
tb
[
TCA_HHF_ADMIT_BYTES
] &&

158 
	`RTA_PAYLOAD
(
tb
[
TCA_HHF_ADMIT_BYTES
]Ë>(
__u32
)) {

159 
admô_byãs
 = 
	`πa_gë©å_u32
(
tb
[
TCA_HHF_ADMIT_BYTES
]);

160 
	`Ârötf
(
f
, "admô_byã†%u ", 
admô_byãs
);

162 i‡(
tb
[
TCA_HHF_EVICT_TIMEOUT
] &&

163 
	`RTA_PAYLOAD
(
tb
[
TCA_HHF_EVICT_TIMEOUT
]Ë>(
__u32
)) {

164 
evi˘_timeout
 = 
	`πa_gë©å_u32
(
tb
[
TCA_HHF_EVICT_TIMEOUT
]);

165 
	`Ârötf
(
f
, "evi˘_timeouà%†", 
	`•röt_time
(
evi˘_timeout
, 
b1
));

167 i‡(
tb
[
TCA_HHF_NON_HH_WEIGHT
] &&

168 
	`RTA_PAYLOAD
(
tb
[
TCA_HHF_NON_HH_WEIGHT
]Ë>(
__u32
)) {

169 
n⁄_hh_weight
 = 
	`πa_gë©å_u32
(
tb
[
TCA_HHF_NON_HH_WEIGHT
]);

170 
	`Ârötf
(
f
, "n⁄_hh_weighà%u ", 
n⁄_hh_weight
);

173 
	}
}

175 
	$hhf_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
,

176 
π©å
 *
x°©s
)

178 
tc_hhf_x°©s
 *
°
;

180 i‡(
x°©s
 =
NULL
)

183 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

186 
°
 = 
	`RTA_DATA
(
x°©s
);

188 
	`Ârötf
(
f
, " drop_overlimit %u hh_overlimit %uÅot_hh %u cur_hh %u",

189 
°
->
dr›_ovîlimô
, st->
hh_ovîlimô
,

190 
°
->
hh_tŸ_cou¡
, st->
hh_cur_cou¡
);

192 
	}
}

194 
qdisc_utû
 
	ghhf_qdisc_utû
 = {

195 .
id
 = "hhf",

196 .
	g∑r£_q›t
 = 
hhf_∑r£_›t
,

197 .
	g¥öt_q›t
 = 
hhf_¥öt_›t
,

198 .
	g¥öt_x°©s
 = 
hhf_¥öt_x°©s
,

	@tc/q_htb.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	#HTB_TC_VER
 0x30003

	)

27 #i‡
HTB_TC_VER
 >> 16 !
TC_HTB_PROTOVER


31 
	$ex∂aö
()

33 
	`Ârötf
(
°dîr
, "Usage: ... qdiscádd ... htb [default N] [r2q N]\n"

52 "\nTC HTB vîsi⁄ %d.%d\n",
HTB_TC_VER
>>16,HTB_TC_VER&0xffff

54 
	}
}

56 
	$ex∂aö1
(*
¨g
)

58 
	`Ârötf
(
°dîr
, "IŒegÆ \"%s\"\n", 
¨g
);

59 
	`ex∂aö
();

60 
	}
}

63 
	$htb_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

65 
dúe˘_qÀn
 = ~0U;

66 
tc_htb_glob
 
›t
;

67 
π©å
 *
èû
;

68 
i
; *
p
;

69 
	`mem£t
(&
›t
,0,(opt));

70 
›t
.
øã2qu™tum
 = 10;

71 
›t
.
vîsi⁄
 = 3;

73 
¨gc
 > 0) {

74 i‡(
	`m©ches
(*
¨gv
, "r2q") == 0) {

75 
	`NEXT_ARG
();

76 i‡(
	`gë_u32
(&
›t
.
øã2qu™tum
, *
¨gv
, 10)) {

77 
	`ex∂aö1
("r2q");  -1;

79 } i‡(
	`m©ches
(*
¨gv
, "default") == 0) {

80 
	`NEXT_ARG
();

81 i‡(
	`gë_u32
(&
›t
.
def˛s
, *
¨gv
, 16)) {

82 
	`ex∂aö1
("default");  -1;

84 } i‡(
	`m©ches
(*
¨gv
, "debug") == 0) {

85 
	`NEXT_ARG
(); 
p
 = *
¨gv
;

86 
i
=0; i<16; i++,
p
++) {

87 i‡(*
p
<'0' || *p>'3') ;

88 
›t
.
debug
 |(*
p
-'0')<<(2*
i
);

90 } i‡(
	`m©ches
(*
¨gv
, "direct_qlen") == 0) {

91 
	`NEXT_ARG
();

92 i‡(
	`gë_u32
(&
dúe˘_qÀn
, *
¨gv
, 10)) {

93 
	`ex∂aö1
("direct_qlen");  -1;

96 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

97 
	`ex∂aö
();

100 
¨gc
--; 
¨gv
++;

102 
èû
 = 
	`NLMSG_TAIL
(
n
);

103 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

104 
	`add©å_l
(
n
, 2024, 
TCA_HTB_INIT
, &
›t
, 
	`NLMSG_ALIGN
((opt)));

105 i‡(
dúe˘_qÀn
 != ~0U)

106 
	`add©å_l
(
n
, 2024, 
TCA_HTB_DIRECT_QLEN
,

107 &
dúe˘_qÀn
, (direct_qlen));

108 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

110 
	}
}

112 
	$htb_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

114 
ok
=0;

115 
tc_htb_›t
 
›t
;

116 
__u32
 
πab
[256],
˘ab
[256];

117 
buf„r
=0,
cbuf„r
=0;

118 
˚Œ_log
=-1,
c˚Œ_log
 = -1;

119 
mtu
;

120 
mpu
 = 0;

121 
ovîhód
 = 0;

122 
lökœyî
 = 
LINKLAYER_ETHERNET
;

123 
π©å
 *
èû
;

124 
__u64
 
˚û64
 = 0, 
øã64
 = 0;

126 
	`mem£t
(&
›t
, 0, (›t)); 
mtu
 = 1600;

128 
¨gc
 > 0) {

129 i‡(
	`m©ches
(*
¨gv
, "prio") == 0) {

130 
	`NEXT_ARG
();

131 i‡(
	`gë_u32
(&
›t
.
¥io
, *
¨gv
, 10)) {

132 
	`ex∂aö1
("prio");  -1;

134 
ok
++;

135 } i‡(
	`m©ches
(*
¨gv
, "mtu") == 0) {

136 
	`NEXT_ARG
();

137 i‡(
	`gë_u32
(&
mtu
, *
¨gv
, 10)) {

138 
	`ex∂aö1
("mtu");  -1;

140 } i‡(
	`m©ches
(*
¨gv
, "mpu") == 0) {

141 
	`NEXT_ARG
();

142 i‡(
	`gë_u16
(&
mpu
, *
¨gv
, 10)) {

143 
	`ex∂aö1
("mpu");  -1;

145 } i‡(
	`m©ches
(*
¨gv
, "overhead") == 0) {

146 
	`NEXT_ARG
();

147 i‡(
	`gë_u16
(&
ovîhód
, *
¨gv
, 10)) {

148 
	`ex∂aö1
("overhead");  -1;

150 } i‡(
	`m©ches
(*
¨gv
, "linklayer") == 0) {

151 
	`NEXT_ARG
();

152 i‡(
	`gë_lökœyî
(&
lökœyî
, *
¨gv
)) {

153 
	`ex∂aö1
("linklayer");  -1;

155 } i‡(
	`m©ches
(*
¨gv
, "quantum") == 0) {

156 
	`NEXT_ARG
();

157 i‡(
	`gë_u32
(&
›t
.
qu™tum
, *
¨gv
, 10)) {

158 
	`ex∂aö1
("quantum");  -1;

160 } i‡(
	`m©ches
(*
¨gv
, "burst") == 0 ||

161 
	`°rcmp
(*
¨gv
, "buffer") == 0 ||

162 
	`°rcmp
(*
¨gv
, "maxburst") == 0) {

163 
	`NEXT_ARG
();

164 i‡(
	`gë_size_™d_˚Œ
(&
buf„r
, &
˚Œ_log
, *
¨gv
) < 0) {

165 
	`ex∂aö1
("buffer");

168 
ok
++;

169 } i‡(
	`m©ches
(*
¨gv
, "cburst") == 0 ||

170 
	`°rcmp
(*
¨gv
, "cbuffer") == 0 ||

171 
	`°rcmp
(*
¨gv
, "cmaxburst") == 0) {

172 
	`NEXT_ARG
();

173 i‡(
	`gë_size_™d_˚Œ
(&
cbuf„r
, &
c˚Œ_log
, *
¨gv
) < 0) {

174 
	`ex∂aö1
("cbuffer");

177 
ok
++;

178 } i‡(
	`°rcmp
(*
¨gv
, "ceil") == 0) {

179 
	`NEXT_ARG
();

180 i‡(
˚û64
) {

181 
	`Ârötf
(
°dîr
, "Double \"ceil\" spec\n");

184 i‡(
	`gë_øã64
(&
˚û64
, *
¨gv
)) {

185 
	`ex∂aö1
("ceil");

188 
ok
++;

189 } i‡(
	`°rcmp
(*
¨gv
, "rate") == 0) {

190 
	`NEXT_ARG
();

191 i‡(
øã64
) {

192 
	`Ârötf
(
°dîr
, "Double \"rate\" spec\n");

195 i‡(
	`gë_øã64
(&
øã64
, *
¨gv
)) {

196 
	`ex∂aö1
("rate");

199 
ok
++;

200 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

201 
	`ex∂aö
();

204 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

205 
	`ex∂aö
();

208 
¨gc
--; 
¨gv
++;

214 i‡(!
øã64
) {

215 
	`Ârötf
(
°dîr
, "\"rate\" isÑequired.\n");

219 i‡(!
˚û64
)

220 
˚û64
 = 
øã64
;

222 
›t
.
øã
.øã = (
øã64
 >= (1ULL << 32)) ? ~0U :Ñate64;

223 
›t
.
˚û
.
øã
 = (
˚û64
 >= (1ULL << 32)) ? ~0U : ceil64;

227 i‡(!
buf„r
)

228 
buf„r
 = 
øã64
 / 
	`gë_hz
(Ë+ 
mtu
;

229 i‡(!
cbuf„r
)

230 
cbuf„r
 = 
˚û64
 / 
	`gë_hz
(Ë+ 
mtu
;

232 
›t
.
˚û
.
ovîhód
 = overhead;

233 
›t
.
øã
.
ovîhód
 = overhead;

235 
›t
.
˚û
.
mpu
 = mpu;

236 
›t
.
øã
.
mpu
 = mpu;

238 i‡(
	`tc_ˇlc_πabÀ
(&
›t
.
øã
, 
πab
, 
˚Œ_log
, 
mtu
, 
lökœyî
) < 0) {

239 
	`Ârötf
(
°dîr
, "htb: failedÅo calculateÑateÅable.\n");

242 
›t
.
buf„r
 = 
	`tc_ˇlc_xmôtime
(
øã64
, buffer);

244 i‡(
	`tc_ˇlc_πabÀ
(&
›t
.
˚û
, 
˘ab
, 
c˚Œ_log
, 
mtu
, 
lökœyî
) < 0) {

245 
	`Ârötf
(
°dîr
, "htb: failedÅo calculate ceilÑateÅable.\n");

248 
›t
.
cbuf„r
 = 
	`tc_ˇlc_xmôtime
(
˚û64
, cbuffer);

250 
èû
 = 
	`NLMSG_TAIL
(
n
);

251 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

253 i‡(
øã64
 >= (1ULL << 32))

254 
	`add©å_l
(
n
, 1124, 
TCA_HTB_RATE64
, &
øã64
, (rate64));

256 i‡(
˚û64
 >= (1ULL << 32))

257 
	`add©å_l
(
n
, 1224, 
TCA_HTB_CEIL64
, &
˚û64
, (ceil64));

259 
	`add©å_l
(
n
, 2024, 
TCA_HTB_PARMS
, &
›t
, (opt));

260 
	`add©å_l
(
n
, 3024, 
TCA_HTB_RTAB
, 
πab
, 1024);

261 
	`add©å_l
(
n
, 4024, 
TCA_HTB_CTAB
, 
˘ab
, 1024);

262 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

264 
	}
}

266 
	$htb_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

268 
π©å
 *
tb
[
TCA_HTB_MAX
 + 1];

269 
tc_htb_›t
 *
h›t
;

270 
tc_htb_glob
 *
g›t
;

271 
buf„r
,
cbuf„r
;

272 
lökœyî
;

273 
__u64
 
øã64
, 
˚û64
;

274 
	`SPRINT_BUF
(
b1
);

275 
	`SPRINT_BUF
(
b2
);

276 
	`SPRINT_BUF
(
b3
);

277 
	`SPRINT_BUF
(
b4
);

279 i‡(
›t
 =
NULL
)

282 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_HTB_MAX
, 
›t
);

284 i‡(
tb
[
TCA_HTB_PARMS
]) {

285 
h›t
 = 
	`RTA_DATA
(
tb
[
TCA_HTB_PARMS
]);

286 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_HTB_PARMS
]Ë< (*
h›t
))  -1;

288 i‡(!
h›t
->
Àvñ
) {

289 
	`Ârötf
(
f
, "¥iÿ%d ", ()
h›t
->
¥io
);

290 i‡(
show_dëaûs
)

291 
	`Ârötf
(
f
, "qu™tum %d ", ()
h›t
->
qu™tum
);

294 
øã64
 = 
h›t
->
øã
.rate;

295 i‡(
tb
[
TCA_HTB_RATE64
] &&

296 
	`RTA_PAYLOAD
(
tb
[
TCA_HTB_RATE64
]Ë>(
øã64
)) {

297 
øã64
 = 
	`πa_gë©å_u64
(
tb
[
TCA_HTB_RATE64
]);

300 
˚û64
 = 
h›t
->
˚û
.
øã
;

301 i‡(
tb
[
TCA_HTB_CEIL64
] &&

302 
	`RTA_PAYLOAD
(
tb
[
TCA_HTB_CEIL64
]Ë>(
˚û64
))

303 
˚û64
 = 
	`πa_gë©å_u64
(
tb
[
TCA_HTB_CEIL64
]);

305 
	`Ârötf
(
f
, "øã %†", 
	`•röt_øã
(
øã64
, 
b1
));

306 i‡(
h›t
->
øã
.
ovîhód
)

307 
	`Ârötf
(
f
, "ovîhód %u ", 
h›t
->
øã
.
ovîhód
);

308 
buf„r
 = 
	`tc_ˇlc_xmôsize
(
øã64
, 
h›t
->buffer);

310 
	`Ârötf
(
f
, "˚û %†", 
	`•röt_øã
(
˚û64
, 
b1
));

311 
cbuf„r
 = 
	`tc_ˇlc_xmôsize
(
˚û64
, 
h›t
->cbuffer);

312 
lökœyî
 = (
h›t
->
øã
.lökœyî & 
TC_LINKLAYER_MASK
);

313 i‡(
lökœyî
 > 
TC_LINKLAYER_ETHERNET
 || 
show_dëaûs
)

314 
	`Ârötf
(
f
, "lökœyî %†", 
	`•röt_lökœyî
(
lökœyî
, 
b4
));

315 i‡(
show_dëaûs
) {

316 
	`Ârötf
(
f
, "burst %s/%u mpu %s overhead %s ",

317 
	`•röt_size
(
buf„r
, 
b1
),

318 1<<
h›t
->
øã
.
˚Œ_log
,

319 
	`•röt_size
(
h›t
->
øã
.
mpu
&0xFF, 
b2
),

320 
	`•röt_size
((
h›t
->
øã
.
mpu
>>8)&0xFF, 
b3
));

321 
	`Ârötf
(
f
, "cburst %s/%u mpu %s overhead %s ",

322 
	`•röt_size
(
cbuf„r
, 
b1
),

323 1<<
h›t
->
˚û
.
˚Œ_log
,

324 
	`•röt_size
(
h›t
->
˚û
.
mpu
&0xFF, 
b2
),

325 
	`•röt_size
((
h›t
->
˚û
.
mpu
>>8)&0xFF, 
b3
));

326 
	`Ârötf
(
f
, "Àvñ %d ", ()
h›t
->
Àvñ
);

328 
	`Ârötf
(
f
, "bur° %†", 
	`•röt_size
(
buf„r
, 
b1
));

329 
	`Ârötf
(
f
, "cbur° %†", 
	`•röt_size
(
cbuf„r
, 
b1
));

331 i‡(
show_øw
)

332 
	`Ârötf
(
f
, "buffer [%08x] cbuffer [%08x] ",

333 
h›t
->
buf„r
,h›t->
cbuf„r
);

335 i‡(
tb
[
TCA_HTB_INIT
]) {

336 
g›t
 = 
	`RTA_DATA
(
tb
[
TCA_HTB_INIT
]);

337 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_HTB_INIT
]Ë< (*
g›t
))  -1;

339 
	`Ârötf
(
f
, "r2q %d default %x direct_packets_stat %u",

340 
g›t
->
øã2qu™tum
,g›t->
def˛s
,g›t->
dúe˘_pkts
);

341 i‡(
show_dëaûs
)

342 
	`Ârötf
(
f
," vî %d.%d",
g›t
->
vîsi⁄
 >> 16,gopt->version & 0xffff);

344 i‡(
tb
[
TCA_HTB_DIRECT_QLEN
] &&

345 
	`RTA_PAYLOAD
(
tb
[
TCA_HTB_DIRECT_QLEN
]Ë>(
__u32
)) {

346 
__u32
 
dúe˘_qÀn
 = 
	`πa_gë©å_u32
(
tb
[
TCA_HTB_DIRECT_QLEN
]);

348 
	`Ârötf
(
f
, " dúe˘_qÀ¿%u", 
dúe˘_qÀn
);

351 
	}
}

353 
	$htb_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
x°©s
)

355 
tc_htb_x°©s
 *
°
;

356 i‡(
x°©s
 =
NULL
)

359 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

362 
°
 = 
	`RTA_DATA
(
x°©s
);

363 
	`Ârötf
(
f
, "Üended: %u borrowed: %u giants: %u\n",

364 
°
->
Ànds
,°->
b‹rows
,°->
gü¡s
);

365 
	`Ârötf
(
f
, "Åokís: %d ctokís: %d\n", 
°
->
tokís
,°->
˘okís
);

367 
	}
}

369 
qdisc_utû
 
	ghtb_qdisc_utû
 = {

370 .
id
 = "htb",

371 .
	g∑r£_q›t
 = 
htb_∑r£_›t
,

372 .
	g¥öt_q›t
 = 
htb_¥öt_›t
,

373 .
	g¥öt_x°©s
 = 
htb_¥öt_x°©s
,

374 .
	g∑r£_c›t
 = 
htb_∑r£_˛ass_›t
,

375 .
	g¥öt_c›t
 = 
htb_¥öt_›t
,

	@tc/q_ingress.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<sy¶og.h
>

21 
	~<f˙é.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<°rög.h
>

27 
	~"utûs.h
"

28 
	~"tc_utû.h
"

30 
	$ex∂aö
()

32 
	`Ârötf
(
°dîr
, "Usage: ... ingress \n");

33 
	}
}

35 
	$ögªss_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

37 
¨gc
 > 0) {

38 i‡(
	`°rcmp
(*
¨gv
, "handle") == 0) {

39 
	`NEXT_ARG
();

40 
¨gc
--; 
¨gv
++;

42 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

43 
	`ex∂aö
();

48 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

50 
	}
}

52 
	$ögªss_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

54 
	`Ârötf
(
f
, "---------------- ");

56 
	}
}

58 
qdisc_utû
 
	gögªss_qdisc_utû
 = {

59 .
id
 = "ingress",

60 .
	g∑r£_q›t
 = 
ögªss_∑r£_›t
,

61 .
	g¥öt_q›t
 = 
ögªss_¥öt_›t
,

	@tc/q_mqprio.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

22 
	~"utûs.h
"

23 
	~"tc_utû.h
"

25 
	$ex∂aö
()

27 
	`Ârötf
(
°dîr
, "Usage: ... mqprio [num_tc NUMBER] [map P0 P1 ...]\n");

28 
	`Ârötf
(
°dîr
, " [queues count1@offset1 count2@offset2 ...] ");

29 
	`Ârötf
(
°dîr
, "[hw 1|0]\n");

30 
	}
}

32 
	$mq¥io_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
,

33 **
¨gv
, 
∆msghdr
 *
n
)

35 
idx
;

36 
tc_mq¥io_q›t
 
›t
 = {

42 
¨gc
 > 0) {

43 
idx
 = 0;

44 i‡(
	`°rcmp
(*
¨gv
, "num_tc") == 0) {

45 
	`NEXT_ARG
();

46 i‡(
	`gë_u8
(&
›t
.
num_tc
, *
¨gv
, 10)) {

47 
	`Ârötf
(
°dîr
, "Illegal \"num_tc\"\n");

50 } i‡(
	`°rcmp
(*
¨gv
, "map") == 0) {

51 
idx
 < 
TC_QOPT_MAX_QUEUE
 && 
	`NEXT_ARG_OK
()) {

52 
	`NEXT_ARG
();

53 i‡(
	`gë_u8
(&
›t
.
¥io_tc_m≠
[
idx
], *
¨gv
, 10)) {

54 
	`PREV_ARG
();

57 
idx
++;

59  ; 
idx
 < 
TC_QOPT_MAX_QUEUE
; idx++)

60 
›t
.
¥io_tc_m≠
[
idx
] = 0;

61 } i‡(
	`°rcmp
(*
¨gv
, "queues") == 0) {

62 *
tmp
, *
tok
;

64 
idx
 < 
TC_QOPT_MAX_QUEUE
 && 
	`NEXT_ARG_OK
()) {

65 
	`NEXT_ARG
();

67 
tmp
 = 
	`°rdup
(*
¨gv
);

68 i‡(!
tmp
)

71 
tok
 = 
	`°πok
(
tmp
, "@");

72 i‡(
	`gë_u16
(&
›t
.
cou¡
[
idx
], 
tok
, 10)) {

73 
	`‰ì
(
tmp
);

74 
	`PREV_ARG
();

77 
tok
 = 
	`°πok
(
NULL
, "@");

78 i‡(
	`gë_u16
(&
›t
.
off£t
[
idx
], 
tok
, 10)) {

79 
	`‰ì
(
tmp
);

80 
	`PREV_ARG
();

83 
	`‰ì
(
tmp
);

84 
idx
++;

86 } i‡(
	`°rcmp
(*
¨gv
, "hw") == 0) {

87 
	`NEXT_ARG
();

88 i‡(
	`gë_u8
(&
›t
.
hw
, *
¨gv
, 10)) {

89 
	`Ârötf
(
°dîr
, "Illegal \"hw\"\n");

92 
idx
++;

93 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

94 
	`ex∂aö
();

97 
	`Ârötf
(
°dîr
, "Unknownárgument\n");

100 
¨gc
--; 
¨gv
++;

103 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, &
›t
, (opt));

105 
	}
}

107 
	$mq¥io_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

109 
i
;

110 
tc_mq¥io_q›t
 *
q›t
;

112 i‡(
›t
 =
NULL
)

115 
q›t
 = 
	`RTA_DATA
(
›t
);

117 
	`Ârötf
(
f
, "Å¯%u m≠ ", 
q›t
->
num_tc
);

118 
i
 = 0; i <
TC_PRIO_MAX
; i++)

119 
	`Ârötf
(
f
, "%u ", 
q›t
->
¥io_tc_m≠
[
i
]);

120 
	`Ârötf
(
f
, "\n queues:");

121 
i
 = 0; i < 
q›t
->
num_tc
; i++)

122 
	`Ârötf
(
f
, "(%u:%uË", 
q›t
->
off£t
[
i
],

123 
q›t
->
off£t
[
i
] + q›t->
cou¡
[i] - 1);

125 
	}
}

127 
qdisc_utû
 
	gmq¥io_qdisc_utû
 = {

128 .
id
 = "mqprio",

129 .
	g∑r£_q›t
 = 
mq¥io_∑r£_›t
,

130 .
	g¥öt_q›t
 = 
mq¥io_¥öt_›t
,

	@tc/q_multiq.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<uni°d.h
>

28 
	~<sy¶og.h
>

29 
	~<f˙é.h
>

30 
	~<sys/sockë.h
>

31 
	~<√töë/ö.h
>

32 
	~<¨∑/öë.h
>

33 
	~<°rög.h
>

35 
	~"utûs.h
"

36 
	~"tc_utû.h
"

38 
	$ex∂aö
()

40 
	`Ârötf
(
°dîr
, "Usage: ... multiq [help]\n");

41 
	}
}

43 
	$mu…iq_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

44 
∆msghdr
 *
n
)

46 
tc_mu…iq_q›t
 
›t
;

48 i‡(
¨gc
) {

49 i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

50 
	`ex∂aö
();

53 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

54 
	`ex∂aö
();

59 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, &
›t
, (opt));

61 
	}
}

63 
	$mu…iq_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

65 
tc_mu…iq_q›t
 *
q›t
;

67 i‡(
›t
 =
NULL
)

69 i‡(
	`RTA_PAYLOAD
(
›t
Ë< (*
q›t
))

72 
q›t
 = 
	`RTA_DATA
(
›t
);

74 
	`Ârötf
(
f
, "b™d†%u/%u ", 
q›t
->
b™ds
, q›t->
max_b™ds
);

77 
	}
}

79 
qdisc_utû
 
	gmu…iq_qdisc_utû
 = {

80 .
id
 = "multiq",

81 .
	g∑r£_q›t
 = 
mu…iq_∑r£_›t
,

82 .
	g¥öt_q›t
 = 
mu…iq_¥öt_›t
,

	@tc/q_netem.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<m©h.h
>

16 
	~<˘y≥.h
>

17 
	~<uni°d.h
>

18 
	~<sy¶og.h
>

19 
	~<f˙é.h
>

20 
	~<sys/sockë.h
>

21 
	~<√töë/ö.h
>

22 
	~<¨∑/öë.h
>

23 
	~<°rög.h
>

24 
	~<î∫o.h
>

26 
	~"utûs.h
"

27 
	~"tc_utû.h
"

28 
	~"tc_comm⁄.h
"

30 
	$ex∂aö
()

32 
	`Ârötf
(
°dîr
,

44 
	}
}

46 
	$ex∂aö1
(c⁄° *
¨g
)

48 
	`Ârötf
(
°dîr
, "IŒegÆ \"%s\"\n", 
¨g
);

49 
	}
}

54 
	#MAX_DIST
 (16*1024)

	)

56 c⁄° 
	gmax_≥r˚¡_vÆue
 = 0xffffffff;

59 
	$£t_≥r˚¡
(
__u32
 *
≥r˚¡
, 
≥r
)

61 *
≥r˚¡
 = (Ë
	`röt
(
≥r
 * 
max_≥r˚¡_vÆue
);

62 
	}
}

68 
	$∑r£_≥r˚¡
(*
vÆ
, c⁄° *
°r
)

70 *
p
;

72 *
vÆ
 = 
	`°πod
(
°r
, &
p
) / 100.;

73 i‡(*
p
 && 
	`°rcmp
(p, "%") )

77 
	}
}

79 
	$gë_≥r˚¡
(
__u32
 *
≥r˚¡
, c⁄° *
°r
)

81 
≥r
;

83 i‡(
	`∑r£_≥r˚¡
(&
≥r
, 
°r
))

86 
	`£t_≥r˚¡
(
≥r˚¡
, 
≥r
);

88 
	}
}

90 
	$¥öt_≥r˚¡
(*
buf
, 
Àn
, 
__u32
 
≥r
)

92 
	`¢¥ötf
(
buf
, 
Àn
, "%g%%", 100. * (Ë
≥r
 / 
max_≥r˚¡_vÆue
);

93 
	}
}

95 * 
	$•röt_≥r˚¡
(
__u32
 
≥r
, *
buf
)

97 
	`¥öt_≥r˚¡
(
buf
, 
SPRINT_BSIZE
-1, 
≥r
);

98  
buf
;

99 
	}
}

107 
	$gë_di°ributi⁄
(c⁄° *
ty≥
, 
__s16
 *
d©a
, 
maxd©a
)

109 
FILE
 *
f
;

110 
n
;

111 
x
;

112 
size_t
 
Àn
;

113 *
löe
 = 
NULL
;

114 
«me
[128];

116 
	`¢¥ötf
(
«me
, “ame), "%s/%s.di°", 
	`gë_tc_lib
(), 
ty≥
);

117 i‡((
f
 = 
	`f›í
(
«me
, "r")Ë=
NULL
) {

118 
	`Ârötf
(
°dîr
, "No distribution data for %s (%s: %s)\n",

119 
ty≥
, 
«me
, 
	`°ªº‹
(
î∫o
));

123 
n
 = 0;

124 
	`gëlöe
(&
löe
, &
Àn
, 
f
) != -1) {

125 *
p
, *
ídp
;

126 i‡(*
löe
 == '\n' || *line == '#')

129 
p
 = 
löe
; ;Ö = 
ídp
) {

130 
x
 = 
	`°πﬁ
(
p
, &
ídp
, 0);

131 i‡(
ídp
 =
p
)

134 i‡(
n
 >
maxd©a
) {

135 
	`Ârötf
(
°dîr
, "%s:Åoo much data\n",

136 
«me
);

137 
n
 = -1;

138 
îr‹
;

140 
d©a
[
n
++] = 
x
;

143 
îr‹
:

144 
	`‰ì
(
löe
);

145 
	`f˛o£
(
f
);

146  
n
;

147 
	}
}

149 
	#NEXT_IS_NUMBER
(Ë(
	`NEXT_ARG_OK
(Ë&& 
	`isdigô
(
¨gv
[1][0]))

	)

150 
	#NEXT_IS_SIGNED_NUMBER
() \

151 (
	`NEXT_ARG_OK
(Ë&& (
	`isdigô
(
¨gv
[1][0]Ë||árgv[1][0] ='-'))

	)

155 
	$gë_ticks
(
__u32
 *
ticks
, c⁄° *
°r
)

157 
t
;

159 if(
	`gë_time
(&
t
, 
°r
))

162 i‡(
	`tc_c‹e_time2big
(
t
)) {

163 
	`Ârötf
(
°dîr
, "IŒegÆ %uÅimê—oÿœrge)\n", 
t
);

167 *
ticks
 = 
	`tc_c‹e_time2tick
(
t
);

169 
	}
}

171 
	$√ãm_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

172 
∆msghdr
 *
n
)

174 
di°_size
 = 0;

175 
π©å
 *
èû
;

176 
tc_√ãm_q›t
 
›t
 = { .
limô
 = 1000 };

177 
tc_√ãm_c‹r
 
c‹
;

178 
tc_√ãm_ª‹dî
 
ª‹dî
;

179 
tc_√ãm_c‹ru±
 
c‹ru±
;

180 
tc_√ãm_gimodñ
 
gimodñ
;

181 
tc_√ãm_gemodñ
 
gemodñ
;

182 
tc_√ãm_øã
 
øã
;

183 
__s16
 *
di°_d©a
 = 
NULL
;

184 
__u16
 
loss_ty≥
 = 
NETEM_LOSS_UNSPEC
;

185 
¥e£¡
[
__TCA_NETEM_MAX
];

186 
__u64
 
øã64
 = 0;

188 
	`mem£t
(&
c‹
, 0, (cor));

189 
	`mem£t
(&
ª‹dî
, 0, (reorder));

190 
	`mem£t
(&
c‹ru±
, 0, (corrupt));

191 
	`mem£t
(&
øã
, 0, (rate));

192 
	`mem£t
(
¥e£¡
, 0, (present));

194  ; 
¨gc
 > 0; --¨gc, ++
¨gv
) {

195 i‡(
	`m©ches
(*
¨gv
, "limit") == 0) {

196 
	`NEXT_ARG
();

197 i‡(
	`gë_size
(&
›t
.
limô
, *
¨gv
)) {

198 
	`ex∂aö1
("limit");

201 } i‡(
	`m©ches
(*
¨gv
, "latency") == 0 ||

202 
	`m©ches
(*
¨gv
, "delay") == 0) {

203 
	`NEXT_ARG
();

204 i‡(
	`gë_ticks
(&
›t
.
œãncy
, *
¨gv
)) {

205 
	`ex∂aö1
("latency");

209 i‡(
	`NEXT_IS_NUMBER
()) {

210 
	`NEXT_ARG
();

211 i‡(
	`gë_ticks
(&
›t
.
jôãr
, *
¨gv
)) {

212 
	`ex∂aö1
("latency");

216 i‡(
	`NEXT_IS_NUMBER
()) {

217 
	`NEXT_ARG
();

218 ++
¥e£¡
[
TCA_NETEM_CORR
];

219 i‡(
	`gë_≥r˚¡
(&
c‹
.
dñay_c‹r
, *
¨gv
)) {

220 
	`ex∂aö1
("latency");

225 } i‡(
	`m©ches
(*
¨gv
, "loss") == 0 ||

226 
	`m©ches
(*
¨gv
, "drop") == 0) {

227 i‡(
›t
.
loss
 > 0 || 
loss_ty≥
 !
NETEM_LOSS_UNSPEC
) {

228 
	`ex∂aö1
("duplicateÜossárgument\n");

232 
	`NEXT_ARG
();

234 i‡(
	`isdigô
(
¨gv
[0][0]))

235 
øndom_loss_modñ
;

237 i‡(!
	`°rcmp
(*
¨gv
, "random")) {

238 
	`NEXT_ARG
();

239 
øndom_loss_modñ
:

240 i‡(
	`gë_≥r˚¡
(&
›t
.
loss
, *
¨gv
)) {

241 
	`ex∂aö1
("lossÖercent");

244 i‡(
	`NEXT_IS_NUMBER
()) {

245 
	`NEXT_ARG
();

246 ++
¥e£¡
[
TCA_NETEM_CORR
];

247 i‡(
	`gë_≥r˚¡
(&
c‹
.
loss_c‹r
, *
¨gv
)) {

248 
	`ex∂aö1
("loss correllation");

252 } i‡(!
	`°rcmp
(*
¨gv
, "state")) {

253 
p13
;

255 
	`NEXT_ARG
();

256 i‡(
	`∑r£_≥r˚¡
(&
p13
, *
¨gv
)) {

257 
	`ex∂aö1
("lossÖ13");

262 
	`£t_≥r˚¡
(&
gimodñ
.
p13
,Ö13);

263 
	`£t_≥r˚¡
(&
gimodñ
.
p31
, 1. - 
p13
);

264 
	`£t_≥r˚¡
(&
gimodñ
.
p32
, 0);

265 
	`£t_≥r˚¡
(&
gimodñ
.
p23
, 1.);

266 
	`£t_≥r˚¡
(&
gimodñ
.
p14
, 0);

267 
loss_ty≥
 = 
NETEM_LOSS_GI
;

269 i‡(!
	`NEXT_IS_NUMBER
())

271 
	`NEXT_ARG
();

272 i‡(
	`gë_≥r˚¡
(&
gimodñ
.
p31
, *
¨gv
)) {

273 
	`ex∂aö1
("lossÖ31");

277 i‡(!
	`NEXT_IS_NUMBER
())

279 
	`NEXT_ARG
();

280 i‡(
	`gë_≥r˚¡
(&
gimodñ
.
p32
, *
¨gv
)) {

281 
	`ex∂aö1
("lossÖ32");

285 i‡(!
	`NEXT_IS_NUMBER
())

287 
	`NEXT_ARG
();

288 i‡(
	`gë_≥r˚¡
(&
gimodñ
.
p23
, *
¨gv
)) {

289 
	`ex∂aö1
("lossÖ23");

292 i‡(!
	`NEXT_IS_NUMBER
())

294 
	`NEXT_ARG
();

295 i‡(
	`gë_≥r˚¡
(&
gimodñ
.
p14
, *
¨gv
)) {

296 
	`ex∂aö1
("lossÖ14");

300 } i‡(!
	`°rcmp
(*
¨gv
, "gemodel")) {

301 
	`NEXT_ARG
();

302 i‡(
	`gë_≥r˚¡
(&
gemodñ
.
p
, *
¨gv
)) {

303 
	`ex∂aö1
("loss gemodelÖ");

308 
	`£t_≥r˚¡
(&
gemodñ
.
r
, 1.);

309 
	`£t_≥r˚¡
(&
gemodñ
.
h
, 0);

310 
	`£t_≥r˚¡
(&
gemodñ
.
k1
, 0);

311 
loss_ty≥
 = 
NETEM_LOSS_GE
;

313 i‡(!
	`NEXT_IS_NUMBER
())

315 
	`NEXT_ARG
();

316 i‡(
	`gë_≥r˚¡
(&
gemodñ
.
r
, *
¨gv
)) {

317 
	`ex∂aö1
("loss gemodelÑ");

321 i‡(!
	`NEXT_IS_NUMBER
())

323 
	`NEXT_ARG
();

324 i‡(
	`gë_≥r˚¡
(&
gemodñ
.
h
, *
¨gv
)) {

325 
	`ex∂aö1
("loss gemodel h");

331 
gemodñ
.
h
 = 
max_≥r˚¡_vÆue
 - gemodel.h;

333 i‡(!
	`NEXT_IS_NUMBER
())

335 
	`NEXT_ARG
();

336 i‡(
	`gë_≥r˚¡
(&
gemodñ
.
k1
, *
¨gv
)) {

337 
	`ex∂aö1
("loss gemodel k");

341 
	`Ârötf
(
°dîr
, "UnknownÜossÖarameter: %s\n",

342 *
¨gv
);

345 } i‡(
	`m©ches
(*
¨gv
, "ecn") == 0) {

346 
¥e£¡
[
TCA_NETEM_ECN
] = 1;

347 } i‡(
	`m©ches
(*
¨gv
, "reorder") == 0) {

348 
	`NEXT_ARG
();

349 
¥e£¡
[
TCA_NETEM_REORDER
] = 1;

350 i‡(
	`gë_≥r˚¡
(&
ª‹dî
.
¥obabûôy
, *
¨gv
)) {

351 
	`ex∂aö1
("reorder");

354 i‡(
	`NEXT_IS_NUMBER
()) {

355 
	`NEXT_ARG
();

356 ++
¥e£¡
[
TCA_NETEM_CORR
];

357 i‡(
	`gë_≥r˚¡
(&
ª‹dî
.
c‹ªœti⁄
, *
¨gv
)) {

358 
	`ex∂aö1
("reorder");

362 } i‡(
	`m©ches
(*
¨gv
, "corrupt") == 0) {

363 
	`NEXT_ARG
();

364 
¥e£¡
[
TCA_NETEM_CORRUPT
] = 1;

365 i‡(
	`gë_≥r˚¡
(&
c‹ru±
.
¥obabûôy
, *
¨gv
)) {

366 
	`ex∂aö1
("corrupt");

369 i‡(
	`NEXT_IS_NUMBER
()) {

370 
	`NEXT_ARG
();

371 ++
¥e£¡
[
TCA_NETEM_CORR
];

372 i‡(
	`gë_≥r˚¡
(&
c‹ru±
.
c‹ªœti⁄
, *
¨gv
)) {

373 
	`ex∂aö1
("corrupt");

377 } i‡(
	`m©ches
(*
¨gv
, "gap") == 0) {

378 
	`NEXT_ARG
();

379 i‡(
	`gë_u32
(&
›t
.
g≠
, *
¨gv
, 0)) {

380 
	`ex∂aö1
("gap");

383 } i‡(
	`m©ches
(*
¨gv
, "duplicate") == 0) {

384 
	`NEXT_ARG
();

385 i‡(
	`gë_≥r˚¡
(&
›t
.
du∂iˇã
, *
¨gv
)) {

386 
	`ex∂aö1
("duplicate");

389 i‡(
	`NEXT_IS_NUMBER
()) {

390 
	`NEXT_ARG
();

391 i‡(
	`gë_≥r˚¡
(&
c‹
.
dup_c‹r
, *
¨gv
)) {

392 
	`ex∂aö1
("duplicate");

396 } i‡(
	`m©ches
(*
¨gv
, "distribution") == 0) {

397 
	`NEXT_ARG
();

398 
di°_d©a
 = 
	`ˇŒoc
((di°_d©a[0]), 
MAX_DIST
);

399 
di°_size
 = 
	`gë_di°ributi⁄
(*
¨gv
, 
di°_d©a
, 
MAX_DIST
);

400 i‡(
di°_size
 <= 0) {

401 
	`‰ì
(
di°_d©a
);

404 } i‡(
	`m©ches
(*
¨gv
, "rate") == 0) {

405 ++
¥e£¡
[
TCA_NETEM_RATE
];

406 
	`NEXT_ARG
();

407 i‡(
	`gë_øã64
(&
øã64
, *
¨gv
)) {

408 
	`ex∂aö1
("rate");

411 i‡(
	`NEXT_IS_SIGNED_NUMBER
()) {

412 
	`NEXT_ARG
();

413 i‡(
	`gë_s32
(&
øã
.
∑ckë_ovîhód
, *
¨gv
, 0)) {

414 
	`ex∂aö1
("rate");

418 i‡(
	`NEXT_IS_NUMBER
()) {

419 
	`NEXT_ARG
();

420 i‡(
	`gë_u32
(&
øã
.
˚Œ_size
, *
¨gv
, 0)) {

421 
	`ex∂aö1
("rate");

425 i‡(
	`NEXT_IS_SIGNED_NUMBER
()) {

426 
	`NEXT_ARG
();

427 i‡(
	`gë_s32
(&
øã
.
˚Œ_ovîhód
, *
¨gv
, 0)) {

428 
	`ex∂aö1
("rate");

432 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

433 
	`ex∂aö
();

436 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

437 
	`ex∂aö
();

442 
èû
 = 
	`NLMSG_TAIL
(
n
);

444 i‡(
ª‹dî
.
¥obabûôy
) {

445 i‡(
›t
.
œãncy
 == 0) {

446 
	`Ârötf
(
°dîr
, "reorderingÇotÖossible without specifying some delay\n");

447 
	`ex∂aö
();

450 i‡(
›t
.
g≠
 == 0)

451 
›t
.
g≠
 = 1;

452 } i‡(
›t
.
g≠
 > 0) {

453 
	`Ârötf
(
°dîr
, "gap specified withoutÑeorderÖrobability\n");

454 
	`ex∂aö
();

458 i‡(
¥e£¡
[
TCA_NETEM_ECN
]) {

459 i‡(
›t
.
loss
 <0 && 
loss_ty≥
 =
NETEM_LOSS_UNSPEC
) {

460 
	`Ârötf
(
°dîr
, "ecnÑequested withoutÜoss model\n");

461 
	`ex∂aö
();

466 i‡(
di°_d©a
 && (
›t
.
œãncy
 =0 || o±.
jôãr
 == 0)) {

467 
	`Ârötf
(
°dîr
, "distribution specified butÇoÜatencyánd jitter values\n");

468 
	`ex∂aö
();

472 i‡(
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, &
›t
, (opt)) < 0)

475 i‡(
¥e£¡
[
TCA_NETEM_CORR
] &&

476 
	`add©å_l
(
n
, 1024, 
TCA_NETEM_CORR
, &
c‹
, (cor)) < 0)

479 i‡(
¥e£¡
[
TCA_NETEM_REORDER
] &&

480 
	`add©å_l
(
n
, 1024, 
TCA_NETEM_REORDER
, &
ª‹dî
, (reorder)) < 0)

483 i‡(
¥e£¡
[
TCA_NETEM_ECN
] &&

484 
	`add©å_l
(
n
, 1024, 
TCA_NETEM_ECN
, &
¥e£¡
[TCA_NETEM_ECN],

485 (
¥e£¡
[
TCA_NETEM_ECN
])) < 0)

488 i‡(
¥e£¡
[
TCA_NETEM_CORRUPT
] &&

489 
	`add©å_l
(
n
, 1024, 
TCA_NETEM_CORRUPT
, &
c‹ru±
, (corrupt)) < 0)

492 i‡(
loss_ty≥
 !
NETEM_LOSS_UNSPEC
) {

493 
π©å
 *
°¨t
;

495 
°¨t
 = 
	`add©å_√°
(
n
, 1024, 
TCA_NETEM_LOSS
 | 
NLA_F_NESTED
);

496 i‡(
loss_ty≥
 =
NETEM_LOSS_GI
) {

497 i‡(
	`add©å_l
(
n
, 1024, 
NETEM_LOSS_GI
,

498 &
gimodñ
, (gimodel)) < 0)

500 } i‡(
loss_ty≥
 =
NETEM_LOSS_GE
) {

501 i‡(
	`add©å_l
(
n
, 1024, 
NETEM_LOSS_GE
,

502 &
gemodñ
, (gemodel)) < 0)

505 
	`Ârötf
(
°dîr
, "loss inÅhe weeds!\n");

509 
	`add©å_√°_íd
(
n
, 
°¨t
);

512 i‡(
¥e£¡
[
TCA_NETEM_RATE
]) {

513 i‡(
øã64
 >= (1ULL << 32)) {

514 i‡(
	`add©å_l
(
n
, 1024,

515 
TCA_NETEM_RATE64
, &
øã64
, (rate64)) < 0)

517 
øã
.rate = ~0U;

519 
øã
.øã = 
øã64
;

521 i‡(
	`add©å_l
(
n
, 1024, 
TCA_NETEM_RATE
, &
øã
, (rate)) < 0)

525 i‡(
di°_d©a
) {

526 i‡(
	`add©å_l
(
n
, 
MAX_DIST
 * (
di°_d©a
[0]),

527 
TCA_NETEM_DELAY_DIST
,

528 
di°_d©a
, 
di°_size
 * (dist_data[0])) < 0)

530 
	`‰ì
(
di°_d©a
);

532 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

534 
	}
}

536 
	$√ãm_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

538 c⁄° 
tc_√ãm_c‹r
 *
c‹
 = 
NULL
;

539 c⁄° 
tc_√ãm_ª‹dî
 *
ª‹dî
 = 
NULL
;

540 c⁄° 
tc_√ãm_c‹ru±
 *
c‹ru±
 = 
NULL
;

541 c⁄° 
tc_√ãm_gimodñ
 *
gimodñ
 = 
NULL
;

542 c⁄° 
tc_√ãm_gemodñ
 *
gemodñ
 = 
NULL
;

543 *
e˙
 = 
NULL
;

544 
tc_√ãm_q›t
 
q›t
;

545 c⁄° 
tc_√ãm_øã
 *
øã
 = 
NULL
;

546 
Àn
 = 
	`RTA_PAYLOAD
(
›t
Ë- (
q›t
);

547 
__u64
 
øã64
 = 0;

548 
	`SPRINT_BUF
(
b1
);

550 i‡(
›t
 =
NULL
)

553 i‡(
Àn
 < 0) {

554 
	`Ârötf
(
°dîr
, "options sizeÉrror\n");

557 
	`mem˝y
(&
q›t
, 
	`RTA_DATA
(
›t
), (qopt));

559 i‡(
Àn
 > 0) {

560 
π©å
 *
tb
[
TCA_NETEM_MAX
+1];

561 
	`∑r£_π©å
(
tb
, 
TCA_NETEM_MAX
, 
	`RTA_DATA
(
›t
Ë+ (
q›t
),

562 
Àn
);

564 i‡(
tb
[
TCA_NETEM_CORR
]) {

565 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_NETEM_CORR
]Ë< (*
c‹
))

567 
c‹
 = 
	`RTA_DATA
(
tb
[
TCA_NETEM_CORR
]);

569 i‡(
tb
[
TCA_NETEM_REORDER
]) {

570 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_NETEM_REORDER
]Ë< (*
ª‹dî
))

572 
ª‹dî
 = 
	`RTA_DATA
(
tb
[
TCA_NETEM_REORDER
]);

574 i‡(
tb
[
TCA_NETEM_CORRUPT
]) {

575 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_NETEM_CORRUPT
]Ë< (*
c‹ru±
))

577 
c‹ru±
 = 
	`RTA_DATA
(
tb
[
TCA_NETEM_CORRUPT
]);

579 i‡(
tb
[
TCA_NETEM_LOSS
]) {

580 
π©å
 *
lb
[
NETEM_LOSS_MAX
 + 1];

582 
	`∑r£_π©å_√°ed
(
lb
, 
NETEM_LOSS_MAX
, 
tb
[
TCA_NETEM_LOSS
]);

583 i‡(
lb
[
NETEM_LOSS_GI
])

584 
gimodñ
 = 
	`RTA_DATA
(
lb
[
NETEM_LOSS_GI
]);

585 i‡(
lb
[
NETEM_LOSS_GE
])

586 
gemodñ
 = 
	`RTA_DATA
(
lb
[
NETEM_LOSS_GE
]);

588 i‡(
tb
[
TCA_NETEM_RATE
]) {

589 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_NETEM_RATE
]Ë< (*
øã
))

591 
øã
 = 
	`RTA_DATA
(
tb
[
TCA_NETEM_RATE
]);

593 i‡(
tb
[
TCA_NETEM_ECN
]) {

594 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_NETEM_ECN
]Ë< (*
e˙
))

596 
e˙
 = 
	`RTA_DATA
(
tb
[
TCA_NETEM_ECN
]);

598 i‡(
tb
[
TCA_NETEM_RATE64
]) {

599 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_NETEM_RATE64
]Ë< (
øã64
))

601 
øã64
 = 
	`πa_gë©å_u64
(
tb
[
TCA_NETEM_RATE64
]);

605 
	`Ârötf
(
f
, "limô %d", 
q›t
.
limô
);

607 i‡(
q›t
.
œãncy
) {

608 
	`Ârötf
(
f
, " dñay %s", 
	`•röt_ticks
(
q›t
.
œãncy
, 
b1
));

610 i‡(
q›t
.
jôãr
) {

611 
	`Ârötf
(
f
, " %s", 
	`•röt_ticks
(
q›t
.
jôãr
, 
b1
));

612 i‡(
c‹
 && c‹->
dñay_c‹r
)

613 
	`Ârötf
(
f
, " %s", 
	`•röt_≥r˚¡
(
c‹
->
dñay_c‹r
, 
b1
));

617 i‡(
q›t
.
loss
) {

618 
	`Ârötf
(
f
, "Üos†%s", 
	`•röt_≥r˚¡
(
q›t
.
loss
, 
b1
));

619 i‡(
c‹
 && c‹->
loss_c‹r
)

620 
	`Ârötf
(
f
, " %s", 
	`•röt_≥r˚¡
(
c‹
->
loss_c‹r
, 
b1
));

623 i‡(
gimodñ
) {

624 
	`Ârötf
(
f
, "Üos†°©êp13 %s", 
	`•röt_≥r˚¡
(
gimodñ
->
p13
, 
b1
));

625 
	`Ârötf
(
f
, "Ö31 %s", 
	`•röt_≥r˚¡
(
gimodñ
->
p31
, 
b1
));

626 
	`Ârötf
(
f
, "Ö32 %s", 
	`•röt_≥r˚¡
(
gimodñ
->
p32
, 
b1
));

627 
	`Ârötf
(
f
, "Ö23 %s", 
	`•röt_≥r˚¡
(
gimodñ
->
p23
, 
b1
));

628 
	`Ârötf
(
f
, "Ö14 %s", 
	`•röt_≥r˚¡
(
gimodñ
->
p14
, 
b1
));

631 i‡(
gemodñ
) {

632 
	`Ârötf
(
f
, "Üoss gemodelÖ %s",

633 
	`•röt_≥r˚¡
(
gemodñ
->
p
, 
b1
));

634 
	`Ârötf
(
f
, "Ñ %s", 
	`•röt_≥r˚¡
(
gemodñ
->
r
, 
b1
));

635 
	`Ârötf
(
f
, " 1-h %s", 
	`•röt_≥r˚¡
(
max_≥r˚¡_vÆue
 -

636 
gemodñ
->
h
, 
b1
));

637 
	`Ârötf
(
f
, " 1-k %s", 
	`•röt_≥r˚¡
(
gemodñ
->
k1
, 
b1
));

640 i‡(
q›t
.
du∂iˇã
) {

641 
	`Ârötf
(
f
, " duplicate %s",

642 
	`•röt_≥r˚¡
(
q›t
.
du∂iˇã
, 
b1
));

643 i‡(
c‹
 && c‹->
dup_c‹r
)

644 
	`Ârötf
(
f
, " %s", 
	`•röt_≥r˚¡
(
c‹
->
dup_c‹r
, 
b1
));

647 i‡(
ª‹dî
 &&Ñe‹dî->
¥obabûôy
) {

648 
	`Ârötf
(
f
, "Ñeorder %s",

649 
	`•röt_≥r˚¡
(
ª‹dî
->
¥obabûôy
, 
b1
));

650 i‡(
ª‹dî
->
c‹ªœti⁄
)

651 
	`Ârötf
(
f
, " %s",

652 
	`•röt_≥r˚¡
(
ª‹dî
->
c‹ªœti⁄
, 
b1
));

655 i‡(
c‹ru±
 && c‹ru±->
¥obabûôy
) {

656 
	`Ârötf
(
f
, " corrupt %s",

657 
	`•röt_≥r˚¡
(
c‹ru±
->
¥obabûôy
, 
b1
));

658 i‡(
c‹ru±
->
c‹ªœti⁄
)

659 
	`Ârötf
(
f
, " %s",

660 
	`•röt_≥r˚¡
(
c‹ru±
->
c‹ªœti⁄
, 
b1
));

663 i‡(
øã
 &&Ñate->rate) {

664 i‡(
øã64
)

665 
	`Ârötf
(
f
, "Ñ©ê%s", 
	`•röt_øã
(
øã64
, 
b1
));

667 
	`Ârötf
(
f
, "Ñ©ê%s", 
	`•röt_øã
(
øã
->øã, 
b1
));

668 i‡(
øã
->
∑ckë_ovîhód
)

669 
	`Ârötf
(
f
, "Öackëovîhód %d", 
øã
->
∑ckë_ovîhód
);

670 i‡(
øã
->
˚Œ_size
)

671 
	`Ârötf
(
f
, " cñlsizê%u", 
øã
->
˚Œ_size
);

672 i‡(
øã
->
˚Œ_ovîhód
)

673 
	`Ârötf
(
f
, " cñlovîhód %d", 
øã
->
˚Œ_ovîhód
);

676 i‡(
e˙
)

677 
	`Ârötf
(
f
, "Écn ");

679 i‡(
q›t
.
g≠
)

680 
	`Ârötf
(
f
, " g≠ %lu", ()
q›t
.
g≠
);

684 
	}
}

686 
qdisc_utû
 
	g√ãm_qdisc_utû
 = {

687 .
id
 = "netem",

688 .
	g∑r£_q›t
 = 
√ãm_∑r£_›t
,

689 .
	g¥öt_q›t
 = 
√ãm_¥öt_›t
,

	@tc/q_openqueue.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<uni°d.h
>

13 
	~<sy¶og.h
>

14 
	~<f˙é.h
>

15 
	~<sys/sockë.h
>

16 
	~<√töë/ö.h
>

17 
	~<¨∑/öë.h
>

18 
	~<°rög.h
>

19 
	~<löux/q_›íqueue.h
>

21 
	~"utûs.h
"

22 
	~"tc_utû.h
"

24 
	$ex∂aö
()

26 
	`Ârötf
(
°dîr
, "Usage: ... <openqueue>\n");

27 
	}
}

29 
	$›íqueue_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

31 
ok
=0;

32 
tc_oq_q›t
 
›t
;

33 
	`mem£t
(&
›t
, 0, (opt));

35 
¨gc
 > 0) {

36 i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

37 
	`ex∂aö
();

40 
	`Ârötf
(
°dîr
, "%s: unknow¿∑ømëî \"%s\"\n", 
qu
->
id
, *
¨gv
);

41 
	`ex∂aö
();

44 
¨gc
--; 
¨gv
++;

47 i‡(
ok
)

48 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, &
›t
, (opt));

50 
	}
}

52 
	$›íqueue_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

54 
tc_oq_q›t
 *
q›t
;

56 i‡(
›t
 =
NULL
)

59 i‡(
	`RTA_PAYLOAD
(
›t
Ë< (*
q›t
))

61 
q›t
 = 
	`RTA_DATA
(
›t
);

62 i‡(
	`°rcmp
(
qu
->
id
, "openqueue") == 0) {

63 
i
;

65 
	`Ârötf
(
f
, "\nP‹t: %s\n", 
q›t
->
p‹t_«me
);

66 
i
 = 0; i < 
q›t
->
num_q
; i++)

67 
	`Ârötf
(
f
, "Queue: %s, Max: %d, Curr: %d, Dropped: %d, Total: %d\n",

68 
q›t
->
queues
[
i
].
«me
, q›t->queues[i].
max_Àn
, q›t->queues[i].
Àn
,

69 
q›t
->
queues
[
i
].
dr›≥d
, q›t->queues[i].
tŸÆ
);

73 
	}
}

75 
qdisc_utû
 
	g›íqueue_qdisc_utû
 = {

76 .
id
 = "openqueue",

77 .
	g∑r£_q›t
 = 
›íqueue_∑r£_›t
,

78 .
	g¥öt_q›t
 = 
›íqueue_¥öt_›t
,

	@tc/q_pie.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<uni°d.h
>

21 
	~<sy¶og.h
>

22 
	~<f˙é.h
>

23 
	~<sys/sockë.h
>

24 
	~<√töë/ö.h
>

25 
	~<¨∑/öë.h
>

26 
	~<°rög.h
>

27 
	~<m©h.h
>

29 
	~"utûs.h
"

30 
	~"tc_utû.h
"

32 
	$ex∂aö
()

34 
	`Ârötf
(
°dîr
, "Usage: ...Öie [Üimit PACKETS ][Åarget TIME us]\n");

35 
	`Ârötf
(
°dîr
, " [Åupdate TIME us][álpha ALPHA ]");

36 
	`Ârötf
(
°dîr
, "[beta BETA ][bytemode |Çobytemode][ecn |Çoecn ]\n");

37 
	}
}

39 
	#ALPHA_MAX
 32

	)

40 
	#ALPHA_MIN
 0

	)

41 
	#BETA_MAX
 32

	)

42 
	#BETA_MIN
 0

	)

44 
	$põ_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

45 
∆msghdr
 *
n
)

47 
limô
 = 0;

48 
èrgë
 = 0;

49 
tupd©e
 = 0;

50 
Æpha
 = 0;

51 
bëa
 = 0;

52 
e˙
 = -1;

53 
byãmode
 = -1;

54 
π©å
 *
èû
;

56 
¨gc
 > 0) {

57 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

58 
	`NEXT_ARG
();

59 i‡(
	`gë_unsig√d
(&
limô
, *
¨gv
, 0)) {

60 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

63 } i‡(
	`°rcmp
(*
¨gv
, "target") == 0) {

64 
	`NEXT_ARG
();

65 i‡(
	`gë_time
(&
èrgë
, *
¨gv
)) {

66 
	`Ârötf
(
°dîr
, "Illegal \"target\"\n");

69 } i‡(
	`°rcmp
(*
¨gv
, "tupdate") == 0) {

70 
	`NEXT_ARG
();

71 i‡(
	`gë_time
(&
tupd©e
, *
¨gv
)) {

72 
	`Ârötf
(
°dîr
, "Illegal \"tupdate\"\n");

75 } i‡(
	`°rcmp
(*
¨gv
, "alpha") == 0) {

76 
	`NEXT_ARG
();

77 i‡(
	`gë_unsig√d
(&
Æpha
, *
¨gv
, 0) ||

78 (
Æpha
 > 
ALPHA_MAX
Ë|| (Æph®< 
ALPHA_MIN
)) {

79 
	`Ârötf
(
°dîr
, "Illegal \"alpha\"\n");

82 } i‡(
	`°rcmp
(*
¨gv
, "beta") == 0) {

83 
	`NEXT_ARG
();

84 i‡(
	`gë_unsig√d
(&
bëa
, *
¨gv
, 0) ||

85 (
bëa
 > 
BETA_MAX
Ë|| (bë®< 
BETA_MIN
)) {

86 
	`Ârötf
(
°dîr
, "Illegal \"beta\"\n");

89 } i‡(
	`°rcmp
(*
¨gv
, "ecn") == 0) {

90 
e˙
 = 1;

91 } i‡(
	`°rcmp
(*
¨gv
, "noecn") == 0) {

92 
e˙
 = 0;

93 } i‡(
	`°rcmp
(*
¨gv
, "bytemode") == 0) {

94 
byãmode
 = 1;

95 } i‡(
	`°rcmp
(*
¨gv
, "nobytemode") == 0) {

96 
byãmode
 = 0;

97 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

98 
	`ex∂aö
();

101 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

102 
	`ex∂aö
();

105 
¨gc
--;

106 
¨gv
++;

109 
èû
 = 
	`NLMSG_TAIL
(
n
);

110 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

111 i‡(
limô
)

112 
	`add©å_l
(
n
, 1024, 
TCA_PIE_LIMIT
, &
limô
, (limit));

113 i‡(
tupd©e
)

114 
	`add©å_l
(
n
, 1024, 
TCA_PIE_TUPDATE
, &
tupd©e
, (tupdate));

115 i‡(
èrgë
)

116 
	`add©å_l
(
n
, 1024, 
TCA_PIE_TARGET
, &
èrgë
, (target));

117 i‡(
Æpha
)

118 
	`add©å_l
(
n
, 1024, 
TCA_PIE_ALPHA
, &
Æpha
, (alpha));

119 i‡(
bëa
)

120 
	`add©å_l
(
n
, 1024, 
TCA_PIE_BETA
, &
bëa
, (beta));

121 i‡(
e˙
 != -1)

122 
	`add©å_l
(
n
, 1024, 
TCA_PIE_ECN
, &
e˙
, (ecn));

123 i‡(
byãmode
 != -1)

124 
	`add©å_l
(
n
, 1024, 
TCA_PIE_BYTEMODE
, &
byãmode
,

125 (
byãmode
));

127 
èû
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)tail;

129 
	}
}

131 
	$põ_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

133 
π©å
 *
tb
[
TCA_PIE_MAX
 + 1];

134 
limô
;

135 
tupd©e
;

136 
èrgë
;

137 
Æpha
;

138 
bëa
;

139 
e˙
;

140 
byãmode
;

141 
	`SPRINT_BUF
(
b1
);

143 i‡(
›t
 =
NULL
)

146 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_PIE_MAX
, 
›t
);

148 i‡(
tb
[
TCA_PIE_LIMIT
] &&

149 
	`RTA_PAYLOAD
(
tb
[
TCA_PIE_LIMIT
]Ë>(
__u32
)) {

150 
limô
 = 
	`πa_gë©å_u32
(
tb
[
TCA_PIE_LIMIT
]);

151 
	`Ârötf
(
f
, "limô %u∞", 
limô
);

153 i‡(
tb
[
TCA_PIE_TARGET
] &&

154 
	`RTA_PAYLOAD
(
tb
[
TCA_PIE_TARGET
]Ë>(
__u32
)) {

155 
èrgë
 = 
	`πa_gë©å_u32
(
tb
[
TCA_PIE_TARGET
]);

156 
	`Ârötf
(
f
, "èrgë %†", 
	`•röt_time
(
èrgë
, 
b1
));

158 i‡(
tb
[
TCA_PIE_TUPDATE
] &&

159 
	`RTA_PAYLOAD
(
tb
[
TCA_PIE_TUPDATE
]Ë>(
__u32
)) {

160 
tupd©e
 = 
	`πa_gë©å_u32
(
tb
[
TCA_PIE_TUPDATE
]);

161 
	`Ârötf
(
f
, "tupd©ê%†", 
	`•röt_time
(
tupd©e
, 
b1
));

163 i‡(
tb
[
TCA_PIE_ALPHA
] &&

164 
	`RTA_PAYLOAD
(
tb
[
TCA_PIE_ALPHA
]Ë>(
__u32
)) {

165 
Æpha
 = 
	`πa_gë©å_u32
(
tb
[
TCA_PIE_ALPHA
]);

166 
	`Ârötf
(
f
, "Æph®%u ", 
Æpha
);

168 i‡(
tb
[
TCA_PIE_BETA
] &&

169 
	`RTA_PAYLOAD
(
tb
[
TCA_PIE_BETA
]Ë>(
__u32
)) {

170 
bëa
 = 
	`πa_gë©å_u32
(
tb
[
TCA_PIE_BETA
]);

171 
	`Ârötf
(
f
, "bë®%u ", 
bëa
);

174 i‡(
tb
[
TCA_PIE_ECN
] && 
	`RTA_PAYLOAD
—b[TCA_PIE_ECN]Ë>(
__u32
)) {

175 
e˙
 = 
	`πa_gë©å_u32
(
tb
[
TCA_PIE_ECN
]);

176 i‡(
e˙
)

177 
	`Ârötf
(
f
, "ecn ");

180 i‡(
tb
[
TCA_PIE_BYTEMODE
] &&

181 
	`RTA_PAYLOAD
(
tb
[
TCA_PIE_BYTEMODE
]Ë>(
__u32
)) {

182 
byãmode
 = 
	`πa_gë©å_u32
(
tb
[
TCA_PIE_BYTEMODE
]);

183 i‡(
byãmode
)

184 
	`Ârötf
(
f
, "bytemode ");

188 
	}
}

190 
	$põ_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
,

191 
π©å
 *
x°©s
)

193 
tc_põ_x°©s
 *
°
;

195 i‡(
x°©s
 =
NULL
)

198 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

201 
°
 = 
	`RTA_DATA
(
x°©s
);

203 
	`Ârötf
(
f
, "prob %f delay %uusávg_dq_rate %u\n",

204 ()
°
->
¥ob
 / ()0xffffffff, st->
dñay
,

205 
°
->
avg_dq_øã
);

206 
	`Ârötf
(
f
, "pkts_in %u overlimit %u dropped %u maxq %uÉcn_mark %u\n",

207 
°
->
∑ckës_ö
, st->
ovîlimô
, st->
dr›≥d
, st->
maxq
,

208 
°
->
e˙_m¨k
);

211 
	}
}

213 
qdisc_utû
 
	gpõ_qdisc_utû
 = {

214 .
id
 = "pie",

215 .
	g∑r£_q›t
 = 
põ_∑r£_›t
,

216 .
	g¥öt_q›t
 = 
põ_¥öt_›t
,

217 .
	g¥öt_x°©s
 = 
põ_¥öt_x°©s
,

	@tc/q_prio.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	$ex∂aö
()

28 
	`Ârötf
(
°dîr
, "Usage: ...Örio bands NUMBERÖriomap P1 P2...[multiqueue]\n");

29 
	}
}

31 
	$¥io_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

33 
pm≠_mode
 = 0;

34 
idx
 = 0;

35 
tc_¥io_q›t
 
›t
={3,{ 1, 2, 2, 2, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 }};

36 
π©å
 *
√°
;

37 
mq
 = 0;

39 
¨gc
 > 0) {

40 i‡(
	`°rcmp
(*
¨gv
, "bands") == 0) {

41 i‡(
pm≠_mode
)

42 
	`ex∂aö
();

43 
	`NEXT_ARG
();

44 i‡(
	`gë_öãgî
(&
›t
.
b™ds
, *
¨gv
, 10)) {

45 
	`Ârötf
(
°dîr
, "Illegal \"bands\"\n");

48 } i‡(
	`°rcmp
(*
¨gv
, "priomap") == 0) {

49 i‡(
pm≠_mode
) {

50 
	`Ârötf
(
°dîr
, "Error: duplicateÖriomap\n");

53 
pm≠_mode
 = 1;

54 } i‡(
	`°rcmp
(*
¨gv
, "multiqueue") == 0) {

55 
mq
 = 1;

56 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

57 
	`ex∂aö
();

60 
b™d
;

61 i‡(!
pm≠_mode
) {

62 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

63 
	`ex∂aö
();

66 i‡(
	`gë_unsig√d
(&
b™d
, *
¨gv
, 10)) {

67 
	`Ârötf
(
°dîr
, "Illegal \"priomap\"Élement\n");

70 i‡(
b™d
 >
›t
.
b™ds
) {

71 
	`Ârötf
(
°dîr
, "\"priomap\"Élement is out of bands\n");

74 i‡(
idx
 > 
TC_PRIO_MAX
) {

75 
	`Ârötf
(
°dîr
, "\"¥iom≠\" index > TC_PRIO_MAX=%u\n", 
TC_PRIO_MAX
);

78 
›t
.
¥iom≠
[
idx
++] = 
b™d
;

80 
¨gc
--; 
¨gv
++;

89 
√°
 = 
	`add©å_√°_com∑t
(
n
, 1024, 
TCA_OPTIONS
, &
›t
, (opt));

90 i‡(
mq
)

91 
	`add©å_l
(
n
, 1024, 
TCA_PRIO_MQ
, 
NULL
, 0);

92 
	`add©å_√°_com∑t_íd
(
n
, 
√°
);

94 
	}
}

96 
	$¥io_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

98 
i
;

99 
tc_¥io_q›t
 *
q›t
;

100 
π©å
 *
tb
[
TCA_PRIO_MAX
+1];

102 i‡(
›t
 =
NULL
)

105 i‡(
	`∑r£_π©å_√°ed_com∑t
(
tb
, 
TCA_PRIO_MAX
, 
›t
, 
q›t
,

106 (*
q›t
)))

109 
	`Ârötf
(
f
, "b™d†%uÖriom≠ ", 
q›t
->
b™ds
);

110 
i
=0; i<=
TC_PRIO_MAX
; i++)

111 
	`Ârötf
(
f
, " %d", 
q›t
->
¥iom≠
[
i
]);

113 i‡(
tb
[
TCA_PRIO_MQ
])

114 
	`Ârötf
(
f
, " multiqueue: %s ",

115 
	`πa_gë©å_u8
(
tb
[
TCA_PRIO_MQ
]) ? "on" : "off");

118 
	}
}

120 
qdisc_utû
 
	g¥io_qdisc_utû
 = {

121 .
id
 = "prio",

122 .
	g∑r£_q›t
 = 
¥io_∑r£_›t
,

123 .
	g¥öt_q›t
 = 
¥io_¥öt_›t
,

	@tc/q_qfq.c

13 
	~<sy¶og.h
>

14 
	~<f˙é.h
>

15 
	~<sys/sockë.h
>

16 
	~<√töë/ö.h
>

17 
	~<¨∑/öë.h
>

18 
	~<°rög.h
>

20 
	~"utûs.h
"

21 
	~"tc_utû.h
"

23 
	$ex∂aö
()

25 
	`Ârötf
(
°dîr
, "Usage: ... qfq\n");

26 
	}
}

28 
	$ex∂aö1
(c⁄° *
¨g
)

30 
	`Ârötf
(
°dîr
, "IŒegÆ \"%s\"\n", 
¨g
);

31 
	}
}

33 
	$ex∂aö_˛ass
()

35 
	`Ârötf
(
°dîr
, "Usage: ... qfq weight NUMBER maxpkt BYTES\n");

36 
	}
}

38 
	$qfq_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

39 
∆msghdr
 *
n
)

41 
¨gc
 > 0) {

42 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

43 
	`ex∂aö
();

46 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

47 
	`ex∂aö
();

50 
¨gc
--; 
¨gv
++;

54 
	}
}

56 
	$qfq_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

57 
∆msghdr
 *
n
)

59 
π©å
 *
èû
;

60 
__u32
 
tmp
;

62 
èû
 = 
	`NLMSG_TAIL
(
n
);

63 
	`add©å_l
(
n
, 4096, 
TCA_OPTIONS
, 
NULL
, 0);

65 
¨gc
 > 0) {

66 i‡(
	`m©ches
(*
¨gv
, "weight") == 0) {

67 
	`NEXT_ARG
();

68 i‡(
	`gë_u32
(&
tmp
, *
¨gv
, 10)) {

69 
	`ex∂aö1
("weight");  -1;

71 
	`add©å32
(
n
, 4096, 
TCA_QFQ_WEIGHT
, 
tmp
);

72 } i‡(
	`m©ches
(*
¨gv
, "maxpkt") == 0) {

73 
	`NEXT_ARG
();

74 i‡(
	`gë_u32
(&
tmp
, *
¨gv
, 10)) {

75 
	`ex∂aö1
("maxpkt");  -1;

77 
	`add©å32
(
n
, 4096, 
TCA_QFQ_LMAX
, 
tmp
);

78 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

79 
	`ex∂aö_˛ass
();

82 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

83 
	`ex∂aö_˛ass
();

86 
¨gc
--; 
¨gv
++;

89 
èû
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
n
) - (*)tail;

92 
	}
}

94 
	$qfq_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

96 
π©å
 *
tb
[
TCA_QFQ_MAX
 + 1];

98 i‡(
›t
 =
NULL
)

101 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_QFQ_MAX
, 
›t
);

103 i‡(
tb
[
TCA_QFQ_WEIGHT
]) {

104 
	`Ârötf
(
f
, "weight %u ",

105 
	`πa_gë©å_u32
(
tb
[
TCA_QFQ_WEIGHT
]));

108 i‡(
tb
[
TCA_QFQ_LMAX
]) {

109 
	`Ârötf
(
f
, "maxpkt %u ",

110 
	`πa_gë©å_u32
(
tb
[
TCA_QFQ_LMAX
]));

114 
	}
}

116 
qdisc_utû
 
	gqfq_qdisc_utû
 = {

117 .
id
 = "qfq",

118 .
	g∑r£_q›t
 = 
qfq_∑r£_›t
,

119 .
	g¥öt_q›t
 = 
qfq_¥öt_›t
,

120 .
	g∑r£_c›t
 = 
qfq_∑r£_˛ass_›t
,

121 .
	g¥öt_c›t
 = 
qfq_¥öt_›t
,

	@tc/q_red.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<m©h.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

27 
	~"tc_ªd.h
"

29 
	$ex∂aö
()

31 
	`Ârötf
(
°dîr
, "Usage: ...ÑedÜimit BYTES [min BYTES] [max BYTES]ávpkt BYTES [burst PACKETS]\n");

32 
	`Ârötf
(
°dîr
, " [adaptive] [probability PROBABILITY] [bandwidth KBPS]\n");

33 
	`Ârötf
(
°dîr
, " [ecn] [harddrop]\n");

34 
	}
}

36 
	$ªd_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

38 
tc_ªd_q›t
 
›t
;

39 
bur°
 = 0;

40 
avpkt
 = 0;

41 
¥obabûôy
 = 0.02;

42 
øã
 = 0;

43 
∑rm
;

44 
__u8
 
sbuf
[256];

45 
__u32
 
max_P
;

46 
π©å
 *
èû
;

48 
	`mem£t
(&
›t
, 0, (opt));

50 
¨gc
 > 0) {

51 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

52 
	`NEXT_ARG
();

53 i‡(
	`gë_size
(&
›t
.
limô
, *
¨gv
)) {

54 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

57 } i‡(
	`°rcmp
(*
¨gv
, "min") == 0) {

58 
	`NEXT_ARG
();

59 i‡(
	`gë_size
(&
›t
.
qth_mö
, *
¨gv
)) {

60 
	`Ârötf
(
°dîr
, "Illegal \"min\"\n");

63 } i‡(
	`°rcmp
(*
¨gv
, "max") == 0) {

64 
	`NEXT_ARG
();

65 i‡(
	`gë_size
(&
›t
.
qth_max
, *
¨gv
)) {

66 
	`Ârötf
(
°dîr
, "Illegal \"max\"\n");

69 } i‡(
	`°rcmp
(*
¨gv
, "burst") == 0) {

70 
	`NEXT_ARG
();

71 i‡(
	`gë_unsig√d
(&
bur°
, *
¨gv
, 0)) {

72 
	`Ârötf
(
°dîr
, "Illegal \"burst\"\n");

75 } i‡(
	`°rcmp
(*
¨gv
, "avpkt") == 0) {

76 
	`NEXT_ARG
();

77 i‡(
	`gë_size
(&
avpkt
, *
¨gv
)) {

78 
	`Ârötf
(
°dîr
, "Illegal \"avpkt\"\n");

81 } i‡(
	`°rcmp
(*
¨gv
, "probability") == 0) {

82 
	`NEXT_ARG
();

83 i‡(
	`ssˇnf
(*
¨gv
, "%lg", &
¥obabûôy
) != 1) {

84 
	`Ârötf
(
°dîr
, "Illegal \"probability\"\n");

87 } i‡(
	`°rcmp
(*
¨gv
, "bandwidth") == 0) {

88 
	`NEXT_ARG
();

89 i‡(
	`gë_øã
(&
øã
, *
¨gv
)) {

90 
	`Ârötf
(
°dîr
, "Illegal \"bandwidth\"\n");

93 } i‡(
	`°rcmp
(*
¨gv
, "ecn") == 0) {

94 
›t
.
Êags
 |
TC_RED_ECN
;

95 } i‡(
	`°rcmp
(*
¨gv
, "harddrop") == 0) {

96 
›t
.
Êags
 |
TC_RED_HARDDROP
;

97 } i‡(
	`°rcmp
(*
¨gv
, "adaptative") == 0) {

98 
›t
.
Êags
 |
TC_RED_ADAPTATIVE
;

99 } i‡(
	`°rcmp
(*
¨gv
, "adaptive") == 0) {

100 
›t
.
Êags
 |
TC_RED_ADAPTATIVE
;

101 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

102 
	`ex∂aö
();

105 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

106 
	`ex∂aö
();

109 
¨gc
--; 
¨gv
++;

112 i‡(!
›t
.
limô
 || !
avpkt
) {

113 
	`Ârötf
(
°dîr
, "RED: RequiredÖarameter (limit,ávpkt) is missing\n");

120 i‡(!
›t
.
qth_max
)

121 
›t
.
qth_max
 = o±.
qth_mö
 ? o±.qth_mö * 3 : o±.
limô
 / 4;

122 i‡(!
›t
.
qth_mö
)

123 
›t
.
qth_mö
 = o±.
qth_max
 / 3;

124 i‡(!
bur°
)

125 
bur°
 = (2 * 
›t
.
qth_mö
 + o±.
qth_max
Ë/ (3 * 
avpkt
);

126 i‡(!
øã
) {

127 
	`gë_øã
(&
øã
, "10Mbit");

128 
	`Ârötf
(
°dîr
, "RED: set bandwidthÅo 10Mbit\n");

130 i‡((
∑rm
 = 
	`tc_ªd_evÆ_ewma
(
›t
.
qth_mö
, 
bur°
, 
avpkt
)) < 0) {

131 
	`Ârötf
(
°dîr
, "RED: failedÅo calculate EWMA constant.\n");

134 i‡(
∑rm
 >= 10)

135 
	`Ârötf
(
°dîr
, "RED: WARNING. Bur° %u sìm†tÿbêtoÿœrge.\n", 
bur°
);

136 
›t
.
Wlog
 = 
∑rm
;

137 i‡((
∑rm
 = 
	`tc_ªd_evÆ_P
(
›t
.
qth_mö
, o±.
qth_max
, 
¥obabûôy
)) < 0) {

138 
	`Ârötf
(
°dîr
, "RED: failedÅo calculateÖrobability.\n");

141 
›t
.
Plog
 = 
∑rm
;

142 i‡((
∑rm
 = 
	`tc_ªd_evÆ_idÀ_dampög
(
›t
.
Wlog
, 
avpkt
, 
øã
, 
sbuf
)) < 0) {

143 
	`Ârötf
(
°dîr
, "RED: failedÅo calculate idle dampingÅable.\n");

146 
›t
.
S˚Œ_log
 = 
∑rm
;

148 
èû
 = 
	`NLMSG_TAIL
(
n
);

149 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

150 
	`add©å_l
(
n
, 1024, 
TCA_RED_PARMS
, &
›t
, (opt));

151 
	`add©å_l
(
n
, 1024, 
TCA_RED_STAB
, 
sbuf
, 256);

152 
max_P
 = 
¥obabûôy
 * 
	`pow
(2, 32);

153 
	`add©å_l
(
n
, 1024, 
TCA_RED_MAX_P
, &
max_P
, (max_P));

154 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

156 
	}
}

158 
	$ªd_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

160 
π©å
 *
tb
[
TCA_RED_MAX
 + 1];

161 
tc_ªd_q›t
 *
q›t
;

162 
__u32
 
max_P
 = 0;

163 
	`SPRINT_BUF
(
b1
);

164 
	`SPRINT_BUF
(
b2
);

165 
	`SPRINT_BUF
(
b3
);

167 i‡(
›t
 =
NULL
)

170 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_RED_MAX
, 
›t
);

172 i‡(
tb
[
TCA_RED_PARMS
] =
NULL
)

174 
q›t
 = 
	`RTA_DATA
(
tb
[
TCA_RED_PARMS
]);

175 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_RED_PARMS
]Ë< (*
q›t
))

178 i‡(
tb
[
TCA_RED_MAX_P
] &&

179 
	`RTA_PAYLOAD
(
tb
[
TCA_RED_MAX_P
]Ë>(
__u32
))

180 
max_P
 = 
	`πa_gë©å_u32
(
tb
[
TCA_RED_MAX_P
]);

182 
	`Ârötf
(
f
, "limit %s min %s max %s ",

183 
	`•röt_size
(
q›t
->
limô
, 
b1
),

184 
	`•röt_size
(
q›t
->
qth_mö
, 
b2
),

185 
	`•röt_size
(
q›t
->
qth_max
, 
b3
));

186 i‡(
q›t
->
Êags
 & 
TC_RED_ECN
)

187 
	`Ârötf
(
f
, "ecn ");

188 i‡(
q›t
->
Êags
 & 
TC_RED_HARDDROP
)

189 
	`Ârötf
(
f
, "harddrop ");

190 i‡(
q›t
->
Êags
 & 
TC_RED_ADAPTATIVE
)

191 
	`Ârötf
(
f
, "adaptive ");

192 i‡(
show_dëaûs
) {

193 
	`Ârötf
(
f
, "ewm®%u ", 
q›t
->
Wlog
);

194 i‡(
max_P
)

195 
	`Ârötf
(
f
, "¥obabûôy %lg ", 
max_P
 / 
	`pow
(2, 32));

197 
	`Ârötf
(
f
, "Plog %u ", 
q›t
->
Plog
);

198 
	`Ârötf
(
f
, "S˚Œ_log %u", 
q›t
->
S˚Œ_log
);

201 
	}
}

203 
	$ªd_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
x°©s
)

205 #ifde‡
TC_RED_ECN


206 
tc_ªd_x°©s
 *
°
;

208 i‡(
x°©s
 =
NULL
)

211 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

214 
°
 = 
	`RTA_DATA
(
x°©s
);

215 
	`Ârötf
(
f
, " marked %uÉarly %uÖdrop %u other %u",

216 
°
->
m¨ked
, st->
óæy
, st->
pdr›
, st->
Ÿhî
);

221 
	}
}

224 
qdisc_utû
 
	gªd_qdisc_utû
 = {

225 .
id
 = "red",

226 .
	g∑r£_q›t
 = 
ªd_∑r£_›t
,

227 .
	g¥öt_q›t
 = 
ªd_¥öt_›t
,

228 .
	g¥öt_x°©s
 = 
ªd_¥öt_x°©s
,

	@tc/q_rr.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	$ex∂aö
()

28 
	`Ârötf
(
°dîr
, "Usage: ...Ñr bands NUMBERÖriomap P1 P2... [multiqueue]\n");

29 
	}
}

32 
	$º_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

34 
pm≠_mode
 = 0;

35 
idx
 = 0;

36 
tc_¥io_q›t
 
›t
={3,{ 1, 2, 2, 2, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 }};

37 
π©å
 *
√°
;

38 
mq
 = 0;

40 
¨gc
 > 0) {

41 i‡(
	`°rcmp
(*
¨gv
, "bands") == 0) {

42 i‡(
pm≠_mode
)

43 
	`ex∂aö
();

44 
	`NEXT_ARG
();

45 i‡(
	`gë_öãgî
(&
›t
.
b™ds
, *
¨gv
, 10)) {

46 
	`Ârötf
(
°dîr
, "Illegal \"bands\"\n");

49 } i‡(
	`°rcmp
(*
¨gv
, "priomap") == 0) {

50 i‡(
pm≠_mode
) {

51 
	`Ârötf
(
°dîr
, "Error: duplicateÖriomap\n");

54 
pm≠_mode
 = 1;

55 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

56 
	`ex∂aö
();

58 } i‡(
	`°rcmp
(*
¨gv
, "multiqueue") == 0) {

59 
mq
 = 1;

61 
b™d
;

62 i‡(!
pm≠_mode
) {

63 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

64 
	`ex∂aö
();

67 i‡(
	`gë_unsig√d
(&
b™d
, *
¨gv
, 10)) {

68 
	`Ârötf
(
°dîr
, "Illegal \"priomap\"Élement\n");

71 i‡(
b™d
 > 
›t
.
b™ds
) {

72 
	`Ârötf
(
°dîr
, "\"priomap\"Élement is out of bands\n");

75 i‡(
idx
 > 
TC_PRIO_MAX
) {

76 
	`Ârötf
(
°dîr
, "\"¥iom≠\" index > TC_RR_MAX=%u\n", 
TC_PRIO_MAX
);

79 
›t
.
¥iom≠
[
idx
++] = 
b™d
;

81 
¨gc
--; 
¨gv
++;

84 
√°
 = 
	`add©å_√°_com∑t
(
n
, 1024, 
TCA_OPTIONS
, &
›t
, (opt));

85 i‡(
mq
)

86 
	`add©å_l
(
n
, 1024, 
TCA_PRIO_MQ
, 
NULL
, 0);

87 
	`add©å_√°_com∑t_íd
(
n
, 
√°
);

89 
	}
}

91 
	$º_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

93 
i
;

94 
tc_¥io_q›t
 *
q›t
;

95 
π©å
 *
tb
[
TCA_PRIO_MAX
 + 1];

97 i‡(
›t
 =
NULL
)

100 i‡(
	`∑r£_π©å_√°ed_com∑t
(
tb
, 
TCA_PRIO_MAX
, 
›t
, 
q›t
,

101 (*
q›t
)))

104 
	`Ârötf
(
f
, "b™d†%uÖriom≠ ", 
q›t
->
b™ds
);

105 
i
=0; i <
TC_PRIO_MAX
; i++)

106 
	`Ârötf
(
f
, " %d", 
q›t
->
¥iom≠
[
i
]);

108 i‡(
tb
[
TCA_PRIO_MQ
])

109 
	`Ârötf
(
f
, " multiqueue: %s ",

110 
	`πa_gë©å_u8
(
tb
[
TCA_PRIO_MQ
]) ? "on" : "off");

113 
	}
}

115 
qdisc_utû
 
	gº_qdisc_utû
 = {

116 .
id
 = "rr",

117 .
	g∑r£_q›t
 = 
º_∑r£_›t
,

118 .
	g¥öt_q›t
 = 
º_¥öt_›t
,

	@tc/q_sfb.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<uni°d.h
>

18 
	~<sy¶og.h
>

19 
	~<f˙é.h
>

20 
	~<sys/sockë.h
>

21 
	~<√töë/ö.h
>

22 
	~<¨∑/öë.h
>

23 
	~<°rög.h
>

25 
	~"utûs.h
"

26 
	~"tc_utû.h
"

28 
	$ex∂aö
()

30 
	`Ârötf
(
°dîr
,

35 
	}
}

37 
	$gë_¥ob
(
__u32
 *
vÆ
, c⁄° *
¨g
)

39 
d
;

40 *
±r
;

42 i‡(!
¨g
 || !*arg)

44 
d
 = 
	`°πod
(
¨g
, &
±r
);

45 i‡(!
±r
 ||Öå =
¨g
 || 
d
 < 0.0 || d > 1.0)

47 *
vÆ
 = (
__u32
)(
d
 * 
SFB_MAX_PROB
 + 0.5);

49 
	}
}

51 
	$sfb_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

52 
∆msghdr
 *
n
)

54 
tc_sfb_q›t
 
›t
;

55 
π©å
 *
èû
;

57 
	`mem£t
(&
›t
, 0, (opt));

58 
›t
.
ªhash_öãrvÆ
 = 600*1000;

59 
›t
.
w¨mup_time
 = 60*1000;

60 
›t
.
≥«…y_øã
 = 10;

61 
›t
.
≥«…y_bur°
 = 20;

62 
›t
.
ö¸emít
 = (
SFB_MAX_PROB
 + 1000) / 2000;

63 
›t
.
de¸emít
 = (
SFB_MAX_PROB
 + 10000) / 20000;

65 
¨gc
 > 0) {

66 i‡(
	`°rcmp
(*
¨gv
, "rehash") == 0) {

67 
	`NEXT_ARG
();

68 i‡(
	`gë_u32
(&
›t
.
ªhash_öãrvÆ
, *
¨gv
, 0)) {

69 
	`Ârötf
(
°dîr
, "Illegal \"rehash\"\n");

72 } i‡(
	`°rcmp
(*
¨gv
, "db") == 0) {

73 
	`NEXT_ARG
();

74 i‡(
	`gë_u32
(&
›t
.
w¨mup_time
, *
¨gv
, 0)) {

75 
	`Ârötf
(
°dîr
, "Illegal \"db\"\n");

78 } i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

79 
	`NEXT_ARG
();

80 i‡(
	`gë_u32
(&
›t
.
limô
, *
¨gv
, 0)) {

81 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

84 } i‡(
	`°rcmp
(*
¨gv
, "max") == 0) {

85 
	`NEXT_ARG
();

86 i‡(
	`gë_u32
(&
›t
.
max
, *
¨gv
, 0)) {

87 
	`Ârötf
(
°dîr
, "Illegal \"max\"\n");

90 } i‡(
	`°rcmp
(*
¨gv
, "target") == 0) {

91 
	`NEXT_ARG
();

92 i‡(
	`gë_u32
(&
›t
.
bö_size
, *
¨gv
, 0)) {

93 
	`Ârötf
(
°dîr
, "Illegal \"target\"\n");

96 } i‡(
	`°rcmp
(*
¨gv
, "increment") == 0) {

97 
	`NEXT_ARG
();

98 i‡(
	`gë_¥ob
(&
›t
.
ö¸emít
, *
¨gv
)) {

99 
	`Ârötf
(
°dîr
, "Illegal \"increment\"\n");

102 } i‡(
	`°rcmp
(*
¨gv
, "decrement") == 0) {

103 
	`NEXT_ARG
();

104 i‡(
	`gë_¥ob
(&
›t
.
de¸emít
, *
¨gv
)) {

105 
	`Ârötf
(
°dîr
, "Illegal \"decrement\"\n");

108 } i‡(
	`°rcmp
(*
¨gv
, "penalty_rate") == 0) {

109 
	`NEXT_ARG
();

110 i‡(
	`gë_u32
(&
›t
.
≥«…y_øã
, *
¨gv
, 0)) {

111 
	`Ârötf
(
°dîr
, "Illegal \"penalty_rate\"\n");

114 } i‡(
	`°rcmp
(*
¨gv
, "penalty_burst") == 0) {

115 
	`NEXT_ARG
();

116 i‡(
	`gë_u32
(&
›t
.
≥«…y_bur°
, *
¨gv
, 0)) {

117 
	`Ârötf
(
°dîr
, "Illegal \"penalty_burst\"\n");

121 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

122 
	`ex∂aö
();

125 
¨gc
--; 
¨gv
++;

128 i‡(
›t
.
max
 == 0) {

129 i‡(
›t
.
bö_size
 >= 1)

130 
›t
.
max
 = (›t.
bö_size
 * 5 + 1) / 4;

132 
›t
.
max
 = 25;

134 i‡(
›t
.
bö_size
 == 0)

135 
›t
.
bö_size
 = (›t.
max
 * 4 + 3) / 5;

137 
èû
 = 
	`NLMSG_TAIL
(
n
);

138 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

139 
	`add©å_l
(
n
, 1024, 
TCA_SFB_PARMS
, &
›t
, (opt));

140 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

142 
	}
}

144 
	$sfb_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

146 
π©å
 *
tb
[
__TCA_SFB_MAX
];

147 
tc_sfb_q›t
 *
q›t
;

149 i‡(
›t
 =
NULL
)

152 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_SFB_MAX
, 
›t
);

153 i‡(
tb
[
TCA_SFB_PARMS
] =
NULL
)

155 
q›t
 = 
	`RTA_DATA
(
tb
[
TCA_SFB_PARMS
]);

156 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_SFB_PARMS
]Ë< (*
q›t
))

159 
	`Ârötf
(
f
,

163 
q›t
->
limô
, q›t->
max
, q›t->
bö_size
,

164 ()
q›t
->
ö¸emít
 / 
SFB_MAX_PROB
,

165 ()
q›t
->
de¸emít
 / 
SFB_MAX_PROB
,

166 
q›t
->
≥«…y_øã
, q›t->
≥«…y_bur°
,

167 
q›t
->
ªhash_öãrvÆ
, q›t->
w¨mup_time
);

170 
	}
}

172 
	$sfb_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
,

173 
π©å
 *
x°©s
)

175 
tc_sfb_x°©s
 *
°
;

177 i‡(
x°©s
 =
NULL
)

180 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

183 
°
 = 
	`RTA_DATA
(
x°©s
);

184 
	`Ârötf
(
f
,

187 
°
->
óæydr›
, st->
≥«…ydr›
, st->
buckëdr›
, st->
queuedr›
, st->
chûddr›
,

188 
°
->
m¨ked
,

189 
°
->
maxqÀn
, ()°->
max¥ob
 / 
SFB_MAX_PROB
,

190 ()
°
->
avg¥ob
 / 
SFB_MAX_PROB
);

193 
	}
}

195 
qdisc_utû
 
	gsfb_qdisc_utû
 = {

196 .
id
 = "sfb",

197 .
	g∑r£_q›t
 = 
sfb_∑r£_›t
,

198 .
	g¥öt_q›t
 = 
sfb_¥öt_›t
,

199 .
	g¥öt_x°©s
 = 
sfb_¥öt_x°©s
,

	@tc/q_sfq.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<m©h.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~"tc_ªd.h
"

28 
	$ex∂aö
()

30 
	`Ârötf
(
°dîr
, "Usage: ... sfq [Üimit NUMBER ] [Öerturb SECS ] [ quantum BYTES ]\n");

31 
	`Ârötf
(
°dîr
, " [ divisor NUMBER ] [ flows NUMBER] [ depth NUMBER ]\n");

32 
	`Ârötf
(
°dîr
, " [ headdrop ]\n");

33 
	`Ârötf
(
°dîr
, " [Ñedflowlimit BYTES ] [ min BYTES ] [ max BYTES ]\n");

34 
	`Ârötf
(
°dîr
, " [ávpkt BYTES ] [ burst PACKETS ] [Örobability P ]\n");

35 
	`Ârötf
(
°dîr
, " [Écn ] [ harddrop ]\n");

36 
	}
}

38 
	$sfq_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

40 
ok
 = 0, 
ªd
 = 0;

41 
tc_sfq_q›t_v1
 
›t
;

42 
bur°
 = 0;

43 
wlog
;

44 
avpkt
 = 1000;

45 
¥obabûôy
 = 0.02;

47 
	`mem£t
(&
›t
, 0, (opt));

49 
¨gc
 > 0) {

50 i‡(
	`°rcmp
(*
¨gv
, "quantum") == 0) {

51 
	`NEXT_ARG
();

52 i‡(
	`gë_size
(&
›t
.
v0
.
qu™tum
, *
¨gv
)) {

53 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

56 
ok
++;

57 } i‡(
	`°rcmp
(*
¨gv
, "perturb") == 0) {

58 
	`NEXT_ARG
();

59 i‡(
	`gë_öãgî
(&
›t
.
v0
.
≥πurb_≥riod
, *
¨gv
, 0)) {

60 
	`Ârötf
(
°dîr
, "Illegal \"perturb\"\n");

63 
ok
++;

64 } i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

65 
	`NEXT_ARG
();

66 i‡(
	`gë_u32
(&
›t
.
v0
.
limô
, *
¨gv
, 0)) {

67 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

70 i‡(
›t
.
v0
.
limô
 < 2) {

71 
	`Ârötf
(
°dîr
, "Illegal \"limit\", must be > 1\n");

74 
ok
++;

75 } i‡(
	`°rcmp
(*
¨gv
, "divisor") == 0) {

76 
	`NEXT_ARG
();

77 i‡(
	`gë_u32
(&
›t
.
v0
.
divis‹
, *
¨gv
, 0)) {

78 
	`Ârötf
(
°dîr
, "Illegal \"divisor\"\n");

81 
ok
++;

82 } i‡(
	`°rcmp
(*
¨gv
, "flows") == 0) {

83 
	`NEXT_ARG
();

84 i‡(
	`gë_u32
(&
›t
.
v0
.
Êows
, *
¨gv
, 0)) {

85 
	`Ârötf
(
°dîr
, "Illegal \"flows\"\n");

88 
ok
++;

89 } i‡(
	`°rcmp
(*
¨gv
, "depth") == 0) {

90 
	`NEXT_ARG
();

91 i‡(
	`gë_u32
(&
›t
.
dïth
, *
¨gv
, 0)) {

92 
	`Ârötf
(
°dîr
, "Illegal \"flows\"\n");

95 
ok
++;

96 } i‡(
	`°rcmp
(*
¨gv
, "headdrop") == 0) {

97 
›t
.
hóddr›
 = 1;

98 
ok
++;

99 } i‡(
	`°rcmp
(*
¨gv
, "redflowlimit") == 0) {

100 
	`NEXT_ARG
();

101 i‡(
	`gë_u32
(&
›t
.
limô
, *
¨gv
, 0)) {

102 
	`Ârötf
(
°dîr
, "Illegal \"redflowlimit\"\n");

105 
ªd
++;

106 } i‡(
	`°rcmp
(*
¨gv
, "min") == 0) {

107 
	`NEXT_ARG
();

108 i‡(
	`gë_u32
(&
›t
.
qth_mö
, *
¨gv
, 0)) {

109 
	`Ârötf
(
°dîr
, "Illegal \"min\"\n");

112 
ªd
++;

113 } i‡(
	`°rcmp
(*
¨gv
, "max") == 0) {

114 
	`NEXT_ARG
();

115 i‡(
	`gë_u32
(&
›t
.
qth_max
, *
¨gv
, 0)) {

116 
	`Ârötf
(
°dîr
, "Illegal \"max\"\n");

119 
ªd
++;

120 } i‡(
	`°rcmp
(*
¨gv
, "burst") == 0) {

121 
	`NEXT_ARG
();

122 i‡(
	`gë_unsig√d
(&
bur°
, *
¨gv
, 0)) {

123 
	`Ârötf
(
°dîr
, "Illegal \"burst\"\n");

126 
ªd
++;

127 } i‡(
	`°rcmp
(*
¨gv
, "avpkt") == 0) {

128 
	`NEXT_ARG
();

129 i‡(
	`gë_size
(&
avpkt
, *
¨gv
)) {

130 
	`Ârötf
(
°dîr
, "Illegal \"avpkt\"\n");

133 
ªd
++;

134 } i‡(
	`°rcmp
(*
¨gv
, "probability") == 0) {

135 
	`NEXT_ARG
();

136 i‡(
	`ssˇnf
(*
¨gv
, "%lg", &
¥obabûôy
) != 1) {

137 
	`Ârötf
(
°dîr
, "Illegal \"probability\"\n");

140 
ªd
++;

141 } i‡(
	`°rcmp
(*
¨gv
, "ecn") == 0) {

142 
›t
.
Êags
 |
TC_RED_ECN
;

143 
ªd
++;

144 } i‡(
	`°rcmp
(*
¨gv
, "harddrop") == 0) {

145 
›t
.
Êags
 |
TC_RED_HARDDROP
;

146 
ªd
++;

147 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

148 
	`ex∂aö
();

151 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

152 
	`ex∂aö
();

155 
¨gc
--; 
¨gv
++;

157 i‡(
ªd
) {

158 i‡(!
›t
.
limô
) {

159 
	`Ârötf
(
°dîr
, "RequiredÖarameter (redflowlimit) is missing\n");

166 i‡(!
›t
.
qth_max
)

167 
›t
.
qth_max
 = o±.
limô
 / 4;

168 i‡(!
›t
.
qth_mö
)

169 
›t
.
qth_mö
 = o±.
qth_max
 / 3;

170 i‡(!
bur°
)

171 
bur°
 = (2 * 
›t
.
qth_mö
 + o±.
qth_max
Ë/ (3 * 
avpkt
);

173 i‡(
›t
.
qth_max
 > o±.
limô
) {

174 
	`Ârötf
(
°dîr
, "\"max\" isÜargerÅhan \"limit\"\n");

178 i‡(
›t
.
qth_mö
 >›t.
qth_max
) {

179 
	`Ârötf
(
°dîr
, "\"min\" isÇot smallerÅhan \"max\"\n");

183 
wlog
 = 
	`tc_ªd_evÆ_ewma
(
›t
.
qth_mö
, 
bur°
, 
avpkt
);

184 i‡(
wlog
 < 0) {

185 
	`Ârötf
(
°dîr
, "SFQ: failedÅo calculate EWMA constant.\n");

188 i‡(
wlog
 >= 10)

189 
	`Ârötf
(
°dîr
, "SFQ: WARNING. Bur° %u sìm†tÿbêtoÿœrge.\n", 
bur°
);

190 
›t
.
Wlog
 = 
wlog
;

192 
wlog
 = 
	`tc_ªd_evÆ_P
(
›t
.
qth_mö
, o±.
qth_max
, 
¥obabûôy
);

193 i‡(
wlog
 < 0) {

194 
	`Ârötf
(
°dîr
, "SFQ: failedÅo calculateÖrobability.\n");

197 
›t
.
Plog
 = 
wlog
;

198 
›t
.
max_P
 = 
¥obabûôy
 * 
	`pow
(2, 32);

201 i‡(
ok
 || 
ªd
)

202 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, &
›t
, (opt));

204 
	}
}

206 
	$sfq_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

208 
tc_sfq_q›t
 *
q›t
;

209 
tc_sfq_q›t_v1
 *
q›t_ext
 = 
NULL
;

210 
	`SPRINT_BUF
(
b1
);

211 
	`SPRINT_BUF
(
b2
);

212 
	`SPRINT_BUF
(
b3
);

213 i‡(
›t
 =
NULL
)

216 i‡(
	`RTA_PAYLOAD
(
›t
Ë< (*
q›t
))

218 i‡(
	`RTA_PAYLOAD
(
›t
Ë>(*
q›t_ext
))

219 
q›t_ext
 = 
	`RTA_DATA
(
›t
);

220 
q›t
 = 
	`RTA_DATA
(
›t
);

221 
	`Ârötf
(
f
, "limô %u∞", 
q›t
->
limô
);

222 
	`Ârötf
(
f
, "qu™tum %†", 
	`•röt_size
(
q›t
->
qu™tum
, 
b1
));

223 i‡(
q›t_ext
 && q›t_ext->
dïth
)

224 
	`Ârötf
(
f
, "dïth %u ", 
q›t_ext
->
dïth
);

225 i‡(
q›t_ext
 && q›t_ext->
hóddr›
)

226 
	`Ârötf
(
f
, "headdrop ");

228 i‡(
show_dëaûs
) {

229 
	`Ârötf
(
f
, "Êow†%u/%u ", 
q›t
->
Êows
, q›t->
divis‹
);

231 
	`Ârötf
(
f
, "divis‹ %u ", 
q›t
->
divis‹
);

232 i‡(
q›t
->
≥πurb_≥riod
)

233 
	`Ârötf
(
f
, "≥πurb %d£¯", 
q›t
->
≥πurb_≥riod
);

234 i‡(
q›t_ext
 && q›t_ext->
qth_mö
) {

235 
	`Ârötf
(
f
, "\¿ewm®%u ", 
q›t_ext
->
Wlog
);

236 
	`Ârötf
(
f
, "min %s max %sÖrobability %g ",

237 
	`•röt_size
(
q›t_ext
->
qth_mö
, 
b2
),

238 
	`•röt_size
(
q›t_ext
->
qth_max
, 
b3
),

239 
q›t_ext
->
max_P
 / 
	`pow
(2, 32));

240 i‡(
q›t_ext
->
Êags
 & 
TC_RED_ECN
)

241 
	`Ârötf
(
f
, "ecn ");

242 i‡(
show_°©s
) {

243 
	`Ârötf
(
f
, "\nÖrob_mark %uÖrob_mark_head %uÖrob_drop %u",

244 
q›t_ext
->
°©s
.
¥ob_m¨k
,

245 
q›t_ext
->
°©s
.
¥ob_m¨k_hód
,

246 
q›t_ext
->
°©s
.
¥ob_dr›
);

247 
	`Ârötf
(
f
, "\n forced_mark %u forced_mark_head %u forced_drop %u",

248 
q›t_ext
->
°©s
.
f‹˚d_m¨k
,

249 
q›t_ext
->
°©s
.
f‹˚d_m¨k_hód
,

250 
q›t_ext
->
°©s
.
f‹˚d_dr›
);

254 
	}
}

256 
	$sfq_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
,

257 
π©å
 *
x°©s
)

259 
tc_sfq_x°©s
 *
°
;

261 i‡(
x°©s
 =
NULL
)

263 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

265 
°
 = 
	`RTA_DATA
(
x°©s
);

267 
	`Ârötf
(
f
, "áŒŸ %d ", 
°
->
ÆlŸ
);

268 
	`Ârötf
(
f
, "\n");

270 
	}
}

272 
qdisc_utû
 
	gsfq_qdisc_utû
 = {

273 .
id
 = "sfq",

274 .
	g∑r£_q›t
 = 
sfq_∑r£_›t
,

275 .
	g¥öt_q›t
 = 
sfq_¥öt_›t
,

276 .
	g¥öt_x°©s
 = 
sfq_¥öt_x°©s
,

	@tc/q_tbf.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	$ex∂aö
()

28 
	`Ârötf
(
°dîr
, "Usage: ...ÅbfÜimit BYTES burst BYTES[/BYTES]Ñate KBPS [ mtu BYTES[/BYTES] ]\n");

29 
	`Ârötf
(
°dîr
, " [Öeakrate KBPS ] [Üatency TIME ] ");

30 
	`Ârötf
(
°dîr
, "[ overhead BYTES ] [Üinklayer TYPE ]\n");

31 
	}
}

33 
	$ex∂aö1
(c⁄° *
¨g
, c⁄° *
vÆ
)

35 
	`Ârötf
(
°dîr
, "tbf: iŒegÆ vÆuêf‹ \"%s\": \"%s\"\n", 
¨g
, 
vÆ
);

36 
	}
}

39 
	$tbf_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

41 
ok
=0;

42 
tc_tbf_q›t
 
›t
;

43 
__u32
 
πab
[256];

44 
__u32
 
±ab
[256];

45 
buf„r
=0, 
mtu
=0, 
mpu
=0, 
œãncy
=0;

46 
R˚Œ_log
=-1, 
P˚Œ_log
 = -1;

47 
ovîhód
=0;

48 
lökœyî
 = 
LINKLAYER_ETHERNET
;

49 
π©å
 *
èû
;

50 
__u64
 
øã64
 = 0, 
¥©e64
 = 0;

52 
	`mem£t
(&
›t
, 0, (opt));

54 
¨gc
 > 0) {

55 i‡(
	`m©ches
(*
¨gv
, "limit") == 0) {

56 
	`NEXT_ARG
();

57 i‡(
›t
.
limô
) {

58 
	`Ârötf
(
°dîr
, "tbf: duplicate \"limit\" specification\n");

61 i‡(
œãncy
) {

62 
	`Ârötf
(
°dîr
, "tbf: specifying both \"latency\"ánd \"limit\" isÇotállowed\n");

65 i‡(
	`gë_size
(&
›t
.
limô
, *
¨gv
)) {

66 
	`ex∂aö1
("limô", *
¨gv
);

69 
ok
++;

70 } i‡(
	`m©ches
(*
¨gv
, "latency") == 0) {

71 
	`NEXT_ARG
();

72 i‡(
œãncy
) {

73 
	`Ârötf
(
°dîr
, "tbf: duplicate \"latency\" specification\n");

76 i‡(
›t
.
limô
) {

77 
	`Ârötf
(
°dîr
, "tbf: specifying both \"limit\"ánd \"/latency\" isÇotállowed\n");

80 i‡(
	`gë_time
(&
œãncy
, *
¨gv
)) {

81 
	`ex∂aö1
("œãncy", *
¨gv
);

84 
ok
++;

85 } i‡(
	`m©ches
(*
¨gv
, "burst") == 0 ||

86 
	`°rcmp
(*
¨gv
, "buffer") == 0 ||

87 
	`°rcmp
(*
¨gv
, "maxburst") == 0) {

88 c⁄° *
∑rm_«me
 = *
¨gv
;

89 
	`NEXT_ARG
();

90 i‡(
buf„r
) {

91 
	`Ârötf
(
°dîr
, "tbf: duplicate \"buffer/burst/maxburst\" specification\n");

94 i‡(
	`gë_size_™d_˚Œ
(&
buf„r
, &
R˚Œ_log
, *
¨gv
) < 0) {

95 
	`ex∂aö1
(
∑rm_«me
, *
¨gv
);

98 
ok
++;

99 } i‡(
	`°rcmp
(*
¨gv
, "mtu") == 0 ||

100 
	`°rcmp
(*
¨gv
, "minburst") == 0) {

101 c⁄° *
∑rm_«me
 = *
¨gv
;

102 
	`NEXT_ARG
();

103 i‡(
mtu
) {

104 
	`Ârötf
(
°dîr
, "tbf: duplicate \"mtu/minburst\" specification\n");

107 i‡(
	`gë_size_™d_˚Œ
(&
mtu
, &
P˚Œ_log
, *
¨gv
) < 0) {

108 
	`ex∂aö1
(
∑rm_«me
, *
¨gv
);

111 
ok
++;

112 } i‡(
	`°rcmp
(*
¨gv
, "mpu") == 0) {

113 
	`NEXT_ARG
();

114 i‡(
mpu
) {

115 
	`Ârötf
(
°dîr
, "tbf: duplicate \"mpu\" specification\n");

118 i‡(
	`gë_size
(&
mpu
, *
¨gv
)) {

119 
	`ex∂aö1
("mpu", *
¨gv
);

122 
ok
++;

123 } i‡(
	`°rcmp
(*
¨gv
, "rate") == 0) {

124 
	`NEXT_ARG
();

125 i‡(
øã64
) {

126 
	`Ârötf
(
°dîr
, "tbf: duplicate \"rate\" specification\n");

129 i‡(
	`gë_øã64
(&
øã64
, *
¨gv
)) {

130 
	`ex∂aö1
("øã", *
¨gv
);

133 
ok
++;

134 } i‡(
	`m©ches
(*
¨gv
, "peakrate") == 0) {

135 
	`NEXT_ARG
();

136 i‡(
¥©e64
) {

137 
	`Ârötf
(
°dîr
, "tbf: duplicate \"peakrate\" specification\n");

140 i‡(
	`gë_øã64
(&
¥©e64
, *
¨gv
)) {

141 
	`ex∂aö1
("≥akøã", *
¨gv
);

144 
ok
++;

145 } i‡(
	`m©ches
(*
¨gv
, "overhead") == 0) {

146 
	`NEXT_ARG
();

147 i‡(
ovîhód
) {

148 
	`Ârötf
(
°dîr
, "tbf: duplicate \"overhead\" specification\n");

151 i‡(
	`gë_u16
(&
ovîhód
, *
¨gv
, 10)) {

152 
	`ex∂aö1
("ovîhód", *
¨gv
);  -1;

154 } i‡(
	`m©ches
(*
¨gv
, "linklayer") == 0) {

155 
	`NEXT_ARG
();

156 i‡(
	`gë_lökœyî
(&
lökœyî
, *
¨gv
)) {

157 
	`ex∂aö1
("lökœyî", *
¨gv
);  -1;

159 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

160 
	`ex∂aö
();

163 
	`Ârötf
(
°dîr
, "tbf: unknow¿∑ømëî \"%s\"\n", *
¨gv
);

164 
	`ex∂aö
();

167 
¨gc
--; 
¨gv
++;

170 
vîdi˘
 = 0;

176 i‡(
øã64
 == 0) {

177 
	`Ârötf
(
°dîr
, "tbf:Åhe \"rate\"Öarameter is mandatory.\n");

178 
vîdi˘
 = -1;

180 i‡(!
buf„r
) {

181 
	`Ârötf
(
°dîr
, "tbf:Åhe \"burst\"Öarameter is mandatory.\n");

182 
vîdi˘
 = -1;

184 i‡(
¥©e64
) {

185 i‡(!
mtu
) {

186 
	`Ârötf
(
°dîr
, "tbf: when \"peakrate\" is specified, \"mtu\" mustálso be specified.\n");

187 
vîdi˘
 = -1;

191 i‡(
›t
.
limô
 =0 && 
œãncy
 == 0) {

192 
	`Ârötf
(
°dîr
, "tbf:Éither \"limit\" or \"latency\" isÑequired.\n");

193 
vîdi˘
 = -1;

196 i‡(
vîdi˘
 != 0) {

197 
	`ex∂aö
();

198  
vîdi˘
;

201 
›t
.
øã
.øã = (
øã64
 >= (1ULL << 32)) ? ~0U :Ñate64;

202 
›t
.
≥akøã
.
øã
 = (
¥©e64
 >= (1ULL << 32)) ? ~0U :Örate64;

204 i‡(
›t
.
limô
 == 0) {

205 
lim
 = 
øã64
*()
œãncy
/
TIME_UNITS_PER_SEC
 + 
buf„r
;

206 i‡(
¥©e64
) {

207 
lim2
 = 
¥©e64
*()
œãncy
/
TIME_UNITS_PER_SEC
 + 
mtu
;

208 i‡(
lim2
 < 
lim
)

209 
lim
 = 
lim2
;

211 
›t
.
limô
 = 
lim
;

214 
›t
.
øã
.
mpu
 = mpu;

215 
›t
.
øã
.
ovîhód
 = overhead;

216 i‡(
	`tc_ˇlc_πabÀ
(&
›t
.
øã
, 
πab
, 
R˚Œ_log
, 
mtu
, 
lökœyî
) < 0) {

217 
	`Ârötf
(
°dîr
, "tbf: failedÅo calculateÑateÅable.\n");

220 
›t
.
buf„r
 = 
	`tc_ˇlc_xmôtime
(›t.
øã
.rate, buffer);

222 i‡(
›t
.
≥akøã
.
øã
) {

223 
›t
.
≥akøã
.
mpu
 = mpu;

224 
›t
.
≥akøã
.
ovîhód
 = overhead;

225 i‡(
	`tc_ˇlc_πabÀ
(&
›t
.
≥akøã
, 
±ab
, 
P˚Œ_log
, 
mtu
, 
lökœyî
) < 0) {

226 
	`Ârötf
(
°dîr
, "tbf: failedÅo calculateÖeakÑateÅable.\n");

229 
›t
.
mtu
 = 
	`tc_ˇlc_xmôtime
(›t.
≥akøã
.
øã
, mtu);

232 
èû
 = 
	`NLMSG_TAIL
(
n
);

233 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

234 
	`add©å_l
(
n
, 2024, 
TCA_TBF_PARMS
, &
›t
, (opt));

235 
	`add©å_l
(
n
, 2124, 
TCA_TBF_BURST
, &
buf„r
, (buffer));

236 i‡(
øã64
 >= (1ULL << 32))

237 
	`add©å_l
(
n
, 2124, 
TCA_TBF_RATE64
, &
øã64
, (rate64));

238 
	`add©å_l
(
n
, 3024, 
TCA_TBF_RTAB
, 
πab
, 1024);

239 i‡(
›t
.
≥akøã
.
øã
) {

240 i‡(
¥©e64
 >= (1ULL << 32))

241 
	`add©å_l
(
n
, 3124, 
TCA_TBF_PRATE64
, &
¥©e64
, (prate64));

242 
	`add©å_l
(
n
, 3224, 
TCA_TBF_PBURST
, &
mtu
, (mtu));

243 
	`add©å_l
(
n
, 4096, 
TCA_TBF_PTAB
, 
±ab
, 1024);

245 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

247 
	}
}

249 
	$tbf_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

251 
π©å
 *
tb
[
TCA_TBF_MAX
+1];

252 
tc_tbf_q›t
 *
q›t
;

253 
lökœyî
;

254 
buf„r
, 
mtu
;

255 
œãncy
;

256 
__u64
 
øã64
 = 0, 
¥©e64
 = 0;

257 
	`SPRINT_BUF
(
b1
);

258 
	`SPRINT_BUF
(
b2
);

259 
	`SPRINT_BUF
(
b3
);

261 i‡(
›t
 =
NULL
)

264 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_TBF_MAX
, 
›t
);

266 i‡(
tb
[
TCA_TBF_PARMS
] =
NULL
)

269 
q›t
 = 
	`RTA_DATA
(
tb
[
TCA_TBF_PARMS
]);

270 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_TBF_PARMS
]Ë< (*
q›t
))

272 
øã64
 = 
q›t
->
øã
.rate;

273 i‡(
tb
[
TCA_TBF_RATE64
] &&

274 
	`RTA_PAYLOAD
(
tb
[
TCA_TBF_RATE64
]Ë>(
øã64
))

275 
øã64
 = 
	`πa_gë©å_u64
(
tb
[
TCA_TBF_RATE64
]);

276 
	`Ârötf
(
f
, "øã %†", 
	`•röt_øã
(
øã64
, 
b1
));

277 
buf„r
 = 
	`tc_ˇlc_xmôsize
(
øã64
, 
q›t
->buffer);

278 i‡(
show_dëaûs
) {

279 
	`Ârötf
(
f
, "bur° %s/%u mpu %†", 
	`•röt_size
(
buf„r
, 
b1
),

280 1<<
q›t
->
øã
.
˚Œ_log
, 
	`•röt_size
(q›t->øã.
mpu
, 
b2
));

282 
	`Ârötf
(
f
, "bur° %†", 
	`•röt_size
(
buf„r
, 
b1
));

284 i‡(
show_øw
)

285 
	`Ârötf
(
f
, "[%08x] ", 
q›t
->
buf„r
);

286 
¥©e64
 = 
q›t
->
≥akøã
.
øã
;

287 i‡(
tb
[
TCA_TBF_PRATE64
] &&

288 
	`RTA_PAYLOAD
(
tb
[
TCA_TBF_PRATE64
]Ë>(
¥©e64
))

289 
¥©e64
 = 
	`πa_gë©å_u64
(
tb
[
TCA_TBF_PRATE64
]);

290 i‡(
¥©e64
) {

291 
	`Ârötf
(
f
, "≥akøã %†", 
	`•röt_øã
(
¥©e64
, 
b1
));

292 i‡(
q›t
->
mtu
 || q›t->
≥akøã
.
mpu
) {

293 
mtu
 = 
	`tc_ˇlc_xmôsize
(
¥©e64
, 
q›t
->mtu);

294 i‡(
show_dëaûs
) {

295 
	`Ârötf
(
f
, "mtu %s/%u mpu %†", 
	`•röt_size
(
mtu
, 
b1
),

296 1<<
q›t
->
≥akøã
.
˚Œ_log
, 
	`•röt_size
(q›t->≥akøã.
mpu
, 
b2
));

298 
	`Ârötf
(
f
, "möbur° %†", 
	`•röt_size
(
mtu
, 
b1
));

300 i‡(
show_øw
)

301 
	`Ârötf
(
f
, "[%08x] ", 
q›t
->
mtu
);

305 
œãncy
 = 
TIME_UNITS_PER_SEC
*(
q›t
->
limô
/()
øã64
Ë- 
	`tc_c‹e_tick2time
(q›t->
buf„r
);

306 i‡(
¥©e64
) {

307 
œt2
 = 
TIME_UNITS_PER_SEC
*(
q›t
->
limô
/()
¥©e64
Ë- 
	`tc_c‹e_tick2time
(q›t->
mtu
);

308 i‡(
œt2
 > 
œãncy
)

309 
œãncy
 = 
œt2
;

311 i‡(
œãncy
 >= 0.0)

312 
	`Ârötf
(
f
, "œà%†", 
	`•röt_time
(
œãncy
, 
b1
));

313 i‡(
show_øw
 || 
œãncy
 < 0.0)

314 
	`Ârötf
(
f
, "limô %†", 
	`•röt_size
(
q›t
->
limô
, 
b1
));

316 i‡(
q›t
->
øã
.
ovîhód
) {

317 
	`Ârötf
(
f
, "ovîhód %d", 
q›t
->
øã
.
ovîhód
);

319 
lökœyî
 = (
q›t
->
øã
.lökœyî & 
TC_LINKLAYER_MASK
);

320 i‡(
lökœyî
 > 
TC_LINKLAYER_ETHERNET
 || 
show_dëaûs
)

321 
	`Ârötf
(
f
, "lökœyî %†", 
	`•röt_lökœyî
(
lökœyî
, 
b3
));

324 
	}
}

326 
qdisc_utû
 
	gtbf_qdisc_utû
 = {

327 .
id
 = "tbf",

328 .
	g∑r£_q›t
 = 
tbf_∑r£_›t
,

329 .
	g¥öt_q›t
 = 
tbf_¥öt_›t
,

	@tc/static-syms.c

7 
	~<°rög.h
>

8 
	~"dlf˙.h
"

10 *
	$_dlsym
(c⁄° *
sym
)

12 
	~"°©ic-syms.h
"

13  
NULL
;

14 
	}
}

	@tc/tc.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<sy¶og.h
>

20 
	~<f˙é.h
>

21 
	~<dlf˙.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

28 
	~"SNAPSHOT.h
"

29 
	~"utûs.h
"

30 
	~"tc_utû.h
"

31 
	~"tc_comm⁄.h
"

32 
	~"«me•a˚.h
"

34 
	gshow_°©s
 = 0;

35 
	gshow_dëaûs
 = 0;

36 
	gshow_øw
 = 0;

37 
	gshow_¥ëty
 = 0;

38 
	gshow_gøph
 = 0;

39 
	gtime°amp
;

41 
	gb©ch_mode
 = 0;

42 
	gªsﬁve_ho°s
 = 0;

43 
	gu£_õc
 = 0;

44 
	gf‹˚
 = 0;

45 
boﬁ
 
	gu£_«mes
 = 
Ál£
;

47 *
	gc⁄f_fûe
;

49 
π∆_h™dÀ
 
	gπh
;

51 *
	gBODY
 = 
NULL
;

52 
qdisc_utû
 * 
	gqdisc_li°
;

53 
fûãr_utû
 * 
	gfûãr_li°
;

55 
	$¥öt_noq›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
,

56 
π©å
 *
›t
)

58 i‡(
›t
 && 
	`RTA_PAYLOAD
(opt))

59 
	`Ârötf
(
f
, "[Unknown qdisc, optlen=%u] ",

60 (Ë
	`RTA_PAYLOAD
(
›t
));

62 
	}
}

64 
	$∑r£_noq›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

66 i‡(
¨gc
) {

67 
	`Ârötf
(
°dîr
, "Unknow¿qdis¯\"%s\", hí˚ o±i⁄ \"%s\" i†u≈¨ßbÀ\n", 
qu
->
id
, *
¨gv
);

71 
	}
}

73 
	$¥öt_nof›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
, 
__u32
 
fh™dÀ
)

75 i‡(
›t
 && 
	`RTA_PAYLOAD
(opt))

76 
	`Ârötf
(
f
, "fh %08x [Unknown filter, optlen=%u] ",

77 
fh™dÀ
, (Ë
	`RTA_PAYLOAD
(
›t
));

78 i‡(
fh™dÀ
)

79 
	`Ârötf
(
f
, "fh %08x ", 
fh™dÀ
);

81 
	}
}

83 
	$∑r£_nof›t
(
fûãr_utû
 *
qu
, *
fh™dÀ
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

85 
__u32
 
h™dÀ
;

87 i‡(
¨gc
) {

88 
	`Ârötf
(
°dîr
, "Unknow¿fûã∏\"%s\", hí˚ o±i⁄ \"%s\" i†u≈¨ßbÀ\n", 
qu
->
id
, *
¨gv
);

91 i‡(
fh™dÀ
) {

92 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

93 i‡(
	`gë_u32
(&
h™dÀ
, 
fh™dÀ
, 16)) {

94 
	`Ârötf
(
°dîr
, "U≈¨ßbÀ fûã∏ID \"%s\"\n", 
fh™dÀ
);

97 
t
->
tcm_h™dÀ
 = 
h™dÀ
;

100 
	}
}

102 
qdisc_utû
 *
	$gë_qdisc_köd
(c⁄° *
°r
)

104 *
dlh
;

105 
buf
[256];

106 
qdisc_utû
 *
q
;

108 
q
 = 
qdisc_li°
; q; q = q->
√xt
)

109 i‡(
	`°rcmp
(
q
->
id
, 
°r
) == 0)

110  
q
;

112 
	`¢¥ötf
(
buf
, (buf), "%s/q_%s.so", 
	`gë_tc_lib
(), 
°r
);

113 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

114 i‡(!
dlh
) {

116 
dlh
 = 
BODY
;

117 i‡(
dlh
 =
NULL
) {

118 
dlh
 = 
BODY
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

119 i‡(
dlh
 =
NULL
)

120 
n€xi°
;

124 
	`¢¥ötf
(
buf
, (buf), "%s_qdisc_utû", 
°r
);

125 
q
 = 
	`dlsym
(
dlh
, 
buf
);

126 i‡(
q
 =
NULL
)

127 
n€xi°
;

129 
ªg
:

130 
q
->
√xt
 = 
qdisc_li°
;

131 
qdisc_li°
 = 
q
;

132  
q
;

134 
n€xi°
:

135 
q
 = 
	`mÆloc
((*q));

136 i‡(
q
) {

138 
	`mem£t
(
q
, 0, (*q));

139 
q
->
id
 = 
	`°r˝y
(
	`mÆloc
(
	`°æí
(
°r
)+1), str);

140 
q
->
∑r£_q›t
 = 
∑r£_noq›t
;

141 
q
->
¥öt_q›t
 = 
¥öt_noq›t
;

142 
ªg
;

144  
q
;

145 
	}
}

148 
fûãr_utû
 *
	$gë_fûãr_köd
(c⁄° *
°r
)

150 *
dlh
;

151 
buf
[256];

152 
fûãr_utû
 *
q
;

154 
q
 = 
fûãr_li°
; q; q = q->
√xt
)

155 i‡(
	`°rcmp
(
q
->
id
, 
°r
) == 0)

156  
q
;

158 
	`¢¥ötf
(
buf
, (buf), "%s/f_%s.so", 
	`gë_tc_lib
(), 
°r
);

159 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

160 i‡(
dlh
 =
NULL
) {

161 
dlh
 = 
BODY
;

162 i‡(
dlh
 =
NULL
) {

163 
dlh
 = 
BODY
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

164 i‡(
dlh
 =
NULL
)

165 
n€xi°
;

169 
	`¢¥ötf
(
buf
, (buf), "%s_fûãr_utû", 
°r
);

170 
q
 = 
	`dlsym
(
dlh
, 
buf
);

171 i‡(
q
 =
NULL
)

172 
n€xi°
;

174 
ªg
:

175 
q
->
√xt
 = 
fûãr_li°
;

176 
fûãr_li°
 = 
q
;

177  
q
;

178 
n€xi°
:

179 
q
 = 
	`mÆloc
((*q));

180 i‡(
q
) {

181 
	`mem£t
(
q
, 0, (*q));

182 
	`°∫˝y
(
q
->
id
, 
°r
, 15);

183 
q
->
∑r£_f›t
 = 
∑r£_nof›t
;

184 
q
->
¥öt_f›t
 = 
¥öt_nof›t
;

185 
ªg
;

187  
q
;

188 
	}
}

190 
	$ußge
()

192 
	`Ârötf
(
°dîr
, "Usage:Åc [ OPTIONS ] OBJECT { COMMAND | help }\n"

198 
	}
}

200 
	$do_cmd
(
¨gc
, **
¨gv
)

202 i‡(
	`m©ches
(*
¨gv
, "qdisc") == 0)

203  
	`do_qdisc
(
¨gc
-1, 
¨gv
+1);

204 i‡(
	`m©ches
(*
¨gv
, "class") == 0)

205  
	`do_˛ass
(
¨gc
-1, 
¨gv
+1);

206 i‡(
	`m©ches
(*
¨gv
, "filter") == 0)

207  
	`do_fûãr
(
¨gc
-1, 
¨gv
+1);

208 i‡(
	`m©ches
(*
¨gv
, "actions") == 0)

209  
	`do_a˘i⁄
(
¨gc
-1, 
¨gv
+1);

210 i‡(
	`m©ches
(*
¨gv
, "monitor") == 0)

211  
	`do_tcm⁄ô‹
(
¨gc
-1, 
¨gv
+1);

212 i‡(
	`m©ches
(*
¨gv
, "exec") == 0)

213  
	`do_exec
(
¨gc
-1, 
¨gv
+1);

214 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

215 
	`ußge
();

219 
	`Ârötf
(
°dîr
, "Object \"%s\" is unknown,Åry \"tc help\".\n",

220 *
¨gv
);

222 
	}
}

224 
	$b©ch
(c⁄° *
«me
)

226 *
löe
 = 
NULL
;

227 
size_t
 
Àn
 = 0;

228 
ªt
 = 0;

230 
b©ch_mode
 = 1;

231 i‡(
«me
 && 
	`°rcmp
(name, "-") != 0) {

232 i‡(
	`‰e›í
(
«me
, "r", 
°dö
Ë=
NULL
) {

233 
	`Ârötf
(
°dîr
, "Cannot open file \"%s\" forÑeading: %s\n",

234 
«me
, 
	`°ªº‹
(
î∫o
));

239 
	`tc_c‹e_öô
();

241 i‡(
	`π∆_›í
(&
πh
, 0) < 0) {

242 
	`Ârötf
(
°dîr
, "Cannot openÑtnetlink\n");

246 
cmdlöío
 = 0;

247 
	`gëcmdlöe
(&
löe
, &
Àn
, 
°dö
) != -1) {

248 *
œrgv
[100];

249 
œrgc
;

251 
œrgc
 = 
	`makórgs
(
löe
, 
œrgv
, 100);

252 i‡(
œrgc
 == 0)

255 i‡(
	`do_cmd
(
œrgc
, 
œrgv
)) {

256 
	`Ârötf
(
°dîr
, "Comm™d faûed %s:%d\n", 
«me
, 
cmdlöío
);

257 
ªt
 = 1;

258 i‡(!
f‹˚
)

262 i‡(
löe
)

263 
	`‰ì
(
löe
);

265 
	`π∆_˛o£
(&
πh
);

266  
ªt
;

267 
	}
}

270 
	$maö
(
¨gc
, **
¨gv
)

272 
ªt
;

273 *
b©ch_fûe
 = 
NULL
;

275 
¨gc
 > 1) {

276 i‡(
¨gv
[1][0] != '-')

278 i‡(
	`m©ches
(
¨gv
[1], "-stats") == 0 ||

279 
	`m©ches
(
¨gv
[1], "-statistics") == 0) {

280 ++
show_°©s
;

281 } i‡(
	`m©ches
(
¨gv
[1], "-details") == 0) {

282 ++
show_dëaûs
;

283 } i‡(
	`m©ches
(
¨gv
[1], "-raw") == 0) {

284 ++
show_øw
;

285 } i‡(
	`m©ches
(
¨gv
[1], "-pretty") == 0) {

286 ++
show_¥ëty
;

287 } i‡(
	`m©ches
(
¨gv
[1], "-graph") == 0) {

288 
show_gøph
 = 1;

289 } i‡(
	`m©ches
(
¨gv
[1], "-Version") == 0) {

290 
	`¥ötf
("t¯utûôy, i¥ouã2-ss%s\n", 
SNAPSHOT
);

292 } i‡(
	`m©ches
(
¨gv
[1], "-iec") == 0) {

293 ++
u£_õc
;

294 } i‡(
	`m©ches
(
¨gv
[1], "-help") == 0) {

295 
	`ußge
();

297 } i‡(
	`m©ches
(
¨gv
[1], "-force") == 0) {

298 ++
f‹˚
;

299 } i‡(
	`m©ches
(
¨gv
[1], "-batch") == 0) {

300 
¨gc
--; 
¨gv
++;

301 i‡(
¨gc
 <= 1)

302 
	`ußge
();

303 
b©ch_fûe
 = 
¨gv
[1];

304 } i‡(
	`m©ches
(
¨gv
[1], "-netns") == 0) {

305 
	`NEXT_ARG
();

306 i‡(
	`√äs_swôch
(
¨gv
[1]))

308 } i‡(
	`m©ches
(
¨gv
[1], "-names") == 0 ||

309 
	`m©ches
(
¨gv
[1], "-nm") == 0) {

310 
u£_«mes
 = 
åue
;

311 } i‡(
	`m©ches
(
¨gv
[1], "-cf") == 0 ||

312 
	`m©ches
(
¨gv
[1], "-conf") == 0) {

313 
	`NEXT_ARG
();

314 
c⁄f_fûe
 = 
¨gv
[1];

315 } i‡(
	`m©ches
(
¨gv
[1], "-timestamp") == 0) {

316 
time°amp
++;

317 } i‡(
	`m©ches
(
¨gv
[1], "-tshort") == 0) {

318 ++
time°amp
;

319 ++
time°amp_sh‹t
;

321 
	`Ârötf
(
°dîr
, "O±i⁄ \"%s\" i†unknown,Åry \"t¯-hñp\".\n", 
¨gv
[1]);

324 
¨gc
--; 
¨gv
++;

327 i‡(
b©ch_fûe
)

328  
	`b©ch
(
b©ch_fûe
);

330 i‡(
¨gc
 <= 1) {

331 
	`ußge
();

335 
	`tc_c‹e_öô
();

336 i‡(
	`π∆_›í
(&
πh
, 0) < 0) {

337 
	`Ârötf
(
°dîr
, "Cannot openÑtnetlink\n");

338 
	`exô
(1);

341 i‡(
u£_«mes
 && 
	`˛s_«mes_öô
(
c⁄f_fûe
)) {

342 
ªt
 = -1;

343 
Exô
;

346 
ªt
 = 
	`do_cmd
(
¨gc
-1, 
¨gv
+1);

347 
Exô
:

348 
	`π∆_˛o£
(&
πh
);

350 i‡(
u£_«mes
)

351 
	`˛s_«mes_unöô
();

353  
ªt
;

354 
	}
}

	@tc/tc_bpf.c

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<°rög.h
>

18 
	~<°dboﬁ.h
>

19 
	~<°döt.h
>

20 
	~<î∫o.h
>

21 
	~<f˙é.h
>

22 
	~<°d¨g.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/°©.h
>

25 
	~<sys/un.h
>

26 
	~<löux/fûãr.h
>

27 
	~<löux/√éök.h
>

28 
	~<löux/π√éök.h
>

30 #ifde‡
HAVE_ELF


31 
	~<libñf.h
>

32 
	~<gñf.h
>

35 
	~"utûs.h
"

37 
	~"bpf_ñf.h
"

38 
	~"bpf_scm.h
"

40 
	~"tc_utû.h
"

41 
	~"tc_bpf.h
"

43 
	$bpf_∑r£_°rög
(*
¨g
, 
boﬁ
 
‰om_fûe
, 
__u16
 *
bpf_Àn
,

44 **
bpf_°rög
, 
boﬁ
 *
√ed_ªÀa£
,

45 c⁄° 
£∑øt‹
)

47 
•
;

49 i‡(
‰om_fûe
) {

50 
size_t
 
tmp_Àn
, 
›_Àn
 = ("65535 255 255 4294967295,");

51 *
tmp_°rög
;

52 
FILE
 *
Â
;

54 
tmp_Àn
 = ("4096,"Ë+ 
BPF_MAXINSNS
 * 
›_Àn
;

55 
tmp_°rög
 = 
	`mÆloc
(
tmp_Àn
);

56 i‡(
tmp_°rög
 =
NULL
)

57  -
ENOMEM
;

59 
	`mem£t
(
tmp_°rög
, 0, 
tmp_Àn
);

61 
Â
 = 
	`f›í
(
¨g
, "r");

62 i‡(
Â
 =
NULL
) {

63 
	`≥º‹
("Cannot fopen");

64 
	`‰ì
(
tmp_°rög
);

65  -
ENOENT
;

68 i‡(!
	`fgës
(
tmp_°rög
, 
tmp_Àn
, 
Â
)) {

69 
	`‰ì
(
tmp_°rög
);

70 
	`f˛o£
(
Â
);

71  -
EIO
;

74 
	`f˛o£
(
Â
);

76 *
√ed_ªÀa£
 = 
åue
;

77 *
bpf_°rög
 = 
tmp_°rög
;

79 *
√ed_ªÀa£
 = 
Ál£
;

80 *
bpf_°rög
 = 
¨g
;

83 i‡(
	`ssˇnf
(*
bpf_°rög
, "%hu%c", 
bpf_Àn
, &
•
) != 2 ||

84 
•
 !
£∑øt‹
) {

85 i‡(*
√ed_ªÀa£
)

86 
	`‰ì
(*
bpf_°rög
);

87  -
EINVAL
;

91 
	}
}

93 
	$bpf_∑r£_›s
(
¨gc
, **
¨gv
, 
sock_fûãr
 *
bpf_›s
,

94 
boﬁ
 
‰om_fûe
)

96 *
bpf_°rög
, *
tokí
, 
£∑øt‹
 = ',';

97 
ªt
 = 0, 
i
 = 0;

98 
boﬁ
 
√ed_ªÀa£
;

99 
__u16
 
bpf_Àn
 = 0;

101 i‡(
¨gc
 < 1)

102  -
EINVAL
;

103 i‡(
	`bpf_∑r£_°rög
(
¨gv
[0], 
‰om_fûe
, &
bpf_Àn
, &
bpf_°rög
,

104 &
√ed_ªÀa£
, 
£∑øt‹
))

105  -
EINVAL
;

106 i‡(
bpf_Àn
 =0 || bpf_À¿> 
BPF_MAXINSNS
) {

107 
ªt
 = -
EINVAL
;

108 
out
;

111 
tokí
 = 
bpf_°rög
;

112 (
tokí
 = 
	`°rchr
—okí, 
£∑øt‹
)) && (++token)[0]) {

113 i‡(
i
 >
bpf_Àn
) {

114 
	`Ârötf
(
°dîr
, "RealÖrogramÜengthÉxceedsÉncoded "

116 
ªt
 = -
EINVAL
;

117 
out
;

120 i‡(
	`ssˇnf
(
tokí
, "%hu %hhu %hhu %u,",

121 &
bpf_›s
[
i
].
code
, &bpf_›s[i].
jt
,

122 &
bpf_›s
[
i
].
jf
, &bpf_›s[i].
k
) != 4) {

123 
	`Ârötf
(
°dîr
, "Eº‹áàö°ru˘i⁄ %d!\n", 
i
);

124 
ªt
 = -
EINVAL
;

125 
out
;

128 
i
++;

131 i‡(
i
 !
bpf_Àn
) {

132 
	`Ârötf
(
°dîr
, "ParsedÖrogramÜength isÜessÅhanÉncoded"

134 
ªt
 = -
EINVAL
;

135 
out
;

137 
ªt
 = 
bpf_Àn
;

139 
out
:

140 i‡(
√ed_ªÀa£
)

141 
	`‰ì
(
bpf_°rög
);

143  
ªt
;

144 
	}
}

146 
	$bpf_¥öt_›s
(
FILE
 *
f
, 
π©å
 *
bpf_›s
, 
__u16
 
Àn
)

148 
sock_fûãr
 *
›s
 = (sock_fûã∏*Ë
	`RTA_DATA
(
bpf_›s
);

149 
i
;

151 i‡(
Àn
 == 0)

154 
	`Ârötf
(
f
, "byãcodê\'%u,", 
Àn
);

156 
i
 = 0; i < 
Àn
 - 1; i++)

157 
	`Ârötf
(
f
, "%hu %hhu %hhu %u,", 
›s
[
i
].
code
, ops[i].
jt
,

158 
›s
[
i
].
jf
, ops[i].
k
);

160 
	`Ârötf
(
f
, "%hu %hhu %hhu %u\'", 
›s
[
i
].
code
, ops[i].
jt
,

161 
›s
[
i
].
jf
, ops[i].
k
);

162 
	}
}

164 c⁄° *
	$bpf_deÁu…_£˘i⁄
(c⁄° 
bpf_¥og_ty≥
 
ty≥
)

166 
ty≥
) {

167 
BPF_PROG_TYPE_SCHED_CLS
:

168  
ELF_SECTION_CLASSIFIER
;

169 
BPF_PROG_TYPE_SCHED_ACT
:

170  
ELF_SECTION_ACTION
;

172  
NULL
;

174 
	}
}

176 #ifde‡
HAVE_ELF


177 
	sbpf_ñf_£c_d©a
 {

178 
GElf_Shdr
 
	m£c_hdr
;

179 *
	m£c_«me
;

180 
Elf_D©a
 *
	m£c_d©a
;

183 
	sbpf_m≠_d©a
 {

184 *
	mfds
;

185 c⁄° *
	mobj
;

186 
bpf_ñf_°
 *
	m°
;

187 
bpf_ñf_m≠
 *
	mít
;

195 
	gbpf_log_buf
[65536];

196 
boﬁ
 
	gbpf_vîbo£
;

198 
bpf_ñf_°
 
	gbpf_°
;

200 
	gm≠_fds
[
ELF_MAX_MAPS
];

201 
bpf_ñf_m≠
 
	gm≠_ít
[
ELF_MAX_MAPS
];

203 
	$bpf_dump_îr‹
(c⁄° *
f‹m©
, ...Ë
	`__check_f‹m©_°rög
(1, 2);

204 
	$bpf_dump_îr‹
(c⁄° *
f‹m©
, ...)

206 
va_li°
 
vl
;

208 
	`va_°¨t
(
vl
, 
f‹m©
);

209 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
vl
);

210 
	`va_íd
(
vl
);

212 i‡(
bpf_log_buf
[0]) {

213 
	`Ârötf
(
°dîr
, "%s\n", 
bpf_log_buf
);

214 
	`mem£t
(
bpf_log_buf
, 0, (bpf_log_buf));

216 
	}
}

218 
	$bpf_ßve_föfo
(
fûe_fd
)

220 
°©
 
°
;

221 
ªt
;

223 
	`mem£t
(&
bpf_°
, 0, (bpf_st));

225 
ªt
 = 
	`f°©
(
fûe_fd
, &
°
);

226 i‡(
ªt
 < 0) {

227 
	`Ârötf
(
°dîr
, "Stat ofÉlf file failed: %s\n",

228 
	`°ªº‹
(
î∫o
));

232 
bpf_°
.
°_dev
 = 
°
.st_dev;

233 
bpf_°
.
°_öo
 = 
°
.st_ino;

234 
	}
}

236 
	$bpf_˛ór_föfo
()

238 
	`mem£t
(&
bpf_°
, 0, (bpf_st));

239 
	}
}

241 
boﬁ
 
	$bpf_may_skù_m≠_¸óti⁄
(
fûe_fd
)

243 
°©
 
°
;

244 
ªt
;

246 
ªt
 = 
	`f°©
(
fûe_fd
, &
°
);

247 i‡(
ªt
 < 0) {

248 
	`Ârötf
(
°dîr
, "Stat ofÉlf file failed: %s\n",

249 
	`°ªº‹
(
î∫o
));

250  
Ál£
;

253  (
bpf_°
.
°_dev
 =
°
.st_dev) &&

254 (
bpf_°
.
°_öo
 =
°
.st_ino);

255 
	}
}

257 
	$bpf_¸óã_m≠
(
bpf_m≠_ty≥
 
ty≥
, 
size_key
,

258 
size_vÆue
, 
max_ñem
)

260 
bpf_©å
 
©å
 = {

261 .
m≠_ty≥
 = 
ty≥
,

262 .
key_size
 = 
size_key
,

263 .
vÆue_size
 = 
size_vÆue
,

264 .
max_íåõs
 = 
max_ñem
,

267  
	`bpf
(
BPF_MAP_CREATE
, &
©å
, (attr));

268 
	}
}

270 
	$bpf_upd©e_m≠
(
fd
, c⁄° *
key
, c⁄° *
vÆue
,

271 
uöt64_t
 
Êags
)

273 
bpf_©å
 
©å
 = {

274 .
m≠_fd
 = 
fd
,

275 .
key
 = 
	`bpf_±r_to_u64
(key),

276 .
vÆue
 = 
	`bpf_±r_to_u64
(value),

277 .
Êags
 = flags,

280  
	`bpf
(
BPF_MAP_UPDATE_ELEM
, &
©å
, (attr));

281 
	}
}

283 
	$bpf_¥og_lﬂd
(
bpf_¥og_ty≥
 
ty≥
, c⁄° 
bpf_ö¢
 *
ö¢s
,

284 
Àn
, c⁄° *
li˚n£
)

286 
bpf_©å
 
©å
 = {

287 .
¥og_ty≥
 = 
ty≥
,

288 .
ö¢s
 = 
	`bpf_±r_to_u64
(insns),

289 .
ö¢_˙t
 = 
Àn
 / (
bpf_ö¢
),

290 .
li˚n£
 = 
	`bpf_±r_to_u64
(license),

291 .
log_buf
 = 
	`bpf_±r_to_u64
(
bpf_log_buf
),

292 .
log_size
 = (
bpf_log_buf
),

293 .
log_Àvñ
 = 1,

296  
	`bpf
(
BPF_PROG_LOAD
, &
©å
, (attr));

297 
	}
}

299 
	$bpf_¥og_©èch
(
bpf_¥og_ty≥
 
ty≥
, c⁄° *
£c
,

300 c⁄° 
bpf_ö¢
 *
ö¢s
, 
size
,

301 c⁄° *
li˚n£
)

303 
¥og_fd
 = 
	`bpf_¥og_lﬂd
(
ty≥
, 
ö¢s
, 
size
, 
li˚n£
);

305 i‡(
¥og_fd
 < 0 || 
bpf_vîbo£
) {

306 
	`bpf_dump_îr‹
("%†(£˘i⁄ \'%s\'): %s\n", 
¥og_fd
 < 0 ?

309 
£c
, 
	`°ªº‹
(
î∫o
));

312  
¥og_fd
;

313 
	}
}

315 
	$bpf_m≠_©èch
(
bpf_m≠_ty≥
 
ty≥
, 
size_key
,

316 
size_vÆue
, 
max_ñem
)

318 
m≠_fd
 = 
	`bpf_¸óã_m≠
(
ty≥
, 
size_key
, 
size_vÆue
, 
max_ñem
);

320 i‡(
m≠_fd
 < 0)

321 
	`bpf_dump_îr‹
("BPF m≠Ñeje˘ed: %s\n", 
	`°ªº‹
(
î∫o
));

323  
m≠_fd
;

324 
	}
}

326 
	$bpf_m≠s_öô
()

328 
i
;

330 
	`mem£t
(
m≠_ít
, 0, (map_ent));

331 
i
 = 0; i < 
	`ARRAY_SIZE
(
m≠_fds
); i++)

332 
m≠_fds
[
i
] = -1;

333 
	}
}

335 
	$bpf_m≠s_cou¡
()

337 
i
, 
cou¡
 = 0;

339 
i
 = 0; i < 
	`ARRAY_SIZE
(
m≠_fds
); i++) {

340 i‡(
m≠_fds
[
i
] < 0)

342 
cou¡
++;

345  
cou¡
;

346 
	}
}

348 
	$bpf_m≠s_de°roy
()

350 
i
;

352 
	`mem£t
(
m≠_ít
, 0, (map_ent));

353 
i
 = 0; i < 
	`ARRAY_SIZE
(
m≠_fds
); i++) {

354 i‡(
m≠_fds
[
i
] >= 0)

355 
	`˛o£
(
m≠_fds
[
i
]);

357 
	}
}

359 
	$bpf_m≠s_©èch
(
bpf_ñf_m≠
 *
m≠s
, 
num_m≠s
)

361 
i
, 
ªt
;

363 
i
 = 0; (ò< 
num_m≠s
Ë&& (num_m≠†<
	`ARRAY_SIZE
(
m≠_fds
)); i++) {

364 
bpf_ñf_m≠
 *
m≠
 = &
m≠s
[
i
];

366 
ªt
 = 
	`bpf_m≠_©èch
(
m≠
->
ty≥
, m≠->
size_key
,

367 
m≠
->
size_vÆue
, m≠->
max_ñem
);

368 i‡(
ªt
 < 0)

369 
îr_unwöd
;

371 
m≠_fds
[
i
] = 
ªt
;

376 
îr_unwöd
:

377 
	`bpf_m≠s_de°roy
();

378  
ªt
;

379 
	}
}

381 
	$bpf_fûl_£˘i⁄_d©a
(
Elf
 *
ñf_fd
, 
GElf_Ehdr
 *
ñf_hdr
, 
£c_ödex
,

382 
bpf_ñf_£c_d©a
 *
£c_d©a
)

384 
GElf_Shdr
 
£c_hdr
;

385 
Elf_S˙
 *
£c_fd
;

386 
Elf_D©a
 *
£c_ed©a
;

387 *
£c_«me
;

389 
	`mem£t
(
£c_d©a
, 0, (*sec_data));

391 
£c_fd
 = 
	`ñf_gës˙
(
ñf_fd
, 
£c_ödex
);

392 i‡(!
£c_fd
)

393  -
EINVAL
;

395 i‡(
	`gñf_gëshdr
(
£c_fd
, &
£c_hdr
) != &sec_hdr)

396  -
EIO
;

398 
£c_«me
 = 
	`ñf_°Ωå
(
ñf_fd
, 
ñf_hdr
->
e_sh°∫dx
,

399 
£c_hdr
.
sh_«me
);

400 i‡(!
£c_«me
 || !
£c_hdr
.
sh_size
)

401  -
ENOENT
;

403 
£c_ed©a
 = 
	`ñf_gëd©a
(
£c_fd
, 
NULL
);

404 i‡(!
£c_ed©a
 || 
	`ñf_gëd©a
(
£c_fd
, sec_edata))

405  -
EIO
;

407 
	`mem˝y
(&
£c_d©a
->
£c_hdr
, &sec_hdr, (sec_hdr));

408 
£c_d©a
->
£c_«me
 = sec_name;

409 
£c_d©a
->£c_d©®
£c_ed©a
;

412 
	}
}

414 
	$bpf_≠∂y_ªlo_d©a
(
bpf_ñf_£c_d©a
 *
d©a_ªlo
,

415 
bpf_ñf_£c_d©a
 *
d©a_ö¢
,

416 
Elf_D©a
 *
sym_èb
)

418 
Elf_D©a
 *
id©a
 = 
d©a_ö¢
->
£c_d©a
;

419 
GElf_Shdr
 *
rhdr
 = &
d©a_ªlo
->
£c_hdr
;

420 
ªlo_ít
, 
ªlo_num
 = 
rhdr
->
sh_size
 /Ñhdr->
sh_ítsize
;

421 
bpf_ö¢
 *
ö¢s
 = 
id©a
->
d_buf
;

422 
num_ö¢s
 = 
id©a
->
d_size
 / (*
ö¢s
);

424 
ªlo_ít
 = 0;Ñño_íà< 
ªlo_num
;Ñelo_ent++) {

425 
ioff
, 
‚um
;

426 
GElf_Rñ
 
ªlo
;

427 
GElf_Sym
 
sym
;

429 i‡(
	`gñf_gëªl
(
d©a_ªlo
->
£c_d©a
, 
ªlo_ít
, &
ªlo
) != &relo)

430  -
EIO
;

432 
ioff
 = 
ªlo
.
r_off£t
 / (
bpf_ö¢
);

433 i‡(
ioff
 >
num_ö¢s
)

434  -
EINVAL
;

435 i‡(
ö¢s
[
ioff
].
code
 !(
BPF_LD
 | 
BPF_IMM
 | 
BPF_DW
))

436  -
EINVAL
;

438 i‡(
	`gñf_gësym
(
sym_èb
, 
	`GELF_R_SYM
(
ªlo
.
r_öfo
), &
sym
) != &sym)

439  -
EIO
;

441 
‚um
 = 
sym
.
°_vÆue
 / (
bpf_ñf_m≠
);

442 i‡(
‚um
 >
	`ARRAY_SIZE
(
m≠_fds
))

443  -
EINVAL
;

444 i‡(
m≠_fds
[
‚um
] < 0)

445  -
EINVAL
;

447 
ö¢s
[
ioff
].
§c_ªg
 = 
BPF_PSEUDO_MAP_FD
;

448 
ö¢s
[
ioff
].
imm
 = 
m≠_fds
[
‚um
];

452 
	}
}

454 
	$bpf_„tch_™cûœry
(
fûe_fd
, 
Elf
 *
ñf_fd
, 
GElf_Ehdr
 *
ñf_hdr
,

455 
boﬁ
 *
£c_d⁄e
, *
li˚n£
, 
lic_Àn
,

456 
Elf_D©a
 **
sym_èb
)

458 
£c_ödex
, 
ªt
 = -1;

460 
£c_ödex
 = 1; sec_ödex < 
ñf_hdr
->
e_shnum
; sec_index++) {

461 
bpf_ñf_£c_d©a
 
d©a_™c
;

463 
ªt
 = 
	`bpf_fûl_£˘i⁄_d©a
(
ñf_fd
, 
ñf_hdr
, 
£c_ödex
,

464 &
d©a_™c
);

465 i‡(
ªt
 < 0)

469 i‡(!
	`°rcmp
(
d©a_™c
.
£c_«me
, 
ELF_SECTION_MAPS
) &&

470 !
	`bpf_may_skù_m≠_¸óti⁄
(
fûe_fd
)) {

471 
bpf_ñf_m≠
 *
m≠s
;

472 
m≠s_num
;

474 i‡(
d©a_™c
.
£c_d©a
->
d_size
 % (*
m≠s
) != 0)

475  -
EINVAL
;

477 
m≠s
 = 
d©a_™c
.
£c_d©a
->
d_buf
;

478 
m≠s_num
 = 
d©a_™c
.
£c_d©a
->
d_size
 / (*
m≠s
);

479 
	`mem˝y
(
m≠_ít
, 
m≠s
, 
d©a_™c
.
£c_d©a
->
d_size
);

481 
ªt
 = 
	`bpf_m≠s_©èch
(
m≠s
, 
m≠s_num
);

482 i‡(
ªt
 < 0)

483  
ªt
;

485 
£c_d⁄e
[
£c_ödex
] = 
åue
;

488 i‡(!
	`°rcmp
(
d©a_™c
.
£c_«me
, 
ELF_SECTION_LICENSE
)) {

489 i‡(
d©a_™c
.
£c_d©a
->
d_size
 > 
lic_Àn
)

490  -
ENOMEM
;

492 
£c_d⁄e
[
£c_ödex
] = 
åue
;

493 
	`mem˝y
(
li˚n£
, 
d©a_™c
.
£c_d©a
->
d_buf
,

494 
d©a_™c
.
£c_d©a
->
d_size
);

497 i‡(
d©a_™c
.
£c_hdr
.
sh_ty≥
 =
SHT_SYMTAB
) {

498 
£c_d⁄e
[
£c_ödex
] = 
åue
;

499 *
sym_èb
 = 
d©a_™c
.
£c_d©a
;

503  
ªt
;

504 
	}
}

506 
	$bpf_„tch_¥og_ªlo
(
Elf
 *
ñf_fd
, 
GElf_Ehdr
 *
ñf_hdr
, 
boﬁ
 *
£c_d⁄e
,

507 
bpf_¥og_ty≥
 
ty≥
, c⁄° *
£c
,

508 c⁄° *
li˚n£
, 
Elf_D©a
 *
sym_èb
)

510 
£c_ödex
, 
¥og_fd
 = -1;

512 
£c_ödex
 = 1; sec_ödex < 
ñf_hdr
->
e_shnum
; sec_index++) {

513 
bpf_ñf_£c_d©a
 
d©a_ªlo
, 
d©a_ö¢
;

514 
ös_ödex
, 
ªt
;

517 
ªt
 = 
	`bpf_fûl_£˘i⁄_d©a
(
ñf_fd
, 
ñf_hdr
, 
£c_ödex
,

518 &
d©a_ªlo
);

519 i‡(
ªt
 < 0 || 
d©a_ªlo
.
£c_hdr
.
sh_ty≥
 !
SHT_REL
)

522 
ös_ödex
 = 
d©a_ªlo
.
£c_hdr
.
sh_öfo
;

524 
ªt
 = 
	`bpf_fûl_£˘i⁄_d©a
(
ñf_fd
, 
ñf_hdr
, 
ös_ödex
,

525 &
d©a_ö¢
);

526 i‡(
ªt
 < 0)

528 i‡(
	`°rcmp
(
d©a_ö¢
.
£c_«me
, 
£c
))

531 
ªt
 = 
	`bpf_≠∂y_ªlo_d©a
(&
d©a_ªlo
, &
d©a_ö¢
, 
sym_èb
);

532 i‡(
ªt
 < 0)

535 
¥og_fd
 = 
	`bpf_¥og_©èch
(
ty≥
, 
£c
, 
d©a_ö¢
.
£c_d©a
->
d_buf
,

536 
d©a_ö¢
.
£c_d©a
->
d_size
, 
li˚n£
);

537 i‡(
¥og_fd
 < 0)

540 
£c_d⁄e
[
£c_ödex
] = 
åue
;

541 
£c_d⁄e
[
ös_ödex
] = 
åue
;

545  
¥og_fd
;

546 
	}
}

548 
	$bpf_„tch_¥og
(
Elf
 *
ñf_fd
, 
GElf_Ehdr
 *
ñf_hdr
, 
boﬁ
 *
£c_d⁄e
,

549 
bpf_¥og_ty≥
 
ty≥
, c⁄° *
£c
,

550 c⁄° *
li˚n£
)

552 
£c_ödex
, 
¥og_fd
 = -1;

554 
£c_ödex
 = 1; sec_ödex < 
ñf_hdr
->
e_shnum
; sec_index++) {

555 
bpf_ñf_£c_d©a
 
d©a_ö¢
;

556 
ªt
;

559 i‡(
£c_d⁄e
[
£c_ödex
])

562 
ªt
 = 
	`bpf_fûl_£˘i⁄_d©a
(
ñf_fd
, 
ñf_hdr
, 
£c_ödex
,

563 &
d©a_ö¢
);

564 i‡(
ªt
 < 0)

566 i‡(
	`°rcmp
(
d©a_ö¢
.
£c_«me
, 
£c
))

569 
¥og_fd
 = 
	`bpf_¥og_©èch
(
ty≥
, 
£c
, 
d©a_ö¢
.
£c_d©a
->
d_buf
,

570 
d©a_ö¢
.
£c_d©a
->
d_size
, 
li˚n£
);

571 i‡(
¥og_fd
 < 0)

574 
£c_d⁄e
[
£c_ödex
] = 
åue
;

578  
¥og_fd
;

579 
	}
}

581 
	$bpf_„tch_¥og_£c
(
Elf
 *
ñf_fd
, 
GElf_Ehdr
 *
ñf_hdr
, 
boﬁ
 *
£c_d⁄e
,

582 
bpf_¥og_ty≥
 
ty≥
, c⁄° *
£c
,

583 c⁄° *
li˚n£
, 
Elf_D©a
 *
sym_èb
)

585 
ªt
 = -1;

587 i‡(
sym_èb
)

588 
ªt
 = 
	`bpf_„tch_¥og_ªlo
(
ñf_fd
, 
ñf_hdr
, 
£c_d⁄e
, 
ty≥
,

589 
£c
, 
li˚n£
, 
sym_èb
);

590 i‡(
ªt
 < 0)

591 
ªt
 = 
	`bpf_„tch_¥og
(
ñf_fd
, 
ñf_hdr
, 
£c_d⁄e
, 
ty≥
, 
£c
,

592 
li˚n£
);

593  
ªt
;

594 
	}
}

596 
	$bpf_fûl_¥og_¨øys
(
Elf
 *
ñf_fd
, 
GElf_Ehdr
 *
ñf_hdr
, 
boﬁ
 *
£c_d⁄e
,

597 
bpf_¥og_ty≥
 
ty≥
, c⁄° *
li˚n£
,

598 
Elf_D©a
 *
sym_èb
)

600 
£c_ödex
;

602 
£c_ödex
 = 1; sec_ödex < 
ñf_hdr
->
e_shnum
; sec_index++) {

603 
bpf_ñf_£c_d©a
 
d©a_ö¢
;

604 
ªt
, 
m≠_id
, 
key_id
, 
¥og_fd
;

606 i‡(
£c_d⁄e
[
£c_ödex
])

609 
ªt
 = 
	`bpf_fûl_£˘i⁄_d©a
(
ñf_fd
, 
ñf_hdr
, 
£c_ödex
,

610 &
d©a_ö¢
);

611 i‡(
ªt
 < 0)

614 
ªt
 = 
	`ssˇnf
(
d©a_ö¢
.
£c_«me
, "%i/%i", &
m≠_id
, &
key_id
);

615 i‡(
ªt
 != 2)

618 i‡(
m≠_id
 >
	`ARRAY_SIZE
(
m≠_fds
) || map_fds[map_id] < 0)

619  -
ENOENT
;

620 i‡(
m≠_ít
[
m≠_id
].
ty≥
 !
BPF_MAP_TYPE_PROG_ARRAY
 ||

621 
m≠_ít
[
m≠_id
].
max_ñem
 <
key_id
)

622  -
EINVAL
;

624 
¥og_fd
 = 
	`bpf_„tch_¥og_£c
(
ñf_fd
, 
ñf_hdr
, 
£c_d⁄e
,

625 
ty≥
, 
d©a_ö¢
.
£c_«me
,

626 
li˚n£
, 
sym_èb
);

627 i‡(
¥og_fd
 < 0)

628  -
EIO
;

630 
ªt
 = 
	`bpf_upd©e_m≠
(
m≠_fds
[
m≠_id
], &
key_id
, &
¥og_fd
,

631 
BPF_ANY
);

632 i‡(
ªt
 < 0)

633  -
ENOENT
;

635 
£c_d⁄e
[
£c_ödex
] = 
åue
;

639 
	}
}

641 
	$bpf_›í_obje˘
(c⁄° *
∑th
, 
bpf_¥og_ty≥
 
ty≥
,

642 c⁄° *
£c
, 
boﬁ
 
vîbo£
)

644 
li˚n£
[
ELF_MAX_LICENSE_LEN
];

645 
fûe_fd
, 
¥og_fd
 = -1, 
ªt
;

646 
Elf_D©a
 *
sym_èb
 = 
NULL
;

647 
GElf_Ehdr
 
ñf_hdr
;

648 
boﬁ
 *
£c_d⁄e
;

649 
Elf
 *
ñf_fd
;

651 i‡(
	`ñf_vîsi⁄
(
EV_CURRENT
Ë=
EV_NONE
)

652  -
EINVAL
;

654 
fûe_fd
 = 
	`›í
(
∑th
, 
O_RDONLY
, 0);

655 i‡(
fûe_fd
 < 0)

656  -
î∫o
;

658 
ñf_fd
 = 
	`ñf_begö
(
fûe_fd
, 
ELF_C_READ
, 
NULL
);

659 i‡(!
ñf_fd
) {

660 
ªt
 = -
EINVAL
;

661 
out
;

664 i‡(
	`gñf_gëehdr
(
ñf_fd
, &
ñf_hdr
) != &elf_hdr) {

665 
ªt
 = -
EIO
;

666 
out_ñf
;

669 
£c_d⁄e
 = 
	`ˇŒoc
(
ñf_hdr
.
e_shnum
, (*sec_done));

670 i‡(!
£c_d⁄e
) {

671 
ªt
 = -
ENOMEM
;

672 
out_ñf
;

675 
	`mem£t
(
li˚n£
, 0, (license));

676 
bpf_vîbo£
 = 
vîbo£
;

678 i‡(!
	`bpf_may_skù_m≠_¸óti⁄
(
fûe_fd
))

679 
	`bpf_m≠s_öô
();

681 
ªt
 = 
	`bpf_„tch_™cûœry
(
fûe_fd
, 
ñf_fd
, &
ñf_hdr
, 
£c_d⁄e
,

682 
li˚n£
, ÷i˚n£), &
sym_èb
);

683 i‡(
ªt
 < 0)

684 
out_m≠s
;

686 
¥og_fd
 = 
	`bpf_„tch_¥og_£c
(
ñf_fd
, &
ñf_hdr
, 
£c_d⁄e
, 
ty≥
,

687 
£c
, 
li˚n£
, 
sym_èb
);

688 i‡(
¥og_fd
 < 0)

689 
out_m≠s
;

691 i‡(!
	`bpf_may_skù_m≠_¸óti⁄
(
fûe_fd
)) {

692 
ªt
 = 
	`bpf_fûl_¥og_¨øys
(
ñf_fd
, &
ñf_hdr
, 
£c_d⁄e
,

693 
ty≥
, 
li˚n£
, 
sym_èb
);

694 i‡(
ªt
 < 0)

695 
out_¥og
;

698 
	`bpf_ßve_föfo
(
fûe_fd
);

700 
	`‰ì
(
£c_d⁄e
);

702 
	`ñf_íd
(
ñf_fd
);

703 
	`˛o£
(
fûe_fd
);

705  
¥og_fd
;

707 
out_¥og
:

708 
	`˛o£
(
¥og_fd
);

709 
out_m≠s
:

710 
	`bpf_m≠s_de°roy
();

711 
	`‰ì
(
£c_d⁄e
);

712 
out_ñf
:

713 
	`ñf_íd
(
ñf_fd
);

714 
out
:

715 
	`˛o£
(
fûe_fd
);

716 
	`bpf_˛ór_föfo
();

717  
¥og_fd
;

718 
	}
}

721 
	$bpf_m≠_£t_£nd
(
fd
, 
sockaddr_un
 *
addr
, 
addr_Àn
,

722 c⁄° 
bpf_m≠_d©a
 *
aux
, 
íåõs
)

724 
bpf_m≠_£t_msg
 
msg
;

725 *
cmsg_buf
, 
mö_fd
;

726 *
amsg_buf
;

727 
i
;

729 
	`mem£t
(&
msg
, 0, (msg));

731 
msg
.
aux
.
uds_vî
 = 
BPF_SCM_AUX_VER
;

732 
msg
.
aux
.
num_ít
 = 
íåõs
;

734 
	`°∫˝y
(
msg
.
aux
.
obj_«me
,áux->
obj
, (msg.aux.obj_name));

735 
	`mem˝y
(&
msg
.
aux
.
obj_°
,áux->
°
, (msg.aux.obj_st));

737 
cmsg_buf
 = 
	`bpf_m≠_£t_öô
(&
msg
, 
addr
, 
addr_Àn
);

738 
amsg_buf
 = (*)
msg
.
aux
.
ít
;

740 
i
 = 0; i < 
íåõs
; i +
mö_fd
) {

741 
ªt
;

743 
mö_fd
 = 
	`mö
(
BPF_SCM_MAX_FDS
 * 1U, 
íåõs
 - 
i
);

744 
	`bpf_m≠_£t_öô_sögÀ
(&
msg
, 
mö_fd
);

746 
	`mem˝y
(
cmsg_buf
, &
aux
->
fds
[
i
], ◊ux->fds[0]Ë* 
mö_fd
);

747 
	`mem˝y
(
amsg_buf
, &
aux
->
ít
[
i
], ◊ux->ít[0]Ë* 
mö_fd
);

749 
ªt
 = 
	`£ndmsg
(
fd
, &
msg
.
hdr
, 0);

750 i‡(
ªt
 <= 0)

751  
ªt
 ? : -1;

755 
	}
}

758 
	$bpf_m≠_£t_ªcv
(
fd
, *
fds
, 
bpf_m≠_aux
 *
aux
,

759 
íåõs
)

761 
bpf_m≠_£t_msg
 
msg
;

762 *
cmsg_buf
, 
mö_fd
;

763 *
amsg_buf
, *
mmsg_buf
;

764 
√eded
 = 1;

765 
i
;

767 
cmsg_buf
 = 
	`bpf_m≠_£t_öô
(&
msg
, 
NULL
, 0);

768 
amsg_buf
 = (*)
msg
.
aux
.
ít
;

769 
mmsg_buf
 = (*)&
msg
.
aux
;

771 
i
 = 0; i < 
	`mö
(
íåõs
, 
√eded
); i +
mö_fd
) {

772 
cmsghdr
 *
cmsg
;

773 
ªt
;

775 
mö_fd
 = 
	`mö
(
íåõs
,É¡rõ†- 
i
);

776 
	`bpf_m≠_£t_öô_sögÀ
(&
msg
, 
mö_fd
);

778 
ªt
 = 
	`ªcvmsg
(
fd
, &
msg
.
hdr
, 0);

779 i‡(
ªt
 <= 0)

780  
ªt
 ? : -1;

782 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
.
hdr
);

783 i‡(!
cmsg
 || cmsg->
cmsg_ty≥
 !
SCM_RIGHTS
)

784  -
EINVAL
;

785 i‡(
msg
.
hdr
.
msg_Êags
 & 
MSG_CTRUNC
)

786  -
EIO
;

787 i‡(
msg
.
aux
.
uds_vî
 !
BPF_SCM_AUX_VER
)

788  -
ENOSYS
;

790 
mö_fd
 = (
cmsg
->
cmsg_Àn
 - (*cmsg)Ë/ (
fd
);

791 i‡(
mö_fd
 > 
íåõs
 || min_fd <= 0)

792  -
EINVAL
;

794 
	`mem˝y
(&
fds
[
i
], 
cmsg_buf
, (fds[0]Ë* 
mö_fd
);

795 
	`mem˝y
(&
aux
->
ít
[
i
], 
amsg_buf
, ◊ux->ít[0]Ë* 
mö_fd
);

796 
	`mem˝y
(
aux
, 
mmsg_buf
, 
	`off£tof
(
bpf_m≠_aux
, 
ít
));

798 
√eded
 = 
aux
->
num_ít
;

802 
	}
}

804 
	$bpf_£nd_m≠_fds
(c⁄° *
∑th
, c⁄° *
obj
)

806 
sockaddr_un
 
addr
;

807 
bpf_m≠_d©a
 
bpf_aux
;

808 
fd
, 
ªt
;

810 
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_DGRAM
, 0);

811 i‡(
fd
 < 0) {

812 
	`Ârötf
(
°dîr
, "Cannot open socket: %s\n",

813 
	`°ªº‹
(
î∫o
));

817 
	`mem£t
(&
addr
, 0, (addr));

818 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

819 
	`°∫˝y
(
addr
.
sun_∑th
, 
∑th
, (addr.sun_path));

821 
ªt
 = 
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, (addr));

822 i‡(
ªt
 < 0) {

823 
	`Ârötf
(
°dîr
, "Cannot connectÅo %s: %s\n",

824 
∑th
, 
	`°ªº‹
(
î∫o
));

828 
	`mem£t
(&
bpf_aux
, 0, (bpf_aux));

830 
bpf_aux
.
fds
 = 
m≠_fds
;

831 
bpf_aux
.
ít
 = 
m≠_ít
;

833 
bpf_aux
.
obj
 = obj;

834 
bpf_aux
.
°
 = &
bpf_°
;

836 
ªt
 = 
	`bpf_m≠_£t_£nd
(
fd
, &
addr
, ◊ddr), &
bpf_aux
,

837 
	`bpf_m≠s_cou¡
());

838 i‡(
ªt
 < 0)

839 
	`Ârötf
(
°dîr
, "Cannot send fdsÅo %s: %s\n",

840 
∑th
, 
	`°ªº‹
(
î∫o
));

842 
	`˛o£
(
fd
);

843  
ªt
;

844 
	}
}

846 
	$bpf_ªcv_m≠_fds
(c⁄° *
∑th
, *
fds
, 
bpf_m≠_aux
 *
aux
,

847 
íåõs
)

849 
sockaddr_un
 
addr
;

850 
fd
, 
ªt
;

852 
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_DGRAM
, 0);

853 i‡(
fd
 < 0) {

854 
	`Ârötf
(
°dîr
, "Cannot open socket: %s\n",

855 
	`°ªº‹
(
î∫o
));

859 
	`mem£t
(&
addr
, 0, (addr));

860 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

861 
	`°∫˝y
(
addr
.
sun_∑th
, 
∑th
, (addr.sun_path));

863 
ªt
 = 
	`böd
(
fd
, (
sockaddr
 *)&
addr
, (addr));

864 i‡(
ªt
 < 0) {

865 
	`Ârötf
(
°dîr
, "Cannot bindÅo socket: %s\n",

866 
	`°ªº‹
(
î∫o
));

870 
ªt
 = 
	`bpf_m≠_£t_ªcv
(
fd
, 
fds
, 
aux
, 
íåõs
);

871 i‡(
ªt
 < 0)

872 
	`Ârötf
(
°dîr
, "CannotÑecv fds from %s: %s\n",

873 
∑th
, 
	`°ªº‹
(
î∫o
));

875 
	`u∆ök
(
addr
.
sun_∑th
);

876 
	`˛o£
(
fd
);

877  
ªt
;

878 
	}
}

	@tc/tc_bpf.h

13 #i‚de‡
_TC_BPF_H_


14 
	#_TC_BPF_H_
 1

	)

16 
	~<löux/fûãr.h
>

17 
	~<löux/√éök.h
>

18 
	~<löux/π√éök.h
>

19 
	~<löux/bpf.h
>

20 
	~<sys/sysˇŒ.h
>

21 
	~<î∫o.h
>

22 
	~<°dio.h
>

23 
	~<°döt.h
>

25 
	~"utûs.h
"

26 
	~"bpf_scm.h
"

28 
	#BPF_ENV_UDS
 "TC_BPF_UDS"

	)

30 
bpf_∑r£_°rög
(*
¨g
, 
boﬁ
 
‰om_fûe
, 
__u16
 *
bpf_Àn
,

31 **
bpf_°rög
, 
boﬁ
 *
√ed_ªÀa£
,

32 c⁄° 
£∑øt‹
);

33 
bpf_∑r£_›s
(
¨gc
, **
¨gv
, 
sock_fûãr
 *
bpf_›s
,

34 
boﬁ
 
‰om_fûe
);

35 
bpf_¥öt_›s
(
FILE
 *
f
, 
π©å
 *
bpf_›s
, 
__u16
 
Àn
);

37 c⁄° *
bpf_deÁu…_£˘i⁄
(c⁄° 
bpf_¥og_ty≥
 
ty≥
);

39 #ifde‡
HAVE_ELF


40 
bpf_›í_obje˘
(c⁄° *
∑th
, 
bpf_¥og_ty≥
 
ty≥
,

41 c⁄° *
£c
, 
boﬁ
 
vîbo£
);

43 
bpf_£nd_m≠_fds
(c⁄° *
∑th
, c⁄° *
obj
);

44 
bpf_ªcv_m≠_fds
(c⁄° *
∑th
, *
fds
, 
bpf_m≠_aux
 *
aux
,

45 
íåõs
);

47 
ölöe
 
__u64
 
	$bpf_±r_to_u64
(c⁄° *
±r
)

49  (
__u64
Ë(Ë
±r
;

50 
	}
}

52 
ölöe
 
	$bpf
(
cmd
, 
bpf_©å
 *
©å
, 
size
)

54 #ifde‡
__NR_bpf


55  
	`sysˇŒ
(
__NR_bpf
, 
cmd
, 
©å
, 
size
);

57 
	`Ârötf
(
°dîr
, "No bpf syscall, kernel headersÅoo old?\n");

58 
î∫o
 = 
ENOSYS
;

61 
	}
}

63 
ölöe
 
	$bpf_›í_obje˘
(c⁄° *
∑th
, 
bpf_¥og_ty≥
 
ty≥
,

64 c⁄° *
£c
, 
boﬁ
 
vîbo£
)

66 
	`Ârötf
(
°dîr
, "No ELFÜibrary support compiled in.\n");

67 
î∫o
 = 
ENOSYS
;

69 
	}
}

71 
ölöe
 
	$bpf_£nd_m≠_fds
(c⁄° *
∑th
, c⁄° *
obj
)

74 
	}
}

76 
ölöe
 
	$bpf_ªcv_m≠_fds
(c⁄° *
∑th
, *
fds
,

77 
bpf_m≠_aux
 *
aux
,

78 
íåõs
)

81 
	}
}

	@tc/tc_cbq.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<m©h.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~"tc_c‹e.h
"

25 
	~"tc_cbq.h
"

27 
	$tc_cbq_ˇlc_maxidÀ
(
bndw
, 
øã
, 
avpkt
,

28 
ewma_log
, 
maxbur°
)

30 
maxidÀ
;

31 
g
 = 1.0 - 1.0/(1<<
ewma_log
);

32 
xmt
 = ()
avpkt
/
bndw
;

34 
maxidÀ
 = 
xmt
*(1-
g
);

35 i‡(
bndw
 !
øã
 && 
maxbur°
) {

36 
vxmt
 = ()
avpkt
/
øã
 - 
xmt
;

37 
vxmt
 *(
	`pow
(
g
, -()
maxbur°
) - 1);

38 i‡(
vxmt
 > 
maxidÀ
)

39 
maxidÀ
 = 
vxmt
;

41  
	`tc_c‹e_time2tick
(
maxidÀ
*(1<<
ewma_log
)*
TIME_UNITS_PER_SEC
);

42 
	}
}

44 
	$tc_cbq_ˇlc_of·ime
(
bndw
, 
øã
, 
avpkt
,

45 
ewma_log
, 
möbur°
)

47 
g
 = 1.0 - 1.0/(1<<
ewma_log
);

48 
of·ime
 = ()
avpkt
/
øã
 - (Ôvpkt/
bndw
;

50 i‡(
möbur°
 == 0)

52 i‡(
möbur°
 == 1)

53 
of·ime
 *
	`pow
(
g
, -()
möbur°
) - 1;

55 
of·ime
 *1 + (
	`pow
(
g
, -()(
möbur°
-1)) - 1)/(1-g);

56  
	`tc_c‹e_time2tick
(
of·ime
*
TIME_UNITS_PER_SEC
);

57 
	}
}

	@tc/tc_cbq.h

1 #i‚de‡
_TC_CBQ_H_


2 
	#_TC_CBQ_H_
 1

	)

4 
tc_cbq_ˇlc_maxidÀ
(
bndw
, 
øã
, 
avpkt
,

5 
ewma_log
, 
maxbur°
);

6 
tc_cbq_ˇlc_of·ime
(
bndw
, 
øã
, 
avpkt
,

7 
ewma_log
, 
möbur°
);

	@tc/tc_class.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<m©h.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~"tc_comm⁄.h
"

27 
	~"hli°.h
"

29 
	sgøph_node
 {

30 
hli°_node
 
	mhli°
;

31 
__u32
 
	mid
;

32 
__u32
 
	m∑ª¡_id
;

33 
gøph_node
 *
	m∑ª¡_node
;

34 
gøph_node
 *
	mright_node
;

35 *
	md©a
;

36 
	md©a_Àn
;

37 
	mnodes_cou¡
;

40 
hli°_hód
 
	g˛s_li°
 = {};

41 
hli°_hód
 
	groŸ_˛s_li°
 = {};

43 
ußge
();

45 
	$ußge
()

47 
	`Ârötf
(
°dîr
, "Usage:Åc class [ádd | del | change |Ñeplace | show ] dev STRING\n");

48 
	`Ârötf
(
°dîr
, " [ classid CLASSID ] [Ñoot |Öarent CLASSID ]\n");

49 
	`Ârötf
(
°dîr
, " [ [ QDISC_KIND ] [ help | OPTIONS ] ]\n");

50 
	`Ârötf
(
°dîr
, "\n");

51 
	`Ârötf
(
°dîr
, "Åc class show [ dev STRING ] [Ñoot |Öarent CLASSID ]\n");

52 
	`Ârötf
(
°dîr
, "Where:\n");

53 
	`Ârötf
(
°dîr
, "QDISC_KIND := {Örio | cbq |Étc. }\n");

54 
	`Ârötf
(
°dîr
, "OPTIONS := ...ÅryÅc classádd <desired QDISC_KIND> help\n");

56 
	}
}

58 
	$tc_˛ass_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

61 
∆msghdr
 
n
;

62 
tcmsg
 
t
;

63 
buf
[4096];

64 } 
ªq
;

65 
qdisc_utû
 *
q
 = 
NULL
;

66 
tc_e°im©‹
 
e°
;

67 
d
[16];

68 
k
[16];

70 
	`mem£t
(&
ªq
, 0, (req));

71 
	`mem£t
(&
e°
, 0, (est));

72 
	`mem£t
(
d
, 0, (d));

73 
	`mem£t
(
k
, 0, (k));

75 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tcmsg
));

76 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

77 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

78 
ªq
.
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

80 
¨gc
 > 0) {

81 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

82 
	`NEXT_ARG
();

83 i‡(
d
[0])

84 
	`du∑rg
("dev", *
¨gv
);

85 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

86 } i‡(
	`°rcmp
(*
¨gv
, "classid") == 0) {

87 
__u32
 
h™dÀ
;

88 
	`NEXT_ARG
();

89 i‡(
ªq
.
t
.
tcm_h™dÀ
)

90 
	`du∑rg
("˛assid", *
¨gv
);

91 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

92 
	`öv¨g
("övÆid cœs†ID", *
¨gv
);

93 
ªq
.
t
.
tcm_h™dÀ
 = 
h™dÀ
;

94 } i‡(
	`°rcmp
(*
¨gv
, "handle") == 0) {

95 
	`Ârötf
(
°dîr
, "Error:Åry \"classid\" instead of \"handle\"\n");

97 } i‡(
	`°rcmp
(*
¨gv
, "root") == 0) {

98 i‡(
ªq
.
t
.
tcm_∑ª¡
) {

99 
	`Ârötf
(
°dîr
, "Error: \"root\" is duplicateÖarent ID.\n");

102 
ªq
.
t
.
tcm_∑ª¡
 = 
TC_H_ROOT
;

103 } i‡(
	`°rcmp
(*
¨gv
, "parent") == 0) {

104 
__u32
 
h™dÀ
;

105 
	`NEXT_ARG
();

106 i‡(
ªq
.
t
.
tcm_∑ª¡
)

107 
	`du∑rg
("∑ª¡", *
¨gv
);

108 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

109 
	`öv¨g
("övÆidÖ¨íàID", *
¨gv
);

110 
ªq
.
t
.
tcm_∑ª¡
 = 
h™dÀ
;

111 } i‡(
	`m©ches
(*
¨gv
, "estimator") == 0) {

112 i‡(
	`∑r£_e°im©‹
(&
¨gc
, &
¨gv
, &
e°
))

114 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

115 
	`ußge
();

117 
	`°∫˝y
(
k
, *
¨gv
, (k)-1);

119 
q
 = 
	`gë_qdisc_köd
(
k
);

120 
¨gc
--; 
¨gv
++;

123 
¨gc
--; 
¨gv
++;

126 i‡(
k
[0])

127 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_KIND
, 
k
, 
	`°æí
(k)+1);

128 i‡(
e°
.
ewma_log
)

129 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_RATE
, &
e°
, (est));

131 i‡(
q
) {

132 i‡(
q
->
∑r£_c›t
 =
NULL
) {

133 
	`Ârötf
(
°dîr
, "Eº‹: Qdis¯\"%s\" i†˛as¶ess.\n", 
k
);

136 i‡(
q
->
	`∑r£_c›t
(q, 
¨gc
, 
¨gv
, &
ªq
.
n
))

139 i‡(
¨gc
) {

140 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

141 
	`ußge
();

142 
	`Ârötf
(
°dîr
, "G¨bagêö°ód o‡¨gumít†\"%†...\". Try \"t¯˛as†hñp\".", *
¨gv
);

147 i‡(
d
[0]) {

148 
	`Œ_öô_m≠
(&
πh
);

150 i‡((
ªq
.
t
.
tcm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

151 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

156 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

160 
	}
}

162 
	gfûãr_ifödex
;

163 
__u32
 
	gfûãr_qdisc
;

164 
__u32
 
	gfûãr_˛assid
;

166 
	$gøph_node_add
(
__u32
 
∑ª¡_id
, __u32 
id
, *
d©a
,

167 
Àn
)

169 
gøph_node
 *
node
 = 
	`mÆloc
((graph_node));

171 
	`mem£t
(
node
, 0, (*node));

172 
node
->
id
 = id;

173 
node
->
∑ª¡_id
 =Öarent_id;

175 i‡(
d©a
 && 
Àn
) {

176 
node
->
d©a
 = 
	`mÆloc
(
Àn
);

177 
node
->
d©a_Àn
 = 
Àn
;

178 
	`mem˝y
(
node
->
d©a
, d©a, 
Àn
);

181 i‡(
∑ª¡_id
 =
TC_H_ROOT
)

182 
	`hli°_add_hód
(&
node
->
hli°
, &
roŸ_˛s_li°
);

184 
	`hli°_add_hód
(&
node
->
hli°
, &
˛s_li°
);

185 
	}
}

187 
	$gøph_ödít
(*
buf
, 
gøph_node
 *
node
, 
is_√wlöe
,

188 
add_•a˚s
)

190 
•a˚s
[100] = {0};

192 
node
 &&Çode->
∑ª¡_node
) {

193 
node
->
∑ª¡_node
->
right_node
 =Çode;

194 
node
 =Çode->
∑ª¡_node
;

196 
node
 &&Çode->
right_node
) {

197 i‡(
node
->
hli°
.
√xt
)

198 
	`°rˇt
(
buf
, "| ");

200 
	`°rˇt
(
buf
, " ");

202 
node
 =Çode->
right_node
;

205 i‡(
is_√wlöe
) {

206 i‡(
node
->
hli°
.
√xt
 &&Çode->
nodes_cou¡
)

207 
	`°rˇt
(
buf
, "| |");

208 i‡(
node
->
hli°
.
√xt
)

209 
	`°rˇt
(
buf
, "| ");

210 i‡(
node
->
nodes_cou¡
)

211 
	`°rˇt
(
buf
, " |");

212 i‡(!
node
->
hli°
.
√xt
)

213 
	`°rˇt
(
buf
, " ");

215 i‡(
add_•a˚s
 > 0) {

216 
	`•rötf
(
•a˚s
, "%-*s", 
add_•a˚s
, "");

217 
	`°rˇt
(
buf
, 
•a˚s
);

219 
	}
}

221 
	$gøph_˛s_show
(
FILE
 *
Â
, *
buf
, 
hli°_hód
 *
roŸ_li°
,

222 
Àvñ
)

224 
hli°_node
 *
n
, *
tmp_˛s
;

225 
˛s_id_°r
[256] = {};

226 
π©å
 *
tb
[
TCA_MAX
 + 1] = {};

227 
qdisc_utû
 *
q
;

228 
°r
[100] = {};

230 
	`hli°_f‹_óch_ß„
(
n
, 
tmp_˛s
, 
roŸ_li°
) {

231 
hli°_node
 *
c
, *
tmp_chld
;

232 
hli°_hód
 
chûdªn
 = {};

233 
gøph_node
 *
˛s
 = 
	`c⁄èöî_of
(
n
, graph_node,

234 
hli°
);

236 
	`hli°_f‹_óch_ß„
(
c
, 
tmp_chld
, &
˛s_li°
) {

237 
gøph_node
 *
chûd
 = 
	`c⁄èöî_of
(
c
,

238 
gøph_node
, 
hli°
);

240 i‡(
˛s
->
id
 =
chûd
->
∑ª¡_id
) {

241 
	`hli°_dñ
(
c
);

242 
	`hli°_add_hód
(
c
, &
chûdªn
);

243 
˛s
->
nodes_cou¡
++;

244 
chûd
->
∑ª¡_node
 = 
˛s
;

248 
	`gøph_ödít
(
buf
, 
˛s
, 0, 0);

250 
	`¥öt_tc_˛assid
(
˛s_id_°r
, (˛s_id_°r), 
˛s
->
id
);

251 
	`•rötf
(
°r
, "+---(%s)", 
˛s_id_°r
);

252 
	`°rˇt
(
buf
, 
°r
);

254 
	`∑r£_π©å
(
tb
, 
TCA_MAX
, (
π©å
 *)
˛s
->
d©a
,

255 
˛s
->
d©a_Àn
);

257 i‡(
tb
[
TCA_KIND
] =
NULL
) {

258 
	`°rˇt
(
buf
, " [unknown qdisc kind] ");

260 c⁄° *
köd
 = 
	`πa_gë©å_°r
(
tb
[
TCA_KIND
]);

262 
	`•rötf
(
°r
, " %†", 
köd
);

263 
	`°rˇt
(
buf
, 
°r
);

264 
	`Ârötf
(
Â
, "%s", 
buf
);

265 
buf
[0] = '\0';

267 
q
 = 
	`gë_qdisc_köd
(
köd
);

268 i‡(
q
 && q->
¥öt_c›t
) {

269 
q
->
	`¥öt_c›t
(q, 
Â
, 
tb
[
TCA_OPTIONS
]);

271 i‡(
q
 && 
show_°©s
) {

272 
˛s_ödít
 = 
	`°æí
(
q
->
id
) - 2 +

273 
	`°æí
(
˛s_id_°r
);

274 
π©å
 *
°©s
 = 
NULL
;

276 
	`gøph_ödít
(
buf
, 
˛s
, 1, 
˛s_ödít
);

278 i‡(
tb
[
TCA_STATS
] ||Åb[
TCA_STATS2
]) {

279 
	`Ârötf
(
Â
, "\n");

280 
	`¥öt_tc°©s_©å
(
Â
, 
tb
, 
buf
, &
°©s
);

281 
buf
[0] = '\0';

283 i‡(
˛s
->
hli°
.
√xt
 || cls->
nodes_cou¡
) {

284 
	`°rˇt
(
buf
, "\n");

285 
	`gøph_ödít
(
buf
, 
˛s
, 1, 0);

289 
	`‰ì
(
˛s
->
d©a
);

290 
	`Ârötf
(
Â
, "%s\n", 
buf
);

291 
buf
[0] = '\0';

293 
	`gøph_˛s_show
(
Â
, 
buf
, &
chûdªn
, 
Àvñ
 + 1);

294 i‡(!
˛s
->
hli°
.
√xt
) {

295 
	`gøph_ödít
(
buf
, 
˛s
, 0, 0);

296 
	`°rˇt
(
buf
, "\n");

299 
	`Ârötf
(
Â
, "%s", 
buf
);

300 
buf
[0] = '\0';

301 
	`‰ì
(
˛s
);

303 
	}
}

305 
	$¥öt_˛ass
(c⁄° 
sockaddr_∆
 *
who
,

306 
∆msghdr
 *
n
, *
¨g
)

308 
FILE
 *
Â
 = (FILE*)
¨g
;

309 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

310 
Àn
 = 
n
->
∆msg_Àn
;

311 
π©å
 *
tb
[
TCA_MAX
 + 1] = {};

312 
qdisc_utû
 *
q
;

313 
abuf
[256];

315 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWTCLASS
 &&Ç->∆msg_ty≥ !
RTM_DELTCLASS
) {

316 
	`Ârötf
(
°dîr
, "Notá class\n");

319 
Àn
 -
	`NLMSG_LENGTH
((*
t
));

320 i‡(
Àn
 < 0) {

321 
	`Ârötf
(
°dîr
, "Wr⁄gÜí %d\n", 
Àn
);

325 i‡(
show_gøph
) {

326 
	`gøph_node_add
(
t
->
tcm_∑ª¡
,Å->
tcm_h™dÀ
, 
	`TCA_RTA
—), 
Àn
);

330 i‡(
fûãr_qdisc
 && 
	`TC_H_MAJ
(
t
->
tcm_h™dÀ
^filter_qdisc))

333 i‡(
fûãr_˛assid
 && 
t
->
tcm_h™dÀ
 != filter_classid)

336 
	`∑r£_π©å
(
tb
, 
TCA_MAX
, 
	`TCA_RTA
(
t
), 
Àn
);

338 i‡(
tb
[
TCA_KIND
] =
NULL
) {

339 
	`Ârötf
(
°dîr
, "print_class: NULL kind\n");

343 i‡(
n
->
∆msg_ty≥
 =
RTM_DELTCLASS
)

344 
	`Ârötf
(
Â
, "deleted ");

346 
abuf
[0] = 0;

347 i‡(
t
->
tcm_h™dÀ
) {

348 i‡(
fûãr_qdisc
)

349 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
	`TC_H_MIN
(
t
->
tcm_h™dÀ
));

351 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
t
->
tcm_h™dÀ
);

353 
	`Ârötf
(
Â
, "˛as†%†%†", 
	`πa_gë©å_°r
(
tb
[
TCA_KIND
]), 
abuf
);

355 i‡(
fûãr_ifödex
 == 0)

356 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
t
->
tcm_ifödex
));

358 i‡(
t
->
tcm_∑ª¡
 =
TC_H_ROOT
)

359 
	`Ârötf
(
Â
, "root ");

361 i‡(
fûãr_qdisc
)

362 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
	`TC_H_MIN
(
t
->
tcm_∑ª¡
));

364 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
t
->
tcm_∑ª¡
);

365 
	`Ârötf
(
Â
, "∑ª¡ %†", 
abuf
);

367 i‡(
t
->
tcm_öfo
)

368 
	`Ârötf
(
Â
, "Àa‡%x: ", 
t
->
tcm_öfo
>>16);

369 
q
 = 
	`gë_qdisc_köd
(
	`RTA_DATA
(
tb
[
TCA_KIND
]));

370 i‡(
tb
[
TCA_OPTIONS
]) {

371 i‡(
q
 && q->
¥öt_c›t
)

372 
q
->
	`¥öt_c›t
(q, 
Â
, 
tb
[
TCA_OPTIONS
]);

374 
	`Ârötf
(
Â
, "[cannotÖarse classÖarameters]");

376 
	`Ârötf
(
Â
, "\n");

377 i‡(
show_°©s
) {

378 
π©å
 *
x°©s
 = 
NULL
;

380 i‡(
tb
[
TCA_STATS
] ||Åb[
TCA_STATS2
]) {

381 
	`¥öt_tc°©s_©å
(
Â
, 
tb
, " ", &
x°©s
);

382 
	`Ârötf
(
Â
, "\n");

384 i‡(
q
 && (
x°©s
 || 
tb
[
TCA_XSTATS
]Ë&& q->
¥öt_x°©s
) {

385 
q
->
	`¥öt_x°©s
(q, 
Â
, 
x°©s
 ? : 
tb
[
TCA_XSTATS
]);

386 
	`Ârötf
(
Â
, "\n");

389 
	`fÊush
(
Â
);

391 
	}
}

394 
	$tc_˛ass_li°
(
¨gc
, **
¨gv
)

396 
tcmsg
 
t
;

397 
d
[16];

398 
buf
[1024] = {0};

400 
	`mem£t
(&
t
, 0, (t));

401 
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

402 
	`mem£t
(
d
, 0, (d));

404 
fûãr_qdisc
 = 0;

405 
fûãr_˛assid
 = 0;

407 
¨gc
 > 0) {

408 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

409 
	`NEXT_ARG
();

410 i‡(
d
[0])

411 
	`du∑rg
("dev", *
¨gv
);

412 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

413 } i‡(
	`°rcmp
(*
¨gv
, "qdisc") == 0) {

414 
	`NEXT_ARG
();

415 i‡(
fûãr_qdisc
)

416 
	`du∑rg
("qdisc", *
¨gv
);

417 i‡(
	`gë_qdisc_h™dÀ
(&
fûãr_qdisc
, *
¨gv
))

418 
	`öv¨g
("övÆid qdis¯ID", *
¨gv
);

419 } i‡(
	`°rcmp
(*
¨gv
, "classid") == 0) {

420 
	`NEXT_ARG
();

421 i‡(
fûãr_˛assid
)

422 
	`du∑rg
("˛assid", *
¨gv
);

423 i‡(
	`gë_tc_˛assid
(&
fûãr_˛assid
, *
¨gv
))

424 
	`öv¨g
("övÆid cœs†ID", *
¨gv
);

425 } i‡(
	`°rcmp
(*
¨gv
, "root") == 0) {

426 i‡(
t
.
tcm_∑ª¡
) {

427 
	`Ârötf
(
°dîr
, "Error: \"root\" is duplicateÖarent ID\n");

430 
t
.
tcm_∑ª¡
 = 
TC_H_ROOT
;

431 } i‡(
	`°rcmp
(*
¨gv
, "parent") == 0) {

432 
__u32
 
h™dÀ
;

433 i‡(
t
.
tcm_∑ª¡
)

434 
	`du∑rg
("∑ª¡", *
¨gv
);

435 
	`NEXT_ARG
();

436 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

437 
	`öv¨g
("övÆidÖ¨íàID", *
¨gv
);

438 
t
.
tcm_∑ª¡
 = 
h™dÀ
;

439 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

440 
	`ußge
();

442 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"? Try \"t¯˛as†hñp\".\n", *
¨gv
);

446 
¨gc
--; 
¨gv
++;

449 
	`Œ_öô_m≠
(&
πh
);

451 i‡(
d
[0]) {

452 i‡((
t
.
tcm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

453 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

456 
fûãr_ifödex
 = 
t
.
tcm_ifödex
;

459 i‡(
	`π∆_dump_ªque°
(&
πh
, 
RTM_GETTCLASS
, &
t
, (t)) < 0) {

460 
	`≥º‹
("Cannot send dumpÑequest");

464 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_˛ass
, 
°dout
) < 0) {

465 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

469 i‡(
show_gøph
)

470 
	`gøph_˛s_show
(
°dout
, &
buf
[0], &
roŸ_˛s_li°
, 0);

473 
	}
}

475 
	$do_˛ass
(
¨gc
, **
¨gv
)

477 i‡(
¨gc
 < 1)

478  
	`tc_˛ass_li°
(0, 
NULL
);

479 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

480  
	`tc_˛ass_modify
(
RTM_NEWTCLASS
, 
NLM_F_EXCL
|
NLM_F_CREATE
, 
¨gc
-1, 
¨gv
+1);

481 i‡(
	`m©ches
(*
¨gv
, "change") == 0)

482  
	`tc_˛ass_modify
(
RTM_NEWTCLASS
, 0, 
¨gc
-1, 
¨gv
+1);

483 i‡(
	`m©ches
(*
¨gv
, "replace") == 0)

484  
	`tc_˛ass_modify
(
RTM_NEWTCLASS
, 
NLM_F_CREATE
, 
¨gc
-1, 
¨gv
+1);

485 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

486  
	`tc_˛ass_modify
(
RTM_DELTCLASS
, 0, 
¨gc
-1, 
¨gv
+1);

488 i‡(
	`m©ches
(*
¨gv
, "get") == 0)

489  
	`tc_˛ass_gë
(
RTM_GETTCLASS
, 0, 
¨gc
-1, 
¨gv
+1);

491 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

492 || 
	`m©ches
(*
¨gv
, "lst") == 0)

493  
	`tc_˛ass_li°
(
¨gc
-1, 
¨gv
+1);

494 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

495 
	`ußge
();

498 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"t¯˛as†hñp\".\n", *
¨gv
);

500 
	}
}

	@tc/tc_common.h

2 
	#TCA_BUF_MAX
 (64*1024)

	)

4 
π∆_h™dÀ
 
πh
;

6 
do_qdisc
(
¨gc
, **
¨gv
);

7 
do_˛ass
(
¨gc
, **
¨gv
);

8 
do_fûãr
(
¨gc
, **
¨gv
);

9 
do_a˘i⁄
(
¨gc
, **
¨gv
);

10 
do_tcm⁄ô‹
(
¨gc
, **
¨gv
);

11 
do_exec
(
¨gc
, **
¨gv
);

13 
¥öt_a˘i⁄
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
);

14 
¥öt_fûãr
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
);

15 
¥öt_qdisc
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
);

16 
¥öt_˛ass
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
);

17 
¥öt_size_èbÀ
(
FILE
 *
Â
, c⁄° *
¥efix
, 
π©å
 *
πa
);

19 
	gtc_e°im©‹
;

20 
∑r£_e°im©‹
(*
p_¨gc
, ***
p_¨gv
, 
tc_e°im©‹
 *
e°
);

22 
	gtc_size•ec
;

23 
∑r£_size_èbÀ
(*
p_¨gc
, ***
p_¨gv
, 
tc_size•ec
 *
s
);

24 
check_size_èbÀ_›ts
(
tc_size•ec
 *
s
);

26 
show_gøph
;

27 
boﬁ
 
u£_«mes
;

	@tc/tc_core.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<m©h.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~"tc_c‹e.h
"

25 
	~<löux/©m.h
>

27 
	gtick_ö_u£c
 = 1;

28 
	g˛ock_Á˘‹
 = 1;

30 
	$tc_c‹e_time2big
(
time
)

32 
__u64
 
t
 = 
time
;

34 
t
 *
tick_ö_u£c
;

35  (
t
 >> 32) != 0;

36 
	}
}

39 
	$tc_c‹e_time2tick
(
time
)

41  
time
*
tick_ö_u£c
;

42 
	}
}

44 
	$tc_c‹e_tick2time
(
tick
)

46  
tick
/
tick_ö_u£c
;

47 
	}
}

49 
	$tc_c‹e_time2ktime
(
time
)

51  
time
 * 
˛ock_Á˘‹
;

52 
	}
}

54 
	$tc_c‹e_ktime2time
(
ktime
)

56  
ktime
 / 
˛ock_Á˘‹
;

57 
	}
}

59 
	$tc_ˇlc_xmôtime
(
__u64
 
øã
, 
size
)

61  
	`tc_c‹e_time2tick
(
TIME_UNITS_PER_SEC
*(()
size
/()
øã
));

62 
	}
}

64 
	$tc_ˇlc_xmôsize
(
__u64
 
øã
, 
ticks
)

66  (()
øã
*
	`tc_c‹e_tick2time
(
ticks
))/
TIME_UNITS_PER_SEC
;

67 
	}
}

79 
	$tc_Æign_to_©m
(
size
)

81 
löksize
, 
˚Œs
;

82 
˚Œs
 = 
size
 / 
ATM_CELL_PAYLOAD
;

83 i‡((
size
 % 
ATM_CELL_PAYLOAD
) > 0)

84 
˚Œs
++;

86 
löksize
 = 
˚Œs
 * 
ATM_CELL_SIZE
;

87  
löksize
;

88 
	}
}

90 
	$tc_adju°_size
(
sz
, 
mpu
, 
lök_œyî
 
lökœyî
)

92 i‡(
sz
 < 
mpu
)

93 
sz
 = 
mpu
;

95 
lökœyî
) {

96 
LINKLAYER_ATM
:

97  
	`tc_Æign_to_©m
(
sz
);

98 
LINKLAYER_ETHERNET
:

101  
sz
;

103 
	}
}

124 
	$tc_ˇlc_πabÀ
(
tc_øã•ec
 *
r
, 
__u32
 *
πab
,

125 
˚Œ_log
, 
mtu
,

126 
lök_œyî
 
lökœyî
)

128 
i
;

129 
sz
;

130 
bps
 = 
r
->
øã
;

131 
mpu
 = 
r
->mpu;

133 i‡(
mtu
 == 0)

134 
mtu
 = 2047;

136 i‡(
˚Œ_log
 < 0) {

137 
˚Œ_log
 = 0;

138 (
mtu
 >> 
˚Œ_log
) > 255)

139 
˚Œ_log
++;

142 
i
=0; i<256; i++) {

143 
sz
 = 
	`tc_adju°_size
((
i
 + 1Ë<< 
˚Œ_log
, 
mpu
, 
lökœyî
);

144 
πab
[
i
] = 
	`tc_ˇlc_xmôtime
(
bps
, 
sz
);

147 
r
->
˚Œ_Æign
=-1;

148 
r
->
˚Œ_log
=cell_log;

149 
r
->
lökœyî
 = (lökœyî & 
TC_LINKLAYER_MASK
);

150  
˚Œ_log
;

151 
	}
}

157 
	$tc_ˇlc_size_èbÀ
(
tc_size•ec
 *
s
, 
__u16
 **
°ab
)

159 
i
;

160 
lök_œyî
 
lökœyî
 = 
s
->linklayer;

161 
sz
;

163 i‡(
lökœyî
 <
LINKLAYER_ETHERNET
 && 
s
->
mpu
 == 0) {

165 
s
->
mtu
 = 0;

166 
s
->
tsize
 = 0;

167 
s
->
˚Œ_log
 = 0;

168 
s
->
˚Œ_Æign
 = 0;

169 *
°ab
 = 
NULL
;

173 i‡(
s
->
mtu
 == 0)

174 
s
->
mtu
 = 2047;

175 i‡(
s
->
tsize
 == 0)

176 
s
->
tsize
 = 512;

178 
s
->
˚Œ_log
 = 0;

179 (
s
->
mtu
 >> s->
˚Œ_log
Ë> s->
tsize
 - 1)

180 
s
->
˚Œ_log
++;

182 *
°ab
 = 
	`mÆloc
(
s
->
tsize
 * (
__u16
));

183 i‡(!*
°ab
)

186 
agaö
:

187 
i
 = 
s
->
tsize
 - 1; i >= 0; i--) {

188 
sz
 = 
	`tc_adju°_size
((
i
 + 1Ë<< 
s
->
˚Œ_log
, s->
mpu
, 
lökœyî
);

189 i‡((
sz
 >> 
s
->
size_log
Ë> 
UINT16_MAX
) {

190 
s
->
size_log
++;

191 
agaö
;

193 (*
°ab
)[
i
] = 
sz
 >> 
s
->
size_log
;

196 
s
->
˚Œ_Æign
 = -1;

198 
	}
}

200 
	$tc_c‹e_öô
()

202 
FILE
 *
Â
;

203 
__u32
 
˛ock_ªs
;

204 
__u32
 
t2us
;

205 
__u32
 
us2t
;

207 
Â
 = 
	`f›í
("/proc/net/psched", "r");

208 i‡(
Â
 =
NULL
)

211 i‡(
	`fsˇnf
(
Â
, "%08x%08x%08x", &
t2us
, &
us2t
, &
˛ock_ªs
) != 3) {

212 
	`f˛o£
(
Â
);

215 
	`f˛o£
(
Â
);

221 i‡(
˛ock_ªs
 == 1000000000)

222 
t2us
 = 
us2t
;

224 
˛ock_Á˘‹
 = ()
˛ock_ªs
 / 
TIME_UNITS_PER_SEC
;

225 
tick_ö_u£c
 = ()
t2us
 / 
us2t
 * 
˛ock_Á˘‹
;

227 
	}
}

	@tc/tc_core.h

1 #i‚de‡
_TC_CORE_H_


2 
	#_TC_CORE_H_
 1

	)

4 
	~<asm/ty≥s.h
>

5 
	~<löux/pkt_sched.h
>

7 
	#TIME_UNITS_PER_SEC
 1000000

	)

9 
	elök_œyî
 {

10 
	mLINKLAYER_UNSPEC
,

11 
	mLINKLAYER_ETHERNET
,

12 
	mLINKLAYER_ATM
,

16 
tc_c‹e_time2big
(
time
);

17 
tc_c‹e_time2tick
(
time
);

18 
tc_c‹e_tick2time
(
tick
);

19 
tc_c‹e_time2ktime
(
time
);

20 
tc_c‹e_ktime2time
(
ktime
);

21 
tc_ˇlc_xmôtime
(
__u64
 
øã
, 
size
);

22 
tc_ˇlc_xmôsize
(
__u64
 
øã
, 
ticks
);

23 
tc_ˇlc_πabÀ
(
tc_øã•ec
 *
r
, 
__u32
 *
πab
,

24 
˚Œ_log
, 
mtu
, 
lök_œyî
Üink_layer);

25 
tc_ˇlc_size_èbÀ
(
tc_size•ec
 *
s
, 
__u16
 **
°ab
);

27 
tc_£tup_e°im©‹
(
A
, 
time_c⁄°
, 
tc_e°im©‹
 *
e°
);

29 
tc_c‹e_öô
();

31 
π∆_h™dÀ
 
g_πh
;

32 
is_b©ch_mode
;

	@tc/tc_estimator.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<m©h.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~"tc_c‹e.h
"

26 
	$tc_£tup_e°im©‹
(
A
, 
time_c⁄°
, 
tc_e°im©‹
 *
e°
)

28 
e°
->
öãrvÆ
=0;Ést->interval<=5;Ést->interval++) {

29 i‡(
A
 <(1<<
e°
->
öãrvÆ
)*(
TIME_UNITS_PER_SEC
/4))

32 i‡(
e°
->
öãrvÆ
 > 5)

34 
e°
->
öãrvÆ
 -= 2;

35 
e°
->
ewma_log
=1;Ést->ewma_log<32;Ést->ewma_log++) {

36 
w
 = 1.0 - 1.0/(1<<
e°
->
ewma_log
);

37 i‡(
A
/(-
	`log
(
w
)Ë> 
time_c⁄°
)

40 
e°
->
ewma_log
--;

41 i‡(
e°
->
ewma_log
==0 ||Ést->ewma_log >= 31)

44 
	}
}

	@tc/tc_exec.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<dlf˙.h
>

16 
	~"utûs.h
"

18 
	~"tc_utû.h
"

19 
	~"tc_comm⁄.h
"

21 
exec_utû
 *
	gexec_li°
;

22 *
	gBODY
 = 
NULL
;

24 
	$ußge
()

26 
	`Ârötf
(
°dîr
, "Usage:ÅcÉxec [ EXEC_TYPE ] [ help | OPTIONS ]\n");

27 
	`Ârötf
(
°dîr
, "Where:\n");

28 
	`Ârötf
(
°dîr
, "EXEC_TYPE := { bpf |Étc. }\n");

29 
	`Ârötf
(
°dîr
, "OPTIONS := ...ÅryÅcÉxec <desired EXEC_KIND> help\n");

30 
	}
}

32 
	$∑r£_n€›t
(
exec_utû
 *
eu
, 
¨gc
, **
¨gv
)

34 i‡(
¨gc
) {

35 
	`Ârötf
(
°dîr
, "UnknownÉxec \"%s\", hence option \"%s\" "

36 "i†u≈¨ßbÀ\n", 
eu
->
id
, *
¨gv
);

41 
	}
}

43 
exec_utû
 *
	$gë_exec_köd
(c⁄° *
«me
)

45 
exec_utû
 *
eu
;

46 
buf
[256];

47 *
dlh
;

49 
eu
 = 
exec_li°
;Éu;Éu =Éu->
√xt
)

50 i‡(
	`°rcmp
(
eu
->
id
, 
«me
) == 0)

51  
eu
;

53 
	`¢¥ötf
(
buf
, (buf), "%s/e_%s.so", 
	`gë_tc_lib
(), 
«me
);

54 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

55 i‡(
dlh
 =
NULL
) {

56 
dlh
 = 
BODY
;

57 i‡(
dlh
 =
NULL
) {

58 
dlh
 = 
BODY
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

59 i‡(
dlh
 =
NULL
)

60 
n€xi°
;

64 
	`¢¥ötf
(
buf
, (buf), "%s_exec_utû", 
«me
);

65 
eu
 = 
	`dlsym
(
dlh
, 
buf
);

66 i‡(
eu
 =
NULL
)

67 
n€xi°
;

68 
ªg
:

69 
eu
->
√xt
 = 
exec_li°
;

70 
exec_li°
 = 
eu
;

72  
eu
;

73 
n€xi°
:

74 
eu
 = 
	`mÆloc
((*eu));

75 i‡(
eu
) {

76 
	`mem£t
(
eu
, 0, (*eu));

77 
	`°∫˝y
(
eu
->
id
, 
«me
, (eu->id) - 1);

78 
eu
->
∑r£_e›t
 = 
∑r£_n€›t
;

79 
ªg
;

82  
eu
;

83 
	}
}

85 
	$do_exec
(
¨gc
, **
¨gv
)

87 
exec_utû
 *
eu
;

88 
köd
[16];

90 i‡(
¨gc
 < 1) {

91 
	`Ârötf
(
°dîr
, "No command given,Åry \"tcÉxec help\".\n");

95 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

96 
	`ußge
();

100 
	`mem£t
(
köd
, 0, (kind));

101 
	`°∫˝y
(
köd
, *
¨gv
, (kind) - 1);

103 
eu
 = 
	`gë_exec_köd
(
köd
);

105 
¨gc
--;

106 
¨gv
++;

108  
eu
->
	`∑r£_e›t
”u, 
¨gc
, 
¨gv
);

109 
	}
}

	@tc/tc_filter.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<löux/if_ëhî.h
>

24 
	~"π_«mes.h
"

25 
	~"utûs.h
"

26 
	~"tc_utû.h
"

27 
	~"tc_comm⁄.h
"

29 
ußge
();

31 
	$ußge
()

33 
	`Ârötf
(
°dîr
, "Usage:Åc filter [ádd | del | change |Ñeplace | show ] dev STRING\n");

34 
	`Ârötf
(
°dîr
, " [Öref PRIO ]Örotocol PROTO\n");

35 
	`Ârötf
(
°dîr
, " [Éstimator INTERVAL TIME_CONSTANT ]\n");

36 
	`Ârötf
(
°dîr
, " [Ñoot | classid CLASSID ] [ handle FILTERID ]\n");

37 
	`Ârötf
(
°dîr
, " [ [ FILTER_TYPE ] [ help | OPTIONS ] ]\n");

38 
	`Ârötf
(
°dîr
, "\n");

39 
	`Ârötf
(
°dîr
, "Åc filter show [ dev STRING ] [Ñoot |Öarent CLASSID ]\n");

40 
	`Ârötf
(
°dîr
, "Where:\n");

41 
	`Ârötf
(
°dîr
, "FILTER_TYPE := {Ñsvp | u32 | bpf | fw |Ñoute |Étc. }\n");

42 
	`Ârötf
(
°dîr
, "FILTERID := ... format depends on classifier, seeÅhere\n");

43 
	`Ârötf
(
°dîr
, "OPTIONS := ...ÅryÅc filterádd <desired FILTER_KIND> help\n");

45 
	}
}

48 
	$tc_fûãr_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

51 
∆msghdr
 
n
;

52 
tcmsg
 
t
;

53 
buf
[
MAX_MSG
];

54 } 
ªq
;

55 
fûãr_utû
 *
q
 = 
NULL
;

56 
__u32
 
¥io
 = 0;

57 
__u32
 
¥Ÿocﬁ
 = 0;

58 
¥Ÿocﬁ_£t
 = 0;

59 *
fh™dÀ
 = 
NULL
;

60 
d
[16];

61 
k
[16];

62 
tc_e°im©‹
 
e°
;

64 
	`mem£t
(&
ªq
, 0, (req));

65 
	`mem£t
(&
e°
, 0, (est));

66 
	`mem£t
(
d
, 0, (d));

67 
	`mem£t
(
k
, 0, (k));

68 
	`mem£t
(&
ªq
, 0, (req));

70 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tcmsg
));

71 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

72 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

73 
ªq
.
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

75 i‡(
cmd
 =
RTM_NEWTFILTER
 && 
Êags
 & 
NLM_F_CREATE
)

76 
¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_ALL
);

78 
¨gc
 > 0) {

79 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

80 
	`NEXT_ARG
();

81 i‡(
d
[0])

82 
	`du∑rg
("dev", *
¨gv
);

83 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

84 } i‡(
	`°rcmp
(*
¨gv
, "root") == 0) {

85 i‡(
ªq
.
t
.
tcm_∑ª¡
) {

86 
	`Ârötf
(
°dîr
, "Error: \"root\" is duplicateÖarent ID\n");

89 
ªq
.
t
.
tcm_∑ª¡
 = 
TC_H_ROOT
;

90 } i‡(
	`°rcmp
(*
¨gv
, "parent") == 0) {

91 
__u32
 
h™dÀ
;

92 
	`NEXT_ARG
();

93 i‡(
ªq
.
t
.
tcm_∑ª¡
)

94 
	`du∑rg
("∑ª¡", *
¨gv
);

95 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

96 
	`öv¨g
("InvÆidÖ¨íàID", *
¨gv
);

97 
ªq
.
t
.
tcm_∑ª¡
 = 
h™dÀ
;

98 } i‡(
	`°rcmp
(*
¨gv
, "handle") == 0) {

99 
	`NEXT_ARG
();

100 i‡(
fh™dÀ
)

101 
	`du∑rg
("h™dÀ", *
¨gv
);

102 
fh™dÀ
 = *
¨gv
;

103 } i‡(
	`m©ches
(*
¨gv
, "preference") == 0 ||

104 
	`m©ches
(*
¨gv
, "priority") == 0) {

105 
	`NEXT_ARG
();

106 i‡(
¥io
)

107 
	`du∑rg
("¥i‹ôy", *
¨gv
);

108 i‡(
	`gë_u32
(&
¥io
, *
¨gv
, 0) ||Örio > 0xFFFF)

109 
	`öv¨g
("övÆidÖri‹ôy vÆue", *
¨gv
);

110 } i‡(
	`m©ches
(*
¨gv
, "protocol") == 0) {

111 
__u16
 
id
;

112 
	`NEXT_ARG
();

113 i‡(
¥Ÿocﬁ_£t
)

114 
	`du∑rg
("¥Ÿocﬁ", *
¨gv
);

115 i‡(
	`Œ_¥Ÿo_a2n
(&
id
, *
¨gv
))

116 
	`öv¨g
("övÆidÖrŸocﬁ", *
¨gv
);

117 
¥Ÿocﬁ
 = 
id
;

118 
¥Ÿocﬁ_£t
 = 1;

119 } i‡(
	`m©ches
(*
¨gv
, "estimator") == 0) {

120 i‡(
	`∑r£_e°im©‹
(&
¨gc
, &
¨gv
, &
e°
) < 0)

122 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

123 
	`ußge
();

126 
	`°∫˝y
(
k
, *
¨gv
, (k)-1);

128 
q
 = 
	`gë_fûãr_köd
(
k
);

129 
¨gc
--; 
¨gv
++;

133 
¨gc
--; 
¨gv
++;

136 
ªq
.
t
.
tcm_öfo
 = 
	`TC_H_MAKE
(
¥io
<<16, 
¥Ÿocﬁ
);

138 i‡(
k
[0])

139 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_KIND
, 
k
, 
	`°æí
(k)+1);

141 i‡(
q
) {

142 i‡(
q
->
	`∑r£_f›t
(q, 
fh™dÀ
, 
¨gc
, 
¨gv
, &
ªq
.
n
))

145 i‡(
fh™dÀ
) {

146 
	`Ârötf
(
°dîr
, "Must specify filterÅype when using "

150 i‡(
¨gc
) {

151 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

152 
	`ußge
();

153 
	`Ârötf
(
°dîr
, "G¨bagêö°ód o‡¨gumít†\"%†...\". Try \"t¯fûã∏hñp\".\n", *
¨gv
);

157 i‡(
e°
.
ewma_log
)

158 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_RATE
, &
e°
, (est));

161 i‡(
d
[0]) {

162 
	`Œ_öô_m≠
(&
πh
);

164 i‡((
ªq
.
t
.
tcm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

165 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

170 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0) {

171 
	`Ârötf
(
°dîr
, "We haveánÉrrorÅalkingÅoÅhe kernel\n");

176 
	}
}

178 
__u32
 
	gfûãr_∑ª¡
;

179 
	gfûãr_ifödex
;

180 
__u32
 
	gfûãr_¥io
;

181 
__u32
 
	gfûãr_¥Ÿocﬁ
;

182 
__u16
 
	gf_¥Ÿo
 = 0;

184 
	$¥öt_fûãr
(c⁄° 
sockaddr_∆
 *
who
,

185 
∆msghdr
 *
n
,

186 *
¨g
)

188 
FILE
 *
Â
 = (FILE*)
¨g
;

189 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

190 
Àn
 = 
n
->
∆msg_Àn
;

191 
π©å
 * 
tb
[
TCA_MAX
+1];

192 
fûãr_utû
 *
q
;

193 
abuf
[256];

195 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWTFILTER
 &&Ç->∆msg_ty≥ !
RTM_DELTFILTER
) {

196 
	`Ârötf
(
°dîr
, "Notá filter\n");

199 
Àn
 -
	`NLMSG_LENGTH
((*
t
));

200 i‡(
Àn
 < 0) {

201 
	`Ârötf
(
°dîr
, "Wr⁄gÜí %d\n", 
Àn
);

205 
	`mem£t
(
tb
, 0, (tb));

206 
	`∑r£_π©å
(
tb
, 
TCA_MAX
, 
	`TCA_RTA
(
t
), 
Àn
);

208 i‡(
tb
[
TCA_KIND
] =
NULL
) {

209 
	`Ârötf
(
°dîr
, "print_filter: NULL kind\n");

213 i‡(
n
->
∆msg_ty≥
 =
RTM_DELTFILTER
)

214 
	`Ârötf
(
Â
, "deleted ");

216 
	`Ârötf
(
Â
, "filter ");

217 i‡(!
fûãr_ifödex
 || fûãr_ifödex !
t
->
tcm_ifödex
)

218 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
t
->
tcm_ifödex
));

220 i‡(!
fûãr_∑ª¡
 || fûãr_∑ª¡ !
t
->
tcm_∑ª¡
) {

221 i‡(
t
->
tcm_∑ª¡
 =
TC_H_ROOT
)

222 
	`Ârötf
(
Â
, "root ");

224 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
t
->
tcm_∑ª¡
);

225 
	`Ârötf
(
Â
, "∑ª¡ %†", 
abuf
);

228 i‡(
t
->
tcm_öfo
) {

229 
f_¥Ÿo
 = 
	`TC_H_MIN
(
t
->
tcm_öfo
);

230 
__u32
 
¥io
 = 
	`TC_H_MAJ
(
t
->
tcm_öfo
)>>16;

231 i‡(!
fûãr_¥Ÿocﬁ
 || fûãr_¥Ÿocﬁ !
f_¥Ÿo
) {

232 i‡(
f_¥Ÿo
) {

233 
	`SPRINT_BUF
(
b1
);

234 
	`Ârötf
(
Â
, "protocol %s ",

235 
	`Œ_¥Ÿo_n2a
(
f_¥Ÿo
, 
b1
, (b1)));

238 i‡(!
fûãr_¥io
 || fûãr_¥iÿ!
¥io
) {

239 i‡(
¥io
)

240 
	`Ârötf
(
Â
, "¥e‡%u ", 
¥io
);

243 
	`Ârötf
(
Â
, "%†", 
	`πa_gë©å_°r
(
tb
[
TCA_KIND
]));

244 
q
 = 
	`gë_fûãr_köd
(
	`RTA_DATA
(
tb
[
TCA_KIND
]));

245 i‡(
tb
[
TCA_OPTIONS
]) {

246 i‡(
q
)

247 
q
->
	`¥öt_f›t
(q, 
Â
, 
tb
[
TCA_OPTIONS
], 
t
->
tcm_h™dÀ
);

249 
	`Ârötf
(
Â
, "[cannotÖarseÖarameters]");

251 
	`Ârötf
(
Â
, "\n");

253 i‡(
show_°©s
 && (
tb
[
TCA_STATS
] ||Åb[
TCA_STATS2
])) {

254 
	`¥öt_tc°©s_©å
(
Â
, 
tb
, " ", 
NULL
);

255 
	`Ârötf
(
Â
, "\n");

258 
	`fÊush
(
Â
);

260 
	}
}

263 
	$tc_fûãr_li°
(
¨gc
, **
¨gv
)

265 
tcmsg
 
t
;

266 
d
[16];

267 
__u32
 
¥io
 = 0;

268 
__u32
 
¥Ÿocﬁ
 = 0;

269 *
fh™dÀ
 = 
NULL
;

271 
	`mem£t
(&
t
, 0, (t));

272 
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

273 
	`mem£t
(
d
, 0, (d));

275 
¨gc
 > 0) {

276 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

277 
	`NEXT_ARG
();

278 i‡(
d
[0])

279 
	`du∑rg
("dev", *
¨gv
);

280 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

281 } i‡(
	`°rcmp
(*
¨gv
, "root") == 0) {

282 i‡(
t
.
tcm_∑ª¡
) {

283 
	`Ârötf
(
°dîr
, "Error: \"root\" is duplicateÖarent ID\n");

286 
fûãr_∑ª¡
 = 
t
.
tcm_∑ª¡
 = 
TC_H_ROOT
;

287 } i‡(
	`°rcmp
(*
¨gv
, "parent") == 0) {

288 
__u32
 
h™dÀ
;

289 
	`NEXT_ARG
();

290 i‡(
t
.
tcm_∑ª¡
)

291 
	`du∑rg
("∑ª¡", *
¨gv
);

292 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

293 
	`öv¨g
("övÆidÖ¨íàID", *
¨gv
);

294 
fûãr_∑ª¡
 = 
t
.
tcm_∑ª¡
 = 
h™dÀ
;

295 } i‡(
	`°rcmp
(*
¨gv
, "handle") == 0) {

296 
	`NEXT_ARG
();

297 i‡(
fh™dÀ
)

298 
	`du∑rg
("h™dÀ", *
¨gv
);

299 
fh™dÀ
 = *
¨gv
;

300 } i‡(
	`m©ches
(*
¨gv
, "preference") == 0 ||

301 
	`m©ches
(*
¨gv
, "priority") == 0) {

302 
	`NEXT_ARG
();

303 i‡(
¥io
)

304 
	`du∑rg
("¥i‹ôy", *
¨gv
);

305 i‡(
	`gë_u32
(&
¥io
, *
¨gv
, 0))

306 
	`öv¨g
("övÆidÖª„ªn˚", *
¨gv
);

307 
fûãr_¥io
 = 
¥io
;

308 } i‡(
	`m©ches
(*
¨gv
, "protocol") == 0) {

309 
__u16
 
ªs
;

310 
	`NEXT_ARG
();

311 i‡(
¥Ÿocﬁ
)

312 
	`du∑rg
("¥Ÿocﬁ", *
¨gv
);

313 i‡(
	`Œ_¥Ÿo_a2n
(&
ªs
, *
¨gv
))

314 
	`öv¨g
("övÆidÖrŸocﬁ", *
¨gv
);

315 
¥Ÿocﬁ
 = 
ªs
;

316 
fûãr_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

317 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

318 
	`ußge
();

320 
	`Ârötf
(
°dîr
, " Wh© i†\"%s\"? Try \"t¯fûã∏hñp\"\n", *
¨gv
);

324 
¨gc
--; 
¨gv
++;

327 
t
.
tcm_öfo
 = 
	`TC_H_MAKE
(
¥io
<<16, 
¥Ÿocﬁ
);

329 
	`Œ_öô_m≠
(&
πh
);

331 i‡(
d
[0]) {

332 i‡((
t
.
tcm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

333 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

336 
fûãr_ifödex
 = 
t
.
tcm_ifödex
;

339 i‡(
	`π∆_dump_ªque°
(&
πh
, 
RTM_GETTFILTER
, &
t
, (t)) < 0) {

340 
	`≥º‹
("Cannot send dumpÑequest");

344 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_fûãr
, 
°dout
) < 0) {

345 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

350 
	}
}

352 
	$do_fûãr
(
¨gc
, **
¨gv
)

354 i‡(
¨gc
 < 1)

355  
	`tc_fûãr_li°
(0, 
NULL
);

356 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

357  
	`tc_fûãr_modify
(
RTM_NEWTFILTER
, 
NLM_F_EXCL
|
NLM_F_CREATE
, 
¨gc
-1, 
¨gv
+1);

358 i‡(
	`m©ches
(*
¨gv
, "change") == 0)

359  
	`tc_fûãr_modify
(
RTM_NEWTFILTER
, 0, 
¨gc
-1, 
¨gv
+1);

360 i‡(
	`m©ches
(*
¨gv
, "replace") == 0)

361  
	`tc_fûãr_modify
(
RTM_NEWTFILTER
, 
NLM_F_CREATE
, 
¨gc
-1, 
¨gv
+1);

362 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

363  
	`tc_fûãr_modify
(
RTM_DELTFILTER
, 0, 
¨gc
-1, 
¨gv
+1);

365 i‡(
	`m©ches
(*
¨gv
, "get") == 0)

366  
	`tc_fûãr_gë
(
RTM_GETTFILTER
, 0, 
¨gc
-1, 
¨gv
+1);

368 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

369 || 
	`m©ches
(*
¨gv
, "lst") == 0)

370  
	`tc_fûãr_li°
(
¨gc
-1, 
¨gv
+1);

371 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

372 
	`ußge
();

375 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"t¯fûã∏hñp\".\n", *
¨gv
);

377 
	}
}

	@tc/tc_monitor.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<time.h
>

23 
	~"π_«mes.h
"

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~"tc_comm⁄.h
"

29 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

31 
	$ußge
()

33 
	`Ârötf
(
°dîr
, "Usage:Åc [-timestamp [-tshort] monitor\n");

34 
	`exô
(-1);

35 
	}
}

38 
	$ac˚±_tcmsg
(c⁄° 
sockaddr_∆
 *
who
,

39 
π∆_˘æ_d©a
 *
˘æ
,

40 
∆msghdr
 *
n
, *
¨g
)

42 
FILE
 *
Â
 = (FILE*)
¨g
;

44 i‡(
time°amp
)

45 
	`¥öt_time°amp
(
Â
);

47 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWTFILTER
 ||Ç->∆msg_ty≥ =
RTM_DELTFILTER
) {

48 
	`¥öt_fûãr
(
who
, 
n
, 
¨g
);

51 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWTCLASS
 ||Ç->∆msg_ty≥ =
RTM_DELTCLASS
) {

52 
	`¥öt_˛ass
(
who
, 
n
, 
¨g
);

55 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWQDISC
 ||Ç->∆msg_ty≥ =
RTM_DELQDISC
) {

56 
	`¥öt_qdisc
(
who
, 
n
, 
¨g
);

59 i‡(
n
->
∆msg_ty≥
 =
RTM_GETACTION
 ||Ç->∆msg_ty≥ =
RTM_NEWACTION
 ||

60 
n
->
∆msg_ty≥
 =
RTM_DELACTION
) {

61 
	`¥öt_a˘i⁄
(
who
, 
n
, 
¨g
);

64 i‡(
n
->
∆msg_ty≥
 !
NLMSG_ERROR
 &&Ç->∆msg_ty≥ !
NLMSG_NOOP
 &&

65 
n
->
∆msg_ty≥
 !
NLMSG_DONE
) {

66 
	`Ârötf
(
Â
, "Unknown message:Üength %08dÅype %08x flags %08x\n",

67 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

70 
	}
}

72 
	$do_tcm⁄ô‹
(
¨gc
, **
¨gv
)

74 
π∆_h™dÀ
 
πh
;

75 *
fûe
 = 
NULL
;

76 
groups
 = 
	`∆_mgΩ
(
RTNLGRP_TC
);

78 
¨gc
 > 0) {

79 i‡(
	`m©ches
(*
¨gv
, "file") == 0) {

80 
	`NEXT_ARG
();

81 
fûe
 = *
¨gv
;

83 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

84 
	`ußge
();

86 
	`Ârötf
(
°dîr
, "Argumíà\"%s\" i†unknown,Åry \"t¯m⁄ô‹ hñp\".\n", *
¨gv
);

87 
	`exô
(-1);

90 
¨gc
--; 
¨gv
++;

93 i‡(
fûe
) {

94 
FILE
 *
Â
;

95 
Â
 = 
	`f›í
(
fûe
, "r");

96 i‡(
Â
 =
NULL
) {

97 
	`≥º‹
("Cannot fopen");

98 
	`exô
(-1);

100  
	`π∆_‰om_fûe
(
Â
, 
ac˚±_tcmsg
, (*)
°dout
);

103 i‡(
	`π∆_›í
(&
πh
, 
groups
) < 0)

104 
	`exô
(1);

106 
	`Œ_öô_m≠
(&
πh
);

108 i‡(
	`π∆_li°í
(&
πh
, 
ac˚±_tcmsg
, (*)
°dout
) < 0) {

109 
	`π∆_˛o£
(&
πh
);

110 
	`exô
(2);

113 
	`π∆_˛o£
(&
πh
);

114 
	`exô
(0);

115 
	}
}

	@tc/tc_qdisc.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<m©h.h
>

23 
	~<mÆloc.h
>

25 
	~"utûs.h
"

26 
	~"tc_utû.h
"

27 
	~"tc_comm⁄.h
"

29 
ußge
();

31 
	$ußge
()

33 
	`Ârötf
(
°dîr
, "Usage:Åc qdisc [ádd | del |Ñeplace | change | show ] dev STRING\n");

34 
	`Ârötf
(
°dîr
, " [ handle QHANDLE ] [Ñoot | ingress |Öarent CLASSID ]\n");

35 
	`Ârötf
(
°dîr
, " [Éstimator INTERVAL TIME_CONSTANT ]\n");

36 
	`Ârötf
(
°dîr
, " [ stab [ help | STAB_OPTIONS] ]\n");

37 
	`Ârötf
(
°dîr
, " [ [ QDISC_KIND ] [ help | OPTIONS ] ]\n");

38 
	`Ârötf
(
°dîr
, "\n");

39 
	`Ârötf
(
°dîr
, "Åc qdisc show [ dev STRING ] [ingress]\n");

40 
	`Ârötf
(
°dîr
, "Where:\n");

41 
	`Ârötf
(
°dîr
, "QDISC_KIND := { [p|b]fifo |Åbf |Örio | cbq |Ñed |Étc. }\n");

42 
	`Ârötf
(
°dîr
, "OPTIONS := ...ÅryÅc qdiscádd <desired QDISC_KIND> help\n");

43 
	`Ârötf
(
°dîr
, "STAB_OPTIONS := ...ÅryÅc qdiscádd stab help\n");

45 
	}
}

47 
	$tc_qdisc_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

49 
qdisc_utû
 *
q
 = 
NULL
;

50 
tc_e°im©‹
 
e°
;

52 
tc_size•ec
 
sz›ts
;

53 
__u16
 *
d©a
;

54 } 
°ab
;

55 
d
[16];

56 
k
[16];

58 
∆msghdr
 
n
;

59 
tcmsg
 
t
;

60 
buf
[
TCA_BUF_MAX
];

61 } 
ªq
;

63 
	`mem£t
(&
ªq
, 0, (req));

64 
	`mem£t
(&
°ab
, 0, (stab));

65 
	`mem£t
(&
e°
, 0, (est));

66 
	`mem£t
(&
d
, 0, (d));

67 
	`mem£t
(&
k
, 0, (k));

69 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tcmsg
));

70 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

71 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

72 
ªq
.
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

74 
¨gc
 > 0) {

75 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

76 
	`NEXT_ARG
();

77 i‡(
d
[0])

78 
	`du∑rg
("dev", *
¨gv
);

79 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

80 } i‡(
	`°rcmp
(*
¨gv
, "handle") == 0) {

81 
__u32
 
h™dÀ
;

82 i‡(
ªq
.
t
.
tcm_h™dÀ
)

83 
	`du∑rg
("h™dÀ", *
¨gv
);

84 
	`NEXT_ARG
();

85 i‡(
	`gë_qdisc_h™dÀ
(&
h™dÀ
, *
¨gv
))

86 
	`öv¨g
("övÆid qdis¯ID", *
¨gv
);

87 
ªq
.
t
.
tcm_h™dÀ
 = 
h™dÀ
;

88 } i‡(
	`°rcmp
(*
¨gv
, "root") == 0) {

89 i‡(
ªq
.
t
.
tcm_∑ª¡
) {

90 
	`Ârötf
(
°dîr
, "Error: \"root\" is duplicateÖarent ID\n");

93 
ªq
.
t
.
tcm_∑ª¡
 = 
TC_H_ROOT
;

94 #ifde‡
TC_H_INGRESS


95 } i‡(
	`°rcmp
(*
¨gv
, "ingress") == 0) {

96 i‡(
ªq
.
t
.
tcm_∑ª¡
) {

97 
	`Ârötf
(
°dîr
, "Error: \"ingress\" isá duplicateÖarent ID\n");

100 
ªq
.
t
.
tcm_∑ª¡
 = 
TC_H_INGRESS
;

101 
	`°∫˝y
(
k
, "ingress", (k)-1);

102 
q
 = 
	`gë_qdisc_köd
(
k
);

103 
ªq
.
t
.
tcm_h™dÀ
 = 0xffff0000;

105 
¨gc
--; 
¨gv
++;

108 } i‡(
	`°rcmp
(*
¨gv
, "parent") == 0) {

109 
__u32
 
h™dÀ
;

110 
	`NEXT_ARG
();

111 i‡(
ªq
.
t
.
tcm_∑ª¡
)

112 
	`du∑rg
("∑ª¡", *
¨gv
);

113 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

114 
	`öv¨g
("övÆidÖ¨íàID", *
¨gv
);

115 
ªq
.
t
.
tcm_∑ª¡
 = 
h™dÀ
;

116 } i‡(
	`m©ches
(*
¨gv
, "estimator") == 0) {

117 i‡(
	`∑r£_e°im©‹
(&
¨gc
, &
¨gv
, &
e°
))

119 } i‡(
	`m©ches
(*
¨gv
, "stab") == 0) {

120 i‡(
	`∑r£_size_èbÀ
(&
¨gc
, &
¨gv
, &
°ab
.
sz›ts
) < 0)

123 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

124 
	`ußge
();

126 
	`°∫˝y
(
k
, *
¨gv
, (k)-1);

128 
q
 = 
	`gë_qdisc_köd
(
k
);

129 
¨gc
--; 
¨gv
++;

132 
¨gc
--; 
¨gv
++;

135 i‡(
k
[0])

136 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_KIND
, 
k
, 
	`°æí
(k)+1);

137 i‡(
e°
.
ewma_log
)

138 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_RATE
, &
e°
, (est));

140 i‡(
q
) {

141 i‡(
q
->
∑r£_q›t
) {

142 i‡(
q
->
	`∑r£_q›t
(q, 
¨gc
, 
¨gv
, &
ªq
.
n
))

144 } i‡(
¨gc
) {

145 
	`Ârötf
(
°dîr
, "qdis¯'%s' d€†nŸ suµ‹à›ti⁄Ö¨sög\n", 
k
);

149 i‡(
¨gc
) {

150 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

151 
	`ußge
();

153 
	`Ârötf
(
°dîr
, "G¨bagêö°ód o‡¨gumít†\"%†...\". Try \"t¯qdis¯hñp\".\n", *
¨gv
);

158 i‡(
	`check_size_èbÀ_›ts
(&
°ab
.
sz›ts
)) {

159 
π©å
 *
èû
;

161 i‡(
	`tc_ˇlc_size_èbÀ
(&
°ab
.
sz›ts
, &°ab.
d©a
) < 0) {

162 
	`Ârötf
(
°dîr
, "failedÅo calculate sizeÅable.\n");

166 
èû
 = 
	`NLMSG_TAIL
(&
ªq
.
n
);

167 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_STAB
, 
NULL
, 0);

168 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_STAB_BASE
, &
°ab
.
sz›ts
,

169 (
°ab
.
sz›ts
));

170 i‡(
°ab
.
d©a
)

171 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_STAB_DATA
, 
°ab
.
d©a
,

172 
°ab
.
sz›ts
.
tsize
 * (
__u16
));

173 
èû
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(&
ªq
.
n
) - (*)tail;

174 i‡(
°ab
.
d©a
)

175 
	`‰ì
(
°ab
.
d©a
);

178 i‡(
d
[0]) {

179 
idx
;

181 
	`Œ_öô_m≠
(&
πh
);

183 i‡((
idx
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

184 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

187 
ªq
.
t
.
tcm_ifödex
 = 
idx
;

190 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 
NULL
, 0) < 0)

194 
	}
}

196 
	gfûãr_ifödex
;

198 
	$¥öt_qdisc
(c⁄° 
sockaddr_∆
 *
who
,

199 
∆msghdr
 *
n
,

200 *
¨g
)

202 
FILE
 *
Â
 = (FILE*)
¨g
;

203 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

204 
Àn
 = 
n
->
∆msg_Àn
;

205 
π©å
 * 
tb
[
TCA_MAX
+1];

206 
qdisc_utû
 *
q
;

207 
abuf
[256];

209 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWQDISC
 &&Ç->∆msg_ty≥ !
RTM_DELQDISC
) {

210 
	`Ârötf
(
°dîr
, "Notá qdisc\n");

213 
Àn
 -
	`NLMSG_LENGTH
((*
t
));

214 i‡(
Àn
 < 0) {

215 
	`Ârötf
(
°dîr
, "Wr⁄gÜí %d\n", 
Àn
);

219 i‡(
fûãr_ifödex
 && fûãr_ifödex !
t
->
tcm_ifödex
)

222 
	`mem£t
(
tb
, 0, (tb));

223 
	`∑r£_π©å
(
tb
, 
TCA_MAX
, 
	`TCA_RTA
(
t
), 
Àn
);

225 i‡(
tb
[
TCA_KIND
] =
NULL
) {

226 
	`Ârötf
(
°dîr
, "print_qdisc: NULL kind\n");

230 i‡(
n
->
∆msg_ty≥
 =
RTM_DELQDISC
)

231 
	`Ârötf
(
Â
, "deleted ");

233 
	`Ârötf
(
Â
, "qdis¯%†%x: ", 
	`πa_gë©å_°r
(
tb
[
TCA_KIND
]), 
t
->
tcm_h™dÀ
>>16);

234 i‡(
fûãr_ifödex
 == 0)

235 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
t
->
tcm_ifödex
));

236 i‡(
t
->
tcm_∑ª¡
 =
TC_H_ROOT
)

237 
	`Ârötf
(
Â
, "root ");

238 i‡(
t
->
tcm_∑ª¡
) {

239 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
t
->
tcm_∑ª¡
);

240 
	`Ârötf
(
Â
, "∑ª¡ %†", 
abuf
);

242 i‡(
t
->
tcm_öfo
 != 1) {

243 
	`Ârötf
(
Â
, "ªf˙à%d ", 
t
->
tcm_öfo
);

247 i‡(0 =
	`°rcmp
("pfifo_Á°", 
	`RTA_DATA
(
tb
[
TCA_KIND
])))

248 
q
 = 
	`gë_qdisc_köd
("prio");

250 
q
 = 
	`gë_qdisc_köd
(
	`RTA_DATA
(
tb
[
TCA_KIND
]));

252 i‡(
tb
[
TCA_OPTIONS
]) {

253 i‡(
q
)

254 
q
->
	`¥öt_q›t
(q, 
Â
, 
tb
[
TCA_OPTIONS
]);

256 
	`Ârötf
(
Â
, "[cannotÖarse qdiscÖarameters]");

258 
	`Ârötf
(
Â
, "\n");

259 i‡(
show_dëaûs
 && 
tb
[
TCA_STAB
]) {

260 
	`¥öt_size_èbÀ
(
Â
, " ", 
tb
[
TCA_STAB
]);

261 
	`Ârötf
(
Â
, "\n");

263 i‡(
show_°©s
) {

264 
π©å
 *
x°©s
 = 
NULL
;

266 i‡(
tb
[
TCA_STATS
] ||Åb[
TCA_STATS2
] ||Åb[
TCA_XSTATS
]) {

267 
	`¥öt_tc°©s_©å
(
Â
, 
tb
, " ", &
x°©s
);

268 
	`Ârötf
(
Â
, "\n");

271 i‡(
q
 && 
x°©s
 && q->
¥öt_x°©s
) {

272 
q
->
	`¥öt_x°©s
(q, 
Â
, 
x°©s
);

273 
	`Ârötf
(
Â
, "\n");

276 
	`fÊush
(
Â
);

278 
	}
}

281 
	$tc_qdisc_li°
(
¨gc
, **
¨gv
)

283 
tcmsg
 
t
;

284 
d
[16];

286 
	`mem£t
(&
t
, 0, (t));

287 
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

288 
	`mem£t
(&
d
, 0, (d));

290 
¨gc
 > 0) {

291 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

292 
	`NEXT_ARG
();

293 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

294 #ifde‡
TC_H_INGRESS


295 } i‡(
	`°rcmp
(*
¨gv
, "ingress") == 0) {

296 i‡(
t
.
tcm_∑ª¡
) {

297 
	`Ârötf
(
°dîr
, "DuplicateÖarent ID\n");

298 
	`ußge
();

300 
t
.
tcm_∑ª¡
 = 
TC_H_INGRESS
;

302 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

303 
	`ußge
();

305 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"? Try \"t¯qdis¯hñp\".\n", *
¨gv
);

309 
¨gc
--; 
¨gv
++;

312 
	`Œ_öô_m≠
(&
πh
);

314 i‡(
d
[0]) {

315 i‡((
t
.
tcm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

316 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

319 
fûãr_ifödex
 = 
t
.
tcm_ifödex
;

322 i‡(
	`π∆_dump_ªque°
(&
πh
, 
RTM_GETQDISC
, &
t
, (t)) < 0) {

323 
	`≥º‹
("Cannot send dumpÑequest");

327 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_qdisc
, 
°dout
) < 0) {

328 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

333 
	}
}

335 
	$do_qdisc
(
¨gc
, **
¨gv
)

337 i‡(
¨gc
 < 1)

338  
	`tc_qdisc_li°
(0, 
NULL
);

339 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

340  
	`tc_qdisc_modify
(
RTM_NEWQDISC
, 
NLM_F_EXCL
|
NLM_F_CREATE
, 
¨gc
-1, 
¨gv
+1);

341 i‡(
	`m©ches
(*
¨gv
, "change") == 0)

342  
	`tc_qdisc_modify
(
RTM_NEWQDISC
, 0, 
¨gc
-1, 
¨gv
+1);

343 i‡(
	`m©ches
(*
¨gv
, "replace") == 0)

344  
	`tc_qdisc_modify
(
RTM_NEWQDISC
, 
NLM_F_CREATE
|
NLM_F_REPLACE
, 
¨gc
-1, 
¨gv
+1);

345 i‡(
	`m©ches
(*
¨gv
, "link") == 0)

346  
	`tc_qdisc_modify
(
RTM_NEWQDISC
, 
NLM_F_REPLACE
, 
¨gc
-1, 
¨gv
+1);

347 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

348  
	`tc_qdisc_modify
(
RTM_DELQDISC
, 0, 
¨gc
-1, 
¨gv
+1);

350 i‡(
	`m©ches
(*
¨gv
, "get") == 0)

351  
	`tc_qdisc_gë
(
RTM_GETQDISC
, 0, 
¨gc
-1, 
¨gv
+1);

353 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

354 || 
	`m©ches
(*
¨gv
, "lst") == 0)

355  
	`tc_qdisc_li°
(
¨gc
-1, 
¨gv
+1);

356 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

357 
	`ußge
();

360 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"t¯qdis¯hñp\".\n", *
¨gv
);

362 
	}
}

	@tc/tc_red.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<m©h.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~"tc_c‹e.h
"

25 
	~"tc_ªd.h
"

30 
	$tc_ªd_evÆ_P
(
qmö
, 
qmax
, 
¥ob
)

32 
i
 = 
qmax
 - 
qmö
;

34 i‡(
i
 <= 0)

37 
¥ob
 /
i
;

39 
i
=0; i<32; i++) {

40 i‡(
¥ob
 > 1.0)

42 
¥ob
 *= 2;

44 i‡(
i
>=32)

46  
i
;

47 
	}
}

53 
	$tc_ªd_evÆ_ewma
(
qmö
, 
bur°
, 
avpkt
)

55 
wlog
 = 1;

56 
W
 = 0.5;

57 
a
 = ()
bur°
 + 1 - ()
qmö
/
avpkt
;

59 i‡(
a
 < 1.0) {

60 
	`Ârötf
(
°dîr
, "tc_red_eval_ewma() burst %u isÅoo small ?"

61 " Try bur° %u\n", 
bur°
, 1 + 
qmö
/
avpkt
);

64 
wlog
=1; wlog<32; wlog++, 
W
 /= 2) {

65 i‡(
a
 <(1 - 
	`pow
(1-
W
, 
bur°
))/W)

66  
wlog
;

69 
	}
}

75 
	$tc_ªd_evÆ_idÀ_dampög
(
Wlog
, 
avpkt
, 
bps
, 
__u8
 *
sbuf
)

77 
xmô_time
 = 
	`tc_ˇlc_xmôtime
(
bps
, 
avpkt
);

78 
lW
 = -
	`log
(1.0 - 1.0/(1<<
Wlog
))/
xmô_time
;

79 
maxtime
 = 31/
lW
;

80 
˛og
;

81 
i
;

83 
˛og
=0; clog<32; clog++) {

84 i‡(
maxtime
/(1<<
˛og
) < 512)

87 i‡(
˛og
 >= 32)

90 
sbuf
[0] = 0;

91 
i
=1; i<255; i++) {

92 
sbuf
[
i
] = (i<<
˛og
)*
lW
;

93 i‡(
sbuf
[
i
] > 31)

94 
sbuf
[
i
] = 31;

96 
sbuf
[255] = 31;

97  
˛og
;

98 
	}
}

	@tc/tc_red.h

1 #i‚de‡
_TC_RED_H_


2 
	#_TC_RED_H_
 1

	)

4 
tc_ªd_evÆ_P
(
qmö
, 
qmax
, 
¥ob
);

5 
tc_ªd_evÆ_ewma
(
qmö
, 
bur°
, 
avpkt
);

6 
tc_ªd_evÆ_idÀ_dampög
(
wlog
, 
avpkt
, 
b™dwidth
, 
__u8
 *
sbuf
);

	@tc/tc_stab.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<m©h.h
>

19 
	~<sys/sockë.h
>

20 
	~<sys/∑øm.h
>

21 
	~<√töë/ö.h
>

22 
	~<¨∑/öë.h
>

23 
	~<°rög.h
>

24 
	~<mÆloc.h
>

26 
	~"utûs.h
"

27 
	~"tc_utû.h
"

28 
	~"tc_c‹e.h
"

29 
	~"tc_comm⁄.h
"

31 
	$°ab_hñp
()

33 
	`Ârötf
(
°dîr
,

44 
	}
}

46 
	$check_size_èbÀ_›ts
(
tc_size•ec
 *
s
)

48  
s
->
lökœyî
 >
LINKLAYER_ETHERNET
 || s->
mpu
 != 0 ||

49 
s
->
ovîhód
 != 0;

50 
	}
}

52 
	$∑r£_size_èbÀ
(*
¨g˝
, ***
¨gvp
, 
tc_size•ec
 *
•
)

54 **
¨gv
 = *
¨gvp
;

55 
¨gc
 = *
¨g˝
;

56 
tc_size•ec
 
s
;

58 
	`mem£t
(&
s
, 0, (s));

60 
	`NEXT_ARG
();

61 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

62 
	`°ab_hñp
();

65 
¨gc
 > 0) {

66 i‡(
	`m©ches
(*
¨gv
, "mtu") == 0) {

67 
	`NEXT_ARG
();

68 i‡(
s
.
mtu
)

69 
	`du∑rg
("mtu", *
¨gv
);

70 i‡(
	`gë_u32
(&
s
.
mtu
, *
¨gv
, 10))

71 
	`öv¨g
("mtu", "invalid mtu");

72 } i‡(
	`m©ches
(*
¨gv
, "mpu") == 0) {

73 
	`NEXT_ARG
();

74 i‡(
s
.
mpu
)

75 
	`du∑rg
("mpu", *
¨gv
);

76 i‡(
	`gë_u32
(&
s
.
mpu
, *
¨gv
, 10))

77 
	`öv¨g
("mpu", "invalid mpu");

78 } i‡(
	`m©ches
(*
¨gv
, "overhead") == 0) {

79 
	`NEXT_ARG
();

80 i‡(
s
.
ovîhód
)

81 
	`du∑rg
("ovîhód", *
¨gv
);

82 i‡(
	`gë_öãgî
(&
s
.
ovîhód
, *
¨gv
, 10))

83 
	`öv¨g
("overhead", "invalid overhead");

84 } i‡(
	`m©ches
(*
¨gv
, "tsize") == 0) {

85 
	`NEXT_ARG
();

86 i‡(
s
.
tsize
)

87 
	`du∑rg
("tsize", *
¨gv
);

88 i‡(
	`gë_u32
(&
s
.
tsize
, *
¨gv
, 10))

89 
	`öv¨g
("tsize", "invalidÅable size");

90 } i‡(
	`m©ches
(*
¨gv
, "linklayer") == 0) {

91 
	`NEXT_ARG
();

92 i‡(
s
.
lökœyî
 !
LINKLAYER_UNSPEC
)

93 
	`du∑rg
("lökœyî", *
¨gv
);

94 i‡(
	`gë_lökœyî
(&
s
.
lökœyî
, *
¨gv
))

95 
	`öv¨g
("linklayer", "invalidÜinklayer");

98 
¨gc
--; 
¨gv
++;

101 i‡(!
	`check_size_èbÀ_›ts
(&
s
))

104 *
•
 = 
s
;

105 *
¨gvp
 = 
¨gv
;

106 *
¨g˝
 = 
¨gc
;

108 
	}
}

110 
	$¥öt_size_èbÀ
(
FILE
 *
Â
, c⁄° *
¥efix
, 
π©å
 *
πa
)

112 
π©å
 *
tb
[
TCA_STAB_MAX
 + 1];

113 
	`SPRINT_BUF
(
b1
);

115 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_STAB_MAX
, 
πa
);

117 i‡(
tb
[
TCA_STAB_BASE
]) {

118 
tc_size•ec
 
s
 = {0};

119 
	`mem˝y
(&
s
, 
	`RTA_DATA
(
tb
[
TCA_STAB_BASE
]),

120 
	`MIN
(
	`RTA_PAYLOAD
(
tb
[
TCA_STAB_BASE
]), (
s
)));

122 
	`Ârötf
(
Â
, "%s", 
¥efix
);

123 i‡(
s
.
lökœyî
)

124 
	`Ârötf
(
Â
, "linklayer %s ",

125 
	`•röt_lökœyî
(
s
.
lökœyî
, 
b1
));

126 i‡(
s
.
ovîhód
)

127 
	`Ârötf
(
Â
, "ovîhód %d ", 
s
.
ovîhód
);

128 i‡(
s
.
mpu
)

129 
	`Ârötf
(
Â
, "mpu %u ", 
s
.
mpu
);

130 i‡(
s
.
mtu
)

131 
	`Ârötf
(
Â
, "mtu %u ", 
s
.
mtu
);

132 i‡(
s
.
tsize
)

133 
	`Ârötf
(
Â
, "tsizê%u ", 
s
.
tsize
);

137 i‡(
tb
[
TCA_STAB_DATA
]) {

138 
i
, 
j
, 
dÀn
;

139 
__u16
 *
d©a
 = 
	`RTA_DATA
(
tb
[
TCA_STAB_DATA
]);

140 
dÀn
 = 
	`RTA_PAYLOAD
(
tb
[
TCA_STAB_DATA
]Ë/ (
__u16
);

142 
	`Ârötf
(
Â
, "\n%s°ab d©a:", 
¥efix
);

143 
i
 = 0; i < 
dÀn
/12; i++) {

144 
	`Ârötf
(
Â
, "\n%†%3u:", 
¥efix
, 
i
 * 12);

145 
j
 = 0; 
i
 * 12 + j < 
dÀn
; j++)

146 
	`Ârötf
(
Â
, " %05x", 
d©a
[
i
 * 12 + 
j
]);

150 
	}
}

	@tc/tc_util.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<sys/∑øm.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

23 
	~<m©h.h
>

24 
	~<î∫o.h
>

26 
	~"utûs.h
"

27 
	~"«mes.h
"

28 
	~"tc_utû.h
"

29 
	~"tc_comm⁄.h
"

31 #i‚de‡
LIBDIR


32 
	#LIBDIR
 "/u§/lib"

	)

35 
db_«mes
 *
	g˛s_«mes
 = 
NULL
;

37 
	#NAMES_DB
 "/ëc/ùrouã2/tc_˛s"

	)

39 
	$˛s_«mes_öô
(*
∑th
)

41 
ªt
;

43 
˛s_«mes
 = 
	`db_«mes_Æloc
();

44 i‡(!
˛s_«mes
)

47 
ªt
 = 
	`db_«mes_lﬂd
(
˛s_«mes
, 
∑th
 ?: 
NAMES_DB
);

48 i‡(
ªt
 =-
ENOENT
 && 
∑th
) {

49 
	`Ârötf
(
°dîr
, "C™'à›í cœs†«me†fûe: %s\n", 
∑th
);

52 i‡(
ªt
) {

53 
	`db_«mes_‰ì
(
˛s_«mes
);

54 
˛s_«mes
 = 
NULL
;

58 
	}
}

60 
	$˛s_«mes_unöô
()

62 
	`db_«mes_‰ì
(
˛s_«mes
);

63 
	}
}

65 c⁄° *
	$gë_tc_lib
()

67 c⁄° *
lib_dú
;

69 
lib_dú
 = 
	`gëív
("TC_LIB_DIR");

70 i‡(!
lib_dú
)

71 
lib_dú
 = 
LIBDIR
 "/tc/";

73  
lib_dú
;

74 
	}
}

76 
	$gë_qdisc_h™dÀ
(
__u32
 *
h
, c⁄° *
°r
)

78 
__u32
 
maj
;

79 *
p
;

81 
maj
 = 
TC_H_UNSPEC
;

82 i‡(
	`°rcmp
(
°r
, "none") == 0)

83 
ok
;

84 
maj
 = 
	`°πoul
(
°r
, &
p
, 16);

85 i‡(
p
 =
°r
)

87 
maj
 <<= 16;

88 i‡(*
p
 != ':' && *p!=0)

90 
ok
:

91 *
h
 = 
maj
;

93 
	}
}

95 
	$gë_tc_˛assid
(
__u32
 *
h
, c⁄° *
°r
)

97 
__u32
 
maj
, 
mö
;

98 *
p
;

100 
maj
 = 
TC_H_ROOT
;

101 i‡(
	`°rcmp
(
°r
, "root") == 0)

102 
ok
;

103 
maj
 = 
TC_H_UNSPEC
;

104 i‡(
	`°rcmp
(
°r
, "none") == 0)

105 
ok
;

106 
maj
 = 
	`°πoul
(
°r
, &
p
, 16);

107 i‡(
p
 =
°r
) {

108 
maj
 = 0;

109 i‡(*
p
 != ':')

112 i‡(*
p
 == ':') {

113 i‡(
maj
 >= (1<<16))

115 
maj
 <<= 16;

116 
°r
 = 
p
+1;

117 
mö
 = 
	`°πoul
(
°r
, &
p
, 16);

118 i‡(*
p
 != 0)

120 i‡(
mö
 >= (1<<16))

122 
maj
 |
mö
;

123 } i‡(*
p
 != 0)

126 
ok
:

127 *
h
 = 
maj
;

129 
	}
}

131 
	$¥öt_tc_˛assid
(*
buf
, 
bÀn
, 
__u32
 
h
)

133 
	`SPRINT_BUF
(
h™dÀ
) = {};

134 
hÀn
 = 
SPRINT_BSIZE
 - 1;

136 i‡(
h
 =
TC_H_ROOT
)

137 
	`•rötf
(
h™dÀ
, "root");

138 i‡(
h
 =
TC_H_UNSPEC
)

139 
	`¢¥ötf
(
h™dÀ
, 
hÀn
, "none");

140 i‡(
	`TC_H_MAJ
(
h
) == 0)

141 
	`¢¥ötf
(
h™dÀ
, 
hÀn
, ":%x", 
	`TC_H_MIN
(
h
));

142 i‡(
	`TC_H_MIN
(
h
) == 0)

143 
	`¢¥ötf
(
h™dÀ
, 
hÀn
, "%x:", 
	`TC_H_MAJ
(
h
) >> 16);

145 
	`¢¥ötf
(
h™dÀ
, 
hÀn
, "%x:%x", 
	`TC_H_MAJ
(
h
Ë>> 16, 
	`TC_H_MIN
(h));

147 i‡(
u£_«mes
) {

148 
˛«me
[
IDNAME_MAX
] = {};

150 i‡(
	`id_to_«me
(
˛s_«mes
, 
h
, 
˛«me
))

151 
	`¢¥ötf
(
buf
, 
bÀn
, "%s#%s", 
˛«me
, 
h™dÀ
);

153 
	`¢¥ötf
(
buf
, 
bÀn
, "%s", 
h™dÀ
);

155 
	`¢¥ötf
(
buf
, 
bÀn
, "%s", 
h™dÀ
);

159 
	}
}

161 *
	$•röt_tc_˛assid
(
__u32
 
h
, *
buf
)

163 i‡(
	`¥öt_tc_˛assid
(
buf
, 
SPRINT_BSIZE
-1, 
h
))

164 
	`°r˝y
(
buf
, "???");

165  
buf
;

166 
	}
}

169 c⁄° 
	søã_suffix
 {

170 c⁄° *
	m«me
;

171 
	msˇÀ
;

172 } 
	gsuffixes
[] = {

191 { 
NULL
 }

195 
	$gë_øã
(*
øã
, c⁄° *
°r
)

197 *
p
;

198 
bps
 = 
	`°πod
(
°r
, &
p
);

199 c⁄° 
øã_suffix
 *
s
;

201 i‡(
p
 =
°r
)

204 
s
 = 
suffixes
; s->
«me
; ++s) {

205 i‡(
	`°rˇ£cmp
(
s
->
«me
, 
p
) == 0) {

206 
bps
 *
s
->
sˇÀ
;

207 
p
 +
	`°æí
(p);

212 i‡(*
p
)

215 
bps
 /= 8;

216 *
øã
 = 
bps
;

218 i‡(*
øã
 !
	`Êo‹
(
bps
))

221 
	}
}

223 
	$gë_øã64
(
__u64
 *
øã
, c⁄° *
°r
)

225 *
p
;

226 
bps
 = 
	`°πod
(
°r
, &
p
);

227 c⁄° 
øã_suffix
 *
s
;

229 i‡(
p
 =
°r
)

232 
s
 = 
suffixes
; s->
«me
; ++s) {

233 i‡(
	`°rˇ£cmp
(
s
->
«me
, 
p
) == 0) {

234 
bps
 *
s
->
sˇÀ
;

235 
p
 +
	`°æí
(p);

240 i‡(*
p
)

243 
bps
 /= 8;

244 *
øã
 = 
bps
;

246 
	}
}

248 
	$¥öt_øã
(*
buf
, 
Àn
, 
__u64
 
øã
)

250 
u£_õc
;

251 
kûo
 = 
u£_õc
 ? 1024 : 1000;

252 c⁄° *
°r
 = 
u£_õc
 ? "i" : "";

253 *
unôs
[5] = {"", "K", "M", "G", "T"};

254 
i
;

256 
øã
 <<= 3;

258 
i
 = 0; i < 
	`ARRAY_SIZE
(
unôs
) - 1; i++) {

259 i‡(
øã
 < 
kûo
)

261 i‡(((
øã
 % 
kûo
) != 0) &&Ñate < 1000*kilo)

263 
øã
 /
kûo
;

266 
	`¢¥ötf
(
buf
, 
Àn
, "%.0f%s%sbô", ()
øã
, 
unôs
[
i
], 
°r
);

267 
	}
}

269 * 
	$•röt_øã
(
__u64
 
øã
, *
buf
)

271 
	`¥öt_øã
(
buf
, 
SPRINT_BSIZE
-1, 
øã
);

272  
buf
;

273 
	}
}

275 
	$gë_time
(*
time
, c⁄° *
°r
)

277 
t
;

278 *
p
;

280 
t
 = 
	`°πod
(
°r
, &
p
);

281 i‡(
p
 =
°r
)

284 i‡(*
p
) {

285 i‡(
	`°rˇ£cmp
(
p
, "s") == 0 || strcasecmp(p, "sec")==0 ||

286 
	`°rˇ£cmp
(
p
, "secs")==0)

287 
t
 *
TIME_UNITS_PER_SEC
;

288 i‡(
	`°rˇ£cmp
(
p
, "ms") == 0 || strcasecmp(p, "msec")==0 ||

289 
	`°rˇ£cmp
(
p
, "msecs") == 0)

290 
t
 *
TIME_UNITS_PER_SEC
/1000;

291 i‡(
	`°rˇ£cmp
(
p
, "us") == 0 || strcasecmp(p, "usec")==0 ||

292 
	`°rˇ£cmp
(
p
, "usecs") == 0)

293 
t
 *
TIME_UNITS_PER_SEC
/1000000;

298 *
time
 = 
t
;

300 
	}
}

303 
	$¥öt_time
(*
buf
, 
Àn
, 
__u32
 
time
)

305 
tmp
 = 
time
;

307 i‡(
tmp
 >
TIME_UNITS_PER_SEC
)

308 
	`¢¥ötf
(
buf
, 
Àn
, "%.1fs", 
tmp
/
TIME_UNITS_PER_SEC
);

309 i‡(
tmp
 >
TIME_UNITS_PER_SEC
/1000)

310 
	`¢¥ötf
(
buf
, 
Àn
, "%.1fms", 
tmp
/(
TIME_UNITS_PER_SEC
/1000));

312 
	`¢¥ötf
(
buf
, 
Àn
, "%uus", 
time
);

313 
	}
}

315 * 
	$•röt_time
(
__u32
 
time
, *
buf
)

317 
	`¥öt_time
(
buf
, 
SPRINT_BSIZE
-1, 
time
);

318  
buf
;

319 
	}
}

321 * 
	$•röt_ticks
(
__u32
 
ticks
, *
buf
)

323  
	`•röt_time
(
	`tc_c‹e_tick2time
(
ticks
), 
buf
);

324 
	}
}

326 
	$gë_size
(*
size
, c⁄° *
°r
)

328 
sz
;

329 *
p
;

331 
sz
 = 
	`°πod
(
°r
, &
p
);

332 i‡(
p
 =
°r
)

335 i‡(*
p
) {

336 i‡(
	`°rˇ£cmp
(
p
, "kb") == 0 || strcasecmp(p, "k")==0)

337 
sz
 *= 1024;

338 i‡(
	`°rˇ£cmp
(
p
, "gb") == 0 || strcasecmp(p, "g")==0)

339 
sz
 *= 1024*1024*1024;

340 i‡(
	`°rˇ£cmp
(
p
, "gbit") == 0)

341 
sz
 *= 1024*1024*1024/8;

342 i‡(
	`°rˇ£cmp
(
p
, "mb") == 0 || strcasecmp(p, "m")==0)

343 
sz
 *= 1024*1024;

344 i‡(
	`°rˇ£cmp
(
p
, "mbit") == 0)

345 
sz
 *= 1024*1024/8;

346 i‡(
	`°rˇ£cmp
(
p
, "kbit") == 0)

347 
sz
 *= 1024/8;

348 i‡(
	`°rˇ£cmp
(
p
, "b") != 0)

352 *
size
 = 
sz
;

354 
	}
}

356 
	$gë_size_™d_˚Œ
(*
size
, *
˚Œ_log
, *
°r
)

358 * 
¶ash
 = 
	`°rchr
(
°r
, '/');

360 i‡(
¶ash
)

361 *
¶ash
 = 0;

363 i‡(
	`gë_size
(
size
, 
°r
))

366 i‡(
¶ash
) {

367 
˚Œ
;

368 
i
;

370 i‡(
	`gë_öãgî
(&
˚Œ
, 
¶ash
+1, 0))

372 *
¶ash
 = '/';

374 
i
=0; i<32; i++) {

375 i‡((1<<
i
Ë=
˚Œ
) {

376 *
˚Œ_log
 = 
i
;

383 
	}
}

385 
	$¥öt_size
(*
buf
, 
Àn
, 
__u32
 
sz
)

387 
tmp
 = 
sz
;

389 i‡(
sz
 >1024*1024 && 
	`Ábs
(1024*1024*
	`röt
(
tmp
/(1024*1024)) - sz) < 1024)

390 
	`¢¥ötf
(
buf
, 
Àn
, "%gMb", 
	`röt
(
tmp
/(1024*1024)));

391 i‡(
sz
 >1024 && 
	`Ábs
(1024*
	`röt
(
tmp
/1024) - sz) < 16)

392 
	`¢¥ötf
(
buf
, 
Àn
, "%gKb", 
	`röt
(
tmp
/1024));

394 
	`¢¥ötf
(
buf
, 
Àn
, "%ub", 
sz
);

395 
	}
}

397 * 
	$•röt_size
(
__u32
 
size
, *
buf
)

399 
	`¥öt_size
(
buf
, 
SPRINT_BSIZE
-1, 
size
);

400  
buf
;

401 
	}
}

403 
	$¥öt_qdisc_h™dÀ
(*
buf
, 
Àn
, 
__u32
 
h
)

405 
	`¢¥ötf
(
buf
, 
Àn
, "%x:", 
	`TC_H_MAJ
(
h
)>>16);

406 
	}
}

408 * 
	$•röt_qdisc_h™dÀ
(
__u32
 
h
, *
buf
)

410 
	`¥öt_qdisc_h™dÀ
(
buf
, 
SPRINT_BSIZE
-1, 
h
);

411  
buf
;

412 
	}
}

414 * 
	$a˘i⁄_n2a
(
a˘i⁄
, *
buf
, 
Àn
)

416 
a˘i⁄
) {

420 
TC_ACT_OK
:

423 
TC_ACT_SHOT
:

426 
TC_ACT_RECLASSIFY
:

428 
TC_ACT_PIPE
:

430 
TC_ACT_STOLEN
:

433 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
a˘i⁄
);

434  
buf
;

436 
	}
}

438 
	$a˘i⁄_a2n
(*
¨g
, *
ªsu…
)

440 
ªs
;

442 i‡(
	`m©ches
(
¨g
, "continue") == 0)

443 
ªs
 = -1;

444 i‡(
	`m©ches
(
¨g
, "drop") == 0)

445 
ªs
 = 
TC_ACT_SHOT
;

446 i‡(
	`m©ches
(
¨g
, "shot") == 0)

447 
ªs
 = 
TC_ACT_SHOT
;

448 i‡(
	`m©ches
(
¨g
, "pass") == 0)

449 
ªs
 = 
TC_ACT_OK
;

450 i‡(
	`°rcmp
(
¨g
, "ok") == 0)

451 
ªs
 = 
TC_ACT_OK
;

452 i‡(
	`m©ches
(
¨g
, "reclassify") == 0)

453 
ªs
 = 
TC_ACT_RECLASSIFY
;

455 
dummy
;

456 i‡(
	`ssˇnf
(
¨g
, "%d%c", &
ªs
, &
dummy
) != 1)

459 *
ªsu…
 = 
ªs
;

461 
	}
}

463 
	$gë_lökœyî
(*
vÆ
, c⁄° *
¨g
)

465 
ªs
;

467 i‡(
	`m©ches
(
¨g
, "ethernet") == 0)

468 
ªs
 = 
LINKLAYER_ETHERNET
;

469 i‡(
	`m©ches
(
¨g
, "atm") == 0)

470 
ªs
 = 
LINKLAYER_ATM
;

471 i‡(
	`m©ches
(
¨g
, "adsl") == 0)

472 
ªs
 = 
LINKLAYER_ATM
;

476 *
vÆ
 = 
ªs
;

478 
	}
}

480 
	$¥öt_lökœyî
(*
buf
, 
Àn
, 
lökœyî
)

482 
lökœyî
) {

483 
LINKLAYER_UNSPEC
:

484 
	`¢¥ötf
(
buf
, 
Àn
, "%s", "unspec");

486 
LINKLAYER_ETHERNET
:

487 
	`¢¥ötf
(
buf
, 
Àn
, "%s", "ethernet");

489 
LINKLAYER_ATM
:

490 
	`¢¥ötf
(
buf
, 
Àn
, "%s", "atm");

493 
	`¢¥ötf
(
buf
, 
Àn
, "%s", "unknown");

496 
	}
}

498 *
	$•röt_lökœyî
(
lökœyî
, *
buf
)

500 
	`¥öt_lökœyî
(
buf
, 
SPRINT_BSIZE
-1, 
lökœyî
);

501  
buf
;

502 
	}
}

504 
	$¥öt_tm
(
FILE
 * 
f
, c⁄° 
tcf_t
 *
tm
)

506 
hz
 = 
	`gë_u£r_hz
();

507 i‡(
tm
->
ö°Æl
 != 0)

508 
	`Ârötf
(
f
, " in°ÆÀd %u sec", ()(
tm
->
ö°Æl
/
hz
));

509 i‡(
tm
->
œ°u£
 != 0)

510 
	`Ârötf
(
f
, " u£d %u sec", ()(
tm
->
œ°u£
/
hz
));

511 i‡(
tm
->
expúes
 != 0)

512 
	`Ârötf
(
f
, "Éxpúe†%u sec", ()(
tm
->
expúes
/
hz
));

513 
	}
}

515 
	$¥öt_tc°©s2_©å
(
FILE
 *
Â
, 
π©å
 *
πa
, *
¥efix
, π©å **
x°©s
)

517 
	`SPRINT_BUF
(
b1
);

518 
π©å
 *
tbs
[
TCA_STATS_MAX
 + 1];

520 
	`∑r£_π©å_√°ed
(
tbs
, 
TCA_STATS_MAX
, 
πa
);

522 i‡(
tbs
[
TCA_STATS_BASIC
]) {

523 
g√t_°©s_basic
 
bs
 = {0};

524 
	`mem˝y
(&
bs
, 
	`RTA_DATA
(
tbs
[
TCA_STATS_BASIC
]), 
	`MIN
(
	`RTA_PAYLOAD
(tbs[TCA_STATS_BASIC]), (bs)));

525 
	`Ârötf
(
Â
, "%sSent %llu bytes %uÖkt",

526 
¥efix
, (Ë
bs
.
byãs
, bs.
∑ckës
);

529 i‡(
tbs
[
TCA_STATS_QUEUE
]) {

530 
g√t_°©s_queue
 
q
 = {0};

531 
	`mem˝y
(&
q
, 
	`RTA_DATA
(
tbs
[
TCA_STATS_QUEUE
]), 
	`MIN
(
	`RTA_PAYLOAD
(tbs[TCA_STATS_QUEUE]), (q)));

532 
	`Ârötf
(
Â
, " (dropped %u, overlimits %uÑequeues %u) ",

533 
q
.
dr›s
, q.
ovîlimôs
, q.
ªqueues
);

536 i‡(
tbs
[
TCA_STATS_RATE_EST64
]) {

537 
g√t_°©s_øã_e°64
 
ª
 = {0};

539 
	`mem˝y
(&
ª
, 
	`RTA_DATA
(
tbs
[
TCA_STATS_RATE_EST64
]),

540 
	`MIN
(
	`RTA_PAYLOAD
(
tbs
[
TCA_STATS_RATE_EST64
]),

541 (
ª
)));

542 
	`Ârötf
(
Â
, "\n%srate %s %llupps ",

543 
¥efix
, 
	`•röt_øã
(
ª
.
bps
, 
b1
),Ñe.
µs
);

544 } i‡(
tbs
[
TCA_STATS_RATE_EST
]) {

545 
g√t_°©s_øã_e°
 
ª
 = {0};

547 
	`mem˝y
(&
ª
, 
	`RTA_DATA
(
tbs
[
TCA_STATS_RATE_EST
]),

548 
	`MIN
(
	`RTA_PAYLOAD
(
tbs
[
TCA_STATS_RATE_EST
]), (
ª
)));

549 
	`Ârötf
(
Â
, "\n%srate %s %upps ",

550 
¥efix
, 
	`•röt_øã
(
ª
.
bps
, 
b1
),Ñe.
µs
);

553 i‡(
tbs
[
TCA_STATS_QUEUE
]) {

554 
g√t_°©s_queue
 
q
 = {0};

555 
	`mem˝y
(&
q
, 
	`RTA_DATA
(
tbs
[
TCA_STATS_QUEUE
]), 
	`MIN
(
	`RTA_PAYLOAD
(tbs[TCA_STATS_QUEUE]), (q)));

556 i‡(!
tbs
[
TCA_STATS_RATE_EST
])

557 
	`Ârötf
(
Â
, "\n%s", 
¥efix
);

558 
	`Ârötf
(
Â
, "backlog %s %upÑequeues %u ",

559 
	`•röt_size
(
q
.
backlog
, 
b1
), q.
qÀn
, q.
ªqueues
);

562 i‡(
x°©s
)

563 *
x°©s
 = 
tbs
[
TCA_STATS_APP
] ? : 
NULL
;

564 
	}
}

566 
	$¥öt_tc°©s_©å
(
FILE
 *
Â
, 
π©å
 *
tb
[], *
¥efix
, π©å **
x°©s
)

568 
	`SPRINT_BUF
(
b1
);

570 i‡(
tb
[
TCA_STATS2
]) {

571 
	`¥öt_tc°©s2_©å
(
Â
, 
tb
[
TCA_STATS2
], 
¥efix
, 
x°©s
);

572 i‡(
x°©s
 && 
NULL
 == *xstats)

573 
com∑t_x°©s
;

577 i‡(
tb
[
TCA_STATS
]) {

578 
tc_°©s
 
°
;

581 
	`mem£t
(&
°
, 0, (st));

582 
	`mem˝y
(&
°
, 
	`RTA_DATA
(
tb
[
TCA_STATS
]), 
	`MIN
(
	`RTA_PAYLOAD
(tb[TCA_STATS]), (st)));

584 
	`Ârötf
(
Â
, "%sSent %llu bytes %uÖkts (dropped %u, overlimits %u) ",

585 
¥efix
, ()
°
.
byãs
, st.
∑ckës
, st.
dr›s
,

586 
°
.
ovîlimôs
);

588 i‡(
°
.
bps
 || st.
µs
 || st.
qÀn
 || st.
backlog
) {

589 
	`Ârötf
(
Â
, "\n%s", 
¥efix
);

590 i‡(
°
.
bps
 || st.
µs
) {

591 
	`Ârötf
(
Â
, "rate ");

592 i‡(
°
.
bps
)

593 
	`Ârötf
(
Â
, "%†", 
	`•röt_øã
(
°
.
bps
, 
b1
));

594 i‡(
°
.
µs
)

595 
	`Ârötf
(
Â
, "%uµ†", 
°
.
µs
);

597 i‡(
°
.
qÀn
 || st.
backlog
) {

598 
	`Ârötf
(
Â
, "backlog ");

599 i‡(
°
.
backlog
)

600 
	`Ârötf
(
Â
, "%†", 
	`•röt_size
(
°
.
backlog
, 
b1
));

601 i‡(
°
.
qÀn
)

602 
	`Ârötf
(
Â
, "%u∞", 
°
.
qÀn
);

607 
com∑t_x°©s
:

608 i‡(
tb
[
TCA_XSTATS
] && 
x°©s
)

609 *
x°©s
 = 
tb
[
TCA_XSTATS
];

610 
	}
}

	@tc/tc_util.h

1 #i‚de‡
_TC_UTIL_H_


2 
	#_TC_UTIL_H_
 1

	)

4 
	#MAX_MSG
 16384

	)

5 
	~<löux/pkt_sched.h
>

6 
	~<löux/pkt_˛s.h
>

7 
	~<löux/gí_°©s.h
>

8 
	~"tc_c‹e.h
"

11 #i‚de‡
TCA_PRIO_MAX


14 
	mTCA_PRIO_UNSPEC
,

15 
	mTCA_PRIO_MQ
,

16 
	m__TCA_PRIO_MAX


19 
	#TCA_PRIO_MAX
 (
__TCA_PRIO_MAX
 - 1)

	)

22 
	sqdisc_utû
 {

23 
qdisc_utû
 *
	m√xt
;

24 c⁄° *
	mid
;

25 (*
	m∑r£_q›t
)(
qdisc_utû
 *
	mqu
, 
	m¨gc
, **
	m¨gv
, 
∆msghdr
 *
	mn
);

26 (*
	m¥öt_q›t
)(
qdisc_utû
 *
	mqu
, 
FILE
 *
	mf
, 
π©å
 *
	m›t
);

27 (*
	m¥öt_x°©s
)(
qdisc_utû
 *
	mqu
, 
FILE
 *
	mf
, 
π©å
 *
	mx°©s
);

29 (*
	m∑r£_c›t
)(
qdisc_utû
 *
	mqu
, 
	m¨gc
, **
	m¨gv
, 
∆msghdr
 *
	mn
);

30 (*
	m¥öt_c›t
)(
qdisc_utû
 *
	mqu
, 
FILE
 *
	mf
, 
π©å
 *
	m›t
);

33 
__u16
 
f_¥Ÿo
;

34 
	sfûãr_utû
 {

35 
fûãr_utû
 *
	m√xt
;

36 
	mid
[16];

37 (*
	m∑r£_f›t
)(
fûãr_utû
 *
	mqu
, *
	mfh™dÀ
, 
	m¨gc
,

38 **
	m¨gv
, 
∆msghdr
 *
	mn
);

39 (*
	m¥öt_f›t
)(
fûãr_utû
 *
	mqu
, 
FILE
 *
	mf
, 
π©å
 *
	m›t
, 
__u32
 
	mfh™dÀ
);

42 
	sa˘i⁄_utû
 {

43 
a˘i⁄_utû
 *
	m√xt
;

44 
	mid
[16];

45 (*
	m∑r£_a›t
)(
a˘i⁄_utû
 *
	ma
, *
	m¨gc
, ***
	m¨gv
,

46 
	mcode
, 
∆msghdr
 *
	mn
);

47 (*
	m¥öt_a›t
)(
a˘i⁄_utû
 *
	mau
, 
FILE
 *
	mf
, 
π©å
 *
	m›t
);

48 (*
	m¥öt_x°©s
)(
a˘i⁄_utû
 *
	mau
, 
FILE
 *
	mf
, 
π©å
 *
	mx°©s
);

51 
	sexec_utû
 {

52 
exec_utû
 *
	m√xt
;

53 
	mid
[16];

54 (*
	m∑r£_e›t
)(
exec_utû
 *
	meu
, 
	m¨gc
, **
	m¨gv
);

57 c⁄° *
gë_tc_lib
();

59 
qdisc_utû
 *
gë_qdisc_köd
(c⁄° *
°r
);

60 
fûãr_utû
 *
gë_fûãr_köd
(c⁄° *
°r
);

62 
gë_qdisc_h™dÀ
(
__u32
 *
h
, c⁄° *
°r
);

63 
gë_øã
(*
øã
, c⁄° *
°r
);

64 
gë_øã64
(
__u64
 *
øã
, c⁄° *
°r
);

65 
gë_size
(*
size
, c⁄° *
°r
);

66 
gë_size_™d_˚Œ
(*
size
, *
˚Œ_log
, *
°r
);

67 
gë_time
(*
time
, c⁄° *
°r
);

68 
gë_lökœyî
(*
vÆ
, c⁄° *
¨g
);

70 
¥öt_øã
(*
buf
, 
Àn
, 
__u64
 
øã
);

71 
¥öt_size
(*
buf
, 
Àn
, 
__u32
 
size
);

72 
¥öt_qdisc_h™dÀ
(*
buf
, 
Àn
, 
__u32
 
h
);

73 
¥öt_time
(*
buf
, 
Àn
, 
__u32
 
time
);

74 
¥öt_lökœyî
(*
buf
, 
Àn
, 
lökœyî
);

76 * 
•röt_øã
(
__u64
 
øã
, *
buf
);

77 * 
•röt_size
(
__u32
 
size
, *
buf
);

78 * 
•röt_qdisc_h™dÀ
(
__u32
 
h
, *
buf
);

79 * 
•röt_tc_˛assid
(
__u32
 
h
, *
buf
);

80 * 
•röt_time
(
__u32
 
time
, *
buf
);

81 * 
•röt_ticks
(
__u32
 
ticks
, *
buf
);

82 * 
•röt_lökœyî
(
lökœyî
, *
buf
);

84 
¥öt_tc°©s_©å
(
FILE
 *
Â
, 
π©å
 *
tb
[], *
¥efix
, π©å **
x°©s
);

85 
¥öt_tc°©s2_©å
(
FILE
 *
Â
, 
π©å
 *
πa
, *
¥efix
, π©å **
x°©s
);

87 
gë_tc_˛assid
(
__u32
 *
h
, c⁄° *
°r
);

88 
¥öt_tc_˛assid
(*
buf
, 
Àn
, 
__u32
 
h
);

89 * 
•röt_tc_˛assid
(
__u32
 
h
, *
buf
);

91 
tc_¥öt_pﬁi˚
(
FILE
 *
f
, 
π©å
 *
tb
);

92 
∑r£_pﬁi˚
(*, ***, , 
∆msghdr
 *);

94 *
a˘i⁄_n2a
(
a˘i⁄
, *
buf
, 
Àn
);

95 
a˘i⁄_a2n
(*
¨g
, *
ªsu…
);

96 
a˘_∑r£_pﬁi˚
(
a˘i⁄_utû
 *
a
,*, ***, , 
∆msghdr
 *);

97 
¥öt_pﬁi˚
(
a˘i⁄_utû
 *
a
, 
FILE
 *
f
,

98 
π©å
 *
tb
);

99 
pﬁi˚_¥öt_x°©s
(
a˘i⁄_utû
 *
a
,
FILE
 *
f
,

100 
π©å
 *
tb
);

101 
tc_¥öt_a˘i⁄
(
FILE
 *
f
, c⁄° 
π©å
 *
tb
);

102 
tc_¥öt_ùt
(
FILE
 *
f
, c⁄° 
π©å
 *
tb
);

103 
∑r£_a˘i⁄
(*, ***, , 
∆msghdr
 *);

104 
¥öt_tm
(
FILE
 *
f
, c⁄° 
tcf_t
 *
tm
);

105 
¥io_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
);

107 
˛s_«mes_öô
(*
∑th
);

108 
˛s_«mes_unöô
();

	@tipc/bearer.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<√tdb.h
>

16 
	~<î∫o.h
>

18 
	~<löux/tùc_√éök.h
>

19 
	~<löux/tùc.h
>

20 
	~<löux/gíëlök.h
>

22 
	~<libm∆/libm∆.h
>

23 
	~<sys/sockë.h
>

25 
	~"cmdl.h
"

26 
	~"msg.h
"

27 
	~"bóªr.h
"

29 
	$_¥öt_bóªr_›ts
()

31 
	`Ârötf
(
°dîr
,

36 
	}
}

38 
	$_¥öt_bóªr_medü
()

40 
	`Ârötf
(
°dîr
,

45 
	}
}

47 
	$cmd_bóªr_íabÀ_l2_hñp
(
cmdl
 *cmdl)

49 
	`Ârötf
(
°dîr
,

54 
cmdl
->
¨gv
[0]);

55 
	}
}

57 
	$cmd_bóªr_íabÀ_udp_hñp
(
cmdl
 *cmdl)

59 
	`Ârötf
(
°dîr
,

67 
cmdl
->
¨gv
[0]);

68 
	}
}

70 
	$íabÀ_l2_bóªr
(
∆msghdr
 *
∆h
, 
›t
 *
›ts
,

71 
cmdl
 *cmdl)

73 
›t
 *opt;

74 
id
[
TIPC_MAX_BEARER_NAME
];

76 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "device"))) {

77 
	`Ârötf
(
°dîr
, "error: missing bearer device\n");

78  -
EINVAL
;

80 
	`¢¥ötf
(
id
, (id), "ëh:%s", 
›t
->
vÆ
);

81 
	`m∆_©å_put_°rz
(
∆h
, 
TIPC_NLA_BEARER_NAME
, 
id
);

84 
	}
}

86 
	$gë_√tid_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

88 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

89 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

90 
∆©å
 *
©ås
[
TIPC_NLA_NET_MAX
 + 1] = {};

91 *
√tid
 = (*)
d©a
;

93 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

94 i‡(!
öfo
[
TIPC_NLA_NET
])

95  
MNL_CB_ERROR
;

96 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_NET
], 
∑r£_©ås
, 
©ås
);

97 i‡(!
©ås
[
TIPC_NLA_NET_ID
])

98  
MNL_CB_ERROR
;

99 *
√tid
 = 
	`m∆_©å_gë_u32
(
©ås
[
TIPC_NLA_NET_ID
]);

101  
MNL_CB_OK
;

102 
	}
}

104 
	$gíî©e_mu…iˇ°
(
af
, *
buf
, 
bufsize
)

106 
√tid
;

107 
m∆_msg
[
MNL_SOCKET_BUFFER_SIZE
];

108 
∆msghdr
 *
∆h
;

110 i‡(!(
∆h
 = 
	`msg_öô
(
m∆_msg
, 
TIPC_NL_NET_GET
))) {

111 
	`Ârötf
(
°dîr
, "error, message initialization failed\n");

114 i‡(
	`msg_dumpô
(
∆h
, 
gë_√tid_cb
, &
√tid
)) {

115 
	`Ârötf
(
°dîr
, "error, failedÅo fetch TIPCÇetwork id from kernel\n");

116  -
EINVAL
;

118 i‡(
af
 =
AF_INET
)

119 
	`¢¥ötf
(
buf
, 
bufsize
, "228.0.%u.%u", (
√tid
>>8) & 0xFF,Çetid & 0xFF);

121 
	`¢¥ötf
(
buf
, 
bufsize
, "ff02::%u", 
√tid
);

124 
	}
}

126 
	$íabÀ_udp_bóªr
(
∆msghdr
 *
∆h
, 
›t
 *
›ts
,

127 
cmdl
 *cmdl)

129 
îr
;

130 
›t
 *opt;

131 
∆©å
 *
√°
;

132 
buf
[
INET6_ADDRSTRLEN
];

133 *
lo˝‹t
 = "6118";

134 *
ªmp‹t
 = "6118";

135 *
locù
 = 
NULL
;

136 *
ªmù
 = 
NULL
;

137 
«me
[
TIPC_MAX_BEARER_NAME
];

138 
addröfo
 *
loc
 = 
NULL
;

139 
addröfo
 *
ªm
 = 
NULL
;

140 
addröfo
 
höts
 = {

141 .
ai_Ámûy
 = 
AF_UNSPEC
,

142 .
ai_sockty≥
 = 
SOCK_DGRAM


145 i‡(
hñp_Êag
) {

146 
	`cmd_bóªr_íabÀ_udp_hñp
(
cmdl
);

148  -
EINVAL
;

151 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "name"))) {

152 
	`Ârötf
(
°dîr
, "error, udp bearerÇame missing\n");

153 
	`cmd_bóªr_íabÀ_udp_hñp
(
cmdl
);

154  -
EINVAL
;

156 
	`¢¥ötf
(
«me
, “ame), "udp:%s", 
›t
->
vÆ
);

158 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "localip"))) {

159 
	`Ârötf
(
°dîr
, "error, udp bearerÜocalip missing\n");

160 
	`cmd_bóªr_íabÀ_udp_hñp
(
cmdl
);

161  -
EINVAL
;

163 
locù
 = 
›t
->
vÆ
;

165 i‡((
›t
 = 
	`gë_›t
(
›ts
, "remoteip")))

166 
ªmù
 = 
›t
->
vÆ
;

168 i‡((
›t
 = 
	`gë_›t
(
›ts
, "localport")))

169 
lo˝‹t
 = 
›t
->
vÆ
;

171 i‡((
›t
 = 
	`gë_›t
(
›ts
, "remoteport")))

172 
ªmp‹t
 = 
›t
->
vÆ
;

174 i‡((
îr
 = 
	`gëaddröfo
(
locù
, 
lo˝‹t
, &
höts
, &
loc
))) {

175 
	`Ârötf
(
°dîr
, "UDPÜocaláddressÉrror: %s\n",

176 
	`gai_°ªº‹
(
îr
));

177  
îr
;

180 i‡(!
ªmù
) {

181 i‡(
	`gíî©e_mu…iˇ°
(
loc
->
ai_Ámûy
, 
buf
, (buf))) {

182 
	`Ârötf
(
°dîr
, "FailedÅo generate multicastáddress\n");

183  -
EINVAL
;

185 
ªmù
 = 
buf
;

188 i‡((
îr
 = 
	`gëaddröfo
(
ªmù
, 
ªmp‹t
, &
höts
, &
ªm
))) {

189 
	`Ârötf
(
°dîr
, "UDPÑemoteáddressÉrror: %s\n",

190 
	`gai_°ªº‹
(
îr
));

191 
	`‰ìaddröfo
(
loc
);

192  
îr
;

195 i‡(
ªm
->
ai_Ámûy
 !
loc
->ai_family) {

196 
	`Ârötf
(
°dîr
, "UDPÜocalándÑemote AF mismatch\n");

197  -
EINVAL
;

200 
	`m∆_©å_put_°rz
(
∆h
, 
TIPC_NLA_BEARER_NAME
, 
«me
);

202 
√°
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_BEARER_UDP_OPTS
);

203 
	`m∆_©å_put
(
∆h
, 
TIPC_NLA_UDP_LOCAL
, 
loc
->
ai_addæí
,Üoc->
ai_addr
);

204 
	`m∆_©å_put
(
∆h
, 
TIPC_NLA_UDP_REMOTE
, 
ªm
->
ai_addæí
,Ñem->
ai_addr
);

205 
	`m∆_©å_√°_íd
(
∆h
, 
√°
);

207 
	`‰ìaddröfo
(
ªm
);

208 
	`‰ìaddröfo
(
loc
);

211 
	}
}

213 
	$cmd_bóªr_íabÀ_hñp
(
cmdl
 *cmdl)

215 
	`Ârötf
(
°dîr
,

220 
cmdl
->
¨gv
[0]);

221 
	`_¥öt_bóªr_medü
();

222 
	}
}

224 
	$cmd_bóªr_íabÀ
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

225 
cmdl
 *cmdl, *
d©a
)

227 
îr
;

228 
›t
 *opt;

229 
∆©å
 *
√°
;

230 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

231 *
medü
;

232 
›t
 
›ts
[] = {

233 { "devi˚", 
NULL
 },

234 { "domaö", 
NULL
 },

235 { "loˇlù", 
NULL
 },

236 { "loˇÕ‹t", 
NULL
 },

237 { "medü", 
NULL
 },

238 { "«me", 
NULL
 },

239 { "¥i‹ôy", 
NULL
 },

240 { "ªmŸeù", 
NULL
 },

241 { "ªmŸï‹t", 
NULL
 },

242 { 
NULL
 }

245 i‡(
	`∑r£_›ts
(
›ts
, 
cmdl
) < 0) {

246 i‡(
hñp_Êag
)

247 (
cmd
->
hñp
)(
cmdl
);

248  -
EINVAL
;

251 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "media"))) {

252 i‡(
hñp_Êag
)

253 (
cmd
->
hñp
)(
cmdl
);

255 
	`Ârötf
(
°dîr
, "error, missing bearer media\n");

256  -
EINVAL
;

258 
medü
 = 
›t
->
vÆ
;

260 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_BEARER_ENABLE
))) {

261 
	`Ârötf
(
°dîr
, "error: message initialisation failed\n");

264 
√°
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_BEARER
);

266 i‡((
›t
 = 
	`gë_›t
(
›ts
, "domain")))

267 
	`m∆_©å_put_u32
(
∆h
, 
TIPC_NLA_BEARER_DOMAIN
, 
	`©oi
(
›t
->
vÆ
));

269 i‡((
›t
 = 
	`gë_›t
(
›ts
, "priority"))) {

270 
∆©å
 *
¥›s
;

272 
¥›s
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_BEARER_PROP
);

273 
	`m∆_©å_put_u32
(
∆h
, 
TIPC_NLA_PROP_PRIO
, 
	`©oi
(
›t
->
vÆ
));

274 
	`m∆_©å_√°_íd
(
∆h
, 
¥›s
);

277 i‡(
	`°rcmp
(
medü
, "udp") == 0) {

278 i‡(
hñp_Êag
) {

279 
	`cmd_bóªr_íabÀ_udp_hñp
(
cmdl
);

280  -
EINVAL
;

282 i‡((
îr
 = 
	`íabÀ_udp_bóªr
(
∆h
, 
›ts
, 
cmdl
)))

283  
îr
;

284 } i‡((
	`°rcmp
(
medü
, "eth") == 0) || (strcmp(media, "udp") == 0)) {

285 i‡(
hñp_Êag
) {

286 
	`cmd_bóªr_íabÀ_l2_hñp
(
cmdl
);

287  -
EINVAL
;

289 i‡((
îr
 = 
	`íabÀ_l2_bóªr
(
∆h
, 
›ts
, 
cmdl
)))

290  
îr
;

292 
	`Ârötf
(
°dîr
, "îr‹, invÆid medüÅy≥ \"%s\"\n", 
medü
);

293  -
EINVAL
;

296 
	`m∆_©å_√°_íd
(
∆h
, 
√°
);

298  
	`msg_doô
(
∆h
, 
NULL
, NULL);

299 
	}
}

301 
	$add_l2_bóªr
(
∆msghdr
 *
∆h
, 
›t
 *
›ts
)

303 
›t
 *opt;

304 
id
[
TIPC_MAX_BEARER_NAME
];

306 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "device"))) {

307 
	`Ârötf
(
°dîr
, "error: missing bearer device\n");

308  -
EINVAL
;

310 
	`¢¥ötf
(
id
, (id), "ëh:%s", 
›t
->
vÆ
);

312 
	`m∆_©å_put_°rz
(
∆h
, 
TIPC_NLA_BEARER_NAME
, 
id
);

315 
	}
}

317 
	$add_udp_bóªr
(
∆msghdr
 *
∆h
, 
›t
 *
›ts
)

319 
›t
 *opt;

320 
id
[
TIPC_MAX_BEARER_NAME
];

322 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "name"))) {

323 
	`Ârötf
(
°dîr
, "error: missing bearerÇame\n");

324  -
EINVAL
;

326 
	`¢¥ötf
(
id
, (id), "udp:%s", 
›t
->
vÆ
);

328 
	`m∆_©å_put_°rz
(
∆h
, 
TIPC_NLA_BEARER_NAME
, 
id
);

331 
	}
}

333 
	$cmd_bóªr_dißbÀ_l2_hñp
(
cmdl
 *cmdl)

335 
	`Ârötf
(
°dîr
, "Usage: %s bearer disable media udp device DEVICE\n",

336 
cmdl
->
¨gv
[0]);

337 
	}
}

339 
	$cmd_bóªr_dißbÀ_udp_hñp
(
cmdl
 *cmdl)

341 
	`Ârötf
(
°dîr
, "Usage: %s bearer disable media udpÇame NAME\n",

342 
cmdl
->
¨gv
[0]);

343 
	}
}

345 
	$cmd_bóªr_dißbÀ_hñp
(
cmdl
 *cmdl)

347 
	`Ârötf
(
°dîr
, "Usage: %s bearer disable media MEDIA ARGS...\n",

348 
cmdl
->
¨gv
[0]);

349 
	`_¥öt_bóªr_medü
();

350 
	}
}

352 
	$cmd_bóªr_dißbÀ
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

353 
cmdl
 *cmdl, *
d©a
)

355 
îr
;

356 *
medü
;

357 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

358 
∆©å
 *
√°
;

359 
›t
 *opt;

360 
›t
 
›ts
[] = {

361 { "devi˚", 
NULL
 },

362 { "«me", 
NULL
 },

363 { "medü", 
NULL
 },

364 { 
NULL
 }

367 i‡(
	`∑r£_›ts
(
›ts
, 
cmdl
) < 0) {

368 i‡(
hñp_Êag
)

369 (
cmd
->
hñp
)(
cmdl
);

370  -
EINVAL
;

373 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "media"))) {

374 i‡(
hñp_Êag
)

375 (
cmd
->
hñp
)(
cmdl
);

377 
	`Ârötf
(
°dîr
, "error, missing bearer media\n");

378  -
EINVAL
;

380 
medü
 = 
›t
->
vÆ
;

382 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_BEARER_DISABLE
))) {

383 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

387 
√°
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_BEARER
);

389 i‡(
	`°rcmp
(
medü
, "udp") == 0) {

390 i‡(
hñp_Êag
) {

391 
	`cmd_bóªr_dißbÀ_udp_hñp
(
cmdl
);

392  -
EINVAL
;

394 i‡((
îr
 = 
	`add_udp_bóªr
(
∆h
, 
›ts
)))

395  
îr
;

396 } i‡((
	`°rcmp
(
medü
, "eth") == 0) || (strcmp(media, "udp") == 0)) {

397 i‡(
hñp_Êag
) {

398 
	`cmd_bóªr_dißbÀ_l2_hñp
(
cmdl
);

399  -
EINVAL
;

401 i‡((
îr
 = 
	`add_l2_bóªr
(
∆h
, 
›ts
)))

402  
îr
;

404 
	`Ârötf
(
°dîr
, "îr‹, invÆid medüÅy≥ \"%s\"\n", 
medü
);

405  -
EINVAL
;

407 
	`m∆_©å_√°_íd
(
∆h
, 
√°
);

409  
	`msg_doô
(
∆h
, 
NULL
, NULL);

411 
	}
}

413 
	$cmd_bóªr_£t_hñp
(
cmdl
 *cmdl)

415 
	`Ârötf
(
°dîr
, "Usage: %s bearer set OPTION media MEDIA ARGS...\n",

416 
cmdl
->
¨gv
[0]);

417 
	`_¥öt_bóªr_›ts
();

418 
	`_¥öt_bóªr_medü
();

419 
	}
}

421 
	$cmd_bóªr_£t_udp_hñp
(
cmdl
 *cmdl)

423 
	`Ârötf
(
°dîr
, "Usage: %s bearer set OPTION media udpÇame NAME\n\n",

424 
cmdl
->
¨gv
[0]);

425 
	`_¥öt_bóªr_›ts
();

426 
	}
}

428 
	$cmd_bóªr_£t_l2_hñp
(
cmdl
 *cmdl, *
medü
)

430 
	`Ârötf
(
°dîr
,

432 
cmdl
->
¨gv
[0], 
medü
);

433 
	`_¥öt_bóªr_›ts
();

434 
	}
}

436 
	$cmd_bóªr_£t_¥›
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

437 
cmdl
 *cmdl, *
d©a
)

439 
îr
;

440 
vÆ
;

441 
¥›
;

442 *
medü
;

443 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

444 
∆©å
 *
¥›s
;

445 
∆©å
 *
©ås
;

446 
›t
 *opt;

447 
›t
 
›ts
[] = {

448 { "devi˚", 
NULL
 },

449 { "medü", 
NULL
 },

450 { "«me", 
NULL
 },

451 { 
NULL
 }

454 i‡(
	`°rcmp
(
cmd
->cmd, "priority") == 0)

455 
¥›
 = 
TIPC_NLA_PROP_PRIO
;

456 i‡((
	`°rcmp
(
cmd
->cmd, "tolerance") == 0))

457 
¥›
 = 
TIPC_NLA_PROP_TOL
;

458 i‡((
	`°rcmp
(
cmd
->cmd, "window") == 0))

459 
¥›
 = 
TIPC_NLA_PROP_WIN
;

461  -
EINVAL
;

463 i‡(
hñp_Êag
) {

464 (
cmd
->
hñp
)(
cmdl
);

465  -
EINVAL
;

468 i‡(
cmdl
->
›töd
 >cmdl->
¨gc
) {

469 
	`Ârötf
(
°dîr
, "error, missing value\n");

470  -
EINVAL
;

472 
vÆ
 = 
	`©oi
(
	`shi·_cmdl
(
cmdl
));

474 i‡(
	`∑r£_›ts
(
›ts
, 
cmdl
) < 0)

475  -
EINVAL
;

477 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_BEARER_SET
))) {

478 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

481 
©ås
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_BEARER
);

483 
¥›s
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_BEARER_PROP
);

484 
	`m∆_©å_put_u32
(
∆h
, 
¥›
, 
vÆ
);

485 
	`m∆_©å_√°_íd
(
∆h
, 
¥›s
);

487 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "media"))) {

488 
	`Ârötf
(
°dîr
, "error, missing media\n");

489  -
EINVAL
;

491 
medü
 = 
›t
->
vÆ
;

493 i‡(
	`°rcmp
(
medü
, "udp") == 0) {

494 i‡(
hñp_Êag
) {

495 
	`cmd_bóªr_£t_udp_hñp
(
cmdl
);

496  -
EINVAL
;

498 i‡((
îr
 = 
	`add_udp_bóªr
(
∆h
, 
›ts
)))

499  
îr
;

500 } i‡((
	`°rcmp
(
medü
, "eth") == 0) || (strcmp(media, "udp") == 0)) {

501 i‡(
hñp_Êag
) {

502 
	`cmd_bóªr_£t_l2_hñp
(
cmdl
, 
medü
);

503  -
EINVAL
;

505 i‡((
îr
 = 
	`add_l2_bóªr
(
∆h
, 
›ts
)))

506  
îr
;

508 
	`Ârötf
(
°dîr
, "îr‹, invÆid medüÅy≥ \"%s\"\n", 
medü
);

509  -
EINVAL
;

511 
	`m∆_©å_√°_íd
(
∆h
, 
©ås
);

513  
	`msg_doô
(
∆h
, 
NULL
, NULL);

514 
	}
}

516 
	$cmd_bóªr_£t
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

517 
cmdl
 *cmdl, *
d©a
)

519 c⁄° 
cmd
 
cmds
[] = {

520 { "¥i‹ôy", 
cmd_bóªr_£t_¥›
, 
cmd_bóªr_£t_hñp
 },

521 { "tﬁî™˚", 
cmd_bóªr_£t_¥›
, 
cmd_bóªr_£t_hñp
 },

522 { "wödow", 
cmd_bóªr_£t_¥›
, 
cmd_bóªr_£t_hñp
 },

523 { 
NULL
 }

526  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

527 
	}
}

529 
	$cmd_bóªr_gë_hñp
(
cmdl
 *cmdl)

531 
	`Ârötf
(
°dîr
, "Usage: %s bearer get OPTION media MEDIA ARGS...\n",

532 
cmdl
->
¨gv
[0]);

533 
	`_¥öt_bóªr_›ts
();

534 
	`_¥öt_bóªr_medü
();

535 
	}
}

537 
	$cmd_bóªr_gë_udp_hñp
(
cmdl
 *cmdl)

539 
	`Ârötf
(
°dîr
, "Usage: %s bearer get OPTION media udpÇame NAME\n\n",

540 
cmdl
->
¨gv
[0]);

541 
	`_¥öt_bóªr_›ts
();

542 
	}
}

544 
	$cmd_bóªr_gë_l2_hñp
(
cmdl
 *cmdl, *
medü
)

546 
	`Ârötf
(
°dîr
,

548 
cmdl
->
¨gv
[0], 
medü
);

549 
	`_¥öt_bóªr_›ts
();

550 
	}
}

552 
	$bóªr_gë_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

554 *
¥›
 = 
d©a
;

555 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

556 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

557 
∆©å
 *
©ås
[
TIPC_NLA_BEARER_MAX
 + 1] = {};

558 
∆©å
 *
¥›s
[
TIPC_NLA_PROP_MAX
 + 1] = {};

560 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

561 i‡(!
öfo
[
TIPC_NLA_BEARER
])

562  
MNL_CB_ERROR
;

564 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_BEARER
], 
∑r£_©ås
, 
©ås
);

565 i‡(!
©ås
[
TIPC_NLA_BEARER_PROP
])

566  
MNL_CB_ERROR
;

568 
	`m∆_©å_∑r£_√°ed
(
©ås
[
TIPC_NLA_BEARER_PROP
], 
∑r£_©ås
, 
¥›s
);

569 i‡(!
¥›s
[*
¥›
])

570  
MNL_CB_ERROR
;

572 
	`¥ötf
("%u\n", 
	`m∆_©å_gë_u32
(
¥›s
[*
¥›
]));

574  
MNL_CB_OK
;

575 
	}
}

577 
	$cmd_bóªr_gë_¥›
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

578 
cmdl
 *cmdl, *
d©a
)

580 
îr
;

581 
¥›
;

582 *
medü
;

583 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

584 
∆©å
 *
©ås
;

585 
›t
 *opt;

586 
›t
 
›ts
[] = {

587 { "devi˚", 
NULL
 },

588 { "medü", 
NULL
 },

589 { "«me", 
NULL
 },

590 { 
NULL
 }

593 i‡(
	`°rcmp
(
cmd
->cmd, "priority") == 0)

594 
¥›
 = 
TIPC_NLA_PROP_PRIO
;

595 i‡((
	`°rcmp
(
cmd
->cmd, "tolerance") == 0))

596 
¥›
 = 
TIPC_NLA_PROP_TOL
;

597 i‡((
	`°rcmp
(
cmd
->cmd, "window") == 0))

598 
¥›
 = 
TIPC_NLA_PROP_WIN
;

600  -
EINVAL
;

602 i‡(
hñp_Êag
) {

603 (
cmd
->
hñp
)(
cmdl
);

604  -
EINVAL
;

607 i‡(
	`∑r£_›ts
(
›ts
, 
cmdl
) < 0)

608  -
EINVAL
;

610 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_BEARER_GET
))) {

611 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

615 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "media"))) {

616 
	`Ârötf
(
°dîr
, "error, missing media\n");

617  -
EINVAL
;

619 
medü
 = 
›t
->
vÆ
;

621 
©ås
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_BEARER
);

622 i‡(
	`°rcmp
(
medü
, "udp") == 0) {

623 i‡(
hñp_Êag
) {

624 
	`cmd_bóªr_gë_udp_hñp
(
cmdl
);

625  -
EINVAL
;

627 i‡((
îr
 = 
	`add_udp_bóªr
(
∆h
, 
›ts
)))

628  
îr
;

629 } i‡((
	`°rcmp
(
medü
, "eth") == 0) || (strcmp(media, "udp") == 0)) {

630 i‡(
hñp_Êag
) {

631 
	`cmd_bóªr_gë_l2_hñp
(
cmdl
, 
medü
);

632  -
EINVAL
;

634 i‡((
îr
 = 
	`add_l2_bóªr
(
∆h
, 
›ts
)))

635  
îr
;

637 
	`Ârötf
(
°dîr
, "îr‹, invÆid medüÅy≥ \"%s\"\n", 
medü
);

638  -
EINVAL
;

640 
	`m∆_©å_√°_íd
(
∆h
, 
©ås
);

642  
	`msg_doô
(
∆h
, 
bóªr_gë_cb
, &
¥›
);

643 
	}
}

645 
	$cmd_bóªr_gë
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

646 
cmdl
 *cmdl, *
d©a
)

648 c⁄° 
cmd
 
cmds
[] = {

649 { "¥i‹ôy", 
cmd_bóªr_gë_¥›
, 
cmd_bóªr_gë_hñp
 },

650 { "tﬁî™˚", 
cmd_bóªr_gë_¥›
, 
cmd_bóªr_gë_hñp
 },

651 { "wödow", 
cmd_bóªr_gë_¥›
, 
cmd_bóªr_gë_hñp
 },

652 { 
NULL
 }

655  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

656 
	}
}

658 
	$bóªr_li°_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

660 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

661 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

662 
∆©å
 *
©ås
[
TIPC_NLA_BEARER_MAX
 + 1] = {};

664 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

665 i‡(!
öfo
[
TIPC_NLA_BEARER
]) {

666 
	`Ârötf
(
°dîr
, "No bearer inÇetlinkÑesponse\n");

667  
MNL_CB_ERROR
;

670 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_BEARER
], 
∑r£_©ås
, 
©ås
);

671 i‡(!
©ås
[
TIPC_NLA_BEARER_NAME
]) {

672 
	`Ârötf
(
°dîr
, "BearerÇame missing inÇetlinkÑesponse\n");

673  
MNL_CB_ERROR
;

676 
	`¥ötf
("%s\n", 
	`m∆_©å_gë_°r
(
©ås
[
TIPC_NLA_BEARER_NAME
]));

678  
MNL_CB_OK
;

679 
	}
}

681 
	$cmd_bóªr_li°
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

682 
cmdl
 *cmdl, *
d©a
)

684 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

686 i‡(
hñp_Êag
) {

687 
	`Ârötf
(
°dîr
, "Ußge: %†bóª∏li°\n", 
cmdl
->
¨gv
[0]);

688  -
EINVAL
;

691 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_BEARER_GET
))) {

692 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

696  
	`msg_dumpô
(
∆h
, 
bóªr_li°_cb
, 
NULL
);

697 
	}
}

699 
	$cmd_bóªr_hñp
(
cmdl
 *cmdl)

701 
	`Ârötf
(
°dîr
,

709 "Üi° - Li° bóªrs\n", 
cmdl
->
¨gv
[0]);

710 
	}
}

712 
	$cmd_bóªr
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl,

713 *
d©a
)

715 c⁄° 
cmd
 
cmds
[] = {

716 { "dißbÀ", 
cmd_bóªr_dißbÀ
, 
cmd_bóªr_dißbÀ_hñp
 },

717 { "íabÀ", 
cmd_bóªr_íabÀ
, 
cmd_bóªr_íabÀ_hñp
 },

718 { "gë", 
cmd_bóªr_gë
, 
cmd_bóªr_gë_hñp
 },

719 { "li°", 
cmd_bóªr_li°
, 
NULL
 },

720 { "£t", 
cmd_bóªr_£t
, 
cmd_bóªr_£t_hñp
 },

721 { 
NULL
 }

724  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

725 
	}
}

	@tipc/bearer.h

12 #i‚de‡
_TIPC_BEARER_H


13 
	#_TIPC_BEARER_H


	)

15 
	~"cmdl.h
"

17 
hñp_Êag
;

19 
cmd_bóªr
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl, *
d©a
);

20 
cmd_bóªr_hñp
(
cmdl
 *cmdl);

	@tipc/cmdl.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<î∫o.h
>

16 
	~<libm∆/libm∆.h
>

18 
	~"cmdl.h
"

20 c⁄° 
cmd
 *
	$föd_cmd
(c⁄° 
cmd
 *
cmds
, *
°r
)

22 c⁄° 
cmd
 *
c
;

23 c⁄° 
cmd
 *
m©ch
 = 
NULL
;

25 
c
 = 
cmds
; c->
cmd
; c++) {

26 i‡(
	`°r°r
(
c
->
cmd
, 
°r
) != c->cmd)

28 i‡(
m©ch
)

29  
NULL
;

30 
m©ch
 = 
c
;

33  
m©ch
;

34 
	}
}

36 
›t
 *
	$föd_›t
(
›t
 *
›ts
, *
°r
)

38 
›t
 *
o
;

39 
›t
 *
m©ch
 = 
NULL
;

41 
o
 = 
›ts
; o->
key
; o++) {

42 i‡(
	`°r°r
(
o
->
key
, 
°r
) != o->key)

44 i‡(
m©ch
)

45  
NULL
;

47 
m©ch
 = 
o
;

50  
m©ch
;

51 
	}
}

53 
›t
 *
	$gë_›t
(
›t
 *
›ts
, *
key
)

55 
›t
 *
o
;

57 
o
 = 
›ts
; o->
key
; o++) {

58 i‡(
	`°rcmp
(
o
->
key
, keyË=0 && o->
vÆ
)

59  
o
;

62  
NULL
;

63 
	}
}

65 *
	$shi·_cmdl
(
cmdl
 *cmdl)

67 
√xt
;

69 i‡(
cmdl
->
›töd
 < cmdl->
¨gc
)

70 
√xt
 = (
cmdl
->
›töd
)++;

72 
√xt
 = 
cmdl
->
¨gc
;

74  
cmdl
->
¨gv
[
√xt
];

75 
	}
}

78 
	$∑r£_›ts
(
›t
 *
›ts
, 
cmdl
 *cmdl)

80 
i
;

81 
˙t
 = 0;

83 
i
 = 
cmdl
->
›töd
; i < cmdl->
¨gc
; i += 2) {

84 
›t
 *
o
;

86 
o
 = 
	`föd_›t
(
›ts
, 
cmdl
->
¨gv
[
i
]);

87 i‡(!
o
) {

88 
	`Ârötf
(
°dîr
, "error, invalid option \"%s\"\n",

89 
cmdl
->
¨gv
[
i
]);

90  -
EINVAL
;

92 
˙t
++;

93 
o
->
vÆ
 = 
cmdl
->
¨gv
[
i
 + 1];

94 
cmdl
->
›töd
 += 2;

97  
˙t
;

98 
	}
}

100 
	$run_cmd
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *
ˇŒî
,

101 c⁄° 
cmd
 *
cmds
, 
cmdl
 *cmdl, *
d©a
)

103 *
«me
;

104 c⁄° 
cmd
 *cmd;

106 i‡((
cmdl
->
›töd
Ë>cmdl->
¨gc
) {

107 i‡(
ˇŒî
->
hñp
)

108 (
ˇŒî
->
hñp
)(
cmdl
);

109  -
EINVAL
;

111 
«me
 = 
cmdl
->
¨gv
[cmdl->
›töd
];

112 (
cmdl
->
›töd
)++;

114 
cmd
 = 
	`föd_cmd
(
cmds
, 
«me
);

115 i‡(!
cmd
) {

117 i‡(
hñp_Êag
 && 
ˇŒî
->
hñp
) {

118 (
ˇŒî
->
hñp
)(
cmdl
);

120 
	`Ârötf
(
°dîr
, "îr‹, invÆid comm™d \"%s\"\n", 
«me
);

121 
	`Ârötf
(
°dîr
, "use --help for command help\n");

123  -
EINVAL
;

126  (
cmd
->
func
)(
∆h
, cmd, 
cmdl
, 
d©a
);

127 
	}
}

	@tipc/cmdl.h

12 #i‚de‡
_TIPC_CMDL_H


13 
	#_TIPC_CMDL_H


	)

15 
	~<libm∆/libm∆.h
>

17 
hñp_Êag
;

19 
	scmdl
 {

20 
	m›töd
;

21 
	m¨gc
;

22 **
	m¨gv
;

25 
	scmd
 {

26 c⁄° *
	mcmd
;

27 (*
	mfunc
)(
∆msghdr
 *
	m∆h
, c⁄° 
cmd
 *
	mcmd
,

28 
cmdl
 *
	mcmdl
, *
	md©a
);

29 (*
	mhñp
)(
cmdl
 *
	mcmdl
);

32 
	s›t
 {

33 c⁄° *
	mkey
;

34 *
	mvÆ
;

37 
›t
 *
gë_›t
(›à*
›ts
, *
key
);

38 
∑r£_›ts
(
›t
 *
›ts
, 
cmdl
 *cmdl);

39 *
shi·_cmdl
(
cmdl
 *cmdl);

41 
run_cmd
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *
ˇŒî
,

42 c⁄° 
cmd
 *
cmds
, 
cmdl
 *cmdl, *
d©a
);

44 c⁄° 
cmd
 *
föd_cmd
(c⁄° cmd *
cmds
, *
°r
);

	@tipc/link.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<î∫o.h
>

17 
	~<löux/tùc_√éök.h
>

18 
	~<löux/tùc.h
>

19 
	~<löux/gíëlök.h
>

20 
	~<libm∆/libm∆.h
>

22 
	~"cmdl.h
"

23 
	~"msg.h
"

24 
	~"lök.h
"

26 
	$lök_li°_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

28 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

29 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

30 
∆©å
 *
©ås
[
TIPC_NLA_LINK_MAX
 + 1] = {};

32 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

33 i‡(!
öfo
[
TIPC_NLA_LINK
])

34  
MNL_CB_ERROR
;

36 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_LINK
], 
∑r£_©ås
, 
©ås
);

37 i‡(!
©ås
[
TIPC_NLA_LINK_NAME
])

38  
MNL_CB_ERROR
;

40 
	`¥ötf
("%s: ", 
	`m∆_©å_gë_°r
(
©ås
[
TIPC_NLA_LINK_NAME
]));

42 i‡(
©ås
[
TIPC_NLA_LINK_UP
])

43 
	`¥ötf
("up\n");

45 
	`¥ötf
("down\n");

47  
MNL_CB_OK
;

48 
	}
}

50 
	$cmd_lök_li°
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

51 
cmdl
 *cmdl, *
d©a
)

53 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

55 i‡(
hñp_Êag
) {

56 
	`Ârötf
(
°dîr
, "Ußge: %†lökÜi°\n", 
cmdl
->
¨gv
[0]);

57  -
EINVAL
;

60 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_LINK_GET
))) {

61 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

65  
	`msg_dumpô
(
∆h
, 
lök_li°_cb
, 
NULL
);

66 
	}
}

68 
	$lök_gë_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

70 *
¥›
 = 
d©a
;

71 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

72 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

73 
∆©å
 *
©ås
[
TIPC_NLA_LINK_MAX
 + 1] = {};

74 
∆©å
 *
¥›s
[
TIPC_NLA_PROP_MAX
 + 1] = {};

76 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

77 i‡(!
öfo
[
TIPC_NLA_LINK
])

78  
MNL_CB_ERROR
;

80 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_LINK
], 
∑r£_©ås
, 
©ås
);

81 i‡(!
©ås
[
TIPC_NLA_LINK_PROP
])

82  
MNL_CB_ERROR
;

84 
	`m∆_©å_∑r£_√°ed
(
©ås
[
TIPC_NLA_LINK_PROP
], 
∑r£_©ås
, 
¥›s
);

85 i‡(!
¥›s
[*
¥›
])

86  
MNL_CB_ERROR
;

88 
	`¥ötf
("%u\n", 
	`m∆_©å_gë_u32
(
¥›s
[*
¥›
]));

90  
MNL_CB_OK
;

91 
	}
}

94 
	$cmd_lök_gë_¥›
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

95 
cmdl
 *cmdl, *
d©a
)

97 
¥›
;

98 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

99 
›t
 *opt;

100 
›t
 
›ts
[] = {

101 { "lök", 
NULL
 },

102 { 
NULL
 }

105 i‡(
	`°rcmp
(
cmd
->cmd, "priority") == 0)

106 
¥›
 = 
TIPC_NLA_PROP_PRIO
;

107 i‡((
	`°rcmp
(
cmd
->cmd, "tolerance") == 0))

108 
¥›
 = 
TIPC_NLA_PROP_TOL
;

109 i‡((
	`°rcmp
(
cmd
->cmd, "window") == 0))

110 
¥›
 = 
TIPC_NLA_PROP_WIN
;

112  -
EINVAL
;

114 i‡(
hñp_Êag
) {

115 (
cmd
->
hñp
)(
cmdl
);

116  -
EINVAL
;

119 i‡(
	`∑r£_›ts
(
›ts
, 
cmdl
) < 0)

120  -
EINVAL
;

122 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_LINK_GET
))) {

123 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

127 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "link"))) {

128 
	`Ârötf
(
°dîr
, "error, missingÜink\n");

129  -
EINVAL
;

131 
	`m∆_©å_put_°rz
(
∆h
, 
TIPC_NLA_LINK_NAME
, 
›t
->
vÆ
);

133  
	`msg_doô
(
∆h
, 
lök_gë_cb
, &
¥›
);

134 
	}
}

136 
	$cmd_lök_gë_hñp
(
cmdl
 *cmdl)

138 
	`Ârötf
(
°dîr
, "Usage: %sÜink get PPROPERTYÜink LINK\n\n"

143 
cmdl
->
¨gv
[0]);

144 
	}
}

146 
	$cmd_lök_gë
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

147 
cmdl
 *cmdl, *
d©a
)

149 c⁄° 
cmd
 
cmds
[] = {

150 { "¥i‹ôy", 
cmd_lök_gë_¥›
, 
cmd_lök_gë_hñp
 },

151 { "tﬁî™˚", 
cmd_lök_gë_¥›
, 
cmd_lök_gë_hñp
 },

152 { "wödow", 
cmd_lök_gë_¥›
, 
cmd_lök_gë_hñp
 },

153 { 
NULL
 }

156  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

157 
	}
}

159 
	$cmd_lök_°©_ª£t_hñp
(
cmdl
 *cmdl)

161 
	`Ârötf
(
°dîr
, "Ußge: %†lök sèàª£àlök LINK\n\n", 
cmdl
->
¨gv
[0]);

162 
	}
}

164 
	$cmd_lök_°©_ª£t
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

165 
cmdl
 *cmdl, *
d©a
)

167 *
lök
;

168 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

169 
›t
 *opt;

170 
∆©å
 *
√°
;

171 
›t
 
›ts
[] = {

172 { "lök", 
NULL
 },

173 { 
NULL
 }

176 i‡(
hñp_Êag
) {

177 (
cmd
->
hñp
)(
cmdl
);

178  -
EINVAL
;

181 i‡(
	`∑r£_›ts
(
›ts
, 
cmdl
) != 1) {

182 (
cmd
->
hñp
)(
cmdl
);

183  -
EINVAL
;

186 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_LINK_RESET_STATS
))) {

187 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

191 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "link"))) {

192 
	`Ârötf
(
°dîr
, "error, missingÜink\n");

193  -
EINVAL
;

195 
lök
 = 
›t
->
vÆ
;

197 
√°
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_LINK
);

198 
	`m∆_©å_put_°rz
(
∆h
, 
TIPC_NLA_LINK_NAME
, 
lök
);

199 
	`m∆_©å_√°_íd
(
∆h
, 
√°
);

201  
	`msg_doô
(
∆h
, 
NULL
, NULL);

202 
	}
}

204 
uöt32_t
 
	$≥rc
(
uöt32_t
 
cou¡
, uöt32_à
tŸÆ
)

206  (
cou¡
 * 100 + (
tŸÆ
 / 2)) /Åotal;

207 
	}
}

209 
	$_show_lök_°©
(
∆©å
 *
©ås
[], ∆©å *
¥›
[],

210 
∆©å
 *
°©s
[])

212 
uöt32_t
 
¥o·
;

214 i‡(
©ås
[
TIPC_NLA_LINK_ACTIVE
])

215 
	`¥ötf
(" ACTIVE");

216 i‡(
©ås
[
TIPC_NLA_LINK_UP
])

217 
	`¥ötf
(" STANDBY");

219 
	`¥ötf
(" DEFUNCT");

221 
	`¥ötf
(" MTU:%u Priority:%u Tolerance:%u ms Window:%uÖackets\n",

222 
	`m∆_©å_gë_u32
(
©ås
[
TIPC_NLA_LINK_MTU
]),

223 
	`m∆_©å_gë_u32
(
¥›
[
TIPC_NLA_PROP_PRIO
]),

224 
	`m∆_©å_gë_u32
(
¥›
[
TIPC_NLA_PROP_TOL
]),

225 
	`m∆_©å_gë_u32
(
¥›
[
TIPC_NLA_PROP_WIN
]));

227 
	`¥ötf
(" RXÖackets:%u fragments:%u/%u bundles:%u/%u\n",

228 
	`m∆_©å_gë_u32
(
©ås
[
TIPC_NLA_LINK_RX
]) -

229 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_INFO
]),

230 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_FRAGMENTS
]),

231 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_FRAGMENTED
]),

232 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_BUNDLES
]),

233 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_BUNDLED
]));

235 
	`¥ötf
(" TXÖackets:%u fragments:%u/%u bundles:%u/%u\n",

236 
	`m∆_©å_gë_u32
(
©ås
[
TIPC_NLA_LINK_TX
]) -

237 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_INFO
]),

238 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_FRAGMENTS
]),

239 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_FRAGMENTED
]),

240 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_BUNDLES
]),

241 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_BUNDLED
]));

243 
¥o·
 = 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MSG_PROF_TOT
]);

244 
	`¥ötf
(" TXÖrofile sample:%uÖacketsáverage:%u octets\n",

245 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MSG_LEN_CNT
]),

246 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MSG_LEN_TOT
]Ë/ 
¥o·
);

248 
	`¥ötf
(" 0-64:%u%% -256:%u%% -1024:%u%% -4096:%u%% "

250 
	`≥rc
(
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MSG_LEN_P0
]), 
¥o·
),

251 
	`≥rc
(
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MSG_LEN_P1
]), 
¥o·
),

252 
	`≥rc
(
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MSG_LEN_P2
]), 
¥o·
),

253 
	`≥rc
(
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MSG_LEN_P3
]), 
¥o·
),

254 
	`≥rc
(
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MSG_LEN_P4
]), 
¥o·
),

255 
	`≥rc
(
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MSG_LEN_P5
]), 
¥o·
),

256 
	`≥rc
(
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MSG_LEN_P6
]), 
¥o·
));

258 
	`¥ötf
(" RX states:%uÖrobes:%uÇaks:%u defs:%u dups:%u\n",

259 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_STATES
]),

260 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_PROBES
]),

261 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_NACKS
]),

262 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_DEFERRED
]),

263 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_DUPLICATES
]));

265 
	`¥ötf
(" TX states:%uÖrobes:%uÇaks:%uácks:%u dups:%u\n",

266 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_STATES
]),

267 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_PROBES
]),

268 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_NACKS
]),

269 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_ACKS
]),

270 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RETRANSMITTED
]));

272 
	`¥ötf
(" CongestionÜink:%u Send queue max:%uávg:%u\n",

273 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_LINK_CONGS
]),

274 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MAX_QUEUE
]),

275 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_AVG_QUEUE
]));

277  
MNL_CB_OK
;

278 
	}
}

280 
	$_show_bc_lök_°©
(
∆©å
 *
¥›
[], ∆©å *
°©s
[])

282 
	`¥ötf
(" Window:%uÖackets\n",

283 
	`m∆_©å_gë_u32
(
¥›
[
TIPC_NLA_PROP_WIN
]));

285 
	`¥ötf
(" RXÖackets:%u fragments:%u/%u bundles:%u/%u\n",

286 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_INFO
]),

287 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_FRAGMENTS
]),

288 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_FRAGMENTED
]),

289 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_BUNDLES
]),

290 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_BUNDLED
]));

292 
	`¥ötf
(" TXÖackets:%u fragments:%u/%u bundles:%u/%u\n",

293 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_INFO
]),

294 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_FRAGMENTS
]),

295 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_FRAGMENTED
]),

296 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_BUNDLES
]),

297 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_BUNDLED
]));

299 
	`¥ötf
(" RXÇaks:%u defs:%u dups:%u\n",

300 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_NACKS
]),

301 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RX_DEFERRED
]),

302 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_DUPLICATES
]));

304 
	`¥ötf
(" TXÇaks:%uácks:%u dups:%u\n",

305 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_NACKS
]),

306 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_TX_ACKS
]),

307 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_RETRANSMITTED
]));

309 
	`¥ötf
(" CongestionÜink:%u Send queue max:%uávg:%u\n",

310 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_LINK_CONGS
]),

311 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_MAX_QUEUE
]),

312 
	`m∆_©å_gë_u32
(
°©s
[
TIPC_NLA_STATS_AVG_QUEUE
]));

314  
MNL_CB_OK
;

315 
	}
}

317 
	$lök_°©_show_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

319 c⁄° *
«me
;

320 c⁄° *
lök
 = 
d©a
;

321 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

322 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

323 
∆©å
 *
©ås
[
TIPC_NLA_LINK_MAX
 + 1] = {};

324 
∆©å
 *
¥›
[
TIPC_NLA_PROP_MAX
 + 1] = {};

325 
∆©å
 *
°©s
[
TIPC_NLA_STATS_MAX
 + 1] = {};

327 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

328 i‡(!
öfo
[
TIPC_NLA_LINK
])

329  
MNL_CB_ERROR
;

331 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_LINK
], 
∑r£_©ås
, 
©ås
);

332 i‡(!
©ås
[
TIPC_NLA_LINK_NAME
] || !©ås[
TIPC_NLA_LINK_PROP
] ||

333 !
©ås
[
TIPC_NLA_LINK_STATS
])

334  
MNL_CB_ERROR
;

336 
	`m∆_©å_∑r£_√°ed
(
©ås
[
TIPC_NLA_LINK_PROP
], 
∑r£_©ås
, 
¥›
);

337 
	`m∆_©å_∑r£_√°ed
(
©ås
[
TIPC_NLA_LINK_STATS
], 
∑r£_©ås
, 
°©s
);

339 
«me
 = 
	`m∆_©å_gë_°r
(
©ås
[
TIPC_NLA_LINK_NAME
]);

342 i‡(
lök
 && (
	`°rcmp
(
«me
,Üink) != 0))

343  
MNL_CB_OK
;

345 i‡(
©ås
[
TIPC_NLA_LINK_BROADCAST
]) {

346 
	`¥ötf
("Lök <%s>\n", 
«me
);

347  
	`_show_bc_lök_°©
(
¥›
, 
°©s
);

350 
	`¥ötf
("\nLök <%s>\n", 
«me
);

352  
	`_show_lök_°©
(
©ås
, 
¥›
, 
°©s
);

353 
	}
}

355 
	$cmd_lök_°©_show_hñp
(
cmdl
 *cmdl)

357 
	`Ârötf
(
°dîr
, "Usage: %sÜink stat show [Üink LINK ]\n",

358 
cmdl
->
¨gv
[0]);

359 
	}
}

361 
	$cmd_lök_°©_show
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

362 
cmdl
 *cmdl, *
d©a
)

364 *
lök
 = 
NULL
;

365 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

366 
›t
 *opt;

367 
›t
 
›ts
[] = {

368 { "lök", 
NULL
 },

369 { 
NULL
 }

372 i‡(
hñp_Êag
) {

373 (
cmd
->
hñp
)(
cmdl
);

374  -
EINVAL
;

377 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_LINK_GET
))) {

378 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

382 i‡(
	`∑r£_›ts
(
›ts
, 
cmdl
) < 0)

383  -
EINVAL
;

385 i‡((
›t
 = 
	`gë_›t
(
›ts
, "link")))

386 
lök
 = 
›t
->
vÆ
;

388  
	`msg_dumpô
(
∆h
, 
lök_°©_show_cb
, 
lök
);

389 
	}
}

391 
	$cmd_lök_°©_hñp
(
cmdl
 *cmdl)

393 
	`Ârötf
(
°dîr
, "Usage: %sÜink stat COMMAND [ARGS]\n\n"

397 
cmdl
->
¨gv
[0]);

398 
	}
}

400 
	$cmd_lök_°©
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

401 
cmdl
 *cmdl, *
d©a
)

403 c⁄° 
cmd
 
cmds
[] = {

404 { "ª£t", 
cmd_lök_°©_ª£t
, 
cmd_lök_°©_ª£t_hñp
 },

405 { "show", 
cmd_lök_°©_show
, 
cmd_lök_°©_show_hñp
 },

406 { 
NULL
 }

409  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

410 
	}
}

412 
	$cmd_lök_£t_hñp
(
cmdl
 *cmdl)

414 
	`Ârötf
(
°dîr
, "Usage: %sÜink set PPROPERTYÜink LINK\n\n"

419 
cmdl
->
¨gv
[0]);

420 
	}
}

422 
	$cmd_lök_£t_¥›
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

423 
cmdl
 *cmdl, *
d©a
)

425 
vÆ
;

426 
¥›
;

427 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

428 
∆©å
 *
¥›s
;

429 
∆©å
 *
©ås
;

430 
›t
 *opt;

431 
›t
 
›ts
[] = {

432 { "lök", 
NULL
 },

433 { 
NULL
 }

436 i‡(
	`°rcmp
(
cmd
->cmd, "priority") == 0)

437 
¥›
 = 
TIPC_NLA_PROP_PRIO
;

438 i‡((
	`°rcmp
(
cmd
->cmd, "tolerance") == 0))

439 
¥›
 = 
TIPC_NLA_PROP_TOL
;

440 i‡((
	`°rcmp
(
cmd
->cmd, "window") == 0))

441 
¥›
 = 
TIPC_NLA_PROP_WIN
;

443  -
EINVAL
;

445 i‡(
hñp_Êag
) {

446 (
cmd
->
hñp
)(
cmdl
);

447  -
EINVAL
;

450 i‡(
cmdl
->
›töd
 >cmdl->
¨gc
) {

451 
	`Ârötf
(
°dîr
, "error, missing value\n");

452  -
EINVAL
;

454 
vÆ
 = 
	`©oi
(
	`shi·_cmdl
(
cmdl
));

456 i‡(
	`∑r£_›ts
(
›ts
, 
cmdl
) < 0)

457  -
EINVAL
;

459 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_LINK_SET
))) {

460 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

463 
©ås
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_LINK
);

465 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "link"))) {

466 
	`Ârötf
(
°dîr
, "error, missingÜink\n");

467  -
EINVAL
;

469 
	`m∆_©å_put_°rz
(
∆h
, 
TIPC_NLA_LINK_NAME
, 
›t
->
vÆ
);

471 
¥›s
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_LINK_PROP
);

472 
	`m∆_©å_put_u32
(
∆h
, 
¥›
, 
vÆ
);

473 
	`m∆_©å_√°_íd
(
∆h
, 
¥›s
);

475 
	`m∆_©å_√°_íd
(
∆h
, 
©ås
);

477  
	`msg_doô
(
∆h
, 
lök_gë_cb
, &
¥›
);

480 
	}
}

482 
	$cmd_lök_£t
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

483 
cmdl
 *cmdl, *
d©a
)

485 c⁄° 
cmd
 
cmds
[] = {

486 { "¥i‹ôy", 
cmd_lök_£t_¥›
, 
cmd_lök_£t_hñp
 },

487 { "tﬁî™˚", 
cmd_lök_£t_¥›
, 
cmd_lök_£t_hñp
 },

488 { "wödow", 
cmd_lök_£t_¥›
, 
cmd_lök_£t_hñp
 },

489 { 
NULL
 }

492  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

493 
	}
}

495 
	$cmd_lök_hñp
(
cmdl
 *cmdl)

497 
	`Ârötf
(
°dîr
,

505 
cmdl
->
¨gv
[0]);

506 
	}
}

508 
	$cmd_lök
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl,

509 *
d©a
)

511 c⁄° 
cmd
 
cmds
[] = {

512 { "gë", 
cmd_lök_gë
, 
cmd_lök_gë_hñp
 },

513 { "li°", 
cmd_lök_li°
, 
NULL
 },

514 { "£t", 
cmd_lök_£t
, 
cmd_lök_£t_hñp
 },

515 { "°©i°ics", 
cmd_lök_°©
, 
cmd_lök_°©_hñp
 },

516 { 
NULL
 }

519  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

520 
	}
}

	@tipc/link.h

12 #i‚de‡
_TIPC_LINK_H


13 
	#_TIPC_LINK_H


	)

15 
hñp_Êag
;

17 
cmd_lök
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl,

18 *
d©a
);

19 
cmd_lök_hñp
(
cmdl
 *cmdl);

	@tipc/media.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<î∫o.h
>

17 
	~<löux/tùc_√éök.h
>

18 
	~<löux/tùc.h
>

19 
	~<löux/gíëlök.h
>

20 
	~<libm∆/libm∆.h
>

22 
	~"cmdl.h
"

23 
	~"msg.h
"

24 
	~"medü.h
"

26 
	$medü_li°_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

28 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

29 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

30 
∆©å
 *
©ås
[
TIPC_NLA_MEDIA_MAX
 + 1] = {};

32 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

33 i‡(!
öfo
[
TIPC_NLA_MEDIA
])

34  
MNL_CB_ERROR
;

36 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_MEDIA
], 
∑r£_©ås
, 
©ås
);

37 i‡(!
©ås
[
TIPC_NLA_MEDIA_NAME
])

38  
MNL_CB_ERROR
;

40 
	`¥ötf
("%s\n", 
	`m∆_©å_gë_°r
(
©ås
[
TIPC_NLA_MEDIA_NAME
]));

42  
MNL_CB_OK
;

43 
	}
}

45 
	$cmd_medü_li°
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

46 
cmdl
 *cmdl, *
d©a
)

48 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

50 i‡(
hñp_Êag
) {

51 
	`Ârötf
(
°dîr
, "Ußge: %†medüÜi°\n", 
cmdl
->
¨gv
[0]);

52  -
EINVAL
;

55 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_MEDIA_GET
))) {

56 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

60  
	`msg_dumpô
(
∆h
, 
medü_li°_cb
, 
NULL
);

61 
	}
}

63 
	$medü_gë_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

65 *
¥›
 = 
d©a
;

66 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

67 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

68 
∆©å
 *
©ås
[
TIPC_NLA_MEDIA_MAX
 + 1] = {};

69 
∆©å
 *
¥›s
[
TIPC_NLA_PROP_MAX
 + 1] = {};

71 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

72 i‡(!
öfo
[
TIPC_NLA_MEDIA
])

73  
MNL_CB_ERROR
;

75 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_MEDIA
], 
∑r£_©ås
, 
©ås
);

76 i‡(!
©ås
[
TIPC_NLA_MEDIA_PROP
])

77  
MNL_CB_ERROR
;

79 
	`m∆_©å_∑r£_√°ed
(
©ås
[
TIPC_NLA_MEDIA_PROP
], 
∑r£_©ås
, 
¥›s
);

80 i‡(!
¥›s
[*
¥›
])

81  
MNL_CB_ERROR
;

83 
	`¥ötf
("%u\n", 
	`m∆_©å_gë_u32
(
¥›s
[*
¥›
]));

85  
MNL_CB_OK
;

86 
	}
}

88 
	$cmd_medü_gë_¥›
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

89 
cmdl
 *cmdl, *
d©a
)

91 
¥›
;

92 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

93 
∆©å
 *
√°
;

94 
›t
 *opt;

95 
›t
 
›ts
[] = {

96 { "medü", 
NULL
 },

97 { 
NULL
 }

100 i‡(
	`°rcmp
(
cmd
->cmd, "priority") == 0)

101 
¥›
 = 
TIPC_NLA_PROP_PRIO
;

102 i‡((
	`°rcmp
(
cmd
->cmd, "tolerance") == 0))

103 
¥›
 = 
TIPC_NLA_PROP_TOL
;

104 i‡((
	`°rcmp
(
cmd
->cmd, "window") == 0))

105 
¥›
 = 
TIPC_NLA_PROP_WIN
;

107  -
EINVAL
;

109 i‡(
hñp_Êag
) {

110 (
cmd
->
hñp
)(
cmdl
);

111  -
EINVAL
;

114 i‡(
	`∑r£_›ts
(
›ts
, 
cmdl
) < 0)

115  -
EINVAL
;

117 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_MEDIA_GET
))) {

118 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

122 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "media"))) {

123 
	`Ârötf
(
°dîr
, "error, missing media\n");

124  -
EINVAL
;

126 
√°
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_MEDIA
);

127 
	`m∆_©å_put_°rz
(
∆h
, 
TIPC_NLA_MEDIA_NAME
, 
›t
->
vÆ
);

128 
	`m∆_©å_√°_íd
(
∆h
, 
√°
);

130  
	`msg_doô
(
∆h
, 
medü_gë_cb
, &
¥›
);

131 
	}
}

133 
	$cmd_medü_gë_hñp
(
cmdl
 *cmdl)

135 
	`Ârötf
(
°dîr
, "Usage: %s media get PPROPERTY media MEDIA\n\n"

140 
cmdl
->
¨gv
[0]);

141 
	}
}

143 
	$cmd_medü_gë
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

144 
cmdl
 *cmdl, *
d©a
)

146 c⁄° 
cmd
 
cmds
[] = {

147 { "¥i‹ôy", 
cmd_medü_gë_¥›
, 
cmd_medü_gë_hñp
 },

148 { "tﬁî™˚", 
cmd_medü_gë_¥›
, 
cmd_medü_gë_hñp
 },

149 { "wödow", 
cmd_medü_gë_¥›
, 
cmd_medü_gë_hñp
 },

150 { 
NULL
 }

153  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

154 
	}
}

156 
	$cmd_medü_£t_hñp
(
cmdl
 *cmdl)

158 
	`Ârötf
(
°dîr
, "Usage: %s media set PPROPERTY media MEDIA\n\n"

163 
cmdl
->
¨gv
[0]);

164 
	}
}

166 
	$cmd_medü_£t_¥›
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

167 
cmdl
 *cmdl, *
d©a
)

169 
vÆ
;

170 
¥›
;

171 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

172 
∆©å
 *
¥›s
;

173 
∆©å
 *
©ås
;

174 
›t
 *opt;

175 
›t
 
›ts
[] = {

176 { "medü", 
NULL
 },

177 { 
NULL
 }

180 i‡(
	`°rcmp
(
cmd
->cmd, "priority") == 0)

181 
¥›
 = 
TIPC_NLA_PROP_PRIO
;

182 i‡((
	`°rcmp
(
cmd
->cmd, "tolerance") == 0))

183 
¥›
 = 
TIPC_NLA_PROP_TOL
;

184 i‡((
	`°rcmp
(
cmd
->cmd, "window") == 0))

185 
¥›
 = 
TIPC_NLA_PROP_WIN
;

187  -
EINVAL
;

189 i‡(
hñp_Êag
) {

190 (
cmd
->
hñp
)(
cmdl
);

191  -
EINVAL
;

194 i‡(
cmdl
->
›töd
 >cmdl->
¨gc
) {

195 
	`Ârötf
(
°dîr
, "error, missing value\n");

196  -
EINVAL
;

198 
vÆ
 = 
	`©oi
(
	`shi·_cmdl
(
cmdl
));

200 i‡(
	`∑r£_›ts
(
›ts
, 
cmdl
) < 0)

201  -
EINVAL
;

203 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_MEDIA_SET
))) {

204 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

207 
©ås
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_MEDIA
);

209 i‡(!(
›t
 = 
	`gë_›t
(
›ts
, "media"))) {

210 
	`Ârötf
(
°dîr
, "error, missing media\n");

211  -
EINVAL
;

213 
	`m∆_©å_put_°rz
(
∆h
, 
TIPC_NLA_MEDIA_NAME
, 
›t
->
vÆ
);

215 
¥›s
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_MEDIA_PROP
);

216 
	`m∆_©å_put_u32
(
∆h
, 
¥›
, 
vÆ
);

217 
	`m∆_©å_√°_íd
(
∆h
, 
¥›s
);

219 
	`m∆_©å_√°_íd
(
∆h
, 
©ås
);

221  
	`msg_doô
(
∆h
, 
NULL
, NULL);

222 
	}
}

224 
	$cmd_medü_£t
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

225 
cmdl
 *cmdl, *
d©a
)

227 c⁄° 
cmd
 
cmds
[] = {

228 { "¥i‹ôy", 
cmd_medü_£t_¥›
, 
cmd_medü_£t_hñp
 },

229 { "tﬁî™˚", 
cmd_medü_£t_¥›
, 
cmd_medü_£t_hñp
 },

230 { "wödow", 
cmd_medü_£t_¥›
, 
cmd_medü_£t_hñp
 },

231 { 
NULL
 }

234  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

235 
	}
}

237 
	$cmd_medü_hñp
(
cmdl
 *cmdl)

239 
	`Ârötf
(
°dîr
,

246 
cmdl
->
¨gv
[0]);

247 
	}
}

249 
	$cmd_medü
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl,

250 *
d©a
)

252 c⁄° 
cmd
 
cmds
[] = {

253 { "gë", 
cmd_medü_gë
, 
cmd_medü_gë_hñp
 },

254 { "li°", 
cmd_medü_li°
, 
NULL
 },

255 { "£t", 
cmd_medü_£t
, 
cmd_medü_£t_hñp
 },

256 { 
NULL
 }

259  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

260 
	}
}

	@tipc/media.h

12 #i‚de‡
_TIPC_MEDIA_H


13 
	#_TIPC_MEDIA_H


	)

15 
hñp_Êag
;

17 
cmd_medü
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl,

18 *
d©a
);

19 
cmd_medü_hñp
(
cmdl
 *cmdl);

	@tipc/misc.c

12 
	~<°dio.h
>

13 
	~<°döt.h
>

14 
	~<löux/tùc.h
>

16 
	~"misc.h
"

18 
	#IN_RANGE
(
vÆ
, 
low
, 
high
Ë((vÆË<(highË&& (vÆË>÷ow))

	)

20 
uöt32_t
 
	$°r2addr
(*
°r
)

22 
z
, 
c
, 
n
;

23 
dummy
;

25 i‡(
	`ssˇnf
(
°r
, "%u.%u.%u%c", &
z
, &
c
, &
n
, &
dummy
) != 3) {

26 
	`Ârötf
(
°dîr
, "invalidÇetworkáddress, syntax: Z.C.N\n");

30 i‡(
	`IN_RANGE
(
z
, 0, 255Ë&& IN_RANGE(
c
, 0, 4095Ë&& IN_RANGE(
n
, 0, 4095))

31  
	`tùc_addr
(
z
, 
c
, 
n
);

33 
	`Ârötf
(
°dîr
, "övÆidÇëw‹káddªs†\"%s\"\n", 
°r
);

35 
	}
}

	@tipc/misc.h

12 #i‚de‡
_TIPC_MISC_H


13 
	#_TIPC_MISC_H


	)

15 
	~<°döt.h
>

17 
uöt32_t
 
°r2addr
(*
°r
);

	@tipc/msg.c

12 
	~<°dio.h
>

13 
	~<time.h
>

14 
	~<î∫o.h
>

16 
	~<löux/tùc_√éök.h
>

17 
	~<löux/tùc.h
>

18 
	~<löux/gíëlök.h
>

19 
	~<libm∆/libm∆.h
>

21 
	~"msg.h
"

23 
	$∑r£_©ås
(c⁄° 
∆©å
 *
©å
, *
d©a
)

25 c⁄° 
∆©å
 **
tb
 = 
d©a
;

26 
ty≥
 = 
	`m∆_©å_gë_ty≥
(
©å
);

28 
tb
[
ty≥
] = 
©å
;

30  
MNL_CB_OK
;

31 
	}
}

33 
	$Ámûy_id_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

35 
∆©å
 *
tb
[
CTRL_ATTR_MAX
 + 1] = {};

36 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

37 *
id
 = 
d©a
;

39 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
tb
);

40 i‡(!
tb
[
CTRL_ATTR_FAMILY_ID
])

41  
MNL_CB_ERROR
;

43 *
id
 = 
	`m∆_©å_gë_u16
(
tb
[
CTRL_ATTR_FAMILY_ID
]);

45  
MNL_CB_OK
;

46 
	}
}

48 
m∆_sockë
 *
	$msg_£nd
(
∆msghdr
 *
∆h
)

50 
ªt
;

51 
m∆_sockë
 *
∆
;

53 
∆
 = 
	`m∆_sockë_›í
(
NETLINK_GENERIC
);

54 i‡(
∆
 =
NULL
) {

55 
	`≥º‹
("mnl_socket_open");

56  
NULL
;

59 
ªt
 = 
	`m∆_sockë_böd
(
∆
, 0, 
MNL_SOCKET_AUTOPID
);

60 i‡(
ªt
 < 0) {

61 
	`≥º‹
("mnl_socket_bind");

62  
NULL
;

65 
ªt
 = 
	`m∆_sockë_£ndto
(
∆
, 
∆h
,Çlh->
∆msg_Àn
);

66 i‡(
ªt
 < 0) {

67 
	`≥º‹
("mnl_socket_send");

68  
NULL
;

71  
∆
;

72 
	}
}

74 
	$msg_ªcv
(
m∆_sockë
 *
∆
, 
m∆_cb_t
 
ˇŒback
, *
d©a
, 
£q
)

76 
ªt
;

77 
p‹tid
;

78 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

80 
p‹tid
 = 
	`m∆_sockë_gë_p‹tid
(
∆
);

82 
ªt
 = 
	`m∆_sockë_ªcv‰om
(
∆
, 
buf
, (buf));

83 
ªt
 > 0) {

84 
ªt
 = 
	`m∆_cb_run
(
buf
,Ñë, 
£q
, 
p‹tid
, 
ˇŒback
, 
d©a
);

85 i‡(
ªt
 <= 0)

87 
ªt
 = 
	`m∆_sockë_ªcv‰om
(
∆
, 
buf
, (buf));

89 i‡(
ªt
 == -1)

90 
	`≥º‹
("error");

92 
	`m∆_sockë_˛o£
(
∆
);

94  
ªt
;

95 
	}
}

97 
	$msg_quîy
(
∆msghdr
 *
∆h
, 
m∆_cb_t
 
ˇŒback
, *
d©a
)

99 
£q
;

100 
m∆_sockë
 *
∆
;

102 
£q
 = 
	`time
(
NULL
);

103 
∆h
->
∆msg_£q
 = 
£q
;

105 
∆
 = 
	`msg_£nd
(
∆h
);

106 i‡(!
∆
)

107  -
ENOTSUP
;

109  
	`msg_ªcv
(
∆
, 
ˇŒback
, 
d©a
, 
£q
);

110 
	}
}

112 
	$gë_Ámûy
()

114 
îr
;

115 
∆_Ámûy
;

116 
∆msghdr
 *
∆h
;

117 
gílmsghdr
 *
gíl
;

118 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

120 
∆h
 = 
	`m∆_∆msg_put_hódî
(
buf
);

121 
∆h
->
∆msg_ty≥
 = 
GENL_ID_CTRL
;

122 
∆h
->
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_ACK
;

124 
gíl
 = 
	`m∆_∆msg_put_exåa_hódî
(
∆h
, (
gílmsghdr
));

125 
gíl
->
cmd
 = 
CTRL_CMD_GETFAMILY
;

126 
gíl
->
vîsi⁄
 = 1;

128 
	`m∆_©å_put_u32
(
∆h
, 
CTRL_ATTR_FAMILY_ID
, 
GENL_ID_CTRL
);

129 
	`m∆_©å_put_°rz
(
∆h
, 
CTRL_ATTR_FAMILY_NAME
, 
TIPC_GENL_V2_NAME
);

131 i‡((
îr
 = 
	`msg_quîy
(
∆h
, 
Ámûy_id_cb
, &
∆_Ámûy
)))

132  
îr
;

134  
∆_Ámûy
;

135 
	}
}

137 
	$msg_doô
(
∆msghdr
 *
∆h
, 
m∆_cb_t
 
ˇŒback
, *
d©a
)

139 
∆h
->
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_ACK
;

140  
	`msg_quîy
(
∆h
, 
ˇŒback
, 
d©a
);

141 
	}
}

143 
	$msg_dumpô
(
∆msghdr
 *
∆h
, 
m∆_cb_t
 
ˇŒback
, *
d©a
)

145 
∆h
->
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_DUMP
;

146  
	`msg_quîy
(
∆h
, 
ˇŒback
, 
d©a
);

147 
	}
}

149 
∆msghdr
 *
	$msg_öô
(*
buf
, 
cmd
)

151 
Ámûy
;

152 
∆msghdr
 *
∆h
;

153 
gílmsghdr
 *
gíl
;

155 
Ámûy
 = 
	`gë_Ámûy
();

156 i‡(
Ámûy
 <= 0) {

157 
	`Ârötf
(
°dîr
,

159  
NULL
;

162 
∆h
 = 
	`m∆_∆msg_put_hódî
(
buf
);

163 
∆h
->
∆msg_ty≥
 = 
Ámûy
;

165 
gíl
 = 
	`m∆_∆msg_put_exåa_hódî
(
∆h
, (
gílmsghdr
));

166 
gíl
->
cmd
 = cmd;

167 
gíl
->
vîsi⁄
 = 1;

169  
∆h
;

170 
	}
}

	@tipc/msg.h

12 #i‚de‡
_TIPC_MSG_H


13 
	#_TIPC_MSG_H


	)

15 
∆msghdr
 *
msg_öô
(*
buf
, 
cmd
);

16 
msg_doô
(
∆msghdr
 *
∆h
, 
m∆_cb_t
 
ˇŒback
, *
d©a
);

17 
msg_dumpô
(
∆msghdr
 *
∆h
, 
m∆_cb_t
 
ˇŒback
, *
d©a
);

18 
∑r£_©ås
(c⁄° 
∆©å
 *
©å
, *
d©a
);

	@tipc/nametable.c

12 
	~<°dio.h
>

13 
	~<î∫o.h
>

15 
	~<löux/tùc_√éök.h
>

16 
	~<löux/tùc.h
>

17 
	~<löux/gíëlök.h
>

18 
	~<libm∆/libm∆.h
>

20 
	~"cmdl.h
"

21 
	~"msg.h
"

22 
	~"«mëabÀ.h
"

24 
	#PORTID_STR_LEN
 45

	)

26 
	$«mëabÀ_show_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

28 *
ôî©i⁄
 = 
d©a
;

29 
p‹t_id
[
PORTID_STR_LEN
];

30 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

31 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

32 
∆©å
 *
©ås
[
TIPC_NLA_NAME_TABLE_MAX
 + 1] = {};

33 
∆©å
 *
publ
[
TIPC_NLA_PUBL_MAX
 + 1] = {};

34 c⁄° *
sc›e
[] = { "", "zone", "cluster", "node" };

36 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

37 i‡(!
öfo
[
TIPC_NLA_NAME_TABLE
])

38  
MNL_CB_ERROR
;

40 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_NAME_TABLE
], 
∑r£_©ås
, 
©ås
);

41 i‡(!
©ås
[
TIPC_NLA_NAME_TABLE_PUBL
])

42  
MNL_CB_ERROR
;

44 
	`m∆_©å_∑r£_√°ed
(
©ås
[
TIPC_NLA_NAME_TABLE_PUBL
], 
∑r£_©ås
, 
publ
);

45 i‡(!
publ
[
TIPC_NLA_NAME_TABLE_PUBL
])

46  
MNL_CB_ERROR
;

48 i‡(!*
ôî©i⁄
)

49 
	`¥ötf
("%-10s %-10s %-10s %-26s %-10s\n",

52 (*
ôî©i⁄
)++;

54 
	`¢¥ötf
(
p‹t_id
, (port_id), "<%u.%u.%u:%u>",

55 
	`tùc_z⁄e
(
	`m∆_©å_gë_u32
(
publ
[
TIPC_NLA_PUBL_NODE
])),

56 
	`tùc_˛u°î
(
	`m∆_©å_gë_u32
(
publ
[
TIPC_NLA_PUBL_NODE
])),

57 
	`tùc_node
(
	`m∆_©å_gë_u32
(
publ
[
TIPC_NLA_PUBL_NODE
])),

58 
	`m∆_©å_gë_u32
(
publ
[
TIPC_NLA_PUBL_REF
]));

60 
	`¥ötf
("%-10u %-10u %-10u %-26s %-12u",

61 
	`m∆_©å_gë_u32
(
publ
[
TIPC_NLA_PUBL_TYPE
]),

62 
	`m∆_©å_gë_u32
(
publ
[
TIPC_NLA_PUBL_LOWER
]),

63 
	`m∆_©å_gë_u32
(
publ
[
TIPC_NLA_PUBL_UPPER
]),

64 
p‹t_id
,

65 
	`m∆_©å_gë_u32
(
publ
[
TIPC_NLA_PUBL_KEY
]));

67 
	`¥ötf
("%s\n", 
sc›e
[
	`m∆_©å_gë_u32
(
publ
[
TIPC_NLA_PUBL_SCOPE
])]);

69  
MNL_CB_OK
;

70 
	}
}

72 
	$cmd_«mëabÀ_show
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

73 
cmdl
 *cmdl, *
d©a
)

75 
ôî©i⁄
 = 0;

76 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

78 i‡(
hñp_Êag
) {

79 
	`Ârötf
(
°dîr
, "Ußge: %†«mëabÀ show\n", 
cmdl
->
¨gv
[0]);

80  -
EINVAL
;

83 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_NAME_TABLE_GET
))) {

84 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

88  
	`msg_dumpô
(
∆h
, 
«mëabÀ_show_cb
, &
ôî©i⁄
);

89 
	}
}

91 
	$cmd_«mëabÀ_hñp
(
cmdl
 *cmdl)

93 
	`Ârötf
(
°dîr
,

97 
cmdl
->
¨gv
[0]);

98 
	}
}

100 
	$cmd_«mëabÀ
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl,

101 *
d©a
)

103 c⁄° 
cmd
 
cmds
[] = {

104 { "show", 
cmd_«mëabÀ_show
, 
NULL
 },

105 { 
NULL
 }

108  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

109 
	}
}

	@tipc/nametable.h

12 #i‚de‡
_TIPC_NAMETABLE_H


13 
	#_TIPC_NAMETABLE_H


	)

15 
hñp_Êag
;

17 
cmd_«mëabÀ_hñp
(
cmdl
 *cmdl);

18 
cmd_«mëabÀ
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl,

19 *
d©a
);

	@tipc/node.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<î∫o.h
>

17 
	~<löux/tùc_√éök.h
>

18 
	~<löux/tùc.h
>

19 
	~<löux/gíëlök.h
>

20 
	~<libm∆/libm∆.h
>

22 
	~"cmdl.h
"

23 
	~"msg.h
"

24 
	~"misc.h
"

25 
	~"node.h
"

27 
	$node_li°_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

29 
uöt32_t
 
addr
;

30 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

31 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

32 
∆©å
 *
©ås
[
TIPC_NLA_NODE_MAX
 + 1] = {};

34 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

35 i‡(!
öfo
[
TIPC_NLA_NODE
])

36  
MNL_CB_ERROR
;

38 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_NODE
], 
∑r£_©ås
, 
©ås
);

39 i‡(!
©ås
[
TIPC_NLA_NODE_ADDR
])

40  
MNL_CB_ERROR
;

42 
addr
 = 
	`m∆_©å_gë_u32
(
©ås
[
TIPC_NLA_NODE_ADDR
]);

43 
	`¥ötf
("<%u.%u.%u>: ",

44 
	`tùc_z⁄e
(
addr
),

45 
	`tùc_˛u°î
(
addr
),

46 
	`tùc_node
(
addr
));

48 i‡(
©ås
[
TIPC_NLA_NODE_UP
])

49 
	`¥ötf
("up\n");

51 
	`¥ötf
("down\n");

53  
MNL_CB_OK
;

54 
	}
}

56 
	$cmd_node_li°
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

57 
cmdl
 *cmdl, *
d©a
)

59 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

61 i‡(
hñp_Êag
) {

62 
	`Ârötf
(
°dîr
, "Ußge: %†nodêli°\n", 
cmdl
->
¨gv
[0]);

63  -
EINVAL
;

66 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_NODE_GET
))) {

67 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

71  
	`msg_dumpô
(
∆h
, 
node_li°_cb
, 
NULL
);

72 
	}
}

74 
	$cmd_node_£t_addr
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

75 
cmdl
 *cmdl, *
d©a
)

77 *
°r
;

78 
uöt32_t
 
addr
;

79 
∆©å
 *
√°
;

80 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

82 i‡(
cmdl
->
¨gc
 !cmdl->
›töd
 + 1) {

83 
	`Ârötf
(
°dîr
, "Usage: %sÇode setáddress ADDRESS\n",

84 
cmdl
->
¨gv
[0]);

85  -
EINVAL
;

88 
°r
 = 
	`shi·_cmdl
(
cmdl
);

89 
addr
 = 
	`°r2addr
(
°r
);

90 i‡(!
addr
)

93 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_NET_SET
))) {

94 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

98 
√°
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_NET
);

99 
	`m∆_©å_put_u32
(
∆h
, 
TIPC_NLA_NET_ADDR
, 
addr
);

100 
	`m∆_©å_√°_íd
(
∆h
, 
√°
);

102  
	`msg_doô
(
∆h
, 
NULL
, NULL);

103 
	}
}

105 
	$cmd_node_gë_addr
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

106 
cmdl
 *cmdl, *
d©a
)

108 
sk
;

109 
sockÀn_t
 
sz
 = (
sockaddr_tùc
);

110 
sockaddr_tùc
 
addr
;

112 i‡(!(
sk
 = 
	`sockë
(
AF_TIPC
, 
SOCK_RDM
, 0))) {

113 
	`Ârötf
(
°dîr
, "›íög TIPC sockë: %s\n", 
	`°ªº‹
(
î∫o
));

117 i‡(
	`gësock«me
(
sk
, (
sockaddr
 *)&
addr
, &
sz
) < 0) {

118 
	`Ârötf
(
°dîr
, "getting TIPC socketáddress: %s\n",

119 
	`°ªº‹
(
î∫o
));

120 
	`˛o£
(
sk
);

123 
	`˛o£
(
sk
);

125 
	`¥ötf
("<%u.%u.%u>\n",

126 
	`tùc_z⁄e
(
addr
.addr.
id
.
node
),

127 
	`tùc_˛u°î
(
addr
.addr.
id
.
node
),

128 
	`tùc_node
(
addr
.addr.
id
.
node
));

131 
	}
}

133 
	$√tid_gë_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

135 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

136 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

137 
∆©å
 *
©ås
[
TIPC_NLA_NET_MAX
 + 1] = {};

139 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

140 i‡(!
öfo
[
TIPC_NLA_NET
])

141  
MNL_CB_ERROR
;

143 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_NET
], 
∑r£_©ås
, 
©ås
);

144 i‡(!
©ås
[
TIPC_NLA_NET_ID
])

145  
MNL_CB_ERROR
;

147 
	`¥ötf
("%u\n", 
	`m∆_©å_gë_u32
(
©ås
[
TIPC_NLA_NET_ID
]));

149  
MNL_CB_OK
;

150 
	}
}

152 
	$cmd_node_gë_√tid
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

153 
cmdl
 *cmdl, *
d©a
)

155 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

157 i‡(
hñp_Êag
) {

158 (
cmd
->
hñp
)(
cmdl
);

159  -
EINVAL
;

162 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_NET_GET
))) {

163 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

167  
	`msg_dumpô
(
∆h
, 
√tid_gë_cb
, 
NULL
);

168 
	}
}

170 
	$cmd_node_£t_√tid
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

171 
cmdl
 *cmdl, *
d©a
)

173 
√tid
;

174 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

175 
∆©å
 *
√°
;

177 i‡(
hñp_Êag
) {

178 (
cmd
->
hñp
)(
cmdl
);

179  -
EINVAL
;

182 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_NET_SET
))) {

183 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

187 i‡(
cmdl
->
¨gc
 !cmdl->
›töd
 + 1) {

188 
	`Ârötf
(
°dîr
, "Usage: %sÇode setÇetid NETID\n",

189 
cmdl
->
¨gv
[0]);

190  -
EINVAL
;

192 
√tid
 = 
	`©oi
(
	`shi·_cmdl
(
cmdl
));

194 
√°
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_NET
);

195 
	`m∆_©å_put_u32
(
∆h
, 
TIPC_NLA_NET_ID
, 
√tid
);

196 
	`m∆_©å_√°_íd
(
∆h
, 
√°
);

198  
	`msg_doô
(
∆h
, 
NULL
, NULL);

199 
	}
}

201 
	$cmd_node_£t_hñp
(
cmdl
 *cmdl)

203 
	`Ârötf
(
°dîr
,

208 
cmdl
->
¨gv
[0]);

209 
	}
}

211 
	$cmd_node_£t
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

212 
cmdl
 *cmdl, *
d©a
)

214 c⁄° 
cmd
 
cmds
[] = {

215 { "addªss", 
cmd_node_£t_addr
, 
NULL
 },

216 { "√tid", 
cmd_node_£t_√tid
, 
NULL
 },

217 { 
NULL
 }

220  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

221 
	}
}

223 
	$cmd_node_gë_hñp
(
cmdl
 *cmdl)

225 
	`Ârötf
(
°dîr
,

230 
cmdl
->
¨gv
[0]);

231 
	}
}

233 
	$cmd_node_gë
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

234 
cmdl
 *cmdl, *
d©a
)

236 c⁄° 
cmd
 
cmds
[] = {

237 { "addªss", 
cmd_node_gë_addr
, 
NULL
 },

238 { "√tid", 
cmd_node_gë_√tid
, 
NULL
 },

239 { 
NULL
 }

242  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

243 
	}
}

245 
	$cmd_node_hñp
(
cmdl
 *cmdl)

247 
	`Ârötf
(
°dîr
,

253 
cmdl
->
¨gv
[0]);

254 
	}
}

256 
	$cmd_node
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl,

257 *
d©a
)

259 c⁄° 
cmd
 
cmds
[] = {

260 { "li°", 
cmd_node_li°
, 
NULL
 },

261 { "gë", 
cmd_node_gë
, 
cmd_node_gë_hñp
 },

262 { "£t", 
cmd_node_£t
, 
cmd_node_£t_hñp
 },

263 { 
NULL
 }

266  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

267 
	}
}

	@tipc/node.h

12 #i‚de‡
_TIPC_NODE_H


13 
	#_TIPC_NODE_H


	)

15 
hñp_Êag
;

17 
cmd_node
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl,

18 *
d©a
);

19 
cmd_node_hñp
(
cmdl
 *cmdl);

	@tipc/socket.c

12 
	~<°dio.h
>

13 
	~<î∫o.h
>

15 
	~<löux/tùc.h
>

16 
	~<löux/tùc_√éök.h
>

17 
	~<löux/gíëlök.h
>

18 
	~<libm∆/libm∆.h
>

20 
	~"cmdl.h
"

21 
	~"msg.h
"

22 
	~"sockë.h
"

24 
	#PORTID_STR_LEN
 45

	)

26 
	$publ_li°_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

28 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

29 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

30 
∆©å
 *
©ås
[
TIPC_NLA_SOCK_MAX
 + 1] = {};

32 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

33 i‡(!
öfo
[
TIPC_NLA_PUBL
])

34  
MNL_CB_ERROR
;

36 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_PUBL
], 
∑r£_©ås
, 
©ås
);

38 
	`¥ötf
(" boundÅo {%u,%u,%u}\n",

39 
	`m∆_©å_gë_u32
(
©ås
[
TIPC_NLA_PUBL_TYPE
]),

40 
	`m∆_©å_gë_u32
(
©ås
[
TIPC_NLA_PUBL_LOWER
]),

41 
	`m∆_©å_gë_u32
(
©ås
[
TIPC_NLA_PUBL_UPPER
]));

43  
MNL_CB_OK
;

44 
	}
}

46 
	$publ_li°
(
uöt32_t
 
sock
)

48 
∆msghdr
 *
∆h
;

49 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

50 
∆©å
 *
√°
;

52 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_PUBL_GET
))) {

53 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

57 
√°
 = 
	`m∆_©å_√°_°¨t
(
∆h
, 
TIPC_NLA_SOCK
);

58 
	`m∆_©å_put_u32
(
∆h
, 
TIPC_NLA_SOCK_REF
, 
sock
);

59 
	`m∆_©å_√°_íd
(
∆h
, 
√°
);

61  
	`msg_dumpô
(
∆h
, 
publ_li°_cb
, 
NULL
);

62 
	}
}

64 
	$sock_li°_cb
(c⁄° 
∆msghdr
 *
∆h
, *
d©a
)

66 
gílmsghdr
 *
gíl
 = 
	`m∆_∆msg_gë_∑ylﬂd
(
∆h
);

67 
∆©å
 *
öfo
[
TIPC_NLA_MAX
 + 1] = {};

68 
∆©å
 *
©ås
[
TIPC_NLA_SOCK_MAX
 + 1] = {};

70 
	`m∆_©å_∑r£
(
∆h
, (*
gíl
), 
∑r£_©ås
, 
öfo
);

71 i‡(!
öfo
[
TIPC_NLA_SOCK
])

72  
MNL_CB_ERROR
;

74 
	`m∆_©å_∑r£_√°ed
(
öfo
[
TIPC_NLA_SOCK
], 
∑r£_©ås
, 
©ås
);

75 i‡(!
©ås
[
TIPC_NLA_SOCK_REF
])

76  
MNL_CB_ERROR
;

78 
	`¥ötf
("sockë %u\n", 
	`m∆_©å_gë_u32
(
©ås
[
TIPC_NLA_SOCK_REF
]));

80 i‡(
©ås
[
TIPC_NLA_SOCK_CON
]) {

81 
uöt32_t
 
node
;

82 
∆©å
 *
c⁄
[
TIPC_NLA_CON_MAX
 + 1] = {};

84 
	`m∆_©å_∑r£_√°ed
(
©ås
[
TIPC_NLA_SOCK_CON
], 
∑r£_©ås
, 
c⁄
);

85 
node
 = 
	`m∆_©å_gë_u32
(
c⁄
[
TIPC_NLA_CON_NODE
]);

87 
	`¥ötf
(" c⁄√˘edÅÿ<%u.%u.%u:%u>", 
	`tùc_z⁄e
(
node
),

88 
	`tùc_˛u°î
(
node
), 
	`tùc_node
(node),

89 
	`m∆_©å_gë_u32
(
c⁄
[
TIPC_NLA_CON_SOCK
]));

91 i‡(
c⁄
[
TIPC_NLA_CON_FLAG
])

92 
	`¥ötf
(" via {%u,%u}\n",

93 
	`m∆_©å_gë_u32
(
c⁄
[
TIPC_NLA_CON_TYPE
]),

94 
	`m∆_©å_gë_u32
(
c⁄
[
TIPC_NLA_CON_INST
]));

96 
	`¥ötf
("\n");

97 } i‡(
©ås
[
TIPC_NLA_SOCK_HAS_PUBL
]) {

98 
	`publ_li°
(
	`m∆_©å_gë_u32
(
©ås
[
TIPC_NLA_SOCK_REF
]));

101  
MNL_CB_OK
;

102 
	}
}

104 
	$cmd_sockë_li°
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd,

105 
cmdl
 *cmdl, *
d©a
)

107 
buf
[
MNL_SOCKET_BUFFER_SIZE
];

109 i‡(
hñp_Êag
) {

110 
	`Ârötf
(
°dîr
, "Ußge: %†sockëÜi°\n", 
cmdl
->
¨gv
[0]);

111  -
EINVAL
;

114 i‡(!(
∆h
 = 
	`msg_öô
(
buf
, 
TIPC_NL_SOCK_GET
))) {

115 
	`Ârötf
(
°dîr
, "error, message initialisation failed\n");

119  
	`msg_dumpô
(
∆h
, 
sock_li°_cb
, 
NULL
);

120 
	}
}

122 
	$cmd_sockë_hñp
(
cmdl
 *cmdl)

124 
	`Ârötf
(
°dîr
,

128 
cmdl
->
¨gv
[0]);

129 
	}
}

131 
	$cmd_sockë
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl,

132 *
d©a
)

134 c⁄° 
cmd
 
cmds
[] = {

135 { "li°", 
cmd_sockë_li°
, 
NULL
 },

136 { 
NULL
 }

139  
	`run_cmd
(
∆h
, 
cmd
, 
cmds
, 
cmdl
, 
NULL
);

140 
	}
}

	@tipc/socket.h

12 #i‚de‡
_TIPC_SOCKET_H


13 
	#_TIPC_SOCKET_H


	)

15 
hñp_Êag
;

17 
cmd_sockë_hñp
(
cmdl
 *cmdl);

18 
cmd_sockë
(
∆msghdr
 *
∆h
, c⁄° 
cmd
 *cmd, 
cmdl
 *cmdl,

19 *
d©a
);

	@tipc/tipc.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<gë›t.h
>

15 
	~<uni°d.h
>

17 
	~"bóªr.h
"

18 
	~"lök.h
"

19 
	~"«mëabÀ.h
"

20 
	~"sockë.h
"

21 
	~"medü.h
"

22 
	~"node.h
"

23 
	~"cmdl.h
"

25 
	ghñp_Êag
;

27 
	$about
(
cmdl
 *cmdl)

29 
	`Ârötf
(
°dîr
,

43 
cmdl
->
¨gv
[0]);

44 
	}
}

46 
	$maö
(
¨gc
, *
¨gv
[])

48 
i
;

49 
ªs
;

50 
cmdl
 cmdl;

51 c⁄° 
cmd
 cmd = {"tùc", 
NULL
, 
about
};

52 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

53 {"hñp", 
no_¨gumít
, 0, 'h'},

56 c⁄° 
cmd
 
cmds
[] = {

57 { "bóªr", 
cmd_bóªr
, 
cmd_bóªr_hñp
},

58 { "lök", 
cmd_lök
, 
cmd_lök_hñp
},

59 { "medü", 
cmd_medü
, 
cmd_medü_hñp
},

60 { "«mëabÀ", 
cmd_«mëabÀ
, 
cmd_«mëabÀ_hñp
},

61 { "node", 
cmd_node
, 
cmd_node_hñp
},

62 { "sockë", 
cmd_sockë
, 
cmd_sockë_hñp
},

63 { 
NULL
 }

67 
›ti⁄_ödex
 = 0;

69 
i
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

71 
i
) {

77 
hñp_Êag
 = 1;

86 } 
i
 != -1);

88 
cmdl
.
›töd
 = optind;

89 
cmdl
.
¨gc
 =árgc;

90 
cmdl
.
¨gv
 =árgv;

92 i‡((
ªs
 = 
	`run_cmd
(
NULL
, &
cmd
, 
cmds
, &
cmdl
, NULL)) != 0)

96 
	}
}

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #ifde‡
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #ifde‡
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #ifde‡
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

231 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

232 
	#_POSIX_SOURCE
 1

	)

233 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

234 
	#_POSIX_C_SOURCE
 2

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

236 
	#_POSIX_C_SOURCE
 199506L

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

238 
	#_POSIX_C_SOURCE
 200112L

	)

240 
	#_POSIX_C_SOURCE
 200809L

	)

242 
	#__USE_POSIX_IMPLICITLY
 1

	)

245 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 21

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/fnmatch.h

18 #i‚def 
_FNMATCH_H


19 
	#_FNMATCH_H
 1

	)

21 #ifdef 
__˝lu•lus


27 #unde‡
FNM_PATHNAME


28 #unde‡
FNM_NOESCAPE


29 #unde‡
FNM_PERIOD


32 
	#FNM_PATHNAME
 (1 << 0Ë

	)

33 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

34 
	#FNM_PERIOD
 (1 << 2Ë

	)

36 #i‡!
deföed
 
_POSIX_C_SOURCE
 || _POSIX_C_SOURCE < 2 || deföed 
_GNU_SOURCE


37 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

38 
	#FNM_LEADING_DIR
 (1 << 3Ë

	)

39 
	#FNM_CASEFOLD
 (1 << 4Ë

	)

40 
	#FNM_EXTMATCH
 (1 << 5Ë

	)

44 
	#FNM_NOMATCH
 1

	)

50 #ifde‡
_XOPEN_SOURCE


51 
	#FNM_NOSYS
 (-1)

	)

56 
‚m©ch
 (c⁄° *
__∑âîn
, c⁄° *
__«me
, 
__Êags
);

58 #ifdef 
__˝lu•lus


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/grp.h

22 #i‚def 
_GRP_H


23 
	#_GRP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

36 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

42 
	sgroup


44 *
	mgr_«me
;

45 *
	mgr_∑sswd
;

46 
__gid_t
 
	mgr_gid
;

47 **
	mgr_mem
;

51 #ifde‡
__USE_MISC


52 
	#__√ed_FILE


	)

53 
	~<°dio.h
>

57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


62 
£tgª¡
 ();

65 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


70 
ídgª¡
 ();

76 
group
 *
gëgª¡
 ();

79 #ifdef 
__USE_MISC


86 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

89 #ifde‡
__USE_GNU


96 
putgª¡
 (c⁄° 
group
 *
__ª°ri˘
 
__p
,

97 
FILE
 *
__ª°ri˘
 
__f
);

104 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

110 
group
 *
gëg∫am
 (c⁄° *
__«me
);

112 #ifde‡
__USE_POSIX


114 #ifde‡
__USE_MISC


117 
	#NSS_BUFLEN_GROUP
 1024

	)

133 #ifde‡
__USE_GNU


134 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

135 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

136 
group
 **
__ª°ri˘
 
__ªsu…
);

143 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

144 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

145 
group
 **
__ª°ri˘
 
__ªsu…
);

151 
gëg∫am_r
 (c⁄° *
__ª°ri˘
 
__«me
,

152 
group
 *
__ª°ri˘
 
__ªsu…buf
,

153 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

154 
group
 **
__ª°ri˘
 
__ªsu…
);

156 #ifdef 
__USE_MISC


164 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

165 
group
 *
__ª°ri˘
 
__ªsu…buf
,

166 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

167 
group
 **
__ª°ri˘
 
__ªsu…
);

173 #ifdef 
__USE_MISC


175 
	#__√ed_size_t


	)

176 
	~<°ddef.h
>

179 
	$£tgroups
 (
size_t
 
__n
, c⁄° 
__gid_t
 *
__groups
Ë
__THROW
;

189 
	`gëgrou∂i°
 (c⁄° *
__u£r
, 
__gid_t
 
__group
,

190 
__gid_t
 *
__groups
, *
__ngroups
);

200 
	`öôgroups
 (c⁄° *
__u£r
, 
__gid_t
 
__group
);

204 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/link.h

20 #i‚def 
_LINK_H


21 
	#_LINK_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ñf.h
>

25 
	~<dlf˙.h
>

26 
	~<sys/ty≥s.h
>

30 
	#ElfW
(
ty≥
Ë
	`_ElfW
 (
Elf
, 
__ELF_NATIVE_CLASS
,Åy≥)

	)

31 
	#_ElfW
(
e
,
w
,
t
Ë
	`_ElfW_1
 (e, w, 
_
##t)

	)

32 
	#_ElfW_1
(
e
,
w
,
t
Ëe##w##
	)
t

34 
	~<bôs/ñf˛ass.h
>

35 
	~<bôs/lök.h
>

42 
	sr_debug


44 
	mr_vîsi⁄
;

46 
lök_m≠
 *
	mr_m≠
;

53 
ElfW
(
Addr
Ë
	mr_brk
;

58 
	mRT_CONSISTENT
,

59 
	mRT_ADD
,

60 
	mRT_DELETE


61 } 
	mr_°©e
;

63 
ElfW
(
Addr
Ë
	mr_ldba£
;

67 
r_debug
 
_r_debug
;

76 
	$ElfW
(
Dyn
Ë
_DYNAMIC
[];

84 
	slök_m≠


89 
	`ElfW
(
Addr
Ë
l_addr
;

91 *
l_«me
;

92 
	`ElfW
(
Dyn
Ë*
l_ld
;

93 
lök_m≠
 *
l_√xt
, *
l_¥ev
;

96 #ifde‡
__USE_GNU


99 
	#LAV_CURRENT
 1

	)

104 
LA_ACT_CONSISTENT
,

105 
LA_ACT_ADD
,

106 
LA_ACT_DELETE


112 
LA_SER_ORIG
 = 0x01,

113 
LA_SER_LIBPATH
 = 0x02,

114 
LA_SER_RUNPATH
 = 0x04,

115 
LA_SER_CONFIG
 = 0x08,

116 
LA_SER_DEFAULT
 = 0x40,

117 
LA_SER_SECURE
 = 0x80

123 
LA_FLG_BINDTO
 = 0x01,

124 
LA_FLG_BINDFROM
 = 0x02

130 
LA_SYMB_NOPLTENTER
 = 0x01,

131 
LA_SYMB_NOPLTEXIT
 = 0x02,

132 
LA_SYMB_STRUCTCALL
 = 0x04,

133 
LA_SYMB_DLSYM
 = 0x08,

134 
LA_SYMB_ALTVALUE
 = 0x10

138 
	sdl_phdr_öfo


140 
	`ElfW
(
Addr
Ë
dÕi_addr
;

141 c⁄° *
dÕi_«me
;

142 c⁄° 
	`ElfW
(
Phdr
Ë*
dÕi_phdr
;

143 
	`ElfW
(
HÆf
Ë
dÕi_phnum
;

151 
__exãnsi⁄__
 
dÕi_adds
;

153 
__exãnsi⁄__
 
dÕi_subs
;

157 
size_t
 
dÕi_és_modid
;

162 *
dÕi_és_d©a
;

165 
__BEGIN_DECLS


167 
	`dl_ôî©e_phdr
 ((*
__ˇŒback
Ë(
dl_phdr_öfo
 *,

168 
size_t
, *),

169 *
__d©a
);

175 
	`œ_vîsi⁄
 (
__vîsi⁄
);

176 
	`œ_a˘ivôy
 (
uöçå_t
 *
__cookõ
, 
__Êag
);

177 *
	`œ_obj£¨ch
 (c⁄° *
__«me
, 
uöçå_t
 *
__cookõ
,

178 
__Êag
);

179 
	`œ_obj›í
 (
lök_m≠
 *
__m≠
, 
Lmid_t
 
__lmid
,

180 
uöçå_t
 *
__cookõ
);

181 
	`œ_¥eöô
 (
uöçå_t
 *
__cookõ
);

182 
uöçå_t
 
	`œ_symböd32
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

183 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

184 *
__Êags
, c⁄° *
__sym«me
);

185 
uöçå_t
 
	`œ_symböd64
 (
Elf64_Sym
 *
__sym
, 
__ndx
,

186 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

187 *
__Êags
, c⁄° *
__sym«me
);

188 
	`œ_obj˛o£
 (
uöçå_t
 *
__cookõ
);

190 
__END_DECLS


	@/usr/include/linux/atm.h

11 #i‚de‡
_LINUX_ATM_H


12 
	#_LINUX_ATM_H


	)

20 
	~<löux/©m≠i.h
>

21 
	~<löux/©mßp.h
>

22 
	~<löux/©mioc.h
>

23 
	~<löux/ty≥s.h
>

27 
	#ATM_CELL_SIZE
 53

	)

28 
	#ATM_CELL_PAYLOAD
 48

	)

29 
	#ATM_AAL0_SDU
 52

	)

30 
	#ATM_MAX_AAL34_PDU
 65535

	)

31 
	#ATM_AAL5_TRAILER
 8

	)

32 
	#ATM_MAX_AAL5_PDU
 65535

	)

33 
	#ATM_MAX_CDV
 9999

	)

34 
	#ATM_NOT_RSV_VCI
 32

	)

36 
	#ATM_MAX_VPI
 255

	)

37 
	#ATM_MAX_VPI_NNI
 4096

	)

38 
	#ATM_MAX_VCI
 65535

	)

42 
	#ATM_NO_AAL
 0

	)

43 
	#ATM_AAL0
 13

	)

44 
	#ATM_AAL1
 1

	)

45 
	#ATM_AAL2
 2

	)

46 
	#ATM_AAL34
 3

	)

47 
	#ATM_AAL5
 5

	)

57 
	#__SO_ENCODE
(
l
,
n
,
t
) ((((l) & 0x1FF) << 22) | ((n) << 16) | \

58 (
t
))

	)

59 
	#__SO_LEVEL_MATCH
(
c
,
m
Ë(((cË>> 22Ë=((mË& 0x1FF))

	)

60 
	#__SO_NUMBER
(
c
Ë(((cË>> 16Ë& 0x3f)

	)

61 
	#__SO_SIZE
(
c
Ë((cË& 0x3fff)

	)

67 
	#SO_SETCLP
 
	`__SO_ENCODE
(
SOL_ATM
,0,)

	)

69 
	#SO_CIRANGE
 
	`__SO_ENCODE
(
SOL_ATM
,1,
©m_cú™ge
)

	)

72 
	#SO_ATMQOS
 
	`__SO_ENCODE
(
SOL_ATM
,2,
©m_qos
)

	)

74 
	#SO_ATMSAP
 
	`__SO_ENCODE
(
SOL_ATM
,3,
©m_ßp
)

	)

76 
	#SO_ATMPVC
 
	`__SO_ENCODE
(
SOL_ATM
,4,
sockaddr_©mpvc
)

	)

78 
	#SO_MULTIPOINT
 
	`__SO_ENCODE
(
SOL_ATM
, 5, )

	)

93 
	#ATM_HDR_GFC_MASK
 0xf0000000

	)

94 
	#ATM_HDR_GFC_SHIFT
 28

	)

95 
	#ATM_HDR_VPI_MASK
 0x0ff00000

	)

96 
	#ATM_HDR_VPI_SHIFT
 20

	)

97 
	#ATM_HDR_VCI_MASK
 0x000ffff0

	)

98 
	#ATM_HDR_VCI_SHIFT
 4

	)

99 
	#ATM_HDR_PTI_MASK
 0x0000000e

	)

100 
	#ATM_HDR_PTI_SHIFT
 1

	)

101 
	#ATM_HDR_CLP
 0x00000001

	)

108 
	#ATM_PTI_US0
 0

	)

109 
	#ATM_PTI_US1
 1

	)

110 
	#ATM_PTI_UCES0
 2

	)

111 
	#ATM_PTI_UCES1
 3

	)

112 
	#ATM_PTI_SEGF5
 4

	)

113 
	#ATM_PTI_E2EF5
 5

	)

114 
	#ATM_PTI_RSV_RM
 6

	)

115 
	#ATM_PTI_RSV
 7

	)

126 
	#ATM_NONE
 0

	)

127 
	#ATM_UBR
 1

	)

128 
	#ATM_CBR
 2

	)

129 
	#ATM_VBR
 3

	)

130 
	#ATM_ABR
 4

	)

131 
	#ATM_ANYCLASS
 5

	)

133 
	#ATM_MAX_PCR
 -1

	)

135 
	s©m_åaÂrm
 {

136 
	måaffic_˛ass
;

137 
	mmax_p¸
;

138 
	mp¸
;

139 
	mmö_p¸
;

140 
	mmax_cdv
;

141 
	mmax_sdu
;

143 
	mi¸
;

144 
	mtbe
;

145 
	m‰â
 : 24;

146 
	mrif
 : 4;

147 
	mrdf
 : 4;

148 
	mƒm_¥es
 :1;

149 
	måm_¥es
 :1;

150 
	madtf_¥es
 :1;

151 
	mcdf_¥es
 :1;

152 
	mƒm
 :3;

153 
	måm
 :3;

154 
	madtf
 :10;

155 
	mcdf
 :3;

156 
	m•¨e
 :9;

159 
	s©m_qos
 {

160 
©m_åaÂrm
 
	mtxç
;

161 
©m_åaÂrm
 
rxç
 
	m__ATM_API_ALIGN
;

163 
Øl
 
	m__ATM_API_ALIGN
;

168 
	#ATM_ITF_ANY
 -1

	)

169 
	#ATM_VPI_ANY
 -1

	)

170 
	#ATM_VCI_ANY
 -1

	)

171 
	#ATM_VPI_UNSPEC
 -2

	)

172 
	#ATM_VCI_UNSPEC
 -2

	)

175 
	ssockaddr_©mpvc
 {

176 
	mßp_Ámûy
;

178 
	môf
;

179 
	mvpi
;

180 
	mvci
;

181 } 
ßp_addr
 
	m__ATM_API_ALIGN
;

186 
	#ATM_ESA_LEN
 20

	)

187 
	#ATM_E164_LEN
 12

	)

189 
	#ATM_AFI_DCC
 0x39

	)

190 
	#ATM_AFI_ICD
 0x47

	)

191 
	#ATM_AFI_E164
 0x45

	)

192 
	#ATM_AFI_LOCAL
 0x49

	)

194 
	#ATM_AFI_DCC_GROUP
 0xBD

	)

195 
	#ATM_AFI_ICD_GROUP
 0xC5

	)

196 
	#ATM_AFI_E164_GROUP
 0xC3

	)

197 
	#ATM_AFI_LOCAL_GROUP
 0xC7

	)

199 
	#ATM_LIJ_NONE
 0

	)

200 
	#ATM_LIJ
 1

	)

201 
	#ATM_LIJ_RPJ
 2

	)

202 
	#ATM_LIJ_NJ
 3

	)

205 
	ssockaddr_©msvc
 {

206 
	mßs_Ámûy
;

208 
	m¥v
[
ATM_ESA_LEN
];

209 
	mpub
[
ATM_E164_LEN
+1];

211 
	mlij_ty≥
;

212 
__u32
 
	mlij_id
;

213 } 
ßs_addr
 
	m__ATM_API_ALIGN
;

217 
__ölöe__
 
	$©msvc_addr_ö_u£
(
sockaddr_©msvc
 
addr
)

219  *
addr
.
ßs_addr
.
¥v
 || *addr.ßs_addr.
pub
;

220 
	}
}

223 
__ölöe__
 
	$©mpvc_addr_ö_u£
(
sockaddr_©mpvc
 
addr
)

225  
addr
.
ßp_addr
.
ôf
 ||áddr.ßp_addr.
vpi
 ||áddr.ßp_addr.
vci
;

226 
	}
}

233 
	s©mif_sioc
 {

234 
	mnumbî
;

235 
	mÀngth
;

236 *
	m¨g
;

240 
	t©m_backíd_t
;

	@/usr/include/linux/atmapi.h

6 #i‚de‡
_LINUX_ATMAPI_H


7 
	#_LINUX_ATMAPI_H


	)

9 #i‡
deföed
(
__•¨c__
Ë|| deföed(
__ü64__
)

12 
	#__ATM_API_ALIGN
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

14 
	#__ATM_API_ALIGN


	)

27 °ru˘ { 
	m_
[8]; } 
	t__ATM_API_ALIGN
 
	t©m_k±r_t
;

	@/usr/include/linux/atmarp.h

6 #i‚de‡
_LINUX_ATMARP_H


7 
	#_LINUX_ATMARP_H


	)

9 
	~<löux/ty≥s.h
>

10 
	~<löux/©m≠i.h
>

11 
	~<löux/©mioc.h
>

14 
	#ATMARP_RETRY_DELAY
 30

	)

17 
	#ATMARP_MAX_UNRES_PACKETS
 5

	)

21 
	#ATMARPD_CTRL
 
	`_IO
('a',
ATMIOC_CLIP
+1Ë

	)

22 
	#ATMARP_MKIP
 
	`_IO
('a',
ATMIOC_CLIP
+2Ë

	)

23 
	#ATMARP_SETENTRY
 
	`_IO
('a',
ATMIOC_CLIP
+3Ë

	)

24 
	#ATMARP_ENCAP
 
	`_IO
('a',
ATMIOC_CLIP
+5Ë

	)

27 
	e©m¨p_˘æ_ty≥
 {

28 
	ma˘_övÆid
,

29 
	ma˘_√ed
,

30 
	ma˘_up
,

31 
	ma˘_down
,

32 
	ma˘_ch™ge


35 
	s©m¨p_˘æ
 {

36 
©m¨p_˘æ_ty≥
 
	mty≥
;

37 
	môf_num
;

38 
__be32
 
	mù
;

	@/usr/include/linux/atmdev.h

6 #i‚de‡
LINUX_ATMDEV_H


7 
	#LINUX_ATMDEV_H


	)

10 
	~<löux/©m≠i.h
>

11 
	~<löux/©m.h
>

12 
	~<löux/©mioc.h
>

15 
	#ESI_LEN
 6

	)

17 
	#ATM_OC3_PCR
 (155520000/270*260/8/53)

	)

22 
	#ATM_25_PCR
 ((25600000/8-8000)/54)

	)

24 
	#ATM_OC12_PCR
 (622080000/1080*1040/8/53)

	)

29 
	#ATM_DS3_PCR
 (8000*12)

	)

33 
	#__AAL_STAT_ITEMS
 \

34 
	`__HANDLE_ITEM
(
tx
); \

35 
	`__HANDLE_ITEM
(
tx_îr
); \

36 
	`__HANDLE_ITEM
(
rx
); \

37 
	`__HANDLE_ITEM
(
rx_îr
); \

38 
	`__HANDLE_ITEM
(
rx_dr›
);

	)

40 
	s©m_Øl_°©s
 {

41 
	#__HANDLE_ITEM
(
i
Ë
	)
i

42 
	m__AAL_STAT_ITEMS


43 #unde‡
__HANDLE_ITEM


47 
	s©m_dev_°©s
 {

48 
©m_Øl_°©s
 
	mØl0
;

49 
©m_Øl_°©s
 
	mØl34
;

50 
©m_Øl_°©s
 
	mØl5
;

51 } 
	g__ATM_API_ALIGN
;

54 
	#ATM_GETLINKRATE
 
	`_IOW
('a',
ATMIOC_ITF
+1,
©mif_sioc
)

	)

56 
	#ATM_GETNAMES
 
	`_IOW
('a',
ATMIOC_ITF
+3,
©m_iobuf
)

	)

58 
	#ATM_GETTYPE
 
	`_IOW
('a',
ATMIOC_ITF
+4,
©mif_sioc
)

	)

60 
	#ATM_GETESI
 
	`_IOW
('a',
ATMIOC_ITF
+5,
©mif_sioc
)

	)

62 
	#ATM_GETADDR
 
	`_IOW
('a',
ATMIOC_ITF
+6,
©mif_sioc
)

	)

64 
	#ATM_RSTADDR
 
	`_IOW
('a',
ATMIOC_ITF
+7,
©mif_sioc
)

	)

66 
	#ATM_ADDADDR
 
	`_IOW
('a',
ATMIOC_ITF
+8,
©mif_sioc
)

	)

68 
	#ATM_DELADDR
 
	`_IOW
('a',
ATMIOC_ITF
+9,
©mif_sioc
)

	)

70 
	#ATM_GETCIRANGE
 
	`_IOW
('a',
ATMIOC_ITF
+10,
©mif_sioc
)

	)

72 
	#ATM_SETCIRANGE
 
	`_IOW
('a',
ATMIOC_ITF
+11,
©mif_sioc
)

	)

74 
	#ATM_SETESI
 
	`_IOW
('a',
ATMIOC_ITF
+12,
©mif_sioc
)

	)

76 
	#ATM_SETESIF
 
	`_IOW
('a',
ATMIOC_ITF
+13,
©mif_sioc
)

	)

78 
	#ATM_ADDLECSADDR
 
	`_IOW
('a', 
ATMIOC_ITF
+14, 
©mif_sioc
)

	)

80 
	#ATM_DELLECSADDR
 
	`_IOW
('a', 
ATMIOC_ITF
+15, 
©mif_sioc
)

	)

82 
	#ATM_GETLECSADDR
 
	`_IOW
('a', 
ATMIOC_ITF
+16, 
©mif_sioc
)

	)

85 
	#ATM_GETSTAT
 
	`_IOW
('a',
ATMIOC_SARCOM
+0,
©mif_sioc
)

	)

87 
	#ATM_GETSTATZ
 
	`_IOW
('a',
ATMIOC_SARCOM
+1,
©mif_sioc
)

	)

89 
	#ATM_GETLOOP
 
	`_IOW
('a',
ATMIOC_SARCOM
+2,
©mif_sioc
)

	)

91 
	#ATM_SETLOOP
 
	`_IOW
('a',
ATMIOC_SARCOM
+3,
©mif_sioc
)

	)

93 
	#ATM_QUERYLOOP
 
	`_IOW
('a',
ATMIOC_SARCOM
+4,
©mif_sioc
)

	)

95 
	#ATM_SETSC
 
	`_IOW
('a',
ATMIOC_SPECIAL
+1,)

	)

97 
	#ATM_SETBACKEND
 
	`_IOW
('a',
ATMIOC_SPECIAL
+2,
©m_backíd_t
)

	)

99 
	#ATM_NEWBACKENDIF
 
	`_IOW
('a',
ATMIOC_SPECIAL
+3,
©m_backíd_t
)

	)

101 
	#ATM_ADDPARTY
 
	`_IOW
('a', 
ATMIOC_SPECIAL
+4,
©m_iobuf
)

	)

103 #ifde‡
CONFIG_COMPAT


105 
	#COMPAT_ATM_ADDPARTY
 
	`_IOW
('a', 
ATMIOC_SPECIAL
+4,
com∑t_©m_iobuf
)

	)

107 
	#ATM_DROPPARTY
 
	`_IOW
('a', 
ATMIOC_SPECIAL
+5,)

	)

115 
	#ATM_BACKEND_RAW
 0

	)

116 
	#ATM_BACKEND_PPP
 1

	)

117 
	#ATM_BACKEND_BR2684
 2

	)

120 
	#ATM_ITFTYP_LEN
 8

	)

127 
	#__ATM_LM_NONE
 0

	)

128 
	#__ATM_LM_AAL
 1

	)

129 
	#__ATM_LM_ATM
 2

	)

131 
	#__ATM_LM_PHY
 8

	)

132 
	#__ATM_LM_ANALOG
 16

	)

135 
	#__ATM_LM_MKLOC
(
n
Ë(“)Ë

	)

136 
	#__ATM_LM_MKRMT
(
n
Ë(“Ë<< 8Ë

	)

138 
	#__ATM_LM_XTLOC
(
n
Ë(“Ë& 0xff)

	)

139 
	#__ATM_LM_XTRMT
(
n
Ë((“Ë>> 8Ë& 0xff)

	)

141 
	#ATM_LM_NONE
 0

	)

143 
	#ATM_LM_LOC_AAL
 
	`__ATM_LM_MKLOC
(
__ATM_LM_AAL
)

	)

144 
	#ATM_LM_LOC_ATM
 
	`__ATM_LM_MKLOC
(
__ATM_LM_ATM
)

	)

145 
	#ATM_LM_LOC_PHY
 
	`__ATM_LM_MKLOC
(
__ATM_LM_PHY
)

	)

146 
	#ATM_LM_LOC_ANALOG
 
	`__ATM_LM_MKLOC
(
__ATM_LM_ANALOG
)

	)

148 
	#ATM_LM_RMT_AAL
 
	`__ATM_LM_MKRMT
(
__ATM_LM_AAL
)

	)

149 
	#ATM_LM_RMT_ATM
 
	`__ATM_LM_MKRMT
(
__ATM_LM_ATM
)

	)

150 
	#ATM_LM_RMT_PHY
 
	`__ATM_LM_MKRMT
(
__ATM_LM_PHY
)

	)

151 
	#ATM_LM_RMT_ANALOG
 
	`__ATM_LM_MKRMT
(
__ATM_LM_ANALOG
)

	)

159 
	s©m_iobuf
 {

160 
	mÀngth
;

161 *
	mbuf„r
;

166 
	#ATM_CI_MAX
 -1

	)

168 
	s©m_cú™ge
 {

169 sig√d 
	mvpi_bôs
;

170 sig√d 
	mvci_bôs
;

175 
	#ATM_SC_RX
 1024

	)

176 
	#ATM_SC_TX
 2048

	)

178 
	#ATM_BACKLOG_DEFAULT
 32

	)

183 
	#ATM_MF_IMMED
 1

	)

184 
	#ATM_MF_INC_RSV
 2

	)

185 
	#ATM_MF_INC_SHP
 4

	)

186 
	#ATM_MF_DEC_RSV
 8

	)

187 
	#ATM_MF_DEC_SHP
 16

	)

188 
	#ATM_MF_BWD
 32

	)

190 
	#ATM_MF_SET
 (
ATM_MF_INC_RSV
 | 
ATM_MF_INC_SHP
 | 
ATM_MF_DEC_RSV
 | \

191 
ATM_MF_DEC_SHP
 | 
ATM_MF_BWD
)

	)

197 
	#ATM_VS_IDLE
 0

	)

198 
	#ATM_VS_CONNECTED
 1

	)

199 
	#ATM_VS_CLOSING
 2

	)

200 
	#ATM_VS_LISTEN
 3

	)

201 
	#ATM_VS_INUSE
 4

	)

202 
	#ATM_VS_BOUND
 5

	)

204 
	#ATM_VS2TXT_MAP
 \

205 "IDLE", "CONNECTED", "CLOSING", "LISTEN", "INUSE", "BOUND"

	)

207 
	#ATM_VF2TXT_MAP
 \

211 "SESSION", "HASSAP", "BOUND", "CLOSE"

	)

	@/usr/include/linux/atmioc.h

12 #i‚de‡
_LINUX_ATMIOC_H


13 
	#_LINUX_ATMIOC_H


	)

15 
	~<asm/io˘l.h
>

18 
	#ATMIOC_PHYCOM
 0x00

	)

19 
	#ATMIOC_PHYCOM_END
 0x0f

	)

20 
	#ATMIOC_PHYTYP
 0x10

	)

21 
	#ATMIOC_PHYTYP_END
 0x2f

	)

22 
	#ATMIOC_PHYPRV
 0x30

	)

23 
	#ATMIOC_PHYPRV_END
 0x4f

	)

24 
	#ATMIOC_SARCOM
 0x50

	)

25 
	#ATMIOC_SARCOM_END
 0x50

	)

26 
	#ATMIOC_SARPRV
 0x60

	)

27 
	#ATMIOC_SARPRV_END
 0x7f

	)

28 
	#ATMIOC_ITF
 0x80

	)

29 
	#ATMIOC_ITF_END
 0x8f

	)

30 
	#ATMIOC_BACKEND
 0x90

	)

31 
	#ATMIOC_BACKEND_END
 0xaf

	)

33 
	#ATMIOC_AREQUIPA
 0xc0

	)

34 
	#ATMIOC_LANE
 0xd0

	)

35 
	#ATMIOC_MPOA
 0xd8

	)

36 
	#ATMIOC_CLIP
 0xe0

	)

37 
	#ATMIOC_CLIP_END
 0xef

	)

38 
	#ATMIOC_SPECIAL
 0xf0

	)

39 
	#ATMIOC_SPECIAL_END
 0xff

	)

	@/usr/include/linux/atmsap.h

6 #i‚de‡
_LINUX_ATMSAP_H


7 
	#_LINUX_ATMSAP_H


	)

9 
	~<löux/©m≠i.h
>

22 
	#ATM_L2_NONE
 0

	)

23 
	#ATM_L2_ISO1745
 0x01

	)

24 
	#ATM_L2_Q291
 0x02

	)

25 
	#ATM_L2_X25_LL
 0x06

	)

26 
	#ATM_L2_X25_ML
 0x07

	)

27 
	#ATM_L2_LAPB
 0x08

	)

28 
	#ATM_L2_HDLC_ARM
 0x09

	)

29 
	#ATM_L2_HDLC_NRM
 0x0®

	)

30 
	#ATM_L2_HDLC_ABM
 0x0b

	)

31 
	#ATM_L2_ISO8802
 0x0¯

	)

32 
	#ATM_L2_X75
 0x0d

	)

33 
	#ATM_L2_Q922
 0x0ê

	)

34 
	#ATM_L2_USER
 0x10

	)

35 
	#ATM_L2_ISO7776
 0x11

	)

44 
	#ATM_L3_NONE
 0

	)

45 
	#ATM_L3_X25
 0x06

	)

46 
	#ATM_L3_ISO8208
 0x07

	)

47 
	#ATM_L3_X223
 0x08

	)

48 
	#ATM_L3_ISO8473
 0x09

	)

49 
	#ATM_L3_T70
 0x0®

	)

50 
	#ATM_L3_TR9577
 0x0b

	)

51 
	#ATM_L3_H310
 0x0¯

	)

52 
	#ATM_L3_H321
 0x0d

	)

53 
	#ATM_L3_USER
 0x10

	)

62 
	#ATM_HL_NONE
 0

	)

63 
	#ATM_HL_ISO
 0x01

	)

64 
	#ATM_HL_USER
 0x02

	)

65 
	#ATM_HL_HLP
 0x03

	)

66 
	#ATM_HL_VENDOR
 0x04

	)

75 
	#ATM_IMD_NONE
 0

	)

76 
	#ATM_IMD_NORMAL
 1

	)

77 
	#ATM_IMD_EXTENDED
 2

	)

84 
	#ATM_TT_NONE
 0

	)

85 
	#ATM_TT_RX
 1

	)

86 
	#ATM_TT_TX
 2

	)

87 
	#ATM_TT_RXTX
 3

	)

89 
	#ATM_MC_NONE
 0

	)

90 
	#ATM_MC_TS
 1

	)

91 
	#ATM_MC_TS_FEC
 2

	)

92 
	#ATM_MC_PS
 3

	)

93 
	#ATM_MC_PS_FEC
 4

	)

94 
	#ATM_MC_H221
 5

	)

100 
	#ATM_MAX_HLI
 8

	)

103 
	s©m_bŒi
 {

104 
	ml2_¥Ÿo
;

107 
	mmode
;

109 
	mwödow
;

110 } 
	môu
;

111 
	mu£r
;

112 } 
	ml2
;

113 
	ml3_¥Ÿo
;

116 
	mmode
;

118 
	mdef_size
;

120 
	mwödow
;

121 } 
	môu
;

122 
	mu£r
;

124 
	mãrm_ty≥
;

125 
	mfw_mpx_ˇp
;

127 
	mbw_mpx_ˇp
;

129 } 
	mh310
;

131 
	mùi
;

132 
	m¢≠
[5];

134 } 
	må9577
;

135 } 
	ml3
;

136 } 
	g__ATM_API_ALIGN
;

139 
	s©m_bhli
 {

140 
	mhl_ty≥
;

141 
	mhl_Àngth
;

143 
	mhl_öfo
[
ATM_MAX_HLI
];

147 
	#ATM_MAX_BLLI
 3

	)

150 
	s©m_ßp
 {

151 
©m_bhli
 
	mbhli
;

152 
©m_bŒi
 
	mbŒi
[
ATM_MAX_BLLI
] 
	m__ATM_API_ALIGN
;

157 
__ölöe__
 
	$bŒi_ö_u£
(
©m_bŒi
 
bŒi
)

159  
bŒi
.
l2_¥Ÿo
 || bŒi.
l3_¥Ÿo
;

160 
	}
}

	@/usr/include/linux/bpf.h

7 #i‚de‡
__LINUX_BPF_H__


8 
	#__LINUX_BPF_H__


	)

10 
	~<löux/ty≥s.h
>

11 
	~<löux/bpf_comm⁄.h
>

16 
	#BPF_ALU64
 0x07

	)

19 
	#BPF_DW
 0x18

	)

20 
	#BPF_XADD
 0xc0

	)

23 
	#BPF_MOV
 0xb0

	)

24 
	#BPF_ARSH
 0xc0

	)

27 
	#BPF_END
 0xd0

	)

28 
	#BPF_TO_LE
 0x00

	)

29 
	#BPF_TO_BE
 0x08

	)

30 
	#BPF_FROM_LE
 
BPF_TO_LE


	)

31 
	#BPF_FROM_BE
 
BPF_TO_BE


	)

33 
	#BPF_JNE
 0x50

	)

34 
	#BPF_JSGT
 0x60

	)

35 
	#BPF_JSGE
 0x70

	)

36 
	#BPF_CALL
 0x80

	)

37 
	#BPF_EXIT
 0x90

	)

41 
	mBPF_REG_0
 = 0,

42 
	mBPF_REG_1
,

43 
	mBPF_REG_2
,

44 
	mBPF_REG_3
,

45 
	mBPF_REG_4
,

46 
	mBPF_REG_5
,

47 
	mBPF_REG_6
,

48 
	mBPF_REG_7
,

49 
	mBPF_REG_8
,

50 
	mBPF_REG_9
,

51 
	mBPF_REG_10
,

52 
	m__MAX_BPF_REG
,

56 
	#MAX_BPF_REG
 
__MAX_BPF_REG


	)

58 
	sbpf_ö¢
 {

59 
__u8
 
	mcode
;

60 
__u8
 
	md°_ªg
:4;

61 
__u8
 
	m§c_ªg
:4;

62 
__s16
 
	moff
;

63 
__s32
 
	mimm
;

67 
	ebpf_cmd
 {

73 
	mBPF_MAP_CREATE
,

81 
	mBPF_MAP_LOOKUP_ELEM
,

88 
	mBPF_MAP_UPDATE_ELEM
,

95 
	mBPF_MAP_DELETE_ELEM
,

102 
	mBPF_MAP_GET_NEXT_KEY
,

109 
	mBPF_PROG_LOAD
,

112 
	ebpf_m≠_ty≥
 {

113 
	mBPF_MAP_TYPE_UNSPEC
,

114 
	mBPF_MAP_TYPE_HASH
,

115 
	mBPF_MAP_TYPE_ARRAY
,

118 
	ebpf_¥og_ty≥
 {

119 
	mBPF_PROG_TYPE_UNSPEC
,

120 
	mBPF_PROG_TYPE_SOCKET_FILTER
,

124 
	#BPF_ANY
 0

	)

125 
	#BPF_NOEXIST
 1

	)

126 
	#BPF_EXIST
 2

	)

128 
	ubpf_©å
 {

130 
__u32
 
	mm≠_ty≥
;

131 
__u32
 
	mkey_size
;

132 
__u32
 
	mvÆue_size
;

133 
__u32
 
	mmax_íåõs
;

137 
__u32
 
	mm≠_fd
;

138 
__Æig√d_u64
 
	mkey
;

140 
__Æig√d_u64
 
	mvÆue
;

141 
__Æig√d_u64
 
	m√xt_key
;

143 
__u64
 
	mÊags
;

147 
__u32
 
	m¥og_ty≥
;

148 
__u32
 
	mö¢_˙t
;

149 
__Æig√d_u64
 
	mö¢s
;

150 
__Æig√d_u64
 
	mli˚n£
;

151 
__u32
 
	mlog_Àvñ
;

152 
__u32
 
	mlog_size
;

153 
__Æig√d_u64
 
	mlog_buf
;

155 } 
__©åibuã__
((
Æig√d
(8)));

160 
	ebpf_func_id
 {

161 
	mBPF_FUNC_un•ec
,

162 
	mBPF_FUNC_m≠_lookup_ñem
,

163 
	mBPF_FUNC_m≠_upd©e_ñem
,

164 
	mBPF_FUNC_m≠_dñëe_ñem
,

165 
	m__BPF_FUNC_MAX_ID
,

	@/usr/include/linux/bpf_common.h

1 #i‚de‡
__LINUX_BPF_COMMON_H__


2 
	#__LINUX_BPF_COMMON_H__


	)

5 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

6 
	#BPF_LD
 0x00

	)

7 
	#BPF_LDX
 0x01

	)

8 
	#BPF_ST
 0x02

	)

9 
	#BPF_STX
 0x03

	)

10 
	#BPF_ALU
 0x04

	)

11 
	#BPF_JMP
 0x05

	)

12 
	#BPF_RET
 0x06

	)

13 
	#BPF_MISC
 0x07

	)

16 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

17 
	#BPF_W
 0x00

	)

18 
	#BPF_H
 0x08

	)

19 
	#BPF_B
 0x10

	)

20 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

21 
	#BPF_IMM
 0x00

	)

22 
	#BPF_ABS
 0x20

	)

23 
	#BPF_IND
 0x40

	)

24 
	#BPF_MEM
 0x60

	)

25 
	#BPF_LEN
 0x80

	)

26 
	#BPF_MSH
 0xa0

	)

29 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

30 
	#BPF_ADD
 0x00

	)

31 
	#BPF_SUB
 0x10

	)

32 
	#BPF_MUL
 0x20

	)

33 
	#BPF_DIV
 0x30

	)

34 
	#BPF_OR
 0x40

	)

35 
	#BPF_AND
 0x50

	)

36 
	#BPF_LSH
 0x60

	)

37 
	#BPF_RSH
 0x70

	)

38 
	#BPF_NEG
 0x80

	)

39 
	#BPF_MOD
 0x90

	)

40 
	#BPF_XOR
 0xa0

	)

42 
	#BPF_JA
 0x00

	)

43 
	#BPF_JEQ
 0x10

	)

44 
	#BPF_JGT
 0x20

	)

45 
	#BPF_JGE
 0x30

	)

46 
	#BPF_JSET
 0x40

	)

47 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

48 
	#BPF_K
 0x00

	)

49 
	#BPF_X
 0x08

	)

51 #i‚de‡
BPF_MAXINSNS


52 
	#BPF_MAXINSNS
 4096

	)

	@/usr/include/linux/can.h

45 #i‚de‡
_CAN_H


46 
	#_CAN_H


	)

48 
	~<löux/ty≥s.h
>

49 
	~<löux/sockë.h
>

54 
	#CAN_EFF_FLAG
 0x80000000U

	)

55 
	#CAN_RTR_FLAG
 0x40000000U

	)

56 
	#CAN_ERR_FLAG
 0x20000000U

	)

59 
	#CAN_SFF_MASK
 0x000007FFU

	)

60 
	#CAN_EFF_MASK
 0x1FFFFFFFU

	)

61 
	#CAN_ERR_MASK
 0x1FFFFFFFU

	)

71 
__u32
 
	tˇnid_t
;

73 
	#CAN_SFF_ID_BITS
 11

	)

74 
	#CAN_EFF_ID_BITS
 29

	)

82 
__u32
 
	tˇn_îr_mask_t
;

85 
	#CAN_MAX_DLC
 8

	)

86 
	#CAN_MAX_DLEN
 8

	)

89 
	#CANFD_MAX_DLC
 15

	)

90 
	#CANFD_MAX_DLEN
 64

	)

100 
	sˇn_‰ame
 {

101 
ˇnid_t
 
	mˇn_id
;

102 
__u8
 
	mˇn_dlc
;

103 
__u8
 
	md©a
[
CAN_MAX_DLEN
] 
__©åibuã__
((
Æig√d
(8)));

122 
	#CANFD_BRS
 0x01

	)

123 
	#CANFD_ESI
 0x02

	)

134 
	sˇnfd_‰ame
 {

135 
ˇnid_t
 
	mˇn_id
;

136 
__u8
 
	mÀn
;

137 
__u8
 
	mÊags
;

138 
__u8
 
	m__ªs0
;

139 
__u8
 
	m__ªs1
;

140 
__u8
 
	md©a
[
CANFD_MAX_DLEN
] 
__©åibuã__
((
Æig√d
(8)));

143 
	#CAN_MTU
 ((
ˇn_‰ame
))

	)

144 
	#CANFD_MTU
 ((
ˇnfd_‰ame
))

	)

147 
	#CAN_RAW
 1

	)

148 
	#CAN_BCM
 2

	)

149 
	#CAN_TP16
 3

	)

150 
	#CAN_TP20
 4

	)

151 
	#CAN_MCNET
 5

	)

152 
	#CAN_ISOTP
 6

	)

153 
	#CAN_NPROTO
 7

	)

155 
	#SOL_CAN_BASE
 100

	)

163 
	ssockaddr_ˇn
 {

164 
__kî√l_ß_Ámûy_t
 
	mˇn_Ámûy
;

165 
	mˇn_ifödex
;

168 °ru˘ { 
ˇnid_t
 
	mrx_id
, 
	mtx_id
; } 
	mç
;

171 } 
	mˇn_addr
;

187 
	sˇn_fûãr
 {

188 
ˇnid_t
 
	mˇn_id
;

189 
ˇnid_t
 
	mˇn_mask
;

192 
	#CAN_INV_FILTER
 0x20000000U

	)

	@/usr/include/linux/can/netlink.h

18 #i‚de‡
_CAN_NETLINK_H


19 
	#_CAN_NETLINK_H


	)

21 
	~<löux/ty≥s.h
>

30 
	sˇn_bôtimög
 {

31 
__u32
 
	mbôøã
;

32 
__u32
 
	mßm∂e_poöt
;

33 
__u32
 
	mtq
;

34 
__u32
 
	m¥›_£g
;

35 
__u32
 
	mpha£_£g1
;

36 
__u32
 
	mpha£_£g2
;

37 
__u32
 
	msjw
;

38 
__u32
 
	mbΩ
;

46 
	sˇn_bôtimög_c⁄°
 {

47 
	m«me
[16];

48 
__u32
 
	mt£g1_mö
;

49 
__u32
 
	mt£g1_max
;

50 
__u32
 
	mt£g2_mö
;

51 
__u32
 
	mt£g2_max
;

52 
__u32
 
	msjw_max
;

53 
__u32
 
	mbΩ_mö
;

54 
__u32
 
	mbΩ_max
;

55 
__u32
 
	mbΩ_öc
;

61 
	sˇn_˛ock
 {

62 
__u32
 
	m‰eq
;

68 
	eˇn_°©e
 {

69 
	mCAN_STATE_ERROR_ACTIVE
 = 0,

70 
	mCAN_STATE_ERROR_WARNING
,

71 
	mCAN_STATE_ERROR_PASSIVE
,

72 
	mCAN_STATE_BUS_OFF
,

73 
	mCAN_STATE_STOPPED
,

74 
	mCAN_STATE_SLEEPING
,

75 
	mCAN_STATE_MAX


81 
	sˇn_bîr_cou¡î
 {

82 
__u16
 
	mtxîr
;

83 
__u16
 
	mrxîr
;

89 
	sˇn_˘æmode
 {

90 
__u32
 
	mmask
;

91 
__u32
 
	mÊags
;

94 
	#CAN_CTRLMODE_LOOPBACK
 0x01

	)

95 
	#CAN_CTRLMODE_LISTENONLY
 0x02

	)

96 
	#CAN_CTRLMODE_3_SAMPLES
 0x04

	)

97 
	#CAN_CTRLMODE_ONE_SHOT
 0x08

	)

98 
	#CAN_CTRLMODE_BERR_REPORTING
 0x10

	)

99 
	#CAN_CTRLMODE_FD
 0x20

	)

100 
	#CAN_CTRLMODE_PRESUME_ACK
 0x40

	)

101 
	#CAN_CTRLMODE_FD_NON_ISO
 0x80

	)

106 
	sˇn_devi˚_°©s
 {

107 
__u32
 
	mbus_îr‹
;

108 
__u32
 
	mîr‹_w¨nög
;

109 
__u32
 
	mîr‹_∑ssive
;

110 
__u32
 
	mbus_off
;

111 
__u32
 
	m¨bôøti⁄_lo°
;

112 
__u32
 
	mª°¨ts
;

119 
	mIFLA_CAN_UNSPEC
,

120 
	mIFLA_CAN_BITTIMING
,

121 
	mIFLA_CAN_BITTIMING_CONST
,

122 
	mIFLA_CAN_CLOCK
,

123 
	mIFLA_CAN_STATE
,

124 
	mIFLA_CAN_CTRLMODE
,

125 
	mIFLA_CAN_RESTART_MS
,

126 
	mIFLA_CAN_RESTART
,

127 
	mIFLA_CAN_BERR_COUNTER
,

128 
	mIFLA_CAN_DATA_BITTIMING
,

129 
	mIFLA_CAN_DATA_BITTIMING_CONST
,

130 
	m__IFLA_CAN_MAX


133 
	#IFLA_CAN_MAX
 (
__IFLA_CAN_MAX
 - 1)

	)

	@/usr/include/linux/fib_rules.h

1 #i‚de‡
__LINUX_FIB_RULES_H


2 
	#__LINUX_FIB_RULES_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/π√éök.h
>

8 
	#FIB_RULE_PERMANENT
 0x00000001

	)

9 
	#FIB_RULE_INVERT
 0x00000002

	)

10 
	#FIB_RULE_UNRESOLVED
 0x00000004

	)

11 
	#FIB_RULE_IIF_DETACHED
 0x00000008

	)

12 
	#FIB_RULE_DEV_DETACHED
 
FIB_RULE_IIF_DETACHED


	)

13 
	#FIB_RULE_OIF_DETACHED
 0x00000010

	)

16 
	#FIB_RULE_FIND_SADDR
 0x00010000

	)

18 
	sfib_ruÀ_hdr
 {

19 
__u8
 
	mÁmûy
;

20 
__u8
 
	md°_Àn
;

21 
__u8
 
	m§c_Àn
;

22 
__u8
 
	mtos
;

24 
__u8
 
	mèbÀ
;

25 
__u8
 
	mªs1
;

26 
__u8
 
	mªs2
;

27 
__u8
 
	ma˘i⁄
;

29 
__u32
 
	mÊags
;

33 
	mFRA_UNSPEC
,

34 
	mFRA_DST
,

35 
	mFRA_SRC
,

36 
	mFRA_IIFNAME
,

37 
	#FRA_IFNAME
 
FRA_IIFNAME


	)

38 
	mFRA_GOTO
,

39 
	mFRA_UNUSED2
,

40 
	mFRA_PRIORITY
,

41 
	mFRA_UNUSED3
,

42 
	mFRA_UNUSED4
,

43 
	mFRA_UNUSED5
,

44 
	mFRA_FWMARK
,

45 
	mFRA_FLOW
,

46 
	mFRA_UNUSED6
,

47 
	mFRA_SUPPRESS_IFGROUP
,

48 
	mFRA_SUPPRESS_PREFIXLEN
,

49 
	mFRA_TABLE
,

50 
	mFRA_FWMASK
,

51 
	mFRA_OIFNAME
,

52 
	m__FRA_MAX


55 
	#FRA_MAX
 (
__FRA_MAX
 - 1)

	)

58 
	mFR_ACT_UNSPEC
,

59 
	mFR_ACT_TO_TBL
,

60 
	mFR_ACT_GOTO
,

61 
	mFR_ACT_NOP
,

62 
	mFR_ACT_RES3
,

63 
	mFR_ACT_RES4
,

64 
	mFR_ACT_BLACKHOLE
,

65 
	mFR_ACT_UNREACHABLE
,

66 
	mFR_ACT_PROHIBIT
,

67 
	m__FR_ACT_MAX
,

70 
	#FR_ACT_MAX
 (
__FR_ACT_MAX
 - 1)

	)

	@/usr/include/linux/filter.h

5 #i‚de‡
__LINUX_FILTER_H__


6 
	#__LINUX_FILTER_H__


	)

9 
	~<löux/ty≥s.h
>

10 
	~<löux/bpf_comm⁄.h
>

15 
	#BPF_MAJOR_VERSION
 1

	)

16 
	#BPF_MINOR_VERSION
 1

	)

23 
	ssock_fûãr
 {

24 
__u16
 
	mcode
;

25 
__u8
 
	mjt
;

26 
__u8
 
	mjf
;

27 
__u32
 
	mk
;

30 
	ssock_Ârog
 {

31 
	mÀn
;

32 
sock_fûãr
 *
	mfûãr
;

36 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

37 
	#BPF_A
 0x10

	)

40 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

41 
	#BPF_TAX
 0x00

	)

42 
	#BPF_TXA
 0x80

	)

47 #i‚de‡
BPF_STMT


48 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

50 #i‚de‡
BPF_JUMP


51 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

57 
	#BPF_MEMWORDS
 16

	)

64 
	#SKF_AD_OFF
 (-0x1000)

	)

65 
	#SKF_AD_PROTOCOL
 0

	)

66 
	#SKF_AD_PKTTYPE
 4

	)

67 
	#SKF_AD_IFINDEX
 8

	)

68 
	#SKF_AD_NLATTR
 12

	)

69 
	#SKF_AD_NLATTR_NEST
 16

	)

70 
	#SKF_AD_MARK
 20

	)

71 
	#SKF_AD_QUEUE
 24

	)

72 
	#SKF_AD_HATYPE
 28

	)

73 
	#SKF_AD_RXHASH
 32

	)

74 
	#SKF_AD_CPU
 36

	)

75 
	#SKF_AD_ALU_XOR_X
 40

	)

76 
	#SKF_AD_VLAN_TAG
 44

	)

77 
	#SKF_AD_VLAN_TAG_PRESENT
 48

	)

78 
	#SKF_AD_PAY_OFFSET
 52

	)

79 
	#SKF_AD_RANDOM
 56

	)

80 
	#SKF_AD_MAX
 60

	)

81 
	#SKF_NET_OFF
 (-0x100000)

	)

82 
	#SKF_LL_OFF
 (-0x200000)

	)

	@/usr/include/linux/fou.h

3 #i‚de‡
_LINUX_FOU_H


4 
	#_LINUX_FOU_H


	)

8 
	#FOU_GENL_NAME
 "fou"

	)

9 
	#FOU_GENL_VERSION
 0x1

	)

12 
	mFOU_ATTR_UNSPEC
,

13 
	mFOU_ATTR_PORT
,

14 
	mFOU_ATTR_AF
,

15 
	mFOU_ATTR_IPPROTO
,

16 
	mFOU_ATTR_TYPE
,

18 
	m__FOU_ATTR_MAX
,

21 
	#FOU_ATTR_MAX
 (
__FOU_ATTR_MAX
 - 1)

	)

24 
	mFOU_CMD_UNSPEC
,

25 
	mFOU_CMD_ADD
,

26 
	mFOU_CMD_DEL
,

28 
	m__FOU_CMD_MAX
,

32 
	mFOU_ENCAP_UNSPEC
,

33 
	mFOU_ENCAP_DIRECT
,

34 
	mFOU_ENCAP_GUE
,

37 
	#FOU_CMD_MAX
 (
__FOU_CMD_MAX
 - 1)

	)

	@/usr/include/linux/gen_stats.h

1 #i‚de‡
__LINUX_GEN_STATS_H


2 
	#__LINUX_GEN_STATS_H


	)

4 
	~<löux/ty≥s.h
>

7 
	mTCA_STATS_UNSPEC
,

8 
	mTCA_STATS_BASIC
,

9 
	mTCA_STATS_RATE_EST
,

10 
	mTCA_STATS_QUEUE
,

11 
	mTCA_STATS_APP
,

12 
	mTCA_STATS_RATE_EST64
,

13 
	m__TCA_STATS_MAX
,

15 
	#TCA_STATS_MAX
 (
__TCA_STATS_MAX
 - 1)

	)

22 
	sg√t_°©s_basic
 {

23 
__u64
 
	mbyãs
;

24 
__u32
 
	m∑ckës
;

26 
	sg√t_°©s_basic_∑cked
 {

27 
__u64
 
	mbyãs
;

28 
__u32
 
	m∑ckës
;

29 } 
__©åibuã__
 ((
∑cked
));

36 
	sg√t_°©s_øã_e°
 {

37 
__u32
 
	mbps
;

38 
__u32
 
	mµs
;

46 
	sg√t_°©s_øã_e°64
 {

47 
__u64
 
	mbps
;

48 
__u64
 
	mµs
;

59 
	sg√t_°©s_queue
 {

60 
__u32
 
	mqÀn
;

61 
__u32
 
	mbacklog
;

62 
__u32
 
	mdr›s
;

63 
__u32
 
	mªqueues
;

64 
__u32
 
	movîlimôs
;

72 
	sg√t_e°im©‹
 {

73 sig√d 
	möãrvÆ
;

74 
	mewma_log
;

	@/usr/include/linux/genetlink.h

1 #i‚de‡
__LINUX_GENERIC_NETLINK_H


2 
	#__LINUX_GENERIC_NETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	#GENL_NAMSIZ
 16

	)

9 
	#GENL_MIN_ID
 
NLMSG_MIN_TYPE


	)

10 
	#GENL_MAX_ID
 1023

	)

12 
	sgílmsghdr
 {

13 
__u8
 
	mcmd
;

14 
__u8
 
	mvîsi⁄
;

15 
__u16
 
	mª£rved
;

18 
	#GENL_HDRLEN
 
	`NLMSG_ALIGN
((
gílmsghdr
))

	)

20 
	#GENL_ADMIN_PERM
 0x01

	)

21 
	#GENL_CMD_CAP_DO
 0x02

	)

22 
	#GENL_CMD_CAP_DUMP
 0x04

	)

23 
	#GENL_CMD_CAP_HASPOL
 0x08

	)

28 
	#GENL_ID_GENERATE
 0

	)

29 
	#GENL_ID_CTRL
 
NLMSG_MIN_TYPE


	)

30 
	#GENL_ID_VFS_DQUOT
 (
NLMSG_MIN_TYPE
 + 1)

	)

31 
	#GENL_ID_PMCRAID
 (
NLMSG_MIN_TYPE
 + 2)

	)

38 
	mCTRL_CMD_UNSPEC
,

39 
	mCTRL_CMD_NEWFAMILY
,

40 
	mCTRL_CMD_DELFAMILY
,

41 
	mCTRL_CMD_GETFAMILY
,

42 
	mCTRL_CMD_NEWOPS
,

43 
	mCTRL_CMD_DELOPS
,

44 
	mCTRL_CMD_GETOPS
,

45 
	mCTRL_CMD_NEWMCAST_GRP
,

46 
	mCTRL_CMD_DELMCAST_GRP
,

47 
	mCTRL_CMD_GETMCAST_GRP
,

48 
	m__CTRL_CMD_MAX
,

51 
	#CTRL_CMD_MAX
 (
__CTRL_CMD_MAX
 - 1)

	)

54 
	mCTRL_ATTR_UNSPEC
,

55 
	mCTRL_ATTR_FAMILY_ID
,

56 
	mCTRL_ATTR_FAMILY_NAME
,

57 
	mCTRL_ATTR_VERSION
,

58 
	mCTRL_ATTR_HDRSIZE
,

59 
	mCTRL_ATTR_MAXATTR
,

60 
	mCTRL_ATTR_OPS
,

61 
	mCTRL_ATTR_MCAST_GROUPS
,

62 
	m__CTRL_ATTR_MAX
,

65 
	#CTRL_ATTR_MAX
 (
__CTRL_ATTR_MAX
 - 1)

	)

68 
	mCTRL_ATTR_OP_UNSPEC
,

69 
	mCTRL_ATTR_OP_ID
,

70 
	mCTRL_ATTR_OP_FLAGS
,

71 
	m__CTRL_ATTR_OP_MAX
,

74 
	#CTRL_ATTR_OP_MAX
 (
__CTRL_ATTR_OP_MAX
 - 1)

	)

77 
	mCTRL_ATTR_MCAST_GRP_UNSPEC
,

78 
	mCTRL_ATTR_MCAST_GRP_NAME
,

79 
	mCTRL_ATTR_MCAST_GRP_ID
,

80 
	m__CTRL_ATTR_MCAST_GRP_MAX
,

83 
	#CTRL_ATTR_MCAST_GRP_MAX
 (
__CTRL_ATTR_MCAST_GRP_MAX
 - 1)

	)

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

37 #i‚de‡
__ASSEMBLY__


40 
	m˛ock_øã
;

41 
	m˛ock_ty≥
;

42 
	mlo›back
;

43 } 
	tsync_£rül_£âögs
;

46 
	m˛ock_øã
;

47 
	m˛ock_ty≥
;

48 
	mlo›back
;

49 
	m¶Ÿ_m≠
;

50 } 
	tã1_£âögs
;

53 
	mícodög
;

54 
	m∑rôy
;

55 } 
	tøw_hdlc_¥Ÿo
;

58 
	mt391
;

59 
	mt392
;

60 
	mn391
;

61 
	mn392
;

62 
	mn393
;

63 
	mlmi
;

64 
	md˚
;

65 } 
	t‰_¥Ÿo
;

68 
	mdlci
;

69 } 
	t‰_¥Ÿo_pvc
;

72 
	mdlci
;

73 
	mma°î
[
IFNAMSIZ
];

74 }
	t‰_¥Ÿo_pvc_öfo
;

77 
	möãrvÆ
;

78 
	mtimeout
;

79 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/icmp.h

17 #i‚de‡
_LINUX_ICMP_H


18 
	#_LINUX_ICMP_H


	)

20 
	~<löux/ty≥s.h
>

22 
	#ICMP_ECHOREPLY
 0

	)

23 
	#ICMP_DEST_UNREACH
 3

	)

24 
	#ICMP_SOURCE_QUENCH
 4

	)

25 
	#ICMP_REDIRECT
 5

	)

26 
	#ICMP_ECHO
 8

	)

27 
	#ICMP_TIME_EXCEEDED
 11

	)

28 
	#ICMP_PARAMETERPROB
 12

	)

29 
	#ICMP_TIMESTAMP
 13

	)

30 
	#ICMP_TIMESTAMPREPLY
 14

	)

31 
	#ICMP_INFO_REQUEST
 15

	)

32 
	#ICMP_INFO_REPLY
 16

	)

33 
	#ICMP_ADDRESS
 17

	)

34 
	#ICMP_ADDRESSREPLY
 18

	)

35 
	#NR_ICMP_TYPES
 18

	)

39 
	#ICMP_NET_UNREACH
 0

	)

40 
	#ICMP_HOST_UNREACH
 1

	)

41 
	#ICMP_PROT_UNREACH
 2

	)

42 
	#ICMP_PORT_UNREACH
 3

	)

43 
	#ICMP_FRAG_NEEDED
 4

	)

44 
	#ICMP_SR_FAILED
 5

	)

45 
	#ICMP_NET_UNKNOWN
 6

	)

46 
	#ICMP_HOST_UNKNOWN
 7

	)

47 
	#ICMP_HOST_ISOLATED
 8

	)

48 
	#ICMP_NET_ANO
 9

	)

49 
	#ICMP_HOST_ANO
 10

	)

50 
	#ICMP_NET_UNR_TOS
 11

	)

51 
	#ICMP_HOST_UNR_TOS
 12

	)

52 
	#ICMP_PKT_FILTERED
 13

	)

53 
	#ICMP_PREC_VIOLATION
 14

	)

54 
	#ICMP_PREC_CUTOFF
 15

	)

55 
	#NR_ICMP_UNREACH
 15

	)

58 
	#ICMP_REDIR_NET
 0

	)

59 
	#ICMP_REDIR_HOST
 1

	)

60 
	#ICMP_REDIR_NETTOS
 2

	)

61 
	#ICMP_REDIR_HOSTTOS
 3

	)

64 
	#ICMP_EXC_TTL
 0

	)

65 
	#ICMP_EXC_FRAGTIME
 1

	)

68 
	sicmphdr
 {

69 
__u8
 
	mty≥
;

70 
__u8
 
	mcode
;

71 
__sum16
 
	mchecksum
;

74 
__be16
 
	mid
;

75 
__be16
 
	m£quí˚
;

76 } 
	mecho
;

77 
__be32
 
	mg©eway
;

79 
__be16
 
	m__unu£d
;

80 
__be16
 
	mmtu
;

81 } 
	m‰ag
;

82 } 
	mun
;

90 
	#ICMP_FILTER
 1

	)

92 
	sicmp_fûãr
 {

93 
__u32
 
	md©a
;

	@/usr/include/linux/icmpv6.h

1 #i‚de‡
_LINUX_ICMPV6_H


2 
	#_LINUX_ICMPV6_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

7 
	sicmp6hdr
 {

9 
__u8
 
	micmp6_ty≥
;

10 
__u8
 
	micmp6_code
;

11 
__sum16
 
	micmp6_cksum
;

15 
__be32
 
	mun_d©a32
[1];

16 
__be16
 
	mun_d©a16
[2];

17 
__u8
 
	mun_d©a8
[4];

19 
	sicmpv6_echo
 {

20 
__be16
 
	midítifõr
;

21 
__be16
 
	m£quí˚
;

22 } 
	mu_echo
;

24 
	sicmpv6_nd_advt
 {

25 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

26 
__u32
 
	mª£rved
:5,

27 
	movîride
:1,

28 
	msﬁicôed
:1,

29 
	mrouãr
:1,

30 
	mª£rved2
:24;

31 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

32 
__u32
 
	mrouãr
:1,

33 
	msﬁicôed
:1,

34 
	movîride
:1,

35 
	mª£rved
:29;

39 } 
	mu_nd_advt
;

41 
	sicmpv6_nd_ø
 {

42 
__u8
 
	mh›_limô
;

43 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

44 
__u8
 
	mª£rved
:3,

45 
	mrouãr_¥ef
:2,

46 
	mhome_agít
:1,

47 
	mŸhî
:1,

48 
	mm™aged
:1;

50 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

51 
__u8
 
	mm™aged
:1,

52 
	mŸhî
:1,

53 
	mhome_agít
:1,

54 
	mrouãr_¥ef
:2,

55 
	mª£rved
:3;

59 
__be16
 
	mπ_li„time
;

60 } 
	mu_nd_ø
;

62 } 
	micmp6_d©aun
;

64 
	#icmp6_idítifõr
 
icmp6_d©aun
.
u_echo
.
idítifõr


	)

65 
	#icmp6_£quí˚
 
icmp6_d©aun
.
u_echo
.
£quí˚


	)

66 
	#icmp6_poöãr
 
icmp6_d©aun
.
un_d©a32
[0]

	)

67 
	#icmp6_mtu
 
icmp6_d©aun
.
un_d©a32
[0]

	)

68 
	#icmp6_unu£d
 
icmp6_d©aun
.
un_d©a32
[0]

	)

69 
	#icmp6_maxdñay
 
icmp6_d©aun
.
un_d©a16
[0]

	)

70 
	#icmp6_rouãr
 
icmp6_d©aun
.
u_nd_advt
.
rouãr


	)

71 
	#icmp6_sﬁicôed
 
icmp6_d©aun
.
u_nd_advt
.
sﬁicôed


	)

72 
	#icmp6_ovîride
 
icmp6_d©aun
.
u_nd_advt
.
ovîride


	)

73 
	#icmp6_ndis¸e£rved
 
icmp6_d©aun
.
u_nd_advt
.
ª£rved


	)

74 
	#icmp6_h›_limô
 
icmp6_d©aun
.
u_nd_ø
.
h›_limô


	)

75 
	#icmp6_addrc⁄f_m™aged
 
icmp6_d©aun
.
u_nd_ø
.
m™aged


	)

76 
	#icmp6_addrc⁄f_Ÿhî
 
icmp6_d©aun
.
u_nd_ø
.
Ÿhî


	)

77 
	#icmp6_π_li„time
 
icmp6_d©aun
.
u_nd_ø
.
π_li„time


	)

78 
	#icmp6_rouãr_¥ef
 
icmp6_d©aun
.
u_nd_ø
.
rouãr_¥ef


	)

82 
	#ICMPV6_ROUTER_PREF_LOW
 0x3

	)

83 
	#ICMPV6_ROUTER_PREF_MEDIUM
 0x0

	)

84 
	#ICMPV6_ROUTER_PREF_HIGH
 0x1

	)

85 
	#ICMPV6_ROUTER_PREF_INVALID
 0x2

	)

87 
	#ICMPV6_DEST_UNREACH
 1

	)

88 
	#ICMPV6_PKT_TOOBIG
 2

	)

89 
	#ICMPV6_TIME_EXCEED
 3

	)

90 
	#ICMPV6_PARAMPROB
 4

	)

92 
	#ICMPV6_INFOMSG_MASK
 0x80

	)

94 
	#ICMPV6_ECHO_REQUEST
 128

	)

95 
	#ICMPV6_ECHO_REPLY
 129

	)

96 
	#ICMPV6_MGM_QUERY
 130

	)

97 
	#ICMPV6_MGM_REPORT
 131

	)

98 
	#ICMPV6_MGM_REDUCTION
 132

	)

100 
	#ICMPV6_NI_QUERY
 139

	)

101 
	#ICMPV6_NI_REPLY
 140

	)

103 
	#ICMPV6_MLD2_REPORT
 143

	)

105 
	#ICMPV6_DHAAD_REQUEST
 144

	)

106 
	#ICMPV6_DHAAD_REPLY
 145

	)

107 
	#ICMPV6_MOBILE_PREFIX_SOL
 146

	)

108 
	#ICMPV6_MOBILE_PREFIX_ADV
 147

	)

113 
	#ICMPV6_NOROUTE
 0

	)

114 
	#ICMPV6_ADM_PROHIBITED
 1

	)

115 
	#ICMPV6_NOT_NEIGHBOUR
 2

	)

116 
	#ICMPV6_ADDR_UNREACH
 3

	)

117 
	#ICMPV6_PORT_UNREACH
 4

	)

118 
	#ICMPV6_POLICY_FAIL
 5

	)

119 
	#ICMPV6_REJECT_ROUTE
 6

	)

124 
	#ICMPV6_EXC_HOPLIMIT
 0

	)

125 
	#ICMPV6_EXC_FRAGTIME
 1

	)

130 
	#ICMPV6_HDR_FIELD
 0

	)

131 
	#ICMPV6_UNK_NEXTHDR
 1

	)

132 
	#ICMPV6_UNK_OPTION
 2

	)

138 
	#ICMPV6_FILTER
 1

	)

144 
	#ICMPV6_FILTER_BLOCK
 1

	)

145 
	#ICMPV6_FILTER_PASS
 2

	)

146 
	#ICMPV6_FILTER_BLOCKOTHERS
 3

	)

147 
	#ICMPV6_FILTER_PASSONLY
 4

	)

149 
	sicmp6_fûãr
 {

150 
__u32
 
	md©a
[8];

156 
	#MLD2_MODE_IS_INCLUDE
 1

	)

157 
	#MLD2_MODE_IS_EXCLUDE
 2

	)

158 
	#MLD2_CHANGE_TO_INCLUDE
 3

	)

159 
	#MLD2_CHANGE_TO_EXCLUDE
 4

	)

160 
	#MLD2_ALLOW_NEW_SOURCES
 5

	)

161 
	#MLD2_BLOCK_OLD_SOURCES
 6

	)

163 
	#MLD2_ALL_MCR_INIT
 { { { 0xff,0x02,0,0,0,0,0,0,0,0,0,0,0,0,0,0x16 } } }

	)

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

70 
	e√t_devi˚_Êags
 {

71 
	mIFF_UP
 = 1<<0,

72 
	mIFF_BROADCAST
 = 1<<1,

73 
	mIFF_DEBUG
 = 1<<2,

74 
	mIFF_LOOPBACK
 = 1<<3,

75 
	mIFF_POINTOPOINT
 = 1<<4,

76 
	mIFF_NOTRAILERS
 = 1<<5,

77 
	mIFF_RUNNING
 = 1<<6,

78 
	mIFF_NOARP
 = 1<<7,

79 
	mIFF_PROMISC
 = 1<<8,

80 
	mIFF_ALLMULTI
 = 1<<9,

81 
	mIFF_MASTER
 = 1<<10,

82 
	mIFF_SLAVE
 = 1<<11,

83 
	mIFF_MULTICAST
 = 1<<12,

84 
	mIFF_PORTSEL
 = 1<<13,

85 
	mIFF_AUTOMEDIA
 = 1<<14,

86 
	mIFF_DYNAMIC
 = 1<<15,

87 
	mIFF_LOWER_UP
 = 1<<16,

88 
	mIFF_DORMANT
 = 1<<17,

89 
	mIFF_ECHO
 = 1<<18,

92 
	#IFF_UP
 
IFF_UP


	)

93 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

94 
	#IFF_DEBUG
 
IFF_DEBUG


	)

95 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

96 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

97 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

98 
	#IFF_RUNNING
 
IFF_RUNNING


	)

99 
	#IFF_NOARP
 
IFF_NOARP


	)

100 
	#IFF_PROMISC
 
IFF_PROMISC


	)

101 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

102 
	#IFF_MASTER
 
IFF_MASTER


	)

103 
	#IFF_SLAVE
 
IFF_SLAVE


	)

104 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

105 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

106 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

107 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

108 
	#IFF_LOWER_UP
 
IFF_LOWER_UP


	)

109 
	#IFF_DORMANT
 
IFF_DORMANT


	)

110 
	#IFF_ECHO
 
IFF_ECHO


	)

112 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

113 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

115 
	#IF_GET_IFACE
 0x0001

	)

116 
	#IF_GET_PROTO
 0x0002

	)

119 
	#IF_IFACE_V35
 0x1000

	)

120 
	#IF_IFACE_V24
 0x1001

	)

121 
	#IF_IFACE_X21
 0x1002

	)

122 
	#IF_IFACE_T1
 0x1003

	)

123 
	#IF_IFACE_E1
 0x1004

	)

124 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

125 
	#IF_IFACE_X21D
 0x1006

	)

128 
	#IF_PROTO_HDLC
 0x2000

	)

129 
	#IF_PROTO_PPP
 0x2001

	)

130 
	#IF_PROTO_CISCO
 0x2002

	)

131 
	#IF_PROTO_FR
 0x2003

	)

132 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

133 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

134 
	#IF_PROTO_X25
 0x2006

	)

135 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

136 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

137 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

138 
	#IF_PROTO_FR_PVC
 0x200A

	)

139 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

140 
	#IF_PROTO_RAW
 0x200C

	)

144 
	mIF_OPER_UNKNOWN
,

145 
	mIF_OPER_NOTPRESENT
,

146 
	mIF_OPER_DOWN
,

147 
	mIF_OPER_LOWERLAYERDOWN
,

148 
	mIF_OPER_TESTING
,

149 
	mIF_OPER_DORMANT
,

150 
	mIF_OPER_UP
,

155 
	mIF_LINK_MODE_DEFAULT
,

156 
	mIF_LINK_MODE_DORMANT
,

169 
	sifm≠
 {

170 
	mmem_°¨t
;

171 
	mmem_íd
;

172 
	mba£_addr
;

173 
	múq
;

174 
	mdma
;

175 
	mp‹t
;

179 
	sif_£âögs
 {

180 
	mty≥
;

181 
	msize
;

184 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

185 
cisco_¥Ÿo
 *
	mcisco
;

186 
‰_¥Ÿo
 *
	m‰
;

187 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

188 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

191 
sync_£rül_£âögs
 *
	msync
;

192 
ã1_£âögs
 *
	mã1
;

193 } 
	mifs_ifsu
;

203 
	si‰eq
 {

204 
	#IFHWADDRLEN
 6

	)

207 
	mi‰n_«me
[
IFNAMSIZ
];

208 } 
	mi‰_i‰n
;

211 
sockaddr
 
	mi‰u_addr
;

212 
sockaddr
 
	mi‰u_d°addr
;

213 
sockaddr
 
	mi‰u_brﬂdaddr
;

214 
sockaddr
 
	mi‰u_√tmask
;

215 
sockaddr
 
	mi‰u_hwaddr
;

216 
	mi‰u_Êags
;

217 
	mi‰u_ivÆue
;

218 
	mi‰u_mtu
;

219 
ifm≠
 
	mi‰u_m≠
;

220 
	mi‰u_¶ave
[
IFNAMSIZ
];

221 
	mi‰u_√w«me
[
IFNAMSIZ
];

222 * 
	mi‰u_d©a
;

223 
if_£âögs
 
	mi‰u_£âögs
;

224 } 
	mi‰_i‰u
;

227 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

228 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

229 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

230 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

231 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

232 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

233 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

234 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

235 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

236 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

237 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

238 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

239 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

240 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

241 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

242 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

243 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

252 
	sifc⁄f
 {

253 
	mifc_Àn
;

255 *
	mifcu_buf
;

256 
i‰eq
 *
	mifcu_ªq
;

257 } 
	mifc_ifcu
;

259 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

260 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

26 
	mIFA_UNSPEC
,

27 
	mIFA_ADDRESS
,

28 
	mIFA_LOCAL
,

29 
	mIFA_LABEL
,

30 
	mIFA_BROADCAST
,

31 
	mIFA_ANYCAST
,

32 
	mIFA_CACHEINFO
,

33 
	mIFA_MULTICAST
,

34 
	mIFA_FLAGS
,

35 
	m__IFA_MAX
,

38 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

41 
	#IFA_F_SECONDARY
 0x01

	)

42 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

44 
	#IFA_F_NODAD
 0x02

	)

45 
	#IFA_F_OPTIMISTIC
 0x04

	)

46 
	#IFA_F_DADFAILED
 0x08

	)

47 
	#IFA_F_HOMEADDRESS
 0x10

	)

48 
	#IFA_F_DEPRECATED
 0x20

	)

49 
	#IFA_F_TENTATIVE
 0x40

	)

50 
	#IFA_F_PERMANENT
 0x80

	)

51 
	#IFA_F_MANAGETEMPADDR
 0x100

	)

52 
	#IFA_F_NOPREFIXROUTE
 0x200

	)

54 
	siÁ_ˇcheöfo
 {

55 
__u32
 
	miÁ_¥e„ªd
;

56 
__u32
 
	miÁ_vÆid
;

57 
__u32
 
	mc°amp
;

58 
__u32
 
	mt°amp
;

62 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

63 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/if_addrlabel.h

10 #i‚de‡
__LINUX_IF_ADDRLABEL_H


11 
	#__LINUX_IF_ADDRLABEL_H


	)

13 
	~<löux/ty≥s.h
>

15 
	siÁddæblmsg
 {

16 
__u8
 
	miÁl_Ámûy
;

17 
__u8
 
	m__iÁl_ª£rved
;

18 
__u8
 
	miÁl_¥efixÀn
;

19 
__u8
 
	miÁl_Êags
;

20 
__u32
 
	miÁl_ödex
;

21 
__u32
 
	miÁl_£q
;

25 
	mIFAL_ADDRESS
 = 1,

26 
	mIFAL_LABEL
 = 2,

27 
	m__IFAL_MAX


30 
	#IFAL_MAX
 (
__IFAL_MAX
 - 1)

	)

	@/usr/include/linux/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

26 
	~<löux/√tdevi˚.h
>

29 
	#ARPHRD_NETROM
 0

	)

30 
	#ARPHRD_ETHER
 1

	)

31 
	#ARPHRD_EETHER
 2

	)

32 
	#ARPHRD_AX25
 3

	)

33 
	#ARPHRD_PRONET
 4

	)

34 
	#ARPHRD_CHAOS
 5

	)

35 
	#ARPHRD_IEEE802
 6

	)

36 
	#ARPHRD_ARCNET
 7

	)

37 
	#ARPHRD_APPLETLK
 8

	)

38 
	#ARPHRD_DLCI
 15

	)

39 
	#ARPHRD_ATM
 19

	)

40 
	#ARPHRD_METRICOM
 23

	)

41 
	#ARPHRD_IEEE1394
 24

	)

42 
	#ARPHRD_EUI64
 27

	)

43 
	#ARPHRD_INFINIBAND
 32

	)

46 
	#ARPHRD_SLIP
 256

	)

47 
	#ARPHRD_CSLIP
 257

	)

48 
	#ARPHRD_SLIP6
 258

	)

49 
	#ARPHRD_CSLIP6
 259

	)

50 
	#ARPHRD_RSRVD
 260

	)

51 
	#ARPHRD_ADAPT
 264

	)

52 
	#ARPHRD_ROSE
 270

	)

53 
	#ARPHRD_X25
 271

	)

54 
	#ARPHRD_HWX25
 272

	)

55 
	#ARPHRD_CAN
 280

	)

56 
	#ARPHRD_PPP
 512

	)

57 
	#ARPHRD_CISCO
 513

	)

58 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

59 
	#ARPHRD_LAPB
 516

	)

60 
	#ARPHRD_DDCMP
 517

	)

61 
	#ARPHRD_RAWHDLC
 518

	)

63 
	#ARPHRD_TUNNEL
 768

	)

64 
	#ARPHRD_TUNNEL6
 769

	)

65 
	#ARPHRD_FRAD
 770

	)

66 
	#ARPHRD_SKIP
 771

	)

67 
	#ARPHRD_LOOPBACK
 772

	)

68 
	#ARPHRD_LOCALTLK
 773

	)

69 
	#ARPHRD_FDDI
 774

	)

70 
	#ARPHRD_BIF
 775

	)

71 
	#ARPHRD_SIT
 776

	)

72 
	#ARPHRD_IPDDP
 777

	)

73 
	#ARPHRD_IPGRE
 778

	)

74 
	#ARPHRD_PIMREG
 779

	)

75 
	#ARPHRD_HIPPI
 780

	)

76 
	#ARPHRD_ASH
 781

	)

77 
	#ARPHRD_ECONET
 782

	)

78 
	#ARPHRD_IRDA
 783

	)

80 
	#ARPHRD_FCPP
 784

	)

81 
	#ARPHRD_FCAL
 785

	)

82 
	#ARPHRD_FCPL
 786

	)

83 
	#ARPHRD_FCFABRIC
 787

	)

85 
	#ARPHRD_IEEE802_TR
 800

	)

86 
	#ARPHRD_IEEE80211
 801

	)

87 
	#ARPHRD_IEEE80211_PRISM
 802

	)

88 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

89 
	#ARPHRD_IEEE802154
 804

	)

90 
	#ARPHRD_IEEE802154_MONITOR
 805

	)

92 
	#ARPHRD_PHONET
 820

	)

93 
	#ARPHRD_PHONET_PIPE
 821

	)

94 
	#ARPHRD_CAIF
 822

	)

95 
	#ARPHRD_IP6GRE
 823

	)

96 
	#ARPHRD_NETLINK
 824

	)

97 
	#ARPHRD_6LOWPAN
 825

	)

99 
	#ARPHRD_VOID
 0xFFFF

	)

100 
	#ARPHRD_NONE
 0xFFFE

	)

103 
	#ARPOP_REQUEST
 1

	)

104 
	#ARPOP_REPLY
 2

	)

105 
	#ARPOP_RREQUEST
 3

	)

106 
	#ARPOP_RREPLY
 4

	)

107 
	#ARPOP_InREQUEST
 8

	)

108 
	#ARPOP_InREPLY
 9

	)

109 
	#ARPOP_NAK
 10

	)

113 
	s¨¥eq
 {

114 
sockaddr
 
	m¨p_∑
;

115 
sockaddr
 
	m¨p_ha
;

116 
	m¨p_Êags
;

117 
sockaddr
 
	m¨p_√tmask
;

118 
	m¨p_dev
[16];

121 
	s¨¥eq_ﬁd
 {

122 
sockaddr
 
	m¨p_∑
;

123 
sockaddr
 
	m¨p_ha
;

124 
	m¨p_Êags
;

125 
sockaddr
 
	m¨p_√tmask
;

129 
	#ATF_COM
 0x02

	)

130 
	#ATF_PERM
 0x04

	)

131 
	#ATF_PUBL
 0x08

	)

132 
	#ATF_USETRAILERS
 0x10

	)

133 
	#ATF_NETMASK
 0x20

	)

135 
	#ATF_DONTPUB
 0x40

	)

141 
	s¨phdr
 {

142 
__be16
 
	m¨_hrd
;

143 
__be16
 
	m¨_¥o
;

144 
	m¨_h 
;

145 
	m¨_∂n
;

146 
__be16
 
	m¨_›
;

152 
	m¨_sha
[
ETH_ALEN
];

153 
	m¨_sù
[4];

154 
	m¨_tha
[
ETH_ALEN
];

155 
	m¨_tù
[4];

	@/usr/include/linux/if_bonding.h

43 #i‚de‡
_LINUX_IF_BONDING_H


44 
	#_LINUX_IF_BONDING_H


	)

46 
	~<löux/if.h
>

47 
	~<löux/ty≥s.h
>

48 
	~<löux/if_ëhî.h
>

51 
	#BOND_ABI_VERSION
 2

	)

57 
	#BOND_ENSLAVE_OLD
 (
SIOCDEVPRIVATE
)

	)

58 
	#BOND_RELEASE_OLD
 (
SIOCDEVPRIVATE
 + 1)

	)

59 
	#BOND_SETHWADDR_OLD
 (
SIOCDEVPRIVATE
 + 2)

	)

60 
	#BOND_SLAVE_INFO_QUERY_OLD
 (
SIOCDEVPRIVATE
 + 11)

	)

61 
	#BOND_INFO_QUERY_OLD
 (
SIOCDEVPRIVATE
 + 12)

	)

62 
	#BOND_CHANGE_ACTIVE_OLD
 (
SIOCDEVPRIVATE
 + 13)

	)

64 
	#BOND_CHECK_MII_STATUS
 (
SIOCGMIIPHY
)

	)

66 
	#BOND_MODE_ROUNDROBIN
 0

	)

67 
	#BOND_MODE_ACTIVEBACKUP
 1

	)

68 
	#BOND_MODE_XOR
 2

	)

69 
	#BOND_MODE_BROADCAST
 3

	)

70 
	#BOND_MODE_8023AD
 4

	)

71 
	#BOND_MODE_TLB
 5

	)

72 
	#BOND_MODE_ALB
 6

	)

75 
	#BOND_LINK_UP
 0

	)

76 
	#BOND_LINK_FAIL
 1

	)

77 
	#BOND_LINK_DOWN
 2

	)

78 
	#BOND_LINK_BACK
 3

	)

81 
	#BOND_STATE_ACTIVE
 0

	)

82 
	#BOND_STATE_BACKUP
 1

	)

84 
	#BOND_DEFAULT_MAX_BONDS
 1

	)

86 
	#BOND_DEFAULT_TX_QUEUES
 16

	)

88 
	#BOND_DEFAULT_RESEND_IGMP
 1

	)

91 
	#BOND_XMIT_POLICY_LAYER2
 0

	)

92 
	#BOND_XMIT_POLICY_LAYER34
 1

	)

93 
	#BOND_XMIT_POLICY_LAYER23
 2

	)

94 
	#BOND_XMIT_POLICY_ENCAP23
 3

	)

95 
	#BOND_XMIT_POLICY_ENCAP34
 4

	)

97 
	sifb⁄d
 {

98 
__s32
 
	mb⁄d_mode
;

99 
__s32
 
	mnum_¶aves
;

100 
__s32
 
	mmiim⁄
;

101 } 
	tifb⁄d
;

103 
	sif¶ave
 {

104 
__s32
 
	m¶ave_id
;

105 
	m¶ave_«me
[
IFNAMSIZ
];

106 
__s8
 
	mlök
;

107 
__s8
 
	m°©e
;

108 
__u32
 
	mlök_Áûuª_cou¡
;

109 } 
	tif¶ave
;

111 
	sad_öfo
 {

112 
__u16
 
	maggªg©‹_id
;

113 
__u16
 
	mp‹ts
;

114 
__u16
 
	ma˘‹_key
;

115 
__u16
 
	m∑π√r_key
;

116 
__u8
 
	m∑π√r_sy°em
[
ETH_ALEN
];

	@/usr/include/linux/if_bridge.h

13 #i‚de‡
_LINUX_IF_BRIDGE_H


14 
	#_LINUX_IF_BRIDGE_H


	)

16 
	~<löux/ty≥s.h
>

17 
	~<löux/if_ëhî.h
>

18 
	~<löux/ö6.h
>

20 
	#SYSFS_BRIDGE_ATTR
 "bridge"

	)

21 
	#SYSFS_BRIDGE_FDB
 "brf‹w¨d"

	)

22 
	#SYSFS_BRIDGE_PORT_SUBDIR
 "brif"

	)

23 
	#SYSFS_BRIDGE_PORT_ATTR
 "bΩ‹t"

	)

24 
	#SYSFS_BRIDGE_PORT_LINK
 "bridge"

	)

26 
	#BRCTL_VERSION
 1

	)

28 
	#BRCTL_GET_VERSION
 0

	)

29 
	#BRCTL_GET_BRIDGES
 1

	)

30 
	#BRCTL_ADD_BRIDGE
 2

	)

31 
	#BRCTL_DEL_BRIDGE
 3

	)

32 
	#BRCTL_ADD_IF
 4

	)

33 
	#BRCTL_DEL_IF
 5

	)

34 
	#BRCTL_GET_BRIDGE_INFO
 6

	)

35 
	#BRCTL_GET_PORT_LIST
 7

	)

36 
	#BRCTL_SET_BRIDGE_FORWARD_DELAY
 8

	)

37 
	#BRCTL_SET_BRIDGE_HELLO_TIME
 9

	)

38 
	#BRCTL_SET_BRIDGE_MAX_AGE
 10

	)

39 
	#BRCTL_SET_AGEING_TIME
 11

	)

40 
	#BRCTL_SET_GC_INTERVAL
 12

	)

41 
	#BRCTL_GET_PORT_INFO
 13

	)

42 
	#BRCTL_SET_BRIDGE_STP_STATE
 14

	)

43 
	#BRCTL_SET_BRIDGE_PRIORITY
 15

	)

44 
	#BRCTL_SET_PORT_PRIORITY
 16

	)

45 
	#BRCTL_SET_PATH_COST
 17

	)

46 
	#BRCTL_GET_FDB_ENTRIES
 18

	)

48 
	#BR_STATE_DISABLED
 0

	)

49 
	#BR_STATE_LISTENING
 1

	)

50 
	#BR_STATE_LEARNING
 2

	)

51 
	#BR_STATE_FORWARDING
 3

	)

52 
	#BR_STATE_BLOCKING
 4

	)

54 
	s__bridge_öfo
 {

55 
__u64
 
	mdesig«ãd_roŸ
;

56 
__u64
 
	mbridge_id
;

57 
__u32
 
	mroŸ_∑th_co°
;

58 
__u32
 
	mmax_age
;

59 
__u32
 
	mhñlo_time
;

60 
__u32
 
	mf‹w¨d_dñay
;

61 
__u32
 
	mbridge_max_age
;

62 
__u32
 
	mbridge_hñlo_time
;

63 
__u32
 
	mbridge_f‹w¨d_dñay
;

64 
__u8
 
	mt›ﬁogy_ch™ge
;

65 
__u8
 
	mt›ﬁogy_ch™ge_dëe˘ed
;

66 
__u8
 
	mroŸ_p‹t
;

67 
__u8
 
	m°p_íabÀd
;

68 
__u32
 
	mageög_time
;

69 
__u32
 
	mgc_öãrvÆ
;

70 
__u32
 
	mhñlo_timî_vÆue
;

71 
__u32
 
	mt˙_timî_vÆue
;

72 
__u32
 
	mt›ﬁogy_ch™ge_timî_vÆue
;

73 
__u32
 
	mgc_timî_vÆue
;

76 
	s__p‹t_öfo
 {

77 
__u64
 
	mdesig«ãd_roŸ
;

78 
__u64
 
	mdesig«ãd_bridge
;

79 
__u16
 
	mp‹t_id
;

80 
__u16
 
	mdesig«ãd_p‹t
;

81 
__u32
 
	m∑th_co°
;

82 
__u32
 
	mdesig«ãd_co°
;

83 
__u8
 
	m°©e
;

84 
__u8
 
	mt›_ch™ge_ack
;

85 
__u8
 
	mc⁄fig_≥ndög
;

86 
__u8
 
	munu£d0
;

87 
__u32
 
	mmesßge_age_timî_vÆue
;

88 
__u32
 
	mf‹w¨d_dñay_timî_vÆue
;

89 
__u32
 
	mhﬁd_timî_vÆue
;

92 
	s__fdb_íåy
 {

93 
__u8
 
	mmac_addr
[
ETH_ALEN
];

94 
__u8
 
	mp‹t_no
;

95 
__u8
 
	mis_loˇl
;

96 
__u32
 
	mageög_timî_vÆue
;

97 
__u8
 
	mp‹t_hi
;

98 
__u8
 
	m∑d0
;

99 
__u16
 
	munu£d
;

103 
	#BRIDGE_FLAGS_MASTER
 1

	)

104 
	#BRIDGE_FLAGS_SELF
 2

	)

106 
	#BRIDGE_MODE_VEB
 0

	)

107 
	#BRIDGE_MODE_VEPA
 1

	)

108 
	#BRIDGE_MODE_UNDEF
 0xFFFF

	)

118 
	mIFLA_BRIDGE_FLAGS
,

119 
	mIFLA_BRIDGE_MODE
,

120 
	mIFLA_BRIDGE_VLAN_INFO
,

121 
	m__IFLA_BRIDGE_MAX
,

123 
	#IFLA_BRIDGE_MAX
 (
__IFLA_BRIDGE_MAX
 - 1)

	)

125 
	#BRIDGE_VLAN_INFO_MASTER
 (1<<0Ë

	)

126 
	#BRIDGE_VLAN_INFO_PVID
 (1<<1Ë

	)

127 
	#BRIDGE_VLAN_INFO_UNTAGGED
 (1<<2Ë

	)

129 
	sbridge_vœn_öfo
 {

130 
__u16
 
	mÊags
;

131 
__u16
 
	mvid
;

145 
	mMDBA_UNSPEC
,

146 
	mMDBA_MDB
,

147 
	mMDBA_ROUTER
,

148 
	m__MDBA_MAX
,

150 
	#MDBA_MAX
 (
__MDBA_MAX
 - 1)

	)

153 
	mMDBA_MDB_UNSPEC
,

154 
	mMDBA_MDB_ENTRY
,

155 
	m__MDBA_MDB_MAX
,

157 
	#MDBA_MDB_MAX
 (
__MDBA_MDB_MAX
 - 1)

	)

160 
	mMDBA_MDB_ENTRY_UNSPEC
,

161 
	mMDBA_MDB_ENTRY_INFO
,

162 
	m__MDBA_MDB_ENTRY_MAX
,

164 
	#MDBA_MDB_ENTRY_MAX
 (
__MDBA_MDB_ENTRY_MAX
 - 1)

	)

167 
	mMDBA_ROUTER_UNSPEC
,

168 
	mMDBA_ROUTER_PORT
,

169 
	m__MDBA_ROUTER_MAX
,

171 
	#MDBA_ROUTER_MAX
 (
__MDBA_ROUTER_MAX
 - 1)

	)

173 
	sbr_p‹t_msg
 {

174 
__u8
 
	mÁmûy
;

175 
__u32
 
	mifödex
;

178 
	sbr_mdb_íåy
 {

179 
__u32
 
	mifödex
;

180 
	#MDB_TEMPORARY
 0

	)

181 
	#MDB_PERMANENT
 1

	)

182 
__u8
 
	m°©e
;

185 
__be32
 
	mù4
;

186 
ö6_addr
 
	mù6
;

187 } 
	mu
;

188 
__be16
 
	m¥Ÿo
;

189 } 
	maddr
;

193 
	mMDBA_SET_ENTRY_UNSPEC
,

194 
	mMDBA_SET_ENTRY
,

195 
	m__MDBA_SET_ENTRY_MAX
,

197 
	#MDBA_SET_ENTRY_MAX
 (
__MDBA_SET_ENTRY_MAX
 - 1)

	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_BATMAN
 0x4305

	)

52 
	#ETH_P_DEC
 0x6000

	)

53 
	#ETH_P_DNA_DL
 0x6001

	)

54 
	#ETH_P_DNA_RC
 0x6002

	)

55 
	#ETH_P_DNA_RT
 0x6003

	)

56 
	#ETH_P_LAT
 0x6004

	)

57 
	#ETH_P_DIAG
 0x6005

	)

58 
	#ETH_P_CUST
 0x6006

	)

59 
	#ETH_P_SCA
 0x6007

	)

60 
	#ETH_P_TEB
 0x6558

	)

61 
	#ETH_P_RARP
 0x8035

	)

62 
	#ETH_P_ATALK
 0x809B

	)

63 
	#ETH_P_AARP
 0x80F3

	)

64 
	#ETH_P_8021Q
 0x8100

	)

65 
	#ETH_P_IPX
 0x8137

	)

66 
	#ETH_P_IPV6
 0x86DD

	)

67 
	#ETH_P_PAUSE
 0x8808

	)

68 
	#ETH_P_SLOW
 0x8809

	)

69 
	#ETH_P_WCCP
 0x883E

	)

71 
	#ETH_P_MPLS_UC
 0x8847

	)

72 
	#ETH_P_MPLS_MC
 0x8848

	)

73 
	#ETH_P_ATMMPOA
 0x884¯

	)

74 
	#ETH_P_PPP_DISC
 0x8863

	)

75 
	#ETH_P_PPP_SES
 0x8864

	)

76 
	#ETH_P_LINK_CTL
 0x886¯

	)

77 
	#ETH_P_ATMFATE
 0x8884

	)

80 
	#ETH_P_PAE
 0x888E

	)

81 
	#ETH_P_AOE
 0x88A2

	)

82 
	#ETH_P_8021AD
 0x88A8

	)

83 
	#ETH_P_802_EX1
 0x88B5

	)

84 
	#ETH_P_TIPC
 0x88CA

	)

85 
	#ETH_P_8021AH
 0x88E7

	)

86 
	#ETH_P_MVRP
 0x88F5

	)

87 
	#ETH_P_1588
 0x88F7

	)

88 
	#ETH_P_PRP
 0x88FB

	)

89 
	#ETH_P_FCOE
 0x8906

	)

90 
	#ETH_P_TDLS
 0x890D

	)

91 
	#ETH_P_FIP
 0x8914

	)

92 
	#ETH_P_80221
 0x8917

	)

93 
	#ETH_P_LOOPBACK
 0x9000

	)

94 
	#ETH_P_QINQ1
 0x9100

	)

95 
	#ETH_P_QINQ2
 0x9200

	)

96 
	#ETH_P_QINQ3
 0x9300

	)

97 
	#ETH_P_EDSA
 0xDADA

	)

98 
	#ETH_P_AF_IUCV
 0xFBFB

	)

100 
	#ETH_P_802_3_MIN
 0x0600

	)

107 
	#ETH_P_802_3
 0x0001

	)

108 
	#ETH_P_AX25
 0x0002

	)

109 
	#ETH_P_ALL
 0x0003

	)

110 
	#ETH_P_802_2
 0x0004

	)

111 
	#ETH_P_SNAP
 0x0005

	)

112 
	#ETH_P_DDCMP
 0x0006

	)

113 
	#ETH_P_WAN_PPP
 0x0007

	)

114 
	#ETH_P_PPP_MP
 0x0008

	)

115 
	#ETH_P_LOCALTALK
 0x0009

	)

116 
	#ETH_P_CAN
 0x000C

	)

117 
	#ETH_P_CANFD
 0x000D

	)

118 
	#ETH_P_PPPTALK
 0x0010

	)

119 
	#ETH_P_TR_802_2
 0x0011

	)

120 
	#ETH_P_MOBITEX
 0x0015

	)

121 
	#ETH_P_CONTROL
 0x0016

	)

122 
	#ETH_P_IRDA
 0x0017

	)

123 
	#ETH_P_ECONET
 0x0018

	)

124 
	#ETH_P_HDLC
 0x0019

	)

125 
	#ETH_P_ARCNET
 0x001A

	)

126 
	#ETH_P_DSA
 0x001B

	)

127 
	#ETH_P_TRAILER
 0x001C

	)

128 
	#ETH_P_PHONET
 0x00F5

	)

129 
	#ETH_P_IEEE802154
 0x00F6

	)

130 
	#ETH_P_CAIF
 0x00F7

	)

131 
	#ETH_P_XDSA
 0x00F8

	)

137 
	sëhhdr
 {

138 
	mh_de°
[
ETH_ALEN
];

139 
	mh_sour˚
[
ETH_ALEN
];

140 
__be16
 
	mh_¥Ÿo
;

141 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	mIFLA_PROMISCUITY
,

142 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

143 
	mIFLA_NUM_TX_QUEUES
,

144 
	mIFLA_NUM_RX_QUEUES
,

145 
	mIFLA_CARRIER
,

146 
	mIFLA_PHYS_PORT_ID
,

147 
	mIFLA_CARRIER_CHANGES
,

148 
	mIFLA_PHYS_SWITCH_ID
,

149 
	m__IFLA_MAX


153 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

156 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

157 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

160 
	mIFLA_INET_UNSPEC
,

161 
	mIFLA_INET_CONF
,

162 
	m__IFLA_INET_MAX
,

165 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

198 
	mIFLA_INET6_UNSPEC
,

199 
	mIFLA_INET6_FLAGS
,

200 
	mIFLA_INET6_CONF
,

201 
	mIFLA_INET6_STATS
,

202 
	mIFLA_INET6_MCAST
,

203 
	mIFLA_INET6_CACHEINFO
,

204 
	mIFLA_INET6_ICMP6STATS
,

205 
	mIFLA_INET6_TOKEN
,

206 
	mIFLA_INET6_ADDR_GEN_MODE
,

207 
	m__IFLA_INET6_MAX


210 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

212 
	eö6_addr_gí_mode
 {

213 
	mIN6_ADDR_GEN_MODE_EUI64
,

214 
	mIN6_ADDR_GEN_MODE_NONE
,

220 
	mIFLA_BR_UNSPEC
,

221 
	mIFLA_BR_FORWARD_DELAY
,

222 
	mIFLA_BR_HELLO_TIME
,

223 
	mIFLA_BR_MAX_AGE
,

224 
	m__IFLA_BR_MAX
,

227 
	#IFLA_BR_MAX
 (
__IFLA_BR_MAX
 - 1)

	)

230 
	mBRIDGE_MODE_UNSPEC
,

231 
	mBRIDGE_MODE_HAIRPIN
,

235 
	mIFLA_BRPORT_UNSPEC
,

236 
	mIFLA_BRPORT_STATE
,

237 
	mIFLA_BRPORT_PRIORITY
,

238 
	mIFLA_BRPORT_COST
,

239 
	mIFLA_BRPORT_MODE
,

240 
	mIFLA_BRPORT_GUARD
,

241 
	mIFLA_BRPORT_PROTECT
,

242 
	mIFLA_BRPORT_FAST_LEAVE
,

243 
	mIFLA_BRPORT_LEARNING
,

244 
	mIFLA_BRPORT_UNICAST_FLOOD
,

245 
	mIFLA_BRPORT_PROXYARP
,

246 
	mIFLA_BRPORT_LEARNING_SYNC
,

247 
	m__IFLA_BRPORT_MAX


249 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

251 
	siÊa_ˇcheöfo
 {

252 
__u32
 
	mmax_ªasm_Àn
;

253 
__u32
 
	mt°amp
;

254 
__u32
 
	mªachabÀ_time
;

255 
__u32
 
	mªå™s_time
;

259 
	mIFLA_INFO_UNSPEC
,

260 
	mIFLA_INFO_KIND
,

261 
	mIFLA_INFO_DATA
,

262 
	mIFLA_INFO_XSTATS
,

263 
	mIFLA_INFO_SLAVE_KIND
,

264 
	mIFLA_INFO_SLAVE_DATA
,

265 
	m__IFLA_INFO_MAX
,

268 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

273 
	mIFLA_VLAN_UNSPEC
,

274 
	mIFLA_VLAN_ID
,

275 
	mIFLA_VLAN_FLAGS
,

276 
	mIFLA_VLAN_EGRESS_QOS
,

277 
	mIFLA_VLAN_INGRESS_QOS
,

278 
	mIFLA_VLAN_PROTOCOL
,

279 
	m__IFLA_VLAN_MAX
,

282 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

284 
	siÊa_vœn_Êags
 {

285 
__u32
 
	mÊags
;

286 
__u32
 
	mmask
;

290 
	mIFLA_VLAN_QOS_UNSPEC
,

291 
	mIFLA_VLAN_QOS_MAPPING
,

292 
	m__IFLA_VLAN_QOS_MAX


295 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

297 
	siÊa_vœn_qos_m≠pög
 {

298 
__u32
 
	m‰om
;

299 
__u32
 
	mto
;

304 
	mIFLA_MACVLAN_UNSPEC
,

305 
	mIFLA_MACVLAN_MODE
,

306 
	mIFLA_MACVLAN_FLAGS
,

307 
	mIFLA_MACVLAN_MACADDR_MODE
,

308 
	mIFLA_MACVLAN_MACADDR
,

309 
	mIFLA_MACVLAN_MACADDR_DATA
,

310 
	mIFLA_MACVLAN_MACADDR_COUNT
,

311 
	m__IFLA_MACVLAN_MAX
,

314 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

316 
	emacvœn_mode
 {

317 
	mMACVLAN_MODE_PRIVATE
 = 1,

318 
	mMACVLAN_MODE_VEPA
 = 2,

319 
	mMACVLAN_MODE_BRIDGE
 = 4,

320 
	mMACVLAN_MODE_PASSTHRU
 = 8,

321 
	mMACVLAN_MODE_SOURCE
 = 16,

324 
	emacvœn_maˇddr_mode
 {

325 
	mMACVLAN_MACADDR_ADD
,

326 
	mMACVLAN_MACADDR_DEL
,

327 
	mMACVLAN_MACADDR_FLUSH
,

328 
	mMACVLAN_MACADDR_SET
,

331 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

335 
	mIFLA_IPVLAN_UNSPEC
,

336 
	mIFLA_IPVLAN_MODE
,

337 
	m__IFLA_IPVLAN_MAX


340 
	#IFLA_IPVLAN_MAX
 (
__IFLA_IPVLAN_MAX
 - 1)

	)

342 
	eùvœn_mode
 {

343 
	mIPVLAN_MODE_L2
 = 0,

344 
	mIPVLAN_MODE_L3
,

345 
	mIPVLAN_MODE_MAX


350 
	mIFLA_VXLAN_UNSPEC
,

351 
	mIFLA_VXLAN_ID
,

352 
	mIFLA_VXLAN_GROUP
,

353 
	mIFLA_VXLAN_LINK
,

354 
	mIFLA_VXLAN_LOCAL
,

355 
	mIFLA_VXLAN_TTL
,

356 
	mIFLA_VXLAN_TOS
,

357 
	mIFLA_VXLAN_LEARNING
,

358 
	mIFLA_VXLAN_AGEING
,

359 
	mIFLA_VXLAN_LIMIT
,

360 
	mIFLA_VXLAN_PORT_RANGE
,

361 
	mIFLA_VXLAN_PROXY
,

362 
	mIFLA_VXLAN_RSC
,

363 
	mIFLA_VXLAN_L2MISS
,

364 
	mIFLA_VXLAN_L3MISS
,

365 
	mIFLA_VXLAN_PORT
,

366 
	mIFLA_VXLAN_GROUP6
,

367 
	mIFLA_VXLAN_LOCAL6
,

368 
	mIFLA_VXLAN_UDP_CSUM
,

369 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_TX
,

370 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_RX
,

371 
	m__IFLA_VXLAN_MAX


373 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

375 
	siÊa_vxœn_p‹t_ønge
 {

376 
__be16
 
	mlow
;

377 
__be16
 
	mhigh
;

383 
	mIFLA_BOND_UNSPEC
,

384 
	mIFLA_BOND_MODE
,

385 
	mIFLA_BOND_ACTIVE_SLAVE
,

386 
	mIFLA_BOND_MIIMON
,

387 
	mIFLA_BOND_UPDELAY
,

388 
	mIFLA_BOND_DOWNDELAY
,

389 
	mIFLA_BOND_USE_CARRIER
,

390 
	mIFLA_BOND_ARP_INTERVAL
,

391 
	mIFLA_BOND_ARP_IP_TARGET
,

392 
	mIFLA_BOND_ARP_VALIDATE
,

393 
	mIFLA_BOND_ARP_ALL_TARGETS
,

394 
	mIFLA_BOND_PRIMARY
,

395 
	mIFLA_BOND_PRIMARY_RESELECT
,

396 
	mIFLA_BOND_FAIL_OVER_MAC
,

397 
	mIFLA_BOND_XMIT_HASH_POLICY
,

398 
	mIFLA_BOND_RESEND_IGMP
,

399 
	mIFLA_BOND_NUM_PEER_NOTIF
,

400 
	mIFLA_BOND_ALL_SLAVES_ACTIVE
,

401 
	mIFLA_BOND_MIN_LINKS
,

402 
	mIFLA_BOND_LP_INTERVAL
,

403 
	mIFLA_BOND_PACKETS_PER_SLAVE
,

404 
	mIFLA_BOND_AD_LACP_RATE
,

405 
	mIFLA_BOND_AD_SELECT
,

406 
	mIFLA_BOND_AD_INFO
,

407 
	m__IFLA_BOND_MAX
,

410 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

413 
	mIFLA_BOND_AD_INFO_UNSPEC
,

414 
	mIFLA_BOND_AD_INFO_AGGREGATOR
,

415 
	mIFLA_BOND_AD_INFO_NUM_PORTS
,

416 
	mIFLA_BOND_AD_INFO_ACTOR_KEY
,

417 
	mIFLA_BOND_AD_INFO_PARTNER_KEY
,

418 
	mIFLA_BOND_AD_INFO_PARTNER_MAC
,

419 
	m__IFLA_BOND_AD_INFO_MAX
,

422 
	#IFLA_BOND_AD_INFO_MAX
 (
__IFLA_BOND_AD_INFO_MAX
 - 1)

	)

425 
	mIFLA_BOND_SLAVE_UNSPEC
,

426 
	mIFLA_BOND_SLAVE_STATE
,

427 
	mIFLA_BOND_SLAVE_MII_STATUS
,

428 
	mIFLA_BOND_SLAVE_LINK_FAILURE_COUNT
,

429 
	mIFLA_BOND_SLAVE_PERM_HWADDR
,

430 
	mIFLA_BOND_SLAVE_QUEUE_ID
,

431 
	mIFLA_BOND_SLAVE_AD_AGGREGATOR_ID
,

432 
	m__IFLA_BOND_SLAVE_MAX
,

435 
	#IFLA_BOND_SLAVE_MAX
 (
__IFLA_BOND_SLAVE_MAX
 - 1)

	)

440 
	mIFLA_VF_INFO_UNSPEC
,

441 
	mIFLA_VF_INFO
,

442 
	m__IFLA_VF_INFO_MAX
,

445 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

448 
	mIFLA_VF_UNSPEC
,

449 
	mIFLA_VF_MAC
,

450 
	mIFLA_VF_VLAN
,

451 
	mIFLA_VF_TX_RATE
,

452 
	mIFLA_VF_SPOOFCHK
,

453 
	mIFLA_VF_LINK_STATE
,

454 
	mIFLA_VF_RATE
,

455 
	m__IFLA_VF_MAX
,

458 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

460 
	siÊa_vf_mac
 {

461 
__u32
 
	mvf
;

462 
__u8
 
	mmac
[32];

465 
	siÊa_vf_vœn
 {

466 
__u32
 
	mvf
;

467 
__u32
 
	mvœn
;

468 
__u32
 
	mqos
;

471 
	siÊa_vf_tx_øã
 {

472 
__u32
 
	mvf
;

473 
__u32
 
	møã
;

476 
	siÊa_vf_øã
 {

477 
__u32
 
	mvf
;

478 
__u32
 
	mmö_tx_øã
;

479 
__u32
 
	mmax_tx_øã
;

482 
	siÊa_vf_•oofchk
 {

483 
__u32
 
	mvf
;

484 
__u32
 
	m£âög
;

488 
	mIFLA_VF_LINK_STATE_AUTO
,

489 
	mIFLA_VF_LINK_STATE_ENABLE
,

490 
	mIFLA_VF_LINK_STATE_DISABLE
,

491 
	m__IFLA_VF_LINK_STATE_MAX
,

494 
	siÊa_vf_lök_°©e
 {

495 
__u32
 
	mvf
;

496 
__u32
 
	mlök_°©e
;

515 
	mIFLA_VF_PORT_UNSPEC
,

516 
	mIFLA_VF_PORT
,

517 
	m__IFLA_VF_PORT_MAX
,

520 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

523 
	mIFLA_PORT_UNSPEC
,

524 
	mIFLA_PORT_VF
,

525 
	mIFLA_PORT_PROFILE
,

526 
	mIFLA_PORT_VSI_TYPE
,

527 
	mIFLA_PORT_INSTANCE_UUID
,

528 
	mIFLA_PORT_HOST_UUID
,

529 
	mIFLA_PORT_REQUEST
,

530 
	mIFLA_PORT_RESPONSE
,

531 
	m__IFLA_PORT_MAX
,

534 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

536 
	#PORT_PROFILE_MAX
 40

	)

537 
	#PORT_UUID_MAX
 16

	)

538 
	#PORT_SELF_VF
 -1

	)

541 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

542 
	mPORT_REQUEST_PREASSOCIATE_RR
,

543 
	mPORT_REQUEST_ASSOCIATE
,

544 
	mPORT_REQUEST_DISASSOCIATE
,

548 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

549 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

550 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

551 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

552 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

553 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

554 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

556 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

557 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

558 
	mPORT_PROFILE_RESPONSE_INVALID
,

559 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

560 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

561 
	mPORT_PROFILE_RESPONSE_ERROR
,

564 
	siÊa_p‹t_vsi
 {

565 
__u8
 
	mvsi_mgr_id
;

566 
__u8
 
	mvsi_ty≥_id
[3];

567 
__u8
 
	mvsi_ty≥_vîsi⁄
;

568 
__u8
 
	m∑d
[3];

575 
	mIFLA_IPOIB_UNSPEC
,

576 
	mIFLA_IPOIB_PKEY
,

577 
	mIFLA_IPOIB_MODE
,

578 
	mIFLA_IPOIB_UMCAST
,

579 
	m__IFLA_IPOIB_MAX


583 
	mIPOIB_MODE_DATAGRAM
 = 0,

584 
	mIPOIB_MODE_CONNECTED
 = 1,

587 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

593 
	mIFLA_HSR_UNSPEC
,

594 
	mIFLA_HSR_SLAVE1
,

595 
	mIFLA_HSR_SLAVE2
,

596 
	mIFLA_HSR_MULTICAST_SPEC
,

597 
	mIFLA_HSR_SUPERVISION_ADDR
,

598 
	mIFLA_HSR_SEQ_NR
,

599 
	m__IFLA_HSR_MAX
,

602 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

29 
	#PACKET_LOOPBACK
 5

	)

30 
	#PACKET_USER
 6

	)

31 
	#PACKET_KERNEL
 7

	)

33 
	#PACKET_FASTROUTE
 6

	)

37 
	#PACKET_ADD_MEMBERSHIP
 1

	)

38 
	#PACKET_DROP_MEMBERSHIP
 2

	)

39 
	#PACKET_RECV_OUTPUT
 3

	)

41 
	#PACKET_RX_RING
 5

	)

42 
	#PACKET_STATISTICS
 6

	)

43 
	#PACKET_COPY_THRESH
 7

	)

44 
	#PACKET_AUXDATA
 8

	)

45 
	#PACKET_ORIGDEV
 9

	)

46 
	#PACKET_VERSION
 10

	)

47 
	#PACKET_HDRLEN
 11

	)

48 
	#PACKET_RESERVE
 12

	)

49 
	#PACKET_TX_RING
 13

	)

50 
	#PACKET_LOSS
 14

	)

51 
	#PACKET_VNET_HDR
 15

	)

52 
	#PACKET_TX_TIMESTAMP
 16

	)

53 
	#PACKET_TIMESTAMP
 17

	)

54 
	#PACKET_FANOUT
 18

	)

55 
	#PACKET_TX_HAS_OFF
 19

	)

56 
	#PACKET_QDISC_BYPASS
 20

	)

58 
	#PACKET_FANOUT_HASH
 0

	)

59 
	#PACKET_FANOUT_LB
 1

	)

60 
	#PACKET_FANOUT_CPU
 2

	)

61 
	#PACKET_FANOUT_ROLLOVER
 3

	)

62 
	#PACKET_FANOUT_RND
 4

	)

63 
	#PACKET_FANOUT_QM
 5

	)

64 
	#PACKET_FANOUT_FLAG_ROLLOVER
 0x1000

	)

65 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

67 
	sçackë_°©s
 {

68 
	mç_∑ckës
;

69 
	mç_dr›s
;

72 
	sçackë_°©s_v3
 {

73 
	mç_∑ckës
;

74 
	mç_dr›s
;

75 
	mç_‰ìze_q_˙t
;

78 
	uçackë_°©s_u
 {

79 
çackë_°©s
 
	m°©s1
;

80 
çackë_°©s_v3
 
	m°©s3
;

83 
	sçackë_auxd©a
 {

84 
__u32
 
	mç_°©us
;

85 
__u32
 
	mç_Àn
;

86 
__u32
 
	mç_¢≠Àn
;

87 
__u16
 
	mç_mac
;

88 
__u16
 
	mç_√t
;

89 
__u16
 
	mç_vœn_tci
;

90 
__u16
 
	mç_vœn_çid
;

94 
	#TP_STATUS_KERNEL
 0

	)

95 
	#TP_STATUS_USER
 (1 << 0)

	)

96 
	#TP_STATUS_COPY
 (1 << 1)

	)

97 
	#TP_STATUS_LOSING
 (1 << 2)

	)

98 
	#TP_STATUS_CSUMNOTREADY
 (1 << 3)

	)

99 
	#TP_STATUS_VLAN_VALID
 (1 << 4Ë

	)

100 
	#TP_STATUS_BLK_TMO
 (1 << 5)

	)

101 
	#TP_STATUS_VLAN_TPID_VALID
 (1 << 6Ë

	)

104 
	#TP_STATUS_AVAILABLE
 0

	)

105 
	#TP_STATUS_SEND_REQUEST
 (1 << 0)

	)

106 
	#TP_STATUS_SENDING
 (1 << 1)

	)

107 
	#TP_STATUS_WRONG_FORMAT
 (1 << 2)

	)

110 
	#TP_STATUS_TS_SOFTWARE
 (1 << 29)

	)

111 
	#TP_STATUS_TS_SYS_HARDWARE
 (1 << 30Ë

	)

112 
	#TP_STATUS_TS_RAW_HARDWARE
 (1 << 31)

	)

115 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

117 
	sçackë_hdr
 {

118 
	mç_°©us
;

119 
	mç_Àn
;

120 
	mç_¢≠Àn
;

121 
	mç_mac
;

122 
	mç_√t
;

123 
	mç_£c
;

124 
	mç_u£c
;

127 
	#TPACKET_ALIGNMENT
 16

	)

128 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

129 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

131 
	sçackë2_hdr
 {

132 
__u32
 
	mç_°©us
;

133 
__u32
 
	mç_Àn
;

134 
__u32
 
	mç_¢≠Àn
;

135 
__u16
 
	mç_mac
;

136 
__u16
 
	mç_√t
;

137 
__u32
 
	mç_£c
;

138 
__u32
 
	mç_n£c
;

139 
__u16
 
	mç_vœn_tci
;

140 
__u16
 
	mç_vœn_çid
;

141 
__u8
 
	mç_∑ddög
[4];

144 
	sçackë_hdr_v¨ü¡1
 {

145 
__u32
 
	mç_rxhash
;

146 
__u32
 
	mç_vœn_tci
;

147 
__u16
 
	mç_vœn_çid
;

148 
__u16
 
	mç_∑ddög
;

151 
	sçackë3_hdr
 {

152 
__u32
 
	mç_√xt_off£t
;

153 
__u32
 
	mç_£c
;

154 
__u32
 
	mç_n£c
;

155 
__u32
 
	mç_¢≠Àn
;

156 
__u32
 
	mç_Àn
;

157 
__u32
 
	mç_°©us
;

158 
__u16
 
	mç_mac
;

159 
__u16
 
	mç_√t
;

162 
çackë_hdr_v¨ü¡1
 
	mhv1
;

164 
__u8
 
	mç_∑ddög
[8];

167 
	sçackë_bd_ts
 {

168 
	mts_£c
;

170 
	mts_u£c
;

171 
	mts_n£c
;

175 
	sçackë_hdr_v1
 {

176 
__u32
 
	mblock_°©us
;

177 
__u32
 
	mnum_pkts
;

178 
__u32
 
	moff£t_to_fú°_pkt
;

183 
__u32
 
	mblk_Àn
;

194 
__Æig√d_u64
 
	m£q_num
;

221 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

224 
	uçackë_bd_hódî_u
 {

225 
çackë_hdr_v1
 
	mbh1
;

228 
	sçackë_block_desc
 {

229 
__u32
 
	mvîsi⁄
;

230 
__u32
 
	moff£t_to_¥iv
;

231 
çackë_bd_hódî_u
 
	mhdr
;

234 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

235 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

237 
	eçackë_vîsi⁄s
 {

238 
	mTPACKET_V1
,

239 
	mTPACKET_V2
,

240 
	mTPACKET_V3


256 
	sçackë_ªq
 {

257 
	mç_block_size
;

258 
	mç_block_ƒ
;

259 
	mç_‰ame_size
;

260 
	mç_‰ame_ƒ
;

263 
	sçackë_ªq3
 {

264 
	mç_block_size
;

265 
	mç_block_ƒ
;

266 
	mç_‰ame_size
;

267 
	mç_‰ame_ƒ
;

268 
	mç_ªtúe_blk_tov
;

269 
	mç_sizeof_¥iv
;

270 
	mç_„©uª_ªq_w‹d
;

273 
	uçackë_ªq_u
 {

274 
çackë_ªq
 
	mªq
;

275 
çackë_ªq3
 
	mªq3
;

278 
	s∑ckë_mªq
 {

279 
	mmr_ifödex
;

280 
	mmr_ty≥
;

281 
	mmr_Æí
;

282 
	mmr_addªss
[8];

285 
	#PACKET_MR_MULTICAST
 0

	)

286 
	#PACKET_MR_PROMISC
 1

	)

287 
	#PACKET_MR_ALLMULTI
 2

	)

288 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/if_tun.h

16 #i‚de‡
__IF_TUN_H


17 
	#__IF_TUN_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/fûãr.h
>

24 
	#TUN_READQ_SIZE
 500

	)

26 
	#TUN_TUN_DEV
 
IFF_TUN


	)

27 
	#TUN_TAP_DEV
 
IFF_TAP


	)

28 
	#TUN_TYPE_MASK
 0x000f

	)

31 
	#TUNSETNOCSUM
 
	`_IOW
('T', 200, )

	)

32 
	#TUNSETDEBUG
 
	`_IOW
('T', 201, )

	)

33 
	#TUNSETIFF
 
	`_IOW
('T', 202, )

	)

34 
	#TUNSETPERSIST
 
	`_IOW
('T', 203, )

	)

35 
	#TUNSETOWNER
 
	`_IOW
('T', 204, )

	)

36 
	#TUNSETLINK
 
	`_IOW
('T', 205, )

	)

37 
	#TUNSETGROUP
 
	`_IOW
('T', 206, )

	)

38 
	#TUNGETFEATURES
 
	`_IOR
('T', 207, )

	)

39 
	#TUNSETOFFLOAD
 
	`_IOW
('T', 208, )

	)

40 
	#TUNSETTXFILTER
 
	`_IOW
('T', 209, )

	)

41 
	#TUNGETIFF
 
	`_IOR
('T', 210, )

	)

42 
	#TUNGETSNDBUF
 
	`_IOR
('T', 211, )

	)

43 
	#TUNSETSNDBUF
 
	`_IOW
('T', 212, )

	)

44 
	#TUNATTACHFILTER
 
	`_IOW
('T', 213, 
sock_Ârog
)

	)

45 
	#TUNDETACHFILTER
 
	`_IOW
('T', 214, 
sock_Ârog
)

	)

46 
	#TUNGETVNETHDRSZ
 
	`_IOR
('T', 215, )

	)

47 
	#TUNSETVNETHDRSZ
 
	`_IOW
('T', 216, )

	)

48 
	#TUNSETQUEUE
 
	`_IOW
('T', 217, )

	)

49 
	#TUNSETIFINDEX
 
	`_IOW
('T', 218, )

	)

50 
	#TUNGETFILTER
 
	`_IOR
('T', 219, 
sock_Ârog
)

	)

51 
	#TUNSETVNETLE
 
	`_IOW
('T', 220, )

	)

52 
	#TUNGETVNETLE
 
	`_IOR
('T', 221, )

	)

55 
	#IFF_TUN
 0x0001

	)

56 
	#IFF_TAP
 0x0002

	)

57 
	#IFF_NO_PI
 0x1000

	)

59 
	#IFF_ONE_QUEUE
 0x2000

	)

60 
	#IFF_VNET_HDR
 0x4000

	)

61 
	#IFF_TUN_EXCL
 0x8000

	)

62 
	#IFF_MULTI_QUEUE
 0x0100

	)

63 
	#IFF_ATTACH_QUEUE
 0x0200

	)

64 
	#IFF_DETACH_QUEUE
 0x0400

	)

66 
	#IFF_PERSIST
 0x0800

	)

67 
	#IFF_NOFILTER
 0x1000

	)

70 
	#TUN_TX_TIMESTAMP
 1

	)

73 
	#TUN_F_CSUM
 0x01

	)

74 
	#TUN_F_TSO4
 0x02

	)

75 
	#TUN_F_TSO6
 0x04

	)

76 
	#TUN_F_TSO_ECN
 0x08

	)

77 
	#TUN_F_UFO
 0x10

	)

80 
	#TUN_PKT_STRIP
 0x0001

	)

81 
	stun_pi
 {

82 
__u16
 
	mÊags
;

83 
__be16
 
	m¥Ÿo
;

94 
	#TUN_FLT_ALLMULTI
 0x0001

	)

95 
	stun_fûãr
 {

96 
__u16
 
	mÊags
;

97 
__u16
 
	mcou¡
;

98 
__u8
 
	maddr
[0][
ETH_ALEN
];

	@/usr/include/linux/if_tunnel.h

1 #i‚de‡
_IF_TUNNEL_H_


2 
	#_IF_TUNNEL_H_


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

8 
	#SIOCGETTUNNEL
 (
SIOCDEVPRIVATE
 + 0)

	)

9 
	#SIOCADDTUNNEL
 (
SIOCDEVPRIVATE
 + 1)

	)

10 
	#SIOCDELTUNNEL
 (
SIOCDEVPRIVATE
 + 2)

	)

11 
	#SIOCCHGTUNNEL
 (
SIOCDEVPRIVATE
 + 3)

	)

12 
	#SIOCGETPRL
 (
SIOCDEVPRIVATE
 + 4)

	)

13 
	#SIOCADDPRL
 (
SIOCDEVPRIVATE
 + 5)

	)

14 
	#SIOCDELPRL
 (
SIOCDEVPRIVATE
 + 6)

	)

15 
	#SIOCCHGPRL
 (
SIOCDEVPRIVATE
 + 7)

	)

16 
	#SIOCGET6RD
 (
SIOCDEVPRIVATE
 + 8)

	)

17 
	#SIOCADD6RD
 (
SIOCDEVPRIVATE
 + 9)

	)

18 
	#SIOCDEL6RD
 (
SIOCDEVPRIVATE
 + 10)

	)

19 
	#SIOCCHG6RD
 (
SIOCDEVPRIVATE
 + 11)

	)

21 
	#GRE_CSUM
 
	`__˝u_to_be16
(0x8000)

	)

22 
	#GRE_ROUTING
 
	`__˝u_to_be16
(0x4000)

	)

23 
	#GRE_KEY
 
	`__˝u_to_be16
(0x2000)

	)

24 
	#GRE_SEQ
 
	`__˝u_to_be16
(0x1000)

	)

25 
	#GRE_STRICT
 
	`__˝u_to_be16
(0x0800)

	)

26 
	#GRE_REC
 
	`__˝u_to_be16
(0x0700)

	)

27 
	#GRE_FLAGS
 
	`__˝u_to_be16
(0x00F8)

	)

28 
	#GRE_VERSION
 
	`__˝u_to_be16
(0x0007)

	)

30 
	sù_tu¬ñ_∑rm
 {

31 
	m«me
[
IFNAMSIZ
];

32 
	mlök
;

33 
__be16
 
	mi_Êags
;

34 
__be16
 
	mo_Êags
;

35 
__be32
 
	mi_key
;

36 
__be32
 
	mo_key
;

37 
ùhdr
 
	mùh
;

41 
	mIFLA_IPTUN_UNSPEC
,

42 
	mIFLA_IPTUN_LINK
,

43 
	mIFLA_IPTUN_LOCAL
,

44 
	mIFLA_IPTUN_REMOTE
,

45 
	mIFLA_IPTUN_TTL
,

46 
	mIFLA_IPTUN_TOS
,

47 
	mIFLA_IPTUN_ENCAP_LIMIT
,

48 
	mIFLA_IPTUN_FLOWINFO
,

49 
	mIFLA_IPTUN_FLAGS
,

50 
	mIFLA_IPTUN_PROTO
,

51 
	mIFLA_IPTUN_PMTUDISC
,

52 
	mIFLA_IPTUN_6RD_PREFIX
,

53 
	mIFLA_IPTUN_6RD_RELAY_PREFIX
,

54 
	mIFLA_IPTUN_6RD_PREFIXLEN
,

55 
	mIFLA_IPTUN_6RD_RELAY_PREFIXLEN
,

56 
	mIFLA_IPTUN_ENCAP_TYPE
,

57 
	mIFLA_IPTUN_ENCAP_FLAGS
,

58 
	mIFLA_IPTUN_ENCAP_SPORT
,

59 
	mIFLA_IPTUN_ENCAP_DPORT
,

61 
	m__IFLA_IPTUN_VENDOR_BREAK
,

62 
	mIFLA_IPTUN_FAN_UNDERLAY
=32,

64 
	m__IFLA_IPTUN_MAX
,

66 
	#IFLA_IPTUN_MAX
 (
__IFLA_IPTUN_MAX
 - 1)

	)

68 
	etu¬ñ_íˇp_ty≥s
 {

69 
	mTUNNEL_ENCAP_NONE
,

70 
	mTUNNEL_ENCAP_FOU
,

71 
	mTUNNEL_ENCAP_GUE
,

74 
	#TUNNEL_ENCAP_FLAG_CSUM
 (1<<0)

	)

75 
	#TUNNEL_ENCAP_FLAG_CSUM6
 (1<<1)

	)

76 
	#TUNNEL_ENCAP_FLAG_REMCSUM
 (1<<2)

	)

79 
	#SIT_ISATAP
 0x0001

	)

81 
	sù_tu¬ñ_¥l
 {

82 
__be32
 
	maddr
;

83 
__u16
 
	mÊags
;

84 
__u16
 
	m__ª£rved
;

85 
__u32
 
	md©Æí
;

86 
__u32
 
	m__ª£rved2
;

91 
	#PRL_DEFAULT
 0x0001

	)

93 
	sù_tu¬ñ_6rd
 {

94 
ö6_addr
 
	m¥efix
;

95 
__be32
 
	mªœy_¥efix
;

96 
__u16
 
	m¥efixÀn
;

97 
__u16
 
	mªœy_¥efixÀn
;

101 
	mIFLA_GRE_UNSPEC
,

102 
	mIFLA_GRE_LINK
,

103 
	mIFLA_GRE_IFLAGS
,

104 
	mIFLA_GRE_OFLAGS
,

105 
	mIFLA_GRE_IKEY
,

106 
	mIFLA_GRE_OKEY
,

107 
	mIFLA_GRE_LOCAL
,

108 
	mIFLA_GRE_REMOTE
,

109 
	mIFLA_GRE_TTL
,

110 
	mIFLA_GRE_TOS
,

111 
	mIFLA_GRE_PMTUDISC
,

112 
	mIFLA_GRE_ENCAP_LIMIT
,

113 
	mIFLA_GRE_FLOWINFO
,

114 
	mIFLA_GRE_FLAGS
,

115 
	mIFLA_GRE_ENCAP_TYPE
,

116 
	mIFLA_GRE_ENCAP_FLAGS
,

117 
	mIFLA_GRE_ENCAP_SPORT
,

118 
	mIFLA_GRE_ENCAP_DPORT
,

119 
	m__IFLA_GRE_MAX
,

122 
	#IFLA_GRE_MAX
 (
__IFLA_GRE_MAX
 - 1)

	)

125 
	#VTI_ISVTI
 ((
__be16
)0x0001)

	)

128 
	mIFLA_VTI_UNSPEC
,

129 
	mIFLA_VTI_LINK
,

130 
	mIFLA_VTI_IKEY
,

131 
	mIFLA_VTI_OKEY
,

132 
	mIFLA_VTI_LOCAL
,

133 
	mIFLA_VTI_REMOTE
,

134 
	m__IFLA_VTI_MAX
,

137 
	#IFLA_VTI_MAX
 (
__IFLA_VTI_MAX
 - 1)

	)

	@/usr/include/linux/if_vlan.h

13 #i‚de‡
_LINUX_IF_VLAN_H_


14 
	#_LINUX_IF_VLAN_H_


	)

20 
	evœn_io˘l_cmds
 {

21 
	mADD_VLAN_CMD
,

22 
	mDEL_VLAN_CMD
,

23 
	mSET_VLAN_INGRESS_PRIORITY_CMD
,

24 
	mSET_VLAN_EGRESS_PRIORITY_CMD
,

25 
	mGET_VLAN_INGRESS_PRIORITY_CMD
,

26 
	mGET_VLAN_EGRESS_PRIORITY_CMD
,

27 
	mSET_VLAN_NAME_TYPE_CMD
,

28 
	mSET_VLAN_FLAG_CMD
,

29 
	mGET_VLAN_REALDEV_NAME_CMD
,

30 
	mGET_VLAN_VID_CMD


33 
	evœn_Êags
 {

34 
	mVLAN_FLAG_REORDER_HDR
 = 0x1,

35 
	mVLAN_FLAG_GVRP
 = 0x2,

36 
	mVLAN_FLAG_LOOSE_BINDING
 = 0x4,

37 
	mVLAN_FLAG_MVRP
 = 0x8,

40 
	evœn_«me_ty≥s
 {

41 
	mVLAN_NAME_TYPE_PLUS_VID
,

42 
	mVLAN_NAME_TYPE_RAW_PLUS_VID
,

43 
	mVLAN_NAME_TYPE_PLUS_VID_NO_PAD
,

44 
	mVLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
,

45 
	mVLAN_NAME_TYPE_HIGHEST


48 
	svœn_io˘l_¨gs
 {

49 
	mcmd
;

50 
	mdevi˚1
[24];

53 
	mdevi˚2
[24];

54 
	mVID
;

55 
	mskb_¥i‹ôy
;

56 
	m«me_ty≥
;

57 
	mböd_ty≥
;

58 
	mÊag
;

59 } 
	mu
;

61 
	mvœn_qos
;

	@/usr/include/linux/in.h

18 #i‚de‡
_LINUX_IN_H


19 
	#_LINUX_IN_H


	)

21 
	~<löux/ty≥s.h
>

22 
	~<löux/sockë.h
>

26 
	mIPPROTO_IP
 = 0,

27 
	#IPPROTO_IP
 
IPPROTO_IP


	)

28 
	mIPPROTO_ICMP
 = 1,

29 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

30 
	mIPPROTO_IGMP
 = 2,

31 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

32 
	mIPPROTO_IPIP
 = 4,

33 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

34 
	mIPPROTO_TCP
 = 6,

35 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

36 
	mIPPROTO_EGP
 = 8,

37 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

38 
	mIPPROTO_PUP
 = 12,

39 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

40 
	mIPPROTO_UDP
 = 17,

41 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

42 
	mIPPROTO_IDP
 = 22,

43 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

44 
	mIPPROTO_TP
 = 29,

45 
	#IPPROTO_TP
 
IPPROTO_TP


	)

46 
	mIPPROTO_DCCP
 = 33,

47 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

48 
	mIPPROTO_IPV6
 = 41,

49 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

50 
	mIPPROTO_RSVP
 = 46,

51 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

52 
	mIPPROTO_GRE
 = 47,

53 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

54 
	mIPPROTO_ESP
 = 50,

55 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

56 
	mIPPROTO_AH
 = 51,

57 
	#IPPROTO_AH
 
IPPROTO_AH


	)

58 
	mIPPROTO_MTP
 = 92,

59 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

60 
	mIPPROTO_BEETPH
 = 94,

61 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

62 
	mIPPROTO_ENCAP
 = 98,

63 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

64 
	mIPPROTO_PIM
 = 103,

65 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

66 
	mIPPROTO_COMP
 = 108,

67 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

68 
	mIPPROTO_SCTP
 = 132,

69 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

70 
	mIPPROTO_UDPLITE
 = 136,

71 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

72 
	mIPPROTO_RAW
 = 255,

73 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

74 
	mIPPROTO_MAX


79 
	sö_addr
 {

80 
__be32
 
	ms_addr
;

83 
	#IP_TOS
 1

	)

84 
	#IP_TTL
 2

	)

85 
	#IP_HDRINCL
 3

	)

86 
	#IP_OPTIONS
 4

	)

87 
	#IP_ROUTER_ALERT
 5

	)

88 
	#IP_RECVOPTS
 6

	)

89 
	#IP_RETOPTS
 7

	)

90 
	#IP_PKTINFO
 8

	)

91 
	#IP_PKTOPTIONS
 9

	)

92 
	#IP_MTU_DISCOVER
 10

	)

93 
	#IP_RECVERR
 11

	)

94 
	#IP_RECVTTL
 12

	)

95 
	#IP_RECVTOS
 13

	)

96 
	#IP_MTU
 14

	)

97 
	#IP_FREEBIND
 15

	)

98 
	#IP_IPSEC_POLICY
 16

	)

99 
	#IP_XFRM_POLICY
 17

	)

100 
	#IP_PASSSEC
 18

	)

101 
	#IP_TRANSPARENT
 19

	)

104 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

107 
	#IP_ORIGDSTADDR
 20

	)

108 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

110 
	#IP_MINTTL
 21

	)

111 
	#IP_NODEFRAG
 22

	)

114 
	#IP_PMTUDISC_DONT
 0

	)

115 
	#IP_PMTUDISC_WANT
 1

	)

116 
	#IP_PMTUDISC_DO
 2

	)

117 
	#IP_PMTUDISC_PROBE
 3

	)

122 
	#IP_PMTUDISC_INTERFACE
 4

	)

126 
	#IP_PMTUDISC_OMIT
 5

	)

128 
	#IP_MULTICAST_IF
 32

	)

129 
	#IP_MULTICAST_TTL
 33

	)

130 
	#IP_MULTICAST_LOOP
 34

	)

131 
	#IP_ADD_MEMBERSHIP
 35

	)

132 
	#IP_DROP_MEMBERSHIP
 36

	)

133 
	#IP_UNBLOCK_SOURCE
 37

	)

134 
	#IP_BLOCK_SOURCE
 38

	)

135 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

136 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

137 
	#IP_MSFILTER
 41

	)

138 
	#MCAST_JOIN_GROUP
 42

	)

139 
	#MCAST_BLOCK_SOURCE
 43

	)

140 
	#MCAST_UNBLOCK_SOURCE
 44

	)

141 
	#MCAST_LEAVE_GROUP
 45

	)

142 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

143 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

144 
	#MCAST_MSFILTER
 48

	)

145 
	#IP_MULTICAST_ALL
 49

	)

146 
	#IP_UNICAST_IF
 50

	)

148 
	#MCAST_EXCLUDE
 0

	)

149 
	#MCAST_INCLUDE
 1

	)

152 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

153 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

157 
	sù_mªq
 {

158 
ö_addr
 
	mimr_mu…üddr
;

159 
ö_addr
 
	mimr_öãrÁ˚
;

162 
	sù_mªqn
 {

163 
ö_addr
 
	mimr_mu…üddr
;

164 
ö_addr
 
	mimr_addªss
;

165 
	mimr_ifödex
;

168 
	sù_mªq_sour˚
 {

169 
__be32
 
	mimr_mu…üddr
;

170 
__be32
 
	mimr_öãrÁ˚
;

171 
__be32
 
	mimr_sour˚addr
;

174 
	sù_msfûãr
 {

175 
__be32
 
	mimsf_mu…üddr
;

176 
__be32
 
	mimsf_öãrÁ˚
;

177 
__u32
 
	mimsf_fmode
;

178 
__u32
 
	mimsf_num§c
;

179 
__be32
 
	mimsf_¶i°
[1];

182 
	#IP_MSFILTER_SIZE
(
num§c
) \

183 ((
ù_msfûãr
Ë- (
__u32
) \

184 + (
num§c
Ë* (
__u32
))

	)

186 
	sgroup_ªq
 {

187 
__u32
 
	mgr_öãrÁ˚
;

188 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

191 
	sgroup_sour˚_ªq
 {

192 
__u32
 
	mg§_öãrÁ˚
;

193 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

194 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

197 
	sgroup_fûãr
 {

198 
__u32
 
	mgf_öãrÁ˚
;

199 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

200 
__u32
 
	mgf_fmode
;

201 
__u32
 
	mgf_num§c
;

202 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

205 
	#GROUP_FILTER_SIZE
(
num§c
) \

206 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

207 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

209 
	sö_pktöfo
 {

210 
	mùi_ifödex
;

211 
ö_addr
 
	mùi_•ec_d°
;

212 
ö_addr
 
	mùi_addr
;

216 
	#__SOCK_SIZE__
 16

	)

217 
	ssockaddr_ö
 {

218 
__kî√l_ß_Ámûy_t
 
	msö_Ámûy
;

219 
__be16
 
	msö_p‹t
;

220 
ö_addr
 
	msö_addr
;

223 
	m__∑d
[
__SOCK_SIZE__
 - () -

224 (Ë- (
ö_addr
)];

226 
	#sö_zîo
 
__∑d


	)

234 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

235 
	#IN_CLASSA_NET
 0xff000000

	)

236 
	#IN_CLASSA_NSHIFT
 24

	)

237 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

238 
	#IN_CLASSA_MAX
 128

	)

240 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

241 
	#IN_CLASSB_NET
 0xffff0000

	)

242 
	#IN_CLASSB_NSHIFT
 16

	)

243 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

244 
	#IN_CLASSB_MAX
 65536

	)

246 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

247 
	#IN_CLASSC_NET
 0xffffff00

	)

248 
	#IN_CLASSC_NSHIFT
 8

	)

249 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

251 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

252 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

253 
	#IN_MULTICAST_NET
 0xF0000000

	)

255 
	#IN_EXPERIMENTAL
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

256 
	#IN_BADCLASS
(
a
Ë
	`IN_EXPERIMENTAL
(◊))

	)

259 
	#INADDR_ANY
 ((Ë0x00000000)

	)

262 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

265 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

268 
	#IN_LOOPBACKNET
 127

	)

271 
	#INADDR_LOOPBACK
 0x7f000001

	)

272 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

275 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

276 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

277 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

278 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

282 
	~<asm/byã‹dî.h
>

	@/usr/include/linux/in6.h

21 #i‚de‡
_LINUX_IN6_H


22 
	#_LINUX_IN6_H


	)

24 
	~<löux/ty≥s.h
>

25 
	~<löux/libc-com∑t.h
>

31 #i‡
__UAPI_DEF_IN6_ADDR


32 
	sö6_addr
 {

34 
__u8
 
	mu6_addr8
[16];

35 #i‡
__UAPI_DEF_IN6_ADDR_ALT


36 
__be16
 
	mu6_addr16
[8];

37 
__be32
 
	mu6_addr32
[4];

39 } 
	mö6_u
;

40 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

41 #i‡
__UAPI_DEF_IN6_ADDR_ALT


42 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

43 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

48 #i‡
__UAPI_DEF_SOCKADDR_IN6


49 
	ssockaddr_ö6
 {

50 
	msö6_Ámûy
;

51 
__be16
 
	msö6_p‹t
;

52 
__be32
 
	msö6_Êowöfo
;

53 
ö6_addr
 
	msö6_addr
;

54 
__u32
 
	msö6_sc›e_id
;

58 #i‡
__UAPI_DEF_IPV6_MREQ


59 
	sùv6_mªq
 {

61 
ö6_addr
 
	mùv6mr_mu…üddr
;

64 
	mùv6mr_ifödex
;

68 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

70 
	sö6_Êowœbñ_ªq
 {

71 
ö6_addr
 
	mÊr_d°
;

72 
__be32
 
	mÊr_œbñ
;

73 
__u8
 
	mÊr_a˘i⁄
;

74 
__u8
 
	mÊr_sh¨e
;

75 
__u16
 
	mÊr_Êags
;

76 
__u16
 
	mÊr_expúes
;

77 
__u16
 
	mÊr_lögî
;

78 
__u32
 
	m__Êr_∑d
;

82 
	#IPV6_FL_A_GET
 0

	)

83 
	#IPV6_FL_A_PUT
 1

	)

84 
	#IPV6_FL_A_RENEW
 2

	)

86 
	#IPV6_FL_F_CREATE
 1

	)

87 
	#IPV6_FL_F_EXCL
 2

	)

88 
	#IPV6_FL_F_REFLECT
 4

	)

89 
	#IPV6_FL_F_REMOTE
 8

	)

91 
	#IPV6_FL_S_NONE
 0

	)

92 
	#IPV6_FL_S_EXCL
 1

	)

93 
	#IPV6_FL_S_PROCESS
 2

	)

94 
	#IPV6_FL_S_USER
 3

	)

95 
	#IPV6_FL_S_ANY
 255

	)

106 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

107 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

110 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

111 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

112 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

113 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

114 
	#IPV6_PRIORITY_BULK
 0x0400

	)

115 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

116 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

117 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

118 
	#IPV6_PRIORITY_8
 0x0800

	)

119 
	#IPV6_PRIORITY_9
 0x0900

	)

120 
	#IPV6_PRIORITY_10
 0x0a00

	)

121 
	#IPV6_PRIORITY_11
 0x0b00

	)

122 
	#IPV6_PRIORITY_12
 0x0c00

	)

123 
	#IPV6_PRIORITY_13
 0x0d00

	)

124 
	#IPV6_PRIORITY_14
 0x0e00

	)

125 
	#IPV6_PRIORITY_15
 0x0f00

	)

130 #i‡
__UAPI_DEF_IPPROTO_V6


131 
	#IPPROTO_HOPOPTS
 0

	)

132 
	#IPPROTO_ROUTING
 43

	)

133 
	#IPPROTO_FRAGMENT
 44

	)

134 
	#IPPROTO_ICMPV6
 58

	)

135 
	#IPPROTO_NONE
 59

	)

136 
	#IPPROTO_DSTOPTS
 60

	)

137 
	#IPPROTO_MH
 135

	)

143 
	#IPV6_TLV_PAD1
 0

	)

144 
	#IPV6_TLV_PADN
 1

	)

145 
	#IPV6_TLV_ROUTERALERT
 5

	)

146 
	#IPV6_TLV_JUMBO
 194

	)

147 
	#IPV6_TLV_HAO
 201

	)

152 #i‡
__UAPI_DEF_IPV6_OPTIONS


153 
	#IPV6_ADDRFORM
 1

	)

154 
	#IPV6_2292PKTINFO
 2

	)

155 
	#IPV6_2292HOPOPTS
 3

	)

156 
	#IPV6_2292DSTOPTS
 4

	)

157 
	#IPV6_2292RTHDR
 5

	)

158 
	#IPV6_2292PKTOPTIONS
 6

	)

159 
	#IPV6_CHECKSUM
 7

	)

160 
	#IPV6_2292HOPLIMIT
 8

	)

161 
	#IPV6_NEXTHOP
 9

	)

162 
	#IPV6_AUTHHDR
 10

	)

163 
	#IPV6_FLOWINFO
 11

	)

165 
	#IPV6_UNICAST_HOPS
 16

	)

166 
	#IPV6_MULTICAST_IF
 17

	)

167 
	#IPV6_MULTICAST_HOPS
 18

	)

168 
	#IPV6_MULTICAST_LOOP
 19

	)

169 
	#IPV6_ADD_MEMBERSHIP
 20

	)

170 
	#IPV6_DROP_MEMBERSHIP
 21

	)

171 
	#IPV6_ROUTER_ALERT
 22

	)

172 
	#IPV6_MTU_DISCOVER
 23

	)

173 
	#IPV6_MTU
 24

	)

174 
	#IPV6_RECVERR
 25

	)

175 
	#IPV6_V6ONLY
 26

	)

176 
	#IPV6_JOIN_ANYCAST
 27

	)

177 
	#IPV6_LEAVE_ANYCAST
 28

	)

180 
	#IPV6_PMTUDISC_DONT
 0

	)

181 
	#IPV6_PMTUDISC_WANT
 1

	)

182 
	#IPV6_PMTUDISC_DO
 2

	)

183 
	#IPV6_PMTUDISC_PROBE
 3

	)

187 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

191 
	#IPV6_PMTUDISC_OMIT
 5

	)

194 
	#IPV6_FLOWLABEL_MGR
 32

	)

195 
	#IPV6_FLOWINFO_SEND
 33

	)

197 
	#IPV6_IPSEC_POLICY
 34

	)

198 
	#IPV6_XFRM_POLICY
 35

	)

220 
	#IPV6_RECVPKTINFO
 49

	)

221 
	#IPV6_PKTINFO
 50

	)

222 
	#IPV6_RECVHOPLIMIT
 51

	)

223 
	#IPV6_HOPLIMIT
 52

	)

224 
	#IPV6_RECVHOPOPTS
 53

	)

225 
	#IPV6_HOPOPTS
 54

	)

226 
	#IPV6_RTHDRDSTOPTS
 55

	)

227 
	#IPV6_RECVRTHDR
 56

	)

228 
	#IPV6_RTHDR
 57

	)

229 
	#IPV6_RECVDSTOPTS
 58

	)

230 
	#IPV6_DSTOPTS
 59

	)

231 
	#IPV6_RECVPATHMTU
 60

	)

232 
	#IPV6_PATHMTU
 61

	)

233 
	#IPV6_DONTFRAG
 62

	)

235 
	#IPV6_USE_MIN_MTU
 63

	)

251 
	#IPV6_RECVTCLASS
 66

	)

252 
	#IPV6_TCLASS
 67

	)

265 
	#IPV6_AUTOFLOWLABEL
 70

	)

267 
	#IPV6_ADDR_PREFERENCES
 72

	)

269 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

270 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

271 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

272 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

273 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

274 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

275 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

278 
	#IPV6_MINHOPCOUNT
 73

	)

280 
	#IPV6_ORIGDSTADDR
 74

	)

281 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

282 
	#IPV6_TRANSPARENT
 75

	)

283 
	#IPV6_UNICAST_IF
 76

	)

	@/usr/include/linux/in_route.h

1 #i‚de‡
_LINUX_IN_ROUTE_H


2 
	#_LINUX_IN_ROUTE_H


	)

6 
	#RTCF_DEAD
 
RTNH_F_DEAD


	)

7 
	#RTCF_ONLINK
 
RTNH_F_ONLINK


	)

10 
	#RTCF_NOPMTUDISC
 
RTM_F_NOPMTUDISC


	)

12 
	#RTCF_NOTIFY
 0x00010000

	)

13 
	#RTCF_DIRECTDST
 0x00020000

	)

14 
	#RTCF_REDIRECTED
 0x00040000

	)

15 
	#RTCF_TPROXY
 0x00080000

	)

17 
	#RTCF_FAST
 0x00200000

	)

18 
	#RTCF_MASQ
 0x00400000

	)

19 
	#RTCF_SNAT
 0x00800000

	)

20 
	#RTCF_DOREDIRECT
 0x01000000

	)

21 
	#RTCF_DIRECTSRC
 0x04000000

	)

22 
	#RTCF_DNAT
 0x08000000

	)

23 
	#RTCF_BROADCAST
 0x10000000

	)

24 
	#RTCF_MULTICAST
 0x20000000

	)

25 
	#RTCF_REJECT
 0x40000000

	)

26 
	#RTCF_LOCAL
 0x80000000

	)

28 
	#RTCF_NAT
 (
RTCF_DNAT
|
RTCF_SNAT
)

	)

30 
	#RT_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

	@/usr/include/linux/inet_diag.h

1 #i‚de‡
_INET_DIAG_H_


2 
	#_INET_DIAG_H_


	)

4 
	~<löux/ty≥s.h
>

7 
	#TCPDIAG_GETSOCK
 18

	)

8 
	#DCCPDIAG_GETSOCK
 19

	)

10 
	#INET_DIAG_GETSOCK_MAX
 24

	)

13 
	söë_düg_sockid
 {

14 
__be16
 
	midüg_•‹t
;

15 
__be16
 
	midüg_dp‹t
;

16 
__be32
 
	midüg_§c
[4];

17 
__be32
 
	midüg_d°
[4];

18 
__u32
 
	midüg_if
;

19 
__u32
 
	midüg_cookõ
[2];

20 
	#INET_DIAG_NOCOOKIE
 (~0U)

	)

25 
	söë_düg_ªq
 {

26 
__u8
 
	midüg_Ámûy
;

27 
__u8
 
	midüg_§c_Àn
;

28 
__u8
 
	midüg_d°_Àn
;

29 
__u8
 
	midüg_ext
;

31 
öë_düg_sockid
 
	mid
;

33 
__u32
 
	midüg_°©es
;

34 
__u32
 
	midüg_dbs
;

37 
	söë_düg_ªq_v2
 {

38 
__u8
 
	msdüg_Ámûy
;

39 
__u8
 
	msdüg_¥Ÿocﬁ
;

40 
__u8
 
	midüg_ext
;

41 
__u8
 
	m∑d
;

42 
__u32
 
	midüg_°©es
;

43 
öë_düg_sockid
 
	mid
;

47 
	mINET_DIAG_REQ_NONE
,

48 
	mINET_DIAG_REQ_BYTECODE
,

51 
	#INET_DIAG_REQ_MAX
 
INET_DIAG_REQ_BYTECODE


	)

59 
	söë_düg_bc_›
 {

60 
	mcode
;

61 
	myes
;

62 
	mno
;

66 
	mINET_DIAG_BC_NOP
,

67 
	mINET_DIAG_BC_JMP
,

68 
	mINET_DIAG_BC_S_GE
,

69 
	mINET_DIAG_BC_S_LE
,

70 
	mINET_DIAG_BC_D_GE
,

71 
	mINET_DIAG_BC_D_LE
,

72 
	mINET_DIAG_BC_AUTO
,

73 
	mINET_DIAG_BC_S_COND
,

74 
	mINET_DIAG_BC_D_COND
,

77 
	söë_düg_ho°c⁄d
 {

78 
__u8
 
	mÁmûy
;

79 
__u8
 
	m¥efix_Àn
;

80 
	mp‹t
;

81 
__be32
 
	maddr
[0];

86 
	söë_düg_msg
 {

87 
__u8
 
	midüg_Ámûy
;

88 
__u8
 
	midüg_°©e
;

89 
__u8
 
	midüg_timî
;

90 
__u8
 
	midüg_ªå™s
;

92 
öë_düg_sockid
 
	mid
;

94 
__u32
 
	midüg_expúes
;

95 
__u32
 
	midüg_rqueue
;

96 
__u32
 
	midüg_wqueue
;

97 
__u32
 
	midüg_uid
;

98 
__u32
 
	midüg_öode
;

104 
	mINET_DIAG_NONE
,

105 
	mINET_DIAG_MEMINFO
,

106 
	mINET_DIAG_INFO
,

107 
	mINET_DIAG_VEGASINFO
,

108 
	mINET_DIAG_CONG
,

109 
	mINET_DIAG_TOS
,

110 
	mINET_DIAG_TCLASS
,

111 
	mINET_DIAG_SKMEMINFO
,

112 
	mINET_DIAG_SHUTDOWN
,

113 
	mINET_DIAG_DCTCPINFO
,

116 
	#INET_DIAG_MAX
 
INET_DIAG_DCTCPINFO


	)

120 
	söë_düg_memöfo
 {

121 
__u32
 
	midüg_rmem
;

122 
__u32
 
	midüg_wmem
;

123 
__u32
 
	midüg_fmem
;

124 
__u32
 
	midüg_tmem
;

129 
	st˝vegas_öfo
 {

130 
__u32
 
	mt˝v_íabÀd
;

131 
__u32
 
	mt˝v_πt˙t
;

132 
__u32
 
	mt˝v_πt
;

133 
__u32
 
	mt˝v_möπt
;

138 
	st˝_d˘˝_öfo
 {

139 
__u16
 
	md˘˝_íabÀd
;

140 
__u16
 
	md˘˝_˚_°©e
;

141 
__u32
 
	md˘˝_Æpha
;

142 
__u32
 
	md˘˝_ab_e˙
;

143 
__u32
 
	md˘˝_ab_tŸ
;

	@/usr/include/linux/ip.h

17 #i‚de‡
_LINUX_IP_H


18 
	#_LINUX_IP_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<asm/byã‹dî.h
>

22 
	#IPTOS_TOS_MASK
 0x1E

	)

23 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

24 
	#IPTOS_LOWDELAY
 0x10

	)

25 
	#IPTOS_THROUGHPUT
 0x08

	)

26 
	#IPTOS_RELIABILITY
 0x04

	)

27 
	#IPTOS_MINCOST
 0x02

	)

29 
	#IPTOS_PREC_MASK
 0xE0

	)

30 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

31 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

32 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

33 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

34 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

35 
	#IPTOS_PREC_FLASH
 0x60

	)

36 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

37 
	#IPTOS_PREC_PRIORITY
 0x20

	)

38 
	#IPTOS_PREC_ROUTINE
 0x00

	)

42 
	#IPOPT_COPY
 0x80

	)

43 
	#IPOPT_CLASS_MASK
 0x60

	)

44 
	#IPOPT_NUMBER_MASK
 0x1f

	)

46 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

47 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

48 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

50 
	#IPOPT_CONTROL
 0x00

	)

51 
	#IPOPT_RESERVED1
 0x20

	)

52 
	#IPOPT_MEASUREMENT
 0x40

	)

53 
	#IPOPT_RESERVED2
 0x60

	)

55 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

56 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

57 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

58 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

59 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

60 
	#IPOPT_CIPSO
 (6 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

61 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

62 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

63 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

64 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

66 
	#IPVERSION
 4

	)

67 
	#MAXTTL
 255

	)

68 
	#IPDEFTTL
 64

	)

70 
	#IPOPT_OPTVAL
 0

	)

71 
	#IPOPT_OLEN
 1

	)

72 
	#IPOPT_OFFSET
 2

	)

73 
	#IPOPT_MINOFF
 4

	)

74 
	#MAX_IPOPTLEN
 40

	)

75 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

76 
	#IPOPT_EOL
 
IPOPT_END


	)

77 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

79 
	#IPOPT_TS_TSONLY
 0

	)

80 
	#IPOPT_TS_TSANDADDR
 1

	)

81 
	#IPOPT_TS_PRESPEC
 3

	)

83 
	#IPV4_BEET_PHMAXLEN
 8

	)

85 
	sùhdr
 {

86 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

87 
__u8
 
	mihl
:4,

88 
	mvîsi⁄
:4;

89 #ñi‡
deföed
 (
__BIG_ENDIAN_BITFIELD
)

90 
__u8
 
	mvîsi⁄
:4,

91 
	mihl
:4;

95 
__u8
 
	mtos
;

96 
__be16
 
	mtŸ_Àn
;

97 
__be16
 
	mid
;

98 
__be16
 
	m‰ag_off
;

99 
__u8
 
	mâl
;

100 
__u8
 
	m¥Ÿocﬁ
;

101 
__sum16
 
	mcheck
;

102 
__be32
 
	mßddr
;

103 
__be32
 
	mdaddr
;

108 
	sù_auth_hdr
 {

109 
__u8
 
	m√xthdr
;

110 
__u8
 
	mhdæí
;

111 
__be16
 
	mª£rved
;

112 
__be32
 
	m•i
;

113 
__be32
 
	m£q_no
;

114 
__u8
 
	mauth_d©a
[0];

117 
	sù_e•_hdr
 {

118 
__be32
 
	m•i
;

119 
__be32
 
	m£q_no
;

120 
__u8
 
	míc_d©a
[0];

123 
	sù_comp_hdr
 {

124 
__u8
 
	m√xthdr
;

125 
__u8
 
	mÊags
;

126 
__be16
 
	m˝i
;

129 
	sù_bìt_phdr
 {

130 
__u8
 
	m√xthdr
;

131 
__u8
 
	mhdæí
;

132 
__u8
 
	m∑dÀn
;

133 
__u8
 
	mª£rved
;

139 
	mIPV4_DEVCONF_FORWARDING
=1,

140 
	mIPV4_DEVCONF_MC_FORWARDING
,

141 
	mIPV4_DEVCONF_PROXY_ARP
,

142 
	mIPV4_DEVCONF_ACCEPT_REDIRECTS
,

143 
	mIPV4_DEVCONF_SECURE_REDIRECTS
,

144 
	mIPV4_DEVCONF_SEND_REDIRECTS
,

145 
	mIPV4_DEVCONF_SHARED_MEDIA
,

146 
	mIPV4_DEVCONF_RP_FILTER
,

147 
	mIPV4_DEVCONF_ACCEPT_SOURCE_ROUTE
,

148 
	mIPV4_DEVCONF_BOOTP_RELAY
,

149 
	mIPV4_DEVCONF_LOG_MARTIANS
,

150 
	mIPV4_DEVCONF_TAG
,

151 
	mIPV4_DEVCONF_ARPFILTER
,

152 
	mIPV4_DEVCONF_MEDIUM_ID
,

153 
	mIPV4_DEVCONF_NOXFRM
,

154 
	mIPV4_DEVCONF_NOPOLICY
,

155 
	mIPV4_DEVCONF_FORCE_IGMP_VERSION
,

156 
	mIPV4_DEVCONF_ARP_ANNOUNCE
,

157 
	mIPV4_DEVCONF_ARP_IGNORE
,

158 
	mIPV4_DEVCONF_PROMOTE_SECONDARIES
,

159 
	mIPV4_DEVCONF_ARP_ACCEPT
,

160 
	mIPV4_DEVCONF_ARP_NOTIFY
,

161 
	mIPV4_DEVCONF_ACCEPT_LOCAL
,

162 
	mIPV4_DEVCONF_SRC_VMARK
,

163 
	mIPV4_DEVCONF_PROXY_ARP_PVLAN
,

164 
	mIPV4_DEVCONF_ROUTE_LOCALNET
,

165 
	mIPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL
,

166 
	mIPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL
,

167 
	m__IPV4_DEVCONF_MAX


170 
	#IPV4_DEVCONF_MAX
 (
__IPV4_DEVCONF_MAX
 - 1)

	)

	@/usr/include/linux/ip6_tunnel.h

1 #i‚de‡
_IP6_TUNNEL_H


2 
	#_IP6_TUNNEL_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#IPV6_TLV_TNL_ENCAP_LIMIT
 4

	)

7 
	#IPV6_DEFAULT_TNL_ENCAP_LIMIT
 4

	)

10 
	#IP6_TNL_F_IGN_ENCAP_LIMIT
 0x1

	)

12 
	#IP6_TNL_F_USE_ORIG_TCLASS
 0x2

	)

14 
	#IP6_TNL_F_USE_ORIG_FLOWLABEL
 0x4

	)

16 
	#IP6_TNL_F_MIP6_DEV
 0x8

	)

18 
	#IP6_TNL_F_RCV_DSCP_COPY
 0x10

	)

20 
	#IP6_TNL_F_USE_ORIG_FWMARK
 0x20

	)

22 
	sù6_äl_∑rm
 {

23 
	m«me
[
IFNAMSIZ
];

24 
	mlök
;

25 
__u8
 
	m¥Ÿo
;

26 
__u8
 
	míˇp_limô
;

27 
__u8
 
	mh›_limô
;

28 
__be32
 
	mÊowöfo
;

29 
__u32
 
	mÊags
;

30 
ö6_addr
 
	mœddr
;

31 
ö6_addr
 
	møddr
;

34 
	sù6_äl_∑rm2
 {

35 
	m«me
[
IFNAMSIZ
];

36 
	mlök
;

37 
__u8
 
	m¥Ÿo
;

38 
__u8
 
	míˇp_limô
;

39 
__u8
 
	mh›_limô
;

40 
__be32
 
	mÊowöfo
;

41 
__u32
 
	mÊags
;

42 
ö6_addr
 
	mœddr
;

43 
ö6_addr
 
	møddr
;

45 
__be16
 
	mi_Êags
;

46 
__be16
 
	mo_Êags
;

47 
__be32
 
	mi_key
;

48 
__be32
 
	mo_key
;

	@/usr/include/linux/ipv6.h

1 #i‚de‡
_IPV6_H


2 
	#_IPV6_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/ö6.h
>

6 
	~<asm/byã‹dî.h
>

10 
	#IPV6_MIN_MTU
 1280

	)

19 
	sö6_pktöfo
 {

20 
ö6_addr
 
	mùi6_addr
;

21 
	mùi6_ifödex
;

24 
	sù6_mtuöfo
 {

25 
sockaddr_ö6
 
	mù6m_addr
;

26 
__u32
 
	mù6m_mtu
;

29 
	sö6_i‰eq
 {

30 
ö6_addr
 
	mi‰6_addr
;

31 
__u32
 
	mi‰6_¥efixÀn
;

32 
	mi‰6_ifödex
;

35 
	#IPV6_SRCRT_STRICT
 0x01

	)

36 
	#IPV6_SRCRT_TYPE_0
 0

	)

37 
	#IPV6_SRCRT_TYPE_2
 2

	)

42 
	sùv6_π_hdr
 {

43 
__u8
 
	m√xthdr
;

44 
__u8
 
	mhdæí
;

45 
__u8
 
	mty≥
;

46 
__u8
 
	m£gmíts_À·
;

55 
	sùv6_›t_hdr
 {

56 
__u8
 
	m√xthdr
;

57 
__u8
 
	mhdæí
;

61 } 
__©åibuã__
((
∑cked
));

63 
	#ùv6_de°›t_hdr
 
ùv6_›t_hdr


	)

64 
	#ùv6_h››t_hdr
 
ùv6_›t_hdr


	)

67 
	#IPV6_OPT_ROUTERALERT_MLD
 0x0000

	)

73 
	sπ0_hdr
 {

74 
ùv6_π_hdr
 
	mπ_hdr
;

75 
__u32
 
	mª£rved
;

76 
ö6_addr
 
	maddr
[0];

78 
	#π0_ty≥
 
π_hdr
.
ty≥


	)

85 
	sπ2_hdr
 {

86 
ùv6_π_hdr
 
	mπ_hdr
;

87 
__u32
 
	mª£rved
;

88 
ö6_addr
 
	maddr
;

90 
	#π2_ty≥
 
π_hdr
.
ty≥


	)

97 
	sùv6_de°›t_hao
 {

98 
__u8
 
	mty≥
;

99 
__u8
 
	mÀngth
;

100 
ö6_addr
 
	maddr
;

101 } 
__©åibuã__
((
∑cked
));

110 
	sùv6hdr
 {

111 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

112 
__u8
 
	m¥i‹ôy
:4,

113 
	mvîsi⁄
:4;

114 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

115 
__u8
 
	mvîsi⁄
:4,

116 
	m¥i‹ôy
:4;

120 
__u8
 
	mÊow_lbl
[3];

122 
__be16
 
	m∑ylﬂd_Àn
;

123 
__u8
 
	m√xthdr
;

124 
__u8
 
	mh›_limô
;

126 
ö6_addr
 
	mßddr
;

127 
ö6_addr
 
	mdaddr
;

133 
	mDEVCONF_FORWARDING
 = 0,

134 
	mDEVCONF_HOPLIMIT
,

135 
	mDEVCONF_MTU6
,

136 
	mDEVCONF_ACCEPT_RA
,

137 
	mDEVCONF_ACCEPT_REDIRECTS
,

138 
	mDEVCONF_AUTOCONF
,

139 
	mDEVCONF_DAD_TRANSMITS
,

140 
	mDEVCONF_RTR_SOLICITS
,

141 
	mDEVCONF_RTR_SOLICIT_INTERVAL
,

142 
	mDEVCONF_RTR_SOLICIT_DELAY
,

143 
	mDEVCONF_USE_TEMPADDR
,

144 
	mDEVCONF_TEMP_VALID_LFT
,

145 
	mDEVCONF_TEMP_PREFERED_LFT
,

146 
	mDEVCONF_REGEN_MAX_RETRY
,

147 
	mDEVCONF_MAX_DESYNC_FACTOR
,

148 
	mDEVCONF_MAX_ADDRESSES
,

149 
	mDEVCONF_FORCE_MLD_VERSION
,

150 
	mDEVCONF_ACCEPT_RA_DEFRTR
,

151 
	mDEVCONF_ACCEPT_RA_PINFO
,

152 
	mDEVCONF_ACCEPT_RA_RTR_PREF
,

153 
	mDEVCONF_RTR_PROBE_INTERVAL
,

154 
	mDEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN
,

155 
	mDEVCONF_PROXY_NDP
,

156 
	mDEVCONF_OPTIMISTIC_DAD
,

157 
	mDEVCONF_ACCEPT_SOURCE_ROUTE
,

158 
	mDEVCONF_MC_FORWARDING
,

159 
	mDEVCONF_DISABLE_IPV6
,

160 
	mDEVCONF_ACCEPT_DAD
,

161 
	mDEVCONF_FORCE_TLLAO
,

162 
	mDEVCONF_NDISC_NOTIFY
,

163 
	mDEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL
,

164 
	mDEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL
,

165 
	mDEVCONF_SUPPRESS_FRAG_NDISC
,

166 
	mDEVCONF_ACCEPT_RA_FROM_LOCAL
,

167 
	mDEVCONF_USE_OPTIMISTIC
,

168 
	mDEVCONF_MAX


	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/l2tp.h

7 #i‚de‡
_LINUX_L2TP_H_


8 
	#_LINUX_L2TP_H_


	)

10 
	~<löux/ty≥s.h
>

11 
	~<löux/sockë.h
>

12 
	~<√töë/ö.h
>

14 
	#IPPROTO_L2TP
 115

	)

22 
	#__SOCK_SIZE__
 16

	)

23 
	ssockaddr_l2çù
 {

25 
__kî√l_ß_Ámûy_t
 
	ml2ç_Ámûy
;

26 
__be16
 
	ml2ç_unu£d
;

27 
ö_addr
 
	ml2ç_addr
;

29 
__u32
 
	ml2ç_c⁄n_id
;

32 
	m__∑d
[(
sockaddr
) -

33 (
__kî√l_ß_Ámûy_t
) -

34 (
__be16
Ë- (
ö_addr
) -

35 (
__u32
)];

44 
	ssockaddr_l2çù6
 {

46 
__kî√l_ß_Ámûy_t
 
	ml2ç_Ámûy
;

47 
__be16
 
	ml2ç_unu£d
;

48 
__be32
 
	ml2ç_Êowöfo
;

49 
ö6_addr
 
	ml2ç_addr
;

50 
__u32
 
	ml2ç_sc›e_id
;

51 
__u32
 
	ml2ç_c⁄n_id
;

74 
	mL2TP_CMD_NOOP
,

75 
	mL2TP_CMD_TUNNEL_CREATE
,

76 
	mL2TP_CMD_TUNNEL_DELETE
,

77 
	mL2TP_CMD_TUNNEL_MODIFY
,

78 
	mL2TP_CMD_TUNNEL_GET
,

79 
	mL2TP_CMD_SESSION_CREATE
,

80 
	mL2TP_CMD_SESSION_DELETE
,

81 
	mL2TP_CMD_SESSION_MODIFY
,

82 
	mL2TP_CMD_SESSION_GET
,

83 
	m__L2TP_CMD_MAX
,

86 
	#L2TP_CMD_MAX
 (
__L2TP_CMD_MAX
 - 1)

	)

92 
	mL2TP_ATTR_NONE
,

93 
	mL2TP_ATTR_PW_TYPE
,

94 
	mL2TP_ATTR_ENCAP_TYPE
,

95 
	mL2TP_ATTR_OFFSET
,

96 
	mL2TP_ATTR_DATA_SEQ
,

97 
	mL2TP_ATTR_L2SPEC_TYPE
,

98 
	mL2TP_ATTR_L2SPEC_LEN
,

99 
	mL2TP_ATTR_PROTO_VERSION
,

100 
	mL2TP_ATTR_IFNAME
,

101 
	mL2TP_ATTR_CONN_ID
,

102 
	mL2TP_ATTR_PEER_CONN_ID
,

103 
	mL2TP_ATTR_SESSION_ID
,

104 
	mL2TP_ATTR_PEER_SESSION_ID
,

105 
	mL2TP_ATTR_UDP_CSUM
,

106 
	mL2TP_ATTR_VLAN_ID
,

107 
	mL2TP_ATTR_COOKIE
,

108 
	mL2TP_ATTR_PEER_COOKIE
,

109 
	mL2TP_ATTR_DEBUG
,

110 
	mL2TP_ATTR_RECV_SEQ
,

111 
	mL2TP_ATTR_SEND_SEQ
,

112 
	mL2TP_ATTR_LNS_MODE
,

113 
	mL2TP_ATTR_USING_IPSEC
,

114 
	mL2TP_ATTR_RECV_TIMEOUT
,

115 
	mL2TP_ATTR_FD
,

116 
	mL2TP_ATTR_IP_SADDR
,

117 
	mL2TP_ATTR_IP_DADDR
,

118 
	mL2TP_ATTR_UDP_SPORT
,

119 
	mL2TP_ATTR_UDP_DPORT
,

120 
	mL2TP_ATTR_MTU
,

121 
	mL2TP_ATTR_MRU
,

122 
	mL2TP_ATTR_STATS
,

123 
	mL2TP_ATTR_IP6_SADDR
,

124 
	mL2TP_ATTR_IP6_DADDR
,

125 
	mL2TP_ATTR_UDP_ZERO_CSUM6_TX
,

126 
	mL2TP_ATTR_UDP_ZERO_CSUM6_RX
,

127 
	m__L2TP_ATTR_MAX
,

130 
	#L2TP_ATTR_MAX
 (
__L2TP_ATTR_MAX
 - 1)

	)

134 
	mL2TP_ATTR_STATS_NONE
,

135 
	mL2TP_ATTR_TX_PACKETS
,

136 
	mL2TP_ATTR_TX_BYTES
,

137 
	mL2TP_ATTR_TX_ERRORS
,

138 
	mL2TP_ATTR_RX_PACKETS
,

139 
	mL2TP_ATTR_RX_BYTES
,

140 
	mL2TP_ATTR_RX_SEQ_DISCARDS
,

141 
	mL2TP_ATTR_RX_OOS_PACKETS
,

142 
	mL2TP_ATTR_RX_ERRORS
,

143 
	m__L2TP_ATTR_STATS_MAX
,

146 
	#L2TP_ATTR_STATS_MAX
 (
__L2TP_ATTR_STATS_MAX
 - 1)

	)

148 
	el2ç_pwty≥
 {

149 
	mL2TP_PWTYPE_NONE
 = 0x0000,

150 
	mL2TP_PWTYPE_ETH_VLAN
 = 0x0004,

151 
	mL2TP_PWTYPE_ETH
 = 0x0005,

152 
	mL2TP_PWTYPE_PPP
 = 0x0007,

153 
	mL2TP_PWTYPE_PPP_AC
 = 0x0008,

154 
	mL2TP_PWTYPE_IP
 = 0x000b,

155 
	m__L2TP_PWTYPE_MAX


158 
	el2ç_l2•ec_ty≥
 {

159 
	mL2TP_L2SPECTYPE_NONE
,

160 
	mL2TP_L2SPECTYPE_DEFAULT
,

163 
	el2ç_íˇp_ty≥
 {

164 
	mL2TP_ENCAPTYPE_UDP
,

165 
	mL2TP_ENCAPTYPE_IP
,

168 
	el2ç_£qmode
 {

169 
	mL2TP_SEQ_NONE
 = 0,

170 
	mL2TP_SEQ_IP
 = 1,

171 
	mL2TP_SEQ_ALL
 = 2,

177 
	#L2TP_GENL_NAME
 "l2ç"

	)

178 
	#L2TP_GENL_VERSION
 0x1

	)

	@/usr/include/linux/libc-compat.h

48 #i‚de‡
_LIBC_COMPAT_H


49 
	#_LIBC_COMPAT_H


	)

52 #i‡
deföed
(
__GLIBC__
)

55 #i‡
deföed
(
_NETINET_IN_H
)

59 
	#__UAPI_DEF_IN6_ADDR
 0

	)

64 #i‡
deföed
(
__USE_MISC
Ë|| deföed (
__USE_GNU
)

65 
	#__UAPI_DEF_IN6_ADDR_ALT
 0

	)

67 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

69 
	#__UAPI_DEF_SOCKADDR_IN6
 0

	)

70 
	#__UAPI_DEF_IPV6_MREQ
 0

	)

71 
	#__UAPI_DEF_IPPROTO_V6
 0

	)

72 
	#__UAPI_DEF_IPV6_OPTIONS
 0

	)

79 
	#__UAPI_DEF_IN6_ADDR
 1

	)

82 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

83 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

84 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

85 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

86 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

91 #i‡
deföed
(
_SYS_XATTR_H
)

92 
	#__UAPI_DEF_XATTR
 0

	)

94 
	#__UAPI_DEF_XATTR
 1

	)

103 
	#__UAPI_DEF_IN6_ADDR
 1

	)

104 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

105 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

106 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

107 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

108 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

111 
	#__UAPI_DEF_XATTR
 1

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/mpls.h

1 #i‚de‡
_MPLS_H


2 
	#_MPLS_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

21 
	sm∂s_œbñ
 {

22 
__be32
 
	míåy
;

25 
	#MPLS_LS_LABEL_MASK
 0xFFFFF000

	)

26 
	#MPLS_LS_LABEL_SHIFT
 12

	)

27 
	#MPLS_LS_TC_MASK
 0x00000E00

	)

28 
	#MPLS_LS_TC_SHIFT
 9

	)

29 
	#MPLS_LS_S_MASK
 0x00000100

	)

30 
	#MPLS_LS_S_SHIFT
 8

	)

31 
	#MPLS_LS_TTL_MASK
 0x000000FF

	)

32 
	#MPLS_LS_TTL_SHIFT
 0

	)

	@/usr/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	mNDA_VLAN
,

24 
	mNDA_PORT
,

25 
	mNDA_VNI
,

26 
	mNDA_IFINDEX
,

27 
	mNDA_MASTER
,

28 
	m__NDA_MAX


31 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

37 
	#NTF_USE
 0x01

	)

38 
	#NTF_SELF
 0x02

	)

39 
	#NTF_MASTER
 0x04

	)

40 
	#NTF_PROXY
 0x08

	)

41 
	#NTF_EXT_LEARNED
 0x10

	)

42 
	#NTF_ROUTER
 0x80

	)

48 
	#NUD_INCOMPLETE
 0x01

	)

49 
	#NUD_REACHABLE
 0x02

	)

50 
	#NUD_STALE
 0x04

	)

51 
	#NUD_DELAY
 0x08

	)

52 
	#NUD_PROBE
 0x10

	)

53 
	#NUD_FAILED
 0x20

	)

56 
	#NUD_NOARP
 0x40

	)

57 
	#NUD_PERMANENT
 0x80

	)

58 
	#NUD_NONE
 0x00

	)

65 
	snda_ˇcheöfo
 {

66 
__u32
 
	mndm_c⁄fúmed
;

67 
__u32
 
	mndm_u£d
;

68 
__u32
 
	mndm_upd©ed
;

69 
__u32
 
	mndm_ªf˙t
;

97 
	sndt_°©s
 {

98 
__u64
 
	mndts_Ælocs
;

99 
__u64
 
	mndts_de°roys
;

100 
__u64
 
	mndts_hash_grows
;

101 
__u64
 
	mndts_ªs_Áûed
;

102 
__u64
 
	mndts_lookups
;

103 
__u64
 
	mndts_hôs
;

104 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

105 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

106 
__u64
 
	mndts_≥riodic_gc_runs
;

107 
__u64
 
	mndts_f‹˚d_gc_runs
;

111 
	mNDTPA_UNSPEC
,

112 
	mNDTPA_IFINDEX
,

113 
	mNDTPA_REFCNT
,

114 
	mNDTPA_REACHABLE_TIME
,

115 
	mNDTPA_BASE_REACHABLE_TIME
,

116 
	mNDTPA_RETRANS_TIME
,

117 
	mNDTPA_GC_STALETIME
,

118 
	mNDTPA_DELAY_PROBE_TIME
,

119 
	mNDTPA_QUEUE_LEN
,

120 
	mNDTPA_APP_PROBES
,

121 
	mNDTPA_UCAST_PROBES
,

122 
	mNDTPA_MCAST_PROBES
,

123 
	mNDTPA_ANYCAST_DELAY
,

124 
	mNDTPA_PROXY_DELAY
,

125 
	mNDTPA_PROXY_QLEN
,

126 
	mNDTPA_LOCKTIME
,

127 
	mNDTPA_QUEUE_LENBYTES
,

128 
	m__NDTPA_MAX


130 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

132 
	sndtmsg
 {

133 
__u8
 
	mndtm_Ámûy
;

134 
__u8
 
	mndtm_∑d1
;

135 
__u16
 
	mndtm_∑d2
;

138 
	sndt_c⁄fig
 {

139 
__u16
 
	mndtc_key_Àn
;

140 
__u16
 
	mndtc_íåy_size
;

141 
__u32
 
	mndtc_íåõs
;

142 
__u32
 
	mndtc_œ°_Êush
;

143 
__u32
 
	mndtc_œ°_ønd
;

144 
__u32
 
	mndtc_hash_∫d
;

145 
__u32
 
	mndtc_hash_mask
;

146 
__u32
 
	mndtc_hash_chaö_gc
;

147 
__u32
 
	mndtc_¥oxy_qÀn
;

151 
	mNDTA_UNSPEC
,

152 
	mNDTA_NAME
,

153 
	mNDTA_THRESH1
,

154 
	mNDTA_THRESH2
,

155 
	mNDTA_THRESH3
,

156 
	mNDTA_CONFIG
,

157 
	mNDTA_PARMS
,

158 
	mNDTA_STATS
,

159 
	mNDTA_GC_INTERVAL
,

160 
	m__NDTA_MAX


162 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@/usr/include/linux/netconf.h

1 #i‚de‡
_LINUX_NETCONF_H_


2 
	#_LINUX_NETCONF_H_


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	s√tc⁄fmsg
 {

8 
__u8
 
	mncm_Ámûy
;

12 
	mNETCONFA_UNSPEC
,

13 
	mNETCONFA_IFINDEX
,

14 
	mNETCONFA_FORWARDING
,

15 
	mNETCONFA_RP_FILTER
,

16 
	mNETCONFA_MC_FORWARDING
,

17 
	mNETCONFA_PROXY_NEIGH
,

18 
	m__NETCONFA_MAX


20 
	#NETCONFA_MAX
 (
__NETCONFA_MAX
 - 1)

	)

22 
	#NETCONFA_IFINDEX_ALL
 -1

	)

23 
	#NETCONFA_IFINDEX_DEFAULT
 -2

	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

37 
	#INIT_NETDEV_GROUP
 0

	)

41 
	#NET_NAME_UNKNOWN
 0

	)

42 
	#NET_NAME_ENUM
 1

	)

43 
	#NET_NAME_PREDICTABLE
 2

	)

44 
	#NET_NAME_USER
 3

	)

45 
	#NET_NAME_RENAMED
 4

	)

49 
	mIF_PORT_UNKNOWN
 = 0,

50 
	mIF_PORT_10BASE2
,

51 
	mIF_PORT_10BASET
,

52 
	mIF_PORT_AUI
,

53 
	mIF_PORT_100BASET
,

54 
	mIF_PORT_100BASETX
,

55 
	mIF_PORT_100BASEFX


59 
	#NET_ADDR_PERM
 0

	)

60 
	#NET_ADDR_RANDOM
 1

	)

61 
	#NET_ADDR_STOLEN
 2

	)

62 
	#NET_ADDR_SET
 3

	)

	@/usr/include/linux/netfilter.h

1 #i‚de‡
__LINUX_NETFILTER_H


2 
	#__LINUX_NETFILTER_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<löux/sys˘l.h
>

10 
	#NF_DROP
 0

	)

11 
	#NF_ACCEPT
 1

	)

12 
	#NF_STOLEN
 2

	)

13 
	#NF_QUEUE
 3

	)

14 
	#NF_REPEAT
 4

	)

15 
	#NF_STOP
 5

	)

16 
	#NF_MAX_VERDICT
 
NF_STOP


	)

21 
	#NF_VERDICT_MASK
 0x000000ff

	)

24 
	#NF_VERDICT_FLAG_QUEUE_BYPASS
 0x00008000

	)

27 
	#NF_VERDICT_QMASK
 0xffff0000

	)

28 
	#NF_VERDICT_QBITS
 16

	)

30 
	#NF_QUEUE_NR
(
x
Ë((((xË<< 16Ë& 
NF_VERDICT_QMASK
Ë| 
NF_QUEUE
)

	)

32 
	#NF_DROP_ERR
(
x
Ë(((-xË<< 16Ë| 
NF_DROP
)

	)

37 
	#NFC_UNKNOWN
 0x4000

	)

38 
	#NFC_ALTERED
 0x8000

	)

41 
	#NF_VERDICT_BITS
 16

	)

43 
	enf_öë_hooks
 {

44 
	mNF_INET_PRE_ROUTING
,

45 
	mNF_INET_LOCAL_IN
,

46 
	mNF_INET_FORWARD
,

47 
	mNF_INET_LOCAL_OUT
,

48 
	mNF_INET_POST_ROUTING
,

49 
	mNF_INET_NUMHOOKS


53 
	mNFPROTO_UNSPEC
 = 0,

54 
	mNFPROTO_INET
 = 1,

55 
	mNFPROTO_IPV4
 = 2,

56 
	mNFPROTO_ARP
 = 3,

57 
	mNFPROTO_BRIDGE
 = 7,

58 
	mNFPROTO_IPV6
 = 10,

59 
	mNFPROTO_DECNET
 = 12,

60 
	mNFPROTO_NUMPROTO
,

63 
	unf_öë_addr
 {

64 
__u32
 
	mÆl
[4];

65 
__be32
 
	mù
;

66 
__be32
 
	mù6
[4];

67 
ö_addr
 
	mö
;

68 
ö6_addr
 
	mö6
;

	@/usr/include/linux/netfilter/ipset/ip_set.h

10 #i‚de‡
_IP_SET_H


11 
	#_IP_SET_H


	)

13 
	~<löux/ty≥s.h
>

16 
	#IPSET_PROTOCOL
 6

	)

19 
	#IPSET_MAX_COMMENT_SIZE
 255

	)

22 
	#IPSET_MAXNAMELEN
 32

	)

25 
	eù£t_cmd
 {

26 
	mIPSET_CMD_NONE
,

27 
	mIPSET_CMD_PROTOCOL
,

28 
	mIPSET_CMD_CREATE
,

29 
	mIPSET_CMD_DESTROY
,

30 
	mIPSET_CMD_FLUSH
,

31 
	mIPSET_CMD_RENAME
,

32 
	mIPSET_CMD_SWAP
,

33 
	mIPSET_CMD_LIST
,

34 
	mIPSET_CMD_SAVE
,

35 
	mIPSET_CMD_ADD
,

36 
	mIPSET_CMD_DEL
,

37 
	mIPSET_CMD_TEST
,

38 
	mIPSET_CMD_HEADER
,

39 
	mIPSET_CMD_TYPE
,

40 
	mIPSET_MSG_MAX
,

43 
	mIPSET_CMD_RESTORE
 = 
IPSET_MSG_MAX
,

44 
	mIPSET_CMD_HELP
,

45 
	mIPSET_CMD_VERSION
,

46 
	mIPSET_CMD_QUIT
,

48 
	mIPSET_CMD_MAX
,

50 
	mIPSET_CMD_COMMIT
 = 
IPSET_CMD_MAX
,

55 
	mIPSET_ATTR_UNSPEC
,

56 
	mIPSET_ATTR_PROTOCOL
,

57 
	mIPSET_ATTR_SETNAME
,

58 
	mIPSET_ATTR_TYPENAME
,

59 
	mIPSET_ATTR_SETNAME2
 = 
IPSET_ATTR_TYPENAME
,

60 
	mIPSET_ATTR_REVISION
,

61 
	mIPSET_ATTR_FAMILY
,

62 
	mIPSET_ATTR_FLAGS
,

63 
	mIPSET_ATTR_DATA
,

64 
	mIPSET_ATTR_ADT
,

65 
	mIPSET_ATTR_LINENO
,

66 
	mIPSET_ATTR_PROTOCOL_MIN
,

67 
	mIPSET_ATTR_REVISION_MIN
 = 
IPSET_ATTR_PROTOCOL_MIN
,

68 
	m__IPSET_ATTR_CMD_MAX
,

70 
	#IPSET_ATTR_CMD_MAX
 (
__IPSET_ATTR_CMD_MAX
 - 1)

	)

74 
	mIPSET_ATTR_IP
 = 
IPSET_ATTR_UNSPEC
 + 1,

75 
	mIPSET_ATTR_IP_FROM
 = 
IPSET_ATTR_IP
,

76 
	mIPSET_ATTR_IP_TO
,

77 
	mIPSET_ATTR_CIDR
,

78 
	mIPSET_ATTR_PORT
,

79 
	mIPSET_ATTR_PORT_FROM
 = 
IPSET_ATTR_PORT
,

80 
	mIPSET_ATTR_PORT_TO
,

81 
	mIPSET_ATTR_TIMEOUT
,

82 
	mIPSET_ATTR_PROTO
,

83 
	mIPSET_ATTR_CADT_FLAGS
,

84 
	mIPSET_ATTR_CADT_LINENO
 = 
IPSET_ATTR_LINENO
,

85 
	mIPSET_ATTR_MARK
,

86 
	mIPSET_ATTR_MARKMASK
,

88 
	mIPSET_ATTR_CADT_MAX
 = 16,

90 
	mIPSET_ATTR_GC
,

91 
	mIPSET_ATTR_HASHSIZE
,

92 
	mIPSET_ATTR_MAXELEM
,

93 
	mIPSET_ATTR_NETMASK
,

94 
	mIPSET_ATTR_PROBES
,

95 
	mIPSET_ATTR_RESIZE
,

96 
	mIPSET_ATTR_SIZE
,

98 
	mIPSET_ATTR_ELEMENTS
,

99 
	mIPSET_ATTR_REFERENCES
,

100 
	mIPSET_ATTR_MEMSIZE
,

102 
	m__IPSET_ATTR_CREATE_MAX
,

104 
	#IPSET_ATTR_CREATE_MAX
 (
__IPSET_ATTR_CREATE_MAX
 - 1)

	)

108 
	mIPSET_ATTR_ETHER
 = 
IPSET_ATTR_CADT_MAX
 + 1,

109 
	mIPSET_ATTR_NAME
,

110 
	mIPSET_ATTR_NAMEREF
,

111 
	mIPSET_ATTR_IP2
,

112 
	mIPSET_ATTR_CIDR2
,

113 
	mIPSET_ATTR_IP2_TO
,

114 
	mIPSET_ATTR_IFACE
,

115 
	mIPSET_ATTR_BYTES
,

116 
	mIPSET_ATTR_PACKETS
,

117 
	mIPSET_ATTR_COMMENT
,

118 
	mIPSET_ATTR_SKBMARK
,

119 
	mIPSET_ATTR_SKBPRIO
,

120 
	mIPSET_ATTR_SKBQUEUE
,

121 
	m__IPSET_ATTR_ADT_MAX
,

123 
	#IPSET_ATTR_ADT_MAX
 (
__IPSET_ATTR_ADT_MAX
 - 1)

	)

127 
	mIPSET_ATTR_IPADDR_IPV4
 = 
IPSET_ATTR_UNSPEC
 + 1,

128 
	mIPSET_ATTR_IPADDR_IPV6
,

129 
	m__IPSET_ATTR_IPADDR_MAX
,

131 
	#IPSET_ATTR_IPADDR_MAX
 (
__IPSET_ATTR_IPADDR_MAX
 - 1)

	)

134 
	eù£t_î∫o
 {

135 
	mIPSET_ERR_PRIVATE
 = 4096,

136 
	mIPSET_ERR_PROTOCOL
,

137 
	mIPSET_ERR_FIND_TYPE
,

138 
	mIPSET_ERR_MAX_SETS
,

139 
	mIPSET_ERR_BUSY
,

140 
	mIPSET_ERR_EXIST_SETNAME2
,

141 
	mIPSET_ERR_TYPE_MISMATCH
,

142 
	mIPSET_ERR_EXIST
,

143 
	mIPSET_ERR_INVALID_CIDR
,

144 
	mIPSET_ERR_INVALID_NETMASK
,

145 
	mIPSET_ERR_INVALID_FAMILY
,

146 
	mIPSET_ERR_TIMEOUT
,

147 
	mIPSET_ERR_REFERENCED
,

148 
	mIPSET_ERR_IPADDR_IPV4
,

149 
	mIPSET_ERR_IPADDR_IPV6
,

150 
	mIPSET_ERR_COUNTER
,

151 
	mIPSET_ERR_COMMENT
,

152 
	mIPSET_ERR_INVALID_MARKMASK
,

153 
	mIPSET_ERR_SKBINFO
,

156 
	mIPSET_ERR_TYPE_SPECIFIC
 = 4352,

160 
	eù£t_cmd_Êags
 {

161 
	mIPSET_FLAG_BIT_EXIST
 = 0,

162 
	mIPSET_FLAG_EXIST
 = (1 << 
IPSET_FLAG_BIT_EXIST
),

163 
	mIPSET_FLAG_BIT_LIST_SETNAME
 = 1,

164 
	mIPSET_FLAG_LIST_SETNAME
 = (1 << 
IPSET_FLAG_BIT_LIST_SETNAME
),

165 
	mIPSET_FLAG_BIT_LIST_HEADER
 = 2,

166 
	mIPSET_FLAG_LIST_HEADER
 = (1 << 
IPSET_FLAG_BIT_LIST_HEADER
),

167 
	mIPSET_FLAG_BIT_SKIP_COUNTER_UPDATE
 = 3,

168 
	mIPSET_FLAG_SKIP_COUNTER_UPDATE
 =

169 (1 << 
IPSET_FLAG_BIT_SKIP_COUNTER_UPDATE
),

170 
	mIPSET_FLAG_BIT_SKIP_SUBCOUNTER_UPDATE
 = 4,

171 
	mIPSET_FLAG_SKIP_SUBCOUNTER_UPDATE
 =

172 (1 << 
IPSET_FLAG_BIT_SKIP_SUBCOUNTER_UPDATE
),

173 
	mIPSET_FLAG_BIT_MATCH_COUNTERS
 = 5,

174 
	mIPSET_FLAG_MATCH_COUNTERS
 = (1 << 
IPSET_FLAG_BIT_MATCH_COUNTERS
),

175 
	mIPSET_FLAG_BIT_RETURN_NOMATCH
 = 7,

176 
	mIPSET_FLAG_RETURN_NOMATCH
 = (1 << 
IPSET_FLAG_BIT_RETURN_NOMATCH
),

177 
	mIPSET_FLAG_BIT_MAP_SKBMARK
 = 8,

178 
	mIPSET_FLAG_MAP_SKBMARK
 = (1 << 
IPSET_FLAG_BIT_MAP_SKBMARK
),

179 
	mIPSET_FLAG_BIT_MAP_SKBPRIO
 = 9,

180 
	mIPSET_FLAG_MAP_SKBPRIO
 = (1 << 
IPSET_FLAG_BIT_MAP_SKBPRIO
),

181 
	mIPSET_FLAG_BIT_MAP_SKBQUEUE
 = 10,

182 
	mIPSET_FLAG_MAP_SKBQUEUE
 = (1 << 
IPSET_FLAG_BIT_MAP_SKBQUEUE
),

183 
	mIPSET_FLAG_CMD_MAX
 = 15,

187 
	eù£t_ˇdt_Êags
 {

188 
	mIPSET_FLAG_BIT_BEFORE
 = 0,

189 
	mIPSET_FLAG_BEFORE
 = (1 << 
IPSET_FLAG_BIT_BEFORE
),

190 
	mIPSET_FLAG_BIT_PHYSDEV
 = 1,

191 
	mIPSET_FLAG_PHYSDEV
 = (1 << 
IPSET_FLAG_BIT_PHYSDEV
),

192 
	mIPSET_FLAG_BIT_NOMATCH
 = 2,

193 
	mIPSET_FLAG_NOMATCH
 = (1 << 
IPSET_FLAG_BIT_NOMATCH
),

194 
	mIPSET_FLAG_BIT_WITH_COUNTERS
 = 3,

195 
	mIPSET_FLAG_WITH_COUNTERS
 = (1 << 
IPSET_FLAG_BIT_WITH_COUNTERS
),

196 
	mIPSET_FLAG_BIT_WITH_COMMENT
 = 4,

197 
	mIPSET_FLAG_WITH_COMMENT
 = (1 << 
IPSET_FLAG_BIT_WITH_COMMENT
),

198 
	mIPSET_FLAG_BIT_WITH_FORCEADD
 = 5,

199 
	mIPSET_FLAG_WITH_FORCEADD
 = (1 << 
IPSET_FLAG_BIT_WITH_FORCEADD
),

200 
	mIPSET_FLAG_BIT_WITH_SKBINFO
 = 6,

201 
	mIPSET_FLAG_WITH_SKBINFO
 = (1 << 
IPSET_FLAG_BIT_WITH_SKBINFO
),

202 
	mIPSET_FLAG_CADT_MAX
 = 15,

206 
	eù£t_¸óã_Êags
 {

207 
	mIPSET_CREATE_FLAG_BIT_FORCEADD
 = 0,

208 
	mIPSET_CREATE_FLAG_FORCEADD
 = (1 << 
IPSET_CREATE_FLAG_BIT_FORCEADD
),

209 
	mIPSET_CREATE_FLAG_BIT_MAX
 = 7,

213 
	eù£t_adt
 {

214 
	mIPSET_ADD
,

215 
	mIPSET_DEL
,

216 
	mIPSET_TEST
,

217 
	mIPSET_ADT_MAX
,

218 
	mIPSET_CREATE
 = 
IPSET_ADT_MAX
,

219 
	mIPSET_CADT_MAX
,

225 
__u16
 
	tù_£t_id_t
;

227 
	#IPSET_INVALID_ID
 65535

	)

229 
	eù_£t_dim
 {

230 
	mIPSET_DIM_ZERO
 = 0,

231 
	mIPSET_DIM_ONE
,

232 
	mIPSET_DIM_TWO
,

233 
	mIPSET_DIM_THREE
,

237 
	mIPSET_DIM_MAX
 = 6,

239 
	mIPSET_BIT_RETURN_NOMATCH
 = 7,

243 
	eù_£t_k›t
 {

244 
	mIPSET_INV_MATCH
 = (1 << 
IPSET_DIM_ZERO
),

245 
	mIPSET_DIM_ONE_SRC
 = (1 << 
IPSET_DIM_ONE
),

246 
	mIPSET_DIM_TWO_SRC
 = (1 << 
IPSET_DIM_TWO
),

247 
	mIPSET_DIM_THREE_SRC
 = (1 << 
IPSET_DIM_THREE
),

248 
	mIPSET_RETURN_NOMATCH
 = (1 << 
IPSET_BIT_RETURN_NOMATCH
),

252 
	mIPSET_COUNTER_NONE
 = 0,

253 
	mIPSET_COUNTER_EQ
,

254 
	mIPSET_COUNTER_NE
,

255 
	mIPSET_COUNTER_LT
,

256 
	mIPSET_COUNTER_GT
,

260 
	sù_£t_cou¡î_m©ch0
 {

261 
__u8
 
	m›
;

262 
__u64
 
	mvÆue
;

265 
	sù_£t_cou¡î_m©ch
 {

266 
__Æig√d_u64
 
	mvÆue
;

267 
__u8
 
	m›
;

272 
	#SO_IP_SET
 83

	)

274 
	uù_£t_«me_ödex
 {

275 
	m«me
[
IPSET_MAXNAMELEN
];

276 
ù_£t_id_t
 
	mödex
;

279 
	#IP_SET_OP_GET_BYNAME
 0x00000006

	)

280 
	sù_£t_ªq_gë_£t
 {

281 
	m›
;

282 
	mvîsi⁄
;

283 
ù_£t_«me_ödex
 
	m£t
;

286 
	#IP_SET_OP_GET_BYINDEX
 0x00000007

	)

289 
	#IP_SET_OP_GET_FNAME
 0x00000008

	)

290 
	sù_£t_ªq_gë_£t_Ámûy
 {

291 
	m›
;

292 
	mvîsi⁄
;

293 
	mÁmûy
;

294 
ù_£t_«me_ödex
 
	m£t
;

297 
	#IP_SET_OP_VERSION
 0x00000100

	)

298 
	sù_£t_ªq_vîsi⁄
 {

299 
	m›
;

300 
	mvîsi⁄
;

	@/usr/include/linux/netfilter/x_tables.h

1 #i‚de‡
_X_TABLES_H


2 
	#_X_TABLES_H


	)

3 
	~<löux/kî√l.h
>

4 
	~<löux/ty≥s.h
>

6 
	#XT_FUNCTION_MAXNAMELEN
 30

	)

7 
	#XT_EXTENSION_MAXNAMELEN
 29

	)

8 
	#XT_TABLE_MAXNAMELEN
 32

	)

10 
	sxt_íåy_m©ch
 {

13 
__u16
 
	mm©ch_size
;

16 
	m«me
[
XT_EXTENSION_MAXNAMELEN
];

17 
__u8
 
	mªvisi⁄
;

18 } 
	mu£r
;

20 
__u16
 
	mm©ch_size
;

23 
xt_m©ch
 *
	mm©ch
;

24 } 
	mkî√l
;

27 
__u16
 
	mm©ch_size
;

28 } 
	mu
;

30 
	md©a
[0];

33 
	sxt_íåy_èrgë
 {

36 
__u16
 
	mèrgë_size
;

39 
	m«me
[
XT_EXTENSION_MAXNAMELEN
];

40 
__u8
 
	mªvisi⁄
;

41 } 
	mu£r
;

43 
__u16
 
	mèrgë_size
;

46 
xt_èrgë
 *
	mèrgë
;

47 } 
	mkî√l
;

50 
__u16
 
	mèrgë_size
;

51 } 
	mu
;

53 
	md©a
[0];

56 
	#XT_TARGET_INIT
(
__«me
, 
__size
) \

58 .
èrgë
.
u
.
u£r
 = { \

59 .
èrgë_size
 = 
	`XT_ALIGN
(
__size
), \

60 .
«me
 = 
__«me
, \

62 }

	)

64 
	sxt_°™d¨d_èrgë
 {

65 
xt_íåy_èrgë
 
	mèrgë
;

66 
	mvîdi˘
;

69 
	sxt_îr‹_èrgë
 {

70 
xt_íåy_èrgë
 
	mèrgë
;

71 
	mîr‹«me
[
XT_FUNCTION_MAXNAMELEN
];

76 
	sxt_gë_ªvisi⁄
 {

77 
	m«me
[
XT_EXTENSION_MAXNAMELEN
];

78 
__u8
 
	mªvisi⁄
;

82 
	#XT_CONTINUE
 0xFFFFFFFF

	)

85 
	#XT_RETURN
 (-
NF_REPEAT
 - 1)

	)

92 
	s_xt_Æign
 {

93 
__u8
 
	mu8
;

94 
__u16
 
	mu16
;

95 
__u32
 
	mu32
;

96 
__u64
 
	mu64
;

99 
	#XT_ALIGN
(
s
Ë
	`__ALIGN_KERNEL
((s), 
	`__Æignof__
(
_xt_Æign
))

	)

102 
	#XT_STANDARD_TARGET
 ""

	)

104 
	#XT_ERROR_TARGET
 "ERROR"

	)

106 
	#SET_COUNTER
(
c
,
b
,
p
Ëdÿ{ (c).
b˙t
 = (b); (c).
p˙t
 = (p); } 0)

	)

107 
	#ADD_COUNTER
(
c
,
b
,
p
Ëdÿ{ (c).
b˙t
 +(b); (c).
p˙t
 +’); } 0)

	)

109 
	sxt_cou¡îs
 {

110 
__u64
 
	mp˙t
, 
	mb˙t
;

114 
	sxt_cou¡îs_öfo
 {

116 
	m«me
[
XT_TABLE_MAXNAMELEN
];

118 
	mnum_cou¡îs
;

121 
xt_cou¡îs
 
	mcou¡îs
[0];

124 
	#XT_INV_PROTO
 0x40

	)

127 
	#XT_MATCH_ITERATE
(
ty≥
, 
e
, 
‚
, 
¨gs
...) \

129 
__i
; \

130 
__ªt
 = 0; \

131 
xt_íåy_m©ch
 *
__m
; \

133 
__i
 = (
ty≥
); \

134 
__i
 < (
e
)->
èrgë_off£t
; \

135 
__i
 +
__m
->
u
.
m©ch_size
) { \

136 
__m
 = (*)
e
 + 
__i
; \

138 
__ªt
 = 
	`‚
(
__m
 , ## 
¨gs
); \

139 i‡(
__ªt
 != 0) \

142 
__ªt
; \

143 })

	)

146 
	#XT_ENTRY_ITERATE_CONTINUE
(
ty≥
, 
íåõs
, 
size
, 
n
, 
‚
, 
¨gs
...) \

148 
__i
, 
__n
; \

149 
__ªt
 = 0; \

150 
ty≥
 *
__íåy
; \

152 
__i
 = 0, 
__n
 = 0; __ò< (
size
); \

153 
__i
 +
__íåy
->
√xt_off£t
, 
__n
++) { \

154 
__íåy
 = (*)(
íåõs
Ë+ 
__i
; \

155 i‡(
__n
 < 
n
) \

158 
__ªt
 = 
	`‚
(
__íåy
 , ## 
¨gs
); \

159 i‡(
__ªt
 != 0) \

162 
__ªt
; \

163 })

	)

166 
	#XT_ENTRY_ITERATE
(
ty≥
, 
íåõs
, 
size
, 
‚
, 
¨gs
...) \

167 
	`XT_ENTRY_ITERATE_CONTINUE
(
ty≥
, 
íåõs
, 
size
, 0, 
‚
, 
¨gs
)

	)

171 
	#xt_íåy_f‹óch
(
pos
, 
ehód
, 
esize
) \

172 (
pos
Ë(
	`ty≥of
’os))(
ehód
); \

173 (
pos
Ë< (
	`ty≥of
’os))((*)(
ehód
Ë+ (
esize
)); \

174 (
pos
Ë(
	`ty≥of
’os))((*)’osË+ (pos)->
√xt_off£t
))

	)

177 
	#xt_em©ch_f‹óch
(
pos
, 
íåy
) \

178 (
pos
Ë(
xt_íåy_m©ch
 *)
íåy
->
ñems
; \

179 (
pos
Ë< (
xt_íåy_m©ch
 *)((*)(
íåy
) + \

180 (
íåy
)->
èrgë_off£t
); \

181 (
pos
Ë(
xt_íåy_m©ch
 *)((*)(pos) + \

182 (
pos
)->
u
.
m©ch_size
))

	)

	@/usr/include/linux/netfilter/xt_set.h

1 #i‚de‡
_XT_SET_H


2 
	#_XT_SET_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√tfûãr/ù£t/ù_£t.h
>

12 
	#IPSET_SRC
 0x01

	)

13 
	#IPSET_DST
 0x02

	)

14 
	#IPSET_MATCH_INV
 0x04

	)

16 
	sxt_£t_öfo_v0
 {

17 
ù_£t_id_t
 
	mödex
;

19 
__u32
 
	mÊags
[
IPSET_DIM_MAX
 + 1];

21 
__u32
 
	m__Êags
[
IPSET_DIM_MAX
];

22 
__u8
 
	mdim
;

23 
__u8
 
	mÊags
;

24 } 
	mcom∑t
;

25 } 
	mu
;

29 
	sxt_£t_öfo_m©ch_v0
 {

30 
xt_£t_öfo_v0
 
	mm©ch_£t
;

33 
	sxt_£t_öfo_èrgë_v0
 {

34 
xt_£t_öfo_v0
 
	madd_£t
;

35 
xt_£t_öfo_v0
 
	mdñ_£t
;

40 
	sxt_£t_öfo
 {

41 
ù_£t_id_t
 
	mödex
;

42 
__u8
 
	mdim
;

43 
__u8
 
	mÊags
;

47 
	sxt_£t_öfo_m©ch_v1
 {

48 
xt_£t_öfo
 
	mm©ch_£t
;

51 
	sxt_£t_öfo_èrgë_v1
 {

52 
xt_£t_öfo
 
	madd_£t
;

53 
xt_£t_öfo
 
	mdñ_£t
;

58 
	sxt_£t_öfo_èrgë_v2
 {

59 
xt_£t_öfo
 
	madd_£t
;

60 
xt_£t_öfo
 
	mdñ_£t
;

61 
__u32
 
	mÊags
;

62 
__u32
 
	mtimeout
;

67 
	sxt_£t_öfo_m©ch_v3
 {

68 
xt_£t_öfo
 
	mm©ch_£t
;

69 
ù_£t_cou¡î_m©ch0
 
	m∑ckës
;

70 
ù_£t_cou¡î_m©ch0
 
	mbyãs
;

71 
__u32
 
	mÊags
;

76 
	sxt_£t_öfo_èrgë_v3
 {

77 
xt_£t_öfo
 
	madd_£t
;

78 
xt_£t_öfo
 
	mdñ_£t
;

79 
xt_£t_öfo
 
	mm≠_£t
;

80 
__u32
 
	mÊags
;

81 
__u32
 
	mtimeout
;

86 
	sxt_£t_öfo_m©ch_v4
 {

87 
xt_£t_öfo
 
	mm©ch_£t
;

88 
ù_£t_cou¡î_m©ch
 
	m∑ckës
;

89 
ù_£t_cou¡î_m©ch
 
	mbyãs
;

90 
__u32
 
	mÊags
;

	@/usr/include/linux/netfilter/xt_tcpudp.h

1 #i‚de‡
_XT_TCPUDP_H


2 
	#_XT_TCPUDP_H


	)

4 
	~<löux/ty≥s.h
>

7 
	sxt_t˝
 {

8 
__u16
 
	m•ts
[2];

9 
__u16
 
	md±s
[2];

10 
__u8
 
	m›ti⁄
;

11 
__u8
 
	mÊg_mask
;

12 
__u8
 
	mÊg_cmp
;

13 
__u8
 
	mövÊags
;

17 
	#XT_TCP_INV_SRCPT
 0x01

	)

18 
	#XT_TCP_INV_DSTPT
 0x02

	)

19 
	#XT_TCP_INV_FLAGS
 0x04

	)

20 
	#XT_TCP_INV_OPTION
 0x08

	)

21 
	#XT_TCP_INV_MASK
 0x0F

	)

24 
	sxt_udp
 {

25 
__u16
 
	m•ts
[2];

26 
__u16
 
	md±s
[2];

27 
__u8
 
	mövÊags
;

31 
	#XT_UDP_INV_SRCPT
 0x01

	)

32 
	#XT_UDP_INV_DSTPT
 0x02

	)

33 
	#XT_UDP_INV_MASK
 0x03

	)

	@/usr/include/linux/netfilter_ipv4.h

4 #i‚de‡
__LINUX_IP_NETFILTER_H


5 
	#__LINUX_IP_NETFILTER_H


	)

8 
	~<löux/√tfûãr.h
>

12 
	~<limôs.h
>

16 
	#NFC_IP_SRC
 0x0001

	)

18 
	#NFC_IP_DST
 0x0002

	)

20 
	#NFC_IP_IF_IN
 0x0004

	)

22 
	#NFC_IP_IF_OUT
 0x0008

	)

24 
	#NFC_IP_TOS
 0x0010

	)

26 
	#NFC_IP_PROTO
 0x0020

	)

28 
	#NFC_IP_OPTIONS
 0x0040

	)

30 
	#NFC_IP_FRAG
 0x0080

	)

34 
	#NFC_IP_TCPFLAGS
 0x0100

	)

36 
	#NFC_IP_SRC_PT
 0x0200

	)

38 
	#NFC_IP_DST_PT
 0x0400

	)

40 
	#NFC_IP_PROTO_UNKNOWN
 0x2000

	)

44 
	#NF_IP_PRE_ROUTING
 0

	)

46 
	#NF_IP_LOCAL_IN
 1

	)

48 
	#NF_IP_FORWARD
 2

	)

50 
	#NF_IP_LOCAL_OUT
 3

	)

52 
	#NF_IP_POST_ROUTING
 4

	)

53 
	#NF_IP_NUMHOOKS
 5

	)

55 
	enf_ù_hook_¥i‹ôõs
 {

56 
	mNF_IP_PRI_FIRST
 = 
INT_MIN
,

57 
	mNF_IP_PRI_CONNTRACK_DEFRAG
 = -400,

58 
	mNF_IP_PRI_RAW
 = -300,

59 
	mNF_IP_PRI_SELINUX_FIRST
 = -225,

60 
	mNF_IP_PRI_CONNTRACK
 = -200,

61 
	mNF_IP_PRI_MANGLE
 = -150,

62 
	mNF_IP_PRI_NAT_DST
 = -100,

63 
	mNF_IP_PRI_FILTER
 = 0,

64 
	mNF_IP_PRI_SECURITY
 = 50,

65 
	mNF_IP_PRI_NAT_SRC
 = 100,

66 
	mNF_IP_PRI_SELINUX_LAST
 = 225,

67 
	mNF_IP_PRI_CONNTRACK_HELPER
 = 300,

68 
	mNF_IP_PRI_CONNTRACK_CONFIRM
 = 
INT_MAX
,

69 
	mNF_IP_PRI_LAST
 = 
INT_MAX
,

76 
	#SO_ORIGINAL_DST
 80

	)

	@/usr/include/linux/netfilter_ipv4/ip_tables.h

15 #i‚de‡
_IPTABLES_H


16 
	#_IPTABLES_H


	)

18 
	~<löux/ty≥s.h
>

20 
	~<löux/√tfûãr_ùv4.h
>

22 
	~<löux/√tfûãr/x_èbÀs.h
>

24 
	#IPT_FUNCTION_MAXNAMELEN
 
XT_FUNCTION_MAXNAMELEN


	)

25 
	#IPT_TABLE_MAXNAMELEN
 
XT_TABLE_MAXNAMELEN


	)

26 
	#ùt_m©ch
 
xt_m©ch


	)

27 
	#ùt_èrgë
 
xt_èrgë


	)

28 
	#ùt_èbÀ
 
xt_èbÀ


	)

29 
	#ùt_gë_ªvisi⁄
 
xt_gë_ªvisi⁄


	)

30 
	#ùt_íåy_m©ch
 
xt_íåy_m©ch


	)

31 
	#ùt_íåy_èrgë
 
xt_íåy_èrgë


	)

32 
	#ùt_°™d¨d_èrgë
 
xt_°™d¨d_èrgë


	)

33 
	#ùt_îr‹_èrgë
 
xt_îr‹_èrgë


	)

34 
	#ùt_cou¡îs
 
xt_cou¡îs


	)

35 
	#IPT_CONTINUE
 
XT_CONTINUE


	)

36 
	#IPT_RETURN
 
XT_RETURN


	)

39 
	~<löux/√tfûãr/xt_t˝udp.h
>

40 
	#ùt_udp
 
xt_udp


	)

41 
	#ùt_t˝
 
xt_t˝


	)

42 
	#IPT_TCP_INV_SRCPT
 
XT_TCP_INV_SRCPT


	)

43 
	#IPT_TCP_INV_DSTPT
 
XT_TCP_INV_DSTPT


	)

44 
	#IPT_TCP_INV_FLAGS
 
XT_TCP_INV_FLAGS


	)

45 
	#IPT_TCP_INV_OPTION
 
XT_TCP_INV_OPTION


	)

46 
	#IPT_TCP_INV_MASK
 
XT_TCP_INV_MASK


	)

47 
	#IPT_UDP_INV_SRCPT
 
XT_UDP_INV_SRCPT


	)

48 
	#IPT_UDP_INV_DSTPT
 
XT_UDP_INV_DSTPT


	)

49 
	#IPT_UDP_INV_MASK
 
XT_UDP_INV_MASK


	)

52 
	#ùt_cou¡îs_öfo
 
xt_cou¡îs_öfo


	)

54 
	#IPT_STANDARD_TARGET
 
XT_STANDARD_TARGET


	)

56 
	#IPT_ERROR_TARGET
 
XT_ERROR_TARGET


	)

59 
	#IPT_MATCH_ITERATE
(
e
, 
‚
, 
¨gs
...) \

60 
	`XT_MATCH_ITERATE
(
ùt_íåy
, 
e
, 
‚
, ## 
¨gs
)

	)

63 
	#IPT_ENTRY_ITERATE
(
íåõs
, 
size
, 
‚
, 
¨gs
...) \

64 
	`XT_ENTRY_ITERATE
(
ùt_íåy
, 
íåõs
, 
size
, 
‚
, ## 
¨gs
)

	)

67 
	sùt_ù
 {

69 
ö_addr
 
	m§c
, 
	md°
;

71 
ö_addr
 
	msmsk
, 
	mdmsk
;

72 
	möiÁ˚
[
IFNAMSIZ
], 
	moutiÁ˚
[IFNAMSIZ];

73 
	möiÁ˚_mask
[
IFNAMSIZ
], 
	moutiÁ˚_mask
[IFNAMSIZ];

76 
__u16
 
	m¥Ÿo
;

79 
__u8
 
	mÊags
;

81 
__u8
 
	mövÊags
;

85 
	#IPT_F_FRAG
 0x01

	)

86 
	#IPT_F_GOTO
 0x02

	)

87 
	#IPT_F_MASK
 0x03

	)

90 
	#IPT_INV_VIA_IN
 0x01

	)

91 
	#IPT_INV_VIA_OUT
 0x02

	)

92 
	#IPT_INV_TOS
 0x04

	)

93 
	#IPT_INV_SRCIP
 0x08

	)

94 
	#IPT_INV_DSTIP
 0x10

	)

95 
	#IPT_INV_FRAG
 0x20

	)

96 
	#IPT_INV_PROTO
 
XT_INV_PROTO


	)

97 
	#IPT_INV_MASK
 0x7F

	)

102 
	sùt_íåy
 {

103 
ùt_ù
 
	mù
;

106 
	mnfˇche
;

109 
__u16
 
	mèrgë_off£t
;

111 
__u16
 
	m√xt_off£t
;

114 
	mcome‰om
;

117 
xt_cou¡îs
 
	mcou¡îs
;

120 
	mñems
[0];

130 
	#IPT_BASE_CTL
 64

	)

132 
	#IPT_SO_SET_REPLACE
 (
IPT_BASE_CTL
)

	)

133 
	#IPT_SO_SET_ADD_COUNTERS
 (
IPT_BASE_CTL
 + 1)

	)

134 
	#IPT_SO_SET_MAX
 
IPT_SO_SET_ADD_COUNTERS


	)

136 
	#IPT_SO_GET_INFO
 (
IPT_BASE_CTL
)

	)

137 
	#IPT_SO_GET_ENTRIES
 (
IPT_BASE_CTL
 + 1)

	)

138 
	#IPT_SO_GET_REVISION_MATCH
 (
IPT_BASE_CTL
 + 2)

	)

139 
	#IPT_SO_GET_REVISION_TARGET
 (
IPT_BASE_CTL
 + 3)

	)

140 
	#IPT_SO_GET_MAX
 
IPT_SO_GET_REVISION_TARGET


	)

143 
	sùt_icmp
 {

144 
__u8
 
	mty≥
;

145 
__u8
 
	mcode
[2];

146 
__u8
 
	mövÊags
;

150 
	#IPT_ICMP_INV
 0x01

	)

153 
	sùt_gëöfo
 {

155 
	m«me
[
XT_TABLE_MAXNAMELEN
];

159 
	mvÆid_hooks
;

162 
	mhook_íåy
[
NF_INET_NUMHOOKS
];

165 
	mundîÊow
[
NF_INET_NUMHOOKS
];

168 
	mnum_íåõs
;

171 
	msize
;

175 
	sùt_ª∂a˚
 {

177 
	m«me
[
XT_TABLE_MAXNAMELEN
];

181 
	mvÆid_hooks
;

184 
	mnum_íåõs
;

187 
	msize
;

190 
	mhook_íåy
[
NF_INET_NUMHOOKS
];

193 
	mundîÊow
[
NF_INET_NUMHOOKS
];

197 
	mnum_cou¡îs
;

199 
xt_cou¡îs
 *
	mcou¡îs
;

202 
ùt_íåy
 
	míåõs
[0];

206 
	sùt_gë_íåõs
 {

208 
	m«me
[
XT_TABLE_MAXNAMELEN
];

211 
	msize
;

214 
ùt_íåy
 
	míåyèbÀ
[0];

218 
__ölöe__
 
xt_íåy_èrgë
 *

219 
	$ùt_gë_èrgë
(
ùt_íåy
 *
e
)

221  (*)
e
 +É->
èrgë_off£t
;

222 
	}
}

	@/usr/include/linux/netfilter_ipv6/ip6_tables.h

15 #i‚de‡
_IP6_TABLES_H


16 
	#_IP6_TABLES_H


	)

18 
	~<löux/ty≥s.h
>

20 
	~<löux/√tfûãr_ùv6.h
>

22 
	~<löux/√tfûãr/x_èbÀs.h
>

24 
	#IP6T_FUNCTION_MAXNAMELEN
 
XT_FUNCTION_MAXNAMELEN


	)

25 
	#IP6T_TABLE_MAXNAMELEN
 
XT_TABLE_MAXNAMELEN


	)

26 
	#ù6t_m©ch
 
xt_m©ch


	)

27 
	#ù6t_èrgë
 
xt_èrgë


	)

28 
	#ù6t_èbÀ
 
xt_èbÀ


	)

29 
	#ù6t_gë_ªvisi⁄
 
xt_gë_ªvisi⁄


	)

30 
	#ù6t_íåy_m©ch
 
xt_íåy_m©ch


	)

31 
	#ù6t_íåy_èrgë
 
xt_íåy_èrgë


	)

32 
	#ù6t_°™d¨d_èrgë
 
xt_°™d¨d_èrgë


	)

33 
	#ù6t_îr‹_èrgë
 
xt_îr‹_èrgë


	)

34 
	#ù6t_cou¡îs
 
xt_cou¡îs


	)

35 
	#IP6T_CONTINUE
 
XT_CONTINUE


	)

36 
	#IP6T_RETURN
 
XT_RETURN


	)

39 
	~<löux/√tfûãr/xt_t˝udp.h
>

40 
	#ù6t_t˝
 
xt_t˝


	)

41 
	#ù6t_udp
 
xt_udp


	)

42 
	#IP6T_TCP_INV_SRCPT
 
XT_TCP_INV_SRCPT


	)

43 
	#IP6T_TCP_INV_DSTPT
 
XT_TCP_INV_DSTPT


	)

44 
	#IP6T_TCP_INV_FLAGS
 
XT_TCP_INV_FLAGS


	)

45 
	#IP6T_TCP_INV_OPTION
 
XT_TCP_INV_OPTION


	)

46 
	#IP6T_TCP_INV_MASK
 
XT_TCP_INV_MASK


	)

47 
	#IP6T_UDP_INV_SRCPT
 
XT_UDP_INV_SRCPT


	)

48 
	#IP6T_UDP_INV_DSTPT
 
XT_UDP_INV_DSTPT


	)

49 
	#IP6T_UDP_INV_MASK
 
XT_UDP_INV_MASK


	)

51 
	#ù6t_cou¡îs_öfo
 
xt_cou¡îs_öfo


	)

52 
	#IP6T_STANDARD_TARGET
 
XT_STANDARD_TARGET


	)

53 
	#IP6T_ERROR_TARGET
 
XT_ERROR_TARGET


	)

54 
	#IP6T_MATCH_ITERATE
(
e
, 
‚
, 
¨gs
...) \

55 
	`XT_MATCH_ITERATE
(
ù6t_íåy
, 
e
, 
‚
, ## 
¨gs
)

	)

56 
	#IP6T_ENTRY_ITERATE
(
íåõs
, 
size
, 
‚
, 
¨gs
...) \

57 
	`XT_ENTRY_ITERATE
(
ù6t_íåy
, 
íåõs
, 
size
, 
‚
, ## 
¨gs
)

	)

60 
	sù6t_ù6
 {

62 
ö6_addr
 
	m§c
, 
	md°
;

64 
ö6_addr
 
	msmsk
, 
	mdmsk
;

65 
	möiÁ˚
[
IFNAMSIZ
], 
	moutiÁ˚
[IFNAMSIZ];

66 
	möiÁ˚_mask
[
IFNAMSIZ
], 
	moutiÁ˚_mask
[IFNAMSIZ];

76 
__u16
 
	m¥Ÿo
;

78 
__u8
 
	mtos
;

81 
__u8
 
	mÊags
;

83 
__u8
 
	mövÊags
;

87 
	#IP6T_F_PROTO
 0x01

	)

89 
	#IP6T_F_TOS
 0x02

	)

90 
	#IP6T_F_GOTO
 0x04

	)

91 
	#IP6T_F_MASK
 0x07

	)

94 
	#IP6T_INV_VIA_IN
 0x01

	)

95 
	#IP6T_INV_VIA_OUT
 0x02

	)

96 
	#IP6T_INV_TOS
 0x04

	)

97 
	#IP6T_INV_SRCIP
 0x08

	)

98 
	#IP6T_INV_DSTIP
 0x10

	)

99 
	#IP6T_INV_FRAG
 0x20

	)

100 
	#IP6T_INV_PROTO
 
XT_INV_PROTO


	)

101 
	#IP6T_INV_MASK
 0x7F

	)

106 
	sù6t_íåy
 {

107 
ù6t_ù6
 
	mùv6
;

110 
	mnfˇche
;

113 
__u16
 
	mèrgë_off£t
;

115 
__u16
 
	m√xt_off£t
;

118 
	mcome‰om
;

121 
xt_cou¡îs
 
	mcou¡îs
;

124 
	mñems
[0];

128 
	sù6t_°™d¨d
 {

129 
ù6t_íåy
 
	míåy
;

130 
xt_°™d¨d_èrgë
 
	mèrgë
;

133 
	sù6t_îr‹
 {

134 
ù6t_íåy
 
	míåy
;

135 
xt_îr‹_èrgë
 
	mèrgë
;

138 
	#IP6T_ENTRY_INIT
(
__size
) \

140 .
èrgë_off£t
 = (
ù6t_íåy
), \

141 .
√xt_off£t
 = (
__size
), \

142 }

	)

144 
	#IP6T_STANDARD_INIT
(
__vîdi˘
) \

146 .
íåy
 = 
	`IP6T_ENTRY_INIT
((
ù6t_°™d¨d
)), \

147 .
èrgë
 = 
	`XT_TARGET_INIT
(
XT_STANDARD_TARGET
, \

148 (
xt_°™d¨d_èrgë
)), \

149 .
èrgë
.
vîdi˘
 = -(
__vîdi˘
) - 1, \

150 }

	)

152 
	#IP6T_ERROR_INIT
 \

154 .
íåy
 = 
	`IP6T_ENTRY_INIT
((
ù6t_îr‹
)), \

155 .
èrgë
 = 
	`XT_TARGET_INIT
(
XT_ERROR_TARGET
, \

156 (
xt_îr‹_èrgë
)), \

157 .
èrgë
.
îr‹«me
 = "ERROR", \

158 }

	)

167 
	#IP6T_BASE_CTL
 64

	)

169 
	#IP6T_SO_SET_REPLACE
 (
IP6T_BASE_CTL
)

	)

170 
	#IP6T_SO_SET_ADD_COUNTERS
 (
IP6T_BASE_CTL
 + 1)

	)

171 
	#IP6T_SO_SET_MAX
 
IP6T_SO_SET_ADD_COUNTERS


	)

173 
	#IP6T_SO_GET_INFO
 (
IP6T_BASE_CTL
)

	)

174 
	#IP6T_SO_GET_ENTRIES
 (
IP6T_BASE_CTL
 + 1)

	)

175 
	#IP6T_SO_GET_REVISION_MATCH
 (
IP6T_BASE_CTL
 + 4)

	)

176 
	#IP6T_SO_GET_REVISION_TARGET
 (
IP6T_BASE_CTL
 + 5)

	)

177 
	#IP6T_SO_GET_MAX
 
IP6T_SO_GET_REVISION_TARGET


	)

180 
	#IP6T_SO_ORIGINAL_DST
 80

	)

183 
	sù6t_icmp
 {

184 
__u8
 
	mty≥
;

185 
__u8
 
	mcode
[2];

186 
__u8
 
	mövÊags
;

190 
	#IP6T_ICMP_INV
 0x01

	)

193 
	sù6t_gëöfo
 {

195 
	m«me
[
XT_TABLE_MAXNAMELEN
];

199 
	mvÆid_hooks
;

202 
	mhook_íåy
[
NF_INET_NUMHOOKS
];

205 
	mundîÊow
[
NF_INET_NUMHOOKS
];

208 
	mnum_íåõs
;

211 
	msize
;

215 
	sù6t_ª∂a˚
 {

217 
	m«me
[
XT_TABLE_MAXNAMELEN
];

221 
	mvÆid_hooks
;

224 
	mnum_íåõs
;

227 
	msize
;

230 
	mhook_íåy
[
NF_INET_NUMHOOKS
];

233 
	mundîÊow
[
NF_INET_NUMHOOKS
];

237 
	mnum_cou¡îs
;

239 
xt_cou¡îs
 *
	mcou¡îs
;

242 
ù6t_íåy
 
	míåõs
[0];

246 
	sù6t_gë_íåõs
 {

248 
	m«me
[
XT_TABLE_MAXNAMELEN
];

251 
	msize
;

254 
ù6t_íåy
 
	míåyèbÀ
[0];

258 
__ölöe__
 
xt_íåy_èrgë
 *

259 
	$ù6t_gë_èrgë
(
ù6t_íåy
 *
e
)

261  (*)
e
 +É->
èrgë_off£t
;

262 
	}
}

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

59 
	#NLM_F_ROOT
 0x100

	)

60 
	#NLM_F_MATCH
 0x200

	)

61 
	#NLM_F_ATOMIC
 0x400

	)

62 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

65 
	#NLM_F_REPLACE
 0x100

	)

66 
	#NLM_F_EXCL
 0x200

	)

67 
	#NLM_F_CREATE
 0x400

	)

68 
	#NLM_F_APPEND
 0x800

	)

79 
	#NLMSG_ALIGNTO
 4U

	)

80 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

81 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

82 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

83 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

84 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

85 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

86 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

87 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

88 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

90 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

92 
	#NLMSG_NOOP
 0x1

	)

93 
	#NLMSG_ERROR
 0x2

	)

94 
	#NLMSG_DONE
 0x3

	)

95 
	#NLMSG_OVERRUN
 0x4

	)

97 
	#NLMSG_MIN_TYPE
 0x10

	)

99 
	s∆msgîr
 {

100 
	mîr‹
;

101 
∆msghdr
 
	mmsg
;

104 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

105 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

106 
	#NETLINK_PKTINFO
 3

	)

107 
	#NETLINK_BROADCAST_ERROR
 4

	)

108 
	#NETLINK_NO_ENOBUFS
 5

	)

109 
	#NETLINK_RX_RING
 6

	)

110 
	#NETLINK_TX_RING
 7

	)

112 
	s∆_pktöfo
 {

113 
__u32
 
	mgroup
;

116 
	s∆_mm≠_ªq
 {

117 
	mnm_block_size
;

118 
	mnm_block_ƒ
;

119 
	mnm_‰ame_size
;

120 
	mnm_‰ame_ƒ
;

123 
	s∆_mm≠_hdr
 {

124 
	mnm_°©us
;

125 
	mnm_Àn
;

126 
__u32
 
	mnm_group
;

128 
__u32
 
	mnm_pid
;

129 
__u32
 
	mnm_uid
;

130 
__u32
 
	mnm_gid
;

133 
	e∆_mm≠_°©us
 {

134 
	mNL_MMAP_STATUS_UNUSED
,

135 
	mNL_MMAP_STATUS_RESERVED
,

136 
	mNL_MMAP_STATUS_VALID
,

137 
	mNL_MMAP_STATUS_COPY
,

138 
	mNL_MMAP_STATUS_SKIP
,

141 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

142 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

143 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

145 
	#NET_MAJOR
 36

	)

148 
	mNETLINK_UNCONNECTED
 = 0,

149 
	mNETLINK_CONNECTED
,

161 
	s∆©å
 {

162 
__u16
 
	m∆a_Àn
;

163 
__u16
 
	m∆a_ty≥
;

176 
	#NLA_F_NESTED
 (1 << 15)

	)

177 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

178 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

180 
	#NLA_ALIGNTO
 4

	)

181 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

182 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/netlink_diag.h

1 #i‚de‡
__NETLINK_DIAG_H__


2 
	#__NETLINK_DIAG_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	s√éök_düg_ªq
 {

7 
__u8
 
	msdüg_Ámûy
;

8 
__u8
 
	msdüg_¥Ÿocﬁ
;

9 
__u16
 
	m∑d
;

10 
__u32
 
	mndüg_öo
;

11 
__u32
 
	mndüg_show
;

12 
__u32
 
	mndüg_cookõ
[2];

15 
	s√éök_düg_msg
 {

16 
__u8
 
	mndüg_Ámûy
;

17 
__u8
 
	mndüg_ty≥
;

18 
__u8
 
	mndüg_¥Ÿocﬁ
;

19 
__u8
 
	mndüg_°©e
;

21 
__u32
 
	mndüg_p‹tid
;

22 
__u32
 
	mndüg_d°_p‹tid
;

23 
__u32
 
	mndüg_d°_group
;

24 
__u32
 
	mndüg_öo
;

25 
__u32
 
	mndüg_cookõ
[2];

28 
	s√éök_düg_rög
 {

29 
__u32
 
	mndr_block_size
;

30 
__u32
 
	mndr_block_ƒ
;

31 
__u32
 
	mndr_‰ame_size
;

32 
__u32
 
	mndr_‰ame_ƒ
;

37 
	mNETLINK_DIAG_MEMINFO
,

38 
	mNETLINK_DIAG_GROUPS
,

39 
	mNETLINK_DIAG_RX_RING
,

40 
	mNETLINK_DIAG_TX_RING
,

42 
	m__NETLINK_DIAG_MAX
,

45 
	#NETLINK_DIAG_MAX
 (
__NETLINK_DIAG_MAX
 - 1)

	)

47 
	#NDIAG_PROTO_ALL
 ((
__u8
Ë~0)

	)

49 
	#NDIAG_SHOW_MEMINFO
 0x00000001

	)

50 
	#NDIAG_SHOW_GROUPS
 0x00000002

	)

51 
	#NDIAG_SHOW_RING_CFG
 0x00000004

	)

	@/usr/include/linux/packet_diag.h

1 #i‚de‡
__PACKET_DIAG_H__


2 
	#__PACKET_DIAG_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	s∑ckë_düg_ªq
 {

7 
__u8
 
	msdüg_Ámûy
;

8 
__u8
 
	msdüg_¥Ÿocﬁ
;

9 
__u16
 
	m∑d
;

10 
__u32
 
	mpdüg_öo
;

11 
__u32
 
	mpdüg_show
;

12 
__u32
 
	mpdüg_cookõ
[2];

15 
	#PACKET_SHOW_INFO
 0x00000001

	)

16 
	#PACKET_SHOW_MCLIST
 0x00000002

	)

17 
	#PACKET_SHOW_RING_CFG
 0x00000004

	)

18 
	#PACKET_SHOW_FANOUT
 0x00000008

	)

19 
	#PACKET_SHOW_MEMINFO
 0x00000010

	)

20 
	#PACKET_SHOW_FILTER
 0x00000020

	)

22 
	s∑ckë_düg_msg
 {

23 
__u8
 
	mpdüg_Ámûy
;

24 
__u8
 
	mpdüg_ty≥
;

25 
__u16
 
	mpdüg_num
;

27 
__u32
 
	mpdüg_öo
;

28 
__u32
 
	mpdüg_cookõ
[2];

33 
	mPACKET_DIAG_INFO
,

34 
	mPACKET_DIAG_MCLIST
,

35 
	mPACKET_DIAG_RX_RING
,

36 
	mPACKET_DIAG_TX_RING
,

37 
	mPACKET_DIAG_FANOUT
,

38 
	mPACKET_DIAG_UID
,

39 
	mPACKET_DIAG_MEMINFO
,

40 
	mPACKET_DIAG_FILTER
,

42 
	m__PACKET_DIAG_MAX
,

45 
	#PACKET_DIAG_MAX
 (
__PACKET_DIAG_MAX
 - 1)

	)

47 
	s∑ckë_düg_öfo
 {

48 
__u32
 
	mpdi_ödex
;

49 
__u32
 
	mpdi_vîsi⁄
;

50 
__u32
 
	mpdi_ª£rve
;

51 
__u32
 
	mpdi_c›y_thªsh
;

52 
__u32
 
	mpdi_t°amp
;

53 
__u32
 
	mpdi_Êags
;

55 
	#PDI_RUNNING
 0x1

	)

56 
	#PDI_AUXDATA
 0x2

	)

57 
	#PDI_ORIGDEV
 0x4

	)

58 
	#PDI_VNETHDR
 0x8

	)

59 
	#PDI_LOSS
 0x10

	)

62 
	s∑ckë_düg_m˛i°
 {

63 
__u32
 
	mpdmc_ödex
;

64 
__u32
 
	mpdmc_cou¡
;

65 
__u16
 
	mpdmc_ty≥
;

66 
__u16
 
	mpdmc_Æí
;

67 
__u8
 
	mpdmc_addr
[
MAX_ADDR_LEN
];

70 
	s∑ckë_düg_rög
 {

71 
__u32
 
	mpdr_block_size
;

72 
__u32
 
	mpdr_block_ƒ
;

73 
__u32
 
	mpdr_‰ame_size
;

74 
__u32
 
	mpdr_‰ame_ƒ
;

75 
__u32
 
	mpdr_ªtúe_tmo
;

76 
__u32
 
	mpdr_sizeof_¥iv
;

77 
__u32
 
	mpdr_„©uªs
;

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/pkt_cls.h

1 #i‚de‡
__LINUX_PKT_CLS_H


2 
	#__LINUX_PKT_CLS_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_sched.h
>

10 
	#_TC_MAKE32
(
x
Ë((x))

	)

12 
	#_TC_MAKEMASK1
(
n
Ë(
	`_TC_MAKE32
(1Ë<< _TC_MAKE32“))

	)

13 
	#_TC_MAKEMASK
(
v
,
n
Ë(
	`_TC_MAKE32
((_TC_MAKE32(1)<<(v))-1Ë<< _TC_MAKE32“))

	)

14 
	#_TC_MAKEVALUE
(
v
,
n
Ë(
	`_TC_MAKE32
(vË<< _TC_MAKE32“))

	)

15 
	#_TC_GETVALUE
(
v
,
n
,
m
Ë((
	`_TC_MAKE32
(vË& _TC_MAKE32(m)Ë>> _TC_MAKE32“))

	)

38 
	#TC_MUNGED
 
	`_TC_MAKEMASK1
(0)

	)

39 
	#SET_TC_MUNGED
(
v
Ë–
TC_MUNGED
 | (v & ~TC_MUNGED))

	)

40 
	#CLR_TC_MUNGED
(
v
Ë–v & ~
TC_MUNGED
)

	)

42 
	#TC_OK2MUNGE
 
	`_TC_MAKEMASK1
(1)

	)

43 
	#SET_TC_OK2MUNGE
(
v
Ë–
TC_OK2MUNGE
 | (v & ~TC_OK2MUNGE))

	)

44 
	#CLR_TC_OK2MUNGE
(
v
Ë–v & ~
TC_OK2MUNGE
)

	)

46 
	#S_TC_VERD
 
	`_TC_MAKE32
(2)

	)

47 
	#M_TC_VERD
 
	`_TC_MAKEMASK
(4,
S_TC_VERD
)

	)

48 
	#G_TC_VERD
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_VERD
,
M_TC_VERD
)

	)

49 
	#V_TC_VERD
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_VERD
)

	)

50 
	#SET_TC_VERD
(
v
,
n
Ë((
	`V_TC_VERD
“)Ë| (v & ~
M_TC_VERD
))

	)

52 
	#S_TC_FROM
 
	`_TC_MAKE32
(6)

	)

53 
	#M_TC_FROM
 
	`_TC_MAKEMASK
(2,
S_TC_FROM
)

	)

54 
	#G_TC_FROM
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_FROM
,
M_TC_FROM
)

	)

55 
	#V_TC_FROM
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_FROM
)

	)

56 
	#SET_TC_FROM
(
v
,
n
Ë((
	`V_TC_FROM
“)Ë| (v & ~
M_TC_FROM
))

	)

57 
	#AT_STACK
 0x0

	)

58 
	#AT_INGRESS
 0x1

	)

59 
	#AT_EGRESS
 0x2

	)

61 
	#TC_NCLS
 
	`_TC_MAKEMASK1
(8)

	)

62 
	#SET_TC_NCLS
(
v
Ë–
TC_NCLS
 | (v & ~TC_NCLS))

	)

63 
	#CLR_TC_NCLS
(
v
Ë–v & ~
TC_NCLS
)

	)

65 
	#S_TC_RTTL
 
	`_TC_MAKE32
(9)

	)

66 
	#M_TC_RTTL
 
	`_TC_MAKEMASK
(3,
S_TC_RTTL
)

	)

67 
	#G_TC_RTTL
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_RTTL
,
M_TC_RTTL
)

	)

68 
	#V_TC_RTTL
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_RTTL
)

	)

69 
	#SET_TC_RTTL
(
v
,
n
Ë((
	`V_TC_RTTL
“)Ë| (v & ~
M_TC_RTTL
))

	)

71 
	#S_TC_AT
 
	`_TC_MAKE32
(12)

	)

72 
	#M_TC_AT
 
	`_TC_MAKEMASK
(2,
S_TC_AT
)

	)

73 
	#G_TC_AT
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_AT
,
M_TC_AT
)

	)

74 
	#V_TC_AT
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_AT
)

	)

75 
	#SET_TC_AT
(
v
,
n
Ë((
	`V_TC_AT
“)Ë| (v & ~
M_TC_AT
))

	)

79 
	mTCA_ACT_UNSPEC
,

80 
	mTCA_ACT_KIND
,

81 
	mTCA_ACT_OPTIONS
,

82 
	mTCA_ACT_INDEX
,

83 
	mTCA_ACT_STATS
,

84 
	m__TCA_ACT_MAX


87 
	#TCA_ACT_MAX
 
__TCA_ACT_MAX


	)

88 
	#TCA_OLD_COMPAT
 (
TCA_ACT_MAX
+1)

	)

89 
	#TCA_ACT_MAX_PRIO
 32

	)

90 
	#TCA_ACT_BIND
 1

	)

91 
	#TCA_ACT_NOBIND
 0

	)

92 
	#TCA_ACT_UNBIND
 1

	)

93 
	#TCA_ACT_NOUNBIND
 0

	)

94 
	#TCA_ACT_REPLACE
 1

	)

95 
	#TCA_ACT_NOREPLACE
 0

	)

96 
	#MAX_REC_LOOP
 4

	)

97 
	#MAX_RED_LOOP
 4

	)

99 
	#TC_ACT_UNSPEC
 (-1)

	)

100 
	#TC_ACT_OK
 0

	)

101 
	#TC_ACT_RECLASSIFY
 1

	)

102 
	#TC_ACT_SHOT
 2

	)

103 
	#TC_ACT_PIPE
 3

	)

104 
	#TC_ACT_STOLEN
 4

	)

105 
	#TC_ACT_QUEUED
 5

	)

106 
	#TC_ACT_REPEAT
 6

	)

107 
	#TC_ACT_JUMP
 0x10000000

	)

111 
	mTCA_ID_UNSPEC
=0,

112 
	mTCA_ID_POLICE
=1,

114 
	m__TCA_ID_MAX
=255

117 
	#TCA_ID_MAX
 
__TCA_ID_MAX


	)

119 
	stc_pﬁi˚
 {

120 
__u32
 
	mödex
;

121 
	ma˘i⁄
;

122 
	#TC_POLICE_UNSPEC
 
TC_ACT_UNSPEC


	)

123 
	#TC_POLICE_OK
 
TC_ACT_OK


	)

124 
	#TC_POLICE_RECLASSIFY
 
TC_ACT_RECLASSIFY


	)

125 
	#TC_POLICE_SHOT
 
TC_ACT_SHOT


	)

126 
	#TC_POLICE_PIPE
 
TC_ACT_PIPE


	)

128 
__u32
 
	mlimô
;

129 
__u32
 
	mbur°
;

130 
__u32
 
	mmtu
;

131 
tc_øã•ec
 
	møã
;

132 
tc_øã•ec
 
	m≥akøã
;

133 
	mªf˙t
;

134 
	mböd˙t
;

135 
__u32
 
	mˇ∑b
;

138 
	stcf_t
 {

139 
__u64
 
	mö°Æl
;

140 
__u64
 
	mœ°u£
;

141 
__u64
 
	mexpúes
;

144 
	stc_˙t
 {

145 
	mªf˙t
;

146 
	mböd˙t
;

149 
	#tc_gí
 \

150 
__u32
 
ödex
; \

151 
__u32
 
ˇ∑b
; \

152 
a˘i⁄
; \

153 
ªf˙t
; \

154 
böd˙t


	)

157 
	mTCA_POLICE_UNSPEC
,

158 
	mTCA_POLICE_TBF
,

159 
	mTCA_POLICE_RATE
,

160 
	mTCA_POLICE_PEAKRATE
,

161 
	mTCA_POLICE_AVRATE
,

162 
	mTCA_POLICE_RESULT
,

163 
	m__TCA_POLICE_MAX


164 
	#TCA_POLICE_RESULT
 
TCA_POLICE_RESULT


	)

167 
	#TCA_POLICE_MAX
 (
__TCA_POLICE_MAX
 - 1)

	)

171 
	#TC_U32_HTID
(
h
Ë((h)&0xFFF00000)

	)

172 
	#TC_U32_USERHTID
(
h
Ë(
	`TC_U32_HTID
(h)>>20)

	)

173 
	#TC_U32_HASH
(
h
Ë(((h)>>12)&0xFF)

	)

174 
	#TC_U32_NODE
(
h
Ë((h)&0xFFF)

	)

175 
	#TC_U32_KEY
(
h
Ë((h)&0xFFFFF)

	)

176 
	#TC_U32_UNSPEC
 0

	)

177 
	#TC_U32_ROOT
 (0xFFF00000)

	)

180 
	mTCA_U32_UNSPEC
,

181 
	mTCA_U32_CLASSID
,

182 
	mTCA_U32_HASH
,

183 
	mTCA_U32_LINK
,

184 
	mTCA_U32_DIVISOR
,

185 
	mTCA_U32_SEL
,

186 
	mTCA_U32_POLICE
,

187 
	mTCA_U32_ACT
,

188 
	mTCA_U32_INDEV
,

189 
	mTCA_U32_PCNT
,

190 
	mTCA_U32_MARK
,

191 
	m__TCA_U32_MAX


194 
	#TCA_U32_MAX
 (
__TCA_U32_MAX
 - 1)

	)

196 
	stc_u32_key
 {

197 
__be32
 
	mmask
;

198 
__be32
 
	mvÆ
;

199 
	moff
;

200 
	moffmask
;

203 
	stc_u32_£l
 {

204 
	mÊags
;

205 
	moffshi·
;

206 
	mnkeys
;

208 
__be16
 
	moffmask
;

209 
__u16
 
	moff
;

210 
	moffoff
;

212 
	mhoff
;

213 
__be32
 
	mhmask
;

214 
tc_u32_key
 
	mkeys
[0];

217 
	stc_u32_m¨k
 {

218 
__u32
 
	mvÆ
;

219 
__u32
 
	mmask
;

220 
__u32
 
	msuc˚ss
;

223 
	stc_u32_p˙t
 {

224 
__u64
 
	mr˙t
;

225 
__u64
 
	mrhô
;

226 
__u64
 
	mk˙ts
[0];

231 
	#TC_U32_TERMINAL
 1

	)

232 
	#TC_U32_OFFSET
 2

	)

233 
	#TC_U32_VAROFFSET
 4

	)

234 
	#TC_U32_EAT
 8

	)

236 
	#TC_U32_MAXDEPTH
 8

	)

242 
	mTCA_RSVP_UNSPEC
,

243 
	mTCA_RSVP_CLASSID
,

244 
	mTCA_RSVP_DST
,

245 
	mTCA_RSVP_SRC
,

246 
	mTCA_RSVP_PINFO
,

247 
	mTCA_RSVP_POLICE
,

248 
	mTCA_RSVP_ACT
,

249 
	m__TCA_RSVP_MAX


252 
	#TCA_RSVP_MAX
 (
__TCA_RSVP_MAX
 - 1 )

	)

254 
	stc_rsvp_gpi
 {

255 
__u32
 
	mkey
;

256 
__u32
 
	mmask
;

257 
	moff£t
;

260 
	stc_rsvp_pöfo
 {

261 
tc_rsvp_gpi
 
	mdpi
;

262 
tc_rsvp_gpi
 
	m•i
;

263 
__u8
 
	m¥Ÿocﬁ
;

264 
__u8
 
	mtu¬ñid
;

265 
__u8
 
	mtu¬ñhdr
;

266 
__u8
 
	m∑d
;

272 
	mTCA_ROUTE4_UNSPEC
,

273 
	mTCA_ROUTE4_CLASSID
,

274 
	mTCA_ROUTE4_TO
,

275 
	mTCA_ROUTE4_FROM
,

276 
	mTCA_ROUTE4_IIF
,

277 
	mTCA_ROUTE4_POLICE
,

278 
	mTCA_ROUTE4_ACT
,

279 
	m__TCA_ROUTE4_MAX


282 
	#TCA_ROUTE4_MAX
 (
__TCA_ROUTE4_MAX
 - 1)

	)

288 
	mTCA_FW_UNSPEC
,

289 
	mTCA_FW_CLASSID
,

290 
	mTCA_FW_POLICE
,

291 
	mTCA_FW_INDEV
,

292 
	mTCA_FW_ACT
,

293 
	mTCA_FW_MASK
,

294 
	m__TCA_FW_MAX


297 
	#TCA_FW_MAX
 (
__TCA_FW_MAX
 - 1)

	)

302 
	mTCA_TCINDEX_UNSPEC
,

303 
	mTCA_TCINDEX_HASH
,

304 
	mTCA_TCINDEX_MASK
,

305 
	mTCA_TCINDEX_SHIFT
,

306 
	mTCA_TCINDEX_FALL_THROUGH
,

307 
	mTCA_TCINDEX_CLASSID
,

308 
	mTCA_TCINDEX_POLICE
,

309 
	mTCA_TCINDEX_ACT
,

310 
	m__TCA_TCINDEX_MAX


313 
	#TCA_TCINDEX_MAX
 (
__TCA_TCINDEX_MAX
 - 1)

	)

318 
	mFLOW_KEY_SRC
,

319 
	mFLOW_KEY_DST
,

320 
	mFLOW_KEY_PROTO
,

321 
	mFLOW_KEY_PROTO_SRC
,

322 
	mFLOW_KEY_PROTO_DST
,

323 
	mFLOW_KEY_IIF
,

324 
	mFLOW_KEY_PRIORITY
,

325 
	mFLOW_KEY_MARK
,

326 
	mFLOW_KEY_NFCT
,

327 
	mFLOW_KEY_NFCT_SRC
,

328 
	mFLOW_KEY_NFCT_DST
,

329 
	mFLOW_KEY_NFCT_PROTO_SRC
,

330 
	mFLOW_KEY_NFCT_PROTO_DST
,

331 
	mFLOW_KEY_RTCLASSID
,

332 
	mFLOW_KEY_SKUID
,

333 
	mFLOW_KEY_SKGID
,

334 
	mFLOW_KEY_VLAN_TAG
,

335 
	mFLOW_KEY_RXHASH
,

336 
	m__FLOW_KEY_MAX
,

339 
	#FLOW_KEY_MAX
 (
__FLOW_KEY_MAX
 - 1)

	)

342 
	mFLOW_MODE_MAP
,

343 
	mFLOW_MODE_HASH
,

347 
	mTCA_FLOW_UNSPEC
,

348 
	mTCA_FLOW_KEYS
,

349 
	mTCA_FLOW_MODE
,

350 
	mTCA_FLOW_BASECLASS
,

351 
	mTCA_FLOW_RSHIFT
,

352 
	mTCA_FLOW_ADDEND
,

353 
	mTCA_FLOW_MASK
,

354 
	mTCA_FLOW_XOR
,

355 
	mTCA_FLOW_DIVISOR
,

356 
	mTCA_FLOW_ACT
,

357 
	mTCA_FLOW_POLICE
,

358 
	mTCA_FLOW_EMATCHES
,

359 
	mTCA_FLOW_PERTURB
,

360 
	m__TCA_FLOW_MAX


363 
	#TCA_FLOW_MAX
 (
__TCA_FLOW_MAX
 - 1)

	)

368 
	mTCA_BASIC_UNSPEC
,

369 
	mTCA_BASIC_CLASSID
,

370 
	mTCA_BASIC_EMATCHES
,

371 
	mTCA_BASIC_ACT
,

372 
	mTCA_BASIC_POLICE
,

373 
	m__TCA_BASIC_MAX


376 
	#TCA_BASIC_MAX
 (
__TCA_BASIC_MAX
 - 1)

	)

382 
	mTCA_CGROUP_UNSPEC
,

383 
	mTCA_CGROUP_ACT
,

384 
	mTCA_CGROUP_POLICE
,

385 
	mTCA_CGROUP_EMATCHES
,

386 
	m__TCA_CGROUP_MAX
,

389 
	#TCA_CGROUP_MAX
 (
__TCA_CGROUP_MAX
 - 1)

	)

394 
	mTCA_BPF_UNSPEC
,

395 
	mTCA_BPF_ACT
,

396 
	mTCA_BPF_POLICE
,

397 
	mTCA_BPF_CLASSID
,

398 
	mTCA_BPF_OPS_LEN
,

399 
	mTCA_BPF_OPS
,

400 
	m__TCA_BPF_MAX
,

403 
	#TCA_BPF_MAX
 (
__TCA_BPF_MAX
 - 1)

	)

407 
	stcf_em©ch_åì_hdr
 {

408 
__u16
 
	mnm©ches
;

409 
__u16
 
	m¥ogid
;

413 
	mTCA_EMATCH_TREE_UNSPEC
,

414 
	mTCA_EMATCH_TREE_HDR
,

415 
	mTCA_EMATCH_TREE_LIST
,

416 
	m__TCA_EMATCH_TREE_MAX


418 
	#TCA_EMATCH_TREE_MAX
 (
__TCA_EMATCH_TREE_MAX
 - 1)

	)

420 
	stcf_em©ch_hdr
 {

421 
__u16
 
	mm©chid
;

422 
__u16
 
	mköd
;

423 
__u16
 
	mÊags
;

424 
__u16
 
	m∑d
;

441 
	#TCF_EM_REL_END
 0

	)

442 
	#TCF_EM_REL_AND
 (1<<0)

	)

443 
	#TCF_EM_REL_OR
 (1<<1)

	)

444 
	#TCF_EM_INVERT
 (1<<2)

	)

445 
	#TCF_EM_SIMPLE
 (1<<3)

	)

447 
	#TCF_EM_REL_MASK
 3

	)

448 
	#TCF_EM_REL_VALID
(
v
Ë(((vË& 
TCF_EM_REL_MASK
Ë!TCF_EM_REL_MASK)

	)

451 
	mTCF_LAYER_LINK
,

452 
	mTCF_LAYER_NETWORK
,

453 
	mTCF_LAYER_TRANSPORT
,

454 
	m__TCF_LAYER_MAX


456 
	#TCF_LAYER_MAX
 (
__TCF_LAYER_MAX
 - 1)

	)

462 
	#TCF_EM_CONTAINER
 0

	)

463 
	#TCF_EM_CMP
 1

	)

464 
	#TCF_EM_NBYTE
 2

	)

465 
	#TCF_EM_U32
 3

	)

466 
	#TCF_EM_META
 4

	)

467 
	#TCF_EM_TEXT
 5

	)

468 
	#TCF_EM_VLAN
 6

	)

469 
	#TCF_EM_CANID
 7

	)

470 
	#TCF_EM_IPSET
 8

	)

471 
	#TCF_EM_MAX
 8

	)

474 
	mTCF_EM_PROG_TC


478 
	mTCF_EM_OPND_EQ
,

479 
	mTCF_EM_OPND_GT
,

480 
	mTCF_EM_OPND_LT


	@/usr/include/linux/pkt_sched.h

1 #i‚de‡
__LINUX_PKT_SCHED_H


2 
	#__LINUX_PKT_SCHED_H


	)

4 
	~<löux/ty≥s.h
>

19 
	#TC_PRIO_BESTEFFORT
 0

	)

20 
	#TC_PRIO_FILLER
 1

	)

21 
	#TC_PRIO_BULK
 2

	)

22 
	#TC_PRIO_INTERACTIVE_BULK
 4

	)

23 
	#TC_PRIO_INTERACTIVE
 6

	)

24 
	#TC_PRIO_CONTROL
 7

	)

26 
	#TC_PRIO_MAX
 15

	)

32 
	stc_°©s
 {

33 
__u64
 
	mbyãs
;

34 
__u32
 
	m∑ckës
;

35 
__u32
 
	mdr›s
;

36 
__u32
 
	movîlimôs
;

38 
__u32
 
	mbps
;

39 
__u32
 
	mµs
;

40 
__u32
 
	mqÀn
;

41 
__u32
 
	mbacklog
;

44 
	stc_e°im©‹
 {

45 sig√d 
	möãrvÆ
;

46 
	mewma_log
;

66 
	#TC_H_MAJ_MASK
 (0xFFFF0000U)

	)

67 
	#TC_H_MIN_MASK
 (0x0000FFFFU)

	)

68 
	#TC_H_MAJ
(
h
Ë((h)&
TC_H_MAJ_MASK
)

	)

69 
	#TC_H_MIN
(
h
Ë((h)&
TC_H_MIN_MASK
)

	)

70 
	#TC_H_MAKE
(
maj
,
mö
Ë(((maj)&
TC_H_MAJ_MASK
)|((mö)&
TC_H_MIN_MASK
))

	)

72 
	#TC_H_UNSPEC
 (0U)

	)

73 
	#TC_H_ROOT
 (0xFFFFFFFFU)

	)

74 
	#TC_H_INGRESS
 (0xFFFFFFF1U)

	)

77 
	etc_lök_œyî
 {

78 
	mTC_LINKLAYER_UNAWARE
,

79 
	mTC_LINKLAYER_ETHERNET
,

80 
	mTC_LINKLAYER_ATM
,

82 
	#TC_LINKLAYER_MASK
 0x0F

	)

84 
	stc_øã•ec
 {

85 
	m˚Œ_log
;

86 
__u8
 
	mlökœyî
;

87 
	movîhód
;

88 
	m˚Œ_Æign
;

89 
	mmpu
;

90 
__u32
 
	møã
;

93 
	#TC_RTAB_SIZE
 1024

	)

95 
	stc_size•ec
 {

96 
	m˚Œ_log
;

97 
	msize_log
;

98 
	m˚Œ_Æign
;

99 
	movîhód
;

100 
	mlökœyî
;

101 
	mmpu
;

102 
	mmtu
;

103 
	mtsize
;

107 
	mTCA_STAB_UNSPEC
,

108 
	mTCA_STAB_BASE
,

109 
	mTCA_STAB_DATA
,

110 
	m__TCA_STAB_MAX


113 
	#TCA_STAB_MAX
 (
__TCA_STAB_MAX
 - 1)

	)

117 
	stc_fifo_q›t
 {

118 
__u32
 
	mlimô
;

123 
	#TCQ_PRIO_BANDS
 16

	)

124 
	#TCQ_MIN_PRIO_BANDS
 2

	)

126 
	stc_¥io_q›t
 {

127 
	mb™ds
;

128 
__u8
 
	m¥iom≠
[
TC_PRIO_MAX
+1];

133 
	stc_mu…iq_q›t
 {

134 
__u16
 
	mb™ds
;

135 
__u16
 
	mmax_b™ds
;

140 
	#TCQ_PLUG_BUFFER
 0

	)

141 
	#TCQ_PLUG_RELEASE_ONE
 1

	)

142 
	#TCQ_PLUG_RELEASE_INDEFINITE
 2

	)

143 
	#TCQ_PLUG_LIMIT
 3

	)

145 
	stc_∂ug_q›t
 {

155 
	ma˘i⁄
;

156 
__u32
 
	mlimô
;

161 
	stc_tbf_q›t
 {

162 
tc_øã•ec
 
	møã
;

163 
tc_øã•ec
 
	m≥akøã
;

164 
__u32
 
	mlimô
;

165 
__u32
 
	mbuf„r
;

166 
__u32
 
	mmtu
;

170 
	mTCA_TBF_UNSPEC
,

171 
	mTCA_TBF_PARMS
,

172 
	mTCA_TBF_RTAB
,

173 
	mTCA_TBF_PTAB
,

174 
	mTCA_TBF_RATE64
,

175 
	mTCA_TBF_PRATE64
,

176 
	mTCA_TBF_BURST
,

177 
	mTCA_TBF_PBURST
,

178 
	m__TCA_TBF_MAX
,

181 
	#TCA_TBF_MAX
 (
__TCA_TBF_MAX
 - 1)

	)

190 
	stc_sfq_q›t
 {

191 
	mqu™tum
;

192 
	m≥πurb_≥riod
;

193 
__u32
 
	mlimô
;

194 
	mdivis‹
;

195 
	mÊows
;

198 
	stc_sfqªd_°©s
 {

199 
__u32
 
	m¥ob_dr›
;

200 
__u32
 
	mf‹˚d_dr›
;

201 
__u32
 
	m¥ob_m¨k
;

202 
__u32
 
	mf‹˚d_m¨k
;

203 
__u32
 
	m¥ob_m¨k_hód
;

204 
__u32
 
	mf‹˚d_m¨k_hód
;

207 
	stc_sfq_q›t_v1
 {

208 
tc_sfq_q›t
 
	mv0
;

209 
	mdïth
;

210 
	mhóddr›
;

212 
__u32
 
	mlimô
;

213 
__u32
 
	mqth_mö
;

214 
__u32
 
	mqth_max
;

215 
	mWlog
;

216 
	mPlog
;

217 
	mS˚Œ_log
;

218 
	mÊags
;

219 
__u32
 
	mmax_P
;

221 
tc_sfqªd_°©s
 
	m°©s
;

225 
	stc_sfq_x°©s
 {

226 
__s32
 
	mÆlŸ
;

232 
	mTCA_RED_UNSPEC
,

233 
	mTCA_RED_PARMS
,

234 
	mTCA_RED_STAB
,

235 
	mTCA_RED_MAX_P
,

236 
	m__TCA_RED_MAX
,

239 
	#TCA_RED_MAX
 (
__TCA_RED_MAX
 - 1)

	)

241 
	stc_ªd_q›t
 {

242 
__u32
 
	mlimô
;

243 
__u32
 
	mqth_mö
;

244 
__u32
 
	mqth_max
;

245 
	mWlog
;

246 
	mPlog
;

247 
	mS˚Œ_log
;

248 
	mÊags
;

249 
	#TC_RED_ECN
 1

	)

250 
	#TC_RED_HARDDROP
 2

	)

251 
	#TC_RED_ADAPTATIVE
 4

	)

254 
	stc_ªd_x°©s
 {

255 
__u32
 
	móæy
;

256 
__u32
 
	mpdr›
;

257 
__u32
 
	mŸhî
;

258 
__u32
 
	mm¨ked
;

263 
	#MAX_DPs
 16

	)

266 
	mTCA_GRED_UNSPEC
,

267 
	mTCA_GRED_PARMS
,

268 
	mTCA_GRED_STAB
,

269 
	mTCA_GRED_DPS
,

270 
	mTCA_GRED_MAX_P
,

271 
	m__TCA_GRED_MAX
,

274 
	#TCA_GRED_MAX
 (
__TCA_GRED_MAX
 - 1)

	)

276 
	stc_gªd_q›t
 {

277 
__u32
 
	mlimô
;

278 
__u32
 
	mqth_mö
;

279 
__u32
 
	mqth_max
;

280 
__u32
 
	mDP
;

281 
__u32
 
	mbacklog
;

282 
__u32
 
	mqave
;

283 
__u32
 
	mf‹˚d
;

284 
__u32
 
	móæy
;

285 
__u32
 
	mŸhî
;

286 
__u32
 
	mpdr›
;

287 
__u8
 
	mWlog
;

288 
__u8
 
	mPlog
;

289 
__u8
 
	mS˚Œ_log
;

290 
__u8
 
	m¥io
;

291 
__u32
 
	m∑ckës
;

292 
__u32
 
	mbyãsö
;

296 
	stc_gªd_s›t
 {

297 
__u32
 
	mDPs
;

298 
__u32
 
	mdef_DP
;

299 
__u8
 
	mgrio
;

300 
__u8
 
	mÊags
;

301 
__u16
 
	m∑d1
;

307 
	mTCA_CHOKE_UNSPEC
,

308 
	mTCA_CHOKE_PARMS
,

309 
	mTCA_CHOKE_STAB
,

310 
	mTCA_CHOKE_MAX_P
,

311 
	m__TCA_CHOKE_MAX
,

314 
	#TCA_CHOKE_MAX
 (
__TCA_CHOKE_MAX
 - 1)

	)

316 
	stc_choke_q›t
 {

317 
__u32
 
	mlimô
;

318 
__u32
 
	mqth_mö
;

319 
__u32
 
	mqth_max
;

320 
	mWlog
;

321 
	mPlog
;

322 
	mS˚Œ_log
;

323 
	mÊags
;

326 
	stc_choke_x°©s
 {

327 
__u32
 
	móæy
;

328 
__u32
 
	mpdr›
;

329 
__u32
 
	mŸhî
;

330 
__u32
 
	mm¨ked
;

331 
__u32
 
	mm©ched
;

335 
	#TC_HTB_NUMPRIO
 8

	)

336 
	#TC_HTB_MAXDEPTH
 8

	)

337 
	#TC_HTB_PROTOVER
 3

	)

339 
	stc_htb_›t
 {

340 
tc_øã•ec
 
	møã
;

341 
tc_øã•ec
 
	m˚û
;

342 
__u32
 
	mbuf„r
;

343 
__u32
 
	mcbuf„r
;

344 
__u32
 
	mqu™tum
;

345 
__u32
 
	mÀvñ
;

346 
__u32
 
	m¥io
;

348 
	stc_htb_glob
 {

349 
__u32
 
	mvîsi⁄
;

350 
__u32
 
	møã2qu™tum
;

351 
__u32
 
	mdef˛s
;

352 
__u32
 
	mdebug
;

355 
__u32
 
	mdúe˘_pkts
;

358 
	mTCA_HTB_UNSPEC
,

359 
	mTCA_HTB_PARMS
,

360 
	mTCA_HTB_INIT
,

361 
	mTCA_HTB_CTAB
,

362 
	mTCA_HTB_RTAB
,

363 
	mTCA_HTB_DIRECT_QLEN
,

364 
	mTCA_HTB_RATE64
,

365 
	mTCA_HTB_CEIL64
,

366 
	m__TCA_HTB_MAX
,

369 
	#TCA_HTB_MAX
 (
__TCA_HTB_MAX
 - 1)

	)

371 
	stc_htb_x°©s
 {

372 
__u32
 
	mÀnds
;

373 
__u32
 
	mb‹rows
;

374 
__u32
 
	mgü¡s
;

375 
__u32
 
	mtokís
;

376 
__u32
 
	m˘okís
;

381 
	stc_hfsc_q›t
 {

382 
__u16
 
	mdef˛s
;

385 
	stc_£rvi˚_curve
 {

386 
__u32
 
	mm1
;

387 
__u32
 
	md
;

388 
__u32
 
	mm2
;

391 
	stc_hfsc_°©s
 {

392 
__u64
 
	mw‹k
;

393 
__u64
 
	mπw‹k
;

394 
__u32
 
	m≥riod
;

395 
__u32
 
	mÀvñ
;

399 
	mTCA_HFSC_UNSPEC
,

400 
	mTCA_HFSC_RSC
,

401 
	mTCA_HFSC_FSC
,

402 
	mTCA_HFSC_USC
,

403 
	m__TCA_HFSC_MAX
,

406 
	#TCA_HFSC_MAX
 (
__TCA_HFSC_MAX
 - 1)

	)

411 
	#TC_CBQ_MAXPRIO
 8

	)

412 
	#TC_CBQ_MAXLEVEL
 8

	)

413 
	#TC_CBQ_DEF_EWMA
 5

	)

415 
	stc_cbq_lss›t
 {

416 
	mch™ge
;

417 
	mÊags
;

418 
	#TCF_CBQ_LSS_BOUNDED
 1

	)

419 
	#TCF_CBQ_LSS_ISOLATED
 2

	)

420 
	mewma_log
;

421 
	mÀvñ
;

422 
	#TCF_CBQ_LSS_FLAGS
 1

	)

423 
	#TCF_CBQ_LSS_EWMA
 2

	)

424 
	#TCF_CBQ_LSS_MAXIDLE
 4

	)

425 
	#TCF_CBQ_LSS_MINIDLE
 8

	)

426 
	#TCF_CBQ_LSS_OFFTIME
 0x10

	)

427 
	#TCF_CBQ_LSS_AVPKT
 0x20

	)

428 
__u32
 
	mmaxidÀ
;

429 
__u32
 
	mmöidÀ
;

430 
__u32
 
	mof·ime
;

431 
__u32
 
	mavpkt
;

434 
	stc_cbq_wº›t
 {

435 
	mÊags
;

436 
	m¥i‹ôy
;

437 
	m˝ri‹ôy
;

438 
	m__ª£rved
;

439 
__u32
 
	mÆlŸ
;

440 
__u32
 
	mweight
;

443 
	stc_cbq_ovl
 {

444 
	m°øãgy
;

445 
	#TC_CBQ_OVL_CLASSIC
 0

	)

446 
	#TC_CBQ_OVL_DELAY
 1

	)

447 
	#TC_CBQ_OVL_LOWPRIO
 2

	)

448 
	#TC_CBQ_OVL_DROP
 3

	)

449 
	#TC_CBQ_OVL_RCLASSIC
 4

	)

450 
	m¥i‹ôy2
;

451 
__u16
 
	m∑d
;

452 
__u32
 
	m≥«…y
;

455 
	stc_cbq_pﬁi˚
 {

456 
	mpﬁi˚
;

457 
	m__ªs1
;

458 
	m__ªs2
;

461 
	stc_cbq_f›t
 {

462 
__u32
 
	m•lô
;

463 
__u32
 
	mdefm≠
;

464 
__u32
 
	mdefch™ge
;

467 
	stc_cbq_x°©s
 {

468 
__u32
 
	mb‹rows
;

469 
__u32
 
	movîa˘i⁄s
;

470 
__s32
 
	mavgidÀ
;

471 
__s32
 
	mundîtime
;

475 
	mTCA_CBQ_UNSPEC
,

476 
	mTCA_CBQ_LSSOPT
,

477 
	mTCA_CBQ_WRROPT
,

478 
	mTCA_CBQ_FOPT
,

479 
	mTCA_CBQ_OVL_STRATEGY
,

480 
	mTCA_CBQ_RATE
,

481 
	mTCA_CBQ_RTAB
,

482 
	mTCA_CBQ_POLICE
,

483 
	m__TCA_CBQ_MAX
,

486 
	#TCA_CBQ_MAX
 (
__TCA_CBQ_MAX
 - 1)

	)

491 
	mTCA_DSMARK_UNSPEC
,

492 
	mTCA_DSMARK_INDICES
,

493 
	mTCA_DSMARK_DEFAULT_INDEX
,

494 
	mTCA_DSMARK_SET_TC_INDEX
,

495 
	mTCA_DSMARK_MASK
,

496 
	mTCA_DSMARK_VALUE
,

497 
	m__TCA_DSMARK_MAX
,

500 
	#TCA_DSMARK_MAX
 (
__TCA_DSMARK_MAX
 - 1)

	)

505 
	mTCA_ATM_UNSPEC
,

506 
	mTCA_ATM_FD
,

507 
	mTCA_ATM_PTR
,

508 
	mTCA_ATM_HDR
,

509 
	mTCA_ATM_EXCESS
,

510 
	mTCA_ATM_ADDR
,

511 
	mTCA_ATM_STATE
,

512 
	m__TCA_ATM_MAX
,

515 
	#TCA_ATM_MAX
 (
__TCA_ATM_MAX
 - 1)

	)

520 
	mTCA_NETEM_UNSPEC
,

521 
	mTCA_NETEM_CORR
,

522 
	mTCA_NETEM_DELAY_DIST
,

523 
	mTCA_NETEM_REORDER
,

524 
	mTCA_NETEM_CORRUPT
,

525 
	mTCA_NETEM_LOSS
,

526 
	mTCA_NETEM_RATE
,

527 
	mTCA_NETEM_ECN
,

528 
	mTCA_NETEM_RATE64
,

529 
	m__TCA_NETEM_MAX
,

532 
	#TCA_NETEM_MAX
 (
__TCA_NETEM_MAX
 - 1)

	)

534 
	stc_√ãm_q›t
 {

535 
__u32
 
	mœãncy
;

536 
__u32
 
	mlimô
;

537 
__u32
 
	mloss
;

538 
__u32
 
	mg≠
;

539 
__u32
 
	mdu∂iˇã
;

540 
__u32
 
	mjôãr
;

543 
	stc_√ãm_c‹r
 {

544 
__u32
 
	mdñay_c‹r
;

545 
__u32
 
	mloss_c‹r
;

546 
__u32
 
	mdup_c‹r
;

549 
	stc_√ãm_ª‹dî
 {

550 
__u32
 
	m¥obabûôy
;

551 
__u32
 
	mc‹ªœti⁄
;

554 
	stc_√ãm_c‹ru±
 {

555 
__u32
 
	m¥obabûôy
;

556 
__u32
 
	mc‹ªœti⁄
;

559 
	stc_√ãm_øã
 {

560 
__u32
 
	møã
;

561 
__s32
 
	m∑ckë_ovîhód
;

562 
__u32
 
	m˚Œ_size
;

563 
__s32
 
	m˚Œ_ovîhód
;

567 
	mNETEM_LOSS_UNSPEC
,

568 
	mNETEM_LOSS_GI
,

569 
	mNETEM_LOSS_GE
,

570 
	m__NETEM_LOSS_MAX


572 
	#NETEM_LOSS_MAX
 (
__NETEM_LOSS_MAX
 - 1)

	)

575 
	stc_√ãm_gimodñ
 {

576 
__u32
 
	mp13
;

577 
__u32
 
	mp31
;

578 
__u32
 
	mp32
;

579 
__u32
 
	mp14
;

580 
__u32
 
	mp23
;

584 
	stc_√ãm_gemodñ
 {

585 
__u32
 
	mp
;

586 
__u32
 
	mr
;

587 
__u32
 
	mh
;

588 
__u32
 
	mk1
;

591 
	#NETEM_DIST_SCALE
 8192

	)

592 
	#NETEM_DIST_MAX
 16384

	)

597 
	mTCA_DRR_UNSPEC
,

598 
	mTCA_DRR_QUANTUM
,

599 
	m__TCA_DRR_MAX


602 
	#TCA_DRR_MAX
 (
__TCA_DRR_MAX
 - 1)

	)

604 
	stc_dº_°©s
 {

605 
__u32
 
	mdeficô
;

609 
	#TC_QOPT_BITMASK
 15

	)

610 
	#TC_QOPT_MAX_QUEUE
 16

	)

612 
	stc_mq¥io_q›t
 {

613 
__u8
 
	mnum_tc
;

614 
__u8
 
	m¥io_tc_m≠
[
TC_QOPT_BITMASK
 + 1];

615 
__u8
 
	mhw
;

616 
__u16
 
	mcou¡
[
TC_QOPT_MAX_QUEUE
];

617 
__u16
 
	moff£t
[
TC_QOPT_MAX_QUEUE
];

623 
	mTCA_SFB_UNSPEC
,

624 
	mTCA_SFB_PARMS
,

625 
	m__TCA_SFB_MAX
,

628 
	#TCA_SFB_MAX
 (
__TCA_SFB_MAX
 - 1)

	)

633 
	stc_sfb_q›t
 {

634 
__u32
 
	mªhash_öãrvÆ
;

635 
__u32
 
	mw¨mup_time
;

636 
__u32
 
	mmax
;

637 
__u32
 
	mbö_size
;

638 
__u32
 
	mö¸emít
;

639 
__u32
 
	mde¸emít
;

640 
__u32
 
	mlimô
;

641 
__u32
 
	m≥«…y_øã
;

642 
__u32
 
	m≥«…y_bur°
;

645 
	stc_sfb_x°©s
 {

646 
__u32
 
	móæydr›
;

647 
__u32
 
	m≥«…ydr›
;

648 
__u32
 
	mbuckëdr›
;

649 
__u32
 
	mqueuedr›
;

650 
__u32
 
	mchûddr›
;

651 
__u32
 
	mm¨ked
;

652 
__u32
 
	mmaxqÀn
;

653 
__u32
 
	mmax¥ob
;

654 
__u32
 
	mavg¥ob
;

657 
	#SFB_MAX_PROB
 0xFFFF

	)

661 
	mTCA_QFQ_UNSPEC
,

662 
	mTCA_QFQ_WEIGHT
,

663 
	mTCA_QFQ_LMAX
,

664 
	m__TCA_QFQ_MAX


667 
	#TCA_QFQ_MAX
 (
__TCA_QFQ_MAX
 - 1)

	)

669 
	stc_qfq_°©s
 {

670 
__u32
 
	mweight
;

671 
__u32
 
	mlmax
;

677 
	mTCA_CODEL_UNSPEC
,

678 
	mTCA_CODEL_TARGET
,

679 
	mTCA_CODEL_LIMIT
,

680 
	mTCA_CODEL_INTERVAL
,

681 
	mTCA_CODEL_ECN
,

682 
	m__TCA_CODEL_MAX


685 
	#TCA_CODEL_MAX
 (
__TCA_CODEL_MAX
 - 1)

	)

687 
	stc_codñ_x°©s
 {

688 
__u32
 
	mmax∑ckë
;

689 
__u32
 
	mcou¡
;

692 
__u32
 
	mœ°cou¡
;

693 
__u32
 
	mldñay
;

694 
__s32
 
	mdr›_√xt
;

695 
__u32
 
	mdr›_ovîlimô
;

696 
__u32
 
	me˙_m¨k
;

697 
__u32
 
	mdr›pög
;

703 
	mTCA_FQ_CODEL_UNSPEC
,

704 
	mTCA_FQ_CODEL_TARGET
,

705 
	mTCA_FQ_CODEL_LIMIT
,

706 
	mTCA_FQ_CODEL_INTERVAL
,

707 
	mTCA_FQ_CODEL_ECN
,

708 
	mTCA_FQ_CODEL_FLOWS
,

709 
	mTCA_FQ_CODEL_QUANTUM
,

710 
	m__TCA_FQ_CODEL_MAX


713 
	#TCA_FQ_CODEL_MAX
 (
__TCA_FQ_CODEL_MAX
 - 1)

	)

716 
	mTCA_FQ_CODEL_XSTATS_QDISC
,

717 
	mTCA_FQ_CODEL_XSTATS_CLASS
,

720 
	stc_fq_codñ_qd_°©s
 {

721 
__u32
 
	mmax∑ckë
;

722 
__u32
 
	mdr›_ovîlimô
;

725 
__u32
 
	me˙_m¨k
;

728 
__u32
 
	m√w_Êow_cou¡
;

731 
__u32
 
	m√w_Êows_Àn
;

732 
__u32
 
	mﬁd_Êows_Àn
;

735 
	stc_fq_codñ_˛_°©s
 {

736 
__s32
 
	mdeficô
;

737 
__u32
 
	mldñay
;

740 
__u32
 
	mcou¡
;

741 
__u32
 
	mœ°cou¡
;

742 
__u32
 
	mdr›pög
;

743 
__s32
 
	mdr›_√xt
;

746 
	stc_fq_codñ_x°©s
 {

747 
__u32
 
	mty≥
;

749 
tc_fq_codñ_qd_°©s
 
	mqdisc_°©s
;

750 
tc_fq_codñ_˛_°©s
 
	m˛ass_°©s
;

757 
	mTCA_FQ_UNSPEC
,

759 
	mTCA_FQ_PLIMIT
,

761 
	mTCA_FQ_FLOW_PLIMIT
,

763 
	mTCA_FQ_QUANTUM
,

765 
	mTCA_FQ_INITIAL_QUANTUM
,

767 
	mTCA_FQ_RATE_ENABLE
,

769 
	mTCA_FQ_FLOW_DEFAULT_RATE
,

771 
	mTCA_FQ_FLOW_MAX_RATE
,

773 
	mTCA_FQ_BUCKETS_LOG
,

775 
	mTCA_FQ_FLOW_REFILL_DELAY
,

777 
	m__TCA_FQ_MAX


780 
	#TCA_FQ_MAX
 (
__TCA_FQ_MAX
 - 1)

	)

782 
	stc_fq_qd_°©s
 {

783 
__u64
 
	mgc_Êows
;

784 
__u64
 
	mhigh¥io_∑ckës
;

785 
__u64
 
	mt˝_ªå™s
;

786 
__u64
 
	mthrŸéed
;

787 
__u64
 
	mÊows_∂imô
;

788 
__u64
 
	mpkts_too_l⁄g
;

789 
__u64
 
	mÆloˇti⁄_îr‹s
;

790 
__s64
 
	mtime_√xt_dñayed_Êow
;

791 
__u32
 
	mÊows
;

792 
__u32
 
	möa˘ive_Êows
;

793 
__u32
 
	mthrŸéed_Êows
;

794 
__u32
 
	m∑d
;

800 
	mTCA_HHF_UNSPEC
,

801 
	mTCA_HHF_BACKLOG_LIMIT
,

802 
	mTCA_HHF_QUANTUM
,

803 
	mTCA_HHF_HH_FLOWS_LIMIT
,

804 
	mTCA_HHF_RESET_TIMEOUT
,

805 
	mTCA_HHF_ADMIT_BYTES
,

806 
	mTCA_HHF_EVICT_TIMEOUT
,

807 
	mTCA_HHF_NON_HH_WEIGHT
,

808 
	m__TCA_HHF_MAX


811 
	#TCA_HHF_MAX
 (
__TCA_HHF_MAX
 - 1)

	)

813 
	stc_hhf_x°©s
 {

814 
__u32
 
	mdr›_ovîlimô
;

817 
__u32
 
	mhh_ovîlimô
;

818 
__u32
 
	mhh_tŸ_cou¡
;

819 
__u32
 
	mhh_cur_cou¡
;

824 
	mTCA_PIE_UNSPEC
,

825 
	mTCA_PIE_TARGET
,

826 
	mTCA_PIE_LIMIT
,

827 
	mTCA_PIE_TUPDATE
,

828 
	mTCA_PIE_ALPHA
,

829 
	mTCA_PIE_BETA
,

830 
	mTCA_PIE_ECN
,

831 
	mTCA_PIE_BYTEMODE
,

832 
	m__TCA_PIE_MAX


834 
	#TCA_PIE_MAX
 (
__TCA_PIE_MAX
 - 1)

	)

836 
	stc_põ_x°©s
 {

837 
__u32
 
	m¥ob
;

838 
__u32
 
	mdñay
;

839 
__u32
 
	mavg_dq_øã
;

840 
__u32
 
	m∑ckës_ö
;

841 
__u32
 
	mdr›≥d
;

842 
__u32
 
	movîlimô
;

843 
__u32
 
	mmaxq
;

844 
__u32
 
	me˙_m¨k
;

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	mRTM_NEWNETCONF
 = 80,

124 
	#RTM_NEWNETCONF
 
RTM_NEWNETCONF


	)

125 
	mRTM_GETNETCONF
 = 82,

126 
	#RTM_GETNETCONF
 
RTM_GETNETCONF


	)

128 
	mRTM_NEWMDB
 = 84,

129 
	#RTM_NEWMDB
 
RTM_NEWMDB


	)

130 
	mRTM_DELMDB
 = 85,

131 
	#RTM_DELMDB
 
RTM_DELMDB


	)

132 
	mRTM_GETMDB
 = 86,

133 
	#RTM_GETMDB
 
RTM_GETMDB


	)

135 
	m__RTM_MAX
,

136 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

139 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

140 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

141 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

149 
	sπ©å
 {

150 
	mπa_Àn
;

151 
	mπa_ty≥
;

156 
	#RTA_ALIGNTO
 4

	)

157 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

158 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

159 (
πa
)->
πa_Àn
 >(
π©å
) && \

160 (
πa
)->
πa_Àn
 <(
Àn
))

	)

161 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

162 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

163 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

164 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

165 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

166 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

175 
	sπmsg
 {

176 
	mπm_Ámûy
;

177 
	mπm_d°_Àn
;

178 
	mπm_§c_Àn
;

179 
	mπm_tos
;

181 
	mπm_èbÀ
;

182 
	mπm_¥Ÿocﬁ
;

183 
	mπm_sc›e
;

184 
	mπm_ty≥
;

186 
	mπm_Êags
;

192 
	mRTN_UNSPEC
,

193 
	mRTN_UNICAST
,

194 
	mRTN_LOCAL
,

195 
	mRTN_BROADCAST
,

197 
	mRTN_ANYCAST
,

199 
	mRTN_MULTICAST
,

200 
	mRTN_BLACKHOLE
,

201 
	mRTN_UNREACHABLE
,

202 
	mRTN_PROHIBIT
,

203 
	mRTN_THROW
,

204 
	mRTN_NAT
,

205 
	mRTN_XRESOLVE
,

206 
	m__RTN_MAX


209 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

214 
	#RTPROT_UNSPEC
 0

	)

215 
	#RTPROT_REDIRECT
 1

	)

217 
	#RTPROT_KERNEL
 2

	)

218 
	#RTPROT_BOOT
 3

	)

219 
	#RTPROT_STATIC
 4

	)

228 
	#RTPROT_GATED
 8

	)

229 
	#RTPROT_RA
 9

	)

230 
	#RTPROT_MRT
 10

	)

231 
	#RTPROT_ZEBRA
 11

	)

232 
	#RTPROT_BIRD
 12

	)

233 
	#RTPROT_DNROUTED
 13

	)

234 
	#RTPROT_XORP
 14

	)

235 
	#RTPROT_NTK
 15

	)

236 
	#RTPROT_DHCP
 16

	)

237 
	#RTPROT_MROUTED
 17

	)

238 
	#RTPROT_BABEL
 42

	)

251 
	eπ_sc›e_t
 {

252 
	mRT_SCOPE_UNIVERSE
=0,

254 
	mRT_SCOPE_SITE
=200,

255 
	mRT_SCOPE_LINK
=253,

256 
	mRT_SCOPE_HOST
=254,

257 
	mRT_SCOPE_NOWHERE
=255

262 
	#RTM_F_NOTIFY
 0x100

	)

263 
	#RTM_F_CLONED
 0x200

	)

264 
	#RTM_F_EQUALIZE
 0x400

	)

265 
	#RTM_F_PREFIX
 0x800

	)

269 
	eπ_˛ass_t
 {

270 
	mRT_TABLE_UNSPEC
=0,

272 
	mRT_TABLE_COMPAT
=252,

273 
	mRT_TABLE_DEFAULT
=253,

274 
	mRT_TABLE_MAIN
=254,

275 
	mRT_TABLE_LOCAL
=255,

276 
	mRT_TABLE_MAX
=0xFFFFFFFF

282 
	eπ©å_ty≥_t
 {

283 
	mRTA_UNSPEC
,

284 
	mRTA_DST
,

285 
	mRTA_SRC
,

286 
	mRTA_IIF
,

287 
	mRTA_OIF
,

288 
	mRTA_GATEWAY
,

289 
	mRTA_PRIORITY
,

290 
	mRTA_PREFSRC
,

291 
	mRTA_METRICS
,

292 
	mRTA_MULTIPATH
,

293 
	mRTA_PROTOINFO
,

294 
	mRTA_FLOW
,

295 
	mRTA_CACHEINFO
,

296 
	mRTA_SESSION
,

297 
	mRTA_MP_ALGO
,

298 
	mRTA_TABLE
,

299 
	mRTA_MARK
,

300 
	mRTA_MFC_STATS
,

301 
	m__RTA_MAX


304 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

306 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

307 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

318 
	sπ√xth›
 {

319 
	mπnh_Àn
;

320 
	mπnh_Êags
;

321 
	mπnh_h›s
;

322 
	mπnh_ifödex
;

327 
	#RTNH_F_DEAD
 1

	)

328 
	#RTNH_F_PERVASIVE
 2

	)

329 
	#RTNH_F_ONLINK
 4

	)

333 
	#RTNH_ALIGNTO
 4

	)

334 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

335 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

336 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

337 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

338 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

339 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

340 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

344 
	sπa_ˇcheöfo
 {

345 
__u32
 
	mπa_˛¡ªf
;

346 
__u32
 
	mπa_œ°u£
;

347 
__s32
 
	mπa_expúes
;

348 
__u32
 
	mπa_îr‹
;

349 
__u32
 
	mπa_u£d
;

351 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

352 
__u32
 
	mπa_id
;

353 
__u32
 
	mπa_ts
;

354 
__u32
 
	mπa_tßge
;

360 
	mRTAX_UNSPEC
,

361 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

362 
	mRTAX_LOCK
,

363 
	#RTAX_LOCK
 
RTAX_LOCK


	)

364 
	mRTAX_MTU
,

365 
	#RTAX_MTU
 
RTAX_MTU


	)

366 
	mRTAX_WINDOW
,

367 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

368 
	mRTAX_RTT
,

369 
	#RTAX_RTT
 
RTAX_RTT


	)

370 
	mRTAX_RTTVAR
,

371 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

372 
	mRTAX_SSTHRESH
,

373 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

374 
	mRTAX_CWND
,

375 
	#RTAX_CWND
 
RTAX_CWND


	)

376 
	mRTAX_ADVMSS
,

377 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

378 
	mRTAX_REORDERING
,

379 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

380 
	mRTAX_HOPLIMIT
,

381 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

382 
	mRTAX_INITCWND
,

383 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

384 
	mRTAX_FEATURES
,

385 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

386 
	mRTAX_RTO_MIN
,

387 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

388 
	mRTAX_INITRWND
,

389 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

390 
	mRTAX_QUICKACK
,

391 
	#RTAX_QUICKACK
 
RTAX_QUICKACK


	)

392 
	m__RTAX_MAX


395 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

397 
	#RTAX_FEATURE_ECN
 0x00000001

	)

398 
	#RTAX_FEATURE_SACK
 0x00000002

	)

399 
	#RTAX_FEATURE_TIMESTAMP
 0x00000004

	)

400 
	#RTAX_FEATURE_ALLFRAG
 0x00000008

	)

402 
	sπa_£ssi⁄
 {

403 
__u8
 
	m¥Ÿo
;

404 
__u8
 
	m∑d1
;

405 
__u16
 
	m∑d2
;

409 
__u16
 
	m•‹t
;

410 
__u16
 
	mdp‹t
;

411 } 
	mp‹ts
;

414 
__u8
 
	mty≥
;

415 
__u8
 
	mcode
;

416 
__u16
 
	midít
;

417 } 
	micm±
;

419 
__u32
 
	m•i
;

420 } 
	mu
;

423 
	sπa_mfc_°©s
 {

424 
__u64
 
	mmfcs_∑ckës
;

425 
__u64
 
	mmfcs_byãs
;

426 
__u64
 
	mmfcs_wr⁄g_if
;

433 
	sπgímsg
 {

434 
	mπgí_Ámûy
;

446 
	siföfomsg
 {

447 
	mifi_Ámûy
;

448 
	m__ifi_∑d
;

449 
	mifi_ty≥
;

450 
	mifi_ödex
;

451 
	mifi_Êags
;

452 
	mifi_ch™ge
;

459 
	s¥efixmsg
 {

460 
	m¥efix_Ámûy
;

461 
	m¥efix_∑d1
;

462 
	m¥efix_∑d2
;

463 
	m¥efix_ifödex
;

464 
	m¥efix_ty≥
;

465 
	m¥efix_Àn
;

466 
	m¥efix_Êags
;

467 
	m¥efix_∑d3
;

472 
	mPREFIX_UNSPEC
,

473 
	mPREFIX_ADDRESS
,

474 
	mPREFIX_CACHEINFO
,

475 
	m__PREFIX_MAX


478 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

480 
	s¥efix_ˇcheöfo
 {

481 
__u32
 
	m¥e„ºed_time
;

482 
__u32
 
	mvÆid_time
;

490 
	stcmsg
 {

491 
	mtcm_Ámûy
;

492 
	mtcm__∑d1
;

493 
	mtcm__∑d2
;

494 
	mtcm_ifödex
;

495 
__u32
 
	mtcm_h™dÀ
;

496 
__u32
 
	mtcm_∑ª¡
;

497 
__u32
 
	mtcm_öfo
;

501 
	mTCA_UNSPEC
,

502 
	mTCA_KIND
,

503 
	mTCA_OPTIONS
,

504 
	mTCA_STATS
,

505 
	mTCA_XSTATS
,

506 
	mTCA_RATE
,

507 
	mTCA_FCNT
,

508 
	mTCA_STATS2
,

509 
	mTCA_STAB
,

510 
	m__TCA_MAX


513 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

515 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

516 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

522 
	sndu£r›tmsg
 {

523 
	mndu£r›t_Ámûy
;

524 
	mndu£r›t_∑d1
;

525 
	mndu£r›t_›ts_Àn
;

526 
	mndu£r›t_ifödex
;

527 
__u8
 
	mndu£r›t_icmp_ty≥
;

528 
__u8
 
	mndu£r›t_icmp_code
;

529 
	mndu£r›t_∑d2
;

530 
	mndu£r›t_∑d3
;

535 
	mNDUSEROPT_UNSPEC
,

536 
	mNDUSEROPT_SRCADDR
,

537 
	m__NDUSEROPT_MAX


540 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

543 
	#RTMGRP_LINK
 1

	)

544 
	#RTMGRP_NOTIFY
 2

	)

545 
	#RTMGRP_NEIGH
 4

	)

546 
	#RTMGRP_TC
 8

	)

548 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

549 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

550 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

551 
	#RTMGRP_IPV4_RULE
 0x80

	)

553 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

554 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

555 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

556 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

558 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

559 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

561 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

564 
	eπ√éök_groups
 {

565 
	mRTNLGRP_NONE
,

566 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

567 
	mRTNLGRP_LINK
,

568 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

569 
	mRTNLGRP_NOTIFY
,

570 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

571 
	mRTNLGRP_NEIGH
,

572 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

573 
	mRTNLGRP_TC
,

574 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

575 
	mRTNLGRP_IPV4_IFADDR
,

576 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

577 
	mRTNLGRP_IPV4_MROUTE
,

578 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

579 
	mRTNLGRP_IPV4_ROUTE
,

580 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

581 
	mRTNLGRP_IPV4_RULE
,

582 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

583 
	mRTNLGRP_IPV6_IFADDR
,

584 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

585 
	mRTNLGRP_IPV6_MROUTE
,

586 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

587 
	mRTNLGRP_IPV6_ROUTE
,

588 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

589 
	mRTNLGRP_IPV6_IFINFO
,

590 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

591 
	mRTNLGRP_DEC√t_IFADDR
,

592 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

593 
	mRTNLGRP_NOP2
,

594 
	mRTNLGRP_DEC√t_ROUTE
,

595 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

596 
	mRTNLGRP_DEC√t_RULE
,

597 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

598 
	mRTNLGRP_NOP4
,

599 
	mRTNLGRP_IPV6_PREFIX
,

600 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

601 
	mRTNLGRP_IPV6_RULE
,

602 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

603 
	mRTNLGRP_ND_USEROPT
,

604 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

605 
	mRTNLGRP_PHONET_IFADDR
,

606 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

607 
	mRTNLGRP_PHONET_ROUTE
,

608 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

609 
	mRTNLGRP_DCB
,

610 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

611 
	mRTNLGRP_IPV4_NETCONF
,

612 
	#RTNLGRP_IPV4_NETCONF
 
RTNLGRP_IPV4_NETCONF


	)

613 
	mRTNLGRP_IPV6_NETCONF
,

614 
	#RTNLGRP_IPV6_NETCONF
 
RTNLGRP_IPV6_NETCONF


	)

615 
	mRTNLGRP_MDB
,

616 
	#RTNLGRP_MDB
 
RTNLGRP_MDB


	)

617 
	m__RTNLGRP_MAX


619 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

622 
	stˇmsg
 {

623 
	mtˇ_Ámûy
;

624 
	mtˇ__∑d1
;

625 
	mtˇ__∑d2
;

627 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

628 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

629 
	#TCA_ACT_TAB
 1

	)

630 
	#TCAA_MAX
 1

	)

633 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

634 
	#RTEXT_FILTER_BRVLAN
 (1 << 1)

	)

	@/usr/include/linux/sock_diag.h

1 #i‚de‡
__SOCK_DIAG_H__


2 
	#__SOCK_DIAG_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	#SOCK_DIAG_BY_FAMILY
 20

	)

8 
	ssock_düg_ªq
 {

9 
__u8
 
	msdüg_Ámûy
;

10 
__u8
 
	msdüg_¥Ÿocﬁ
;

14 
	mSK_MEMINFO_RMEM_ALLOC
,

15 
	mSK_MEMINFO_RCVBUF
,

16 
	mSK_MEMINFO_WMEM_ALLOC
,

17 
	mSK_MEMINFO_SNDBUF
,

18 
	mSK_MEMINFO_FWD_ALLOC
,

19 
	mSK_MEMINFO_WMEM_QUEUED
,

20 
	mSK_MEMINFO_OPTMEM
,

21 
	mSK_MEMINFO_BACKLOG
,

23 
	mSK_MEMINFO_VARS
,

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

84 
	#SIOCWANDEV
 0x894A

	)

86 
	#SIOCOUTQNSD
 0x894B

	)

90 
	#SIOCDARP
 0x8953

	)

91 
	#SIOCGARP
 0x8954

	)

92 
	#SIOCSARP
 0x8955

	)

95 
	#SIOCDRARP
 0x8960

	)

96 
	#SIOCGRARP
 0x8961

	)

97 
	#SIOCSRARP
 0x8962

	)

101 
	#SIOCGIFMAP
 0x8970

	)

102 
	#SIOCSIFMAP
 0x8971

	)

106 
	#SIOCADDDLCI
 0x8980

	)

107 
	#SIOCDELDLCI
 0x8981

	)

109 
	#SIOCGIFVLAN
 0x8982

	)

110 
	#SIOCSIFVLAN
 0x8983

	)

114 
	#SIOCBONDENSLAVE
 0x8990

	)

115 
	#SIOCBONDRELEASE
 0x8991

	)

116 
	#SIOCBONDSETHWADDR
 0x8992

	)

117 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

118 
	#SIOCBONDINFOQUERY
 0x8994

	)

119 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

122 
	#SIOCBRADDBR
 0x89a0

	)

123 
	#SIOCBRDELBR
 0x89a1

	)

124 
	#SIOCBRADDIF
 0x89a2

	)

125 
	#SIOCBRDELIF
 0x89a3

	)

128 
	#SIOCSHWTSTAMP
 0x89b0

	)

129 
	#SIOCGHWTSTAMP
 0x89b1

	)

142 
	#SIOCDEVPRIVATE
 0x89F0

	)

148 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	gcom∂ëi⁄
;

31 
	#CTL_MAXNAME
 10

	)

36 
	s__sys˘l_¨gs
 {

37 *
	m«me
;

38 
	m∆í
;

39 *
	mﬁdvÆ
;

40 
size_t
 *
	mﬁdÀ≈
;

41 *
	m√wvÆ
;

42 
size_t
 
	m√wÀn
;

43 
	m__unu£d
[4];

52 
	mCTL_KERN
=1,

53 
	mCTL_VM
=2,

54 
	mCTL_NET
=3,

55 
	mCTL_PROC
=4,

56 
	mCTL_FS
=5,

57 
	mCTL_DEBUG
=6,

58 
	mCTL_DEV
=7,

59 
	mCTL_BUS
=8,

60 
	mCTL_ABI
=9,

61 
	mCTL_CPU
=10,

62 
	mCTL_ARLAN
=254,

63 
	mCTL_S390DBF
=5677,

64 
	mCTL_SUNRPC
=7249,

65 
	mCTL_PM
=9899,

66 
	mCTL_FRV
=9898,

72 
	mCTL_BUS_ISA
=1

78 
	mINOTIFY_MAX_USER_INSTANCES
=1,

79 
	mINOTIFY_MAX_USER_WATCHES
=2,

80 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

86 
	mKERN_OSTYPE
=1,

87 
	mKERN_OSRELEASE
=2,

88 
	mKERN_OSREV
=3,

89 
	mKERN_VERSION
=4,

90 
	mKERN_SECUREMASK
=5,

91 
	mKERN_PROF
=6,

92 
	mKERN_NODENAME
=7,

93 
	mKERN_DOMAINNAME
=8,

95 
	mKERN_PANIC
=15,

96 
	mKERN_REALROOTDEV
=16,

98 
	mKERN_SPARC_REBOOT
=21,

99 
	mKERN_CTLALTDEL
=22,

100 
	mKERN_PRINTK
=23,

101 
	mKERN_NAMETRANS
=24,

102 
	mKERN_PPC_HTABRECLAIM
=25,

103 
	mKERN_PPC_ZEROPAGED
=26,

104 
	mKERN_PPC_POWERSAVE_NAP
=27,

105 
	mKERN_MODPROBE
=28,

106 
	mKERN_SG_BIG_BUFF
=29,

107 
	mKERN_ACCT
=30,

108 
	mKERN_PPC_L2CR
=31,

110 
	mKERN_RTSIGNR
=32,

111 
	mKERN_RTSIGMAX
=33,

113 
	mKERN_SHMMAX
=34,

114 
	mKERN_MSGMAX
=35,

115 
	mKERN_MSGMNB
=36,

116 
	mKERN_MSGPOOL
=37,

117 
	mKERN_SYSRQ
=38,

118 
	mKERN_MAX_THREADS
=39,

119 
	mKERN_RANDOM
=40,

120 
	mKERN_SHMALL
=41,

121 
	mKERN_MSGMNI
=42,

122 
	mKERN_SEM
=43,

123 
	mKERN_SPARC_STOP_A
=44,

124 
	mKERN_SHMMNI
=45,

125 
	mKERN_OVERFLOWUID
=46,

126 
	mKERN_OVERFLOWGID
=47,

127 
	mKERN_SHMPATH
=48,

128 
	mKERN_HOTPLUG
=49,

129 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

130 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

131 
	mKERN_CORE_USES_PID
=52,

132 
	mKERN_TAINTED
=53,

133 
	mKERN_CADPID
=54,

134 
	mKERN_PIDMAX
=55,

135 
	mKERN_CORE_PATTERN
=56,

136 
	mKERN_PANIC_ON_OOPS
=57,

137 
	mKERN_HPPA_PWRSW
=58,

138 
	mKERN_HPPA_UNALIGNED
=59,

139 
	mKERN_PRINTK_RATELIMIT
=60,

140 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

141 
	mKERN_PTY
=62,

142 
	mKERN_NGROUPS_MAX
=63,

143 
	mKERN_SPARC_SCONS_PWROFF
=64,

144 
	mKERN_HZ_TIMER
=65,

145 
	mKERN_UNKNOWN_NMI_PANIC
=66,

146 
	mKERN_BOOTLOADER_TYPE
=67,

147 
	mKERN_RANDOMIZE
=68,

148 
	mKERN_SETUID_DUMPABLE
=69,

149 
	mKERN_SPIN_RETRY
=70,

150 
	mKERN_ACPI_VIDEO_FLAGS
=71,

151 
	mKERN_IA64_UNALIGNED
=72,

152 
	mKERN_COMPAT_LOG
=73,

153 
	mKERN_MAX_LOCK_DEPTH
=74,

154 
	mKERN_NMI_WATCHDOG
=75,

155 
	mKERN_PANIC_ON_NMI
=76,

156 
	mKERN_PANIC_ON_WARN
=77,

164 
	mVM_UNUSED1
=1,

165 
	mVM_UNUSED2
=2,

166 
	mVM_UNUSED3
=3,

167 
	mVM_UNUSED4
=4,

168 
	mVM_OVERCOMMIT_MEMORY
=5,

169 
	mVM_UNUSED5
=6,

170 
	mVM_UNUSED7
=7,

171 
	mVM_UNUSED8
=8,

172 
	mVM_UNUSED9
=9,

173 
	mVM_PAGE_CLUSTER
=10,

174 
	mVM_DIRTY_BACKGROUND
=11,

175 
	mVM_DIRTY_RATIO
=12,

176 
	mVM_DIRTY_WB_CS
=13,

177 
	mVM_DIRTY_EXPIRE_CS
=14,

178 
	mVM_NR_PDFLUSH_THREADS
=15,

179 
	mVM_OVERCOMMIT_RATIO
=16,

180 
	mVM_PAGEBUF
=17,

181 
	mVM_HUGETLB_PAGES
=18,

182 
	mVM_SWAPPINESS
=19,

183 
	mVM_LOWMEM_RESERVE_RATIO
=20,

184 
	mVM_MIN_FREE_KBYTES
=21,

185 
	mVM_MAX_MAP_COUNT
=22,

186 
	mVM_LAPTOP_MODE
=23,

187 
	mVM_BLOCK_DUMP
=24,

188 
	mVM_HUGETLB_GROUP
=25,

189 
	mVM_VFS_CACHE_PRESSURE
=26,

190 
	mVM_LEGACY_VA_LAYOUT
=27,

191 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

192 
	mVM_DROP_PAGECACHE
=29,

193 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

194 
	mVM_ZONE_RECLAIM_MODE
=31,

195 
	mVM_MIN_UNMAPPED
=32,

196 
	mVM_PANIC_ON_OOM
=33,

197 
	mVM_VDSO_ENABLED
=34,

198 
	mVM_MIN_SLAB
=35,

205 
	mNET_CORE
=1,

206 
	mNET_ETHER
=2,

207 
	mNET_802
=3,

208 
	mNET_UNIX
=4,

209 
	mNET_IPV4
=5,

210 
	mNET_IPX
=6,

211 
	mNET_ATALK
=7,

212 
	mNET_NETROM
=8,

213 
	mNET_AX25
=9,

214 
	mNET_BRIDGE
=10,

215 
	mNET_ROSE
=11,

216 
	mNET_IPV6
=12,

217 
	mNET_X25
=13,

218 
	mNET_TR
=14,

219 
	mNET_DECNET
=15,

220 
	mNET_ECONET
=16,

221 
	mNET_SCTP
=17,

222 
	mNET_LLC
=18,

223 
	mNET_NETFILTER
=19,

224 
	mNET_DCCP
=20,

225 
	mNET_IRDA
=412,

231 
	mRANDOM_POOLSIZE
=1,

232 
	mRANDOM_ENTROPY_COUNT
=2,

233 
	mRANDOM_READ_THRESH
=3,

234 
	mRANDOM_WRITE_THRESH
=4,

235 
	mRANDOM_BOOT_ID
=5,

236 
	mRANDOM_UUID
=6

242 
	mPTY_MAX
=1,

243 
	mPTY_NR
=2

249 
	mBUS_ISA_MEM_BASE
=1,

250 
	mBUS_ISA_PORT_BASE
=2,

251 
	mBUS_ISA_PORT_SHIFT
=3

257 
	mNET_CORE_WMEM_MAX
=1,

258 
	mNET_CORE_RMEM_MAX
=2,

259 
	mNET_CORE_WMEM_DEFAULT
=3,

260 
	mNET_CORE_RMEM_DEFAULT
=4,

262 
	mNET_CORE_MAX_BACKLOG
=6,

263 
	mNET_CORE_FASTROUTE
=7,

264 
	mNET_CORE_MSG_COST
=8,

265 
	mNET_CORE_MSG_BURST
=9,

266 
	mNET_CORE_OPTMEM_MAX
=10,

267 
	mNET_CORE_HOT_LIST_LENGTH
=11,

268 
	mNET_CORE_DIVERT_VERSION
=12,

269 
	mNET_CORE_NO_CONG_THRESH
=13,

270 
	mNET_CORE_NO_CONG
=14,

271 
	mNET_CORE_LO_CONG
=15,

272 
	mNET_CORE_MOD_CONG
=16,

273 
	mNET_CORE_DEV_WEIGHT
=17,

274 
	mNET_CORE_SOMAXCONN
=18,

275 
	mNET_CORE_BUDGET
=19,

276 
	mNET_CORE_AEVENT_ETIME
=20,

277 
	mNET_CORE_AEVENT_RSEQTH
=21,

278 
	mNET_CORE_WARNINGS
=22,

289 
	mNET_UNIX_DESTROY_DELAY
=1,

290 
	mNET_UNIX_DELETE_DELAY
=2,

291 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

297 
	mNET_NF_CONNTRACK_MAX
=1,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

305 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

306 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

307 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

308 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

309 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

310 
	mNET_NF_CONNTRACK_BUCKETS
=14,

311 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

312 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

313 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

314 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

315 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

322 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

323 
	mNET_NF_CONNTRACK_COUNT
=27,

324 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

325 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

326 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

327 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

328 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

335 
	mNET_IPV4_FORWARD
=8,

336 
	mNET_IPV4_DYNADDR
=9,

338 
	mNET_IPV4_CONF
=16,

339 
	mNET_IPV4_NEIGH
=17,

340 
	mNET_IPV4_ROUTE
=18,

341 
	mNET_IPV4_FIB_HASH
=19,

342 
	mNET_IPV4_NETFILTER
=20,

344 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

345 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

346 
	mNET_IPV4_TCP_SACK
=35,

347 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

348 
	mNET_IPV4_DEFAULT_TTL
=37,

349 
	mNET_IPV4_AUTOCONFIG
=38,

350 
	mNET_IPV4_NO_PMTU_DISC
=39,

351 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

352 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

353 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

354 
	mNET_IPV4_IPFRAG_TIME
=43,

355 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

356 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

357 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

358 
	mNET_IPV4_TCP_RETRIES1
=47,

359 
	mNET_IPV4_TCP_RETRIES2
=48,

360 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

361 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

362 
	mNET_TCP_SYNCOOKIES
=51,

363 
	mNET_TCP_STDURG
=52,

364 
	mNET_TCP_RFC1337
=53,

365 
	mNET_TCP_SYN_TAILDROP
=54,

366 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

367 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

368 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

369 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

370 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

371 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

372 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

373 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

374 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

375 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

376 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

377 
	mNET_TCP_TW_RECYCLE
=66,

378 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

379 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

380 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

381 
	mNET_IPV4_INET_PEER_MINTTL
=70,

382 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

383 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

384 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

385 
	mNET_TCP_ORPHAN_RETRIES
=74,

386 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

387 
	mNET_TCP_SYNACK_RETRIES
=76,

388 
	mNET_TCP_MAX_ORPHANS
=77,

389 
	mNET_TCP_MAX_TW_BUCKETS
=78,

390 
	mNET_TCP_FACK
=79,

391 
	mNET_TCP_REORDERING
=80,

392 
	mNET_TCP_ECN
=81,

393 
	mNET_TCP_DSACK
=82,

394 
	mNET_TCP_MEM
=83,

395 
	mNET_TCP_WMEM
=84,

396 
	mNET_TCP_RMEM
=85,

397 
	mNET_TCP_APP_WIN
=86,

398 
	mNET_TCP_ADV_WIN_SCALE
=87,

399 
	mNET_IPV4_NONLOCAL_BIND
=88,

400 
	mNET_IPV4_ICMP_RATELIMIT
=89,

401 
	mNET_IPV4_ICMP_RATEMASK
=90,

402 
	mNET_TCP_TW_REUSE
=91,

403 
	mNET_TCP_FRTO
=92,

404 
	mNET_TCP_LOW_LATENCY
=93,

405 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

406 
	mNET_IPV4_IGMP_MAX_MSF
=96,

407 
	mNET_TCP_NO_METRICS_SAVE
=97,

408 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

409 
	mNET_TCP_MODERATE_RCVBUF
=106,

410 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

411 
	mNET_TCP_BIC_BETA
=108,

412 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

413 
	mNET_TCP_CONG_CONTROL
=110,

414 
	mNET_TCP_ABC
=111,

415 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

416 
	mNET_TCP_MTU_PROBING
=113,

417 
	mNET_TCP_BASE_MSS
=114,

418 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

419 
	mNET_TCP_DMA_COPYBREAK
=116,

420 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

421 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

422 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

423 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

424 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

425 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

426 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

427 
	mNET_TCP_MAX_SSTHRESH
=124,

428 
	mNET_TCP_FRTO_RESPONSE
=125,

432 
	mNET_IPV4_ROUTE_FLUSH
=1,

433 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

434 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

435 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

436 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

437 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

438 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

439 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

440 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

441 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

442 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

443 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

444 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

445 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

446 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

447 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

448 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

449 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

450 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

455 
	mNET_PROTO_CONF_ALL
=-2,

456 
	mNET_PROTO_CONF_DEFAULT
=-3

463 
	mNET_IPV4_CONF_FORWARDING
=1,

464 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

465 
	mNET_IPV4_CONF_PROXY_ARP
=3,

466 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

467 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

468 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

469 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

470 
	mNET_IPV4_CONF_RP_FILTER
=8,

471 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

472 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

473 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

474 
	mNET_IPV4_CONF_TAG
=12,

475 
	mNET_IPV4_CONF_ARPFILTER
=13,

476 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

477 
	mNET_IPV4_CONF_NOXFRM
=15,

478 
	mNET_IPV4_CONF_NOPOLICY
=16,

479 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

480 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

481 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

482 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

483 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

484 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

490 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

498 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

499 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

500 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

501 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

502 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

503 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

504 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

507 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

508 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

514 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

515 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

516 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

517 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

522 
	mNET_IPV6_CONF
=16,

523 
	mNET_IPV6_NEIGH
=17,

524 
	mNET_IPV6_ROUTE
=18,

525 
	mNET_IPV6_ICMP
=19,

526 
	mNET_IPV6_BINDV6ONLY
=20,

527 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

528 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

529 
	mNET_IPV6_IP6FRAG_TIME
=23,

530 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

531 
	mNET_IPV6_MLD_MAX_MSF
=25,

535 
	mNET_IPV6_ROUTE_FLUSH
=1,

536 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

537 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

538 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

539 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

540 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

541 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

542 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

543 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

544 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

548 
	mNET_IPV6_FORWARDING
=1,

549 
	mNET_IPV6_HOP_LIMIT
=2,

550 
	mNET_IPV6_MTU
=3,

551 
	mNET_IPV6_ACCEPT_RA
=4,

552 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

553 
	mNET_IPV6_AUTOCONF
=6,

554 
	mNET_IPV6_DAD_TRANSMITS
=7,

555 
	mNET_IPV6_RTR_SOLICITS
=8,

556 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

557 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

558 
	mNET_IPV6_USE_TEMPADDR
=11,

559 
	mNET_IPV6_TEMP_VALID_LFT
=12,

560 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

561 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

562 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

563 
	mNET_IPV6_MAX_ADDRESSES
=16,

564 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

565 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

566 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

567 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

568 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

569 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

570 
	mNET_IPV6_PROXY_NDP
=23,

571 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

572 
	mNET_IPV6_ACCEPT_RA_FROM_LOCAL
=26,

573 
	m__NET_IPV6_MAX


578 
	mNET_IPV6_ICMP_RATELIMIT
=1

583 
	mNET_NEIGH_MCAST_SOLICIT
=1,

584 
	mNET_NEIGH_UCAST_SOLICIT
=2,

585 
	mNET_NEIGH_APP_SOLICIT
=3,

586 
	mNET_NEIGH_RETRANS_TIME
=4,

587 
	mNET_NEIGH_REACHABLE_TIME
=5,

588 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

589 
	mNET_NEIGH_GC_STALE_TIME
=7,

590 
	mNET_NEIGH_UNRES_QLEN
=8,

591 
	mNET_NEIGH_PROXY_QLEN
=9,

592 
	mNET_NEIGH_ANYCAST_DELAY
=10,

593 
	mNET_NEIGH_PROXY_DELAY
=11,

594 
	mNET_NEIGH_LOCKTIME
=12,

595 
	mNET_NEIGH_GC_INTERVAL
=13,

596 
	mNET_NEIGH_GC_THRESH1
=14,

597 
	mNET_NEIGH_GC_THRESH2
=15,

598 
	mNET_NEIGH_GC_THRESH3
=16,

599 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

600 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

605 
	mNET_DCCP_DEFAULT
=1,

610 
	mNET_IPX_PPROP_BROADCASTING
=1,

611 
	mNET_IPX_FORWARDING
=2

616 
	mNET_LLC2
=1,

617 
	mNET_LLC_STATION
=2,

622 
	mNET_LLC2_TIMEOUT
=1,

627 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

632 
	mNET_LLC2_ACK_TIMEOUT
=1,

633 
	mNET_LLC2_P_TIMEOUT
=2,

634 
	mNET_LLC2_REJ_TIMEOUT
=3,

635 
	mNET_LLC2_BUSY_TIMEOUT
=4,

640 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

641 
	mNET_ATALK_AARP_TICK_TIME
=2,

642 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

643 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

649 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

650 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

651 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

652 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

653 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

654 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

655 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

656 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

657 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

658 
	mNET_NETROM_ROUTING_CONTROL
=10,

659 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

660 
	mNET_NETROM_RESET
=12

665 
	mNET_AX25_IP_DEFAULT_MODE
=1,

666 
	mNET_AX25_DEFAULT_MODE
=2,

667 
	mNET_AX25_BACKOFF_TYPE
=3,

668 
	mNET_AX25_CONNECT_MODE
=4,

669 
	mNET_AX25_STANDARD_WINDOW
=5,

670 
	mNET_AX25_EXTENDED_WINDOW
=6,

671 
	mNET_AX25_T1_TIMEOUT
=7,

672 
	mNET_AX25_T2_TIMEOUT
=8,

673 
	mNET_AX25_T3_TIMEOUT
=9,

674 
	mNET_AX25_IDLE_TIMEOUT
=10,

675 
	mNET_AX25_N2
=11,

676 
	mNET_AX25_PACLEN
=12,

677 
	mNET_AX25_PROTOCOL
=13,

678 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

683 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

684 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

685 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

686 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

687 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

688 
	mNET_ROSE_ROUTING_CONTROL
=6,

689 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

690 
	mNET_ROSE_MAX_VCS
=8,

691 
	mNET_ROSE_WINDOW_SIZE
=9,

692 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

697 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

698 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

699 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

700 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

701 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

702 
	mNET_X25_FORWARD
=6

708 
	mNET_TR_RIF_TIMEOUT
=1

713 
	mNET_DECNET_NODE_TYPE
 = 1,

714 
	mNET_DECNET_NODE_ADDRESS
 = 2,

715 
	mNET_DECNET_NODE_NAME
 = 3,

716 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

717 
	mNET_DECNET_TIME_WAIT
 = 5,

718 
	mNET_DECNET_DN_COUNT
 = 6,

719 
	mNET_DECNET_DI_COUNT
 = 7,

720 
	mNET_DECNET_DR_COUNT
 = 8,

721 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

722 
	mNET_DECNET_CONF
 = 10,

723 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

724 
	mNET_DECNET_MEM
 = 12,

725 
	mNET_DECNET_RMEM
 = 13,

726 
	mNET_DECNET_WMEM
 = 14,

727 
	mNET_DECNET_DEBUG_LEVEL
 = 255

732 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

733 
	mNET_DECNET_CONF_DDCMP
 = -3,

734 
	mNET_DECNET_CONF_PPP
 = -4,

735 
	mNET_DECNET_CONF_X25
 = -5,

736 
	mNET_DECNET_CONF_GRE
 = -6,

737 
	mNET_DECNET_CONF_ETHER
 = -7

744 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

745 
	mNET_DECNET_CONF_DEV_T1
 = 2,

746 
	mNET_DECNET_CONF_DEV_T2
 = 3,

747 
	mNET_DECNET_CONF_DEV_T3
 = 4,

748 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

749 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

750 
	mNET_DECNET_CONF_DEV_STATE
 = 7

755 
	mNET_SCTP_RTO_INITIAL
 = 1,

756 
	mNET_SCTP_RTO_MIN
 = 2,

757 
	mNET_SCTP_RTO_MAX
 = 3,

758 
	mNET_SCTP_RTO_ALPHA
 = 4,

759 
	mNET_SCTP_RTO_BETA
 = 5,

760 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

761 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

762 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

763 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

764 
	mNET_SCTP_HB_INTERVAL
 = 10,

765 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

766 
	mNET_SCTP_MAX_BURST
 = 12,

767 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

768 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

769 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

770 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

771 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

776 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

777 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

778 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

779 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

780 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

785 
	mNET_IRDA_DISCOVERY
=1,

786 
	mNET_IRDA_DEVNAME
=2,

787 
	mNET_IRDA_DEBUG
=3,

788 
	mNET_IRDA_FAST_POLL
=4,

789 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

790 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

791 
	mNET_IRDA_SLOT_TIMEOUT
=7,

792 
	mNET_IRDA_MAX_BAUD_RATE
=8,

793 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

794 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

795 
	mNET_IRDA_MAX_TX_WINDOW
=11,

796 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

797 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

798 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

805 
	mFS_NRINODE
=1,

806 
	mFS_STATINODE
=2,

807 
	mFS_MAXINODE
=3,

808 
	mFS_NRDQUOT
=4,

809 
	mFS_MAXDQUOT
=5,

810 
	mFS_NRFILE
=6,

811 
	mFS_MAXFILE
=7,

812 
	mFS_DENTRY
=8,

813 
	mFS_NRSUPER
=9,

814 
	mFS_MAXSUPER
=10,

815 
	mFS_OVERFLOWUID
=11,

816 
	mFS_OVERFLOWGID
=12,

817 
	mFS_LEASES
=13,

818 
	mFS_DIR_NOTIFY
=14,

819 
	mFS_LEASE_TIME
=15,

820 
	mFS_DQSTATS
=16,

821 
	mFS_XFS
=17,

822 
	mFS_AIO_NR
=18,

823 
	mFS_AIO_MAX_NR
=19,

824 
	mFS_INOTIFY
=20,

825 
	mFS_OCFS2
=988,

830 
	mFS_DQ_LOOKUPS
 = 1,

831 
	mFS_DQ_DROPS
 = 2,

832 
	mFS_DQ_READS
 = 3,

833 
	mFS_DQ_WRITES
 = 4,

834 
	mFS_DQ_CACHE_HITS
 = 5,

835 
	mFS_DQ_ALLOCATED
 = 6,

836 
	mFS_DQ_FREE
 = 7,

837 
	mFS_DQ_SYNCS
 = 8,

838 
	mFS_DQ_WARNINGS
 = 9,

845 
	mDEV_CDROM
=1,

846 
	mDEV_HWMON
=2,

847 
	mDEV_PARPORT
=3,

848 
	mDEV_RAID
=4,

849 
	mDEV_MAC_HID
=5,

850 
	mDEV_SCSI
=6,

851 
	mDEV_IPMI
=7,

856 
	mDEV_CDROM_INFO
=1,

857 
	mDEV_CDROM_AUTOCLOSE
=2,

858 
	mDEV_CDROM_AUTOEJECT
=3,

859 
	mDEV_CDROM_DEBUG
=4,

860 
	mDEV_CDROM_LOCK
=5,

861 
	mDEV_CDROM_CHECK_MEDIA
=6

866 
	mDEV_PARPORT_DEFAULT
=-3

871 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

872 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

877 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

878 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

883 
	mDEV_PARPORT_SPINTIME
=1,

884 
	mDEV_PARPORT_BASE_ADDR
=2,

885 
	mDEV_PARPORT_IRQ
=3,

886 
	mDEV_PARPORT_DMA
=4,

887 
	mDEV_PARPORT_MODES
=5,

888 
	mDEV_PARPORT_DEVICES
=6,

889 
	mDEV_PARPORT_AUTOPROBE
=16

894 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

899 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

904 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

905 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

906 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

907 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

908 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

909 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

914 
	mDEV_SCSI_LOGGING_LEVEL
=1,

919 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

925 
	mABI_DEFHANDLER_COFF
=1,

926 
	mABI_DEFHANDLER_ELF
=2,

927 
	mABI_DEFHANDLER_LCALL7
=3,

928 
	mABI_DEFHANDLER_LIBCSO
=4,

929 
	mABI_TRACE
=5,

930 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/linux/tc_act/tc_csum.h

1 #i‚de‡
__LINUX_TC_CSUM_H


2 
	#__LINUX_TC_CSUM_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TCA_ACT_CSUM
 16

	)

10 
	mTCA_CSUM_UNSPEC
,

11 
	mTCA_CSUM_PARMS
,

12 
	mTCA_CSUM_TM
,

13 
	m__TCA_CSUM_MAX


15 
	#TCA_CSUM_MAX
 (
__TCA_CSUM_MAX
 - 1)

	)

18 
	mTCA_CSUM_UPDATE_FLAG_IPV4HDR
 = 1,

19 
	mTCA_CSUM_UPDATE_FLAG_ICMP
 = 2,

20 
	mTCA_CSUM_UPDATE_FLAG_IGMP
 = 4,

21 
	mTCA_CSUM_UPDATE_FLAG_TCP
 = 8,

22 
	mTCA_CSUM_UPDATE_FLAG_UDP
 = 16,

23 
	mTCA_CSUM_UPDATE_FLAG_UDPLITE
 = 32

26 
	stc_csum
 {

27 
	mtc_gí
;

29 
__u32
 
	mupd©e_Êags
;

	@/usr/include/linux/tc_act/tc_defact.h

1 #i‚de‡
__LINUX_TC_DEF_H


2 
	#__LINUX_TC_DEF_H


	)

4 
	~<löux/pkt_˛s.h
>

6 
	stc_deÁ˘
 {

7 
	mtc_gí
;

11 
	mTCA_DEF_UNSPEC
,

12 
	mTCA_DEF_TM
,

13 
	mTCA_DEF_PARMS
,

14 
	mTCA_DEF_DATA
,

15 
	m__TCA_DEF_MAX


17 
	#TCA_DEF_MAX
 (
__TCA_DEF_MAX
 - 1)

	)

	@/usr/include/linux/tc_act/tc_gact.h

1 #i‚de‡
__LINUX_TC_GACT_H


2 
	#__LINUX_TC_GACT_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TCA_ACT_GACT
 5

	)

8 
	stc_ga˘
 {

9 
	mtc_gí
;

13 
	stc_ga˘_p
 {

14 
	#PGACT_NONE
 0

	)

15 
	#PGACT_NETRAND
 1

	)

16 
	#PGACT_DETERM
 2

	)

17 
	#MAX_RAND
 (
PGACT_DETERM
 + 1 )

	)

18 
__u16
 
	m±y≥
;

19 
__u16
 
	mpvÆ
;

20 
	m∑˘i⁄
;

24 
	mTCA_GACT_UNSPEC
,

25 
	mTCA_GACT_TM
,

26 
	mTCA_GACT_PARMS
,

27 
	mTCA_GACT_PROB
,

28 
	m__TCA_GACT_MAX


30 
	#TCA_GACT_MAX
 (
__TCA_GACT_MAX
 - 1)

	)

	@/usr/include/linux/tc_act/tc_ipt.h

1 #i‚de‡
__LINUX_TC_IPT_H


2 
	#__LINUX_TC_IPT_H


	)

4 
	~<löux/pkt_˛s.h
>

6 
	#TCA_ACT_IPT
 6

	)

7 
	#TCA_ACT_XT
 10

	)

10 
	mTCA_IPT_UNSPEC
,

11 
	mTCA_IPT_TABLE
,

12 
	mTCA_IPT_HOOK
,

13 
	mTCA_IPT_INDEX
,

14 
	mTCA_IPT_CNT
,

15 
	mTCA_IPT_TM
,

16 
	mTCA_IPT_TARG
,

17 
	m__TCA_IPT_MAX


19 
	#TCA_IPT_MAX
 (
__TCA_IPT_MAX
 - 1)

	)

	@/usr/include/linux/tc_act/tc_mirred.h

1 #i‚de‡
__LINUX_TC_MIR_H


2 
	#__LINUX_TC_MIR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TCA_ACT_MIRRED
 8

	)

8 
	#TCA_EGRESS_REDIR
 1

	)

9 
	#TCA_EGRESS_MIRROR
 2

	)

10 
	#TCA_INGRESS_REDIR
 3

	)

11 
	#TCA_INGRESS_MIRROR
 4

	)

13 
	stc_múªd
 {

14 
	mtc_gí
;

15 
	mó˘i⁄
;

16 
__u32
 
	mifödex
;

20 
	mTCA_MIRRED_UNSPEC
,

21 
	mTCA_MIRRED_TM
,

22 
	mTCA_MIRRED_PARMS
,

23 
	m__TCA_MIRRED_MAX


25 
	#TCA_MIRRED_MAX
 (
__TCA_MIRRED_MAX
 - 1)

	)

	@/usr/include/linux/tc_act/tc_nat.h

1 #i‚de‡
__LINUX_TC_NAT_H


2 
	#__LINUX_TC_NAT_H


	)

4 
	~<löux/pkt_˛s.h
>

5 
	~<löux/ty≥s.h
>

7 
	#TCA_ACT_NAT
 9

	)

10 
	mTCA_NAT_UNSPEC
,

11 
	mTCA_NAT_PARMS
,

12 
	mTCA_NAT_TM
,

13 
	m__TCA_NAT_MAX


15 
	#TCA_NAT_MAX
 (
__TCA_NAT_MAX
 - 1)

	)

17 
	#TCA_NAT_FLAG_EGRESS
 1

	)

19 
	stc_«t
 {

20 
	mtc_gí
;

21 
__be32
 
	mﬁd_addr
;

22 
__be32
 
	m√w_addr
;

23 
__be32
 
	mmask
;

24 
__u32
 
	mÊags
;

	@/usr/include/linux/tc_act/tc_pedit.h

1 #i‚de‡
__LINUX_TC_PED_H


2 
	#__LINUX_TC_PED_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TCA_ACT_PEDIT
 7

	)

10 
	mTCA_PEDIT_UNSPEC
,

11 
	mTCA_PEDIT_TM
,

12 
	mTCA_PEDIT_PARMS
,

13 
	m__TCA_PEDIT_MAX


15 
	#TCA_PEDIT_MAX
 (
__TCA_PEDIT_MAX
 - 1)

	)

17 
	stc_≥dô_key
 {

18 
__u32
 
	mmask
;

19 
__u32
 
	mvÆ
;

20 
__u32
 
	moff
;

21 
__u32
 
	m©
;

22 
__u32
 
	moffmask
;

23 
__u32
 
	mshi·
;

26 
	stc_≥dô_£l
 {

27 
	mtc_gí
;

28 
	mnkeys
;

29 
	mÊags
;

30 
tc_≥dô_key
 
	mkeys
[0];

32 
	#tc_≥dô
 
tc_≥dô_£l


	)

	@/usr/include/linux/tc_act/tc_skbedit.h

20 #i‚de‡
__LINUX_TC_SKBEDIT_H


21 
	#__LINUX_TC_SKBEDIT_H


	)

23 
	~<löux/pkt_˛s.h
>

25 
	#TCA_ACT_SKBEDIT
 11

	)

27 
	#SKBEDIT_F_PRIORITY
 0x1

	)

28 
	#SKBEDIT_F_QUEUE_MAPPING
 0x2

	)

29 
	#SKBEDIT_F_MARK
 0x4

	)

31 
	stc_skbedô
 {

32 
	mtc_gí
;

36 
	mTCA_SKBEDIT_UNSPEC
,

37 
	mTCA_SKBEDIT_TM
,

38 
	mTCA_SKBEDIT_PARMS
,

39 
	mTCA_SKBEDIT_PRIORITY
,

40 
	mTCA_SKBEDIT_QUEUE_MAPPING
,

41 
	mTCA_SKBEDIT_MARK
,

42 
	m__TCA_SKBEDIT_MAX


44 
	#TCA_SKBEDIT_MAX
 (
__TCA_SKBEDIT_MAX
 - 1)

	)

	@/usr/include/linux/tc_act/tc_vlan.h

10 #i‚de‡
__LINUX_TC_VLAN_H


11 
	#__LINUX_TC_VLAN_H


	)

13 
	~<löux/pkt_˛s.h
>

15 
	#TCA_ACT_VLAN
 12

	)

17 
	#TCA_VLAN_ACT_POP
 1

	)

18 
	#TCA_VLAN_ACT_PUSH
 2

	)

20 
	stc_vœn
 {

21 
	mtc_gí
;

22 
	mv_a˘i⁄
;

26 
	mTCA_VLAN_UNSPEC
,

27 
	mTCA_VLAN_TM
,

28 
	mTCA_VLAN_PARMS
,

29 
	mTCA_VLAN_PUSH_VLAN_ID
,

30 
	mTCA_VLAN_PUSH_VLAN_PROTOCOL
,

31 
	m__TCA_VLAN_MAX
,

33 
	#TCA_VLAN_MAX
 (
__TCA_VLAN_MAX
 - 1)

	)

	@/usr/include/linux/tc_ematch/tc_em_cmp.h

1 #i‚de‡
__LINUX_TC_EM_CMP_H


2 
	#__LINUX_TC_EM_CMP_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	stcf_em_cmp
 {

8 
__u32
 
	mvÆ
;

9 
__u32
 
	mmask
;

10 
__u16
 
	moff
;

11 
__u8
 
	mÆign
:4;

12 
__u8
 
	mÊags
:4;

13 
__u8
 
	mœyî
:4;

14 
__u8
 
	m›nd
:4;

18 
	mTCF_EM_ALIGN_U8
 = 1,

19 
	mTCF_EM_ALIGN_U16
 = 2,

20 
	mTCF_EM_ALIGN_U32
 = 4

23 
	#TCF_EM_CMP_TRANS
 1

	)

	@/usr/include/linux/tc_ematch/tc_em_meta.h

1 #i‚de‡
__LINUX_TC_EM_META_H


2 
	#__LINUX_TC_EM_META_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

8 
	mTCA_EM_META_UNSPEC
,

9 
	mTCA_EM_META_HDR
,

10 
	mTCA_EM_META_LVALUE
,

11 
	mTCA_EM_META_RVALUE
,

12 
	m__TCA_EM_META_MAX


14 
	#TCA_EM_META_MAX
 (
__TCA_EM_META_MAX
 - 1)

	)

16 
	stcf_mëa_vÆ
 {

17 
__u16
 
	mköd
;

18 
__u8
 
	mshi·
;

19 
__u8
 
	m›
;

22 
	#TCF_META_TYPE_MASK
 (0x‡<< 12)

	)

23 
	#TCF_META_TYPE
(
köd
Ë(((ködË& 
TCF_META_TYPE_MASK
Ë>> 12)

	)

24 
	#TCF_META_ID_MASK
 0x7ff

	)

25 
	#TCF_META_ID
(
köd
Ë((ködË& 
TCF_META_ID_MASK
)

	)

28 
	mTCF_META_TYPE_VAR
,

29 
	mTCF_META_TYPE_INT
,

30 
	m__TCF_META_TYPE_MAX


32 
	#TCF_META_TYPE_MAX
 (
__TCF_META_TYPE_MAX
 - 1)

	)

35 
	mTCF_META_ID_VALUE
,

36 
	mTCF_META_ID_RANDOM
,

37 
	mTCF_META_ID_LOADAVG_0
,

38 
	mTCF_META_ID_LOADAVG_1
,

39 
	mTCF_META_ID_LOADAVG_2
,

40 
	mTCF_META_ID_DEV
,

41 
	mTCF_META_ID_PRIORITY
,

42 
	mTCF_META_ID_PROTOCOL
,

43 
	mTCF_META_ID_PKTTYPE
,

44 
	mTCF_META_ID_PKTLEN
,

45 
	mTCF_META_ID_DATALEN
,

46 
	mTCF_META_ID_MACLEN
,

47 
	mTCF_META_ID_NFMARK
,

48 
	mTCF_META_ID_TCINDEX
,

49 
	mTCF_META_ID_RTCLASSID
,

50 
	mTCF_META_ID_RTIIF
,

51 
	mTCF_META_ID_SK_FAMILY
,

52 
	mTCF_META_ID_SK_STATE
,

53 
	mTCF_META_ID_SK_REUSE
,

54 
	mTCF_META_ID_SK_BOUND_IF
,

55 
	mTCF_META_ID_SK_REFCNT
,

56 
	mTCF_META_ID_SK_SHUTDOWN
,

57 
	mTCF_META_ID_SK_PROTO
,

58 
	mTCF_META_ID_SK_TYPE
,

59 
	mTCF_META_ID_SK_RCVBUF
,

60 
	mTCF_META_ID_SK_RMEM_ALLOC
,

61 
	mTCF_META_ID_SK_WMEM_ALLOC
,

62 
	mTCF_META_ID_SK_OMEM_ALLOC
,

63 
	mTCF_META_ID_SK_WMEM_QUEUED
,

64 
	mTCF_META_ID_SK_RCV_QLEN
,

65 
	mTCF_META_ID_SK_SND_QLEN
,

66 
	mTCF_META_ID_SK_ERR_QLEN
,

67 
	mTCF_META_ID_SK_FORWARD_ALLOCS
,

68 
	mTCF_META_ID_SK_SNDBUF
,

69 
	mTCF_META_ID_SK_ALLOCS
,

70 
	m__TCF_META_ID_SK_ROUTE_CAPS
,

71 
	mTCF_META_ID_SK_HASH
,

72 
	mTCF_META_ID_SK_LINGERTIME
,

73 
	mTCF_META_ID_SK_ACK_BACKLOG
,

74 
	mTCF_META_ID_SK_MAX_ACK_BACKLOG
,

75 
	mTCF_META_ID_SK_PRIO
,

76 
	mTCF_META_ID_SK_RCVLOWAT
,

77 
	mTCF_META_ID_SK_RCVTIMEO
,

78 
	mTCF_META_ID_SK_SNDTIMEO
,

79 
	mTCF_META_ID_SK_SENDMSG_OFF
,

80 
	mTCF_META_ID_SK_WRITE_PENDING
,

81 
	mTCF_META_ID_VLAN_TAG
,

82 
	mTCF_META_ID_RXHASH
,

83 
	m__TCF_META_ID_MAX


85 
	#TCF_META_ID_MAX
 (
__TCF_META_ID_MAX
 - 1)

	)

87 
	stcf_mëa_hdr
 {

88 
tcf_mëa_vÆ
 
	mÀ·
;

89 
tcf_mëa_vÆ
 
	mright
;

	@/usr/include/linux/tc_ematch/tc_em_nbyte.h

1 #i‚de‡
__LINUX_TC_EM_NBYTE_H


2 
	#__LINUX_TC_EM_NBYTE_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	stcf_em_nbyã
 {

8 
__u16
 
	moff
;

9 
__u16
 
	mÀn
:12;

10 
__u8
 
	mœyî
:4;

	@/usr/include/linux/tcp.h

17 #i‚de‡
_LINUX_TCP_H


18 
	#_LINUX_TCP_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<asm/byã‹dî.h
>

22 
	~<löux/sockë.h
>

24 
	st˝hdr
 {

25 
__be16
 
	msour˚
;

26 
__be16
 
	mde°
;

27 
__be32
 
	m£q
;

28 
__be32
 
	mack_£q
;

29 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

30 
__u16
 
	mªs1
:4,

31 
	mdoff
:4,

32 
	mfö
:1,

33 
	msyn
:1,

34 
	mr°
:1,

35 
	mpsh
:1,

36 
	mack
:1,

37 
	murg
:1,

38 
	me˚
:1,

39 
	mcwr
:1;

40 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

41 
__u16
 
	mdoff
:4,

42 
	mªs1
:4,

43 
	mcwr
:1,

44 
	me˚
:1,

45 
	murg
:1,

46 
	mack
:1,

47 
	mpsh
:1,

48 
	mr°
:1,

49 
	msyn
:1,

50 
	mfö
:1;

54 
__be16
 
	mwödow
;

55 
__sum16
 
	mcheck
;

56 
__be16
 
	murg_±r
;

64 
	ut˝_w‹d_hdr
 {

65 
t˝hdr
 
	mhdr
;

66 
__be32
 
	mw‹ds
[5];

69 
	#t˝_Êag_w‹d
(
ç
Ë–((
t˝_w‹d_hdr
 *)—p))->
w‹ds
 [3])

	)

72 
	mTCP_FLAG_CWR
 = 
__c⁄°™t_˝u_to_be32
(0x00800000),

73 
	mTCP_FLAG_ECE
 = 
__c⁄°™t_˝u_to_be32
(0x00400000),

74 
	mTCP_FLAG_URG
 = 
__c⁄°™t_˝u_to_be32
(0x00200000),

75 
	mTCP_FLAG_ACK
 = 
__c⁄°™t_˝u_to_be32
(0x00100000),

76 
	mTCP_FLAG_PSH
 = 
__c⁄°™t_˝u_to_be32
(0x00080000),

77 
	mTCP_FLAG_RST
 = 
__c⁄°™t_˝u_to_be32
(0x00040000),

78 
	mTCP_FLAG_SYN
 = 
__c⁄°™t_˝u_to_be32
(0x00020000),

79 
	mTCP_FLAG_FIN
 = 
__c⁄°™t_˝u_to_be32
(0x00010000),

80 
	mTCP_RESERVED_BITS
 = 
__c⁄°™t_˝u_to_be32
(0x0F000000),

81 
	mTCP_DATA_OFFSET
 = 
__c⁄°™t_˝u_to_be32
(0xF0000000)

87 
	#TCP_MSS_DEFAULT
 536U

	)

88 
	#TCP_MSS_DESIRED
 1220U

	)

91 
	#TCP_NODELAY
 1

	)

92 
	#TCP_MAXSEG
 2

	)

93 
	#TCP_CORK
 3

	)

94 
	#TCP_KEEPIDLE
 4

	)

95 
	#TCP_KEEPINTVL
 5

	)

96 
	#TCP_KEEPCNT
 6

	)

97 
	#TCP_SYNCNT
 7

	)

98 
	#TCP_LINGER2
 8

	)

99 
	#TCP_DEFER_ACCEPT
 9

	)

100 
	#TCP_WINDOW_CLAMP
 10

	)

101 
	#TCP_INFO
 11

	)

102 
	#TCP_QUICKACK
 12

	)

103 
	#TCP_CONGESTION
 13

	)

104 
	#TCP_MD5SIG
 14

	)

105 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

106 
	#TCP_THIN_DUPACK
 17

	)

107 
	#TCP_USER_TIMEOUT
 18

	)

108 
	#TCP_REPAIR
 19

	)

109 
	#TCP_REPAIR_QUEUE
 20

	)

110 
	#TCP_QUEUE_SEQ
 21

	)

111 
	#TCP_REPAIR_OPTIONS
 22

	)

112 
	#TCP_FASTOPEN
 23

	)

113 
	#TCP_TIMESTAMP
 24

	)

114 
	#TCP_NOTSENT_LOWAT
 25

	)

116 
	st˝_ª∑ú_›t
 {

117 
__u32
 
	m›t_code
;

118 
__u32
 
	m›t_vÆ
;

122 
	mTCP_NO_QUEUE
,

123 
	mTCP_RECV_QUEUE
,

124 
	mTCP_SEND_QUEUE
,

125 
	mTCP_QUEUES_NR
,

129 
	#TCPI_OPT_TIMESTAMPS
 1

	)

130 
	#TCPI_OPT_SACK
 2

	)

131 
	#TCPI_OPT_WSCALE
 4

	)

132 
	#TCPI_OPT_ECN
 8

	)

133 
	#TCPI_OPT_ECN_SEEN
 16

	)

134 
	#TCPI_OPT_SYN_DATA
 32

	)

136 
	et˝_ˇ_°©e
 {

137 
	mTCP_CA_O≥n
 = 0,

138 
	#TCPF_CA_O≥n
 (1<<
TCP_CA_O≥n
)

	)

139 
	mTCP_CA_Dis‹dî
 = 1,

140 
	#TCPF_CA_Dis‹dî
 (1<<
TCP_CA_Dis‹dî
)

	)

141 
	mTCP_CA_CWR
 = 2,

142 
	#TCPF_CA_CWR
 (1<<
TCP_CA_CWR
)

	)

143 
	mTCP_CA_Recovîy
 = 3,

144 
	#TCPF_CA_Recovîy
 (1<<
TCP_CA_Recovîy
)

	)

145 
	mTCP_CA_Loss
 = 4

146 
	#TCPF_CA_Loss
 (1<<
TCP_CA_Loss
)

	)

149 
	st˝_öfo
 {

150 
__u8
 
	mt˝i_°©e
;

151 
__u8
 
	mt˝i_ˇ_°©e
;

152 
__u8
 
	mt˝i_ªå™smôs
;

153 
__u8
 
	mt˝i_¥obes
;

154 
__u8
 
	mt˝i_backoff
;

155 
__u8
 
	mt˝i_›ti⁄s
;

156 
__u8
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

158 
__u32
 
	mt˝i_πo
;

159 
__u32
 
	mt˝i_©o
;

160 
__u32
 
	mt˝i_¢d_mss
;

161 
__u32
 
	mt˝i_rcv_mss
;

163 
__u32
 
	mt˝i_u«cked
;

164 
__u32
 
	mt˝i_ßcked
;

165 
__u32
 
	mt˝i_lo°
;

166 
__u32
 
	mt˝i_ªå™s
;

167 
__u32
 
	mt˝i_Áckës
;

170 
__u32
 
	mt˝i_œ°_d©a_£¡
;

171 
__u32
 
	mt˝i_œ°_ack_£¡
;

172 
__u32
 
	mt˝i_œ°_d©a_ªcv
;

173 
__u32
 
	mt˝i_œ°_ack_ªcv
;

176 
__u32
 
	mt˝i_pmtu
;

177 
__u32
 
	mt˝i_rcv_s°hªsh
;

178 
__u32
 
	mt˝i_πt
;

179 
__u32
 
	mt˝i_πtv¨
;

180 
__u32
 
	mt˝i_¢d_s°hªsh
;

181 
__u32
 
	mt˝i_¢d_cwnd
;

182 
__u32
 
	mt˝i_advmss
;

183 
__u32
 
	mt˝i_ª‹dîög
;

185 
__u32
 
	mt˝i_rcv_πt
;

186 
__u32
 
	mt˝i_rcv_•a˚
;

188 
__u32
 
	mt˝i_tŸÆ_ªå™s
;

190 
__u64
 
	mt˝i_∑cög_øã
;

191 
__u64
 
	mt˝i_max_∑cög_øã
;

195 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

197 
	st˝_md5sig
 {

198 
__kî√l_sockaddr_°‹age
 
	mt˝m_addr
;

199 
__u16
 
	m__t˝m_∑d1
;

200 
__u16
 
	mt˝m_keyÀn
;

201 
__u32
 
	m__t˝m_∑d2
;

202 
__u8
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/linux/tcp_metrics.h

3 #i‚de‡
_LINUX_TCP_METRICS_H


4 
	#_LINUX_TCP_METRICS_H


	)

6 
	~<löux/ty≥s.h
>

10 
	#TCP_METRICS_GENL_NAME
 "t˝_mërics"

	)

11 
	#TCP_METRICS_GENL_VERSION
 0x1

	)

13 
	et˝_mëric_ödex
 {

14 
	mTCP_METRIC_RTT
,

15 
	mTCP_METRIC_RTTVAR
,

16 
	mTCP_METRIC_SSTHRESH
,

17 
	mTCP_METRIC_CWND
,

18 
	mTCP_METRIC_REORDERING
,

20 
	mTCP_METRIC_RTT_US
,

21 
	mTCP_METRIC_RTTVAR_US
,

24 
	m__TCP_METRIC_MAX
,

27 
	#TCP_METRIC_MAX
 (
__TCP_METRIC_MAX
 - 1)

	)

30 
	mTCP_METRICS_ATTR_UNSPEC
,

31 
	mTCP_METRICS_ATTR_ADDR_IPV4
,

32 
	mTCP_METRICS_ATTR_ADDR_IPV6
,

33 
	mTCP_METRICS_ATTR_AGE
,

34 
	mTCP_METRICS_ATTR_TW_TSVAL
,

35 
	mTCP_METRICS_ATTR_TW_TS_STAMP
,

36 
	mTCP_METRICS_ATTR_VALS
,

37 
	mTCP_METRICS_ATTR_FOPEN_MSS
,

38 
	mTCP_METRICS_ATTR_FOPEN_SYN_DROPS
,

39 
	mTCP_METRICS_ATTR_FOPEN_SYN_DROP_TS
,

40 
	mTCP_METRICS_ATTR_FOPEN_COOKIE
,

41 
	mTCP_METRICS_ATTR_SADDR_IPV4
,

42 
	mTCP_METRICS_ATTR_SADDR_IPV6
,

44 
	m__TCP_METRICS_ATTR_MAX
,

47 
	#TCP_METRICS_ATTR_MAX
 (
__TCP_METRICS_ATTR_MAX
 - 1)

	)

50 
	mTCP_METRICS_CMD_UNSPEC
,

51 
	mTCP_METRICS_CMD_GET
,

52 
	mTCP_METRICS_CMD_DEL
,

54 
	m__TCP_METRICS_CMD_MAX
,

57 
	#TCP_METRICS_CMD_MAX
 (
__TCP_METRICS_CMD_MAX
 - 1)

	)

	@/usr/include/linux/tipc.h

37 #i‚de‡
_LINUX_TIPC_H_


38 
	#_LINUX_TIPC_H_


	)

40 
	~<löux/ty≥s.h
>

41 
	~<löux/sockios.h
>

47 
	stùc_p‹tid
 {

48 
__u32
 
	mªf
;

49 
__u32
 
	mnode
;

52 
	stùc_«me
 {

53 
__u32
 
	mty≥
;

54 
__u32
 
	mö°™˚
;

57 
	stùc_«me_£q
 {

58 
__u32
 
	mty≥
;

59 
__u32
 
	mlowî
;

60 
__u32
 
	muµî
;

63 
__ölöe__
 
__u32
 
	$tùc_addr
(
z⁄e
,

64 
˛u°î
,

65 
node
)

67  (
z⁄e
 << 24Ë| (
˛u°î
 << 12Ë| 
node
;

68 
	}
}

70 
__ölöe__
 
	$tùc_z⁄e
(
__u32
 
addr
)

72  
addr
 >> 24;

73 
	}
}

75 
__ölöe__
 
	$tùc_˛u°î
(
__u32
 
addr
)

77  (
addr
 >> 12) & 0xfff;

78 
	}
}

80 
__ölöe__
 
	$tùc_node
(
__u32
 
addr
)

82  
addr
 & 0xfff;

83 
	}
}

89 
	#TIPC_CFG_SRV
 0

	)

90 
	#TIPC_TOP_SRV
 1

	)

91 
	#TIPC_LINK_STATE
 2

	)

92 
	#TIPC_RESERVED_TYPES
 64

	)

98 
	#TIPC_ZONE_SCOPE
 1

	)

99 
	#TIPC_CLUSTER_SCOPE
 2

	)

100 
	#TIPC_NODE_SCOPE
 3

	)

106 
	#TIPC_MAX_USER_MSG_SIZE
 66000U

	)

112 
	#TIPC_LOW_IMPORTANCE
 0

	)

113 
	#TIPC_MEDIUM_IMPORTANCE
 1

	)

114 
	#TIPC_HIGH_IMPORTANCE
 2

	)

115 
	#TIPC_CRITICAL_IMPORTANCE
 3

	)

121 
	#TIPC_OK
 0

	)

122 
	#TIPC_ERR_NO_NAME
 1

	)

123 
	#TIPC_ERR_NO_PORT
 2

	)

124 
	#TIPC_ERR_NO_NODE
 3

	)

125 
	#TIPC_ERR_OVERLOAD
 4

	)

126 
	#TIPC_CONN_SHUTDOWN
 5

	)

132 
	#TIPC_SUB_PORTS
 0x01

	)

133 
	#TIPC_SUB_SERVICE
 0x02

	)

134 
	#TIPC_SUB_CANCEL
 0x04

	)

136 
	#TIPC_WAIT_FOREVER
 (~0Ë

	)

138 
	stùc_subs¸
 {

139 
tùc_«me_£q
 
	m£q
;

140 
__u32
 
	mtimeout
;

141 
__u32
 
	mfûãr
;

142 
	mu§_h™dÀ
[8];

145 
	#TIPC_PUBLISHED
 1

	)

146 
	#TIPC_WITHDRAWN
 2

	)

147 
	#TIPC_SUBSCR_TIMEOUT
 3

	)

149 
	stùc_evít
 {

150 
__u32
 
	mevít
;

151 
__u32
 
	mfound_lowî
;

152 
__u32
 
	mfound_uµî
;

153 
tùc_p‹tid
 
	mp‹t
;

154 
tùc_subs¸
 
	ms
;

161 #i‚de‡
AF_TIPC


162 
	#AF_TIPC
 30

	)

165 #i‚de‡
PF_TIPC


166 
	#PF_TIPC
 
AF_TIPC


	)

169 #i‚de‡
SOL_TIPC


170 
	#SOL_TIPC
 271

	)

173 
	#TIPC_ADDR_NAMESEQ
 1

	)

174 
	#TIPC_ADDR_MCAST
 1

	)

175 
	#TIPC_ADDR_NAME
 2

	)

176 
	#TIPC_ADDR_ID
 3

	)

178 
	ssockaddr_tùc
 {

179 
	mÁmûy
;

180 
	maddπy≥
;

181 sig√d 
	msc›e
;

183 
tùc_p‹tid
 
	mid
;

184 
tùc_«me_£q
 
	m«me£q
;

186 
tùc_«me
 
	m«me
;

187 
__u32
 
	mdomaö
;

188 } 
	m«me
;

189 } 
	maddr
;

196 
	#TIPC_ERRINFO
 1

	)

197 
	#TIPC_RETDATA
 2

	)

198 
	#TIPC_DESTNAME
 3

	)

204 
	#TIPC_IMPORTANCE
 127

	)

205 
	#TIPC_SRC_DROPPABLE
 128

	)

206 
	#TIPC_DEST_DROPPABLE
 129

	)

207 
	#TIPC_CONN_TIMEOUT
 130

	)

208 
	#TIPC_NODE_RECVQ_DEPTH
 131

	)

209 
	#TIPC_SOCK_RECVQ_DEPTH
 132

	)

220 
	#TIPC_MAX_MEDIA_NAME
 16

	)

221 
	#TIPC_MAX_IF_NAME
 16

	)

222 
	#TIPC_MAX_BEARER_NAME
 32

	)

223 
	#TIPC_MAX_LINK_NAME
 60

	)

225 
	#SIOCGETLINKNAME
 
SIOCPROTOPRIVATE


	)

227 
	stùc_sioc_ _ªq
 {

228 
__u32
 
	m≥î
;

229 
__u32
 
	mbóªr_id
;

230 
	mlök«me
[
TIPC_MAX_LINK_NAME
];

	@/usr/include/linux/tipc_netlink.h

34 #i‚de‡
_LINUX_TIPC_NETLINK_H_


35 
	#_LINUX_TIPC_NETLINK_H_


	)

37 
	#TIPC_GENL_V2_NAME
 "TIPCv2"

	)

38 
	#TIPC_GENL_V2_VERSION
 0x1

	)

42 
	mTIPC_NL_UNSPEC
,

43 
	mTIPC_NL_LEGACY
,

44 
	mTIPC_NL_BEARER_DISABLE
,

45 
	mTIPC_NL_BEARER_ENABLE
,

46 
	mTIPC_NL_BEARER_GET
,

47 
	mTIPC_NL_BEARER_SET
,

48 
	mTIPC_NL_SOCK_GET
,

49 
	mTIPC_NL_PUBL_GET
,

50 
	mTIPC_NL_LINK_GET
,

51 
	mTIPC_NL_LINK_SET
,

52 
	mTIPC_NL_LINK_RESET_STATS
,

53 
	mTIPC_NL_MEDIA_GET
,

54 
	mTIPC_NL_MEDIA_SET
,

55 
	mTIPC_NL_NODE_GET
,

56 
	mTIPC_NL_NET_GET
,

57 
	mTIPC_NL_NET_SET
,

58 
	mTIPC_NL_NAME_TABLE_GET
,

60 
	m__TIPC_NL_CMD_MAX
,

61 
	mTIPC_NL_CMD_MAX
 = 
__TIPC_NL_CMD_MAX
 - 1

66 
	mTIPC_NLA_UNSPEC
,

67 
	mTIPC_NLA_BEARER
,

68 
	mTIPC_NLA_SOCK
,

69 
	mTIPC_NLA_PUBL
,

70 
	mTIPC_NLA_LINK
,

71 
	mTIPC_NLA_MEDIA
,

72 
	mTIPC_NLA_NODE
,

73 
	mTIPC_NLA_NET
,

74 
	mTIPC_NLA_NAME_TABLE
,

76 
	m__TIPC_NLA_MAX
,

77 
	mTIPC_NLA_MAX
 = 
__TIPC_NLA_MAX
 - 1

82 
	mTIPC_NLA_BEARER_UNSPEC
,

83 
	mTIPC_NLA_BEARER_NAME
,

84 
	mTIPC_NLA_BEARER_PROP
,

85 
	mTIPC_NLA_BEARER_DOMAIN
,

87 
	m__TIPC_NLA_BEARER_MAX
,

88 
	mTIPC_NLA_BEARER_MAX
 = 
__TIPC_NLA_BEARER_MAX
 - 1

93 
	mTIPC_NLA_SOCK_UNSPEC
,

94 
	mTIPC_NLA_SOCK_ADDR
,

95 
	mTIPC_NLA_SOCK_REF
,

96 
	mTIPC_NLA_SOCK_CON
,

97 
	mTIPC_NLA_SOCK_HAS_PUBL
,

99 
	m__TIPC_NLA_SOCK_MAX
,

100 
	mTIPC_NLA_SOCK_MAX
 = 
__TIPC_NLA_SOCK_MAX
 - 1

105 
	mTIPC_NLA_LINK_UNSPEC
,

106 
	mTIPC_NLA_LINK_NAME
,

107 
	mTIPC_NLA_LINK_DEST
,

108 
	mTIPC_NLA_LINK_MTU
,

109 
	mTIPC_NLA_LINK_BROADCAST
,

110 
	mTIPC_NLA_LINK_UP
,

111 
	mTIPC_NLA_LINK_ACTIVE
,

112 
	mTIPC_NLA_LINK_PROP
,

113 
	mTIPC_NLA_LINK_STATS
,

114 
	mTIPC_NLA_LINK_RX
,

115 
	mTIPC_NLA_LINK_TX
,

117 
	m__TIPC_NLA_LINK_MAX
,

118 
	mTIPC_NLA_LINK_MAX
 = 
__TIPC_NLA_LINK_MAX
 - 1

123 
	mTIPC_NLA_MEDIA_UNSPEC
,

124 
	mTIPC_NLA_MEDIA_NAME
,

125 
	mTIPC_NLA_MEDIA_PROP
,

127 
	m__TIPC_NLA_MEDIA_MAX
,

128 
	mTIPC_NLA_MEDIA_MAX
 = 
__TIPC_NLA_MEDIA_MAX
 - 1

133 
	mTIPC_NLA_NODE_UNSPEC
,

134 
	mTIPC_NLA_NODE_ADDR
,

135 
	mTIPC_NLA_NODE_UP
,

137 
	m__TIPC_NLA_NODE_MAX
,

138 
	mTIPC_NLA_NODE_MAX
 = 
__TIPC_NLA_NODE_MAX
 - 1

143 
	mTIPC_NLA_NET_UNSPEC
,

144 
	mTIPC_NLA_NET_ID
,

145 
	mTIPC_NLA_NET_ADDR
,

147 
	m__TIPC_NLA_NET_MAX
,

148 
	mTIPC_NLA_NET_MAX
 = 
__TIPC_NLA_NET_MAX
 - 1

153 
	mTIPC_NLA_NAME_TABLE_UNSPEC
,

154 
	mTIPC_NLA_NAME_TABLE_PUBL
,

156 
	m__TIPC_NLA_NAME_TABLE_MAX
,

157 
	mTIPC_NLA_NAME_TABLE_MAX
 = 
__TIPC_NLA_NAME_TABLE_MAX
 - 1

162 
	mTIPC_NLA_PUBL_UNSPEC
,

164 
	mTIPC_NLA_PUBL_TYPE
,

165 
	mTIPC_NLA_PUBL_LOWER
,

166 
	mTIPC_NLA_PUBL_UPPER
,

167 
	mTIPC_NLA_PUBL_SCOPE
,

168 
	mTIPC_NLA_PUBL_NODE
,

169 
	mTIPC_NLA_PUBL_REF
,

170 
	mTIPC_NLA_PUBL_KEY
,

172 
	m__TIPC_NLA_PUBL_MAX
,

173 
	mTIPC_NLA_PUBL_MAX
 = 
__TIPC_NLA_PUBL_MAX
 - 1

178 
	mTIPC_NLA_CON_UNSPEC
,

180 
	mTIPC_NLA_CON_FLAG
,

181 
	mTIPC_NLA_CON_NODE
,

182 
	mTIPC_NLA_CON_SOCK
,

183 
	mTIPC_NLA_CON_TYPE
,

184 
	mTIPC_NLA_CON_INST
,

186 
	m__TIPC_NLA_CON_MAX
,

187 
	mTIPC_NLA_CON_MAX
 = 
__TIPC_NLA_CON_MAX
 - 1

192 
	mTIPC_NLA_PROP_UNSPEC
,

194 
	mTIPC_NLA_PROP_PRIO
,

195 
	mTIPC_NLA_PROP_TOL
,

196 
	mTIPC_NLA_PROP_WIN
,

198 
	m__TIPC_NLA_PROP_MAX
,

199 
	mTIPC_NLA_PROP_MAX
 = 
__TIPC_NLA_PROP_MAX
 - 1

204 
	mTIPC_NLA_STATS_UNSPEC
,

206 
	mTIPC_NLA_STATS_RX_INFO
,

207 
	mTIPC_NLA_STATS_RX_FRAGMENTS
,

208 
	mTIPC_NLA_STATS_RX_FRAGMENTED
,

209 
	mTIPC_NLA_STATS_RX_BUNDLES
,

210 
	mTIPC_NLA_STATS_RX_BUNDLED
,

211 
	mTIPC_NLA_STATS_TX_INFO
,

212 
	mTIPC_NLA_STATS_TX_FRAGMENTS
,

213 
	mTIPC_NLA_STATS_TX_FRAGMENTED
,

214 
	mTIPC_NLA_STATS_TX_BUNDLES
,

215 
	mTIPC_NLA_STATS_TX_BUNDLED
,

216 
	mTIPC_NLA_STATS_MSG_PROF_TOT
,

217 
	mTIPC_NLA_STATS_MSG_LEN_CNT
,

218 
	mTIPC_NLA_STATS_MSG_LEN_TOT
,

219 
	mTIPC_NLA_STATS_MSG_LEN_P0
,

220 
	mTIPC_NLA_STATS_MSG_LEN_P1
,

221 
	mTIPC_NLA_STATS_MSG_LEN_P2
,

222 
	mTIPC_NLA_STATS_MSG_LEN_P3
,

223 
	mTIPC_NLA_STATS_MSG_LEN_P4
,

224 
	mTIPC_NLA_STATS_MSG_LEN_P5
,

225 
	mTIPC_NLA_STATS_MSG_LEN_P6
,

226 
	mTIPC_NLA_STATS_RX_STATES
,

227 
	mTIPC_NLA_STATS_RX_PROBES
,

228 
	mTIPC_NLA_STATS_RX_NACKS
,

229 
	mTIPC_NLA_STATS_RX_DEFERRED
,

230 
	mTIPC_NLA_STATS_TX_STATES
,

231 
	mTIPC_NLA_STATS_TX_PROBES
,

232 
	mTIPC_NLA_STATS_TX_NACKS
,

233 
	mTIPC_NLA_STATS_TX_ACKS
,

234 
	mTIPC_NLA_STATS_RETRANSMITTED
,

235 
	mTIPC_NLA_STATS_DUPLICATES
,

236 
	mTIPC_NLA_STATS_LINK_CONGS
,

237 
	mTIPC_NLA_STATS_MAX_QUEUE
,

238 
	mTIPC_NLA_STATS_AVG_QUEUE
,

240 
	m__TIPC_NLA_STATS_MAX
,

241 
	mTIPC_NLA_STATS_MAX
 = 
__TIPC_NLA_STATS_MAX
 - 1

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/udp.h

17 #i‚de‡
_LINUX_UDP_H


18 
	#_LINUX_UDP_H


	)

20 
	~<löux/ty≥s.h
>

22 
	sudphdr
 {

23 
__be16
 
	msour˚
;

24 
__be16
 
	mde°
;

25 
__be16
 
	mÀn
;

26 
__sum16
 
	mcheck
;

30 
	#UDP_CORK
 1

	)

31 
	#UDP_ENCAP
 100

	)

32 
	#UDP_NO_CHECK6_TX
 101

	)

33 
	#UDP_NO_CHECK6_RX
 102

	)

36 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

37 
	#UDP_ENCAP_ESPINUDP
 2

	)

38 
	#UDP_ENCAP_L2TPINUDP
 3

	)

	@/usr/include/linux/unix_diag.h

1 #i‚de‡
__UNIX_DIAG_H__


2 
	#__UNIX_DIAG_H__


	)

4 
	~<löux/ty≥s.h
>

6 
	sunix_düg_ªq
 {

7 
__u8
 
	msdüg_Ámûy
;

8 
__u8
 
	msdüg_¥Ÿocﬁ
;

9 
__u16
 
	m∑d
;

10 
__u32
 
	mudüg_°©es
;

11 
__u32
 
	mudüg_öo
;

12 
__u32
 
	mudüg_show
;

13 
__u32
 
	mudüg_cookõ
[2];

16 
	#UDIAG_SHOW_NAME
 0x00000001

	)

17 
	#UDIAG_SHOW_VFS
 0x00000002

	)

18 
	#UDIAG_SHOW_PEER
 0x00000004

	)

19 
	#UDIAG_SHOW_ICONS
 0x00000008

	)

20 
	#UDIAG_SHOW_RQLEN
 0x00000010

	)

21 
	#UDIAG_SHOW_MEMINFO
 0x00000020

	)

23 
	sunix_düg_msg
 {

24 
__u8
 
	mudüg_Ámûy
;

25 
__u8
 
	mudüg_ty≥
;

26 
__u8
 
	mudüg_°©e
;

27 
__u8
 
	m∑d
;

29 
__u32
 
	mudüg_öo
;

30 
__u32
 
	mudüg_cookõ
[2];

35 
	mUNIX_DIAG_NAME
,

36 
	mUNIX_DIAG_VFS
,

37 
	mUNIX_DIAG_PEER
,

38 
	mUNIX_DIAG_ICONS
,

39 
	mUNIX_DIAG_RQLEN
,

40 
	mUNIX_DIAG_MEMINFO
,

41 
	mUNIX_DIAG_SHUTDOWN
,

43 
	m__UNIX_DIAG_MAX
,

46 
	#UNIX_DIAG_MAX
 (
__UNIX_DIAG_MAX
 - 1)

	)

48 
	sunix_düg_vfs
 {

49 
__u32
 
	mudüg_vfs_öo
;

50 
__u32
 
	mudüg_vfs_dev
;

53 
	sunix_düg_rqÀn
 {

54 
__u32
 
	mudüg_rqueue
;

55 
__u32
 
	mudüg_wqueue
;

	@/usr/include/linux/veth.h

1 #i‚de‡
__NET_VETH_H_


2 
	#__NET_VETH_H_


	)

5 
	mVETH_INFO_UNSPEC
,

6 
	mVETH_INFO_PEER
,

8 
	m__VETH_INFO_MAX


9 
	#VETH_INFO_MAX
 (
__VETH_INFO_MAX
 - 1)

	)

	@/usr/include/linux/xfrm.h

1 #i‚de‡
_LINUX_XFRM_H


2 
	#_LINUX_XFRM_H


	)

4 
	~<löux/ty≥s.h
>

14 
__be32
 
	ma4
;

15 
__be32
 
	ma6
[4];

16 } 
	tx‰m_addªss_t
;

22 
	sx‰m_id
 {

23 
x‰m_addªss_t
 
	mdaddr
;

24 
__be32
 
	m•i
;

25 
__u8
 
	m¥Ÿo
;

28 
	sx‰m_£c_˘x
 {

29 
__u8
 
	m˘x_doi
;

30 
__u8
 
	m˘x_Æg
;

31 
__u16
 
	m˘x_Àn
;

32 
__u32
 
	m˘x_sid
;

33 
	m˘x_°r
[0];

37 
	#XFRM_SC_DOI_RESERVED
 0

	)

38 
	#XFRM_SC_DOI_LSM
 1

	)

41 
	#XFRM_SC_ALG_RESERVED
 0

	)

42 
	#XFRM_SC_ALG_SELINUX
 1

	)

46 
	sx‰m_£À˘‹
 {

47 
x‰m_addªss_t
 
	mdaddr
;

48 
x‰m_addªss_t
 
	mßddr
;

49 
__be16
 
	mdp‹t
;

50 
__be16
 
	mdp‹t_mask
;

51 
__be16
 
	m•‹t
;

52 
__be16
 
	m•‹t_mask
;

53 
__u16
 
	mÁmûy
;

54 
__u8
 
	m¥efixÀn_d
;

55 
__u8
 
	m¥efixÀn_s
;

56 
__u8
 
	m¥Ÿo
;

57 
	mifödex
;

58 
__kî√l_uid32_t
 
	mu£r
;

61 
	#XFRM_INF
 (~(
__u64
)0)

	)

63 
	sx‰m_li„time_cfg
 {

64 
__u64
 
	mso·_byã_limô
;

65 
__u64
 
	mh¨d_byã_limô
;

66 
__u64
 
	mso·_∑ckë_limô
;

67 
__u64
 
	mh¨d_∑ckë_limô
;

68 
__u64
 
	mso·_add_expúes_£c⁄ds
;

69 
__u64
 
	mh¨d_add_expúes_£c⁄ds
;

70 
__u64
 
	mso·_u£_expúes_£c⁄ds
;

71 
__u64
 
	mh¨d_u£_expúes_£c⁄ds
;

74 
	sx‰m_li„time_cur
 {

75 
__u64
 
	mbyãs
;

76 
__u64
 
	m∑ckës
;

77 
__u64
 
	madd_time
;

78 
__u64
 
	mu£_time
;

81 
	sx‰m_ª∂ay_°©e
 {

82 
__u32
 
	mo£q
;

83 
__u32
 
	m£q
;

84 
__u32
 
	mbôm≠
;

87 
	#XFRMA_REPLAY_ESN_MAX
 4096

	)

89 
	sx‰m_ª∂ay_°©e_e¢
 {

90 
	mbmp_Àn
;

91 
__u32
 
	mo£q
;

92 
__u32
 
	m£q
;

93 
__u32
 
	mo£q_hi
;

94 
__u32
 
	m£q_hi
;

95 
__u32
 
	mª∂ay_wödow
;

96 
__u32
 
	mbmp
[0];

99 
	sx‰m_Ægo
 {

100 
	mÆg_«me
[64];

101 
	mÆg_key_Àn
;

102 
	mÆg_key
[0];

105 
	sx‰m_Ægo_auth
 {

106 
	mÆg_«me
[64];

107 
	mÆg_key_Àn
;

108 
	mÆg_åunc_Àn
;

109 
	mÆg_key
[0];

112 
	sx‰m_Ægo_´ad
 {

113 
	mÆg_«me
[64];

114 
	mÆg_key_Àn
;

115 
	mÆg_icv_Àn
;

116 
	mÆg_key
[0];

119 
	sx‰m_°©s
 {

120 
__u32
 
	mª∂ay_wödow
;

121 
__u32
 
	mª∂ay
;

122 
__u32
 
	möãgrôy_Áûed
;

126 
	mXFRM_POLICY_TYPE_MAIN
 = 0,

127 
	mXFRM_POLICY_TYPE_SUB
 = 1,

128 
	mXFRM_POLICY_TYPE_MAX
 = 2,

129 
	mXFRM_POLICY_TYPE_ANY
 = 255

133 
	mXFRM_POLICY_IN
 = 0,

134 
	mXFRM_POLICY_OUT
 = 1,

135 
	mXFRM_POLICY_FWD
 = 2,

136 
	mXFRM_POLICY_MASK
 = 3,

137 
	mXFRM_POLICY_MAX
 = 3

141 
	mXFRM_SHARE_ANY
,

142 
	mXFRM_SHARE_SESSION
,

143 
	mXFRM_SHARE_USER
,

144 
	mXFRM_SHARE_UNIQUE


147 
	#XFRM_MODE_TRANSPORT
 0

	)

148 
	#XFRM_MODE_TUNNEL
 1

	)

149 
	#XFRM_MODE_ROUTEOPTIMIZATION
 2

	)

150 
	#XFRM_MODE_IN_TRIGGER
 3

	)

151 
	#XFRM_MODE_BEET
 4

	)

152 
	#XFRM_MODE_MAX
 5

	)

156 
	mXFRM_MSG_BASE
 = 0x10,

158 
	mXFRM_MSG_NEWSA
 = 0x10,

159 
	#XFRM_MSG_NEWSA
 
XFRM_MSG_NEWSA


	)

160 
	mXFRM_MSG_DELSA
,

161 
	#XFRM_MSG_DELSA
 
XFRM_MSG_DELSA


	)

162 
	mXFRM_MSG_GETSA
,

163 
	#XFRM_MSG_GETSA
 
XFRM_MSG_GETSA


	)

165 
	mXFRM_MSG_NEWPOLICY
,

166 
	#XFRM_MSG_NEWPOLICY
 
XFRM_MSG_NEWPOLICY


	)

167 
	mXFRM_MSG_DELPOLICY
,

168 
	#XFRM_MSG_DELPOLICY
 
XFRM_MSG_DELPOLICY


	)

169 
	mXFRM_MSG_GETPOLICY
,

170 
	#XFRM_MSG_GETPOLICY
 
XFRM_MSG_GETPOLICY


	)

172 
	mXFRM_MSG_ALLOCSPI
,

173 
	#XFRM_MSG_ALLOCSPI
 
XFRM_MSG_ALLOCSPI


	)

174 
	mXFRM_MSG_ACQUIRE
,

175 
	#XFRM_MSG_ACQUIRE
 
XFRM_MSG_ACQUIRE


	)

176 
	mXFRM_MSG_EXPIRE
,

177 
	#XFRM_MSG_EXPIRE
 
XFRM_MSG_EXPIRE


	)

179 
	mXFRM_MSG_UPDPOLICY
,

180 
	#XFRM_MSG_UPDPOLICY
 
XFRM_MSG_UPDPOLICY


	)

181 
	mXFRM_MSG_UPDSA
,

182 
	#XFRM_MSG_UPDSA
 
XFRM_MSG_UPDSA


	)

184 
	mXFRM_MSG_POLEXPIRE
,

185 
	#XFRM_MSG_POLEXPIRE
 
XFRM_MSG_POLEXPIRE


	)

187 
	mXFRM_MSG_FLUSHSA
,

188 
	#XFRM_MSG_FLUSHSA
 
XFRM_MSG_FLUSHSA


	)

189 
	mXFRM_MSG_FLUSHPOLICY
,

190 
	#XFRM_MSG_FLUSHPOLICY
 
XFRM_MSG_FLUSHPOLICY


	)

192 
	mXFRM_MSG_NEWAE
,

193 
	#XFRM_MSG_NEWAE
 
XFRM_MSG_NEWAE


	)

194 
	mXFRM_MSG_GETAE
,

195 
	#XFRM_MSG_GETAE
 
XFRM_MSG_GETAE


	)

197 
	mXFRM_MSG_REPORT
,

198 
	#XFRM_MSG_REPORT
 
XFRM_MSG_REPORT


	)

200 
	mXFRM_MSG_MIGRATE
,

201 
	#XFRM_MSG_MIGRATE
 
XFRM_MSG_MIGRATE


	)

203 
	mXFRM_MSG_NEWSADINFO
,

204 
	#XFRM_MSG_NEWSADINFO
 
XFRM_MSG_NEWSADINFO


	)

205 
	mXFRM_MSG_GETSADINFO
,

206 
	#XFRM_MSG_GETSADINFO
 
XFRM_MSG_GETSADINFO


	)

208 
	mXFRM_MSG_NEWSPDINFO
,

209 
	#XFRM_MSG_NEWSPDINFO
 
XFRM_MSG_NEWSPDINFO


	)

210 
	mXFRM_MSG_GETSPDINFO
,

211 
	#XFRM_MSG_GETSPDINFO
 
XFRM_MSG_GETSPDINFO


	)

213 
	mXFRM_MSG_MAPPING
,

214 
	#XFRM_MSG_MAPPING
 
XFRM_MSG_MAPPING


	)

215 
	m__XFRM_MSG_MAX


217 
	#XFRM_MSG_MAX
 (
__XFRM_MSG_MAX
 - 1)

	)

219 
	#XFRM_NR_MSGTYPES
 (
XFRM_MSG_MAX
 + 1 - 
XFRM_MSG_BASE
)

	)

225 
	sx‰m_u£r_£c_˘x
 {

226 
__u16
 
	mÀn
;

227 
__u16
 
	mexây≥
;

228 
__u8
 
	m˘x_Æg
;

229 
__u8
 
	m˘x_doi
;

230 
__u16
 
	m˘x_Àn
;

233 
	sx‰m_u£r_tm∂
 {

234 
x‰m_id
 
	mid
;

235 
__u16
 
	mÁmûy
;

236 
x‰m_addªss_t
 
	mßddr
;

237 
__u32
 
	mªqid
;

238 
__u8
 
	mmode
;

239 
__u8
 
	msh¨e
;

240 
__u8
 
	m›ti⁄Æ
;

241 
__u32
 
	mØlgos
;

242 
__u32
 
	mólgos
;

243 
__u32
 
	mˇlgos
;

246 
	sx‰m_íˇp_tm∂
 {

247 
__u16
 
	míˇp_ty≥
;

248 
__be16
 
	míˇp_•‹t
;

249 
__be16
 
	míˇp_dp‹t
;

250 
x‰m_addªss_t
 
	míˇp_ﬂ
;

254 
	ex‰m_´_·y≥_t
 {

255 
	mXFRM_AE_UNSPEC
,

256 
	mXFRM_AE_RTHR
=1,

257 
	mXFRM_AE_RVAL
=2,

258 
	mXFRM_AE_LVAL
=4,

259 
	mXFRM_AE_ETHR
=8,

260 
	mXFRM_AE_CR
=16,

261 
	mXFRM_AE_CE
=32,

262 
	mXFRM_AE_CU
=64,

263 
	m__XFRM_AE_MAX


265 
	#XFRM_AE_MAX
 (
__XFRM_AE_MAX
 - 1)

	)

268 
	sx‰m_u£Ωﬁicy_ty≥
 {

269 
__u8
 
	mty≥
;

270 
__u16
 
	mª£rved1
;

271 
__u8
 
	mª£rved2
;

275 
	ex‰m_©å_ty≥_t
 {

276 
	mXFRMA_UNSPEC
,

277 
	mXFRMA_ALG_AUTH
,

278 
	mXFRMA_ALG_CRYPT
,

279 
	mXFRMA_ALG_COMP
,

280 
	mXFRMA_ENCAP
,

281 
	mXFRMA_TMPL
,

282 
	mXFRMA_SA
,

283 
	mXFRMA_POLICY
,

284 
	mXFRMA_SEC_CTX
,

285 
	mXFRMA_LTIME_VAL
,

286 
	mXFRMA_REPLAY_VAL
,

287 
	mXFRMA_REPLAY_THRESH
,

288 
	mXFRMA_ETIMER_THRESH
,

289 
	mXFRMA_SRCADDR
,

290 
	mXFRMA_COADDR
,

291 
	mXFRMA_LASTUSED
,

292 
	mXFRMA_POLICY_TYPE
,

293 
	mXFRMA_MIGRATE
,

294 
	mXFRMA_ALG_AEAD
,

295 
	mXFRMA_KMADDRESS
,

296 
	mXFRMA_ALG_AUTH_TRUNC
,

297 
	mXFRMA_MARK
,

298 
	mXFRMA_TFCPAD
,

299 
	mXFRMA_REPLAY_ESN_VAL
,

300 
	mXFRMA_SA_EXTRA_FLAGS
,

301 
	mXFRMA_PROTO
,

302 
	mXFRMA_ADDRESS_FILTER
,

303 
	m__XFRMA_MAX


305 
	#XFRMA_MAX
 (
__XFRMA_MAX
 - 1)

	)

308 
	sx‰m_m¨k
 {

309 
__u32
 
	mv
;

310 
__u32
 
	mm
;

313 
	ex‰m_ßd©å_ty≥_t
 {

314 
	mXFRMA_SAD_UNSPEC
,

315 
	mXFRMA_SAD_CNT
,

316 
	mXFRMA_SAD_HINFO
,

317 
	m__XFRMA_SAD_MAX


319 
	#XFRMA_SAD_MAX
 (
__XFRMA_SAD_MAX
 - 1)

	)

322 
	sx‰mu_ßdhöfo
 {

323 
__u32
 
	mßdh˙t
;

324 
__u32
 
	mßdhm˙t
;

327 
	ex‰m_•d©å_ty≥_t
 {

328 
	mXFRMA_SPD_UNSPEC
,

329 
	mXFRMA_SPD_INFO
,

330 
	mXFRMA_SPD_HINFO
,

331 
	mXFRMA_SPD_IPV4_HTHRESH
,

332 
	mXFRMA_SPD_IPV6_HTHRESH
,

333 
	m__XFRMA_SPD_MAX


335 
	#XFRMA_SPD_MAX
 (
__XFRMA_SPD_MAX
 - 1)

	)

338 
	sx‰mu_•döfo
 {

339 
__u32
 
	mö˙t
;

340 
__u32
 
	mout˙t
;

341 
__u32
 
	mfwd˙t
;

342 
__u32
 
	mös˙t
;

343 
__u32
 
	mouts˙t
;

344 
__u32
 
	mfwds˙t
;

347 
	sx‰mu_•dhöfo
 {

348 
__u32
 
	m•dh˙t
;

349 
__u32
 
	m•dhm˙t
;

352 
	sx‰mu_•dhthªsh
 {

353 
__u8
 
	mlbôs
;

354 
__u8
 
	mrbôs
;

357 
	sx‰m_u£rß_öfo
 {

358 
x‰m_£À˘‹
 
	m£l
;

359 
x‰m_id
 
	mid
;

360 
x‰m_addªss_t
 
	mßddr
;

361 
x‰m_li„time_cfg
 
	ml·
;

362 
x‰m_li„time_cur
 
	mcuæ·
;

363 
x‰m_°©s
 
	m°©s
;

364 
__u32
 
	m£q
;

365 
__u32
 
	mªqid
;

366 
__u16
 
	mÁmûy
;

367 
__u8
 
	mmode
;

368 
__u8
 
	mª∂ay_wödow
;

369 
__u8
 
	mÊags
;

370 
	#XFRM_STATE_NOECN
 1

	)

371 
	#XFRM_STATE_DECAP_DSCP
 2

	)

372 
	#XFRM_STATE_NOPMTUDISC
 4

	)

373 
	#XFRM_STATE_WILDRECV
 8

	)

374 
	#XFRM_STATE_ICMP
 16

	)

375 
	#XFRM_STATE_AF_UNSPEC
 32

	)

376 
	#XFRM_STATE_ALIGN4
 64

	)

377 
	#XFRM_STATE_ESN
 128

	)

380 
	#XFRM_SA_XFLAG_DONT_ENCAP_DSCP
 1

	)

382 
	sx‰m_u£rß_id
 {

383 
x‰m_addªss_t
 
	mdaddr
;

384 
__be32
 
	m•i
;

385 
__u16
 
	mÁmûy
;

386 
__u8
 
	m¥Ÿo
;

389 
	sx‰m_´vít_id
 {

390 
x‰m_u£rß_id
 
	mß_id
;

391 
x‰m_addªss_t
 
	mßddr
;

392 
__u32
 
	mÊags
;

393 
__u32
 
	mªqid
;

396 
	sx‰m_u£r•i_öfo
 {

397 
x‰m_u£rß_öfo
 
	möfo
;

398 
__u32
 
	mmö
;

399 
__u32
 
	mmax
;

402 
	sx‰m_u£Ωﬁicy_öfo
 {

403 
x‰m_£À˘‹
 
	m£l
;

404 
x‰m_li„time_cfg
 
	ml·
;

405 
x‰m_li„time_cur
 
	mcuæ·
;

406 
__u32
 
	m¥i‹ôy
;

407 
__u32
 
	mödex
;

408 
__u8
 
	mdú
;

409 
__u8
 
	ma˘i⁄
;

410 
	#XFRM_POLICY_ALLOW
 0

	)

411 
	#XFRM_POLICY_BLOCK
 1

	)

412 
__u8
 
	mÊags
;

413 
	#XFRM_POLICY_LOCALOK
 1

	)

415 
	#XFRM_POLICY_ICMP
 2

	)

416 
__u8
 
	msh¨e
;

419 
	sx‰m_u£Ωﬁicy_id
 {

420 
x‰m_£À˘‹
 
	m£l
;

421 
__u32
 
	mödex
;

422 
__u8
 
	mdú
;

425 
	sx‰m_u£r_acquúe
 {

426 
x‰m_id
 
	mid
;

427 
x‰m_addªss_t
 
	mßddr
;

428 
x‰m_£À˘‹
 
	m£l
;

429 
x‰m_u£Ωﬁicy_öfo
 
	mpﬁicy
;

430 
__u32
 
	mØlgos
;

431 
__u32
 
	mólgos
;

432 
__u32
 
	mˇlgos
;

433 
__u32
 
	m£q
;

436 
	sx‰m_u£r_expúe
 {

437 
x‰m_u£rß_öfo
 
	m°©e
;

438 
__u8
 
	mh¨d
;

441 
	sx‰m_u£r_pﬁexpúe
 {

442 
x‰m_u£Ωﬁicy_öfo
 
	mpﬁ
;

443 
__u8
 
	mh¨d
;

446 
	sx‰m_u£rß_Êush
 {

447 
__u8
 
	m¥Ÿo
;

450 
	sx‰m_u£r_ªp‹t
 {

451 
__u8
 
	m¥Ÿo
;

452 
x‰m_£À˘‹
 
	m£l
;

457 
	sx‰m_u£r_kmaddªss
 {

458 
x‰m_addªss_t
 
	mloˇl
;

459 
x‰m_addªss_t
 
	mªmŸe
;

460 
__u32
 
	mª£rved
;

461 
__u16
 
	mÁmûy
;

464 
	sx‰m_u£r_migøã
 {

465 
x‰m_addªss_t
 
	mﬁd_daddr
;

466 
x‰m_addªss_t
 
	mﬁd_ßddr
;

467 
x‰m_addªss_t
 
	m√w_daddr
;

468 
x‰m_addªss_t
 
	m√w_ßddr
;

469 
__u8
 
	m¥Ÿo
;

470 
__u8
 
	mmode
;

471 
__u16
 
	mª£rved
;

472 
__u32
 
	mªqid
;

473 
__u16
 
	mﬁd_Ámûy
;

474 
__u16
 
	m√w_Ámûy
;

477 
	sx‰m_u£r_m≠pög
 {

478 
x‰m_u£rß_id
 
	mid
;

479 
__u32
 
	mªqid
;

480 
x‰m_addªss_t
 
	mﬁd_ßddr
;

481 
x‰m_addªss_t
 
	m√w_ßddr
;

482 
__be16
 
	mﬁd_•‹t
;

483 
__be16
 
	m√w_•‹t
;

486 
	sx‰m_addªss_fûãr
 {

487 
x‰m_addªss_t
 
	mßddr
;

488 
x‰m_addªss_t
 
	mdaddr
;

489 
__u16
 
	mÁmûy
;

490 
__u8
 
	m•Àn
;

491 
__u8
 
	md∂í
;

495 
	#XFRMGRP_ACQUIRE
 1

	)

496 
	#XFRMGRP_EXPIRE
 2

	)

497 
	#XFRMGRP_SA
 4

	)

498 
	#XFRMGRP_POLICY
 8

	)

499 
	#XFRMGRP_REPORT
 0x20

	)

501 
	ex‰m_∆groups
 {

502 
	mXFRMNLGRP_NONE
,

503 
	#XFRMNLGRP_NONE
 
XFRMNLGRP_NONE


	)

504 
	mXFRMNLGRP_ACQUIRE
,

505 
	#XFRMNLGRP_ACQUIRE
 
XFRMNLGRP_ACQUIRE


	)

506 
	mXFRMNLGRP_EXPIRE
,

507 
	#XFRMNLGRP_EXPIRE
 
XFRMNLGRP_EXPIRE


	)

508 
	mXFRMNLGRP_SA
,

509 
	#XFRMNLGRP_SA
 
XFRMNLGRP_SA


	)

510 
	mXFRMNLGRP_POLICY
,

511 
	#XFRMNLGRP_POLICY
 
XFRMNLGRP_POLICY


	)

512 
	mXFRMNLGRP_AEVENTS
,

513 
	#XFRMNLGRP_AEVENTS
 
XFRMNLGRP_AEVENTS


	)

514 
	mXFRMNLGRP_REPORT
,

515 
	#XFRMNLGRP_REPORT
 
XFRMNLGRP_REPORT


	)

516 
	mXFRMNLGRP_MIGRATE
,

517 
	#XFRMNLGRP_MIGRATE
 
XFRMNLGRP_MIGRATE


	)

518 
	mXFRMNLGRP_MAPPING
,

519 
	#XFRMNLGRP_MAPPING
 
XFRMNLGRP_MAPPING


	)

520 
	m__XFRMNLGRP_MAX


522 
	#XFRMNLGRP_MAX
 (
__XFRMNLGRP_MAX
 - 1)

	)

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #ifde‡
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT
 \

96 || 
deföed
 
_LIBC_TEST


97 #ifde‡
__LDBL_COMPAT


99 #ifde‡
__USE_ISOC99


100 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

101 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

102 #ifde‡
__REDIRECT_NTH


103 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

104 
__∆dbl_√xâow¨df
)

105 
	`__©åibuã__
 ((
__c⁄°__
));

106 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

107 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

108 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

109 (
__x
, 
__y
),

110 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 #unde‡
__MATHDECL_1


115 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

116 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

117 
¨gs
, 
Æüs
)

	)

118 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

119 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

125 #i‚de‡
_Ml⁄g_doubÀ_


126 
	#_Ml⁄g_doubÀ_
 

	)

128 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

129 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

130 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

131 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

132 
	#__MATH_DECLARE_LDOUBLE
 1

	)

133 
	~<bôs/m©hˇŒs.h
>

134 #unde‡
_MdoubÀ_


135 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


136 #unde‡
_MdoubÀ_END_NAMESPACE


137 #unde‡
__MATH_PRECNAME


142 #unde‡
__MATHDECL_1


143 #unde‡
__MATHDECL


144 #unde‡
__MATHCALL


147 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


149 
signgam
;

154 #ifde‡
__USE_ISOC99


192 
FP_NAN
 =

193 
	#FP_NAN
 0

	)

194 
FP_NAN
,

195 
FP_INFINITE
 =

196 
	#FP_INFINITE
 1

	)

197 
FP_INFINITE
,

198 
FP_ZERO
 =

199 
	#FP_ZERO
 2

	)

200 
FP_ZERO
,

201 
FP_SUBNORMAL
 =

202 
	#FP_SUBNORMAL
 3

	)

203 
FP_SUBNORMAL
,

204 
FP_NORMAL
 =

205 
	#FP_NORMAL
 4

	)

206 
FP_NORMAL


210 #ifde‡
__NO_LONG_DOUBLE_MATH


211 
	#Â˛assify
(
x
) \

212 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

214 
	#Â˛assify
(
x
) \

215 ( (
x
) ==  () \

216 ? 
	`__Â˛assifyf
 (
x
) \

217 :  (
x
) ==  () \

218 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

222 #ifde‡
__NO_LONG_DOUBLE_MATH


223 
	#signbô
(
x
) \

224 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

226 
	#signbô
(
x
) \

227 ( (
x
) ==  () \

228 ? 
	`__signbôf
 (
x
) \

229 :  (
x
) ==  () \

230 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

234 #ifde‡
__NO_LONG_DOUBLE_MATH


235 
	#isföôe
(
x
) \

236 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

238 
	#isföôe
(
x
) \

239 ( (
x
) ==  () \

240 ? 
	`__föôef
 (
x
) \

241 :  (
x
) ==  () \

242 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

246 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

250 #ifde‡
__NO_LONG_DOUBLE_MATH


251 
	#i¢™
(
x
) \

252 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

254 
	#i¢™
(
x
) \

255 ( (
x
) ==  () \

256 ? 
	`__i¢™f
 (
x
) \

257 :  (
x
) ==  () \

258 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

262 #ifde‡
__NO_LONG_DOUBLE_MATH


263 
	#isöf
(
x
) \

264 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

266 
	#isöf
(
x
) \

267 ( (
x
) ==  () \

268 ? 
	`__isöff
 (
x
) \

269 :  (
x
) ==  () \

270 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

274 
	#MATH_ERRNO
 1

	)

275 
	#MATH_ERREXCEPT
 2

	)

280 #i‚de‡
__FAST_MATH__


281 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

286 #ifde‡
__USE_GNU


288 #ifde‡
__NO_LONG_DOUBLE_MATH


289 
	#issig«lög
(
x
) \

290 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

292 
	#issig«lög
(
x
) \

293 ( (
x
) ==  () \

294 ? 
	`__issig«lögf
 (
x
) \

295 :  (
x
) ==  () \

296 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

300 #ifdef 
__USE_MISC


304 
_IEEE_
 = -1,

305 
_SVID_
,

306 
_XOPEN_
,

307 
_POSIX_
,

308 
_ISOC_


309 } 
	t_LIB_VERSION_TYPE
;

314 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

318 #ifde‡
__USE_MISC


324 #ifde‡
__˝lu•lus


325 
__ex˚±i⁄


327 
ex˚±i⁄


330 
ty≥
;

331 *
«me
;

332 
¨g1
;

333 
¨g2
;

334 
ªtvÆ
;

335 
	}
};

337 #ifde‡
__˝lu•lus


338 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

340 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

343 
	#X_TLOSS
 1.41484755040568800000e+16

	)

346 
	#DOMAIN
 1

	)

347 
	#SING
 2

	)

348 
	#OVERFLOW
 3

	)

349 
	#UNDERFLOW
 4

	)

350 
	#TLOSS
 5

	)

351 
	#PLOSS
 6

	)

354 
	#HUGE
 3.40282347e+38F

	)

358 #ifde‡
__USE_XOPEN


360 
	#MAXFLOAT
 3.40282347e+38F

	)

367 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


368 
	#M_E
 2.7182818284590452354

	)

369 
	#M_LOG2E
 1.4426950408889634074

	)

370 
	#M_LOG10E
 0.43429448190325182765

	)

371 
	#M_LN2
 0.69314718055994530942

	)

372 
	#M_LN10
 2.30258509299404568402

	)

373 
	#M_PI
 3.14159265358979323846

	)

374 
	#M_PI_2
 1.57079632679489661923

	)

375 
	#M_PI_4
 0.78539816339744830962

	)

376 
	#M_1_PI
 0.31830988618379067154

	)

377 
	#M_2_PI
 0.63661977236758134308

	)

378 
	#M_2_SQRTPI
 1.12837916709551257390

	)

379 
	#M_SQRT2
 1.41421356237309504880

	)

380 
	#M_SQRT1_2
 0.70710678118654752440

	)

386 #ifde‡
__USE_GNU


387 
	#M_El
 2.718281828459045235360287471352662498L

	)

388 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

389 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

390 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

391 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

392 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

393 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

394 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

395 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

396 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

397 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

398 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

399 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

406 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


407 
	#__NO_MATH_INLINES
 1

	)

410 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

417 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

418 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

419 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

420 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

421 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

422 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

426 #ifde‡
__USE_EXTERN_INLINES


427 
	~<bôs/m©hölöe.h
>

432 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

433 
	~<bôs/m©h-föôe.h
>

436 #ifde‡
__USE_ISOC99


440 #i‚de‡
isgª©î


441 
	#isgª©î
(
x
, 
y
) \

442 (
__exãnsi⁄__
 \

443 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

444 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

448 #i‚de‡
isgª©îequÆ


449 
	#isgª©îequÆ
(
x
, 
y
) \

450 (
__exãnsi⁄__
 \

451 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

452 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

456 #i‚de‡
i¶ess


457 
	#i¶ess
(
x
, 
y
) \

458 (
__exãnsi⁄__
 \

459 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

460 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

464 #i‚de‡
i¶es£quÆ


465 
	#i¶es£quÆ
(
x
, 
y
) \

466 (
__exãnsi⁄__
 \

467 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

468 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

472 #i‚de‡
i¶essgª©î


473 
	#i¶essgª©î
(
x
, 
y
) \

474 (
__exãnsi⁄__
 \

475 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

476 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

480 #i‚de‡
isun‹dîed


481 
	#isun‹dîed
(
u
, 
v
) \

482 (
__exãnsi⁄__
 \

483 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

484 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

489 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/net/if_arp.h

22 #i‚de‡
_NET_IF_ARP_H


24 
	#_NET_IF_ARP_H
 1

	)

25 
	~<sys/cdefs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/sockë.h
>

30 
	g__BEGIN_DECLS


33 
	#MAX_ADDR_LEN
 7

	)

39 
	#ARPOP_REQUEST
 1

	)

40 
	#ARPOP_REPLY
 2

	)

41 
	#ARPOP_RREQUEST
 3

	)

42 
	#ARPOP_RREPLY
 4

	)

43 
	#ARPOP_InREQUEST
 8

	)

44 
	#ARPOP_InREPLY
 9

	)

45 
	#ARPOP_NAK
 10

	)

54 
	s¨phdr


56 
	m¨_hrd
;

57 
	m¨_¥o
;

58 
	m¨_h 
;

59 
	m¨_∂n
;

60 
	m¨_›
;

64 
	m__¨_sha
[
ETH_ALEN
];

65 
	m__¨_sù
[4];

66 
	m__¨_tha
[
ETH_ALEN
];

67 
	m__¨_tù
[4];

73 
	#ARPHRD_NETROM
 0

	)

74 
	#ARPHRD_ETHER
 1

	)

75 
	#ARPHRD_EETHER
 2

	)

76 
	#ARPHRD_AX25
 3

	)

77 
	#ARPHRD_PRONET
 4

	)

78 
	#ARPHRD_CHAOS
 5

	)

79 
	#ARPHRD_IEEE802
 6

	)

80 
	#ARPHRD_ARCNET
 7

	)

81 
	#ARPHRD_APPLETLK
 8

	)

82 
	#ARPHRD_DLCI
 15

	)

83 
	#ARPHRD_ATM
 19

	)

84 
	#ARPHRD_METRICOM
 23

	)

85 
	#ARPHRD_IEEE1394
 24

	)

86 
	#ARPHRD_EUI64
 27

	)

87 
	#ARPHRD_INFINIBAND
 32

	)

90 
	#ARPHRD_SLIP
 256

	)

91 
	#ARPHRD_CSLIP
 257

	)

92 
	#ARPHRD_SLIP6
 258

	)

93 
	#ARPHRD_CSLIP6
 259

	)

94 
	#ARPHRD_RSRVD
 260

	)

95 
	#ARPHRD_ADAPT
 264

	)

96 
	#ARPHRD_ROSE
 270

	)

97 
	#ARPHRD_X25
 271

	)

98 
	#ARPHRD_HWX25
 272

	)

99 
	#ARPHRD_PPP
 512

	)

100 
	#ARPHRD_CISCO
 513

	)

101 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

102 
	#ARPHRD_LAPB
 516

	)

103 
	#ARPHRD_DDCMP
 517

	)

104 
	#ARPHRD_RAWHDLC
 518

	)

106 
	#ARPHRD_TUNNEL
 768

	)

107 
	#ARPHRD_TUNNEL6
 769

	)

108 
	#ARPHRD_FRAD
 770

	)

109 
	#ARPHRD_SKIP
 771

	)

110 
	#ARPHRD_LOOPBACK
 772

	)

111 
	#ARPHRD_LOCALTLK
 773

	)

112 
	#ARPHRD_FDDI
 774

	)

113 
	#ARPHRD_BIF
 775

	)

114 
	#ARPHRD_SIT
 776

	)

115 
	#ARPHRD_IPDDP
 777

	)

116 
	#ARPHRD_IPGRE
 778

	)

117 
	#ARPHRD_PIMREG
 779

	)

118 
	#ARPHRD_HIPPI
 780

	)

119 
	#ARPHRD_ASH
 781

	)

120 
	#ARPHRD_ECONET
 782

	)

121 
	#ARPHRD_IRDA
 783

	)

122 
	#ARPHRD_FCPP
 784

	)

123 
	#ARPHRD_FCAL
 785

	)

124 
	#ARPHRD_FCPL
 786

	)

125 
	#ARPHRD_FCFABRIC
 787

	)

126 
	#ARPHRD_IEEE802_TR
 800

	)

127 
	#ARPHRD_IEEE80211
 801

	)

128 
	#ARPHRD_IEEE80211_PRISM
 802

	)

129 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

130 
	#ARPHRD_IEEE802154
 804

	)

131 
	#ARPHRD_IEEE802154_PHY
 805

	)

133 
	#ARPHRD_VOID
 0xFFFF

	)

134 
	#ARPHRD_NONE
 0xFFFE

	)

138 
	s¨¥eq


140 
sockaddr
 
	m¨p_∑
;

141 
sockaddr
 
	m¨p_ha
;

142 
	m¨p_Êags
;

143 
sockaddr
 
	m¨p_√tmask
;

144 
	m¨p_dev
[16];

147 
	s¨¥eq_ﬁd


149 
sockaddr
 
	m¨p_∑
;

150 
sockaddr
 
	m¨p_ha
;

151 
	m¨p_Êags
;

152 
sockaddr
 
	m¨p_√tmask
;

156 
	#ATF_COM
 0x02

	)

157 
	#ATF_PERM
 0x04

	)

158 
	#ATF_PUBL
 0x08

	)

159 
	#ATF_USETRAILERS
 0x10

	)

160 
	#ATF_NETMASK
 0x20

	)

162 
	#ATF_DONTPUB
 0x40

	)

163 
	#ATF_MAGIC
 0x80

	)

167 
	#ARPD_UPDATE
 0x01

	)

168 
	#ARPD_LOOKUP
 0x02

	)

169 
	#ARPD_FLUSH
 0x03

	)

171 
	s¨pd_ªque°


173 
	mªq
;

174 
u_öt32_t
 
	mù
;

175 
	mdev
;

176 
	m°amp
;

177 
	mupd©ed
;

178 
	mha
[
MAX_ADDR_LEN
];

181 
	g__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/icmp6.h

18 #i‚de‡
_NETINET_ICMP6_H


19 
	#_NETINET_ICMP6_H
 1

	)

21 
	~<öây≥s.h
>

22 
	~<°rög.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

26 
	#ICMP6_FILTER
 1

	)

28 
	#ICMP6_FILTER_BLOCK
 1

	)

29 
	#ICMP6_FILTER_PASS
 2

	)

30 
	#ICMP6_FILTER_BLOCKOTHERS
 3

	)

31 
	#ICMP6_FILTER_PASSONLY
 4

	)

33 
	sicmp6_fûãr


35 
uöt32_t
 
	micmp6_fût
[8];

38 
	sicmp6_hdr


40 
uöt8_t
 
	micmp6_ty≥
;

41 
uöt8_t
 
	micmp6_code
;

42 
uöt16_t
 
	micmp6_cksum
;

45 
uöt32_t
 
	micmp6_un_d©a32
[1];

46 
uöt16_t
 
	micmp6_un_d©a16
[2];

47 
uöt8_t
 
	micmp6_un_d©a8
[4];

48 } 
	micmp6_d©aun
;

51 
	#icmp6_d©a32
 
icmp6_d©aun
.
icmp6_un_d©a32


	)

52 
	#icmp6_d©a16
 
icmp6_d©aun
.
icmp6_un_d©a16


	)

53 
	#icmp6_d©a8
 
icmp6_d©aun
.
icmp6_un_d©a8


	)

54 
	#icmp6_µå
 
icmp6_d©a32
[0]

	)

55 
	#icmp6_mtu
 
icmp6_d©a32
[0]

	)

56 
	#icmp6_id
 
icmp6_d©a16
[0]

	)

57 
	#icmp6_£q
 
icmp6_d©a16
[1]

	)

58 
	#icmp6_maxdñay
 
icmp6_d©a16
[0]

	)

60 
	#ICMP6_DST_UNREACH
 1

	)

61 
	#ICMP6_PACKET_TOO_BIG
 2

	)

62 
	#ICMP6_TIME_EXCEEDED
 3

	)

63 
	#ICMP6_PARAM_PROB
 4

	)

65 
	#ICMP6_INFOMSG_MASK
 0x80

	)

67 
	#ICMP6_ECHO_REQUEST
 128

	)

68 
	#ICMP6_ECHO_REPLY
 129

	)

69 
	#MLD_LISTENER_QUERY
 130

	)

70 
	#MLD_LISTENER_REPORT
 131

	)

71 
	#MLD_LISTENER_REDUCTION
 132

	)

73 
	#ICMP6_DST_UNREACH_NOROUTE
 0

	)

74 
	#ICMP6_DST_UNREACH_ADMIN
 1

	)

76 
	#ICMP6_DST_UNREACH_BEYONDSCOPE
 2

	)

77 
	#ICMP6_DST_UNREACH_ADDR
 3

	)

78 
	#ICMP6_DST_UNREACH_NOPORT
 4

	)

80 
	#ICMP6_TIME_EXCEED_TRANSIT
 0

	)

81 
	#ICMP6_TIME_EXCEED_REASSEMBLY
 1

	)

83 
	#ICMP6_PARAMPROB_HEADER
 0

	)

84 
	#ICMP6_PARAMPROB_NEXTHEADER
 1

	)

85 
	#ICMP6_PARAMPROB_OPTION
 2

	)

87 
	#ICMP6_FILTER_WILLPASS
(
ty≥
, 
fûãΩ
) \

88 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë=0)

	)

90 
	#ICMP6_FILTER_WILLBLOCK
(
ty≥
, 
fûãΩ
) \

91 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë!0)

	)

93 
	#ICMP6_FILTER_SETPASS
(
ty≥
, 
fûãΩ
) \

94 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë&~(1 << (—y≥Ë& 31))))

	)

96 
	#ICMP6_FILTER_SETBLOCK
(
ty≥
, 
fûãΩ
) \

97 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë|(1 << (—y≥Ë& 31))))

	)

99 
	#ICMP6_FILTER_SETPASSALL
(
fûãΩ
) \

100 
	`mem£t
 (
fûãΩ
, 0,  (
icmp6_fûãr
));

	)

102 
	#ICMP6_FILTER_SETBLOCKALL
(
fûãΩ
) \

103 
	`mem£t
 (
fûãΩ
, 0xFF,  (
icmp6_fûãr
));

	)

105 
	#ND_ROUTER_SOLICIT
 133

	)

106 
	#ND_ROUTER_ADVERT
 134

	)

107 
	#ND_NEIGHBOR_SOLICIT
 135

	)

108 
	#ND_NEIGHBOR_ADVERT
 136

	)

109 
	#ND_REDIRECT
 137

	)

111 
	snd_rouãr_sﬁicô


113 
icmp6_hdr
 
	mnd_rs_hdr
;

117 
	#nd_rs_ty≥
 
nd_rs_hdr
.
icmp6_ty≥


	)

118 
	#nd_rs_code
 
nd_rs_hdr
.
icmp6_code


	)

119 
	#nd_rs_cksum
 
nd_rs_hdr
.
icmp6_cksum


	)

120 
	#nd_rs_ª£rved
 
nd_rs_hdr
.
icmp6_d©a32
[0]

	)

122 
	snd_rouãr_advît


124 
icmp6_hdr
 
	mnd_ø_hdr
;

125 
uöt32_t
 
	mnd_ø_ªachabÀ
;

126 
uöt32_t
 
	mnd_ø_ªå™smô
;

130 
	#nd_ø_ty≥
 
nd_ø_hdr
.
icmp6_ty≥


	)

131 
	#nd_ø_code
 
nd_ø_hdr
.
icmp6_code


	)

132 
	#nd_ø_cksum
 
nd_ø_hdr
.
icmp6_cksum


	)

133 
	#nd_ø_curh›limô
 
nd_ø_hdr
.
icmp6_d©a8
[0]

	)

134 
	#nd_ø_Êags_ª£rved
 
nd_ø_hdr
.
icmp6_d©a8
[1]

	)

135 
	#ND_RA_FLAG_MANAGED
 0x80

	)

136 
	#ND_RA_FLAG_OTHER
 0x40

	)

137 
	#ND_RA_FLAG_HOME_AGENT
 0x20

	)

138 
	#nd_ø_rouãr_li„time
 
nd_ø_hdr
.
icmp6_d©a16
[1]

	)

140 
	snd_√ighb‹_sﬁicô


142 
icmp6_hdr
 
	mnd_ns_hdr
;

143 
ö6_addr
 
	mnd_ns_èrgë
;

147 
	#nd_ns_ty≥
 
nd_ns_hdr
.
icmp6_ty≥


	)

148 
	#nd_ns_code
 
nd_ns_hdr
.
icmp6_code


	)

149 
	#nd_ns_cksum
 
nd_ns_hdr
.
icmp6_cksum


	)

150 
	#nd_ns_ª£rved
 
nd_ns_hdr
.
icmp6_d©a32
[0]

	)

152 
	snd_√ighb‹_advît


154 
icmp6_hdr
 
	mnd_«_hdr
;

155 
ö6_addr
 
	mnd_«_èrgë
;

159 
	#nd_«_ty≥
 
nd_«_hdr
.
icmp6_ty≥


	)

160 
	#nd_«_code
 
nd_«_hdr
.
icmp6_code


	)

161 
	#nd_«_cksum
 
nd_«_hdr
.
icmp6_cksum


	)

162 
	#nd_«_Êags_ª£rved
 
nd_«_hdr
.
icmp6_d©a32
[0]

	)

163 #i‡ 
BYTE_ORDER
 =
BIG_ENDIAN


164 
	#ND_NA_FLAG_ROUTER
 0x80000000

	)

165 
	#ND_NA_FLAG_SOLICITED
 0x40000000

	)

166 
	#ND_NA_FLAG_OVERRIDE
 0x20000000

	)

168 
	#ND_NA_FLAG_ROUTER
 0x00000080

	)

169 
	#ND_NA_FLAG_SOLICITED
 0x00000040

	)

170 
	#ND_NA_FLAG_OVERRIDE
 0x00000020

	)

173 
	snd_ªdúe˘


175 
icmp6_hdr
 
	mnd_rd_hdr
;

176 
ö6_addr
 
	mnd_rd_èrgë
;

177 
ö6_addr
 
	mnd_rd_d°
;

181 
	#nd_rd_ty≥
 
nd_rd_hdr
.
icmp6_ty≥


	)

182 
	#nd_rd_code
 
nd_rd_hdr
.
icmp6_code


	)

183 
	#nd_rd_cksum
 
nd_rd_hdr
.
icmp6_cksum


	)

184 
	#nd_rd_ª£rved
 
nd_rd_hdr
.
icmp6_d©a32
[0]

	)

186 
	snd_›t_hdr


188 
uöt8_t
 
	mnd_›t_ty≥
;

189 
uöt8_t
 
	mnd_›t_Àn
;

193 
	#ND_OPT_SOURCE_LINKADDR
 1

	)

194 
	#ND_OPT_TARGET_LINKADDR
 2

	)

195 
	#ND_OPT_PREFIX_INFORMATION
 3

	)

196 
	#ND_OPT_REDIRECTED_HEADER
 4

	)

197 
	#ND_OPT_MTU
 5

	)

198 
	#ND_OPT_RTR_ADV_INTERVAL
 7

	)

199 
	#ND_OPT_HOME_AGENT_INFO
 8

	)

201 
	snd_›t_¥efix_öfo


203 
uöt8_t
 
	mnd_›t_pi_ty≥
;

204 
uöt8_t
 
	mnd_›t_pi_Àn
;

205 
uöt8_t
 
	mnd_›t_pi_¥efix_Àn
;

206 
uöt8_t
 
	mnd_›t_pi_Êags_ª£rved
;

207 
uöt32_t
 
	mnd_›t_pi_vÆid_time
;

208 
uöt32_t
 
	mnd_›t_pi_¥e„ºed_time
;

209 
uöt32_t
 
	mnd_›t_pi_ª£rved2
;

210 
ö6_addr
 
	mnd_›t_pi_¥efix
;

213 
	#ND_OPT_PI_FLAG_ONLINK
 0x80

	)

214 
	#ND_OPT_PI_FLAG_AUTO
 0x40

	)

215 
	#ND_OPT_PI_FLAG_RADDR
 0x20

	)

217 
	snd_›t_rd_hdr


219 
uöt8_t
 
	mnd_›t_rh_ty≥
;

220 
uöt8_t
 
	mnd_›t_rh_Àn
;

221 
uöt16_t
 
	mnd_›t_rh_ª£rved1
;

222 
uöt32_t
 
	mnd_›t_rh_ª£rved2
;

226 
	snd_›t_mtu


228 
uöt8_t
 
	mnd_›t_mtu_ty≥
;

229 
uöt8_t
 
	mnd_›t_mtu_Àn
;

230 
uöt16_t
 
	mnd_›t_mtu_ª£rved
;

231 
uöt32_t
 
	mnd_›t_mtu_mtu
;

234 
	smld_hdr


236 
icmp6_hdr
 
	mmld_icmp6_hdr
;

237 
ö6_addr
 
	mmld_addr
;

240 
	#mld_ty≥
 
mld_icmp6_hdr
.
icmp6_ty≥


	)

241 
	#mld_code
 
mld_icmp6_hdr
.
icmp6_code


	)

242 
	#mld_cksum
 
mld_icmp6_hdr
.
icmp6_cksum


	)

243 
	#mld_maxdñay
 
mld_icmp6_hdr
.
icmp6_d©a16
[0]

	)

244 
	#mld_ª£rved
 
mld_icmp6_hdr
.
icmp6_d©a16
[1]

	)

246 
	#ICMP6_ROUTER_RENUMBERING
 138

	)

248 
	sicmp6_rouãr_ªnum


250 
icmp6_hdr
 
	mº_hdr
;

251 
uöt8_t
 
	mº_£gnum
;

252 
uöt8_t
 
	mº_Êags
;

253 
uöt16_t
 
	mº_maxdñay
;

254 
uöt32_t
 
	mº_ª£rved
;

257 
	#º_ty≥
 
º_hdr
.
icmp6_ty≥


	)

258 
	#º_code
 
º_hdr
.
icmp6_code


	)

259 
	#º_cksum
 
º_hdr
.
icmp6_cksum


	)

260 
	#º_£qnum
 
º_hdr
.
icmp6_d©a32
[0]

	)

263 
	#ICMP6_RR_FLAGS_TEST
 0x80

	)

264 
	#ICMP6_RR_FLAGS_REQRESULT
 0x40

	)

265 
	#ICMP6_RR_FLAGS_FORCEAPPLY
 0x20

	)

266 
	#ICMP6_RR_FLAGS_SPECSITE
 0x10

	)

267 
	#ICMP6_RR_FLAGS_PREVDONE
 0x08

	)

269 
	sº_pco_m©ch


271 
uöt8_t
 
	mΩm_code
;

272 
uöt8_t
 
	mΩm_Àn
;

273 
uöt8_t
 
	mΩm_‹döÆ
;

274 
uöt8_t
 
	mΩm_m©chÀn
;

275 
uöt8_t
 
	mΩm_möÀn
;

276 
uöt8_t
 
	mΩm_maxÀn
;

277 
uöt16_t
 
	mΩm_ª£rved
;

278 
ö6_addr
 
	mΩm_¥efix
;

282 
	#RPM_PCO_ADD
 1

	)

283 
	#RPM_PCO_CHANGE
 2

	)

284 
	#RPM_PCO_SETGLOBAL
 3

	)

286 
	sº_pco_u£


288 
uöt8_t
 
	mΩu_u£Àn
;

289 
uöt8_t
 
	mΩu_kì∂í
;

290 
uöt8_t
 
	mΩu_ømask
;

291 
uöt8_t
 
	mΩu_øÊags
;

292 
uöt32_t
 
	mΩu_v…ime
;

293 
uöt32_t
 
	mΩu_∂time
;

294 
uöt32_t
 
	mΩu_Êags
;

295 
ö6_addr
 
	mΩu_¥efix
;

298 
	#ICMP6_RR_PCOUSE_RAFLAGS_ONLINK
 0x20

	)

299 
	#ICMP6_RR_PCOUSE_RAFLAGS_AUTO
 0x10

	)

301 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


302 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80000000

	)

303 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40000000

	)

304 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


305 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80

	)

306 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40

	)

309 
	sº_ªsu…


311 
uöt16_t
 
	mºr_Êags
;

312 
uöt8_t
 
	mºr_‹döÆ
;

313 
uöt8_t
 
	mºr_m©chedÀn
;

314 
uöt32_t
 
	mºr_ifid
;

315 
ö6_addr
 
	mºr_¥efix
;

318 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


319 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0002

	)

320 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0001

	)

321 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


322 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0200

	)

323 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0100

	)

327 
	snd_›t_adv_öãrvÆ


329 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_ty≥
;

330 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_Àn
;

331 
uöt16_t
 
	mnd_›t_adv_öãrvÆ_ª£rved
;

332 
uöt32_t
 
	mnd_›t_adv_öãrvÆ_ivÆ
;

336 
	snd_›t_home_agít_öfo


338 
uöt8_t
 
	mnd_›t_home_agít_öfo_ty≥
;

339 
uöt8_t
 
	mnd_›t_home_agít_öfo_Àn
;

340 
uöt16_t
 
	mnd_›t_home_agít_öfo_ª£rved
;

341 
uöt16_t
 
	mnd_›t_home_agít_öfo_¥e„ªn˚
;

342 
uöt16_t
 
	mnd_›t_home_agít_öfo_li„time
;

	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #ifde‡
__USE_MISC


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #ifde‡
__USE_MISC


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #ifde‡
__USE_MISC


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #ifde‡
__USE_MISC


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #ifde‡
__USE_MISC


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/netinet/ip.h

18 #i‚de‡
__NETINET_IP_H


19 
	#__NETINET_IP_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

26 
__BEGIN_DECLS


28 
	stime°amp


30 
u_öt8_t
 
	mÀn
;

31 
u_öt8_t
 
	m±r
;

32 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


33 
	mÊags
:4;

34 
	movîÊow
:4;

35 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


36 
	movîÊow
:4;

37 
	mÊags
:4;

41 
u_öt32_t
 
	md©a
[9];

44 
	sùhdr


46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	mihl
:4;

48 
	mvîsi⁄
:4;

49 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


50 
	mvîsi⁄
:4;

51 
	mihl
:4;

55 
u_öt8_t
 
	mtos
;

56 
u_öt16_t
 
	mtŸ_Àn
;

57 
u_öt16_t
 
	mid
;

58 
u_öt16_t
 
	m‰ag_off
;

59 
u_öt8_t
 
	mâl
;

60 
u_öt8_t
 
	m¥Ÿocﬁ
;

61 
u_öt16_t
 
	mcheck
;

62 
u_öt32_t
 
	mßddr
;

63 
u_öt32_t
 
	mdaddr
;

67 #ifde‡
__USE_MISC


107 
	sù


109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
	mù_hl
:4;

111 
	mù_v
:4;

113 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


114 
	mù_v
:4;

115 
	mù_hl
:4;

117 
u_öt8_t
 
	mù_tos
;

118 
u_sh‹t
 
	mù_Àn
;

119 
u_sh‹t
 
	mù_id
;

120 
u_sh‹t
 
	mù_off
;

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ff‡

	)

125 
u_öt8_t
 
	mù_âl
;

126 
u_öt8_t
 
	mù_p
;

127 
u_sh‹t
 
	mù_sum
;

128 
ö_addr
 
	mù_§c
, 
	mù_d°
;

134 
	sù_time°amp


136 
u_öt8_t
 
	mùt_code
;

137 
u_öt8_t
 
	mùt_Àn
;

138 
u_öt8_t
 
	mùt_±r
;

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	mùt_Êg
:4;

141 
	mùt_oÊw
:4;

143 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
	mùt_oÊw
:4;

145 
	mùt_Êg
:4;

147 
u_öt32_t
 
	md©a
[9];

151 
	#IPVERSION
 4

	)

152 
	#IP_MAXPACKET
 65535

	)

160 
	#IPTOS_ECN_MASK
 0x03

	)

161 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

162 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

163 
	#IPTOS_ECN_ECT1
 0x01

	)

164 
	#IPTOS_ECN_ECT0
 0x02

	)

165 
	#IPTOS_ECN_CE
 0x03

	)

173 
	#IPTOS_DSCP_MASK
 0xfc

	)

174 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

175 
	#IPTOS_DSCP_AF11
 0x28

	)

176 
	#IPTOS_DSCP_AF12
 0x30

	)

177 
	#IPTOS_DSCP_AF13
 0x38

	)

178 
	#IPTOS_DSCP_AF21
 0x48

	)

179 
	#IPTOS_DSCP_AF22
 0x50

	)

180 
	#IPTOS_DSCP_AF23
 0x58

	)

181 
	#IPTOS_DSCP_AF31
 0x68

	)

182 
	#IPTOS_DSCP_AF32
 0x70

	)

183 
	#IPTOS_DSCP_AF33
 0x78

	)

184 
	#IPTOS_DSCP_AF41
 0x88

	)

185 
	#IPTOS_DSCP_AF42
 0x90

	)

186 
	#IPTOS_DSCP_AF43
 0x98

	)

187 
	#IPTOS_DSCP_EF
 0xb8

	)

194 
	#IPTOS_CLASS_MASK
 0xe0

	)

195 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

196 
	#IPTOS_CLASS_CS0
 0x00

	)

197 
	#IPTOS_CLASS_CS1
 0x20

	)

198 
	#IPTOS_CLASS_CS2
 0x40

	)

199 
	#IPTOS_CLASS_CS3
 0x60

	)

200 
	#IPTOS_CLASS_CS4
 0x80

	)

201 
	#IPTOS_CLASS_CS5
 0xa0

	)

202 
	#IPTOS_CLASS_CS6
 0xc0

	)

203 
	#IPTOS_CLASS_CS7
 0xe0

	)

205 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

211 
	#IPTOS_TOS_MASK
 0x1E

	)

212 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

213 
	#IPTOS_LOWDELAY
 0x10

	)

214 
	#IPTOS_THROUGHPUT
 0x08

	)

215 
	#IPTOS_RELIABILITY
 0x04

	)

216 
	#IPTOS_LOWCOST
 0x02

	)

217 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

222 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

223 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

224 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

225 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

226 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

227 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

228 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

229 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

230 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

231 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

236 
	#IPOPT_COPY
 0x80

	)

237 
	#IPOPT_CLASS_MASK
 0x60

	)

238 
	#IPOPT_NUMBER_MASK
 0x1f

	)

240 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

241 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

242 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

244 
	#IPOPT_CONTROL
 0x00

	)

245 
	#IPOPT_RESERVED1
 0x20

	)

246 
	#IPOPT_DEBMEAS
 0x40

	)

247 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

248 
	#IPOPT_RESERVED2
 0x60

	)

250 
	#IPOPT_EOL
 0

	)

251 
	#IPOPT_END
 
IPOPT_EOL


	)

252 
	#IPOPT_NOP
 1

	)

253 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

255 
	#IPOPT_RR
 7

	)

256 
	#IPOPT_TS
 68

	)

257 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

258 
	#IPOPT_SECURITY
 130

	)

259 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

260 
	#IPOPT_LSRR
 131

	)

261 
	#IPOPT_SATID
 136

	)

262 
	#IPOPT_SID
 
IPOPT_SATID


	)

263 
	#IPOPT_SSRR
 137

	)

264 
	#IPOPT_RA
 148

	)

269 
	#IPOPT_OPTVAL
 0

	)

270 
	#IPOPT_OLEN
 1

	)

271 
	#IPOPT_OFFSET
 2

	)

272 
	#IPOPT_MINOFF
 4

	)

274 
	#MAX_IPOPTLEN
 40

	)

277 
	#IPOPT_TS_TSONLY
 0

	)

278 
	#IPOPT_TS_TSANDADDR
 1

	)

279 
	#IPOPT_TS_PRESPEC
 3

	)

282 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

283 
	#IPOPT_SECUR_CONFID
 0xf135

	)

284 
	#IPOPT_SECUR_EFTO
 0x789a

	)

285 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

286 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

287 
	#IPOPT_SECUR_SECRET
 0xd788

	)

288 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

293 
	#MAXTTL
 255

	)

294 
	#IPDEFTTL
 64

	)

295 
	#IPFRAGTTL
 60

	)

296 
	#IPTTLDEC
 1

	)

298 
	#IP_MSS
 576

	)

300 
	g__END_DECLS


	@/usr/include/netinet/ip_icmp.h

18 #i‚de‡
__NETINET_IP_ICMP_H


19 
	#__NETINET_IP_ICMP_H
 1

	)

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

24 
__BEGIN_DECLS


26 
	sicmphdr


28 
u_öt8_t
 
	mty≥
;

29 
u_öt8_t
 
	mcode
;

30 
u_öt16_t
 
	mchecksum
;

35 
u_öt16_t
 
	mid
;

36 
u_öt16_t
 
	m£quí˚
;

37 } 
	mecho
;

38 
u_öt32_t
 
	mg©eway
;

41 
u_öt16_t
 
	m__glibc_ª£rved
;

42 
u_öt16_t
 
	mmtu
;

43 } 
	m‰ag
;

44 } 
	mun
;

47 
	#ICMP_ECHOREPLY
 0

	)

48 
	#ICMP_DEST_UNREACH
 3

	)

49 
	#ICMP_SOURCE_QUENCH
 4

	)

50 
	#ICMP_REDIRECT
 5

	)

51 
	#ICMP_ECHO
 8

	)

52 
	#ICMP_TIME_EXCEEDED
 11

	)

53 
	#ICMP_PARAMETERPROB
 12

	)

54 
	#ICMP_TIMESTAMP
 13

	)

55 
	#ICMP_TIMESTAMPREPLY
 14

	)

56 
	#ICMP_INFO_REQUEST
 15

	)

57 
	#ICMP_INFO_REPLY
 16

	)

58 
	#ICMP_ADDRESS
 17

	)

59 
	#ICMP_ADDRESSREPLY
 18

	)

60 
	#NR_ICMP_TYPES
 18

	)

64 
	#ICMP_NET_UNREACH
 0

	)

65 
	#ICMP_HOST_UNREACH
 1

	)

66 
	#ICMP_PROT_UNREACH
 2

	)

67 
	#ICMP_PORT_UNREACH
 3

	)

68 
	#ICMP_FRAG_NEEDED
 4

	)

69 
	#ICMP_SR_FAILED
 5

	)

70 
	#ICMP_NET_UNKNOWN
 6

	)

71 
	#ICMP_HOST_UNKNOWN
 7

	)

72 
	#ICMP_HOST_ISOLATED
 8

	)

73 
	#ICMP_NET_ANO
 9

	)

74 
	#ICMP_HOST_ANO
 10

	)

75 
	#ICMP_NET_UNR_TOS
 11

	)

76 
	#ICMP_HOST_UNR_TOS
 12

	)

77 
	#ICMP_PKT_FILTERED
 13

	)

78 
	#ICMP_PREC_VIOLATION
 14

	)

79 
	#ICMP_PREC_CUTOFF
 15

	)

80 
	#NR_ICMP_UNREACH
 15

	)

83 
	#ICMP_REDIR_NET
 0

	)

84 
	#ICMP_REDIR_HOST
 1

	)

85 
	#ICMP_REDIR_NETTOS
 2

	)

86 
	#ICMP_REDIR_HOSTTOS
 3

	)

89 
	#ICMP_EXC_TTL
 0

	)

90 
	#ICMP_EXC_FRAGTIME
 1

	)

93 #ifde‡
__USE_MISC


125 
	~<√töë/ö.h
>

126 
	~<√töë/ù.h
>

131 
	sicmp_ø_addr


133 
u_öt32_t
 
	múa_addr
;

134 
u_öt32_t
 
	múa_¥e„ªn˚
;

137 
	sicmp


139 
u_öt8_t
 
	micmp_ty≥
;

140 
u_öt8_t
 
	micmp_code
;

141 
u_öt16_t
 
	micmp_cksum
;

144 
u_ch¨
 
	mih_µå
;

145 
ö_addr
 
	mih_gwaddr
;

146 
	sih_id£q


148 
u_öt16_t
 
	micd_id
;

149 
u_öt16_t
 
	micd_£q
;

150 } 
	mih_id£q
;

151 
u_öt32_t
 
	mih_void
;

154 
	sih_pmtu


156 
u_öt16_t
 
	mùm_void
;

157 
u_öt16_t
 
	mùm_√xtmtu
;

158 } 
	mih_pmtu
;

160 
	sih_πødv


162 
u_öt8_t
 
	mút_num_addrs
;

163 
u_öt8_t
 
	mút_w∑
;

164 
u_öt16_t
 
	mút_li„time
;

165 } 
	mih_πødv
;

166 } 
	micmp_hun
;

167 
	#icmp_µå
 
icmp_hun
.
ih_µå


	)

168 
	#icmp_gwaddr
 
icmp_hun
.
ih_gwaddr


	)

169 
	#icmp_id
 
icmp_hun
.
ih_id£q
.
icd_id


	)

170 
	#icmp_£q
 
icmp_hun
.
ih_id£q
.
icd_£q


	)

171 
	#icmp_void
 
icmp_hun
.
ih_void


	)

172 
	#icmp_pmvoid
 
icmp_hun
.
ih_pmtu
.
ùm_void


	)

173 
	#icmp_√xtmtu
 
icmp_hun
.
ih_pmtu
.
ùm_√xtmtu


	)

174 
	#icmp_num_addrs
 
icmp_hun
.
ih_πødv
.
út_num_addrs


	)

175 
	#icmp_w∑
 
icmp_hun
.
ih_πødv
.
út_w∑


	)

176 
	#icmp_li„time
 
icmp_hun
.
ih_πødv
.
út_li„time


	)

181 
u_öt32_t
 
	môs_Ÿime
;

182 
u_öt32_t
 
	môs_πime
;

183 
u_öt32_t
 
	môs_âime
;

184 } 
	mid_ts
;

187 
ù
 
	midi_ù
;

189 } 
	mid_ù
;

190 
icmp_ø_addr
 
	mid_ødv
;

191 
u_öt32_t
 
	mid_mask
;

192 
u_öt8_t
 
	mid_d©a
[1];

193 } 
	micmp_dun
;

194 
	#icmp_Ÿime
 
icmp_dun
.
id_ts
.
ôs_Ÿime


	)

195 
	#icmp_πime
 
icmp_dun
.
id_ts
.
ôs_πime


	)

196 
	#icmp_âime
 
icmp_dun
.
id_ts
.
ôs_âime


	)

197 
	#icmp_ù
 
icmp_dun
.
id_ù
.
idi_ù


	)

198 
	#icmp_ødv
 
icmp_dun
.
id_ødv


	)

199 
	#icmp_mask
 
icmp_dun
.
id_mask


	)

200 
	#icmp_d©a
 
icmp_dun
.
id_d©a


	)

211 
	#ICMP_MINLEN
 8

	)

212 
	#ICMP_TSLEN
 (8 + 3 *  (
n_time
)Ë

	)

213 
	#ICMP_MASKLEN
 12

	)

214 
	#ICMP_ADVLENMIN
 (8 +  (
ù
Ë+ 8Ë

	)

215 #i‚de‡
_IP_VHL


216 
	#ICMP_ADVLEN
(
p
Ë(8 + (’)->
icmp_ù
.
ù_hl
 << 2Ë+ 8)

	)

219 
	#ICMP_ADVLEN
(
p
Ë(8 + (
	`IP_VHL_HL
(’)->
icmp_ù
.
ù_vhl
Ë<< 2Ë+ 8)

	)

225 
	#ICMP_UNREACH
 3

	)

226 
	#ICMP_SOURCEQUENCH
 4

	)

227 
	#ICMP_ROUTERADVERT
 9

	)

228 
	#ICMP_ROUTERSOLICIT
 10

	)

229 
	#ICMP_TIMXCEED
 11

	)

230 
	#ICMP_PARAMPROB
 12

	)

231 
	#ICMP_TSTAMP
 13

	)

232 
	#ICMP_TSTAMPREPLY
 14

	)

233 
	#ICMP_IREQ
 15

	)

234 
	#ICMP_IREQREPLY
 16

	)

235 
	#ICMP_MASKREQ
 17

	)

236 
	#ICMP_MASKREPLY
 18

	)

238 
	#ICMP_MAXTYPE
 18

	)

241 
	#ICMP_UNREACH_NET
 0

	)

242 
	#ICMP_UNREACH_HOST
 1

	)

243 
	#ICMP_UNREACH_PROTOCOL
 2

	)

244 
	#ICMP_UNREACH_PORT
 3

	)

245 
	#ICMP_UNREACH_NEEDFRAG
 4

	)

246 
	#ICMP_UNREACH_SRCFAIL
 5

	)

247 
	#ICMP_UNREACH_NET_UNKNOWN
 6

	)

248 
	#ICMP_UNREACH_HOST_UNKNOWN
 7

	)

249 
	#ICMP_UNREACH_ISOLATED
 8

	)

250 
	#ICMP_UNREACH_NET_PROHIB
 9

	)

251 
	#ICMP_UNREACH_HOST_PROHIB
 10

	)

252 
	#ICMP_UNREACH_TOSNET
 11

	)

253 
	#ICMP_UNREACH_TOSHOST
 12

	)

254 
	#ICMP_UNREACH_FILTER_PROHIB
 13

	)

255 
	#ICMP_UNREACH_HOST_PRECEDENCE
 14

	)

256 
	#ICMP_UNREACH_PRECEDENCE_CUTOFF
 15

	)

259 
	#ICMP_REDIRECT_NET
 0

	)

260 
	#ICMP_REDIRECT_HOST
 1

	)

261 
	#ICMP_REDIRECT_TOSNET
 2

	)

262 
	#ICMP_REDIRECT_TOSHOST
 3

	)

265 
	#ICMP_TIMXCEED_INTRANS
 0

	)

266 
	#ICMP_TIMXCEED_REASS
 1

	)

269 
	#ICMP_PARAMPROB_OPTABSENT
 1

	)

271 
	#ICMP_INFOTYPE
(
ty≥
) \

272 ((
ty≥
Ë=
ICMP_ECHOREPLY
 || (ty≥Ë=
ICMP_ECHO
 || \

273 (
ty≥
Ë=
ICMP_ROUTERADVERT
 || (ty≥Ë=
ICMP_ROUTERSOLICIT
 || \

274 (
ty≥
Ë=
ICMP_TSTAMP
 || (ty≥Ë=
ICMP_TSTAMPREPLY
 || \

275 (
ty≥
Ë=
ICMP_IREQ
 || (ty≥Ë=
ICMP_IREQREPLY
 || \

276 (
ty≥
Ë=
ICMP_MASKREQ
 || (ty≥Ë=
ICMP_MASKREPLY
)

	)

280 
	g__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

65 #ifde‡
__USE_MISC


66 
	~<sys/ty≥s.h
>

67 
	~<sys/sockë.h
>

69 
u_öt32_t
 
	tt˝_£q
;

74 
	st˝hdr


76 
__exãnsi⁄__
 union

80 
u_öt16_t
 
	mth_•‹t
;

81 
u_öt16_t
 
	mth_dp‹t
;

82 
t˝_£q
 
	mth_£q
;

83 
t˝_£q
 
	mth_ack
;

84 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


85 
u_öt8_t
 
	mth_x2
:4;

86 
u_öt8_t
 
	mth_off
:4;

88 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


89 
u_öt8_t
 
	mth_off
:4;

90 
u_öt8_t
 
	mth_x2
:4;

92 
u_öt8_t
 
	mth_Êags
;

93 
	#TH_FIN
 0x01

	)

94 
	#TH_SYN
 0x02

	)

95 
	#TH_RST
 0x04

	)

96 
	#TH_PUSH
 0x08

	)

97 
	#TH_ACK
 0x10

	)

98 
	#TH_URG
 0x20

	)

99 
u_öt16_t
 
	mth_wö
;

100 
u_öt16_t
 
	mth_sum
;

101 
u_öt16_t
 
	mth_uΩ
;

105 
u_öt16_t
 
	msour˚
;

106 
u_öt16_t
 
	mde°
;

107 
u_öt32_t
 
	m£q
;

108 
u_öt32_t
 
	mack_£q
;

109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mdoff
:4;

112 
u_öt16_t
 
	mfö
:1;

113 
u_öt16_t
 
	msyn
:1;

114 
u_öt16_t
 
	mr°
:1;

115 
u_öt16_t
 
	mpsh
:1;

116 
u_öt16_t
 
	mack
:1;

117 
u_öt16_t
 
	murg
:1;

118 
u_öt16_t
 
	mªs2
:2;

119 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


120 
u_öt16_t
 
	mdoff
:4;

121 
u_öt16_t
 
	mªs1
:4;

122 
u_öt16_t
 
	mªs2
:2;

123 
u_öt16_t
 
	murg
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	mpsh
:1;

126 
u_öt16_t
 
	mr°
:1;

127 
u_öt16_t
 
	msyn
:1;

128 
u_öt16_t
 
	mfö
:1;

132 
u_öt16_t
 
	mwödow
;

133 
u_öt16_t
 
	mcheck
;

134 
u_öt16_t
 
	murg_±r
;

141 
	mTCP_ESTABLISHED
 = 1,

142 
	mTCP_SYN_SENT
,

143 
	mTCP_SYN_RECV
,

144 
	mTCP_FIN_WAIT1
,

145 
	mTCP_FIN_WAIT2
,

146 
	mTCP_TIME_WAIT
,

147 
	mTCP_CLOSE
,

148 
	mTCP_CLOSE_WAIT
,

149 
	mTCP_LAST_ACK
,

150 
	mTCP_LISTEN
,

151 
	mTCP_CLOSING


154 
	#TCPOPT_EOL
 0

	)

155 
	#TCPOPT_NOP
 1

	)

156 
	#TCPOPT_MAXSEG
 2

	)

157 
	#TCPOLEN_MAXSEG
 4

	)

158 
	#TCPOPT_WINDOW
 3

	)

159 
	#TCPOLEN_WINDOW
 3

	)

160 
	#TCPOPT_SACK_PERMITTED
 4

	)

161 
	#TCPOLEN_SACK_PERMITTED
 2

	)

162 
	#TCPOPT_SACK
 5

	)

163 
	#TCPOPT_TIMESTAMP
 8

	)

164 
	#TCPOLEN_TIMESTAMP
 10

	)

165 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

167 
	#TCPOPT_TSTAMP_HDR
 \

168 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

176 
	#TCP_MSS
 512

	)

178 
	#TCP_MAXWIN
 65535

	)

180 
	#TCP_MAX_WINSHIFT
 14

	)

182 
	#SOL_TCP
 6

	)

185 
	#TCPI_OPT_TIMESTAMPS
 1

	)

186 
	#TCPI_OPT_SACK
 2

	)

187 
	#TCPI_OPT_WSCALE
 4

	)

188 
	#TCPI_OPT_ECN
 8

	)

189 
	#TCPI_OPT_ECN_SEEN
 16

	)

190 
	#TCPI_OPT_SYN_DATA
 32

	)

193 
	et˝_ˇ_°©e


195 
	mTCP_CA_O≥n
 = 0,

196 
	mTCP_CA_Dis‹dî
 = 1,

197 
	mTCP_CA_CWR
 = 2,

198 
	mTCP_CA_Recovîy
 = 3,

199 
	mTCP_CA_Loss
 = 4

202 
	st˝_öfo


204 
u_öt8_t
 
	mt˝i_°©e
;

205 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

206 
u_öt8_t
 
	mt˝i_ªå™smôs
;

207 
u_öt8_t
 
	mt˝i_¥obes
;

208 
u_öt8_t
 
	mt˝i_backoff
;

209 
u_öt8_t
 
	mt˝i_›ti⁄s
;

210 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

212 
u_öt32_t
 
	mt˝i_πo
;

213 
u_öt32_t
 
	mt˝i_©o
;

214 
u_öt32_t
 
	mt˝i_¢d_mss
;

215 
u_öt32_t
 
	mt˝i_rcv_mss
;

217 
u_öt32_t
 
	mt˝i_u«cked
;

218 
u_öt32_t
 
	mt˝i_ßcked
;

219 
u_öt32_t
 
	mt˝i_lo°
;

220 
u_öt32_t
 
	mt˝i_ªå™s
;

221 
u_öt32_t
 
	mt˝i_Áckës
;

224 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

225 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

226 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

227 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

230 
u_öt32_t
 
	mt˝i_pmtu
;

231 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

232 
u_öt32_t
 
	mt˝i_πt
;

233 
u_öt32_t
 
	mt˝i_πtv¨
;

234 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

235 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

236 
u_öt32_t
 
	mt˝i_advmss
;

237 
u_öt32_t
 
	mt˝i_ª‹dîög
;

239 
u_öt32_t
 
	mt˝i_rcv_πt
;

240 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

242 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

247 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

249 
	st˝_md5sig


251 
sockaddr_°‹age
 
	mt˝m_addr
;

252 
u_öt16_t
 
	m__t˝m_∑d1
;

253 
u_öt16_t
 
	mt˝m_keyÀn
;

254 
u_öt32_t
 
	m__t˝m_∑d2
;

255 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

259 
	st˝_ª∑ú_›t


261 
u_öt32_t
 
	m›t_code
;

262 
u_öt32_t
 
	m›t_vÆ
;

268 
	mTCP_NO_QUEUE
,

269 
	mTCP_RECV_QUEUE
,

270 
	mTCP_SEND_QUEUE
,

271 
	mTCP_QUEUES_NR
,

275 
	#TCP_COOKIE_MIN
 8

	)

276 
	#TCP_COOKIE_MAX
 16

	)

277 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

280 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

281 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

285 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

286 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

288 
	#TCP_MSS_DEFAULT
 536U

	)

289 
	#TCP_MSS_DESIRED
 1220U

	)

291 
	st˝_cookõ_å™ß˘i⁄s


293 
u_öt16_t
 
	mt˝˘_Êags
;

294 
u_öt8_t
 
	m__t˝˘_∑d1
;

295 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

296 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

297 
u_öt16_t
 
	mt˝˘_u£d
;

298 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/netinet/udp.h

47 #i‚de‡
__NETINET_UDP_H


48 
	#__NETINET_UDP_H
 1

	)

50 
	~<„©uªs.h
>

51 
	~<sys/ty≥s.h
>

56 
	sudphdr


58 
__exãnsi⁄__
 union

62 
u_öt16_t
 
	muh_•‹t
;

63 
u_öt16_t
 
	muh_dp‹t
;

64 
u_öt16_t
 
	muh_uÀn
;

65 
u_öt16_t
 
	muh_sum
;

69 
u_öt16_t
 
	msour˚
;

70 
u_öt16_t
 
	mde°
;

71 
u_öt16_t
 
	mÀn
;

72 
u_öt16_t
 
	mcheck
;

78 
	#UDP_CORK
 1

	)

79 
	#UDP_ENCAP
 100

	)

81 
	#UDP_NO_CHECK6_TX
 101

	)

83 
	#UDP_NO_CHECK6_RX
 102

	)

87 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

88 
	#UDP_ENCAP_ESPINUDP
 2

	)

89 
	#UDP_ENCAP_L2TPINUDP
 3

	)

91 
	#SOL_UDP
 17

	)

	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #ifde‡
__USE_MISC


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_MISC


94 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

102 
puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
gëpw«m
 (c⁄° *
__«me
);

118 #ifde‡
__USE_POSIX


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #ifde‡
__USE_MISC


139 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

144 
gëpwuid_r
 (
__uid_t
 
__uid
,

145 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

146 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

147 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

149 
gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

150 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

151 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

152 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

155 #ifdef 
__USE_MISC


163 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

164 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

165 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

166 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

171 #ifde‡
__USE_GNU


180 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

183 
	g__END_DECLS


	@/usr/include/resolv.h

52 #i‚de‡
_RESOLV_H_


56 
	~<sys/ty≥s.h
>

57 
	~<√töë/ö.h
>

59 #i‚de‡
__√ed_ªs_°©e


60 
	#_RESOLV_H_


	)

62 
	~<sys/∑øm.h
>

63 
	~<sys/cdefs.h
>

64 
	~<°dio.h
>

65 
	~<¨∑/«me£r.h
>

68 #i‚de‡
__ªs_°©e_deföed


69 
	#__ªs_°©e_deföed


	)

71 íum { 
	mªs_gﬂhód
, 
	mªs_√xäs
, 
	mªs_modifõd
, 
	mªs_d⁄e
, 
	mªs_îr‹
 }

72 
	tªs_£ndhooka˘
;

74 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_qhook
Ë(
	tsockaddr_ö
 * c⁄° *
	t__ns
,

75 c⁄° 
	tu_ch¨
 **
	t__quîy
,

76 *
	t__quîyÀn
,

77 
	tu_ch¨
 *
	t__™s
,

78 
	t__™ssiz
,

79 *
	t__ª•Àn
);

81 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_rhook
Ë(c⁄° 
	tsockaddr_ö
 *
	t__ns
,

82 c⁄° 
	tu_ch¨
 *
	t__quîy
,

83 
	t__quîyÀn
,

84 
	tu_ch¨
 *
	t__™s
,

85 
	t__™ssiz
,

86 *
	t__ª•Àn
);

91 
	#MAXNS
 3

	)

92 
	#MAXDFLSRCH
 3

	)

93 
	#MAXDNSRCH
 6

	)

94 
	#LOCALDOMAINPARTS
 2

	)

96 
	#RES_TIMEOUT
 5

	)

97 
	#MAXRESOLVSORT
 10

	)

98 
	#RES_MAXNDOTS
 15

	)

99 
	#RES_MAXRETRANS
 30

	)

100 
	#RES_MAXRETRY
 5

	)

101 
	#RES_DFLRETRY
 2

	)

102 
	#RES_MAXTIME
 65535

	)

104 
	s__ªs_°©e
 {

105 
ªå™s
;

106 
ªåy
;

107 
u_l⁄g
 
›ti⁄s
;

108 
nscou¡
;

109 
sockaddr_ö


110 
nßddr_li°
[
MAXNS
];

111 
	#nßddr
 
nßddr_li°
[0]

	)

112 
u_sh‹t
 
id
;

114 *
dn§ch
[
MAXDNSRCH
+1];

115 
defd«me
[256];

116 
u_l⁄g
 
pfcode
;

117 
ndŸs
:4;

118 
ns‹t
:4;

119 
ùv6_u«vaû
:1;

120 
unu£d
:23;

122 
ö_addr
 
addr
;

123 
u_öt32_t
 
mask
;

124 } 
s‹t_li°
[
MAXRESOLVSORT
];

126 
ªs_£nd_qhook
 
qhook
;

127 
ªs_£nd_rhook
 
rhook
;

128 
ªs_h_î∫o
;

129 
_vcsock
;

130 
u_öt
 
_Êags
;

133 
∑d
[52];

135 
u_öt16_t
 
nscou¡
;

136 
u_öt16_t
 
nsm≠
[
MAXNS
];

137 
nssocks
[
MAXNS
];

138 
u_öt16_t
 
nscou¡6
;

139 
u_öt16_t
 
nsöô
;

140 
sockaddr_ö6
 *
nßddrs
[
MAXNS
];

141 #ifde‡
_LIBC


142 
öô°amp


143 
	`__©åibuã__
((
∑cked
));

145 
_öô°amp
[2];

147 } 
_ext
;

148 } 
_u
;

151 
__ªs_°©e
 *
	tªs_°©e
;

152 #unde‡
__√ed_ªs_°©e


155 #ifde‡
_RESOLV_H_


164 
	#__RES
 19991006

	)

172 #i‚de‡
_PATH_RESCONF


173 
	#_PATH_RESCONF
 "/ëc/ªsﬁv.c⁄f"

	)

176 
	sªs_sym
 {

177 
numbî
;

178 * 
«me
;

179 * 
hum™«me
;

185 
	#RES_F_VC
 0x00000001

	)

186 
	#RES_F_CONN
 0x00000002

	)

187 
	#RES_F_EDNS0ERR
 0x00000004

	)

190 
	#RES_EXHAUSTIVE
 0x00000001

	)

195 
	#RES_INIT
 0x00000001

	)

196 
	#RES_DEBUG
 0x00000002

	)

197 
	#RES_AAONLY
 0x00000004

	)

198 
	#RES_USEVC
 0x00000008

	)

199 
	#RES_PRIMARY
 0x00000010

	)

200 
	#RES_IGNTC
 0x00000020

	)

201 
	#RES_RECURSE
 0x00000040

	)

202 
	#RES_DEFNAMES
 0x00000080

	)

203 
	#RES_STAYOPEN
 0x00000100

	)

204 
	#RES_DNSRCH
 0x00000200

	)

205 
	#RES_INSECURE1
 0x00000400

	)

206 
	#RES_INSECURE2
 0x00000800

	)

207 
	#RES_NOALIASES
 0x00001000

	)

208 
	#RES_USE_INET6
 0x00002000

	)

209 
	#RES_ROTATE
 0x00004000

	)

210 
	#RES_NOCHECKNAME
 0x00008000

	)

211 
	#RES_KEEPTSIG
 0x00010000

	)

212 
	#RES_BLAST
 0x00020000

	)

213 
	#RES_USEBSTRING
 0x00040000

	)

215 
	#RES_NOIP6DOTINT
 0x00080000

	)

217 
	#RES_USE_EDNS0
 0x00100000

	)

218 
	#RES_SNGLKUP
 0x00200000

	)

219 
	#RES_SNGLKUPREOP
 0x00400000

	)

221 
	#RES_USE_DNSSEC
 0x00800000

	)

222 
	#RES_NOTLDQUERY
 0x01000000

	)

225 
	#RES_DEFAULT
 (
RES_RECURSE
|
RES_DEFNAMES
|
RES_DNSRCH
|
RES_NOIP6DOTINT
)

	)

230 
	#RES_PRF_STATS
 0x00000001

	)

231 
	#RES_PRF_UPDATE
 0x00000002

	)

232 
	#RES_PRF_CLASS
 0x00000004

	)

233 
	#RES_PRF_CMD
 0x00000008

	)

234 
	#RES_PRF_QUES
 0x00000010

	)

235 
	#RES_PRF_ANS
 0x00000020

	)

236 
	#RES_PRF_AUTH
 0x00000040

	)

237 
	#RES_PRF_ADD
 0x00000080

	)

238 
	#RES_PRF_HEAD1
 0x00000100

	)

239 
	#RES_PRF_HEAD2
 0x00000200

	)

240 
	#RES_PRF_TTLID
 0x00000400

	)

241 
	#RES_PRF_HEADX
 0x00000800

	)

242 
	#RES_PRF_QUERY
 0x00001000

	)

243 
	#RES_PRF_REPLY
 0x00002000

	)

244 
	#RES_PRF_INIT
 0x00004000

	)

248 
__BEGIN_DECLS


249 
__ªs_°©e
 *
	$__ªs_°©e
(Ë
	`__©åibuã__
 ((
__c⁄°__
));

250 
__END_DECLS


251 
	#_ªs
 (*
	`__ªs_°©e
())

	)

253 #i‚de‡
__BIND_NOSTATIC


254 
	#Â_nquîy
 
__Â_nquîy


	)

255 
	#Â_quîy
 
__Â_quîy


	)

256 
	#ho°Æüs
 
__ho°Æüs


	)

257 
	#p_quîy
 
__p_quîy


	)

258 
	#ªs_˛o£
 
__ªs_˛o£


	)

259 
	#ªs_öô
 
__ªs_öô


	)

260 
	#ªs_isour£rvî
 
__ªs_isour£rvî


	)

261 
	#ªs_mkquîy
 
__ªs_mkquîy


	)

262 
	#ªs_quîy
 
__ªs_quîy


	)

263 
	#ªs_quîydomaö
 
__ªs_quîydomaö


	)

264 
	#ªs_£¨ch
 
__ªs_£¨ch


	)

265 
	#ªs_£nd
 
__ªs_£nd


	)

267 
__BEGIN_DECLS


268 
	$Â_nquîy
 (c⁄° 
u_ch¨
 *, , 
FILE
 *Ë
__THROW
;

269 
	$Â_quîy
 (c⁄° 
u_ch¨
 *, 
FILE
 *Ë
__THROW
;

270 c⁄° * 
	$ho°Æüs
 (c⁄° *Ë
__THROW
;

271 
	$p_quîy
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

272 
	$ªs_˛o£
 (Ë
__THROW
;

273 
	$ªs_öô
 (Ë
__THROW
;

274 
	$ªs_isour£rvî
 (c⁄° 
sockaddr_ö
 *Ë
__THROW
;

275 
	$ªs_mkquîy
 (, c⁄° *, , , c⁄° 
u_ch¨
 *,

276 , c⁄° 
u_ch¨
 *, u_ch¨ *, Ë
__THROW
;

277 
	$ªs_quîy
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

278 
	$ªs_quîydomaö
 (const *, const *, , ,

279 
u_ch¨
 *, Ë
__THROW
;

280 
	$ªs_£¨ch
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

281 
	$ªs_£nd
 (c⁄° 
u_ch¨
 *, , u_ch¨ *, Ë
__THROW
;

282 
__END_DECLS


285 
	#b64_¡›
 
__b64_¡›


	)

286 
	#b64_±⁄
 
__b64_±⁄


	)

287 
	#dn_comp
 
__dn_comp


	)

288 
	#dn_cou¡_œbñs
 
__dn_cou¡_œbñs


	)

289 
	#dn_ex∑nd
 
__dn_ex∑nd


	)

290 
	#dn_skù«me
 
__dn_skù«me


	)

291 
	#Â_ªs°©
 
__Â_ªs°©


	)

292 
	#loc_©⁄
 
__loc_©⁄


	)

293 
	#loc_¡ﬂ
 
__loc_¡ﬂ


	)

294 
	#p_cd«me
 
__p_cd«me


	)

295 
	#p_cd¬ame
 
__p_cd¬ame


	)

296 
	#p_˛ass
 
__p_˛ass


	)

297 
	#p_fq«me
 
__p_fq«me


	)

298 
	#p_fq¬ame
 
__p_fq¬ame


	)

299 
	#p_›ti⁄
 
__p_›ti⁄


	)

300 
	#p_£c°od©e
 
__p_£c°od©e


	)

301 
	#p_£˘i⁄
 
__p_£˘i⁄


	)

302 
	#p_time
 
__p_time


	)

303 
	#p_ty≥
 
__p_ty≥


	)

304 
	#p_rcode
 
__p_rcode


	)

305 
	#pué⁄g
 
__pué⁄g


	)

306 
	#putsh‹t
 
__putsh‹t


	)

307 
	#ªs_dnok
 
__ªs_dnok


	)

308 
	#ªs_hnok
 
__ªs_hnok


	)

309 
	#ªs_ho°Æüs
 
__ªs_ho°Æüs


	)

310 
	#ªs_maûok
 
__ªs_maûok


	)

311 
	#ªs_«meöquîy
 
__ªs_«meöquîy


	)

312 
	#ªs_n˛o£
 
__ªs_n˛o£


	)

313 
	#ªs_nöô
 
__ªs_nöô


	)

314 
	#ªs_nmkquîy
 
__ªs_nmkquîy


	)

315 
	#ªs_≈quîy
 
__ªs_≈quîy


	)

316 
	#ªs_nquîy
 
__ªs_nquîy


	)

317 
	#ªs_nquîydomaö
 
__ªs_nquîydomaö


	)

318 
	#ªs_n£¨ch
 
__ªs_n£¨ch


	)

319 
	#ªs_n£nd
 
__ªs_n£nd


	)

320 
	#ªs_nisour£rvî
 
__ªs_nisour£rvî


	)

321 
	#ªs_ownok
 
__ªs_ownok


	)

322 
	#ªs_quîõsm©ch
 
__ªs_quîõsm©ch


	)

323 
	#ªs_øndomid
 
__ªs_øndomid


	)

324 
	#sym_¡›
 
__sym_¡›


	)

325 
	#sym_¡os
 
__sym_¡os


	)

326 
	#sym_°⁄
 
__sym_°⁄


	)

327 
__BEGIN_DECLS


328 
	$ªs_hnok
 (c⁄° *Ë
__THROW
;

329 
	$ªs_ownok
 (c⁄° *Ë
__THROW
;

330 
	$ªs_maûok
 (c⁄° *Ë
__THROW
;

331 
	$ªs_dnok
 (c⁄° *Ë
__THROW
;

332 
	$sym_°⁄
 (c⁄° 
ªs_sym
 *, c⁄° *, *Ë
__THROW
;

333 c⁄° * 
	$sym_¡os
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

334 c⁄° * 
	$sym_¡›
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

335 
	$b64_¡›
 (
u_ch¨
 c⁄° *, 
size_t
, *, size_tË
__THROW
;

336 
	$b64_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

337 
	$loc_©⁄
 (c⁄° *
__ascii
, 
u_ch¨
 *
__bö¨y
Ë
__THROW
;

338 c⁄° * 
	$loc_¡ﬂ
 (c⁄° 
u_ch¨
 *
__bö¨y
, *
__ascii
Ë
__THROW
;

339 
	$dn_skù«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

340 
	$pué⁄g
 (
u_öt32_t
, 
u_ch¨
 *Ë
__THROW
;

341 
	$putsh‹t
 (
u_öt16_t
, 
u_ch¨
 *Ë
__THROW
;

342 c⁄° * 
	$p_˛ass
 (Ë
__THROW
;

343 c⁄° * 
	$p_time
 (
u_öt32_t
Ë
__THROW
;

344 c⁄° * 
	$p_ty≥
 (Ë
__THROW
;

345 c⁄° * 
	$p_rcode
 (Ë
__THROW
;

346 c⁄° 
u_ch¨
 * 
	$p_cd¬ame
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, , 
FILE
 *)

347 
__THROW
;

348 c⁄° 
u_ch¨
 * 
	$p_cd«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

349 c⁄° 
u_ch¨
 * 
	$p_fq¬ame
 (c⁄° 
u_ch¨
 *
__˝
, c⁄° u_ch¨ *
__msg
,

350 , *, Ë
__THROW
;

351 c⁄° 
u_ch¨
 * 
	$p_fq«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

352 c⁄° * 
	$p_›ti⁄
 (
u_l⁄g
 
__›ti⁄
Ë
__THROW
;

353 * 
	$p_£c°od©e
 (
u_l⁄g
Ë
__THROW
;

354 
	$dn_cou¡_œbñs
 (c⁄° *Ë
__THROW
;

355 
	$dn_comp
 (c⁄° *, 
u_ch¨
 *, , u_char **, u_char **)

356 
__THROW
;

357 
	$dn_ex∑nd
 (c⁄° 
u_ch¨
 *, const u_char *, const u_char *,

358 *, Ë
__THROW
;

359 
u_öt
 
	$ªs_øndomid
 (Ë
__THROW
;

360 
	$ªs_«meöquîy
 (const *, , ,

361 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

362 
	$ªs_quîõsm©ch
 (c⁄° 
u_ch¨
 *, const u_char *,

363 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

364 c⁄° * 
	$p_£˘i⁄
 (
__£˘i⁄
, 
__›code
Ë
__THROW
;

366 
	$ªs_nöô
 (
ªs_°©e
Ë
__THROW
;

367 
	$ªs_nisour£rvî
 (c⁄° 
ªs_°©e
,

368 c⁄° 
sockaddr_ö
 *Ë
__THROW
;

369 
	$Â_ªs°©
 (c⁄° 
ªs_°©e
, 
FILE
 *Ë
__THROW
;

370 
	$ªs_≈quîy
 (c⁄° 
ªs_°©e
, c⁄° 
u_ch¨
 *, , 
FILE
 *)

371 
__THROW
;

372 c⁄° * 
	$ªs_ho°Æüs
 (c⁄° 
ªs_°©e
, c⁄° *, *, 
size_t
)

373 
__THROW
;

374 
	$ªs_nquîy
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

375 
__THROW
;

376 
	$ªs_n£¨ch
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

377 
__THROW
;

378 
	$ªs_nquîydomaö
 (
ªs_°©e
, const *, const *, ,

379 , 
u_ch¨
 *, Ë
__THROW
;

380 
	$ªs_nmkquîy
 (
ªs_°©e
, , const *, , ,

381 c⁄° 
u_ch¨
 *, , const u_char *, u_char *,

382 Ë
__THROW
;

383 
	$ªs_n£nd
 (
ªs_°©e
, c⁄° 
u_ch¨
 *, , u_char *, )

384 
__THROW
;

385 
	$ªs_n˛o£
 (
ªs_°©e
Ë
__THROW
;

386 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

168 #ifde‡
__USE_XOPEN


169 #ifde‡
__GNUC__


170 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

172 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_MISC


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_MISC


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_MISC


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

308 
	~<bôs/sigc⁄ãxt.h
>

311 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

316 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


317 
	#__√ed_size_t


	)

318 
	~<°ddef.h
>

323 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

325 
	~<bôs/sig°ack.h
>

326 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


328 
	~<sys/uc⁄ãxt.h
>

334 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

335 
__THROW
 
__©åibuã_dïªˇãd__
;

339 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

340 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

344 #ifde‡
__USE_XOPEN_EXTENDED


348 
	$sighﬁd
 (
__sig
Ë
__THROW
;

351 
	$sigªl£
 (
__sig
Ë
__THROW
;

354 
	$sigign‹e
 (
__sig
Ë
__THROW
;

357 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

360 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


363 
	~<bôs/±hªadty≥s.h
>

364 
	~<bôs/sigthªad.h
>

371 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

373 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

377 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


175 *
	$°rdup
 (c⁄° *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 c⁄° *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 c⁄° *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 const *

228 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 const *

255 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 const *

307 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

324 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

326 #ifde‡
__OPTIMIZE__


327 
__exã∫_Æways_ölöe
 *

328 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


330  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

333 
__exã∫_Æways_ölöe
 const *

334 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


336  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

339 
	}
}

341 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
__END_NAMESPACE_STD


353 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

354 c⁄° *
__ª°ri˘
 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

357 #ifde‡
__USE_POSIX


358 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

359 **
__ª°ri˘
 
__ßve_±r
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

363 #ifde‡
__USE_GNU


365 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


366 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

369 c⁄° *
__√edÀ
)

370 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

372 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

373 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

377 #ifde‡
__USE_GNU


381 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

382 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

387 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

390 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

391 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

392 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

396 
__BEGIN_NAMESPACE_STD


398 
size_t
 
	$°æí
 (c⁄° *
__s
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

400 
__END_NAMESPACE_STD


402 #ifdef 
__USE_XOPEN2K8


405 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

406 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 
__BEGIN_NAMESPACE_STD


412 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

413 
__END_NAMESPACE_STD


414 #ifde‡
__USE_XOPEN2K


422 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


425 #ifde‡
__REDIRECT_NTH


426 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

427 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

428 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

430 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

431 
__THROW
 
	`__n⁄nuŒ
 ((2));

432 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

437 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

442 #ifde‡
__USE_XOPEN2K8


444 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

450 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

452 #ifde‡
__USE_MISC


454 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

455 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

458 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

461 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

462 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


468 *
	`ödex
 (*
__s
, 
__c
)

469 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

471 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

473 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


474 
__exã∫_Æways_ölöe
 *

475 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


477  
	`__buûtö_ödex
 (
__s
, 
__c
);

480 
__exã∫_Æways_ölöe
 const *

481 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


483  
	`__buûtö_ödex
 (
__s
, 
__c
);

486 
	}
}

488 *
	$ödex
 (c⁄° *
__s
, 
__c
)

489 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

493 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


496 *
	`rödex
 (*
__s
, 
__c
)

497 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

499 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

501 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


502 
__exã∫_Æways_ölöe
 *

503 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


505  
	`__buûtö_rödex
 (
__s
, 
__c
);

508 
__exã∫_Æways_ölöe
 const *

509 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


511  
	`__buûtö_rödex
 (
__s
, 
__c
);

514 
	}
}

516 *
	$rödex
 (c⁄° *
__s
, 
__c
)

517 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

522 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

526 #ifdef 
__USE_GNU


527 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

533 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

538 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

541 #ifdef 
__USE_GNU


544 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

548 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

549 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

553 #ifdef 
__USE_MISC


556 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

557 c⁄° *
__ª°ri˘
 
__dñim
)

558 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

561 #ifdef 
__USE_XOPEN2K8


563 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

566 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

574 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 #ifdef 
__USE_GNU


583 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

584 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

587 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

590 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #i‚de‡
ba£«me


597 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


598 "C++" *
	$ba£«me
 (*
__fûíame
)

599 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

600 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

601 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

610 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

611 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


631 
	~<bôs/°rög.h
>

634 
	~<bôs/°rög2.h
>

637 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


639 
	~<bôs/°rög3.h
>

643 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_MISC
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_MISC


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_MISC


886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/arpa/nameser.h

52 #i‚de‡
_ARPA_NAMESER_H_


53 
	#_ARPA_NAMESER_H_


	)

57 
	#BIND_4_COMPAT


	)

59 
	~<sys/∑øm.h
>

60 #i‡(!
deföed
(
BSD
)) || (BSD < 199306)

61 
	~<sys/bôy≥s.h
>

63 
	~<sys/ty≥s.h
>

65 
	~<sys/cdefs.h
>

75 
	#__NAMESER
 19991006

	)

79 
	#NS_PACKETSZ
 512

	)

80 
	#NS_MAXDNAME
 1025

	)

81 
	#NS_MAXMSG
 65535

	)

82 
	#NS_MAXCDNAME
 255

	)

83 
	#NS_MAXLABEL
 63

	)

84 
	#NS_HFIXEDSZ
 12

	)

85 
	#NS_QFIXEDSZ
 4

	)

86 
	#NS_RRFIXEDSZ
 10

	)

87 
	#NS_INT32SZ
 4

	)

88 
	#NS_INT16SZ
 2

	)

89 
	#NS_INT8SZ
 1

	)

90 
	#NS_INADDRSZ
 4

	)

91 
	#NS_IN6ADDRSZ
 16

	)

92 
	#NS_CMPRSFLGS
 0xc0

	)

93 
	#NS_DEFAULTPORT
 53

	)

98 
	e__ns_£˘
 {

99 
	mns_s_qd
 = 0,

100 
	mns_s_zn
 = 0,

101 
	mns_s_™
 = 1,

102 
	mns_s_¥
 = 1,

103 
	mns_s_ns
 = 2,

104 
	mns_s_ud
 = 2,

105 
	mns_s_¨
 = 3,

106 
	mns_s_max
 = 4

107 } 
	tns_£˘
;

114 
	s__ns_msg
 {

115 c⁄° 
u_ch¨
 *
	m_msg
, *
	m_eom
;

116 
u_öt16_t
 
	m_id
, 
	m_Êags
, 
	m_cou¡s
[
ns_s_max
];

117 c⁄° 
u_ch¨
 *
	m_£˘i⁄s
[
ns_s_max
];

118 
ns_£˘
 
	m_£˘
;

119 
	m_ºnum
;

120 c⁄° 
u_ch¨
 *
	m_msg_±r
;

121 } 
	tns_msg
;

124 
	s_ns_Êagd©a
 { 
	mmask
, 
	mshi·
; };

125 c⁄° 
_ns_Êagd©a
 _ns_flagdata[];

129 
	#ns_msg_id
(
h™dÀ
Ë((h™dÀ).
_id
 + 0)

	)

130 
	#ns_msg_ba£
(
h™dÀ
Ë((h™dÀ).
_msg
 + 0)

	)

131 
	#ns_msg_íd
(
h™dÀ
Ë((h™dÀ).
_eom
 + 0)

	)

132 
	#ns_msg_size
(
h™dÀ
Ë((h™dÀ).
_eom
 - (h™dÀ).
_msg
)

	)

133 
	#ns_msg_cou¡
(
h™dÀ
, 
£˘i⁄
Ë((h™dÀ).
_cou¡s
[£˘i⁄] + 0)

	)

138 
	s__ns_º
 {

139 
	m«me
[
NS_MAXDNAME
];

140 
u_öt16_t
 
	mty≥
;

141 
u_öt16_t
 
	mº_˛ass
;

142 
u_öt32_t
 
	mâl
;

143 
u_öt16_t
 
	mrdÀngth
;

144 c⁄° 
u_ch¨
 * 
	mrd©a
;

145 } 
	tns_º
;

148 
	#ns_º_«me
(
º
Ë((‘r).
«me
[0] !'\0'Ë? (º).«mê: ".")

	)

149 
	#ns_º_ty≥
(
º
Ë((
ns_ty≥
)(‘r).
ty≥
 + 0))

	)

150 
	#ns_º_˛ass
(
º
Ë((
ns_˛ass
)(‘r).
º_˛ass
 + 0))

	)

151 
	#ns_º_âl
(
º
Ë(‘r).
âl
 + 0)

	)

152 
	#ns_º_rdÀn
(
º
Ë(‘r).
rdÀngth
 + 0)

	)

153 
	#ns_º_rd©a
(
º
Ë(‘r).
rd©a
 + 0)

	)

160 
	e__ns_Êag
 {

161 
	mns_f_qr
,

162 
	mns_f_›code
,

163 
	mns_f_Ø
,

164 
	mns_f_tc
,

165 
	mns_f_rd
,

166 
	mns_f_ø
,

167 
	mns_f_z
,

168 
	mns_f_ad
,

169 
	mns_f_cd
,

170 
	mns_f_rcode
,

171 
	mns_f_max


172 } 
	tns_Êag
;

177 
	e__ns_›code
 {

178 
	mns_o_quîy
 = 0,

179 
	mns_o_iquîy
 = 1,

180 
	mns_o_°©us
 = 2,

182 
	mns_o_nŸify
 = 4,

183 
	mns_o_upd©e
 = 5,

184 
	mns_o_max
 = 6

185 } 
	tns_›code
;

190 
	e__ns_rcode
 {

191 
	mns_r_n€º‹
 = 0,

192 
	mns_r_f‹mîr
 = 1,

193 
	mns_r_£rvÁû
 = 2,

194 
	mns_r_nxdomaö
 = 3,

195 
	mns_r_nŸim∂
 = 4,

196 
	mns_r_ªfu£d
 = 5,

198 
	mns_r_yxdomaö
 = 6,

199 
	mns_r_yxº£t
 = 7,

200 
	mns_r_nxº£t
 = 8,

201 
	mns_r_nŸauth
 = 9,

202 
	mns_r_nŸz⁄e
 = 10,

203 
	mns_r_max
 = 11,

205 
	mns_r_badvîs
 = 16,

207 
	mns_r_badsig
 = 16,

208 
	mns_r_badkey
 = 17,

209 
	mns_r_badtime
 = 18

210 } 
	tns_rcode
;

213 
	e__ns_upd©e_›î©i⁄
 {

214 
	mns_u›_dñëe
 = 0,

215 
	mns_u›_add
 = 1,

216 
	mns_u›_max
 = 2

217 } 
	tns_upd©e_›î©i⁄
;

222 
	sns_tsig_key
 {

223 
	m«me
[
NS_MAXDNAME
], 
	mÆg
[NS_MAXDNAME];

224 *
	md©a
;

225 
	mÀn
;

227 
ns_tsig_key
 
	tns_tsig_key
;

232 
	sns_t˝_tsig_°©e
 {

233 
	mcou¡î
;

234 
d°_key
 *
	mkey
;

235 *
	m˘x
;

236 
	msig
[
NS_PACKETSZ
];

237 
	msigÀn
;

239 
ns_t˝_tsig_°©e
 
	tns_t˝_tsig_°©e
;

241 
	#NS_TSIG_FUDGE
 300

	)

242 
	#NS_TSIG_TCP_COUNT
 100

	)

243 
	#NS_TSIG_ALG_HMAC_MD5
 "HMAC-MD5.SIG-ALG.REG.INT"

	)

245 
	#NS_TSIG_ERROR_NO_TSIG
 -10

	)

246 
	#NS_TSIG_ERROR_NO_SPACE
 -11

	)

247 
	#NS_TSIG_ERROR_FORMERR
 -12

	)

252 
	e__ns_ty≥
 {

253 
	mns_t_övÆid
 = 0,

254 
	mns_t_a
 = 1,

255 
	mns_t_ns
 = 2,

256 
	mns_t_md
 = 3,

257 
	mns_t_mf
 = 4,

258 
	mns_t_˙ame
 = 5,

259 
	mns_t_sﬂ
 = 6,

260 
	mns_t_mb
 = 7,

261 
	mns_t_mg
 = 8,

262 
	mns_t_mr
 = 9,

263 
	mns_t_nuŒ
 = 10,

264 
	mns_t_wks
 = 11,

265 
	mns_t_±r
 = 12,

266 
	mns_t_höfo
 = 13,

267 
	mns_t_möfo
 = 14,

268 
	mns_t_mx
 = 15,

269 
	mns_t_txt
 = 16,

270 
	mns_t_Ω
 = 17,

271 
	mns_t_afsdb
 = 18,

272 
	mns_t_x25
 = 19,

273 
	mns_t_isdn
 = 20,

274 
	mns_t_π
 = 21,

275 
	mns_t_nßp
 = 22,

276 
	mns_t_nßp_±r
 = 23,

277 
	mns_t_sig
 = 24,

278 
	mns_t_key
 = 25,

279 
	mns_t_px
 = 26,

280 
	mns_t_gpos
 = 27,

281 
	mns_t_ØØ
 = 28,

282 
	mns_t_loc
 = 29,

283 
	mns_t_nxt
 = 30,

284 
	mns_t_eid
 = 31,

285 
	mns_t_nimloc
 = 32,

286 
	mns_t_§v
 = 33,

287 
	mns_t_©ma
 = 34,

288 
	mns_t_«±r
 = 35,

289 
	mns_t_kx
 = 36,

290 
	mns_t_˚π
 = 37,

291 
	mns_t_a6
 = 38,

292 
	mns_t_d«me
 = 39,

293 
	mns_t_sök
 = 40,

294 
	mns_t_›t
 = 41,

295 
	mns_t_≠l
 = 42,

296 
	mns_t_tkey
 = 249,

297 
	mns_t_tsig
 = 250,

298 
	mns_t_ix‰
 = 251,

299 
	mns_t_ax‰
 = 252,

300 
	mns_t_maûb
 = 253,

301 
	mns_t_maûa
 = 254,

302 
	mns_t_™y
 = 255,

303 
	mns_t_zx‰
 = 256,

304 
	mns_t_max
 = 65536

305 } 
	tns_ty≥
;

308 
	#ns_t_qt_p
(
t
Ë(
	`ns_t_x‰_p
—Ë|| (tË=
ns_t_™y
 || \

309 (
t
Ë=
ns_t_maûb
 || (tË=
ns_t_maûa
)

	)

311 
	#ns_t_mº_p
(
t
Ë(—Ë=
ns_t_tsig
 || (tË=
ns_t_›t
)

	)

313 
	#ns_t_º_p
(
t
Ë(!
	`ns_t_qt_p
—Ë&& !
	`ns_t_mº_p
—))

	)

314 
	#ns_t_udp_p
(
t
Ë(—Ë!
ns_t_ax‰
 && (tË!
ns_t_zx‰
)

	)

315 
	#ns_t_x‰_p
(
t
Ë(—Ë=
ns_t_ax‰
 || (tË=
ns_t_ix‰
 || \

316 (
t
Ë=
ns_t_zx‰
)

	)

321 
	e__ns_˛ass
 {

322 
	mns_c_övÆid
 = 0,

323 
	mns_c_ö
 = 1,

324 
	mns_c_2
 = 2,

325 
	mns_c_chaos
 = 3,

326 
	mns_c_hs
 = 4,

328 
	mns_c_n⁄e
 = 254,

329 
	mns_c_™y
 = 255,

330 
	mns_c_max
 = 65536

331 } 
	tns_˛ass
;

335 
	e__ns_key_ty≥s
 {

336 
	mns_kt_rß
 = 1,

337 
	mns_kt_dh
 = 2,

338 
	mns_kt_dß
 = 3,

339 
	mns_kt_¥iv©e
 = 254

340 } 
	tns_key_ty≥s
;

342 
	e__ns_˚π_ty≥s
 {

343 
	m˚π_t_pkix
 = 1,

344 
	m˚π_t_•ki
 = 2,

345 
	m˚π_t_pgp
 = 3,

346 
	m˚π_t_uæ
 = 253,

347 
	m˚π_t_oid
 = 254

348 } 
	tns_˚π_ty≥s
;

351 
	#NS_KEY_TYPEMASK
 0xC000

	)

352 
	#NS_KEY_TYPE_AUTH_CONF
 0x0000

	)

353 
	#NS_KEY_TYPE_CONF_ONLY
 0x8000

	)

354 
	#NS_KEY_TYPE_AUTH_ONLY
 0x4000

	)

355 
	#NS_KEY_TYPE_NO_KEY
 0xC000

	)

357 
	#NS_KEY_NO_AUTH
 0x8000

	)

358 
	#NS_KEY_NO_CONF
 0x4000

	)

359 
	#NS_KEY_RESERVED2
 0x2000

	)

360 
	#NS_KEY_EXTENDED_FLAGS
 0x1000

	)

361 
	#NS_KEY_RESERVED4
 0x0800

	)

362 
	#NS_KEY_RESERVED5
 0x0400

	)

363 
	#NS_KEY_NAME_TYPE
 0x0300

	)

364 
	#NS_KEY_NAME_USER
 0x0000

	)

365 
	#NS_KEY_NAME_ENTITY
 0x0200

	)

366 
	#NS_KEY_NAME_ZONE
 0x0100

	)

367 
	#NS_KEY_NAME_RESERVED
 0x0300

	)

368 
	#NS_KEY_RESERVED8
 0x0080

	)

369 
	#NS_KEY_RESERVED9
 0x0040

	)

370 
	#NS_KEY_RESERVED10
 0x0020

	)

371 
	#NS_KEY_RESERVED11
 0x0010

	)

372 
	#NS_KEY_SIGNATORYMASK
 0x000F

	)

373 
	#NS_KEY_RESERVED_BITMASK
 ( 
NS_KEY_RESERVED2
 | \

374 
NS_KEY_RESERVED4
 | \

375 
NS_KEY_RESERVED5
 | \

376 
NS_KEY_RESERVED8
 | \

377 
NS_KEY_RESERVED9
 | \

378 
NS_KEY_RESERVED10
 | \

379 
NS_KEY_RESERVED11
 )

	)

380 
	#NS_KEY_RESERVED_BITMASK2
 0xFFFF

	)

382 
	#NS_ALG_MD5RSA
 1

	)

383 
	#NS_ALG_DH
 2

	)

384 
	#NS_ALG_DSA
 3

	)

385 
	#NS_ALG_DSS
 
NS_ALG_DSA


	)

386 
	#NS_ALG_EXPIRE_ONLY
 253

	)

387 
	#NS_ALG_PRIVATE_OID
 254

	)

390 
	#NS_KEY_PROT_TLS
 1

	)

391 
	#NS_KEY_PROT_EMAIL
 2

	)

392 
	#NS_KEY_PROT_DNSSEC
 3

	)

393 
	#NS_KEY_PROT_IPSEC
 4

	)

394 
	#NS_KEY_PROT_ANY
 255

	)

397 
	#NS_MD5RSA_MIN_BITS
 512

	)

398 
	#NS_MD5RSA_MAX_BITS
 4096

	)

400 
	#NS_MD5RSA_MAX_BYTES
 ((
NS_MD5RSA_MAX_BITS
+7/8)*2+3)

	)

402 
	#NS_MD5RSA_MAX_BASE64
 (((
NS_MD5RSA_MAX_BYTES
+2)/3)*4)

	)

403 
	#NS_MD5RSA_MIN_SIZE
 ((
NS_MD5RSA_MIN_BITS
+7)/8)

	)

404 
	#NS_MD5RSA_MAX_SIZE
 ((
NS_MD5RSA_MAX_BITS
+7)/8)

	)

406 
	#NS_DSA_SIG_SIZE
 41

	)

407 
	#NS_DSA_MIN_SIZE
 213

	)

408 
	#NS_DSA_MAX_BYTES
 405

	)

411 
	#NS_SIG_TYPE
 0

	)

412 
	#NS_SIG_ALG
 2

	)

413 
	#NS_SIG_LABELS
 3

	)

414 
	#NS_SIG_OTTL
 4

	)

415 
	#NS_SIG_EXPIR
 8

	)

416 
	#NS_SIG_SIGNED
 12

	)

417 
	#NS_SIG_FOOT
 16

	)

418 
	#NS_SIG_SIGNER
 18

	)

420 
	#NS_NXT_BITS
 8

	)

421 
	#NS_NXT_BIT_SET
–
n
,
p
Ë’[“)/
NS_NXT_BITS
] |(0x80>>(“)%NS_NXT_BITS)))

	)

422 
	#NS_NXT_BIT_CLEAR
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] &~(0x80>>(“)%NS_NXT_BITS)))

	)

423 
	#NS_NXT_BIT_ISSET
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] & (0x80>>(“)%NS_NXT_BITS)))

	)

424 
	#NS_NXT_MAX
 127

	)

429 
	#NS_OPT_DNSSEC_OK
 0x8000U

	)

430 
	#NS_OPT_NSID
 3

	)

435 
	#NS_GET16
(
s
, 
˝
) do { \

436 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

437 (
s
Ë((
u_öt16_t
)
t_˝
[0] << 8) \

438 | ((
u_öt16_t
)
t_˝
[1]) \

440 (
˝
Ë+
NS_INT16SZ
; \

441 } 0)

	)

443 
	#NS_GET32
(
l
, 
˝
) do { \

444 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

445 (
l
Ë((
u_öt32_t
)
t_˝
[0] << 24) \

446 | ((
u_öt32_t
)
t_˝
[1] << 16) \

447 | ((
u_öt32_t
)
t_˝
[2] << 8) \

448 | ((
u_öt32_t
)
t_˝
[3]) \

450 (
˝
Ë+
NS_INT32SZ
; \

451 } 0)

	)

453 
	#NS_PUT16
(
s
, 
˝
) do { \

454 
u_öt16_t
 
t_s
 = (u_öt16_t)(
s
); \

455 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

456 *
t_˝
++ = 
t_s
 >> 8; \

457 *
t_˝
 = 
t_s
; \

458 (
˝
Ë+
NS_INT16SZ
; \

459 } 0)

	)

461 
	#NS_PUT32
(
l
, 
˝
) do { \

462 
u_öt32_t
 
t_l
 = (u_öt32_t)(
l
); \

463 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

464 *
t_˝
++ = 
t_l
 >> 24; \

465 *
t_˝
++ = 
t_l
 >> 16; \

466 *
t_˝
++ = 
t_l
 >> 8; \

467 *
t_˝
 = 
t_l
; \

468 (
˝
Ë+
NS_INT32SZ
; \

469 } 0)

	)

471 
__BEGIN_DECLS


472 
	$ns_msg_gëÊag
 (
ns_msg
, Ë
__THROW
;

473 
u_öt
 
	$ns_gë16
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

474 
u_l⁄g
 
	$ns_gë32
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

475 
	$ns_put16
 (
u_öt
, 
u_ch¨
 *Ë
__THROW
;

476 
	$ns_put32
 (
u_l⁄g
, 
u_ch¨
 *Ë
__THROW
;

477 
	$ns_öô∑r£
 (c⁄° 
u_ch¨
 *, , 
ns_msg
 *Ë
__THROW
;

478 
	$ns_skùº
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
ns_£˘
, )

479 
__THROW
;

480 
	$ns_∑r£º
 (
ns_msg
 *, 
ns_£˘
, , 
ns_º
 *Ë
__THROW
;

481 
	$ns_•röår
 (c⁄° 
ns_msg
 *, c⁄° 
ns_º
 *,

482 c⁄° *, c⁄° *, *, 
size_t
)

483 
__THROW
;

484 
	$ns_•röårf
 (c⁄° 
u_ch¨
 *, 
size_t
, const *,

485 
ns_˛ass
, 
ns_ty≥
, 
u_l⁄g
, c⁄° 
u_ch¨
 *,

486 
size_t
, const *, const *,

487 *, 
size_t
Ë
__THROW
;

488 
	$ns_f‹m©_âl
 (
u_l⁄g
, *, 
size_t
Ë
__THROW
;

489 
	$ns_∑r£_âl
 (c⁄° *, 
u_l⁄g
 *Ë
__THROW
;

490 
u_öt32_t
 
	$ns_d©ëo£cs
 (c⁄° *, *Ë
__THROW
;

491 
	$ns_«me_¡ﬁ
 (c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

492 
	$ns_«me_¡›
 (c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

493 
	$ns_«me_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

494 
	$ns_«me_u≈ack
 (c⁄° 
u_ch¨
 *, const u_char *,

495 c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

496 
	$ns_«me_∑ck
 (c⁄° 
u_ch¨
 *, u_char *, ,

497 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

498 
	$ns_«me_uncom¥ess
 (c⁄° 
u_ch¨
 *, const u_char *,

499 c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

500 
	$ns_«me_com¥ess
 (c⁄° *, 
u_ch¨
 *, 
size_t
,

501 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

502 
	$ns_«me_skù
 (c⁄° 
u_ch¨
 **, c⁄° u_ch¨ *Ë
__THROW
;

503 
	$ns_«me_rﬁlback
 (c⁄° 
u_ch¨
 *, const u_char **,

504 c⁄° 
u_ch¨
 **Ë
__THROW
;

505 
	$ns_sign
 (
u_ch¨
 *, *, , , *,

506 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
Ë
__THROW
;

507 
	$ns_sign2
 (
u_ch¨
 *, *, , , *,

508 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
,

509 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

510 
	$ns_sign_t˝
 (
u_ch¨
 *, *, , ,

511 
ns_t˝_tsig_°©e
 *, Ë
__THROW
;

512 
	$ns_sign_t˝2
 (
u_ch¨
 *, *, , ,

513 
ns_t˝_tsig_°©e
 *, ,

514 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

515 
	$ns_sign_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

516 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

517 
u_ch¨
 *
	$ns_föd_tsig
 (
u_ch¨
 *, u_ch¨ *Ë
__THROW
;

518 
	$ns_vîify
 (
u_ch¨
 *, *, *, const u_char *, ,

519 
u_ch¨
 *, *, 
time_t
 *, Ë
__THROW
;

520 
	$ns_vîify_t˝
 (
u_ch¨
 *, *, 
ns_t˝_tsig_°©e
 *, )

521 
__THROW
;

522 
	$ns_vîify_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

523 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

524 
	$ns_ßmedomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

525 
	$ns_subdomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

526 
	$ns_makeˇn⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

527 
	$ns_ßmíame
 (c⁄° *, c⁄° *Ë
__THROW
;

528 
__END_DECLS


530 #ifde‡
BIND_4_COMPAT


531 
	~<¨∑/«me£r_com∑t.h
>

	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_860
 7

	)

182 
	#EM_MIPS
 8

	)

183 
	#EM_S370
 9

	)

184 
	#EM_MIPS_RS3_LE
 10

	)

186 
	#EM_PARISC
 15

	)

187 
	#EM_VPP500
 17

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_960
 19

	)

190 
	#EM_PPC
 20

	)

191 
	#EM_PPC64
 21

	)

192 
	#EM_S390
 22

	)

194 
	#EM_V800
 36

	)

195 
	#EM_FR20
 37

	)

196 
	#EM_RH32
 38

	)

197 
	#EM_RCE
 39

	)

198 
	#EM_ARM
 40

	)

199 
	#EM_FAKE_ALPHA
 41

	)

200 
	#EM_SH
 42

	)

201 
	#EM_SPARCV9
 43

	)

202 
	#EM_TRICORE
 44

	)

203 
	#EM_ARC
 45

	)

204 
	#EM_H8_300
 46

	)

205 
	#EM_H8_300H
 47

	)

206 
	#EM_H8S
 48

	)

207 
	#EM_H8_500
 49

	)

208 
	#EM_IA_64
 50

	)

209 
	#EM_MIPS_X
 51

	)

210 
	#EM_COLDFIRE
 52

	)

211 
	#EM_68HC12
 53

	)

212 
	#EM_MMA
 54

	)

213 
	#EM_PCP
 55

	)

214 
	#EM_NCPU
 56

	)

215 
	#EM_NDR1
 57

	)

216 
	#EM_STARCORE
 58

	)

217 
	#EM_ME16
 59

	)

218 
	#EM_ST100
 60

	)

219 
	#EM_TINYJ
 61

	)

220 
	#EM_X86_64
 62

	)

221 
	#EM_PDSP
 63

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_A5
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_ALTERA_NIOS2
 113

	)

253 
	#EM_AARCH64
 183

	)

254 
	#EM_TILEPRO
 188

	)

255 
	#EM_MICROBLAZE
 189

	)

256 
	#EM_TILEGX
 191

	)

257 
	#EM_NUM
 192

	)

263 
	#EM_ALPHA
 0x9026

	)

267 
	#EV_NONE
 0

	)

268 
	#EV_CURRENT
 1

	)

269 
	#EV_NUM
 2

	)

275 
Elf32_W‹d
 
	msh_«me
;

276 
Elf32_W‹d
 
	msh_ty≥
;

277 
Elf32_W‹d
 
	msh_Êags
;

278 
Elf32_Addr
 
	msh_addr
;

279 
Elf32_Off
 
	msh_off£t
;

280 
Elf32_W‹d
 
	msh_size
;

281 
Elf32_W‹d
 
	msh_lök
;

282 
Elf32_W‹d
 
	msh_öfo
;

283 
Elf32_W‹d
 
	msh_addølign
;

284 
Elf32_W‹d
 
	msh_ítsize
;

285 } 
	tElf32_Shdr
;

289 
Elf64_W‹d
 
	msh_«me
;

290 
Elf64_W‹d
 
	msh_ty≥
;

291 
Elf64_Xw‹d
 
	msh_Êags
;

292 
Elf64_Addr
 
	msh_addr
;

293 
Elf64_Off
 
	msh_off£t
;

294 
Elf64_Xw‹d
 
	msh_size
;

295 
Elf64_W‹d
 
	msh_lök
;

296 
Elf64_W‹d
 
	msh_öfo
;

297 
Elf64_Xw‹d
 
	msh_addølign
;

298 
Elf64_Xw‹d
 
	msh_ítsize
;

299 } 
	tElf64_Shdr
;

303 
	#SHN_UNDEF
 0

	)

304 
	#SHN_LORESERVE
 0xff00

	)

305 
	#SHN_LOPROC
 0xff00

	)

306 
	#SHN_BEFORE
 0xff00

	)

308 
	#SHN_AFTER
 0xff01

	)

310 
	#SHN_HIPROC
 0xff1‡

	)

311 
	#SHN_LOOS
 0xff20

	)

312 
	#SHN_HIOS
 0xff3‡

	)

313 
	#SHN_ABS
 0xfff1

	)

314 
	#SHN_COMMON
 0xfff2

	)

315 
	#SHN_XINDEX
 0xfff‡

	)

316 
	#SHN_HIRESERVE
 0xfff‡

	)

320 
	#SHT_NULL
 0

	)

321 
	#SHT_PROGBITS
 1

	)

322 
	#SHT_SYMTAB
 2

	)

323 
	#SHT_STRTAB
 3

	)

324 
	#SHT_RELA
 4

	)

325 
	#SHT_HASH
 5

	)

326 
	#SHT_DYNAMIC
 6

	)

327 
	#SHT_NOTE
 7

	)

328 
	#SHT_NOBITS
 8

	)

329 
	#SHT_REL
 9

	)

330 
	#SHT_SHLIB
 10

	)

331 
	#SHT_DYNSYM
 11

	)

332 
	#SHT_INIT_ARRAY
 14

	)

333 
	#SHT_FINI_ARRAY
 15

	)

334 
	#SHT_PREINIT_ARRAY
 16

	)

335 
	#SHT_GROUP
 17

	)

336 
	#SHT_SYMTAB_SHNDX
 18

	)

337 
	#SHT_NUM
 19

	)

338 
	#SHT_LOOS
 0x60000000

	)

339 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

340 
	#SHT_GNU_HASH
 0x6ffffff6

	)

341 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

342 
	#SHT_CHECKSUM
 0x6ffffff8

	)

343 
	#SHT_LOSUNW
 0x6fffffÁ

	)

344 
	#SHT_SUNW_move
 0x6fffffÁ

	)

345 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

346 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

347 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

348 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

349 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

350 
	#SHT_HISUNW
 0x6ffffff‡

	)

351 
	#SHT_HIOS
 0x6ffffff‡

	)

352 
	#SHT_LOPROC
 0x70000000

	)

353 
	#SHT_HIPROC
 0x7ffffff‡

	)

354 
	#SHT_LOUSER
 0x80000000

	)

355 
	#SHT_HIUSER
 0x8ffffff‡

	)

359 
	#SHF_WRITE
 (1 << 0Ë

	)

360 
	#SHF_ALLOC
 (1 << 1Ë

	)

361 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

362 
	#SHF_MERGE
 (1 << 4Ë

	)

363 
	#SHF_STRINGS
 (1 << 5Ë

	)

364 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

365 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

366 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

368 
	#SHF_GROUP
 (1 << 9Ë

	)

369 
	#SHF_TLS
 (1 << 10Ë

	)

370 
	#SHF_MASKOS
 0x0ff00000

	)

371 
	#SHF_MASKPROC
 0xf0000000

	)

372 
	#SHF_ORDERED
 (1 << 30Ë

	)

374 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

378 
	#GRP_COMDAT
 0x1

	)

384 
Elf32_W‹d
 
	m°_«me
;

385 
Elf32_Addr
 
	m°_vÆue
;

386 
Elf32_W‹d
 
	m°_size
;

387 
	m°_öfo
;

388 
	m°_Ÿhî
;

389 
Elf32_Se˘i⁄
 
	m°_shndx
;

390 } 
	tElf32_Sym
;

394 
Elf64_W‹d
 
	m°_«me
;

395 
	m°_öfo
;

396 
	m°_Ÿhî
;

397 
Elf64_Se˘i⁄
 
	m°_shndx
;

398 
Elf64_Addr
 
	m°_vÆue
;

399 
Elf64_Xw‹d
 
	m°_size
;

400 } 
	tElf64_Sym
;

407 
Elf32_HÆf
 
	msi_boundto
;

408 
Elf32_HÆf
 
	msi_Êags
;

409 } 
	tElf32_Symöfo
;

413 
Elf64_HÆf
 
	msi_boundto
;

414 
Elf64_HÆf
 
	msi_Êags
;

415 } 
	tElf64_Symöfo
;

418 
	#SYMINFO_BT_SELF
 0xfff‡

	)

419 
	#SYMINFO_BT_PARENT
 0xff„

	)

420 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

423 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

424 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

425 
	#SYMINFO_FLG_COPY
 0x0004

	)

426 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

429 
	#SYMINFO_NONE
 0

	)

430 
	#SYMINFO_CURRENT
 1

	)

431 
	#SYMINFO_NUM
 2

	)

436 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

437 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

438 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

441 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

442 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

443 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

447 
	#STB_LOCAL
 0

	)

448 
	#STB_GLOBAL
 1

	)

449 
	#STB_WEAK
 2

	)

450 
	#STB_NUM
 3

	)

451 
	#STB_LOOS
 10

	)

452 
	#STB_GNU_UNIQUE
 10

	)

453 
	#STB_HIOS
 12

	)

454 
	#STB_LOPROC
 13

	)

455 
	#STB_HIPROC
 15

	)

459 
	#STT_NOTYPE
 0

	)

460 
	#STT_OBJECT
 1

	)

461 
	#STT_FUNC
 2

	)

462 
	#STT_SECTION
 3

	)

463 
	#STT_FILE
 4

	)

464 
	#STT_COMMON
 5

	)

465 
	#STT_TLS
 6

	)

466 
	#STT_NUM
 7

	)

467 
	#STT_LOOS
 10

	)

468 
	#STT_GNU_IFUNC
 10

	)

469 
	#STT_HIOS
 12

	)

470 
	#STT_LOPROC
 13

	)

471 
	#STT_HIPROC
 15

	)

478 
	#STN_UNDEF
 0

	)

483 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

486 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

489 
	#STV_DEFAULT
 0

	)

490 
	#STV_INTERNAL
 1

	)

491 
	#STV_HIDDEN
 2

	)

492 
	#STV_PROTECTED
 3

	)

499 
Elf32_Addr
 
	mr_off£t
;

500 
Elf32_W‹d
 
	mr_öfo
;

501 } 
	tElf32_Rñ
;

510 
Elf64_Addr
 
	mr_off£t
;

511 
Elf64_Xw‹d
 
	mr_öfo
;

512 } 
	tElf64_Rñ
;

518 
Elf32_Addr
 
	mr_off£t
;

519 
Elf32_W‹d
 
	mr_öfo
;

520 
Elf32_Sw‹d
 
	mr_addíd
;

521 } 
	tElf32_Rña
;

525 
Elf64_Addr
 
	mr_off£t
;

526 
Elf64_Xw‹d
 
	mr_öfo
;

527 
Elf64_Sxw‹d
 
	mr_addíd
;

528 } 
	tElf64_Rña
;

532 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

533 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

534 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

536 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

537 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

538 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

544 
Elf32_W‹d
 
	mp_ty≥
;

545 
Elf32_Off
 
	mp_off£t
;

546 
Elf32_Addr
 
	mp_vaddr
;

547 
Elf32_Addr
 
	mp_∑ddr
;

548 
Elf32_W‹d
 
	mp_fûesz
;

549 
Elf32_W‹d
 
	mp_memsz
;

550 
Elf32_W‹d
 
	mp_Êags
;

551 
Elf32_W‹d
 
	mp_Æign
;

552 } 
	tElf32_Phdr
;

556 
Elf64_W‹d
 
	mp_ty≥
;

557 
Elf64_W‹d
 
	mp_Êags
;

558 
Elf64_Off
 
	mp_off£t
;

559 
Elf64_Addr
 
	mp_vaddr
;

560 
Elf64_Addr
 
	mp_∑ddr
;

561 
Elf64_Xw‹d
 
	mp_fûesz
;

562 
Elf64_Xw‹d
 
	mp_memsz
;

563 
Elf64_Xw‹d
 
	mp_Æign
;

564 } 
	tElf64_Phdr
;

570 
	#PN_XNUM
 0xffff

	)

574 
	#PT_NULL
 0

	)

575 
	#PT_LOAD
 1

	)

576 
	#PT_DYNAMIC
 2

	)

577 
	#PT_INTERP
 3

	)

578 
	#PT_NOTE
 4

	)

579 
	#PT_SHLIB
 5

	)

580 
	#PT_PHDR
 6

	)

581 
	#PT_TLS
 7

	)

582 
	#PT_NUM
 8

	)

583 
	#PT_LOOS
 0x60000000

	)

584 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

585 
	#PT_GNU_STACK
 0x6474e551

	)

586 
	#PT_GNU_RELRO
 0x6474e552

	)

587 
	#PT_LOSUNW
 0x6fffffÁ

	)

588 
	#PT_SUNWBSS
 0x6fffffÁ

	)

589 
	#PT_SUNWSTACK
 0x6ffffffb

	)

590 
	#PT_HISUNW
 0x6fffffff

	)

591 
	#PT_HIOS
 0x6ffffff‡

	)

592 
	#PT_LOPROC
 0x70000000

	)

593 
	#PT_HIPROC
 0x7ffffff‡

	)

597 
	#PF_X
 (1 << 0Ë

	)

598 
	#PF_W
 (1 << 1Ë

	)

599 
	#PF_R
 (1 << 2Ë

	)

600 
	#PF_MASKOS
 0x0ff00000

	)

601 
	#PF_MASKPROC
 0xf0000000

	)

605 
	#NT_PRSTATUS
 1

	)

606 
	#NT_FPREGSET
 2

	)

607 
	#NT_PRPSINFO
 3

	)

608 
	#NT_PRXREG
 4

	)

609 
	#NT_TASKSTRUCT
 4

	)

610 
	#NT_PLATFORM
 5

	)

611 
	#NT_AUXV
 6

	)

612 
	#NT_GWINDOWS
 7

	)

613 
	#NT_ASRS
 8

	)

614 
	#NT_PSTATUS
 10

	)

615 
	#NT_PSINFO
 13

	)

616 
	#NT_PRCRED
 14

	)

617 
	#NT_UTSNAME
 15

	)

618 
	#NT_LWPSTATUS
 16

	)

619 
	#NT_LWPSINFO
 17

	)

620 
	#NT_PRFPXREG
 20

	)

621 
	#NT_SIGINFO
 0x53494749

	)

623 
	#NT_FILE
 0x46494c45

	)

625 
	#NT_PRXFPREG
 0x46e62b7‡

	)

626 
	#NT_PPC_VMX
 0x100

	)

627 
	#NT_PPC_SPE
 0x101

	)

628 
	#NT_PPC_VSX
 0x102

	)

629 
	#NT_386_TLS
 0x200

	)

630 
	#NT_386_IOPERM
 0x201

	)

631 
	#NT_X86_XSTATE
 0x202

	)

632 
	#NT_S390_HIGH_GPRS
 0x300

	)

633 
	#NT_S390_TIMER
 0x301

	)

634 
	#NT_S390_TODCMP
 0x302

	)

635 
	#NT_S390_TODPREG
 0x303

	)

636 
	#NT_S390_CTRS
 0x304

	)

637 
	#NT_S390_PREFIX
 0x305

	)

638 
	#NT_S390_LAST_BREAK
 0x306

	)

639 
	#NT_S390_SYSTEM_CALL
 0x307

	)

640 
	#NT_S390_TDB
 0x308

	)

641 
	#NT_ARM_VFP
 0x400

	)

642 
	#NT_ARM_TLS
 0x401

	)

643 
	#NT_ARM_HW_BREAK
 0x402

	)

644 
	#NT_ARM_HW_WATCH
 0x403

	)

648 
	#NT_VERSION
 1

	)

655 
Elf32_Sw‹d
 
	md_èg
;

658 
Elf32_W‹d
 
	md_vÆ
;

659 
Elf32_Addr
 
	md_±r
;

660 } 
	md_un
;

661 } 
	tElf32_Dyn
;

665 
Elf64_Sxw‹d
 
	md_èg
;

668 
Elf64_Xw‹d
 
	md_vÆ
;

669 
Elf64_Addr
 
	md_±r
;

670 } 
	md_un
;

671 } 
	tElf64_Dyn
;

675 
	#DT_NULL
 0

	)

676 
	#DT_NEEDED
 1

	)

677 
	#DT_PLTRELSZ
 2

	)

678 
	#DT_PLTGOT
 3

	)

679 
	#DT_HASH
 4

	)

680 
	#DT_STRTAB
 5

	)

681 
	#DT_SYMTAB
 6

	)

682 
	#DT_RELA
 7

	)

683 
	#DT_RELASZ
 8

	)

684 
	#DT_RELAENT
 9

	)

685 
	#DT_STRSZ
 10

	)

686 
	#DT_SYMENT
 11

	)

687 
	#DT_INIT
 12

	)

688 
	#DT_FINI
 13

	)

689 
	#DT_SONAME
 14

	)

690 
	#DT_RPATH
 15

	)

691 
	#DT_SYMBOLIC
 16

	)

692 
	#DT_REL
 17

	)

693 
	#DT_RELSZ
 18

	)

694 
	#DT_RELENT
 19

	)

695 
	#DT_PLTREL
 20

	)

696 
	#DT_DEBUG
 21

	)

697 
	#DT_TEXTREL
 22

	)

698 
	#DT_JMPREL
 23

	)

699 
	#DT_BIND_NOW
 24

	)

700 
	#DT_INIT_ARRAY
 25

	)

701 
	#DT_FINI_ARRAY
 26

	)

702 
	#DT_INIT_ARRAYSZ
 27

	)

703 
	#DT_FINI_ARRAYSZ
 28

	)

704 
	#DT_RUNPATH
 29

	)

705 
	#DT_FLAGS
 30

	)

706 
	#DT_ENCODING
 32

	)

707 
	#DT_PREINIT_ARRAY
 32

	)

708 
	#DT_PREINIT_ARRAYSZ
 33

	)

709 
	#DT_NUM
 34

	)

710 
	#DT_LOOS
 0x6000000d

	)

711 
	#DT_HIOS
 0x6ffff000

	)

712 
	#DT_LOPROC
 0x70000000

	)

713 
	#DT_HIPROC
 0x7ffffff‡

	)

714 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

719 
	#DT_VALRNGLO
 0x6ffffd00

	)

720 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

721 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

722 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

723 
	#DT_CHECKSUM
 0x6ffffdf8

	)

724 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

725 
	#DT_MOVEENT
 0x6ffffdÁ

	)

726 
	#DT_MOVESZ
 0x6ffffdfb

	)

727 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

728 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

730 
	#DT_SYMINSZ
 0x6ffffd„

	)

731 
	#DT_SYMINENT
 0x6ffffdf‡

	)

732 
	#DT_VALRNGHI
 0x6ffffdff

	)

733 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

734 
	#DT_VALNUM
 12

	)

741 
	#DT_ADDRRNGLO
 0x6fff„00

	)

742 
	#DT_GNU_HASH
 0x6fff„f5

	)

743 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

744 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

745 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

746 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

747 
	#DT_CONFIG
 0x6fff„Á

	)

748 
	#DT_DEPAUDIT
 0x6fff„fb

	)

749 
	#DT_AUDIT
 0x6fff„f¯

	)

750 
	#DT_PLTPAD
 0x6fff„fd

	)

751 
	#DT_MOVETAB
 0x6fff„„

	)

752 
	#DT_SYMINFO
 0x6fff„f‡

	)

753 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

754 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

755 
	#DT_ADDRNUM
 11

	)

759 
	#DT_VERSYM
 0x6ffffff0

	)

761 
	#DT_RELACOUNT
 0x6ffffff9

	)

762 
	#DT_RELCOUNT
 0x6fffffÁ

	)

765 
	#DT_FLAGS_1
 0x6ffffffb

	)

766 
	#DT_VERDEF
 0x6ffffff¯

	)

768 
	#DT_VERDEFNUM
 0x6ffffffd

	)

769 
	#DT_VERNEED
 0x6fffff„

	)

771 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

772 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

773 
	#DT_VERSIONTAGNUM
 16

	)

777 
	#DT_AUXILIARY
 0x7ffffffd

	)

778 
	#DT_FILTER
 0x7ffffff‡

	)

779 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

780 
	#DT_EXTRANUM
 3

	)

783 
	#DF_ORIGIN
 0x00000001

	)

784 
	#DF_SYMBOLIC
 0x00000002

	)

785 
	#DF_TEXTREL
 0x00000004

	)

786 
	#DF_BIND_NOW
 0x00000008

	)

787 
	#DF_STATIC_TLS
 0x00000010

	)

791 
	#DF_1_NOW
 0x00000001

	)

792 
	#DF_1_GLOBAL
 0x00000002

	)

793 
	#DF_1_GROUP
 0x00000004

	)

794 
	#DF_1_NODELETE
 0x00000008

	)

795 
	#DF_1_LOADFLTR
 0x00000010

	)

796 
	#DF_1_INITFIRST
 0x00000020

	)

797 
	#DF_1_NOOPEN
 0x00000040

	)

798 
	#DF_1_ORIGIN
 0x00000080

	)

799 
	#DF_1_DIRECT
 0x00000100

	)

800 
	#DF_1_TRANS
 0x00000200

	)

801 
	#DF_1_INTERPOSE
 0x00000400

	)

802 
	#DF_1_NODEFLIB
 0x00000800

	)

803 
	#DF_1_NODUMP
 0x00001000

	)

804 
	#DF_1_CONFALT
 0x00002000

	)

805 
	#DF_1_ENDFILTEE
 0x00004000

	)

806 
	#DF_1_DISPRELDNE
 0x00008000

	)

807 
	#DF_1_DISPRELPND
 0x00010000

	)

808 
	#DF_1_NODIRECT
 0x00020000

	)

809 
	#DF_1_IGNMULDEF
 0x00040000

	)

810 
	#DF_1_NOKSYMS
 0x00080000

	)

811 
	#DF_1_NOHDR
 0x00100000

	)

812 
	#DF_1_EDITED
 0x00200000

	)

813 
	#DF_1_NORELOC
 0x00400000

	)

814 
	#DF_1_SYMINTPOSE
 0x00800000

	)

815 
	#DF_1_GLOBAUDIT
 0x01000000

	)

816 
	#DF_1_SINGLETON
 0x02000000

	)

819 
	#DTF_1_PARINIT
 0x00000001

	)

820 
	#DTF_1_CONFEXP
 0x00000002

	)

823 
	#DF_P1_LAZYLOAD
 0x00000001

	)

824 
	#DF_P1_GROUPPERM
 0x00000002

	)

831 
Elf32_HÆf
 
	mvd_vîsi⁄
;

832 
Elf32_HÆf
 
	mvd_Êags
;

833 
Elf32_HÆf
 
	mvd_ndx
;

834 
Elf32_HÆf
 
	mvd_˙t
;

835 
Elf32_W‹d
 
	mvd_hash
;

836 
Elf32_W‹d
 
	mvd_aux
;

837 
Elf32_W‹d
 
	mvd_√xt
;

839 } 
	tElf32_Vîdef
;

843 
Elf64_HÆf
 
	mvd_vîsi⁄
;

844 
Elf64_HÆf
 
	mvd_Êags
;

845 
Elf64_HÆf
 
	mvd_ndx
;

846 
Elf64_HÆf
 
	mvd_˙t
;

847 
Elf64_W‹d
 
	mvd_hash
;

848 
Elf64_W‹d
 
	mvd_aux
;

849 
Elf64_W‹d
 
	mvd_√xt
;

851 } 
	tElf64_Vîdef
;

855 
	#VER_DEF_NONE
 0

	)

856 
	#VER_DEF_CURRENT
 1

	)

857 
	#VER_DEF_NUM
 2

	)

860 
	#VER_FLG_BASE
 0x1

	)

861 
	#VER_FLG_WEAK
 0x2

	)

864 
	#VER_NDX_LOCAL
 0

	)

865 
	#VER_NDX_GLOBAL
 1

	)

866 
	#VER_NDX_LORESERVE
 0xff00

	)

867 
	#VER_NDX_ELIMINATE
 0xff01

	)

873 
Elf32_W‹d
 
	mvda_«me
;

874 
Elf32_W‹d
 
	mvda_√xt
;

876 } 
	tElf32_Vîdaux
;

880 
Elf64_W‹d
 
	mvda_«me
;

881 
Elf64_W‹d
 
	mvda_√xt
;

883 } 
	tElf64_Vîdaux
;

890 
Elf32_HÆf
 
	mvn_vîsi⁄
;

891 
Elf32_HÆf
 
	mvn_˙t
;

892 
Elf32_W‹d
 
	mvn_fûe
;

894 
Elf32_W‹d
 
	mvn_aux
;

895 
Elf32_W‹d
 
	mvn_√xt
;

897 } 
	tElf32_Vî√ed
;

901 
Elf64_HÆf
 
	mvn_vîsi⁄
;

902 
Elf64_HÆf
 
	mvn_˙t
;

903 
Elf64_W‹d
 
	mvn_fûe
;

905 
Elf64_W‹d
 
	mvn_aux
;

906 
Elf64_W‹d
 
	mvn_√xt
;

908 } 
	tElf64_Vî√ed
;

912 
	#VER_NEED_NONE
 0

	)

913 
	#VER_NEED_CURRENT
 1

	)

914 
	#VER_NEED_NUM
 2

	)

920 
Elf32_W‹d
 
	mv«_hash
;

921 
Elf32_HÆf
 
	mv«_Êags
;

922 
Elf32_HÆf
 
	mv«_Ÿhî
;

923 
Elf32_W‹d
 
	mv«_«me
;

924 
Elf32_W‹d
 
	mv«_√xt
;

926 } 
	tElf32_Vî«ux
;

930 
Elf64_W‹d
 
	mv«_hash
;

931 
Elf64_HÆf
 
	mv«_Êags
;

932 
Elf64_HÆf
 
	mv«_Ÿhî
;

933 
Elf64_W‹d
 
	mv«_«me
;

934 
Elf64_W‹d
 
	mv«_√xt
;

936 } 
	tElf64_Vî«ux
;

940 
	#VER_FLG_WEAK
 0x2

	)

954 
uöt32_t
 
	ma_ty≥
;

957 
uöt32_t
 
	ma_vÆ
;

961 } 
	ma_un
;

962 } 
	tElf32_auxv_t
;

966 
uöt64_t
 
	ma_ty≥
;

969 
uöt64_t
 
	ma_vÆ
;

973 } 
	ma_un
;

974 } 
	tElf64_auxv_t
;

976 
	~<bôs/auxv.h
>

982 
Elf32_W‹d
 
	mn_«mesz
;

983 
Elf32_W‹d
 
	mn_descsz
;

984 
Elf32_W‹d
 
	mn_ty≥
;

985 } 
	tElf32_Nhdr
;

989 
Elf64_W‹d
 
	mn_«mesz
;

990 
Elf64_W‹d
 
	mn_descsz
;

991 
Elf64_W‹d
 
	mn_ty≥
;

992 } 
	tElf64_Nhdr
;

997 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1000 
	#ELF_NOTE_GNU
 "GNU"

	)

1006 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1017 
	#NT_GNU_ABI_TAG
 1

	)

1018 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1022 
	#ELF_NOTE_OS_LINUX
 0

	)

1023 
	#ELF_NOTE_OS_GNU
 1

	)

1024 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1025 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1033 
	#NT_GNU_HWCAP
 2

	)

1037 
	#NT_GNU_BUILD_ID
 3

	)

1040 
	#NT_GNU_GOLD_VERSION
 4

	)

1046 
Elf32_Xw‹d
 
	mm_vÆue
;

1047 
Elf32_W‹d
 
	mm_öfo
;

1048 
Elf32_W‹d
 
	mm_poff£t
;

1049 
Elf32_HÆf
 
	mm_ª≥©
;

1050 
Elf32_HÆf
 
	mm_°ride
;

1051 } 
	tElf32_Move
;

1055 
Elf64_Xw‹d
 
	mm_vÆue
;

1056 
Elf64_Xw‹d
 
	mm_öfo
;

1057 
Elf64_Xw‹d
 
	mm_poff£t
;

1058 
Elf64_HÆf
 
	mm_ª≥©
;

1059 
Elf64_HÆf
 
	mm_°ride
;

1060 } 
	tElf64_Move
;

1063 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1064 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1065 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1067 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1068 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1069 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1075 
	#EF_CPU32
 0x00810000

	)

1079 
	#R_68K_NONE
 0

	)

1080 
	#R_68K_32
 1

	)

1081 
	#R_68K_16
 2

	)

1082 
	#R_68K_8
 3

	)

1083 
	#R_68K_PC32
 4

	)

1084 
	#R_68K_PC16
 5

	)

1085 
	#R_68K_PC8
 6

	)

1086 
	#R_68K_GOT32
 7

	)

1087 
	#R_68K_GOT16
 8

	)

1088 
	#R_68K_GOT8
 9

	)

1089 
	#R_68K_GOT32O
 10

	)

1090 
	#R_68K_GOT16O
 11

	)

1091 
	#R_68K_GOT8O
 12

	)

1092 
	#R_68K_PLT32
 13

	)

1093 
	#R_68K_PLT16
 14

	)

1094 
	#R_68K_PLT8
 15

	)

1095 
	#R_68K_PLT32O
 16

	)

1096 
	#R_68K_PLT16O
 17

	)

1097 
	#R_68K_PLT8O
 18

	)

1098 
	#R_68K_COPY
 19

	)

1099 
	#R_68K_GLOB_DAT
 20

	)

1100 
	#R_68K_JMP_SLOT
 21

	)

1101 
	#R_68K_RELATIVE
 22

	)

1102 
	#R_68K_TLS_GD32
 25

	)

1103 
	#R_68K_TLS_GD16
 26

	)

1104 
	#R_68K_TLS_GD8
 27

	)

1105 
	#R_68K_TLS_LDM32
 28

	)

1106 
	#R_68K_TLS_LDM16
 29

	)

1107 
	#R_68K_TLS_LDM8
 30

	)

1108 
	#R_68K_TLS_LDO32
 31

	)

1109 
	#R_68K_TLS_LDO16
 32

	)

1110 
	#R_68K_TLS_LDO8
 33

	)

1111 
	#R_68K_TLS_IE32
 34

	)

1112 
	#R_68K_TLS_IE16
 35

	)

1113 
	#R_68K_TLS_IE8
 36

	)

1114 
	#R_68K_TLS_LE32
 37

	)

1116 
	#R_68K_TLS_LE16
 38

	)

1118 
	#R_68K_TLS_LE8
 39

	)

1120 
	#R_68K_TLS_DTPMOD32
 40

	)

1121 
	#R_68K_TLS_DTPREL32
 41

	)

1122 
	#R_68K_TLS_TPREL32
 42

	)

1124 
	#R_68K_NUM
 43

	)

1130 
	#R_386_NONE
 0

	)

1131 
	#R_386_32
 1

	)

1132 
	#R_386_PC32
 2

	)

1133 
	#R_386_GOT32
 3

	)

1134 
	#R_386_PLT32
 4

	)

1135 
	#R_386_COPY
 5

	)

1136 
	#R_386_GLOB_DAT
 6

	)

1137 
	#R_386_JMP_SLOT
 7

	)

1138 
	#R_386_RELATIVE
 8

	)

1139 
	#R_386_GOTOFF
 9

	)

1140 
	#R_386_GOTPC
 10

	)

1141 
	#R_386_32PLT
 11

	)

1142 
	#R_386_TLS_TPOFF
 14

	)

1143 
	#R_386_TLS_IE
 15

	)

1145 
	#R_386_TLS_GOTIE
 16

	)

1147 
	#R_386_TLS_LE
 17

	)

1149 
	#R_386_TLS_GD
 18

	)

1151 
	#R_386_TLS_LDM
 19

	)

1154 
	#R_386_16
 20

	)

1155 
	#R_386_PC16
 21

	)

1156 
	#R_386_8
 22

	)

1157 
	#R_386_PC8
 23

	)

1158 
	#R_386_TLS_GD_32
 24

	)

1160 
	#R_386_TLS_GD_PUSH
 25

	)

1161 
	#R_386_TLS_GD_CALL
 26

	)

1163 
	#R_386_TLS_GD_POP
 27

	)

1164 
	#R_386_TLS_LDM_32
 28

	)

1166 
	#R_386_TLS_LDM_PUSH
 29

	)

1167 
	#R_386_TLS_LDM_CALL
 30

	)

1169 
	#R_386_TLS_LDM_POP
 31

	)

1170 
	#R_386_TLS_LDO_32
 32

	)

1171 
	#R_386_TLS_IE_32
 33

	)

1173 
	#R_386_TLS_LE_32
 34

	)

1175 
	#R_386_TLS_DTPMOD32
 35

	)

1176 
	#R_386_TLS_DTPOFF32
 36

	)

1177 
	#R_386_TLS_TPOFF32
 37

	)

1178 
	#R_386_SIZE32
 38

	)

1179 
	#R_386_TLS_GOTDESC
 39

	)

1180 
	#R_386_TLS_DESC_CALL
 40

	)

1183 
	#R_386_TLS_DESC
 41

	)

1187 
	#R_386_IRELATIVE
 42

	)

1189 
	#R_386_NUM
 43

	)

1195 
	#STT_SPARC_REGISTER
 13

	)

1199 
	#EF_SPARCV9_MM
 3

	)

1200 
	#EF_SPARCV9_TSO
 0

	)

1201 
	#EF_SPARCV9_PSO
 1

	)

1202 
	#EF_SPARCV9_RMO
 2

	)

1203 
	#EF_SPARC_LEDATA
 0x800000

	)

1204 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1205 
	#EF_SPARC_32PLUS
 0x000100

	)

1206 
	#EF_SPARC_SUN_US1
 0x000200

	)

1207 
	#EF_SPARC_HAL_R1
 0x000400

	)

1208 
	#EF_SPARC_SUN_US3
 0x000800

	)

1212 
	#R_SPARC_NONE
 0

	)

1213 
	#R_SPARC_8
 1

	)

1214 
	#R_SPARC_16
 2

	)

1215 
	#R_SPARC_32
 3

	)

1216 
	#R_SPARC_DISP8
 4

	)

1217 
	#R_SPARC_DISP16
 5

	)

1218 
	#R_SPARC_DISP32
 6

	)

1219 
	#R_SPARC_WDISP30
 7

	)

1220 
	#R_SPARC_WDISP22
 8

	)

1221 
	#R_SPARC_HI22
 9

	)

1222 
	#R_SPARC_22
 10

	)

1223 
	#R_SPARC_13
 11

	)

1224 
	#R_SPARC_LO10
 12

	)

1225 
	#R_SPARC_GOT10
 13

	)

1226 
	#R_SPARC_GOT13
 14

	)

1227 
	#R_SPARC_GOT22
 15

	)

1228 
	#R_SPARC_PC10
 16

	)

1229 
	#R_SPARC_PC22
 17

	)

1230 
	#R_SPARC_WPLT30
 18

	)

1231 
	#R_SPARC_COPY
 19

	)

1232 
	#R_SPARC_GLOB_DAT
 20

	)

1233 
	#R_SPARC_JMP_SLOT
 21

	)

1234 
	#R_SPARC_RELATIVE
 22

	)

1235 
	#R_SPARC_UA32
 23

	)

1239 
	#R_SPARC_PLT32
 24

	)

1240 
	#R_SPARC_HIPLT22
 25

	)

1241 
	#R_SPARC_LOPLT10
 26

	)

1242 
	#R_SPARC_PCPLT32
 27

	)

1243 
	#R_SPARC_PCPLT22
 28

	)

1244 
	#R_SPARC_PCPLT10
 29

	)

1245 
	#R_SPARC_10
 30

	)

1246 
	#R_SPARC_11
 31

	)

1247 
	#R_SPARC_64
 32

	)

1248 
	#R_SPARC_OLO10
 33

	)

1249 
	#R_SPARC_HH22
 34

	)

1250 
	#R_SPARC_HM10
 35

	)

1251 
	#R_SPARC_LM22
 36

	)

1252 
	#R_SPARC_PC_HH22
 37

	)

1253 
	#R_SPARC_PC_HM10
 38

	)

1254 
	#R_SPARC_PC_LM22
 39

	)

1255 
	#R_SPARC_WDISP16
 40

	)

1256 
	#R_SPARC_WDISP19
 41

	)

1257 
	#R_SPARC_GLOB_JMP
 42

	)

1258 
	#R_SPARC_7
 43

	)

1259 
	#R_SPARC_5
 44

	)

1260 
	#R_SPARC_6
 45

	)

1261 
	#R_SPARC_DISP64
 46

	)

1262 
	#R_SPARC_PLT64
 47

	)

1263 
	#R_SPARC_HIX22
 48

	)

1264 
	#R_SPARC_LOX10
 49

	)

1265 
	#R_SPARC_H44
 50

	)

1266 
	#R_SPARC_M44
 51

	)

1267 
	#R_SPARC_L44
 52

	)

1268 
	#R_SPARC_REGISTER
 53

	)

1269 
	#R_SPARC_UA64
 54

	)

1270 
	#R_SPARC_UA16
 55

	)

1271 
	#R_SPARC_TLS_GD_HI22
 56

	)

1272 
	#R_SPARC_TLS_GD_LO10
 57

	)

1273 
	#R_SPARC_TLS_GD_ADD
 58

	)

1274 
	#R_SPARC_TLS_GD_CALL
 59

	)

1275 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1276 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1277 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1278 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1279 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1280 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1281 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1282 
	#R_SPARC_TLS_IE_HI22
 67

	)

1283 
	#R_SPARC_TLS_IE_LO10
 68

	)

1284 
	#R_SPARC_TLS_IE_LD
 69

	)

1285 
	#R_SPARC_TLS_IE_LDX
 70

	)

1286 
	#R_SPARC_TLS_IE_ADD
 71

	)

1287 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1288 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1289 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1290 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1291 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1292 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1293 
	#R_SPARC_TLS_TPOFF32
 78

	)

1294 
	#R_SPARC_TLS_TPOFF64
 79

	)

1295 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1296 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1297 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1298 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1299 
	#R_SPARC_GOTDATA_OP
 84

	)

1300 
	#R_SPARC_H34
 85

	)

1301 
	#R_SPARC_SIZE32
 86

	)

1302 
	#R_SPARC_SIZE64
 87

	)

1303 
	#R_SPARC_WDISP10
 88

	)

1304 
	#R_SPARC_JMP_IREL
 248

	)

1305 
	#R_SPARC_IRELATIVE
 249

	)

1306 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1307 
	#R_SPARC_GNU_VTENTRY
 251

	)

1308 
	#R_SPARC_REV32
 252

	)

1310 
	#R_SPARC_NUM
 253

	)

1314 
	#DT_SPARC_REGISTER
 0x70000001

	)

1315 
	#DT_SPARC_NUM
 2

	)

1321 
	#EF_MIPS_NOREORDER
 1

	)

1322 
	#EF_MIPS_PIC
 2

	)

1323 
	#EF_MIPS_CPIC
 4

	)

1324 
	#EF_MIPS_XGOT
 8

	)

1325 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1326 
	#EF_MIPS_ABI2
 32

	)

1327 
	#EF_MIPS_ABI_ON32
 64

	)

1328 
	#EF_MIPS_FP64
 512

	)

1329 
	#EF_MIPS_NAN2008
 1024

	)

1330 
	#EF_MIPS_ARCH
 0xf0000000

	)

1334 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1335 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1336 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1337 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1338 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1339 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1340 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1341 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1342 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1346 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1347 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1348 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1349 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1350 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1351 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1352 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1356 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1357 
	#SHN_MIPS_TEXT
 0xff01

	)

1358 
	#SHN_MIPS_DATA
 0xff02

	)

1359 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1360 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1364 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1365 
	#SHT_MIPS_MSYM
 0x70000001

	)

1366 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1367 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1368 
	#SHT_MIPS_UCODE
 0x70000004

	)

1369 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1370 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1371 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1372 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1373 
	#SHT_MIPS_RELD
 0x70000009

	)

1374 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1375 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1376 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1377 
	#SHT_MIPS_SHDR
 0x70000010

	)

1378 
	#SHT_MIPS_FDESC
 0x70000011

	)

1379 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1380 
	#SHT_MIPS_DENSE
 0x70000013

	)

1381 
	#SHT_MIPS_PDESC
 0x70000014

	)

1382 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1383 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1384 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1385 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1386 
	#SHT_MIPS_LINE
 0x70000019

	)

1387 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1388 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1389 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1390 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1391 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1392 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1393 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1394 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1395 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1396 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1397 
	#SHT_MIPS_XLATE
 0x70000024

	)

1398 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1399 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1400 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1401 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1402 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1406 
	#SHF_MIPS_GPREL
 0x10000000

	)

1407 
	#SHF_MIPS_MERGE
 0x20000000

	)

1408 
	#SHF_MIPS_ADDR
 0x40000000

	)

1409 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1410 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1411 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1412 
	#SHF_MIPS_NAMES
 0x02000000

	)

1413 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1419 
	#STO_MIPS_DEFAULT
 0x0

	)

1420 
	#STO_MIPS_INTERNAL
 0x1

	)

1421 
	#STO_MIPS_HIDDEN
 0x2

	)

1422 
	#STO_MIPS_PROTECTED
 0x3

	)

1423 
	#STO_MIPS_PLT
 0x8

	)

1424 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1427 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1435 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1436 
Elf32_W‹d
 
	mgt_unu£d
;

1437 } 
	mgt_hódî
;

1440 
Elf32_W‹d
 
	mgt_g_vÆue
;

1441 
Elf32_W‹d
 
	mgt_byãs
;

1442 } 
	mgt_íåy
;

1443 } 
	tElf32_g±ab
;

1449 
Elf32_W‹d
 
	mri_g¥mask
;

1450 
Elf32_W‹d
 
	mri_˝rmask
[4];

1451 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1452 } 
	tElf32_RegInfo
;

1458 
	mköd
;

1460 
	msize
;

1461 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1463 
Elf32_W‹d
 
	möfo
;

1464 } 
	tElf_O±i⁄s
;

1468 
	#ODK_NULL
 0

	)

1469 
	#ODK_REGINFO
 1

	)

1470 
	#ODK_EXCEPTIONS
 2

	)

1471 
	#ODK_PAD
 3

	)

1472 
	#ODK_HWPATCH
 4

	)

1473 
	#ODK_FILL
 5

	)

1474 
	#ODK_TAGS
 6

	)

1475 
	#ODK_HWAND
 7

	)

1476 
	#ODK_HWOR
 8

	)

1480 
	#OEX_FPU_MIN
 0x1‡

	)

1481 
	#OEX_FPU_MAX
 0x1f00

	)

1482 
	#OEX_PAGE0
 0x10000

	)

1483 
	#OEX_SMM
 0x20000

	)

1484 
	#OEX_FPDBUG
 0x40000

	)

1485 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1486 
	#OEX_DISMISS
 0x80000

	)

1488 
	#OEX_FPU_INVAL
 0x10

	)

1489 
	#OEX_FPU_DIV0
 0x08

	)

1490 
	#OEX_FPU_OFLO
 0x04

	)

1491 
	#OEX_FPU_UFLO
 0x02

	)

1492 
	#OEX_FPU_INEX
 0x01

	)

1496 
	#OHW_R4KEOP
 0x1

	)

1497 
	#OHW_R8KPFETCH
 0x2

	)

1498 
	#OHW_R5KEOP
 0x4

	)

1499 
	#OHW_R5KCVTL
 0x8

	)

1501 
	#OPAD_PREFIX
 0x1

	)

1502 
	#OPAD_POSTFIX
 0x2

	)

1503 
	#OPAD_SYMBOL
 0x4

	)

1509 
Elf32_W‹d
 
	mhwp_Êags1
;

1510 
Elf32_W‹d
 
	mhwp_Êags2
;

1511 } 
	tElf_O±i⁄s_Hw
;

1515 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1516 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1520 
	#R_MIPS_NONE
 0

	)

1521 
	#R_MIPS_16
 1

	)

1522 
	#R_MIPS_32
 2

	)

1523 
	#R_MIPS_REL32
 3

	)

1524 
	#R_MIPS_26
 4

	)

1525 
	#R_MIPS_HI16
 5

	)

1526 
	#R_MIPS_LO16
 6

	)

1527 
	#R_MIPS_GPREL16
 7

	)

1528 
	#R_MIPS_LITERAL
 8

	)

1529 
	#R_MIPS_GOT16
 9

	)

1530 
	#R_MIPS_PC16
 10

	)

1531 
	#R_MIPS_CALL16
 11

	)

1532 
	#R_MIPS_GPREL32
 12

	)

1534 
	#R_MIPS_SHIFT5
 16

	)

1535 
	#R_MIPS_SHIFT6
 17

	)

1536 
	#R_MIPS_64
 18

	)

1537 
	#R_MIPS_GOT_DISP
 19

	)

1538 
	#R_MIPS_GOT_PAGE
 20

	)

1539 
	#R_MIPS_GOT_OFST
 21

	)

1540 
	#R_MIPS_GOT_HI16
 22

	)

1541 
	#R_MIPS_GOT_LO16
 23

	)

1542 
	#R_MIPS_SUB
 24

	)

1543 
	#R_MIPS_INSERT_A
 25

	)

1544 
	#R_MIPS_INSERT_B
 26

	)

1545 
	#R_MIPS_DELETE
 27

	)

1546 
	#R_MIPS_HIGHER
 28

	)

1547 
	#R_MIPS_HIGHEST
 29

	)

1548 
	#R_MIPS_CALL_HI16
 30

	)

1549 
	#R_MIPS_CALL_LO16
 31

	)

1550 
	#R_MIPS_SCN_DISP
 32

	)

1551 
	#R_MIPS_REL16
 33

	)

1552 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1553 
	#R_MIPS_PJUMP
 35

	)

1554 
	#R_MIPS_RELGOT
 36

	)

1555 
	#R_MIPS_JALR
 37

	)

1556 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1557 
	#R_MIPS_TLS_DTPREL32
 39

	)

1558 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1559 
	#R_MIPS_TLS_DTPREL64
 41

	)

1560 
	#R_MIPS_TLS_GD
 42

	)

1561 
	#R_MIPS_TLS_LDM
 43

	)

1562 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1563 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1564 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1565 
	#R_MIPS_TLS_TPREL32
 47

	)

1566 
	#R_MIPS_TLS_TPREL64
 48

	)

1567 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1568 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1569 
	#R_MIPS_GLOB_DAT
 51

	)

1570 
	#R_MIPS_COPY
 126

	)

1571 
	#R_MIPS_JUMP_SLOT
 127

	)

1573 
	#R_MIPS_NUM
 128

	)

1577 
	#PT_MIPS_REGINFO
 0x70000000

	)

1578 
	#PT_MIPS_RTPROC
 0x70000001

	)

1579 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1580 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1584 
	#PF_MIPS_LOCAL
 0x10000000

	)

1588 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1589 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1590 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1591 
	#DT_MIPS_IVERSION
 0x70000004

	)

1592 
	#DT_MIPS_FLAGS
 0x70000005

	)

1593 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1594 
	#DT_MIPS_MSYM
 0x70000007

	)

1595 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1596 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1597 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1598 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1599 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1600 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1601 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1602 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1603 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1604 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1605 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1606 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1608 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1609 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1611 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1612 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1614 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1616 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1618 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1620 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1622 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1623 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1624 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1625 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1626 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1627 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1628 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1629 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1630 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1631 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1632 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1633 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1635 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1637 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1638 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1639 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1641 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1645 
	#DT_MIPS_RWPLT
 0x70000034

	)

1646 
	#DT_MIPS_NUM
 0x35

	)

1650 
	#RHF_NONE
 0

	)

1651 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1652 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1653 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1654 
	#RHF_NO_MOVE
 (1 << 3)

	)

1655 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1656 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1657 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1658 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1659 
	#RHF_PIXIE
 (1 << 8)

	)

1660 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1661 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1662 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1663 
	#RHF_CORD
 (1 << 12)

	)

1664 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1665 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1671 
Elf32_W‹d
 
	ml_«me
;

1672 
Elf32_W‹d
 
	ml_time_°amp
;

1673 
Elf32_W‹d
 
	ml_checksum
;

1674 
Elf32_W‹d
 
	ml_vîsi⁄
;

1675 
Elf32_W‹d
 
	ml_Êags
;

1676 } 
	tElf32_Lib
;

1680 
Elf64_W‹d
 
	ml_«me
;

1681 
Elf64_W‹d
 
	ml_time_°amp
;

1682 
Elf64_W‹d
 
	ml_checksum
;

1683 
Elf64_W‹d
 
	ml_vîsi⁄
;

1684 
Elf64_W‹d
 
	ml_Êags
;

1685 } 
	tElf64_Lib
;

1690 
	#LL_NONE
 0

	)

1691 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1692 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1693 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1694 
	#LL_EXPORTS
 (1 << 3)

	)

1695 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1696 
	#LL_DELTA
 (1 << 5)

	)

1700 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1705 
Elf32_HÆf
 
	mvîsi⁄
;

1707 
	miß_Àvñ
;

1709 
	miß_ªv
;

1711 
	mg¥_size
;

1713 
	m˝r1_size
;

1715 
	m˝r2_size
;

1717 
	mÂ_abi
;

1719 
Elf32_W‹d
 
	miß_ext
;

1721 
Elf32_W‹d
 
	ma£s
;

1723 
Elf32_W‹d
 
	mÊags1
;

1724 
Elf32_W‹d
 
	mÊags2
;

1725 } 
	tElf_MIPS_ABIFœgs_v0
;

1729 
	#MIPS_AFL_REG_NONE
 0x00

	)

1730 
	#MIPS_AFL_REG_32
 0x01

	)

1731 
	#MIPS_AFL_REG_64
 0x02

	)

1732 
	#MIPS_AFL_REG_128
 0x03

	)

1736 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1737 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1738 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1739 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1740 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1741 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1742 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1743 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1744 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1745 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1746 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1747 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1748 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1749 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

1753 
	#MIPS_AFL_EXT_XLR
 1

	)

1754 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

1755 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

1756 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

1757 
	#MIPS_AFL_EXT_OCTEON
 5

	)

1758 
	#MIPS_AFL_EXT_5900
 6

	)

1759 
	#MIPS_AFL_EXT_4650
 7

	)

1760 
	#MIPS_AFL_EXT_4010
 8

	)

1761 
	#MIPS_AFL_EXT_4100
 9

	)

1762 
	#MIPS_AFL_EXT_3900
 10

	)

1763 
	#MIPS_AFL_EXT_10000
 11

	)

1764 
	#MIPS_AFL_EXT_SB1
 12

	)

1765 
	#MIPS_AFL_EXT_4111
 13

	)

1766 
	#MIPS_AFL_EXT_4120
 14

	)

1767 
	#MIPS_AFL_EXT_5400
 15

	)

1768 
	#MIPS_AFL_EXT_5500
 16

	)

1769 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

1770 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

1773 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

1779 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

1781 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

1783 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

1785 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

1787 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

1789 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

1791 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

1793 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

1795 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

1802 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1803 
	#EF_PARISC_EXT
 0x00020000

	)

1804 
	#EF_PARISC_LSB
 0x00040000

	)

1805 
	#EF_PARISC_WIDE
 0x00080000

	)

1806 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1808 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1809 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1813 
	#EFA_PARISC_1_0
 0x020b

	)

1814 
	#EFA_PARISC_1_1
 0x0210

	)

1815 
	#EFA_PARISC_2_0
 0x0214

	)

1819 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1821 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1825 
	#SHT_PARISC_EXT
 0x70000000

	)

1826 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1827 
	#SHT_PARISC_DOC
 0x70000002

	)

1831 
	#SHF_PARISC_SHORT
 0x20000000

	)

1832 
	#SHF_PARISC_HUGE
 0x40000000

	)

1833 
	#SHF_PARISC_SBP
 0x80000000

	)

1837 
	#STT_PARISC_MILLICODE
 13

	)

1839 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1840 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1844 
	#R_PARISC_NONE
 0

	)

1845 
	#R_PARISC_DIR32
 1

	)

1846 
	#R_PARISC_DIR21L
 2

	)

1847 
	#R_PARISC_DIR17R
 3

	)

1848 
	#R_PARISC_DIR17F
 4

	)

1849 
	#R_PARISC_DIR14R
 6

	)

1850 
	#R_PARISC_PCREL32
 9

	)

1851 
	#R_PARISC_PCREL21L
 10

	)

1852 
	#R_PARISC_PCREL17R
 11

	)

1853 
	#R_PARISC_PCREL17F
 12

	)

1854 
	#R_PARISC_PCREL14R
 14

	)

1855 
	#R_PARISC_DPREL21L
 18

	)

1856 
	#R_PARISC_DPREL14R
 22

	)

1857 
	#R_PARISC_GPREL21L
 26

	)

1858 
	#R_PARISC_GPREL14R
 30

	)

1859 
	#R_PARISC_LTOFF21L
 34

	)

1860 
	#R_PARISC_LTOFF14R
 38

	)

1861 
	#R_PARISC_SECREL32
 41

	)

1862 
	#R_PARISC_SEGBASE
 48

	)

1863 
	#R_PARISC_SEGREL32
 49

	)

1864 
	#R_PARISC_PLTOFF21L
 50

	)

1865 
	#R_PARISC_PLTOFF14R
 54

	)

1866 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1867 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1868 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1869 
	#R_PARISC_FPTR64
 64

	)

1870 
	#R_PARISC_PLABEL32
 65

	)

1871 
	#R_PARISC_PLABEL21L
 66

	)

1872 
	#R_PARISC_PLABEL14R
 70

	)

1873 
	#R_PARISC_PCREL64
 72

	)

1874 
	#R_PARISC_PCREL22F
 74

	)

1875 
	#R_PARISC_PCREL14WR
 75

	)

1876 
	#R_PARISC_PCREL14DR
 76

	)

1877 
	#R_PARISC_PCREL16F
 77

	)

1878 
	#R_PARISC_PCREL16WF
 78

	)

1879 
	#R_PARISC_PCREL16DF
 79

	)

1880 
	#R_PARISC_DIR64
 80

	)

1881 
	#R_PARISC_DIR14WR
 83

	)

1882 
	#R_PARISC_DIR14DR
 84

	)

1883 
	#R_PARISC_DIR16F
 85

	)

1884 
	#R_PARISC_DIR16WF
 86

	)

1885 
	#R_PARISC_DIR16DF
 87

	)

1886 
	#R_PARISC_GPREL64
 88

	)

1887 
	#R_PARISC_GPREL14WR
 91

	)

1888 
	#R_PARISC_GPREL14DR
 92

	)

1889 
	#R_PARISC_GPREL16F
 93

	)

1890 
	#R_PARISC_GPREL16WF
 94

	)

1891 
	#R_PARISC_GPREL16DF
 95

	)

1892 
	#R_PARISC_LTOFF64
 96

	)

1893 
	#R_PARISC_LTOFF14WR
 99

	)

1894 
	#R_PARISC_LTOFF14DR
 100

	)

1895 
	#R_PARISC_LTOFF16F
 101

	)

1896 
	#R_PARISC_LTOFF16WF
 102

	)

1897 
	#R_PARISC_LTOFF16DF
 103

	)

1898 
	#R_PARISC_SECREL64
 104

	)

1899 
	#R_PARISC_SEGREL64
 112

	)

1900 
	#R_PARISC_PLTOFF14WR
 115

	)

1901 
	#R_PARISC_PLTOFF14DR
 116

	)

1902 
	#R_PARISC_PLTOFF16F
 117

	)

1903 
	#R_PARISC_PLTOFF16WF
 118

	)

1904 
	#R_PARISC_PLTOFF16DF
 119

	)

1905 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1906 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1907 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1908 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1909 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1910 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1911 
	#R_PARISC_LORESERVE
 128

	)

1912 
	#R_PARISC_COPY
 128

	)

1913 
	#R_PARISC_IPLT
 129

	)

1914 
	#R_PARISC_EPLT
 130

	)

1915 
	#R_PARISC_TPREL32
 153

	)

1916 
	#R_PARISC_TPREL21L
 154

	)

1917 
	#R_PARISC_TPREL14R
 158

	)

1918 
	#R_PARISC_LTOFF_TP21L
 162

	)

1919 
	#R_PARISC_LTOFF_TP14R
 166

	)

1920 
	#R_PARISC_LTOFF_TP14F
 167

	)

1921 
	#R_PARISC_TPREL64
 216

	)

1922 
	#R_PARISC_TPREL14WR
 219

	)

1923 
	#R_PARISC_TPREL14DR
 220

	)

1924 
	#R_PARISC_TPREL16F
 221

	)

1925 
	#R_PARISC_TPREL16WF
 222

	)

1926 
	#R_PARISC_TPREL16DF
 223

	)

1927 
	#R_PARISC_LTOFF_TP64
 224

	)

1928 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1929 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1930 
	#R_PARISC_LTOFF_TP16F
 229

	)

1931 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1932 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1933 
	#R_PARISC_GNU_VTENTRY
 232

	)

1934 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1935 
	#R_PARISC_TLS_GD21L
 234

	)

1936 
	#R_PARISC_TLS_GD14R
 235

	)

1937 
	#R_PARISC_TLS_GDCALL
 236

	)

1938 
	#R_PARISC_TLS_LDM21L
 237

	)

1939 
	#R_PARISC_TLS_LDM14R
 238

	)

1940 
	#R_PARISC_TLS_LDMCALL
 239

	)

1941 
	#R_PARISC_TLS_LDO21L
 240

	)

1942 
	#R_PARISC_TLS_LDO14R
 241

	)

1943 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1944 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1945 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1946 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1947 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1948 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1949 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1950 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1951 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1952 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1953 
	#R_PARISC_HIRESERVE
 255

	)

1957 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1958 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1959 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1960 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1961 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1962 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1963 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1964 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1965 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1966 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1967 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1968 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1969 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1970 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1971 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1973 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1974 
	#PT_PARISC_UNWIND
 0x70000001

	)

1978 
	#PF_PARISC_SBP
 0x08000000

	)

1980 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1981 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1982 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1983 
	#PF_HP_CODE
 0x01000000

	)

1984 
	#PF_HP_MODIFY
 0x02000000

	)

1985 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1986 
	#PF_HP_SBP
 0x08000000

	)

1993 
	#EF_ALPHA_32BIT
 1

	)

1994 
	#EF_ALPHA_CANRELAX
 2

	)

1999 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2000 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2004 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2007 
	#STO_ALPHA_NOPV
 0x80

	)

2008 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2012 
	#R_ALPHA_NONE
 0

	)

2013 
	#R_ALPHA_REFLONG
 1

	)

2014 
	#R_ALPHA_REFQUAD
 2

	)

2015 
	#R_ALPHA_GPREL32
 3

	)

2016 
	#R_ALPHA_LITERAL
 4

	)

2017 
	#R_ALPHA_LITUSE
 5

	)

2018 
	#R_ALPHA_GPDISP
 6

	)

2019 
	#R_ALPHA_BRADDR
 7

	)

2020 
	#R_ALPHA_HINT
 8

	)

2021 
	#R_ALPHA_SREL16
 9

	)

2022 
	#R_ALPHA_SREL32
 10

	)

2023 
	#R_ALPHA_SREL64
 11

	)

2024 
	#R_ALPHA_GPRELHIGH
 17

	)

2025 
	#R_ALPHA_GPRELLOW
 18

	)

2026 
	#R_ALPHA_GPREL16
 19

	)

2027 
	#R_ALPHA_COPY
 24

	)

2028 
	#R_ALPHA_GLOB_DAT
 25

	)

2029 
	#R_ALPHA_JMP_SLOT
 26

	)

2030 
	#R_ALPHA_RELATIVE
 27

	)

2031 
	#R_ALPHA_TLS_GD_HI
 28

	)

2032 
	#R_ALPHA_TLSGD
 29

	)

2033 
	#R_ALPHA_TLS_LDM
 30

	)

2034 
	#R_ALPHA_DTPMOD64
 31

	)

2035 
	#R_ALPHA_GOTDTPREL
 32

	)

2036 
	#R_ALPHA_DTPREL64
 33

	)

2037 
	#R_ALPHA_DTPRELHI
 34

	)

2038 
	#R_ALPHA_DTPRELLO
 35

	)

2039 
	#R_ALPHA_DTPREL16
 36

	)

2040 
	#R_ALPHA_GOTTPREL
 37

	)

2041 
	#R_ALPHA_TPREL64
 38

	)

2042 
	#R_ALPHA_TPRELHI
 39

	)

2043 
	#R_ALPHA_TPRELLO
 40

	)

2044 
	#R_ALPHA_TPREL16
 41

	)

2046 
	#R_ALPHA_NUM
 46

	)

2049 
	#LITUSE_ALPHA_ADDR
 0

	)

2050 
	#LITUSE_ALPHA_BASE
 1

	)

2051 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2052 
	#LITUSE_ALPHA_JSR
 3

	)

2053 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2054 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2057 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2058 
	#DT_ALPHA_NUM
 1

	)

2063 
	#EF_PPC_EMB
 0x80000000

	)

2066 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2067 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2071 
	#R_PPC_NONE
 0

	)

2072 
	#R_PPC_ADDR32
 1

	)

2073 
	#R_PPC_ADDR24
 2

	)

2074 
	#R_PPC_ADDR16
 3

	)

2075 
	#R_PPC_ADDR16_LO
 4

	)

2076 
	#R_PPC_ADDR16_HI
 5

	)

2077 
	#R_PPC_ADDR16_HA
 6

	)

2078 
	#R_PPC_ADDR14
 7

	)

2079 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2080 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2081 
	#R_PPC_REL24
 10

	)

2082 
	#R_PPC_REL14
 11

	)

2083 
	#R_PPC_REL14_BRTAKEN
 12

	)

2084 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2085 
	#R_PPC_GOT16
 14

	)

2086 
	#R_PPC_GOT16_LO
 15

	)

2087 
	#R_PPC_GOT16_HI
 16

	)

2088 
	#R_PPC_GOT16_HA
 17

	)

2089 
	#R_PPC_PLTREL24
 18

	)

2090 
	#R_PPC_COPY
 19

	)

2091 
	#R_PPC_GLOB_DAT
 20

	)

2092 
	#R_PPC_JMP_SLOT
 21

	)

2093 
	#R_PPC_RELATIVE
 22

	)

2094 
	#R_PPC_LOCAL24PC
 23

	)

2095 
	#R_PPC_UADDR32
 24

	)

2096 
	#R_PPC_UADDR16
 25

	)

2097 
	#R_PPC_REL32
 26

	)

2098 
	#R_PPC_PLT32
 27

	)

2099 
	#R_PPC_PLTREL32
 28

	)

2100 
	#R_PPC_PLT16_LO
 29

	)

2101 
	#R_PPC_PLT16_HI
 30

	)

2102 
	#R_PPC_PLT16_HA
 31

	)

2103 
	#R_PPC_SDAREL16
 32

	)

2104 
	#R_PPC_SECTOFF
 33

	)

2105 
	#R_PPC_SECTOFF_LO
 34

	)

2106 
	#R_PPC_SECTOFF_HI
 35

	)

2107 
	#R_PPC_SECTOFF_HA
 36

	)

2110 
	#R_PPC_TLS
 67

	)

2111 
	#R_PPC_DTPMOD32
 68

	)

2112 
	#R_PPC_TPREL16
 69

	)

2113 
	#R_PPC_TPREL16_LO
 70

	)

2114 
	#R_PPC_TPREL16_HI
 71

	)

2115 
	#R_PPC_TPREL16_HA
 72

	)

2116 
	#R_PPC_TPREL32
 73

	)

2117 
	#R_PPC_DTPREL16
 74

	)

2118 
	#R_PPC_DTPREL16_LO
 75

	)

2119 
	#R_PPC_DTPREL16_HI
 76

	)

2120 
	#R_PPC_DTPREL16_HA
 77

	)

2121 
	#R_PPC_DTPREL32
 78

	)

2122 
	#R_PPC_GOT_TLSGD16
 79

	)

2123 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2124 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2125 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2126 
	#R_PPC_GOT_TLSLD16
 83

	)

2127 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2128 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2129 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2130 
	#R_PPC_GOT_TPREL16
 87

	)

2131 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2132 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2133 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2134 
	#R_PPC_GOT_DTPREL16
 91

	)

2135 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2136 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2137 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2141 
	#R_PPC_EMB_NADDR32
 101

	)

2142 
	#R_PPC_EMB_NADDR16
 102

	)

2143 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2144 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2145 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2146 
	#R_PPC_EMB_SDAI16
 106

	)

2147 
	#R_PPC_EMB_SDA2I16
 107

	)

2148 
	#R_PPC_EMB_SDA2REL
 108

	)

2149 
	#R_PPC_EMB_SDA21
 109

	)

2150 
	#R_PPC_EMB_MRKREF
 110

	)

2151 
	#R_PPC_EMB_RELSEC16
 111

	)

2152 
	#R_PPC_EMB_RELST_LO
 112

	)

2153 
	#R_PPC_EMB_RELST_HI
 113

	)

2154 
	#R_PPC_EMB_RELST_HA
 114

	)

2155 
	#R_PPC_EMB_BIT_FLD
 115

	)

2156 
	#R_PPC_EMB_RELSDA
 116

	)

2159 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2160 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2161 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2162 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2163 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2164 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2167 
	#R_PPC_IRELATIVE
 248

	)

2170 
	#R_PPC_REL16
 249

	)

2171 
	#R_PPC_REL16_LO
 250

	)

2172 
	#R_PPC_REL16_HI
 251

	)

2173 
	#R_PPC_REL16_HA
 252

	)

2177 
	#R_PPC_TOC16
 255

	)

2180 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2181 
	#DT_PPC_NUM
 1

	)

2184 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2185 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2186 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2187 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2188 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2189 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2190 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2191 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2192 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2193 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2194 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2195 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2196 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2197 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2198 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2199 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2200 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2201 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2203 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2204 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2205 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2206 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2208 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2209 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2210 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2211 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2212 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2213 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2214 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2215 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2217 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2218 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2219 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2220 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2221 
	#R_PPC64_ADDR30
 37

	)

2222 
	#R_PPC64_ADDR64
 38

	)

2223 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2224 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2225 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2226 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2227 
	#R_PPC64_UADDR64
 43

	)

2228 
	#R_PPC64_REL64
 44

	)

2229 
	#R_PPC64_PLT64
 45

	)

2230 
	#R_PPC64_PLTREL64
 46

	)

2231 
	#R_PPC64_TOC16
 47

	)

2232 
	#R_PPC64_TOC16_LO
 48

	)

2233 
	#R_PPC64_TOC16_HI
 49

	)

2234 
	#R_PPC64_TOC16_HA
 50

	)

2235 
	#R_PPC64_TOC
 51

	)

2236 
	#R_PPC64_PLTGOT16
 52

	)

2237 
	#R_PPC64_PLTGOT16_LO
 53

	)

2238 
	#R_PPC64_PLTGOT16_HI
 54

	)

2239 
	#R_PPC64_PLTGOT16_HA
 55

	)

2241 
	#R_PPC64_ADDR16_DS
 56

	)

2242 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2243 
	#R_PPC64_GOT16_DS
 58

	)

2244 
	#R_PPC64_GOT16_LO_DS
 59

	)

2245 
	#R_PPC64_PLT16_LO_DS
 60

	)

2246 
	#R_PPC64_SECTOFF_DS
 61

	)

2247 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2248 
	#R_PPC64_TOC16_DS
 63

	)

2249 
	#R_PPC64_TOC16_LO_DS
 64

	)

2250 
	#R_PPC64_PLTGOT16_DS
 65

	)

2251 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2254 
	#R_PPC64_TLS
 67

	)

2255 
	#R_PPC64_DTPMOD64
 68

	)

2256 
	#R_PPC64_TPREL16
 69

	)

2257 
	#R_PPC64_TPREL16_LO
 70

	)

2258 
	#R_PPC64_TPREL16_HI
 71

	)

2259 
	#R_PPC64_TPREL16_HA
 72

	)

2260 
	#R_PPC64_TPREL64
 73

	)

2261 
	#R_PPC64_DTPREL16
 74

	)

2262 
	#R_PPC64_DTPREL16_LO
 75

	)

2263 
	#R_PPC64_DTPREL16_HI
 76

	)

2264 
	#R_PPC64_DTPREL16_HA
 77

	)

2265 
	#R_PPC64_DTPREL64
 78

	)

2266 
	#R_PPC64_GOT_TLSGD16
 79

	)

2267 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2268 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2269 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2270 
	#R_PPC64_GOT_TLSLD16
 83

	)

2271 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2272 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2273 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2274 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2275 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2276 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2277 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2278 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2279 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2280 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2281 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2282 
	#R_PPC64_TPREL16_DS
 95

	)

2283 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2284 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2285 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2286 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2287 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2288 
	#R_PPC64_DTPREL16_DS
 101

	)

2289 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2290 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2291 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2292 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2293 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2294 
	#R_PPC64_TLSGD
 107

	)

2295 
	#R_PPC64_TLSLD
 108

	)

2296 
	#R_PPC64_TOCSAVE
 109

	)

2299 
	#R_PPC64_ADDR16_HIGH
 110

	)

2300 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2301 
	#R_PPC64_TPREL16_HIGH
 112

	)

2302 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2303 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2304 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2307 
	#R_PPC64_JMP_IREL
 247

	)

2308 
	#R_PPC64_IRELATIVE
 248

	)

2309 
	#R_PPC64_REL16
 249

	)

2310 
	#R_PPC64_REL16_LO
 250

	)

2311 
	#R_PPC64_REL16_HI
 251

	)

2312 
	#R_PPC64_REL16_HA
 252

	)

2318 
	#EF_PPC64_ABI
 3

	)

2321 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2322 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2323 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2324 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2325 
	#DT_PPC64_NUM
 4

	)

2328 
	#PPC64_OPT_TLS
 1

	)

2329 
	#PPC64_OPT_MULTI_TOC
 2

	)

2332 
	#STO_PPC64_LOCAL_BIT
 5

	)

2333 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2334 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2335 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2341 
	#EF_ARM_RELEXEC
 0x01

	)

2342 
	#EF_ARM_HASENTRY
 0x02

	)

2343 
	#EF_ARM_INTERWORK
 0x04

	)

2344 
	#EF_ARM_APCS_26
 0x08

	)

2345 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2346 
	#EF_ARM_PIC
 0x20

	)

2347 
	#EF_ARM_ALIGN8
 0x40

	)

2348 
	#EF_ARM_NEW_ABI
 0x80

	)

2349 
	#EF_ARM_OLD_ABI
 0x100

	)

2350 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2351 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2352 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2354 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2355 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2360 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2361 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2362 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2363 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2366 
	#EF_ARM_BE8
 0x00800000

	)

2367 
	#EF_ARM_LE8
 0x00400000

	)

2369 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2370 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2371 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2372 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2373 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2374 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2375 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2378 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2379 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2382 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2383 
	#SHF_ARM_COMDEF
 0x80000000

	)

2387 
	#PF_ARM_SB
 0x10000000

	)

2389 
	#PF_ARM_PI
 0x20000000

	)

2390 
	#PF_ARM_ABS
 0x40000000

	)

2393 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2396 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2397 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2398 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2403 
	#R_AARCH64_NONE
 0

	)

2406 
	#R_AARCH64_P32_ABS32
 1

	)

2407 
	#R_AARCH64_P32_COPY
 180

	)

2408 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2409 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2410 
	#R_AARCH64_P32_RELATIVE
 183

	)

2411 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2412 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2413 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2414 
	#R_AARCH64_P32_TLSDESC
 187

	)

2415 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2418 
	#R_AARCH64_ABS64
 257

	)

2419 
	#R_AARCH64_ABS32
 258

	)

2420 
	#R_AARCH64_ABS16
 259

	)

2421 
	#R_AARCH64_PREL64
 260

	)

2422 
	#R_AARCH64_PREL32
 261

	)

2423 
	#R_AARCH64_PREL16
 262

	)

2424 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2425 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2426 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2427 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2428 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2429 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2430 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2431 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2432 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2433 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2434 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2435 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2436 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2437 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2438 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2439 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2440 
	#R_AARCH64_TSTBR14
 279

	)

2441 
	#R_AARCH64_CONDBR19
 280

	)

2442 
	#R_AARCH64_JUMP26
 282

	)

2443 
	#R_AARCH64_CALL26
 283

	)

2444 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2445 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2446 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2447 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2448 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2449 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2450 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2451 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2452 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2453 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2454 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2455 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2456 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2457 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2458 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2459 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2460 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2461 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2462 
	#R_AARCH64_GOTREL64
 307

	)

2463 
	#R_AARCH64_GOTREL32
 308

	)

2464 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2465 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2466 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2467 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2468 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2469 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2470 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2471 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2472 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2473 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2474 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2475 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2476 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2477 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2478 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2479 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2480 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2481 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2482 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2483 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2484 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2485 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2486 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2487 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2488 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2489 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2490 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2491 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2492 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2493 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2494 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2495 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2496 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2497 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2498 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2499 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2500 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2501 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2502 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2503 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2504 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2505 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2506 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2507 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2508 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2509 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2510 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2511 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2512 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2513 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2514 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2515 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2516 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2517 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2518 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2519 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2520 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2521 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2522 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2523 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2524 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2525 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2526 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2527 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2528 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2529 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2530 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2531 
	#R_AARCH64_COPY
 1024

	)

2532 
	#R_AARCH64_GLOB_DAT
 1025

	)

2533 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2534 
	#R_AARCH64_RELATIVE
 1027

	)

2535 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2536 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2537 
	#R_AARCH64_TLS_TPREL
 1030

	)

2538 
	#R_AARCH64_TLSDESC
 1031

	)

2539 
	#R_AARCH64_IRELATIVE
 1032

	)

2543 
	#R_ARM_NONE
 0

	)

2544 
	#R_ARM_PC24
 1

	)

2546 
	#R_ARM_ABS32
 2

	)

2547 
	#R_ARM_REL32
 3

	)

2548 
	#R_ARM_PC13
 4

	)

2549 
	#R_ARM_ABS16
 5

	)

2550 
	#R_ARM_ABS12
 6

	)

2551 
	#R_ARM_THM_ABS5
 7

	)

2552 
	#R_ARM_ABS8
 8

	)

2553 
	#R_ARM_SBREL32
 9

	)

2554 
	#R_ARM_THM_PC22
 10

	)

2555 
	#R_ARM_THM_PC8
 11

	)

2557 
	#R_ARM_AMP_VCALL9
 12

	)

2558 
	#R_ARM_SWI24
 13

	)

2559 
	#R_ARM_TLS_DESC
 13

	)

2560 
	#R_ARM_THM_SWI8
 14

	)

2561 
	#R_ARM_XPC25
 15

	)

2562 
	#R_ARM_THM_XPC22
 16

	)

2563 
	#R_ARM_TLS_DTPMOD32
 17

	)

2564 
	#R_ARM_TLS_DTPOFF32
 18

	)

2565 
	#R_ARM_TLS_TPOFF32
 19

	)

2566 
	#R_ARM_COPY
 20

	)

2567 
	#R_ARM_GLOB_DAT
 21

	)

2568 
	#R_ARM_JUMP_SLOT
 22

	)

2569 
	#R_ARM_RELATIVE
 23

	)

2570 
	#R_ARM_GOTOFF
 24

	)

2571 
	#R_ARM_GOTPC
 25

	)

2572 
	#R_ARM_GOT32
 26

	)

2573 
	#R_ARM_PLT32
 27

	)

2574 
	#R_ARM_CALL
 28

	)

2575 
	#R_ARM_JUMP24
 29

	)

2577 
	#R_ARM_THM_JUMP24
 30

	)

2578 
	#R_ARM_BASE_ABS
 31

	)

2579 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2580 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2581 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2582 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2583 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2584 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2585 
	#R_ARM_TARGET1
 38

	)

2586 
	#R_ARM_SBREL31
 39

	)

2587 
	#R_ARM_V4BX
 40

	)

2588 
	#R_ARM_TARGET2
 41

	)

2589 
	#R_ARM_PREL31
 42

	)

2590 
	#R_ARM_MOVW_ABS_NC
 43

	)

2591 
	#R_ARM_MOVT_ABS
 44

	)

2592 
	#R_ARM_MOVW_PREL_NC
 45

	)

2593 
	#R_ARM_MOVT_PREL
 46

	)

2594 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2595 
	#R_ARM_THM_MOVT_ABS
 48

	)

2597 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2599 
	#R_ARM_THM_MOVT_PREL
 50

	)

2601 
	#R_ARM_THM_JUMP19
 51

	)

2603 
	#R_ARM_THM_JUMP6
 52

	)

2605 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2607 
	#R_ARM_THM_PC12
 54

	)

2609 
	#R_ARM_ABS32_NOI
 55

	)

2610 
	#R_ARM_REL32_NOI
 56

	)

2611 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2612 
	#R_ARM_ALU_PC_G0
 58

	)

2613 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2614 
	#R_ARM_ALU_PC_G1
 60

	)

2615 
	#R_ARM_ALU_PC_G2
 61

	)

2616 
	#R_ARM_LDR_PC_G1
 62

	)

2617 
	#R_ARM_LDR_PC_G2
 63

	)

2618 
	#R_ARM_LDRS_PC_G0
 64

	)

2620 
	#R_ARM_LDRS_PC_G1
 65

	)

2622 
	#R_ARM_LDRS_PC_G2
 66

	)

2624 
	#R_ARM_LDC_PC_G0
 67

	)

2625 
	#R_ARM_LDC_PC_G1
 68

	)

2626 
	#R_ARM_LDC_PC_G2
 69

	)

2627 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2628 
	#R_ARM_ALU_SB_G0
 71

	)

2629 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2630 
	#R_ARM_ALU_SB_G1
 73

	)

2631 
	#R_ARM_ALU_SB_G2
 74

	)

2632 
	#R_ARM_LDR_SB_G0
 75

	)

2634 
	#R_ARM_LDR_SB_G1
 76

	)

2636 
	#R_ARM_LDR_SB_G2
 77

	)

2638 
	#R_ARM_LDRS_SB_G0
 78

	)

2640 
	#R_ARM_LDRS_SB_G1
 79

	)

2642 
	#R_ARM_LDRS_SB_G2
 80

	)

2644 
	#R_ARM_LDC_SB_G0
 81

	)

2645 
	#R_ARM_LDC_SB_G1
 82

	)

2646 
	#R_ARM_LDC_SB_G2
 83

	)

2647 
	#R_ARM_MOVW_BREL_NC
 84

	)

2649 
	#R_ARM_MOVT_BREL
 85

	)

2651 
	#R_ARM_MOVW_BREL
 86

	)

2653 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2655 
	#R_ARM_THM_MOVT_BREL
 88

	)

2657 
	#R_ARM_THM_MOVW_BREL
 89

	)

2659 
	#R_ARM_TLS_GOTDESC
 90

	)

2660 
	#R_ARM_TLS_CALL
 91

	)

2661 
	#R_ARM_TLS_DESCSEQ
 92

	)

2662 
	#R_ARM_THM_TLS_CALL
 93

	)

2663 
	#R_ARM_PLT32_ABS
 94

	)

2664 
	#R_ARM_GOT_ABS
 95

	)

2665 
	#R_ARM_GOT_PREL
 96

	)

2666 
	#R_ARM_GOT_BREL12
 97

	)

2668 
	#R_ARM_GOTOFF12
 98

	)

2670 
	#R_ARM_GOTRELAX
 99

	)

2671 
	#R_ARM_GNU_VTENTRY
 100

	)

2672 
	#R_ARM_GNU_VTINHERIT
 101

	)

2673 
	#R_ARM_THM_PC11
 102

	)

2674 
	#R_ARM_THM_PC9
 103

	)

2676 
	#R_ARM_TLS_GD32
 104

	)

2678 
	#R_ARM_TLS_LDM32
 105

	)

2680 
	#R_ARM_TLS_LDO32
 106

	)

2682 
	#R_ARM_TLS_IE32
 107

	)

2684 
	#R_ARM_TLS_LE32
 108

	)

2686 
	#R_ARM_TLS_LDO12
 109

	)

2688 
	#R_ARM_TLS_LE12
 110

	)

2690 
	#R_ARM_TLS_IE12GP
 111

	)

2692 
	#R_ARM_ME_TOO
 128

	)

2693 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2694 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2695 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2696 
	#R_ARM_THM_GOT_BREL12
 131

	)

2698 
	#R_ARM_IRELATIVE
 160

	)

2699 
	#R_ARM_RXPC25
 249

	)

2700 
	#R_ARM_RSBREL32
 250

	)

2701 
	#R_ARM_THM_RPC22
 251

	)

2702 
	#R_ARM_RREL32
 252

	)

2703 
	#R_ARM_RABS22
 253

	)

2704 
	#R_ARM_RPC24
 254

	)

2705 
	#R_ARM_RBASE
 255

	)

2707 
	#R_ARM_NUM
 256

	)

2712 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2713 
	#EF_IA_64_ABI64
 0x00000010

	)

2714 
	#EF_IA_64_ARCH
 0xff000000

	)

2717 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2718 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2719 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2720 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2721 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2724 
	#PF_IA_64_NORECOV
 0x80000000

	)

2727 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2728 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2731 
	#SHF_IA_64_SHORT
 0x10000000

	)

2732 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2735 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2736 
	#DT_IA_64_NUM
 1

	)

2739 
	#R_IA64_NONE
 0x00

	)

2740 
	#R_IA64_IMM14
 0x21

	)

2741 
	#R_IA64_IMM22
 0x22

	)

2742 
	#R_IA64_IMM64
 0x23

	)

2743 
	#R_IA64_DIR32MSB
 0x24

	)

2744 
	#R_IA64_DIR32LSB
 0x25

	)

2745 
	#R_IA64_DIR64MSB
 0x26

	)

2746 
	#R_IA64_DIR64LSB
 0x27

	)

2747 
	#R_IA64_GPREL22
 0x2®

	)

2748 
	#R_IA64_GPREL64I
 0x2b

	)

2749 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2750 
	#R_IA64_GPREL32LSB
 0x2d

	)

2751 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2752 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2753 
	#R_IA64_LTOFF22
 0x32

	)

2754 
	#R_IA64_LTOFF64I
 0x33

	)

2755 
	#R_IA64_PLTOFF22
 0x3®

	)

2756 
	#R_IA64_PLTOFF64I
 0x3b

	)

2757 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2758 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2759 
	#R_IA64_FPTR64I
 0x43

	)

2760 
	#R_IA64_FPTR32MSB
 0x44

	)

2761 
	#R_IA64_FPTR32LSB
 0x45

	)

2762 
	#R_IA64_FPTR64MSB
 0x46

	)

2763 
	#R_IA64_FPTR64LSB
 0x47

	)

2764 
	#R_IA64_PCREL60B
 0x48

	)

2765 
	#R_IA64_PCREL21B
 0x49

	)

2766 
	#R_IA64_PCREL21M
 0x4®

	)

2767 
	#R_IA64_PCREL21F
 0x4b

	)

2768 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2769 
	#R_IA64_PCREL32LSB
 0x4d

	)

2770 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2771 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2772 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2773 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2774 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2775 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2776 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2777 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2778 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2779 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2780 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2781 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2782 
	#R_IA64_SECREL32MSB
 0x64

	)

2783 
	#R_IA64_SECREL32LSB
 0x65

	)

2784 
	#R_IA64_SECREL64MSB
 0x66

	)

2785 
	#R_IA64_SECREL64LSB
 0x67

	)

2786 
	#R_IA64_REL32MSB
 0x6¯

	)

2787 
	#R_IA64_REL32LSB
 0x6d

	)

2788 
	#R_IA64_REL64MSB
 0x6ê

	)

2789 
	#R_IA64_REL64LSB
 0x6‡

	)

2790 
	#R_IA64_LTV32MSB
 0x74

	)

2791 
	#R_IA64_LTV32LSB
 0x75

	)

2792 
	#R_IA64_LTV64MSB
 0x76

	)

2793 
	#R_IA64_LTV64LSB
 0x77

	)

2794 
	#R_IA64_PCREL21BI
 0x79

	)

2795 
	#R_IA64_PCREL22
 0x7®

	)

2796 
	#R_IA64_PCREL64I
 0x7b

	)

2797 
	#R_IA64_IPLTMSB
 0x80

	)

2798 
	#R_IA64_IPLTLSB
 0x81

	)

2799 
	#R_IA64_COPY
 0x84

	)

2800 
	#R_IA64_SUB
 0x85

	)

2801 
	#R_IA64_LTOFF22X
 0x86

	)

2802 
	#R_IA64_LDXMOV
 0x87

	)

2803 
	#R_IA64_TPREL14
 0x91

	)

2804 
	#R_IA64_TPREL22
 0x92

	)

2805 
	#R_IA64_TPREL64I
 0x93

	)

2806 
	#R_IA64_TPREL64MSB
 0x96

	)

2807 
	#R_IA64_TPREL64LSB
 0x97

	)

2808 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2809 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2810 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2811 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2812 
	#R_IA64_DTPREL14
 0xb1

	)

2813 
	#R_IA64_DTPREL22
 0xb2

	)

2814 
	#R_IA64_DTPREL64I
 0xb3

	)

2815 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2816 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2817 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2818 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2819 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2824 
	#EF_SH_MACH_MASK
 0x1f

	)

2825 
	#EF_SH_UNKNOWN
 0x0

	)

2826 
	#EF_SH1
 0x1

	)

2827 
	#EF_SH2
 0x2

	)

2828 
	#EF_SH3
 0x3

	)

2829 
	#EF_SH_DSP
 0x4

	)

2830 
	#EF_SH3_DSP
 0x5

	)

2831 
	#EF_SH4AL_DSP
 0x6

	)

2832 
	#EF_SH3E
 0x8

	)

2833 
	#EF_SH4
 0x9

	)

2834 
	#EF_SH2E
 0xb

	)

2835 
	#EF_SH4A
 0xc

	)

2836 
	#EF_SH2A
 0xd

	)

2837 
	#EF_SH4_NOFPU
 0x10

	)

2838 
	#EF_SH4A_NOFPU
 0x11

	)

2839 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2840 
	#EF_SH2A_NOFPU
 0x13

	)

2841 
	#EF_SH3_NOMMU
 0x14

	)

2842 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2843 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2844 
	#EF_SH2A_SH4
 0x17

	)

2845 
	#EF_SH2A_SH3E
 0x18

	)

2848 
	#R_SH_NONE
 0

	)

2849 
	#R_SH_DIR32
 1

	)

2850 
	#R_SH_REL32
 2

	)

2851 
	#R_SH_DIR8WPN
 3

	)

2852 
	#R_SH_IND12W
 4

	)

2853 
	#R_SH_DIR8WPL
 5

	)

2854 
	#R_SH_DIR8WPZ
 6

	)

2855 
	#R_SH_DIR8BP
 7

	)

2856 
	#R_SH_DIR8W
 8

	)

2857 
	#R_SH_DIR8L
 9

	)

2858 
	#R_SH_SWITCH16
 25

	)

2859 
	#R_SH_SWITCH32
 26

	)

2860 
	#R_SH_USES
 27

	)

2861 
	#R_SH_COUNT
 28

	)

2862 
	#R_SH_ALIGN
 29

	)

2863 
	#R_SH_CODE
 30

	)

2864 
	#R_SH_DATA
 31

	)

2865 
	#R_SH_LABEL
 32

	)

2866 
	#R_SH_SWITCH8
 33

	)

2867 
	#R_SH_GNU_VTINHERIT
 34

	)

2868 
	#R_SH_GNU_VTENTRY
 35

	)

2869 
	#R_SH_TLS_GD_32
 144

	)

2870 
	#R_SH_TLS_LD_32
 145

	)

2871 
	#R_SH_TLS_LDO_32
 146

	)

2872 
	#R_SH_TLS_IE_32
 147

	)

2873 
	#R_SH_TLS_LE_32
 148

	)

2874 
	#R_SH_TLS_DTPMOD32
 149

	)

2875 
	#R_SH_TLS_DTPOFF32
 150

	)

2876 
	#R_SH_TLS_TPOFF32
 151

	)

2877 
	#R_SH_GOT32
 160

	)

2878 
	#R_SH_PLT32
 161

	)

2879 
	#R_SH_COPY
 162

	)

2880 
	#R_SH_GLOB_DAT
 163

	)

2881 
	#R_SH_JMP_SLOT
 164

	)

2882 
	#R_SH_RELATIVE
 165

	)

2883 
	#R_SH_GOTOFF
 166

	)

2884 
	#R_SH_GOTPC
 167

	)

2886 
	#R_SH_NUM
 256

	)

2892 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2896 
	#R_390_NONE
 0

	)

2897 
	#R_390_8
 1

	)

2898 
	#R_390_12
 2

	)

2899 
	#R_390_16
 3

	)

2900 
	#R_390_32
 4

	)

2901 
	#R_390_PC32
 5

	)

2902 
	#R_390_GOT12
 6

	)

2903 
	#R_390_GOT32
 7

	)

2904 
	#R_390_PLT32
 8

	)

2905 
	#R_390_COPY
 9

	)

2906 
	#R_390_GLOB_DAT
 10

	)

2907 
	#R_390_JMP_SLOT
 11

	)

2908 
	#R_390_RELATIVE
 12

	)

2909 
	#R_390_GOTOFF32
 13

	)

2910 
	#R_390_GOTPC
 14

	)

2911 
	#R_390_GOT16
 15

	)

2912 
	#R_390_PC16
 16

	)

2913 
	#R_390_PC16DBL
 17

	)

2914 
	#R_390_PLT16DBL
 18

	)

2915 
	#R_390_PC32DBL
 19

	)

2916 
	#R_390_PLT32DBL
 20

	)

2917 
	#R_390_GOTPCDBL
 21

	)

2918 
	#R_390_64
 22

	)

2919 
	#R_390_PC64
 23

	)

2920 
	#R_390_GOT64
 24

	)

2921 
	#R_390_PLT64
 25

	)

2922 
	#R_390_GOTENT
 26

	)

2923 
	#R_390_GOTOFF16
 27

	)

2924 
	#R_390_GOTOFF64
 28

	)

2925 
	#R_390_GOTPLT12
 29

	)

2926 
	#R_390_GOTPLT16
 30

	)

2927 
	#R_390_GOTPLT32
 31

	)

2928 
	#R_390_GOTPLT64
 32

	)

2929 
	#R_390_GOTPLTENT
 33

	)

2930 
	#R_390_PLTOFF16
 34

	)

2931 
	#R_390_PLTOFF32
 35

	)

2932 
	#R_390_PLTOFF64
 36

	)

2933 
	#R_390_TLS_LOAD
 37

	)

2934 
	#R_390_TLS_GDCALL
 38

	)

2936 
	#R_390_TLS_LDCALL
 39

	)

2938 
	#R_390_TLS_GD32
 40

	)

2940 
	#R_390_TLS_GD64
 41

	)

2942 
	#R_390_TLS_GOTIE12
 42

	)

2944 
	#R_390_TLS_GOTIE32
 43

	)

2946 
	#R_390_TLS_GOTIE64
 44

	)

2948 
	#R_390_TLS_LDM32
 45

	)

2950 
	#R_390_TLS_LDM64
 46

	)

2952 
	#R_390_TLS_IE32
 47

	)

2954 
	#R_390_TLS_IE64
 48

	)

2956 
	#R_390_TLS_IEENT
 49

	)

2958 
	#R_390_TLS_LE32
 50

	)

2960 
	#R_390_TLS_LE64
 51

	)

2962 
	#R_390_TLS_LDO32
 52

	)

2964 
	#R_390_TLS_LDO64
 53

	)

2966 
	#R_390_TLS_DTPMOD
 54

	)

2967 
	#R_390_TLS_DTPOFF
 55

	)

2968 
	#R_390_TLS_TPOFF
 56

	)

2970 
	#R_390_20
 57

	)

2971 
	#R_390_GOT20
 58

	)

2972 
	#R_390_GOTPLT20
 59

	)

2973 
	#R_390_TLS_GOTIE20
 60

	)

2975 
	#R_390_IRELATIVE
 61

	)

2977 
	#R_390_NUM
 62

	)

2981 
	#R_CRIS_NONE
 0

	)

2982 
	#R_CRIS_8
 1

	)

2983 
	#R_CRIS_16
 2

	)

2984 
	#R_CRIS_32
 3

	)

2985 
	#R_CRIS_8_PCREL
 4

	)

2986 
	#R_CRIS_16_PCREL
 5

	)

2987 
	#R_CRIS_32_PCREL
 6

	)

2988 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2989 
	#R_CRIS_GNU_VTENTRY
 8

	)

2990 
	#R_CRIS_COPY
 9

	)

2991 
	#R_CRIS_GLOB_DAT
 10

	)

2992 
	#R_CRIS_JUMP_SLOT
 11

	)

2993 
	#R_CRIS_RELATIVE
 12

	)

2994 
	#R_CRIS_16_GOT
 13

	)

2995 
	#R_CRIS_32_GOT
 14

	)

2996 
	#R_CRIS_16_GOTPLT
 15

	)

2997 
	#R_CRIS_32_GOTPLT
 16

	)

2998 
	#R_CRIS_32_GOTREL
 17

	)

2999 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3000 
	#R_CRIS_32_PLT_PCREL
 19

	)

3002 
	#R_CRIS_NUM
 20

	)

3006 
	#R_X86_64_NONE
 0

	)

3007 
	#R_X86_64_64
 1

	)

3008 
	#R_X86_64_PC32
 2

	)

3009 
	#R_X86_64_GOT32
 3

	)

3010 
	#R_X86_64_PLT32
 4

	)

3011 
	#R_X86_64_COPY
 5

	)

3012 
	#R_X86_64_GLOB_DAT
 6

	)

3013 
	#R_X86_64_JUMP_SLOT
 7

	)

3014 
	#R_X86_64_RELATIVE
 8

	)

3015 
	#R_X86_64_GOTPCREL
 9

	)

3017 
	#R_X86_64_32
 10

	)

3018 
	#R_X86_64_32S
 11

	)

3019 
	#R_X86_64_16
 12

	)

3020 
	#R_X86_64_PC16
 13

	)

3021 
	#R_X86_64_8
 14

	)

3022 
	#R_X86_64_PC8
 15

	)

3023 
	#R_X86_64_DTPMOD64
 16

	)

3024 
	#R_X86_64_DTPOFF64
 17

	)

3025 
	#R_X86_64_TPOFF64
 18

	)

3026 
	#R_X86_64_TLSGD
 19

	)

3028 
	#R_X86_64_TLSLD
 20

	)

3030 
	#R_X86_64_DTPOFF32
 21

	)

3031 
	#R_X86_64_GOTTPOFF
 22

	)

3033 
	#R_X86_64_TPOFF32
 23

	)

3034 
	#R_X86_64_PC64
 24

	)

3035 
	#R_X86_64_GOTOFF64
 25

	)

3036 
	#R_X86_64_GOTPC32
 26

	)

3038 
	#R_X86_64_GOT64
 27

	)

3039 
	#R_X86_64_GOTPCREL64
 28

	)

3041 
	#R_X86_64_GOTPC64
 29

	)

3042 
	#R_X86_64_GOTPLT64
 30

	)

3043 
	#R_X86_64_PLTOFF64
 31

	)

3045 
	#R_X86_64_SIZE32
 32

	)

3046 
	#R_X86_64_SIZE64
 33

	)

3047 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3048 
	#R_X86_64_TLSDESC_CALL
 35

	)

3050 
	#R_X86_64_TLSDESC
 36

	)

3051 
	#R_X86_64_IRELATIVE
 37

	)

3052 
	#R_X86_64_RELATIVE64
 38

	)

3054 
	#R_X86_64_NUM
 39

	)

3058 
	#R_MN10300_NONE
 0

	)

3059 
	#R_MN10300_32
 1

	)

3060 
	#R_MN10300_16
 2

	)

3061 
	#R_MN10300_8
 3

	)

3062 
	#R_MN10300_PCREL32
 4

	)

3063 
	#R_MN10300_PCREL16
 5

	)

3064 
	#R_MN10300_PCREL8
 6

	)

3065 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3066 
	#R_MN10300_GNU_VTENTRY
 8

	)

3067 
	#R_MN10300_24
 9

	)

3068 
	#R_MN10300_GOTPC32
 10

	)

3069 
	#R_MN10300_GOTPC16
 11

	)

3070 
	#R_MN10300_GOTOFF32
 12

	)

3071 
	#R_MN10300_GOTOFF24
 13

	)

3072 
	#R_MN10300_GOTOFF16
 14

	)

3073 
	#R_MN10300_PLT32
 15

	)

3074 
	#R_MN10300_PLT16
 16

	)

3075 
	#R_MN10300_GOT32
 17

	)

3076 
	#R_MN10300_GOT24
 18

	)

3077 
	#R_MN10300_GOT16
 19

	)

3078 
	#R_MN10300_COPY
 20

	)

3079 
	#R_MN10300_GLOB_DAT
 21

	)

3080 
	#R_MN10300_JMP_SLOT
 22

	)

3081 
	#R_MN10300_RELATIVE
 23

	)

3082 
	#R_MN10300_TLS_GD
 24

	)

3083 
	#R_MN10300_TLS_LD
 25

	)

3084 
	#R_MN10300_TLS_LDO
 26

	)

3085 
	#R_MN10300_TLS_GOTIE
 27

	)

3087 
	#R_MN10300_TLS_IE
 28

	)

3089 
	#R_MN10300_TLS_LE
 29

	)

3091 
	#R_MN10300_TLS_DTPMOD
 30

	)

3092 
	#R_MN10300_TLS_DTPOFF
 31

	)

3093 
	#R_MN10300_TLS_TPOFF
 32

	)

3094 
	#R_MN10300_SYM_DIFF
 33

	)

3096 
	#R_MN10300_ALIGN
 34

	)

3098 
	#R_MN10300_NUM
 35

	)

3102 
	#R_M32R_NONE
 0

	)

3103 
	#R_M32R_16
 1

	)

3104 
	#R_M32R_32
 2

	)

3105 
	#R_M32R_24
 3

	)

3106 
	#R_M32R_10_PCREL
 4

	)

3107 
	#R_M32R_18_PCREL
 5

	)

3108 
	#R_M32R_26_PCREL
 6

	)

3109 
	#R_M32R_HI16_ULO
 7

	)

3110 
	#R_M32R_HI16_SLO
 8

	)

3111 
	#R_M32R_LO16
 9

	)

3112 
	#R_M32R_SDA16
 10

	)

3113 
	#R_M32R_GNU_VTINHERIT
 11

	)

3114 
	#R_M32R_GNU_VTENTRY
 12

	)

3116 
	#R_M32R_16_RELA
 33

	)

3117 
	#R_M32R_32_RELA
 34

	)

3118 
	#R_M32R_24_RELA
 35

	)

3119 
	#R_M32R_10_PCREL_RELA
 36

	)

3120 
	#R_M32R_18_PCREL_RELA
 37

	)

3121 
	#R_M32R_26_PCREL_RELA
 38

	)

3122 
	#R_M32R_HI16_ULO_RELA
 39

	)

3123 
	#R_M32R_HI16_SLO_RELA
 40

	)

3124 
	#R_M32R_LO16_RELA
 41

	)

3125 
	#R_M32R_SDA16_RELA
 42

	)

3126 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3127 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3128 
	#R_M32R_REL32
 45

	)

3130 
	#R_M32R_GOT24
 48

	)

3131 
	#R_M32R_26_PLTREL
 49

	)

3132 
	#R_M32R_COPY
 50

	)

3133 
	#R_M32R_GLOB_DAT
 51

	)

3134 
	#R_M32R_JMP_SLOT
 52

	)

3135 
	#R_M32R_RELATIVE
 53

	)

3136 
	#R_M32R_GOTOFF
 54

	)

3137 
	#R_M32R_GOTPC24
 55

	)

3138 
	#R_M32R_GOT16_HI_ULO
 56

	)

3140 
	#R_M32R_GOT16_HI_SLO
 57

	)

3142 
	#R_M32R_GOT16_LO
 58

	)

3143 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3145 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3147 
	#R_M32R_GOTPC_LO
 61

	)

3149 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3151 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3153 
	#R_M32R_GOTOFF_LO
 64

	)

3154 
	#R_M32R_NUM
 256

	)

3157 
	#R_MICROBLAZE_NONE
 0

	)

3158 
	#R_MICROBLAZE_32
 1

	)

3159 
	#R_MICROBLAZE_32_PCREL
 2

	)

3160 
	#R_MICROBLAZE_64_PCREL
 3

	)

3161 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3162 
	#R_MICROBLAZE_64
 5

	)

3163 
	#R_MICROBLAZE_32_LO
 6

	)

3164 
	#R_MICROBLAZE_SRO32
 7

	)

3165 
	#R_MICROBLAZE_SRW32
 8

	)

3166 
	#R_MICROBLAZE_64_NONE
 9

	)

3167 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3168 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3169 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3170 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3171 
	#R_MICROBLAZE_GOT_64
 14

	)

3172 
	#R_MICROBLAZE_PLT_64
 15

	)

3173 
	#R_MICROBLAZE_REL
 16

	)

3174 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3175 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3176 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3177 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3178 
	#R_MICROBLAZE_COPY
 21

	)

3179 
	#R_MICROBLAZE_TLS
 22

	)

3180 
	#R_MICROBLAZE_TLSGD
 23

	)

3181 
	#R_MICROBLAZE_TLSLD
 24

	)

3182 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3183 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3184 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3185 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3186 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3189 
	#DT_NIOS2_GP
 0x70000002

	)

3192 
	#R_NIOS2_NONE
 0

	)

3193 
	#R_NIOS2_S16
 1

	)

3194 
	#R_NIOS2_U16
 2

	)

3195 
	#R_NIOS2_PCREL16
 3

	)

3196 
	#R_NIOS2_CALL26
 4

	)

3197 
	#R_NIOS2_IMM5
 5

	)

3198 
	#R_NIOS2_CACHE_OPX
 6

	)

3199 
	#R_NIOS2_IMM6
 7

	)

3200 
	#R_NIOS2_IMM8
 8

	)

3201 
	#R_NIOS2_HI16
 9

	)

3202 
	#R_NIOS2_LO16
 10

	)

3203 
	#R_NIOS2_HIADJ16
 11

	)

3204 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3205 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3206 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3207 
	#R_NIOS2_GPREL
 15

	)

3208 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3209 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3210 
	#R_NIOS2_UJMP
 18

	)

3211 
	#R_NIOS2_CJMP
 19

	)

3212 
	#R_NIOS2_CALLR
 20

	)

3213 
	#R_NIOS2_ALIGN
 21

	)

3215 
	#R_NIOS2_GOT16
 22

	)

3216 
	#R_NIOS2_CALL16
 23

	)

3217 
	#R_NIOS2_GOTOFF_LO
 24

	)

3218 
	#R_NIOS2_GOTOFF_HA
 25

	)

3219 
	#R_NIOS2_PCREL_LO
 26

	)

3220 
	#R_NIOS2_PCREL_HA
 27

	)

3221 
	#R_NIOS2_TLS_GD16
 28

	)

3222 
	#R_NIOS2_TLS_LDM16
 29

	)

3223 
	#R_NIOS2_TLS_LDO16
 30

	)

3224 
	#R_NIOS2_TLS_IE16
 31

	)

3225 
	#R_NIOS2_TLS_LE16
 32

	)

3226 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3227 
	#R_NIOS2_TLS_DTPREL
 34

	)

3228 
	#R_NIOS2_TLS_TPREL
 35

	)

3229 
	#R_NIOS2_COPY
 36

	)

3230 
	#R_NIOS2_GLOB_DAT
 37

	)

3231 
	#R_NIOS2_JUMP_SLOT
 38

	)

3232 
	#R_NIOS2_RELATIVE
 39

	)

3233 
	#R_NIOS2_GOTOFF
 40

	)

3234 
	#R_NIOS2_CALL26_NOAT
 41

	)

3235 
	#R_NIOS2_GOT_LO
 42

	)

3236 
	#R_NIOS2_GOT_HA
 43

	)

3237 
	#R_NIOS2_CALL_LO
 44

	)

3238 
	#R_NIOS2_CALL_HA
 45

	)

3241 
	#R_TILEPRO_NONE
 0

	)

3242 
	#R_TILEPRO_32
 1

	)

3243 
	#R_TILEPRO_16
 2

	)

3244 
	#R_TILEPRO_8
 3

	)

3245 
	#R_TILEPRO_32_PCREL
 4

	)

3246 
	#R_TILEPRO_16_PCREL
 5

	)

3247 
	#R_TILEPRO_8_PCREL
 6

	)

3248 
	#R_TILEPRO_LO16
 7

	)

3249 
	#R_TILEPRO_HI16
 8

	)

3250 
	#R_TILEPRO_HA16
 9

	)

3251 
	#R_TILEPRO_COPY
 10

	)

3252 
	#R_TILEPRO_GLOB_DAT
 11

	)

3253 
	#R_TILEPRO_JMP_SLOT
 12

	)

3254 
	#R_TILEPRO_RELATIVE
 13

	)

3255 
	#R_TILEPRO_BROFF_X1
 14

	)

3256 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3257 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3258 
	#R_TILEPRO_IMM8_X0
 17

	)

3259 
	#R_TILEPRO_IMM8_Y0
 18

	)

3260 
	#R_TILEPRO_IMM8_X1
 19

	)

3261 
	#R_TILEPRO_IMM8_Y1
 20

	)

3262 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3263 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3264 
	#R_TILEPRO_IMM16_X0
 23

	)

3265 
	#R_TILEPRO_IMM16_X1
 24

	)

3266 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3267 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3268 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3269 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3270 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3271 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3272 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3273 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3274 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3275 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3276 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3277 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3278 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3279 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3280 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3281 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3282 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3283 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3284 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3285 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3286 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3287 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3288 
	#R_TILEPRO_MMSTART_X0
 47

	)

3289 
	#R_TILEPRO_MMEND_X0
 48

	)

3290 
	#R_TILEPRO_MMSTART_X1
 49

	)

3291 
	#R_TILEPRO_MMEND_X1
 50

	)

3292 
	#R_TILEPRO_SHAMT_X0
 51

	)

3293 
	#R_TILEPRO_SHAMT_X1
 52

	)

3294 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3295 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3296 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3298 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3299 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3300 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3301 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3302 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3303 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3304 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3305 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3306 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3307 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3308 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3309 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3310 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3311 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3312 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3313 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3314 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3315 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3316 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3317 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3318 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3319 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3320 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3321 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3322 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3323 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3324 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3325 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3326 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3327 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3328 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3329 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3330 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3332 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3333 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3335 
	#R_TILEPRO_NUM
 130

	)

3339 
	#R_TILEGX_NONE
 0

	)

3340 
	#R_TILEGX_64
 1

	)

3341 
	#R_TILEGX_32
 2

	)

3342 
	#R_TILEGX_16
 3

	)

3343 
	#R_TILEGX_8
 4

	)

3344 
	#R_TILEGX_64_PCREL
 5

	)

3345 
	#R_TILEGX_32_PCREL
 6

	)

3346 
	#R_TILEGX_16_PCREL
 7

	)

3347 
	#R_TILEGX_8_PCREL
 8

	)

3348 
	#R_TILEGX_HW0
 9

	)

3349 
	#R_TILEGX_HW1
 10

	)

3350 
	#R_TILEGX_HW2
 11

	)

3351 
	#R_TILEGX_HW3
 12

	)

3352 
	#R_TILEGX_HW0_LAST
 13

	)

3353 
	#R_TILEGX_HW1_LAST
 14

	)

3354 
	#R_TILEGX_HW2_LAST
 15

	)

3355 
	#R_TILEGX_COPY
 16

	)

3356 
	#R_TILEGX_GLOB_DAT
 17

	)

3357 
	#R_TILEGX_JMP_SLOT
 18

	)

3358 
	#R_TILEGX_RELATIVE
 19

	)

3359 
	#R_TILEGX_BROFF_X1
 20

	)

3360 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3361 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3362 
	#R_TILEGX_IMM8_X0
 23

	)

3363 
	#R_TILEGX_IMM8_Y0
 24

	)

3364 
	#R_TILEGX_IMM8_X1
 25

	)

3365 
	#R_TILEGX_IMM8_Y1
 26

	)

3366 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3367 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3368 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3369 
	#R_TILEGX_MMSTART_X0
 30

	)

3370 
	#R_TILEGX_MMEND_X0
 31

	)

3371 
	#R_TILEGX_SHAMT_X0
 32

	)

3372 
	#R_TILEGX_SHAMT_X1
 33

	)

3373 
	#R_TILEGX_SHAMT_Y0
 34

	)

3374 
	#R_TILEGX_SHAMT_Y1
 35

	)

3375 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3376 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3377 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3378 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3379 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3380 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3381 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3382 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3383 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3384 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3385 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3386 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3387 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3388 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3389 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3390 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3391 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3392 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3393 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3394 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3395 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3396 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3397 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3398 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3399 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3400 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3401 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3402 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3403 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3404 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3405 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3406 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3407 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3408 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3409 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3410 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3411 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3412 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3413 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3414 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3415 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3416 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3417 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3418 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3419 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3420 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3421 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3422 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3423 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3424 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3425 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3426 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3427 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3428 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3430 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3431 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3432 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3433 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3434 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3435 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3436 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3437 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3438 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3439 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3440 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3441 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3443 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3444 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3445 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3446 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3447 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3448 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3449 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3450 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3451 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3452 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3453 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3454 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3455 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3456 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3457 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3458 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3460 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3461 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3463 
	#R_TILEGX_NUM
 130

	)

3466 
	g__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/netfilter_ipv6.h

7 #i‚de‡
__LINUX_IP6_NETFILTER_H


8 
	#__LINUX_IP6_NETFILTER_H


	)

11 
	~<löux/√tfûãr.h
>

15 
	~<limôs.h
>

19 
	#NFC_IP6_SRC
 0x0001

	)

21 
	#NFC_IP6_DST
 0x0002

	)

23 
	#NFC_IP6_IF_IN
 0x0004

	)

25 
	#NFC_IP6_IF_OUT
 0x0008

	)

27 
	#NFC_IP6_TOS
 0x0010

	)

29 
	#NFC_IP6_PROTO
 0x0020

	)

31 
	#NFC_IP6_OPTIONS
 0x0040

	)

33 
	#NFC_IP6_FRAG
 0x0080

	)

38 
	#NFC_IP6_TCPFLAGS
 0x0100

	)

40 
	#NFC_IP6_SRC_PT
 0x0200

	)

42 
	#NFC_IP6_DST_PT
 0x0400

	)

44 
	#NFC_IP6_PROTO_UNKNOWN
 0x2000

	)

48 
	#NF_IP6_PRE_ROUTING
 0

	)

50 
	#NF_IP6_LOCAL_IN
 1

	)

52 
	#NF_IP6_FORWARD
 2

	)

54 
	#NF_IP6_LOCAL_OUT
 3

	)

56 
	#NF_IP6_POST_ROUTING
 4

	)

57 
	#NF_IP6_NUMHOOKS
 5

	)

60 
	enf_ù6_hook_¥i‹ôõs
 {

61 
	mNF_IP6_PRI_FIRST
 = 
INT_MIN
,

62 
	mNF_IP6_PRI_CONNTRACK_DEFRAG
 = -400,

63 
	mNF_IP6_PRI_RAW
 = -300,

64 
	mNF_IP6_PRI_SELINUX_FIRST
 = -225,

65 
	mNF_IP6_PRI_CONNTRACK
 = -200,

66 
	mNF_IP6_PRI_MANGLE
 = -150,

67 
	mNF_IP6_PRI_NAT_DST
 = -100,

68 
	mNF_IP6_PRI_FILTER
 = 0,

69 
	mNF_IP6_PRI_SECURITY
 = 50,

70 
	mNF_IP6_PRI_NAT_SRC
 = 100,

71 
	mNF_IP6_PRI_SELINUX_LAST
 = 225,

72 
	mNF_IP6_PRI_CONNTRACK_HELPER
 = 300,

73 
	mNF_IP6_PRI_LAST
 = 
INT_MAX
,

	@/usr/include/linux/stddef.h

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/arpa/nameser_compat.h

34 #i‚de‡
_ARPA_NAMESER_COMPAT_


35 
	#_ARPA_NAMESER_COMPAT_


	)

37 
	#__BIND
 19950621

	)

39 
	~<ídün.h
>

49 
	mid
 :16;

50 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


52 
	mqr
: 1;

53 
	m›code
: 4;

54 
	mØ
: 1;

55 
	mtc
: 1;

56 
	mrd
: 1;

58 
	mø
: 1;

59 
	munu£d
 :1;

60 
	mad
: 1;

61 
	mcd
: 1;

62 
	mrcode
 :4;

64 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN
 || BYTE_ORDER =
PDP_ENDIAN


66 
	mrd
 :1;

67 
	mtc
 :1;

68 
	mØ
 :1;

69 
	m›code
 :4;

70 
	mqr
 :1;

72 
	mrcode
 :4;

73 
	mcd
: 1;

74 
	mad
: 1;

75 
	munu£d
 :1;

76 
	mø
 :1;

79 
	mqdcou¡
 :16;

80 
	m™cou¡
 :16;

81 
	mnscou¡
 :16;

82 
	m¨cou¡
 :16;

83 } 
	tHEADER
;

85 
	#PACKETSZ
 
NS_PACKETSZ


	)

86 
	#MAXDNAME
 
NS_MAXDNAME


	)

87 
	#MAXCDNAME
 
NS_MAXCDNAME


	)

88 
	#MAXLABEL
 
NS_MAXLABEL


	)

89 
	#HFIXEDSZ
 
NS_HFIXEDSZ


	)

90 
	#QFIXEDSZ
 
NS_QFIXEDSZ


	)

91 
	#RRFIXEDSZ
 
NS_RRFIXEDSZ


	)

92 
	#INT32SZ
 
NS_INT32SZ


	)

93 
	#INT16SZ
 
NS_INT16SZ


	)

94 
	#INT8SZ
 
NS_INT8SZ


	)

95 
	#INADDRSZ
 
NS_INADDRSZ


	)

96 
	#IN6ADDRSZ
 
NS_IN6ADDRSZ


	)

97 
	#INDIR_MASK
 
NS_CMPRSFLGS


	)

98 
	#NAMESERVER_PORT
 
NS_DEFAULTPORT


	)

100 
	#S_ZONE
 
ns_s_zn


	)

101 
	#S_PREREQ
 
ns_s_¥


	)

102 
	#S_UPDATE
 
ns_s_ud


	)

103 
	#S_ADDT
 
ns_s_¨


	)

105 
	#QUERY
 
ns_o_quîy


	)

106 
	#IQUERY
 
ns_o_iquîy


	)

107 
	#STATUS
 
ns_o_°©us


	)

108 
	#NS_NOTIFY_OP
 
ns_o_nŸify


	)

109 
	#NS_UPDATE_OP
 
ns_o_upd©e


	)

111 
	#NOERROR
 
ns_r_n€º‹


	)

112 
	#FORMERR
 
ns_r_f‹mîr


	)

113 
	#SERVFAIL
 
ns_r_£rvÁû


	)

114 
	#NXDOMAIN
 
ns_r_nxdomaö


	)

115 
	#NOTIMP
 
ns_r_nŸim∂


	)

116 
	#REFUSED
 
ns_r_ªfu£d


	)

117 
	#YXDOMAIN
 
ns_r_yxdomaö


	)

118 
	#YXRRSET
 
ns_r_yxº£t


	)

119 
	#NXRRSET
 
ns_r_nxº£t


	)

120 
	#NOTAUTH
 
ns_r_nŸauth


	)

121 
	#NOTZONE
 
ns_r_nŸz⁄e


	)

127 
	#DELETE
 
ns_u›_dñëe


	)

128 
	#ADD
 
ns_u›_add


	)

130 
	#T_A
 
ns_t_a


	)

131 
	#T_NS
 
ns_t_ns


	)

132 
	#T_MD
 
ns_t_md


	)

133 
	#T_MF
 
ns_t_mf


	)

134 
	#T_CNAME
 
ns_t_˙ame


	)

135 
	#T_SOA
 
ns_t_sﬂ


	)

136 
	#T_MB
 
ns_t_mb


	)

137 
	#T_MG
 
ns_t_mg


	)

138 
	#T_MR
 
ns_t_mr


	)

139 
	#T_NULL
 
ns_t_nuŒ


	)

140 
	#T_WKS
 
ns_t_wks


	)

141 
	#T_PTR
 
ns_t_±r


	)

142 
	#T_HINFO
 
ns_t_höfo


	)

143 
	#T_MINFO
 
ns_t_möfo


	)

144 
	#T_MX
 
ns_t_mx


	)

145 
	#T_TXT
 
ns_t_txt


	)

146 
	#T_RP
 
ns_t_Ω


	)

147 
	#T_AFSDB
 
ns_t_afsdb


	)

148 
	#T_X25
 
ns_t_x25


	)

149 
	#T_ISDN
 
ns_t_isdn


	)

150 
	#T_RT
 
ns_t_π


	)

151 
	#T_NSAP
 
ns_t_nßp


	)

152 
	#T_NSAP_PTR
 
ns_t_nßp_±r


	)

153 
	#T_SIG
 
ns_t_sig


	)

154 
	#T_KEY
 
ns_t_key


	)

155 
	#T_PX
 
ns_t_px


	)

156 
	#T_GPOS
 
ns_t_gpos


	)

157 
	#T_AAAA
 
ns_t_ØØ


	)

158 
	#T_LOC
 
ns_t_loc


	)

159 
	#T_NXT
 
ns_t_nxt


	)

160 
	#T_EID
 
ns_t_eid


	)

161 
	#T_NIMLOC
 
ns_t_nimloc


	)

162 
	#T_SRV
 
ns_t_§v


	)

163 
	#T_ATMA
 
ns_t_©ma


	)

164 
	#T_NAPTR
 
ns_t_«±r


	)

165 
	#T_A6
 
ns_t_a6


	)

166 
	#T_DNAME
 
ns_t_d«me


	)

167 
	#T_TSIG
 
ns_t_tsig


	)

168 
	#T_IXFR
 
ns_t_ix‰


	)

169 
	#T_AXFR
 
ns_t_ax‰


	)

170 
	#T_MAILB
 
ns_t_maûb


	)

171 
	#T_MAILA
 
ns_t_maûa


	)

172 
	#T_ANY
 
ns_t_™y


	)

174 
	#C_IN
 
ns_c_ö


	)

175 
	#C_CHAOS
 
ns_c_chaos


	)

176 
	#C_HS
 
ns_c_hs


	)

178 
	#C_NONE
 
ns_c_n⁄e


	)

179 
	#C_ANY
 
ns_c_™y


	)

181 
	#GETSHORT
 
NS_GET16


	)

182 
	#GETLONG
 
NS_GET32


	)

183 
	#PUTSHORT
 
NS_PUT16


	)

184 
	#PUTLONG
 
NS_PUT32


	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
449
9416
bridge/br_common.h
bridge/bridge.c
bridge/fdb.c
bridge/link.c
bridge/mdb.c
bridge/monitor.c
bridge/vlan.c
examples/bpf/bpf_agent.c
examples/bpf/bpf_funcs.h
examples/bpf/bpf_prog.c
examples/bpf/bpf_shared.h
examples/bpf/bpf_sys.h
genl/ctrl.c
genl/genl.c
genl/genl_utils.h
genl/static-syms.c
include/SNAPSHOT.h
include/bpf_elf.h
include/bpf_scm.h
include/color.h
include/dlfcn.h
include/hlist.h
include/ip6tables.h
include/iptables.h
include/iptables_common.h
include/json_writer.h
include/libgenl.h
include/libiptc/ipt_kernel_headers.h
include/libiptc/libip6tc.h
include/libiptc/libiptc.h
include/libnetlink.h
include/linux/atm.h
include/linux/atmapi.h
include/linux/atmioc.h
include/linux/atmsap.h
include/linux/bpf.h
include/linux/bpf_common.h
include/linux/can.h
include/linux/can/netlink.h
include/linux/fib_rules.h
include/linux/filter.h
include/linux/fou.h
include/linux/gen_stats.h
include/linux/genetlink.h
include/linux/hdlc/ioctl.h
include/linux/if.h
include/linux/if_addr.h
include/linux/if_addrlabel.h
include/linux/if_arp.h
include/linux/if_bridge.h
include/linux/if_ether.h
include/linux/if_link.h
include/linux/if_tun.h
include/linux/if_tunnel.h
include/linux/if_vlan.h
include/linux/in.h
include/linux/in6.h
include/linux/inet_diag.h
include/linux/ip6_tunnel.h
include/linux/l2tp.h
include/linux/libc-compat.h
include/linux/mpls.h
include/linux/neighbour.h
include/linux/net_namespace.h
include/linux/netconf.h
include/linux/netdevice.h
include/linux/netfilter.h
include/linux/netfilter/x_tables.h
include/linux/netfilter/xt_tcpudp.h
include/linux/netfilter_ipv4.h
include/linux/netfilter_ipv4/ip_tables.h
include/linux/netlink.h
include/linux/netlink_diag.h
include/linux/packet_diag.h
include/linux/pkt_cls.h
include/linux/pkt_sched.h
include/linux/q_openqueue.h
include/linux/rtnetlink.h
include/linux/sock_diag.h
include/linux/socket.h
include/linux/tc_act/tc_bpf.h
include/linux/tc_act/tc_connmark.h
include/linux/tc_act/tc_csum.h
include/linux/tc_act/tc_defact.h
include/linux/tc_act/tc_gact.h
include/linux/tc_act/tc_ipt.h
include/linux/tc_act/tc_mirred.h
include/linux/tc_act/tc_nat.h
include/linux/tc_act/tc_pedit.h
include/linux/tc_act/tc_skbedit.h
include/linux/tc_act/tc_vlan.h
include/linux/tc_ematch/tc_em_cmp.h
include/linux/tc_ematch/tc_em_meta.h
include/linux/tc_ematch/tc_em_nbyte.h
include/linux/tc_ematch/tc_em_text.h
include/linux/tcp.h
include/linux/tcp_metrics.h
include/linux/tipc.h
include/linux/tipc_netlink.h
include/linux/types.h
include/linux/unix_diag.h
include/linux/veth.h
include/linux/xfrm.h
include/ll_map.h
include/names.h
include/namespace.h
include/netinet/tcp.h
include/rt_names.h
include/rtm_map.h
include/utils.h
include/xt-internal.h
ip/ip.c
ip/ip6tunnel.c
ip/ip_common.h
ip/ipaddress.c
ip/ipaddrlabel.c
ip/ipfou.c
ip/ipl2tp.c
ip/iplink.c
ip/iplink_bond.c
ip/iplink_bond_slave.c
ip/iplink_bridge.c
ip/iplink_bridge_slave.c
ip/iplink_can.c
ip/iplink_geneve.c
ip/iplink_hsr.c
ip/iplink_ipoib.c
ip/iplink_ipvlan.c
ip/iplink_macvlan.c
ip/iplink_vlan.c
ip/iplink_vrf.c
ip/iplink_vxlan.c
ip/ipmaddr.c
ip/ipmonitor.c
ip/ipmroute.c
ip/ipneigh.c
ip/ipnetconf.c
ip/ipnetns.c
ip/ipntable.c
ip/ipprefix.c
ip/iproute.c
ip/iprule.c
ip/iptoken.c
ip/iptunnel.c
ip/iptuntap.c
ip/ipxfrm.c
ip/link_gre.c
ip/link_gre6.c
ip/link_ip6tnl.c
ip/link_iptnl.c
ip/link_veth.c
ip/link_vti.c
ip/link_vti6.c
ip/rtm_map.c
ip/rtmon.c
ip/static-syms.c
ip/tcp_metrics.c
ip/tunnel.c
ip/tunnel.h
ip/xfrm.h
ip/xfrm_monitor.c
ip/xfrm_policy.c
ip/xfrm_state.c
lib/color.c
lib/dnet_ntop.c
lib/dnet_pton.c
lib/inet_proto.c
lib/ipx_ntop.c
lib/ipx_pton.c
lib/json_writer.c
lib/libgenl.c
lib/libnetlink.c
lib/ll_addr.c
lib/ll_map.c
lib/ll_proto.c
lib/ll_types.c
lib/mpls_ntop.c
lib/mpls_pton.c
lib/names.c
lib/namespace.c
lib/rt_names.c
lib/utils.c
misc/arpd.c
misc/ifstat.c
misc/lnstat.c
misc/lnstat.h
misc/lnstat_util.c
misc/nstat.c
misc/rtacct.c
misc/ss.c
misc/ssfilter.c
misc/ssfilter.h
misc/ssfilter.y
netem/maketable.c
netem/normal.c
netem/pareto.c
netem/paretonormal.c
netem/stats.c
tc/e_bpf.c
tc/em_canid.c
tc/em_cmp.c
tc/em_ipset.c
tc/em_meta.c
tc/em_nbyte.c
tc/em_u32.c
tc/emp_ematch.l
tc/emp_ematch.y
tc/emp_ematch.yacc.c
tc/emp_ematch.yacc.h
tc/f_basic.c
tc/f_bpf.c
tc/f_cgroup.c
tc/f_flow.c
tc/f_flower.c
tc/f_fw.c
tc/f_route.c
tc/f_rsvp.c
tc/f_tcindex.c
tc/f_u32.c
tc/m_action.c
tc/m_bpf.c
tc/m_connmark.c
tc/m_csum.c
tc/m_ematch.c
tc/m_ematch.h
tc/m_estimator.c
tc/m_gact.c
tc/m_ipt.c
tc/m_mirred.c
tc/m_nat.c
tc/m_pedit.c
tc/m_pedit.h
tc/m_police.c
tc/m_simple.c
tc/m_skbedit.c
tc/m_vlan.c
tc/m_xt.c
tc/m_xt_old.c
tc/p_icmp.c
tc/p_ip.c
tc/p_tcp.c
tc/p_udp.c
tc/q_atm.c
tc/q_cbq.c
tc/q_choke.c
tc/q_codel.c
tc/q_drr.c
tc/q_dsmark.c
tc/q_fifo.c
tc/q_fq.c
tc/q_fq_codel.c
tc/q_gred.c
tc/q_hfsc.c
tc/q_hhf.c
tc/q_htb.c
tc/q_ingress.c
tc/q_mqprio.c
tc/q_multiq.c
tc/q_netem.c
tc/q_openqueue.c
tc/q_pie.c
tc/q_prio.c
tc/q_qfq.c
tc/q_red.c
tc/q_rr.c
tc/q_sfb.c
tc/q_sfq.c
tc/q_tbf.c
tc/static-syms.c
tc/tc.c
tc/tc_bpf.c
tc/tc_bpf.h
tc/tc_cbq.c
tc/tc_cbq.h
tc/tc_class.c
tc/tc_common.h
tc/tc_core.c
tc/tc_core.h
tc/tc_estimator.c
tc/tc_exec.c
tc/tc_filter.c
tc/tc_monitor.c
tc/tc_qdisc.c
tc/tc_red.c
tc/tc_red.h
tc/tc_stab.c
tc/tc_util.c
tc/tc_util.h
tipc/bearer.c
tipc/bearer.h
tipc/cmdl.c
tipc/cmdl.h
tipc/link.c
tipc/link.h
tipc/media.c
tipc/media.h
tipc/misc.c
tipc/misc.h
tipc/msg.c
tipc/msg.h
tipc/nametable.c
tipc/nametable.h
tipc/node.c
tipc/node.h
tipc/socket.c
tipc/socket.h
tipc/tipc.c
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/fnmatch.h
/usr/include/getopt.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/link.h
/usr/include/linux/atm.h
/usr/include/linux/atmapi.h
/usr/include/linux/atmarp.h
/usr/include/linux/atmdev.h
/usr/include/linux/atmioc.h
/usr/include/linux/atmsap.h
/usr/include/linux/bpf.h
/usr/include/linux/bpf_common.h
/usr/include/linux/can.h
/usr/include/linux/can/netlink.h
/usr/include/linux/fib_rules.h
/usr/include/linux/filter.h
/usr/include/linux/fou.h
/usr/include/linux/gen_stats.h
/usr/include/linux/genetlink.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/icmp.h
/usr/include/linux/icmpv6.h
/usr/include/linux/if.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_addrlabel.h
/usr/include/linux/if_arp.h
/usr/include/linux/if_bonding.h
/usr/include/linux/if_bridge.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_link.h
/usr/include/linux/if_packet.h
/usr/include/linux/if_tun.h
/usr/include/linux/if_tunnel.h
/usr/include/linux/if_vlan.h
/usr/include/linux/in.h
/usr/include/linux/in6.h
/usr/include/linux/in_route.h
/usr/include/linux/inet_diag.h
/usr/include/linux/ip.h
/usr/include/linux/ip6_tunnel.h
/usr/include/linux/ipv6.h
/usr/include/linux/kernel.h
/usr/include/linux/l2tp.h
/usr/include/linux/libc-compat.h
/usr/include/linux/limits.h
/usr/include/linux/mpls.h
/usr/include/linux/neighbour.h
/usr/include/linux/netconf.h
/usr/include/linux/netdevice.h
/usr/include/linux/netfilter.h
/usr/include/linux/netfilter/ipset/ip_set.h
/usr/include/linux/netfilter/x_tables.h
/usr/include/linux/netfilter/xt_set.h
/usr/include/linux/netfilter/xt_tcpudp.h
/usr/include/linux/netfilter_ipv4.h
/usr/include/linux/netfilter_ipv4/ip_tables.h
/usr/include/linux/netfilter_ipv6/ip6_tables.h
/usr/include/linux/netlink.h
/usr/include/linux/netlink_diag.h
/usr/include/linux/packet_diag.h
/usr/include/linux/param.h
/usr/include/linux/pkt_cls.h
/usr/include/linux/pkt_sched.h
/usr/include/linux/posix_types.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/sock_diag.h
/usr/include/linux/socket.h
/usr/include/linux/sockios.h
/usr/include/linux/sysctl.h
/usr/include/linux/tc_act/tc_csum.h
/usr/include/linux/tc_act/tc_defact.h
/usr/include/linux/tc_act/tc_gact.h
/usr/include/linux/tc_act/tc_ipt.h
/usr/include/linux/tc_act/tc_mirred.h
/usr/include/linux/tc_act/tc_nat.h
/usr/include/linux/tc_act/tc_pedit.h
/usr/include/linux/tc_act/tc_skbedit.h
/usr/include/linux/tc_act/tc_vlan.h
/usr/include/linux/tc_ematch/tc_em_cmp.h
/usr/include/linux/tc_ematch/tc_em_meta.h
/usr/include/linux/tc_ematch/tc_em_nbyte.h
/usr/include/linux/tcp.h
/usr/include/linux/tcp_metrics.h
/usr/include/linux/tipc.h
/usr/include/linux/tipc_netlink.h
/usr/include/linux/types.h
/usr/include/linux/udp.h
/usr/include/linux/unix_diag.h
/usr/include/linux/veth.h
/usr/include/linux/xfrm.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/net/if.h
/usr/include/net/if_arp.h
/usr/include/netdb.h
/usr/include/netinet/icmp6.h
/usr/include/netinet/in.h
/usr/include/netinet/ip.h
/usr/include/netinet/ip_icmp.h
/usr/include/netinet/tcp.h
/usr/include/netinet/udp.h
/usr/include/pwd.h
/usr/include/resolv.h
/usr/include/sched.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/arpa/nameser.h
/usr/include/elf.h
/usr/include/endian.h
/usr/include/libio.h
/usr/include/linux/netfilter_ipv6.h
/usr/include/linux/stddef.h
/usr/include/linux/sysinfo.h
/usr/include/locale.h
/usr/include/rpc/netdb.h
/usr/include/stdc-predef.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/arpa/nameser_compat.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
